
bts_with_encoder_left.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  08017560  08017560  00018560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183b4  080183b4  0001a304  2**0
                  CONTENTS
  4 .ARM          00000008  080183b4  080183b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183bc  080183bc  0001a304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080183bc  080183bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080183c8  080183c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  080183cc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dcd4  20000308  080186d0  0001a308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dfdc  080186d0  0001afdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a304  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8de  00000000  00000000  0001a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc7  00000000  00000000  00034c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115b  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008984  00000000  00000000  0003afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d59  00000000  00000000  00043927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4206  00000000  00000000  0005d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00101886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  001018fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001085d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017548 	.word	0x08017548

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	08017548 	.word	0x08017548

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_d2f>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008c4:	bf24      	itt	cs
 80008c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ce:	d90d      	bls.n	80008ec <__aeabi_d2f+0x30>
 80008d0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008e4:	bf08      	it	eq
 80008e6:	f020 0001 	biceq.w	r0, r0, #1
 80008ea:	4770      	bx	lr
 80008ec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008f0:	d121      	bne.n	8000936 <__aeabi_d2f+0x7a>
 80008f2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008f6:	bfbc      	itt	lt
 80008f8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008fc:	4770      	bxlt	lr
 80008fe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000902:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000906:	f1c2 0218 	rsb	r2, r2, #24
 800090a:	f1c2 0c20 	rsb	ip, r2, #32
 800090e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000912:	fa20 f002 	lsr.w	r0, r0, r2
 8000916:	bf18      	it	ne
 8000918:	f040 0001 	orrne.w	r0, r0, #1
 800091c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000920:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000924:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000928:	ea40 000c 	orr.w	r0, r0, ip
 800092c:	fa23 f302 	lsr.w	r3, r3, r2
 8000930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000934:	e7cc      	b.n	80008d0 <__aeabi_d2f+0x14>
 8000936:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800093a:	d107      	bne.n	800094c <__aeabi_d2f+0x90>
 800093c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000940:	bf1e      	ittt	ne
 8000942:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000946:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800094a:	4770      	bxne	lr
 800094c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000950:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000954:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_ldivmod>:
 800095c:	b97b      	cbnz	r3, 800097e <__aeabi_ldivmod+0x22>
 800095e:	b972      	cbnz	r2, 800097e <__aeabi_ldivmod+0x22>
 8000960:	2900      	cmp	r1, #0
 8000962:	bfbe      	ittt	lt
 8000964:	2000      	movlt	r0, #0
 8000966:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800096a:	e006      	blt.n	800097a <__aeabi_ldivmod+0x1e>
 800096c:	bf08      	it	eq
 800096e:	2800      	cmpeq	r0, #0
 8000970:	bf1c      	itt	ne
 8000972:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000976:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800097a:	f000 b9b5 	b.w	8000ce8 <__aeabi_idiv0>
 800097e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000982:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000986:	2900      	cmp	r1, #0
 8000988:	db09      	blt.n	800099e <__aeabi_ldivmod+0x42>
 800098a:	2b00      	cmp	r3, #0
 800098c:	db1a      	blt.n	80009c4 <__aeabi_ldivmod+0x68>
 800098e:	f000 f84d 	bl	8000a2c <__udivmoddi4>
 8000992:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099a:	b004      	add	sp, #16
 800099c:	4770      	bx	lr
 800099e:	4240      	negs	r0, r0
 80009a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db1b      	blt.n	80009e0 <__aeabi_ldivmod+0x84>
 80009a8:	f000 f840 	bl	8000a2c <__udivmoddi4>
 80009ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b4:	b004      	add	sp, #16
 80009b6:	4240      	negs	r0, r0
 80009b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009bc:	4252      	negs	r2, r2
 80009be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009c2:	4770      	bx	lr
 80009c4:	4252      	negs	r2, r2
 80009c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ca:	f000 f82f 	bl	8000a2c <__udivmoddi4>
 80009ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d6:	b004      	add	sp, #16
 80009d8:	4240      	negs	r0, r0
 80009da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009de:	4770      	bx	lr
 80009e0:	4252      	negs	r2, r2
 80009e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e6:	f000 f821 	bl	8000a2c <__udivmoddi4>
 80009ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f2:	b004      	add	sp, #16
 80009f4:	4252      	negs	r2, r2
 80009f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009fa:	4770      	bx	lr

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a10:	f000 b96a 	b.w	8000ce8 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	460c      	mov	r4, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d14e      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a38:	4694      	mov	ip, r2
 8000a3a:	458c      	cmp	ip, r1
 8000a3c:	4686      	mov	lr, r0
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	d962      	bls.n	8000b0a <__udivmoddi4+0xde>
 8000a44:	b14a      	cbz	r2, 8000a5a <__udivmoddi4+0x2e>
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	4319      	orrs	r1, r3
 8000a56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5e:	fa1f f68c 	uxth.w	r6, ip
 8000a62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb04 f106 	mul.w	r1, r4, r6
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a82:	f080 8112 	bcs.w	8000caa <__udivmoddi4+0x27e>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 810f 	bls.w	8000caa <__udivmoddi4+0x27e>
 8000a8c:	3c02      	subs	r4, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a59      	subs	r1, r3, r1
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb00 f606 	mul.w	r6, r0, r6
 8000aa6:	429e      	cmp	r6, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x94>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ab2:	f080 80fc 	bcs.w	8000cae <__udivmoddi4+0x282>
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	f240 80f9 	bls.w	8000cae <__udivmoddi4+0x282>
 8000abc:	4463      	add	r3, ip
 8000abe:	3802      	subs	r0, #2
 8000ac0:	1b9b      	subs	r3, r3, r6
 8000ac2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	b11d      	cbz	r5, 8000ad2 <__udivmoddi4+0xa6>
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d905      	bls.n	8000ae6 <__udivmoddi4+0xba>
 8000ada:	b10d      	cbz	r5, 8000ae0 <__udivmoddi4+0xb4>
 8000adc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e7f5      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000ae6:	fab3 f183 	clz	r1, r3
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d146      	bne.n	8000b7c <__udivmoddi4+0x150>
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xcc>
 8000af2:	4290      	cmp	r0, r2
 8000af4:	f0c0 80f0 	bcc.w	8000cd8 <__udivmoddi4+0x2ac>
 8000af8:	1a86      	subs	r6, r0, r2
 8000afa:	eb64 0303 	sbc.w	r3, r4, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__udivmoddi4+0xa6>
 8000b04:	e9c5 6300 	strd	r6, r3, [r5]
 8000b08:	e7e3      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	f040 8090 	bne.w	8000c30 <__udivmoddi4+0x204>
 8000b10:	eba1 040c 	sub.w	r4, r1, ip
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b26:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b2e:	fb07 f006 	mul.w	r0, r7, r6
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x11c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x11a>
 8000b40:	4298      	cmp	r0, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2b4>
 8000b46:	4626      	mov	r6, r4
 8000b48:	1a1c      	subs	r4, r3, r0
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b52:	fb08 4410 	mls	r4, r8, r0, r4
 8000b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5a:	fb00 f707 	mul.w	r7, r0, r7
 8000b5e:	429f      	cmp	r7, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x148>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x146>
 8000b6c:	429f      	cmp	r7, r3
 8000b6e:	f200 80b0 	bhi.w	8000cd2 <__udivmoddi4+0x2a6>
 8000b72:	4620      	mov	r0, r4
 8000b74:	1bdb      	subs	r3, r3, r7
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	e7a5      	b.n	8000ac8 <__udivmoddi4+0x9c>
 8000b7c:	f1c1 0620 	rsb	r6, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 f706 	lsr.w	r7, r2, r6
 8000b86:	431f      	orrs	r7, r3
 8000b88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b90:	ea43 030c 	orr.w	r3, r3, ip
 8000b94:	40f4      	lsrs	r4, r6
 8000b96:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9a:	0c38      	lsrs	r0, r7, #16
 8000b9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb4:	45a1      	cmp	r9, r4
 8000bb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x1a6>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bc2:	f080 8084 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000bc6:	45a1      	cmp	r9, r4
 8000bc8:	f240 8081 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000bcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd0:	443c      	add	r4, r7
 8000bd2:	eba4 0409 	sub.w	r4, r4, r9
 8000bd6:	fa1f f983 	uxth.w	r9, r3
 8000bda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bde:	fb00 4413 	mls	r4, r0, r3, r4
 8000be2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d907      	bls.n	8000bfe <__udivmoddi4+0x1d2>
 8000bee:	193c      	adds	r4, r7, r4
 8000bf0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bf4:	d267      	bcs.n	8000cc6 <__udivmoddi4+0x29a>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0x29a>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c02:	fba0 9302 	umull	r9, r3, r0, r2
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	46ce      	mov	lr, r9
 8000c0e:	469c      	mov	ip, r3
 8000c10:	d351      	bcc.n	8000cb6 <__udivmoddi4+0x28a>
 8000c12:	d04e      	beq.n	8000cb2 <__udivmoddi4+0x286>
 8000c14:	b155      	cbz	r5, 8000c2c <__udivmoddi4+0x200>
 8000c16:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c22:	40cb      	lsrs	r3, r1
 8000c24:	431e      	orrs	r6, r3
 8000c26:	40cc      	lsrs	r4, r1
 8000c28:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e750      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f103 	lsr.w	r1, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c40:	4094      	lsls	r4, r2
 8000c42:	430c      	orrs	r4, r1
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4c:	fa1f f78c 	uxth.w	r7, ip
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3110 	mls	r1, r8, r0, r3
 8000c58:	0c23      	lsrs	r3, r4, #16
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f107 	mul.w	r1, r0, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x24c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c6e:	d22c      	bcs.n	8000cca <__udivmoddi4+0x29e>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d92a      	bls.n	8000cca <__udivmoddi4+0x29e>
 8000c74:	3802      	subs	r0, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c80:	fb08 3311 	mls	r3, r8, r1, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb01 f307 	mul.w	r3, r1, r7
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x276>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c98:	d213      	bcs.n	8000cc2 <__udivmoddi4+0x296>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d911      	bls.n	8000cc2 <__udivmoddi4+0x296>
 8000c9e:	3902      	subs	r1, #2
 8000ca0:	4464      	add	r4, ip
 8000ca2:	1ae4      	subs	r4, r4, r3
 8000ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca8:	e739      	b.n	8000b1e <__udivmoddi4+0xf2>
 8000caa:	4604      	mov	r4, r0
 8000cac:	e6f0      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e706      	b.n	8000ac0 <__udivmoddi4+0x94>
 8000cb2:	45c8      	cmp	r8, r9
 8000cb4:	d2ae      	bcs.n	8000c14 <__udivmoddi4+0x1e8>
 8000cb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cbe:	3801      	subs	r0, #1
 8000cc0:	e7a8      	b.n	8000c14 <__udivmoddi4+0x1e8>
 8000cc2:	4631      	mov	r1, r6
 8000cc4:	e7ed      	b.n	8000ca2 <__udivmoddi4+0x276>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	e799      	b.n	8000bfe <__udivmoddi4+0x1d2>
 8000cca:	4630      	mov	r0, r6
 8000ccc:	e7d4      	b.n	8000c78 <__udivmoddi4+0x24c>
 8000cce:	46d6      	mov	lr, sl
 8000cd0:	e77f      	b.n	8000bd2 <__udivmoddi4+0x1a6>
 8000cd2:	4463      	add	r3, ip
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	e74d      	b.n	8000b74 <__udivmoddi4+0x148>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	4623      	mov	r3, r4
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e70f      	b.n	8000b00 <__udivmoddi4+0xd4>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	e730      	b.n	8000b48 <__udivmoddi4+0x11c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cf8:	f006 fffa 	bl	8007cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <pvPortMallocMicroROS+0x17c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d04:	f000 f986 	bl	8001014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d08:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <pvPortMallocMicroROS+0x180>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 8090 	bne.w	8000e36 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01e      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d015      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f023 0307 	bic.w	r3, r3, #7
 8000d34:	3308      	adds	r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	e7fd      	b.n	8000d56 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d06a      	beq.n	8000e36 <pvPortMallocMicroROS+0x14a>
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d865      	bhi.n	8000e36 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d6a:	4b42      	ldr	r3, [pc, #264]	@ (8000e74 <pvPortMallocMicroROS+0x188>)
 8000d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <pvPortMallocMicroROS+0x188>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	e004      	b.n	8000d80 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d903      	bls.n	8000d92 <pvPortMallocMicroROS+0xa6>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <pvPortMallocMicroROS+0x17c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d04c      	beq.n	8000e36 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2208      	movs	r2, #8
 8000da2:	4413      	add	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1ad2      	subs	r2, r2, r3
 8000db6:	2308      	movs	r3, #8
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d920      	bls.n	8000e00 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dd4:	f383 8811 	msr	BASEPRI, r3
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	f3bf 8f4f 	dsb	sy
 8000de0:	613b      	str	r3, [r7, #16]
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1ad2      	subs	r2, r2, r3
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dfa:	69b8      	ldr	r0, [r7, #24]
 8000dfc:	f000 f96c 	bl	80010d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <pvPortMallocMicroROS+0x18c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d203      	bcs.n	8000e22 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <pvPortMallocMicroROS+0x18c>)
 8000e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <pvPortMallocMicroROS+0x180>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e36:	f006 ff69 	bl	8007d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00b      	beq.n	8000e5c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	60fb      	str	r3, [r7, #12]
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20003f2c 	.word	0x20003f2c
 8000e6c:	20003f38 	.word	0x20003f38
 8000e70:	20003f30 	.word	0x20003f30
 8000e74:	20003f24 	.word	0x20003f24
 8000e78:	20003f34 	.word	0x20003f34

08000e7c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d04a      	beq.n	8000f24 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	425b      	negs	r3, r3
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4413      	add	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10b      	bne.n	8000ec2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	60fb      	str	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	e7fd      	b.n	8000ebe <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ece:	f383 8811 	msr	BASEPRI, r3
 8000ed2:	f3bf 8f6f 	isb	sy
 8000ed6:	f3bf 8f4f 	dsb	sy
 8000eda:	60bb      	str	r3, [r7, #8]
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	e7fd      	b.n	8000ede <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d019      	beq.n	8000f24 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d115      	bne.n	8000f24 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f08:	f006 fef2 	bl	8007cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <vPortFreeMicroROS+0xb4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <vPortFreeMicroROS+0xb4>)
 8000f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f1a:	6938      	ldr	r0, [r7, #16]
 8000f1c:	f000 f8dc 	bl	80010d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f20:	f006 fef4 	bl	8007d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20003f38 	.word	0x20003f38
 8000f30:	20003f30 	.word	0x20003f30

08000f34 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f40:	2308      	movs	r3, #8
 8000f42:	425b      	negs	r3, r3
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <getBlockSize+0x38>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

	return count;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20003f38 	.word	0x20003f38

08000f70 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f7a:	f006 feb9 	bl	8007cf0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f7ff feb4 	bl	8000cec <pvPortMallocMicroROS>
 8000f84:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d017      	beq.n	8000fbc <pvPortReallocMicroROS+0x4c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d014      	beq.n	8000fbc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffce 	bl	8000f34 <getBlockSize>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d201      	bcs.n	8000fac <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f015 fbf6 	bl	80167a2 <memcpy>

		vPortFreeMicroROS(pv);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff60 	bl	8000e7c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000fbc:	f006 fea6 	bl	8007d0c <xTaskResumeAll>

	return newmem;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fd4:	f006 fe8c 	bl	8007cf0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff fe82 	bl	8000cec <pvPortMallocMicroROS>
 8000fe8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fee:	e004      	b.n	8000ffa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	613a      	str	r2, [r7, #16]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	617a      	str	r2, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f5      	bne.n	8000ff0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001004:	f006 fe82 	bl	8007d0c <xTaskResumeAll>
  	return mem;
 8001008:	68fb      	ldr	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800101a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800101e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <prvHeapInit+0xac>)
 8001022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3307      	adds	r3, #7
 8001032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 0307 	bic.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <prvHeapInit+0xac>)
 8001044:	4413      	add	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800104c:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <prvHeapInit+0xb0>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <prvHeapInit+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001060:	2208      	movs	r2, #8
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <prvHeapInit+0xb4>)
 8001074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <prvHeapInit+0xb4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <prvHeapInit+0xb4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <prvHeapInit+0xb4>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <prvHeapInit+0xb8>)
 80010a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <prvHeapInit+0xbc>)
 80010aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <prvHeapInit+0xc0>)
 80010ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000324 	.word	0x20000324
 80010c4:	20003f24 	.word	0x20003f24
 80010c8:	20003f2c 	.word	0x20003f2c
 80010cc:	20003f34 	.word	0x20003f34
 80010d0:	20003f30 	.word	0x20003f30
 80010d4:	20003f38 	.word	0x20003f38

080010d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <prvInsertBlockIntoFreeList+0xac>)
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e002      	b.n	80010ec <prvInsertBlockIntoFreeList+0x14>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8f7      	bhi.n	80010e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	d108      	bne.n	800111a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	441a      	add	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	441a      	add	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d118      	bne.n	8001160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <prvInsertBlockIntoFreeList+0xb0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d00d      	beq.n	8001156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	441a      	add	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e008      	b.n	8001168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <prvInsertBlockIntoFreeList+0xb0>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e003      	b.n	8001168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d002      	beq.n	8001176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20003f24 	.word	0x20003f24
 8001188:	20003f2c 	.word	0x20003f2c

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f001 fd00 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f83a 	bl	800120c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 fac8 	bl	800172c <MX_GPIO_Init>
  MX_DMA_Init();
 800119c:	f000 fa9e 	bl	80016dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 fa72 	bl	8001688 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011a4:	f000 f89e 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a8:	f000 f970 	bl	800148c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ac:	f000 f9c6 	bl	800153c <MX_TIM4_Init>
  MX_TIM5_Init();
 80011b0:	f000 fa1c 	bl	80015ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011b4:	2100      	movs	r1, #0
 80011b6:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <main+0x6c>)
 80011b8:	f003 f9b4 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011bc:	2104      	movs	r1, #4
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <main+0x6c>)
 80011c0:	f003 f9b0 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011c4:	2108      	movs	r1, #8
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <main+0x6c>)
 80011c8:	f003 f9ac 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011cc:	210c      	movs	r1, #12
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <main+0x6c>)
 80011d0:	f003 f9a8 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <main+0x70>)
 80011d6:	f003 f8e9 	bl	80043ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011da:	f005 fc6b 	bl	8006ab4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <main+0x74>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <main+0x78>)
 80011e4:	f005 fcb0 	bl	8006b48 <osThreadNew>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <main+0x7c>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ee:	f005 fc85 	bl	8006afc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <main+0x66>
 80011f6:	bf00      	nop
 80011f8:	20003f3c 	.word	0x20003f3c
 80011fc:	20004014 	.word	0x20004014
 8001200:	080175d0 	.word	0x080175d0
 8001204:	08001f55 	.word	0x08001f55
 8001208:	20004164 	.word	0x20004164

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	@ 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f015 f9f8 	bl	8016610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <SystemClock_Config+0xd0>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <SystemClock_Config+0xd0>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <SystemClock_Config+0xd0>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001258:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <SystemClock_Config+0xd4>)
 800125a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001280:	2310      	movs	r3, #16
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001284:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800128a:	2304      	movs	r3, #4
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800128e:	2307      	movs	r3, #7
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fba0 	bl	80039dc <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012a2:	f000 ff33 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fe02 	bl	8003ecc <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ce:	f000 ff1d 	bl	800210c <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	@ 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b096      	sub	sp, #88	@ 0x58
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f015 f977 	bl	8016610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001324:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <MX_TIM1_Init+0x1a4>)
 8001326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001328:	4b56      	ldr	r3, [pc, #344]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800132a:	2206      	movs	r2, #6
 800132c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b55      	ldr	r3, [pc, #340]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001336:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134e:	484d      	ldr	r0, [pc, #308]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001350:	f002 ffdc 	bl	800430c <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800135a:	f000 fed7 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001368:	4619      	mov	r1, r3
 800136a:	4846      	ldr	r0, [pc, #280]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800136c:	f003 fc70 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001376:	f000 fec9 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800137a:	4842      	ldr	r0, [pc, #264]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800137c:	f003 f878 	bl	8004470 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001386:	f000 fec1 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001392:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001396:	4619      	mov	r1, r3
 8001398:	483a      	ldr	r0, [pc, #232]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800139a:	f004 f821 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013a4:	f000 feb2 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	@ 0x60
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013ce:	f003 fb7d 	bl	8004acc <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013d8:	f000 fe98 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4827      	ldr	r0, [pc, #156]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013e6:	f003 fb71 	bl	8004acc <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013f0:	f000 fe8c 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	2208      	movs	r2, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	4821      	ldr	r0, [pc, #132]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013fe:	f003 fb65 	bl	8004acc <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001408:	f000 fe80 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001416:	f003 fb59 	bl	8004acc <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001420:	f000 fe74 	bl	800210c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	480f      	ldr	r0, [pc, #60]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001448:	f004 f838 	bl	80054bc <HAL_TIMEx_ConfigBreakDeadTime>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001452:	f000 fe5b 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001456:	2100      	movs	r1, #0
 8001458:	480a      	ldr	r0, [pc, #40]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800145a:	f003 f863 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800145e:	2104      	movs	r1, #4
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001462:	f003 f85f 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001466:	2108      	movs	r1, #8
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800146a:	f003 f85b 	bl	8004524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800146e:	210c      	movs	r1, #12
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001472:	f003 f857 	bl	8004524 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001476:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001478:	f001 f89a 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3758      	adds	r7, #88	@ 0x58
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20003f3c 	.word	0x20003f3c
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2224      	movs	r2, #36	@ 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f015 f8b8 	bl	8016610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <MX_TIM3_Init+0xac>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014fa:	f003 f8c3 	bl	8004684 <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 fe02 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_TIM3_Init+0xa8>)
 8001516:	f003 ff63 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001520:	f000 fdf4 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001524:	213c      	movs	r1, #60	@ 0x3c
 8001526:	4803      	ldr	r0, [pc, #12]	@ (8001534 <MX_TIM3_Init+0xa8>)
 8001528:	f003 f952 	bl	80047d0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20003f84 	.word	0x20003f84
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f015 f860 	bl	8016610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <MX_TIM4_Init+0xac>)
 800155c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015aa:	f003 f86b 	bl	8004684 <HAL_TIM_Encoder_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f000 fdaa 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015c6:	f003 ff0b 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015d0:	f000 fd9c 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015d4:	213c      	movs	r1, #60	@ 0x3c
 80015d6:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015d8:	f003 f8fa 	bl	80047d0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	@ 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20003fcc 	.word	0x20003fcc
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_TIM5_Init+0x94>)
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <MX_TIM5_Init+0x98>)
 800160c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001610:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001614:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_TIM5_Init+0x94>)
 800161e:	22c8      	movs	r2, #200	@ 0xc8
 8001620:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_TIM5_Init+0x94>)
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800162e:	4814      	ldr	r0, [pc, #80]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001630:	f002 fe6c 	bl	800430c <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 fd67 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_TIM5_Init+0x94>)
 800164c:	f003 fb00 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001656:	f000 fd59 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165a:	2320      	movs	r3, #32
 800165c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001668:	f003 feba 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001672:	f000 fd4b 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20004014 	.word	0x20004014
 8001684:	40000c00 	.word	0x40000c00

08001688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART2_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f003 ff62 	bl	8005588 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f000 fd1f 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000405c 	.word	0x2000405c
 80016d8:	40004400 	.word	0x40004400

080016dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2105      	movs	r1, #5
 8001702:	2010      	movs	r0, #16
 8001704:	f001 fb93 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f001 fbac 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2011      	movs	r0, #17
 8001714:	f001 fb8b 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f001 fba4 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a2c      	ldr	r2, [pc, #176]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4812      	ldr	r0, [pc, #72]	@ (8001800 <MX_GPIO_Init+0xd4>)
 80017b8:	f002 f8f6 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <MX_GPIO_Init+0xd8>)
 80017d4:	f001 ff64 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d8:	2320      	movs	r3, #32
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_GPIO_Init+0xd4>)
 80017f0:	f001 ff56 	bl	80036a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	@ 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020800 	.word	0x40020800

08001808 <read_encoder_angular_velocity>:
rcl_subscription_t subscriber;

encoder_data front;
encoder_data rear;

void read_encoder_angular_velocity(encoder_data *motor,TIM_HandleTypeDef *htim,int delay){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	motor->timer_counter = __HAL_TIM_GET_COUNTER(htim);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]

				 int change = motor->last_counter_value - motor->timer_counter;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]


			  	  if(change > 60000){
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001832:	4293      	cmp	r3, r2
 8001834:	dd0b      	ble.n	800184e <read_encoder_angular_velocity+0x46>
			  		motor->angular_velocity = -change + max_bits;// tekerlekteki açısal hızı veriyor olması lazım
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800183c:	33ff      	adds	r3, #255	@ 0xff
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	edc3 7a00 	vstr	s15, [r3]
 800184c:	e01a      	b.n	8001884 <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else if (change < -60000){
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <read_encoder_angular_velocity+0x140>)
 8001852:	4293      	cmp	r3, r2
 8001854:	da0a      	bge.n	800186c <read_encoder_angular_velocity+0x64>
			  		motor->angular_velocity = -change - max_bits;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <read_encoder_angular_velocity+0x144>)
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edc3 7a00 	vstr	s15, [r3]
 800186a:	e00b      	b.n	8001884 <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else{
			  		motor->angular_velocity = (motor->timer_counter - motor->last_counter_value);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	edc3 7a00 	vstr	s15, [r3]
			  	  }


	motor->angular_velocity *= 1000/delay;// geçen süreye bölmece
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fb92 f3f3 	sdiv	r3, r2, r3
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	edc3 7a00 	vstr	s15, [r3]
	if(htim->Instance == TIM2 && change > 0){
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ae:	d10d      	bne.n	80018cc <read_encoder_angular_velocity+0xc4>
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	dd0a      	ble.n	80018cc <read_encoder_angular_velocity+0xc4>
		motor->angular_velocity /=3500;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001950 <read_encoder_angular_velocity+0x148>
 80018c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edc3 7a00 	vstr	s15, [r3]
 80018ca:	e009      	b.n	80018e0 <read_encoder_angular_velocity+0xd8>
	}
	else{
		motor->angular_velocity /=6000;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001954 <read_encoder_angular_velocity+0x14c>
 80018d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edc3 7a00 	vstr	s15, [r3]
	}
	motor->angular_velocity *= 16; motor->angular_velocity /= 100;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80018ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	edc3 7a00 	vstr	s15, [r3]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001958 <read_encoder_angular_velocity+0x150>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edc3 7a00 	vstr	s15, [r3]
	motor ->angular_velocity*= 2 * M_PI;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe ff5d 	bl	80007cc <__aeabi_f2d>
 8001912:	a30b      	add	r3, pc, #44	@ (adr r3, 8001940 <read_encoder_angular_velocity+0x138>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fcca 	bl	80002b0 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7fe ffca 	bl	80008bc <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
	motor->last_counter_value = motor->timer_counter;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	609a      	str	r2, [r3, #8]
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	54442d18 	.word	0x54442d18
 8001944:	401921fb 	.word	0x401921fb
 8001948:	ffff15a0 	.word	0xffff15a0
 800194c:	ffff0001 	.word	0xffff0001
 8001950:	455ac000 	.word	0x455ac000
 8001954:	45bb8000 	.word	0x45bb8000
 8001958:	42c80000 	.word	0x42c80000

0800195c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <HAL_TIM_PeriodElapsedCallback+0x2e>

		read_encoder_angular_velocity(&front,&htim3, delay);//on motor
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4909      	ldr	r1, [pc, #36]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001976:	480a      	ldr	r0, [pc, #40]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001978:	f7ff ff46 	bl	8001808 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&rear, &htim4, delay);//arka motor
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001986:	f7ff ff3f 	bl	8001808 <read_encoder_angular_velocity>


	}


}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40000c00 	.word	0x40000c00
 8001998:	20000040 	.word	0x20000040
 800199c:	20003f84 	.word	0x20003f84
 80019a0:	20004188 	.word	0x20004188
 80019a4:	20003fcc 	.word	0x20003fcc
 80019a8:	20004194 	.word	0x20004194

080019ac <setPWM>:
int16_t speedToPWM(int16_t speed, int16_t max_speed) {
    return speed;
}

/* --- PWM Ayarı --- */
void setPWM(uint32_t channel1, uint32_t channel2, int16_t pwmvalue) {
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	b08f      	sub	sp, #60	@ 0x3c
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80019b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80019b8:	4613      	mov	r3, r2
 80019ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e



	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 80019bc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db79      	blt.n	8001ab8 <setPWM+0x10c>
 80019c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019cc:	dc74      	bgt.n	8001ab8 <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, fabs(pwmvalue));
 80019ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d113      	bne.n	80019fc <setPWM+0x50>
 80019d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fee5 	bl	80007a8 <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	623a      	str	r2, [r7, #32]
 80019e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	4b9c      	ldr	r3, [pc, #624]	@ (8001c5c <setPWM+0x2b0>)
 80019ec:	681c      	ldr	r4, [r3, #0]
 80019ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019f2:	f7fe ff43 	bl	800087c <__aeabi_d2uiz>
 80019f6:	4603      	mov	r3, r0
 80019f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80019fa:	e040      	b.n	8001a7e <setPWM+0xd2>
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d113      	bne.n	8001a2a <setPWM+0x7e>
 8001a02:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fece 	bl	80007a8 <__aeabi_i2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	61ba      	str	r2, [r7, #24]
 8001a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	4b90      	ldr	r3, [pc, #576]	@ (8001c5c <setPWM+0x2b0>)
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a20:	f7fe ff2c 	bl	800087c <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001a28:	e029      	b.n	8001a7e <setPWM+0xd2>
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d113      	bne.n	8001a58 <setPWM+0xac>
 8001a30:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe feb7 	bl	80007a8 <__aeabi_i2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	613a      	str	r2, [r7, #16]
 8001a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b85      	ldr	r3, [pc, #532]	@ (8001c5c <setPWM+0x2b0>)
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a4e:	f7fe ff15 	bl	800087c <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001a56:	e012      	b.n	8001a7e <setPWM+0xd2>
 8001a58:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fea3 	bl	80007a8 <__aeabi_i2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c5c <setPWM+0x2b0>)
 8001a70:	681c      	ldr	r4, [r3, #0]
 8001a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a76:	f7fe ff01 	bl	800087c <__aeabi_d2uiz>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2,0);
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <setPWM+0xe2>
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <setPWM+0x2b0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8c:	e115      	b.n	8001cba <setPWM+0x30e>
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d104      	bne.n	8001a9e <setPWM+0xf2>
 8001a94:	4b71      	ldr	r3, [pc, #452]	@ (8001c5c <setPWM+0x2b0>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a9c:	e10d      	b.n	8001cba <setPWM+0x30e>
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d104      	bne.n	8001aae <setPWM+0x102>
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8001c5c <setPWM+0x2b0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001aac:	e105      	b.n	8001cba <setPWM+0x30e>
 8001aae:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <setPWM+0x2b0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	e100      	b.n	8001cba <setPWM+0x30e>
    }

    else if(pwmvalue >= -1000 && pwmvalue < 0 ) {
 8001ab8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001abc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001ac0:	db75      	blt.n	8001bae <setPWM+0x202>
 8001ac2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da71      	bge.n	8001bae <setPWM+0x202>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 8001aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <setPWM+0x12e>
 8001ad0:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <setPWM+0x2b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad8:	e013      	b.n	8001b02 <setPWM+0x156>
 8001ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d104      	bne.n	8001aea <setPWM+0x13e>
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <setPWM+0x2b0>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ae8:	e00b      	b.n	8001b02 <setPWM+0x156>
 8001aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d104      	bne.n	8001afa <setPWM+0x14e>
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <setPWM+0x2b0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001af8:	e003      	b.n	8001b02 <setPWM+0x156>
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <setPWM+0x2b0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, fabs(pwmvalue));
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d113      	bne.n	8001b30 <setPWM+0x184>
 8001b08:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fe4b 	bl	80007a8 <__aeabi_i2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	603a      	str	r2, [r7, #0]
 8001b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <setPWM+0x2b0>)
 8001b20:	681c      	ldr	r4, [r3, #0]
 8001b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b26:	f7fe fea9 	bl	800087c <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b2e:	e0c4      	b.n	8001cba <setPWM+0x30e>
 8001b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d112      	bne.n	8001b5c <setPWM+0x1b0>
 8001b36:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fe34 	bl	80007a8 <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4615      	mov	r5, r2
 8001b46:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <setPWM+0x2b0>)
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	4628      	mov	r0, r5
 8001b50:	4631      	mov	r1, r6
 8001b52:	f7fe fe93 	bl	800087c <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001b5a:	e0ae      	b.n	8001cba <setPWM+0x30e>
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <setPWM+0x1dc>
 8001b62:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fe1e 	bl	80007a8 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4692      	mov	sl, r2
 8001b72:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <setPWM+0x2b0>)
 8001b78:	681c      	ldr	r4, [r3, #0]
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	f7fe fe7d 	bl	800087c <__aeabi_d2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001b86:	e098      	b.n	8001cba <setPWM+0x30e>
 8001b88:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fe0b 	bl	80007a8 <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4690      	mov	r8, r2
 8001b98:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <setPWM+0x2b0>)
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fe6a 	bl	800087c <__aeabi_d2uiz>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	6423      	str	r3, [r4, #64]	@ 0x40
 8001bac:	e085      	b.n	8001cba <setPWM+0x30e>
    }

    else if(pwmvalue > 1000 ) {
 8001bae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bb6:	dd3c      	ble.n	8001c32 <setPWM+0x286>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 1000);
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <setPWM+0x21e>
 8001bbe:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <setPWM+0x2b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc8:	e016      	b.n	8001bf8 <setPWM+0x24c>
 8001bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d105      	bne.n	8001bdc <setPWM+0x230>
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <setPWM+0x2b0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bda:	e00d      	b.n	8001bf8 <setPWM+0x24c>
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d105      	bne.n	8001bee <setPWM+0x242>
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <setPWM+0x2b0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bec:	e004      	b.n	8001bf8 <setPWM+0x24c>
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <setPWM+0x2b0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <setPWM+0x25c>
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <setPWM+0x2b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 8001c06:	e058      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 8001c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d104      	bne.n	8001c18 <setPWM+0x26c>
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <setPWM+0x2b0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c16:	e050      	b.n	8001cba <setPWM+0x30e>
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d104      	bne.n	8001c28 <setPWM+0x27c>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <setPWM+0x2b0>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c26:	e048      	b.n	8001cba <setPWM+0x30e>
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <setPWM+0x2b0>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c30:	e043      	b.n	8001cba <setPWM+0x30e>
    else if(pwmvalue < -1000 ) {
 8001c32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001c36:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c3a:	da3e      	bge.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <setPWM+0x2a0>
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <setPWM+0x2b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c4a:	e015      	b.n	8001c78 <setPWM+0x2cc>
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d106      	bne.n	8001c60 <setPWM+0x2b4>
 8001c52:	4b02      	ldr	r3, [pc, #8]	@ (8001c5c <setPWM+0x2b0>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c5a:	e00d      	b.n	8001c78 <setPWM+0x2cc>
 8001c5c:	20003f3c 	.word	0x20003f3c
 8001c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d104      	bne.n	8001c70 <setPWM+0x2c4>
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <setPWM+0x318>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c6e:	e003      	b.n	8001c78 <setPWM+0x2cc>
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <setPWM+0x318>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <setPWM+0x2de>
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <setPWM+0x318>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c88:	e017      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d105      	bne.n	8001c9c <setPWM+0x2f0>
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <setPWM+0x318>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c98:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c9a:	e00e      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d105      	bne.n	8001cae <setPWM+0x302>
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <setPWM+0x318>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001caa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001cac:	e005      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <setPWM+0x318>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001cb8:	e7ff      	b.n	8001cba <setPWM+0x30e>
 8001cba:	bf00      	nop
 8001cbc:	373c      	adds	r7, #60	@ 0x3c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc4:	20003f3c 	.word	0x20003f3c

08001cc8 <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Wheel *wheel, int max_pwm, int min_pwm, int dt) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]


	float error = wheel->targetSpeed*500-wheel->currentSpeed*500;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001e68 <calculatePID+0x1a0>
 8001ce0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001e68 <calculatePID+0x1a0>
 8001cee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf6:	edc7 7a06 	vstr	s15, [r7, #24]
    wheel->integralSpeed += error / dt;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d10:	ed97 6a06 	vldr	s12, [r7, #24]
 8001d14:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d20:	ee17 2a90 	vmov	r2, s15
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	60da      	str	r2, [r3, #12]
    if (wheel->integralSpeed > wheel->integralLimit) wheel->integralSpeed = max_pwm / wheel->KP;  // Anti-windup
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	dd0f      	ble.n	8001d64 <calculatePID+0x9c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5c:	ee17 2a90 	vmov	r2, s15
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	60da      	str	r2, [r3, #12]
    if (wheel->integralSpeed < -wheel->integralLimit) wheel->integralSpeed = min_pwm / wheel->KP;  // Anti-windup
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d76:	eef1 7a67 	vneg.f32	s15, s15
 8001d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d50f      	bpl.n	8001da4 <calculatePID+0xdc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9c:	ee17 2a90 	vmov	r2, s15
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	60da      	str	r2, [r3, #12]

    float derivative = (error - wheel->previousErrorSpeed) * dt;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001daa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel->previousErrorSpeed = error;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

    float output = wheel->KP * error + wheel->KI * wheel->integralSpeed + wheel->KD * derivative;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edd3 6a05 	vldr	s13, [r3, #20]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	edc7 7a07 	vstr	s15, [r7, #28]

    if (output > max_pwm) output = max_pwm;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd06      	ble.n	8001e2e <calculatePID+0x166>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output < min_pwm) output = min_pwm;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d506      	bpl.n	8001e54 <calculatePID+0x18c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e50:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	ee07 3a90 	vmov	s15, r3
}
 8001e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5e:	3724      	adds	r7, #36	@ 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	43fa0000 	.word	0x43fa0000

08001e6c <controlWheel>:

uint64_t now;
/* --- Tekerlek Kontrolü --- */
void controlWheel(uint32_t channel1, uint32_t channel2, Wheel *wheel) {
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]

	now = HAL_GetTick();
 8001e78:	f000 fef2 	bl	8002c60 <HAL_GetTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	461c      	mov	r4, r3
 8001e82:	4615      	mov	r5, r2
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <controlWheel+0x70>)
 8001e86:	e9c3 4500 	strd	r4, r5, [r3]
	dt = now - last_heartbeat_time;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <controlWheel+0x70>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <controlWheel+0x74>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <controlWheel+0x78>)
 8001e9a:	601a      	str	r2, [r3, #0]
	int16_t pwmValue = calculatePID(wheel, MAX_SPEED_PWM, MIN_SPEED_PWM, dt);
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <controlWheel+0x78>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <controlWheel+0x7c>)
 8001ea2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff0e 	bl	8001cc8 <calculatePID>
 8001eac:	eef0 7a40 	vmov.f32	s15, s0
 8001eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	82fb      	strh	r3, [r7, #22]
	last_heartbeat_time = HAL_GetTick();
 8001eba:	f000 fed1 	bl	8002c60 <HAL_GetTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <controlWheel+0x74>)
 8001ec2:	6013      	str	r3, [r2, #0]
	setPWM(channel1, channel2, pwmValue);
 8001ec4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fd6d 	bl	80019ac <setPWM>

}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200041a0 	.word	0x200041a0
 8001ee0:	20004178 	.word	0x20004178
 8001ee4:	20004174 	.word	0x20004174
 8001ee8:	fffffc18 	.word	0xfffffc18

08001eec <subscription_callback_controller>:




void subscription_callback_controller(const void * msgin){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]


	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2120      	movs	r1, #32
 8001efc:	4811      	ldr	r0, [pc, #68]	@ (8001f44 <subscription_callback_controller+0x58>)
 8001efe:	f001 fd53 	bl	80039a8 <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_message_time = HAL_GetTick();
 8001f02:	f000 fead 	bl	8002c60 <HAL_GetTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <subscription_callback_controller+0x5c>)
 8001f0a:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2120      	movs	r1, #32
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <subscription_callback_controller+0x58>)
 8001f12:	f001 fd49 	bl	80039a8 <HAL_GPIO_WritePin>
    FrontWheel.targetSpeed  = incoming_msg->solhiz;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f4c <subscription_callback_controller+0x60>)
 8001f1c:	6013      	str	r3, [r2, #0]
    BackWheel.targetSpeed   = incoming_msg->solhiz;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <subscription_callback_controller+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

    // Rover'ı kontrol et
    controlWheel(TIM_CHANNEL_1, TIM_CHANNEL_2, &FrontWheel);
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <subscription_callback_controller+0x60>)
 8001f28:	2104      	movs	r1, #4
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff ff9e 	bl	8001e6c <controlWheel>
    controlWheel(TIM_CHANNEL_3, TIM_CHANNEL_4, &BackWheel);
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <subscription_callback_controller+0x64>)
 8001f32:	210c      	movs	r1, #12
 8001f34:	2008      	movs	r0, #8
 8001f36:	f7ff ff99 	bl	8001e6c <controlWheel>

}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020000 	.word	0x40020000
 8001f48:	20004180 	.word	0x20004180
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000020 	.word	0x20000020

08001f54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b0cc      	sub	sp, #304	@ 0x130
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f62:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <StartDefaultTask+0x15c>)
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <StartDefaultTask+0x160>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4b52      	ldr	r3, [pc, #328]	@ (80020b8 <StartDefaultTask+0x164>)
 8001f6e:	4a53      	ldr	r2, [pc, #332]	@ (80020bc <StartDefaultTask+0x168>)
 8001f70:	4953      	ldr	r1, [pc, #332]	@ (80020c0 <StartDefaultTask+0x16c>)
 8001f72:	2001      	movs	r0, #1
 8001f74:	f008 fc10 	bl	800a798 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001f78:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f008 fb59 	bl	800a634 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001f82:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <StartDefaultTask+0x170>)
 8001f84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001f88:	4b4f      	ldr	r3, [pc, #316]	@ (80020c8 <StartDefaultTask+0x174>)
 8001f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80020cc <StartDefaultTask+0x178>)
 8001f90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001f94:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <StartDefaultTask+0x17c>)
 8001f96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	  	      rclc_executor_t executor;
	  	      rcl_allocator_t allocator;
	  	      rcl_publisher_t publisher;


	  	      allocator = rcl_get_default_allocator();
 8001f9a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f9e:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fb53 	bl	800a650 <rcutils_get_default_allocator>
 8001faa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001fae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fb2:	461d      	mov	r5, r3
 8001fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	6023      	str	r3, [r4, #0]

	  	      	    // create init_options
	  	      rclc_support_init(&support, 0, NULL, &allocator);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc0:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	f008 fa3e 	bl	800a448 <rclc_support_init>


	  	      	    // create node
	  	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 8001fcc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001fd0:	4a40      	ldr	r2, [pc, #256]	@ (80020d4 <StartDefaultTask+0x180>)
 8001fd2:	4941      	ldr	r1, [pc, #260]	@ (80020d8 <StartDefaultTask+0x184>)
 8001fd4:	4841      	ldr	r0, [pc, #260]	@ (80020dc <StartDefaultTask+0x188>)
 8001fd6:	f008 fa81 	bl	800a4dc <rclc_node_init_default>
	  	      rclc_subscription_init_default(
 8001fda:	f009 f909 	bl	800b1f0 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <StartDefaultTask+0x18c>)
 8001fe2:	493e      	ldr	r1, [pc, #248]	@ (80020dc <StartDefaultTask+0x188>)
 8001fe4:	483f      	ldr	r0, [pc, #252]	@ (80020e4 <StartDefaultTask+0x190>)
 8001fe6:	f008 fae9 	bl	800a5bc <rclc_subscription_init_default>
	  	      	        &subscriber,
	  	      	        &nodesub,
	  	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	  	      	        "joystick_cmd");

	  	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fee:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001ff2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f007 ff5e 	bl	8009eb8 <rclc_executor_init>
	  	      	    // create subscription




	  	      rclc_executor_add_subscription(
 8001ffc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8002000:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002004:	2300      	movs	r3, #0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <StartDefaultTask+0x194>)
 800200a:	4936      	ldr	r1, [pc, #216]	@ (80020e4 <StartDefaultTask+0x190>)
 800200c:	f007 ffc4 	bl	8009f98 <rclc_executor_add_subscription>
	  	      	      &executor, &subscriber, &submsg,
	  	      	      &subscription_callback_controller, ON_NEW_DATA);

	  	      rclc_publisher_init_default(
 8002010:	f009 f906 	bl	800b220 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8002014:	4602      	mov	r2, r0
 8002016:	f107 0020 	add.w	r0, r7, #32
 800201a:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <StartDefaultTask+0x198>)
 800201c:	492f      	ldr	r1, [pc, #188]	@ (80020dc <StartDefaultTask+0x188>)
 800201e:	f008 fa99 	bl	800a554 <rclc_publisher_init_default>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 8002022:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002026:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	4608      	mov	r0, r1
 8002030:	f008 f9d2 	bl	800a3d8 <rclc_executor_spin_some>
		  encodermsg.l_front = front.angular_velocity;
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <StartDefaultTask+0x19c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		  encodermsg.l_back =  rear.angular_velocity;
 800203c:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <StartDefaultTask+0x1a0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		  rcl_publish(&publisher, &encodermsg, NULL);
 8002044:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8002048:	f107 0320 	add.w	r3, r7, #32
 800204c:	2200      	movs	r2, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f007 fba4 	bl	800979c <rcl_publish>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 8002054:	f000 fe04 	bl	8002c60 <HAL_GetTick>
 8002058:	4603      	mov	r3, r0
 800205a:	4a27      	ldr	r2, [pc, #156]	@ (80020f8 <StartDefaultTask+0x1a4>)
 800205c:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_message_time > 250) {
 800205e:	f000 fdff 	bl	8002c60 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <StartDefaultTask+0x1a8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2bfa      	cmp	r3, #250	@ 0xfa
 800206c:	d903      	bls.n	8002076 <StartDefaultTask+0x122>
		      connection_lost = true;
 800206e:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <StartDefaultTask+0x1ac>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e002      	b.n	800207c <StartDefaultTask+0x128>
		  }
		  else {
		      connection_lost = false;
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <StartDefaultTask+0x1ac>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 800207c:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <StartDefaultTask+0x1ac>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ce      	beq.n	8002022 <StartDefaultTask+0xce>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <StartDefaultTask+0x1b0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <StartDefaultTask+0x1b0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <StartDefaultTask+0x1b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <StartDefaultTask+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	@ 0x40

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2120      	movs	r1, #32
 80020a8:	4817      	ldr	r0, [pc, #92]	@ (8002108 <StartDefaultTask+0x1b4>)
 80020aa:	f001 fc7d 	bl	80039a8 <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 80020ae:	e7b8      	b.n	8002022 <StartDefaultTask+0xce>
 80020b0:	08002a99 	.word	0x08002a99
 80020b4:	08002a31 	.word	0x08002a31
 80020b8:	08002a11 	.word	0x08002a11
 80020bc:	080029e5 	.word	0x080029e5
 80020c0:	2000405c 	.word	0x2000405c
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002159 	.word	0x08002159
 80020cc:	08002191 	.word	0x08002191
 80020d0:	080021fd 	.word	0x080021fd
 80020d4:	0801756c 	.word	0x0801756c
 80020d8:	08017570 	.word	0x08017570
 80020dc:	20004168 	.word	0x20004168
 80020e0:	0801757c 	.word	0x0801757c
 80020e4:	20004170 	.word	0x20004170
 80020e8:	08001eed 	.word	0x08001eed
 80020ec:	0801758c 	.word	0x0801758c
 80020f0:	20004188 	.word	0x20004188
 80020f4:	20004194 	.word	0x20004194
 80020f8:	2000417c 	.word	0x2000417c
 80020fc:	20004180 	.word	0x20004180
 8002100:	20004184 	.word	0x20004184
 8002104:	20003f3c 	.word	0x20003f3c
 8002108:	40020000 	.word	0x40020000

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x4>

08002114 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <microros_allocate+0x3c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <microros_allocate+0x3c>)
 800212c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <microros_allocate+0x40>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <microros_allocate+0x40>)
 800213c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fdd4 	bl	8000cec <pvPortMallocMicroROS>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200041a8 	.word	0x200041a8
 8002154:	200041ac 	.word	0x200041ac

08002158 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00c      	beq.n	8002182 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe fee3 	bl	8000f34 <getBlockSize>
 800216e:	4603      	mov	r3, r0
 8002170:	4a06      	ldr	r2, [pc, #24]	@ (800218c <microros_deallocate+0x34>)
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	461a      	mov	r2, r3
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <microros_deallocate+0x34>)
 800217a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7fe fe7d 	bl	8000e7c <vPortFreeMicroROS>
  }
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200041ac 	.word	0x200041ac

08002190 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <microros_reallocate+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <microros_reallocate+0x64>)
 80021aa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <microros_reallocate+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4413      	add	r3, r2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <microros_reallocate+0x68>)
 80021ba:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f7fe fd92 	bl	8000cec <pvPortMallocMicroROS>
 80021c8:	4603      	mov	r3, r0
 80021ca:	e00e      	b.n	80021ea <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7fe feb1 	bl	8000f34 <getBlockSize>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <microros_reallocate+0x68>)
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <microros_reallocate+0x68>)
 80021de:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7fe fec4 	bl	8000f70 <pvPortReallocMicroROS>
 80021e8:	4603      	mov	r3, r0
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200041a8 	.word	0x200041a8
 80021f8:	200041ac 	.word	0x200041ac

080021fc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <microros_zero_allocate+0x48>)
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <microros_zero_allocate+0x48>)
 800221a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <microros_zero_allocate+0x4c>)
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	4413      	add	r3, r2
 800222a:	461a      	mov	r2, r3
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <microros_zero_allocate+0x4c>)
 800222e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe fec9 	bl	8000fca <pvPortCallocMicroROS>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200041a8 	.word	0x200041a8
 8002248:	200041ac 	.word	0x200041ac
 800224c:	00000000 	.word	0x00000000

08002250 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002266:	a320      	add	r3, pc, #128	@ (adr r3, 80022e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe fb76 	bl	800095c <__aeabi_ldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800227a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800227e:	a31a      	add	r3, pc, #104	@ (adr r3, 80022e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe fb6a 	bl	800095c <__aeabi_ldivmod>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da20      	bge.n	80022d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <UTILS_NanosecondsToTimespec+0x90>)
 800229a:	fb82 1203 	smull	r1, r2, r2, r3
 800229e:	1712      	asrs	r2, r2, #28
 80022a0:	17db      	asrs	r3, r3, #31
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	17c8      	asrs	r0, r1, #31
 80022b2:	460c      	mov	r4, r1
 80022b4:	4605      	mov	r5, r0
 80022b6:	ebb2 0804 	subs.w	r8, r2, r4
 80022ba:	eb63 0905 	sbc.w	r9, r3, r5
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4906      	ldr	r1, [pc, #24]	@ (80022e4 <UTILS_NanosecondsToTimespec+0x94>)
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
    }
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e0:	44b82fa1 	.word	0x44b82fa1
 80022e4:	3b9aca00 	.word	0x3b9aca00
 80022e8:	3b9aca00 	.word	0x3b9aca00
 80022ec:	00000000 	.word	0x00000000

080022f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b08e      	sub	sp, #56	@ 0x38
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80022fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002300:	2300      	movs	r3, #0
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002316:	4618      	mov	r0, r3
 8002318:	f005 ff74 	bl	8008204 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	17da      	asrs	r2, r3, #31
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	61fa      	str	r2, [r7, #28]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	000b      	movs	r3, r1
 8002330:	2200      	movs	r2, #0
 8002332:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	2200      	movs	r2, #0
 800233a:	461c      	mov	r4, r3
 800233c:	4615      	mov	r5, r2
 800233e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002342:	1911      	adds	r1, r2, r4
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	416b      	adcs	r3, r5
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800234e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002352:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	f04f 0400 	mov.w	r4, #0
 800235e:	f04f 0500 	mov.w	r5, #0
 8002362:	015d      	lsls	r5, r3, #5
 8002364:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002368:	0154      	lsls	r4, r2, #5
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	ebb2 0800 	subs.w	r8, r2, r0
 8002372:	eb63 0901 	sbc.w	r9, r3, r1
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002382:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002386:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800238a:	4690      	mov	r8, r2
 800238c:	4699      	mov	r9, r3
 800238e:	eb18 0a00 	adds.w	sl, r8, r0
 8002392:	eb49 0b01 	adc.w	fp, r9, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023aa:	ebb2 040a 	subs.w	r4, r2, sl
 80023ae:	603c      	str	r4, [r7, #0]
 80023b0:	eb63 030b 	sbc.w	r3, r3, fp
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4623      	mov	r3, r4
 80023bc:	181b      	adds	r3, r3, r0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	462b      	mov	r3, r5
 80023c2:	eb41 0303 	adc.w	r3, r1, r3
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ce:	f7ff ff3f 	bl	8002250 <UTILS_NanosecondsToTimespec>

    return 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3738      	adds	r7, #56	@ 0x38
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_MspInit+0x54>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_MspInit+0x54>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <HAL_MspInit+0x54>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_MspInit+0x54>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_MspInit+0x54>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_MspInit+0x54>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	210f      	movs	r1, #15
 8002422:	f06f 0001 	mvn.w	r0, #1
 8002426:	f000 fd02 	bl	8002e2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <HAL_TIM_Base_MspInit+0x70>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6453      	str	r3, [r2, #68]	@ 0x44
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002466:	e01a      	b.n	800249e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <HAL_TIM_Base_MspInit+0x78>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d115      	bne.n	800249e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_TIM_Base_MspInit+0x74>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	2032      	movs	r0, #50	@ 0x32
 8002494:	f000 fccb 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002498:	2032      	movs	r0, #50	@ 0x32
 800249a:	f000 fce4 	bl	8002e66 <HAL_NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40000c00 	.word	0x40000c00

080024b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a32      	ldr	r2, [pc, #200]	@ (800259c <HAL_TIM_Encoder_MspInit+0xe8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12c      	bne.n	8002530 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e6:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a29      	ldr	r2, [pc, #164]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23c0      	movs	r3, #192	@ 0xc0
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251e:	2302      	movs	r3, #2
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	481e      	ldr	r0, [pc, #120]	@ (80025a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800252a:	f001 f8b9 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800252e:	e030      	b.n	8002592 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12b      	bne.n	8002592 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002572:	23c0      	movs	r3, #192	@ 0xc0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002582:	2302      	movs	r3, #2
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4807      	ldr	r0, [pc, #28]	@ (80025ac <HAL_TIM_Encoder_MspInit+0xf8>)
 800258e:	f001 f887 	bl	80036a0 <HAL_GPIO_Init>
}
 8002592:	bf00      	nop
 8002594:	3730      	adds	r7, #48	@ 0x30
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40000400 	.word	0x40000400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40020400 	.word	0x40020400

080025b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <HAL_TIM_MspPostInit+0x68>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d11e      	bne.n	8002610 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80025ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002600:	2301      	movs	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	4805      	ldr	r0, [pc, #20]	@ (8002620 <HAL_TIM_MspPostInit+0x70>)
 800260c:	f001 f848 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010000 	.word	0x40010000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_UART_MspInit+0x154>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 8093 	bne.w	800276e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <HAL_UART_MspInit+0x158>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_UART_MspInit+0x158>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002656:	6413      	str	r3, [r2, #64]	@ 0x40
 8002658:	4b48      	ldr	r3, [pc, #288]	@ (800277c <HAL_UART_MspInit+0x158>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <HAL_UART_MspInit+0x158>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a43      	ldr	r2, [pc, #268]	@ (800277c <HAL_UART_MspInit+0x158>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_UART_MspInit+0x158>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002680:	230c      	movs	r3, #12
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002690:	2307      	movs	r3, #7
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4839      	ldr	r0, [pc, #228]	@ (8002780 <HAL_UART_MspInit+0x15c>)
 800269c:	f001 f800 	bl	80036a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026a0:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026a2:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_UART_MspInit+0x164>)
 80026a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026a6:	4b37      	ldr	r3, [pc, #220]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ae:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b4:	4b33      	ldr	r3, [pc, #204]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ba:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c2:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026de:	4b29      	ldr	r3, [pc, #164]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026e4:	4827      	ldr	r0, [pc, #156]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026e6:	f000 fbd9 	bl	8002e9c <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80026f0:	f7ff fd0c 	bl	800210c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a23      	ldr	r2, [pc, #140]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026fa:	4a22      	ldr	r2, [pc, #136]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002702:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <HAL_UART_MspInit+0x16c>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002706:	4b21      	ldr	r3, [pc, #132]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002708:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800270c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002710:	2240      	movs	r2, #64	@ 0x40
 8002712:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800271a:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <HAL_UART_MspInit+0x168>)
 800271c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002720:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002728:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_UART_MspInit+0x168>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002734:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002736:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800273a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_UART_MspInit+0x168>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002742:	4812      	ldr	r0, [pc, #72]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002744:	f000 fbaa 	bl	8002e9c <HAL_DMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800274e:	f7ff fcdd 	bl	800210c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38
 8002758:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_UART_MspInit+0x168>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2105      	movs	r1, #5
 8002762:	2026      	movs	r0, #38	@ 0x26
 8002764:	f000 fb63 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002768:	2026      	movs	r0, #38	@ 0x26
 800276a:	f000 fb7c 	bl	8002e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800276e:	bf00      	nop
 8002770:	3728      	adds	r7, #40	@ 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40004400 	.word	0x40004400
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000
 8002784:	200040a4 	.word	0x200040a4
 8002788:	40026088 	.word	0x40026088
 800278c:	20004104 	.word	0x20004104
 8002790:	400260a0 	.word	0x400260a0

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <NMI_Handler+0x4>

0800279c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <MemManage_Handler+0x4>

080027ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <UsageFault_Handler+0x4>

080027bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ce:	f000 fa33 	bl	8002c38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027d2:	f005 fe9b 	bl	800850c <xTaskGetSchedulerState>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d001      	beq.n	80027e0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027dc:	f006 fc94 	bl	8009108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <DMA1_Stream5_IRQHandler+0x10>)
 80027ea:	f000 fcef 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200040a4 	.word	0x200040a4

080027f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <DMA1_Stream6_IRQHandler+0x10>)
 80027fe:	f000 fce5 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20004104 	.word	0x20004104

0800280c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <USART2_IRQHandler+0x10>)
 8002812:	f003 f81d 	bl	8005850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000405c 	.word	0x2000405c

08002820 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <TIM5_IRQHandler+0x10>)
 8002826:	f002 f861 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20004014 	.word	0x20004014

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_kill>:

int _kill(int pid, int sig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800284e:	f013 ff73 	bl	8016738 <__errno>
 8002852:	4603      	mov	r3, r0
 8002854:	2216      	movs	r2, #22
 8002856:	601a      	str	r2, [r3, #0]
  return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_exit>:

void _exit (int status)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe7 	bl	8002844 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002876:	bf00      	nop
 8002878:	e7fd      	b.n	8002876 <_exit+0x12>

0800287a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e00a      	b.n	80028a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800288c:	f3af 8000 	nop.w
 8002890:	4601      	mov	r1, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	60ba      	str	r2, [r7, #8]
 8002898:	b2ca      	uxtb	r2, r1
 800289a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	dbf0      	blt.n	800288c <_read+0x12>
  }

  return len;
 80028aa:	687b      	ldr	r3, [r7, #4]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e009      	b.n	80028da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	60ba      	str	r2, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	dbf1      	blt.n	80028c6 <_write+0x12>
  }
  return len;
 80028e2:	687b      	ldr	r3, [r7, #4]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_close>:

int _close(int file)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002914:	605a      	str	r2, [r3, #4]
  return 0;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_isatty>:

int _isatty(int file)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800292c:	2301      	movs	r3, #1
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f013 fed8 	bl	8016738 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20018000 	.word	0x20018000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	200041b4 	.word	0x200041b4
 80029bc:	2000dfe0 	.word	0x2000dfe0

080029c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029f2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80029f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029f8:	4904      	ldr	r1, [pc, #16]	@ (8002a0c <cubemx_transport_open+0x28>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f002 fe84 	bl	8005708 <HAL_UART_Receive_DMA>
    return true;
 8002a00:	2301      	movs	r3, #1
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200041b8 	.word	0x200041b8

08002a10 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f002 fe96 	bl	8005752 <HAL_UART_DMAStop>
    return true;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a44:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d11c      	bne.n	8002a8c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f002 fde4 	bl	8005628 <HAL_UART_Transmit_DMA>
 8002a60:	4603      	mov	r3, r0
 8002a62:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a64:	e002      	b.n	8002a6c <cubemx_transport_write+0x3c>
            osDelay(1);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f004 f900 	bl	8006c6c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <cubemx_transport_write+0x4e>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d1f3      	bne.n	8002a66 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <cubemx_transport_write+0x58>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	e002      	b.n	8002a8e <cubemx_transport_write+0x5e>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002a8c:	2300      	movs	r3, #0
    }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002aac:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab2:	b672      	cpsid	i
}
 8002ab4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <cubemx_transport_read+0x9c>)
 8002ac4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac6:	b662      	cpsie	i
}
 8002ac8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f004 f8cb 	bl	8006c6c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <cubemx_transport_read+0xa0>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <cubemx_transport_read+0x9c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d103      	bne.n	8002aea <cubemx_transport_read+0x52>
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	dbe3      	blt.n	8002ab2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002aee:	e011      	b.n	8002b14 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <cubemx_transport_read+0xa0>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	440b      	add	r3, r1
 8002afa:	4910      	ldr	r1, [pc, #64]	@ (8002b3c <cubemx_transport_read+0xa4>)
 8002afc:	5c8a      	ldrb	r2, [r1, r2]
 8002afe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <cubemx_transport_read+0xa0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <cubemx_transport_read+0xa0>)
 8002b0c:	6013      	str	r3, [r2, #0]
        wrote++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <cubemx_transport_read+0xa0>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <cubemx_transport_read+0x9c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d003      	beq.n	8002b28 <cubemx_transport_read+0x90>
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3e3      	bcc.n	8002af0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002b28:	69bb      	ldr	r3, [r7, #24]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200049bc 	.word	0x200049bc
 8002b38:	200049b8 	.word	0x200049b8
 8002b3c:	200041b8 	.word	0x200041b8

08002b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b44:	f7ff ff3c 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b48:	480c      	ldr	r0, [pc, #48]	@ (8002b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b4a:	490d      	ldr	r1, [pc, #52]	@ (8002b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b60:	4c0a      	ldr	r4, [pc, #40]	@ (8002b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002b6e:	f013 fde9 	bl	8016744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b72:	f7fe fb0b 	bl	800118c <main>
  bx  lr    
 8002b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8002b84:	080183cc 	.word	0x080183cc
  ldr r2, =_sbss
 8002b88:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002b8c:	2000dfdc 	.word	0x2000dfdc

08002b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC_IRQHandler>
	...

08002b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b98:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_Init+0x40>)
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_Init+0x40>)
 8002baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <HAL_Init+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_Init+0x40>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f000 f92b 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc2:	200f      	movs	r0, #15
 8002bc4:	f000 f808 	bl	8002bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc8:	f7ff fc0a 	bl	80023e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_InitTick+0x54>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_InitTick+0x58>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f943 	bl	8002e82 <HAL_SYSTICK_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00e      	b.n	8002c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0f      	cmp	r3, #15
 8002c0a:	d80a      	bhi.n	8002c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c14:	f000 f90b 	bl	8002e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c18:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <HAL_InitTick+0x5c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000048 	.word	0x20000048
 8002c30:	20000050 	.word	0x20000050
 8002c34:	2000004c 	.word	0x2000004c

08002c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_IncTick+0x20>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_IncTick+0x24>)
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000050 	.word	0x20000050
 8002c5c:	200049c0 	.word	0x200049c0

08002c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200049c0 	.word	0x200049c0

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff29 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff3e 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff31 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffa2 	bl	8002dd4 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff feda 	bl	8002c60 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e099      	b.n	8002fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed8:	e00f      	b.n	8002efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eda:	f7ff fec1 	bl	8002c60 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d908      	bls.n	8002efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e078      	b.n	8002fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e8      	bne.n	8002eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <HAL_DMA_Init+0x158>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d107      	bne.n	8002f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0307 	bic.w	r3, r3, #7
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d117      	bne.n	8002fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fb01 	bl	80035a8 <DMA_CheckFifoParam>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e016      	b.n	8002fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fab8 	bl	800353c <DMA_CalcBaseAndBitshift>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	223f      	movs	r2, #63	@ 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	f010803f 	.word	0xf010803f

08002ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_DMA_Start_IT+0x26>
 800301a:	2302      	movs	r3, #2
 800301c:	e040      	b.n	80030a0 <HAL_DMA_Start_IT+0xa8>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d12f      	bne.n	8003092 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa4a 	bl	80034e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	223f      	movs	r2, #63	@ 0x3f
 8003052:	409a      	lsls	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0216 	orr.w	r2, r2, #22
 8003066:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0208 	orr.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e005      	b.n	800309e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7ff fdd3 	bl	8002c60 <HAL_GetTick>
 80030ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e052      	b.n	8003180 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0216 	bic.w	r2, r2, #22
 80030e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_DMA_Abort+0x62>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0208 	bic.w	r2, r2, #8
 8003118:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	e013      	b.n	8003154 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312c:	f7ff fd98 	bl	8002c60 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b05      	cmp	r3, #5
 8003138:	d90c      	bls.n	8003154 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2203      	movs	r2, #3
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e015      	b.n	8003180 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e4      	bne.n	800312c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	223f      	movs	r2, #63	@ 0x3f
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d004      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00c      	b.n	80031c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2205      	movs	r2, #5
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_DMA_IRQHandler+0x248>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_DMA_IRQHandler+0x24c>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2208      	movs	r2, #8
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d043      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03c      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2210      	movs	r2, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e01f      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e016      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0208 	bic.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	2220      	movs	r2, #32
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808f 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8087 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2220      	movs	r2, #32
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b05      	cmp	r3, #5
 8003374:	d136      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x1da>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	223f      	movs	r2, #63	@ 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07e      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
        }
        return;
 80033e2:	e079      	b.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d031      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e02c      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
 8003412:	bf00      	nop
 8003414:	20000048 	.word	0x20000048
 8003418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e01e      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2205      	movs	r2, #5
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d307      	bcc.n	80034b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f2      	bne.n	8003498 <HAL_DMA_IRQHandler+0x2cc>
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x30e>
        return;
 80034d8:	bf00      	nop
    }
  }
}
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d108      	bne.n	8003520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800351e:	e007      	b.n	8003530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3b10      	subs	r3, #16
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <DMA_CalcBaseAndBitshift+0x64>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d909      	bls.n	800357e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	659a      	str	r2, [r3, #88]	@ 0x58
 800357c:	e007      	b.n	800358e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	aaaaaaab 	.word	0xaaaaaaab
 80035a4:	0801760c 	.word	0x0801760c

080035a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d856      	bhi.n	8003676 <DMA_CheckFifoParam+0xce>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <DMA_CheckFifoParam+0x28>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035f3 	.word	0x080035f3
 80035d8:	080035e1 	.word	0x080035e1
 80035dc:	08003677 	.word	0x08003677
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d046      	beq.n	800367a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e043      	b.n	800367a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035fa:	d140      	bne.n	800367e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e03d      	b.n	800367e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360a:	d121      	bne.n	8003650 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d837      	bhi.n	8003682 <DMA_CheckFifoParam+0xda>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <DMA_CheckFifoParam+0x70>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003629 	.word	0x08003629
 800361c:	0800362f 	.word	0x0800362f
 8003620:	08003629 	.word	0x08003629
 8003624:	08003641 	.word	0x08003641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e030      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d025      	beq.n	8003686 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363e:	e022      	b.n	8003686 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003648:	d11f      	bne.n	800368a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800364e:	e01c      	b.n	800368a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d903      	bls.n	800365e <DMA_CheckFifoParam+0xb6>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d003      	beq.n	8003664 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800365c:	e018      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      break;
 8003662:	e015      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e00b      	b.n	800368e <DMA_CheckFifoParam+0xe6>
      break;
 8003676:	bf00      	nop
 8003678:	e00a      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367a:	bf00      	nop
 800367c:	e008      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
 8003680:	e006      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
 8003684:	e004      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;   
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
    }
  } 
  
  return status; 
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e159      	b.n	8003970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f040 8148 	bne.w	800396a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d005      	beq.n	80036f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d130      	bne.n	8003754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 0201 	and.w	r2, r3, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b03      	cmp	r3, #3
 800375e:	d017      	beq.n	8003790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d123      	bne.n	80037e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	08da      	lsrs	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3208      	adds	r2, #8
 80037a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08da      	lsrs	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3208      	adds	r2, #8
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a2 	beq.w	800396a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b57      	ldr	r3, [pc, #348]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	4a56      	ldr	r2, [pc, #344]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003834:	6453      	str	r3, [r2, #68]	@ 0x44
 8003836:	4b54      	ldr	r3, [pc, #336]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003842:	4a52      	ldr	r2, [pc, #328]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	220f      	movs	r2, #15
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a49      	ldr	r2, [pc, #292]	@ (8003990 <HAL_GPIO_Init+0x2f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0x202>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a48      	ldr	r2, [pc, #288]	@ (8003994 <HAL_GPIO_Init+0x2f4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x1fe>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a47      	ldr	r2, [pc, #284]	@ (8003998 <HAL_GPIO_Init+0x2f8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_Init+0x1fa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a46      	ldr	r2, [pc, #280]	@ (800399c <HAL_GPIO_Init+0x2fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x1f6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <HAL_GPIO_Init+0x300>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_Init+0x1f2>
 800388e:	2304      	movs	r3, #4
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003892:	2307      	movs	r3, #7
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a0f      	ldr	r2, [pc, #60]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f aea2 	bls.w	80036bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	@ 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e267      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d075      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039fa:	4b88      	ldr	r3, [pc, #544]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d00c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a06:	4b85      	ldr	r3, [pc, #532]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d112      	bne.n	8003a38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a12:	4b82      	ldr	r3, [pc, #520]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	4b7e      	ldr	r3, [pc, #504]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d05b      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x108>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d157      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e242      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_OscConfig+0x74>
 8003a42:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a75      	ldr	r2, [pc, #468]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01d      	b.n	8003a8c <HAL_RCC_OscConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x98>
 8003a5a:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b6d      	ldr	r3, [pc, #436]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0xb0>
 8003a74:	4b69      	ldr	r3, [pc, #420]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a68      	ldr	r2, [pc, #416]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b66      	ldr	r3, [pc, #408]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a65      	ldr	r2, [pc, #404]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7ff f8e4 	bl	8002c60 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7ff f8e0 	bl	8002c60 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e207      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b5b      	ldr	r3, [pc, #364]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0xc0>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7ff f8d0 	bl	8002c60 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7ff f8cc 	bl	8002c60 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1f3      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	4b51      	ldr	r3, [pc, #324]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xe8>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d063      	beq.n	8003bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003af2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d11c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0a:	4b44      	ldr	r3, [pc, #272]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d116      	bne.n	8003b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x152>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e1c7      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4937      	ldr	r1, [pc, #220]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	e03a      	b.n	8003bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4c:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7ff f885 	bl	8002c60 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7ff f881 	bl	8002c60 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1a8      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4925      	ldr	r1, [pc, #148]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
 8003b8c:	e015      	b.n	8003bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7ff f864 	bl	8002c60 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7ff f860 	bl	8002c60 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e187      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d036      	beq.n	8003c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bce:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <HAL_RCC_OscConfig+0x248>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7ff f844 	bl	8002c60 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7ff f840 	bl	8002c60 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e167      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x200>
 8003bfa:	e01b      	b.n	8003c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_RCC_OscConfig+0x248>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7ff f82d 	bl	8002c60 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	e00e      	b.n	8003c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7ff f829 	bl	8002c60 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d907      	bls.n	8003c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e150      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	42470000 	.word	0x42470000
 8003c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	4b88      	ldr	r3, [pc, #544]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ea      	bne.n	8003c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8097 	beq.w	8003d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c46:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b7d      	ldr	r3, [pc, #500]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c62:	4b7a      	ldr	r3, [pc, #488]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b77      	ldr	r3, [pc, #476]	@ (8003e50 <HAL_RCC_OscConfig+0x474>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b74      	ldr	r3, [pc, #464]	@ (8003e50 <HAL_RCC_OscConfig+0x474>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a73      	ldr	r2, [pc, #460]	@ (8003e50 <HAL_RCC_OscConfig+0x474>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe ffe9 	bl	8002c60 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fe ffe5 	bl	8002c60 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e10c      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e50 <HAL_RCC_OscConfig+0x474>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2ea>
 8003cb8:	4b64      	ldr	r3, [pc, #400]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4a63      	ldr	r2, [pc, #396]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCC_OscConfig+0x324>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x30c>
 8003cce:	4b5f      	ldr	r3, [pc, #380]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cda:	4b5c      	ldr	r3, [pc, #368]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	4a5b      	ldr	r2, [pc, #364]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x324>
 8003ce8:	4b58      	ldr	r3, [pc, #352]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	4a57      	ldr	r2, [pc, #348]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf4:	4b55      	ldr	r3, [pc, #340]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf8:	4a54      	ldr	r2, [pc, #336]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 0304 	bic.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d015      	beq.n	8003d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe ffaa 	bl	8002c60 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fe ffa6 	bl	8002c60 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0cb      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d26:	4b49      	ldr	r3, [pc, #292]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ee      	beq.n	8003d10 <HAL_RCC_OscConfig+0x334>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fe ff94 	bl	8002c60 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fe ff90 	bl	8002c60 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0b5      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d52:	4b3e      	ldr	r3, [pc, #248]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ee      	bne.n	8003d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	4a38      	ldr	r2, [pc, #224]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a1 	beq.w	8003ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d7a:	4b34      	ldr	r3, [pc, #208]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d05c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d141      	bne.n	8003e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <HAL_RCC_OscConfig+0x478>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe ff64 	bl	8002c60 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe ff60 	bl	8002c60 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e087      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b27      	ldr	r3, [pc, #156]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	491b      	ldr	r1, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <HAL_RCC_OscConfig+0x478>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fe ff39 	bl	8002c60 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fe ff35 	bl	8002c60 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e05c      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x416>
 8003e10:	e054      	b.n	8003ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_RCC_OscConfig+0x478>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe ff22 	bl	8002c60 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fe ff1e 	bl	8002c60 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e045      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_OscConfig+0x470>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x444>
 8003e3e:	e03d      	b.n	8003ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e038      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40007000 	.word	0x40007000
 8003e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec8 <HAL_RCC_OscConfig+0x4ec>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d028      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d121      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d11a      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d111      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800

08003ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0cc      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b68      	ldr	r3, [pc, #416]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d90c      	bls.n	8003f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b65      	ldr	r3, [pc, #404]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b63      	ldr	r3, [pc, #396]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0b8      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f20:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a58      	ldr	r2, [pc, #352]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f38:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a52      	ldr	r2, [pc, #328]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b50      	ldr	r3, [pc, #320]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	494d      	ldr	r1, [pc, #308]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d044      	beq.n	8003fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d119      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e07f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e067      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003faa:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 0203 	bic.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4934      	ldr	r1, [pc, #208]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fbc:	f7fe fe50 	bl	8002c60 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc4:	f7fe fe4c 	bl	8002c60 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e04f      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 020c 	and.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1eb      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b25      	ldr	r3, [pc, #148]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d20c      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e032      	b.n	800407a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4916      	ldr	r1, [pc, #88]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	490e      	ldr	r1, [pc, #56]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004052:	f000 f821 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004056:	4602      	mov	r2, r0
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	490a      	ldr	r1, [pc, #40]	@ (800408c <HAL_RCC_ClockConfig+0x1c0>)
 8004064:	5ccb      	ldrb	r3, [r1, r3]
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800406e:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fdb0 	bl	8002bd8 <HAL_InitTick>

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023c00 	.word	0x40023c00
 8004088:	40023800 	.word	0x40023800
 800408c:	080175f4 	.word	0x080175f4
 8004090:	20000048 	.word	0x20000048
 8004094:	2000004c 	.word	0x2000004c

08004098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b094      	sub	sp, #80	@ 0x50
 800409e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b0:	4b79      	ldr	r3, [pc, #484]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d00d      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x40>
 80040bc:	2b08      	cmp	r3, #8
 80040be:	f200 80e1 	bhi.w	8004284 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x34>
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ca:	e0db      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b73      	ldr	r3, [pc, #460]	@ (800429c <HAL_RCC_GetSysClockFreq+0x204>)
 80040ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040d0:	e0db      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d2:	4b73      	ldr	r3, [pc, #460]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040d6:	e0d8      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d063      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	2200      	movs	r2, #0
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004100:	633b      	str	r3, [r7, #48]	@ 0x30
 8004102:	2300      	movs	r3, #0
 8004104:	637b      	str	r3, [r7, #52]	@ 0x34
 8004106:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	f04f 0000 	mov.w	r0, #0
 8004112:	f04f 0100 	mov.w	r1, #0
 8004116:	0159      	lsls	r1, r3, #5
 8004118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800411c:	0150      	lsls	r0, r2, #5
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4621      	mov	r1, r4
 8004124:	1a51      	subs	r1, r2, r1
 8004126:	6139      	str	r1, [r7, #16]
 8004128:	4629      	mov	r1, r5
 800412a:	eb63 0301 	sbc.w	r3, r3, r1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800413c:	4659      	mov	r1, fp
 800413e:	018b      	lsls	r3, r1, #6
 8004140:	4651      	mov	r1, sl
 8004142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004146:	4651      	mov	r1, sl
 8004148:	018a      	lsls	r2, r1, #6
 800414a:	4651      	mov	r1, sl
 800414c:	ebb2 0801 	subs.w	r8, r2, r1
 8004150:	4659      	mov	r1, fp
 8004152:	eb63 0901 	sbc.w	r9, r3, r1
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800416a:	4690      	mov	r8, r2
 800416c:	4699      	mov	r9, r3
 800416e:	4623      	mov	r3, r4
 8004170:	eb18 0303 	adds.w	r3, r8, r3
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	462b      	mov	r3, r5
 8004178:	eb49 0303 	adc.w	r3, r9, r3
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800418a:	4629      	mov	r1, r5
 800418c:	024b      	lsls	r3, r1, #9
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004194:	4621      	mov	r1, r4
 8004196:	024a      	lsls	r2, r1, #9
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800419e:	2200      	movs	r2, #0
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041a8:	f7fc fc28 	bl	80009fc <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b4:	e058      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	4611      	mov	r1, r2
 80041c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80041cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	0159      	lsls	r1, r3, #5
 80041de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e2:	0150      	lsls	r0, r2, #5
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4641      	mov	r1, r8
 80041ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ee:	4649      	mov	r1, r9
 80041f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004208:	ebb2 040a 	subs.w	r4, r2, sl
 800420c:	eb63 050b 	sbc.w	r5, r3, fp
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	00eb      	lsls	r3, r5, #3
 800421a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421e:	00e2      	lsls	r2, r4, #3
 8004220:	4614      	mov	r4, r2
 8004222:	461d      	mov	r5, r3
 8004224:	4643      	mov	r3, r8
 8004226:	18e3      	adds	r3, r4, r3
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	464b      	mov	r3, r9
 800422c:	eb45 0303 	adc.w	r3, r5, r3
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800423e:	4629      	mov	r1, r5
 8004240:	028b      	lsls	r3, r1, #10
 8004242:	4621      	mov	r1, r4
 8004244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004248:	4621      	mov	r1, r4
 800424a:	028a      	lsls	r2, r1, #10
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004252:	2200      	movs	r2, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	61fa      	str	r2, [r7, #28]
 8004258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425c:	f7fc fbce 	bl	80009fc <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004268:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x200>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	3301      	adds	r3, #1
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800427a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004282:	e002      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetSysClockFreq+0x204>)
 8004286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800428a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800428c:	4618      	mov	r0, r3
 800428e:	3750      	adds	r7, #80	@ 0x50
 8004290:	46bd      	mov	sp, r7
 8004292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	00f42400 	.word	0x00f42400
 80042a0:	007a1200 	.word	0x007a1200

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000048 	.word	0x20000048

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042c0:	f7ff fff0 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0a9b      	lsrs	r3, r3, #10
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	@ (80042e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08017604 	.word	0x08017604

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e8:	f7ff ffdc 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0b5b      	lsrs	r3, r3, #13
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40023800 	.word	0x40023800
 8004308:	08017604 	.word	0x08017604

0800430c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e041      	b.n	80043a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe f880 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f000 fd70 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d001      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e044      	b.n	800444e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1e      	ldr	r2, [pc, #120]	@ (800445c <HAL_TIM_Base_Start_IT+0xb0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ee:	d013      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <HAL_TIM_Base_Start_IT+0xb4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a19      	ldr	r2, [pc, #100]	@ (8004464 <HAL_TIM_Base_Start_IT+0xb8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_TIM_Base_Start_IT+0xbc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x6c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_TIM_Base_Start_IT+0xc0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d111      	bne.n	800443c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b06      	cmp	r3, #6
 8004428:	d010      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	e007      	b.n	800444c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e041      	b.n	8004506 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f839 	bl	800450e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fcbe 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_TIM_PWM_Start+0x24>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e022      	b.n	800458e <HAL_TIM_PWM_Start+0x6a>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d109      	bne.n	8004562 <HAL_TIM_PWM_Start+0x3e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e015      	b.n	800458e <HAL_TIM_PWM_Start+0x6a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d109      	bne.n	800457c <HAL_TIM_PWM_Start+0x58>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e008      	b.n	800458e <HAL_TIM_PWM_Start+0x6a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e068      	b.n	8004668 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0x82>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a4:	e013      	b.n	80045ce <HAL_TIM_PWM_Start+0xaa>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x92>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b4:	e00b      	b.n	80045ce <HAL_TIM_PWM_Start+0xaa>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Start+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c4:	e003      	b.n	80045ce <HAL_TIM_PWM_Start+0xaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2201      	movs	r2, #1
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fedc 	bl	8005394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a23      	ldr	r2, [pc, #140]	@ (8004670 <HAL_TIM_PWM_Start+0x14c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <HAL_TIM_PWM_Start+0x14c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_TIM_PWM_Start+0x10e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004608:	d013      	beq.n	8004632 <HAL_TIM_PWM_Start+0x10e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <HAL_TIM_PWM_Start+0x150>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_TIM_PWM_Start+0x10e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <HAL_TIM_PWM_Start+0x154>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_TIM_PWM_Start+0x10e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIM_PWM_Start+0x158>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIM_PWM_Start+0x10e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a14      	ldr	r2, [pc, #80]	@ (8004680 <HAL_TIM_PWM_Start+0x15c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d111      	bne.n	8004656 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d010      	beq.n	8004666 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	e007      	b.n	8004666 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40014000 	.word	0x40014000

08004684 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e097      	b.n	80047c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fd ff01 	bl	80024b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fba9 	bl	8004e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	4313      	orrs	r3, r2
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004724:	f023 030c 	bic.w	r3, r3, #12
 8004728:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	4313      	orrs	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	4313      	orrs	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4313      	orrs	r3, r2
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d110      	bne.n	8004822 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004806:	7b7b      	ldrb	r3, [r7, #13]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e069      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004820:	e031      	b.n	8004886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d110      	bne.n	800484a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800482e:	7b3b      	ldrb	r3, [r7, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e055      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004848:	e01d      	b.n	8004886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d108      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004856:	7b7b      	ldrb	r3, [r7, #13]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d102      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800485c:	7b3b      	ldrb	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e03e      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_TIM_Encoder_Start+0xc4>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d008      	beq.n	80048a4 <HAL_TIM_Encoder_Start+0xd4>
 8004892:	e00f      	b.n	80048b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fd79 	bl	8005394 <TIM_CCxChannelCmd>
      break;
 80048a2:	e016      	b.n	80048d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	2104      	movs	r1, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fd71 	bl	8005394 <TIM_CCxChannelCmd>
      break;
 80048b2:	e00e      	b.n	80048d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fd69 	bl	8005394 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	2104      	movs	r1, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fd62 	bl	8005394 <TIM_CCxChannelCmd>
      break;
 80048d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0202 	mvn.w	r2, #2
 8004920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa5b 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa4d 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa5e 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0204 	mvn.w	r2, #4
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa35 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa27 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa38 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d020      	beq.n	80049e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0208 	mvn.w	r2, #8
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa0f 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa01 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa12 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9e9 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9db 	bl	8004dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9ec 	bl	8004e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0201 	mvn.w	r2, #1
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc ff82 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fd7c 	bl	8005574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00c      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9bd 	bl	8004e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00c      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0220 	mvn.w	r2, #32
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fd4e 	bl	8005560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e0ae      	b.n	8004c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	f200 809f 	bhi.w	8004c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afa:	a201      	add	r2, pc, #4	@ (adr r2, 8004b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004c39 	.word	0x08004c39
 8004b08:	08004c39 	.word	0x08004c39
 8004b0c:	08004c39 	.word	0x08004c39
 8004b10:	08004b75 	.word	0x08004b75
 8004b14:	08004c39 	.word	0x08004c39
 8004b18:	08004c39 	.word	0x08004c39
 8004b1c:	08004c39 	.word	0x08004c39
 8004b20:	08004bb7 	.word	0x08004bb7
 8004b24:	08004c39 	.word	0x08004c39
 8004b28:	08004c39 	.word	0x08004c39
 8004b2c:	08004c39 	.word	0x08004c39
 8004b30:	08004bf7 	.word	0x08004bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa04 	bl	8004f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
      break;
 8004b72:	e064      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fa4a 	bl	8005014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
      break;
 8004bb4:	e043      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fa95 	bl	80050ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]
      break;
 8004bf4:	e023      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fadf 	bl	80051c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	61da      	str	r2, [r3, #28]
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0b4      	b.n	8004dd6 <HAL_TIM_ConfigClockSource+0x186>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca4:	d03e      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004caa:	f200 8087 	bhi.w	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb2:	f000 8086 	beq.w	8004dc2 <HAL_TIM_ConfigClockSource+0x172>
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cba:	d87f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b70      	cmp	r3, #112	@ 0x70
 8004cbe:	d01a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8004cc0:	2b70      	cmp	r3, #112	@ 0x70
 8004cc2:	d87b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b60      	cmp	r3, #96	@ 0x60
 8004cc6:	d050      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x11a>
 8004cc8:	2b60      	cmp	r3, #96	@ 0x60
 8004cca:	d877      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b50      	cmp	r3, #80	@ 0x50
 8004cce:	d03c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xfa>
 8004cd0:	2b50      	cmp	r3, #80	@ 0x50
 8004cd2:	d873      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d058      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x13a>
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d86f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b30      	cmp	r3, #48	@ 0x30
 8004cde:	d064      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b30      	cmp	r3, #48	@ 0x30
 8004ce2:	d86b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d060      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d867      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d05a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	e062      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d06:	f000 fb25 	bl	8005354 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	609a      	str	r2, [r3, #8]
      break;
 8004d22:	e04f      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d34:	f000 fb0e 	bl	8005354 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e03c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa82 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2150      	movs	r1, #80	@ 0x50
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fadb 	bl	800531e <TIM_ITRx_SetConfig>
      break;
 8004d68:	e02c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 faa1 	bl	80052be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2160      	movs	r1, #96	@ 0x60
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 facb 	bl	800531e <TIM_ITRx_SetConfig>
      break;
 8004d88:	e01c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fa62 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2140      	movs	r1, #64	@ 0x40
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fabb 	bl	800531e <TIM_ITRx_SetConfig>
      break;
 8004da8:	e00c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f000 fab2 	bl	800531e <TIM_ITRx_SetConfig>
      break;
 8004dba:	e003      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3a      	ldr	r2, [pc, #232]	@ (8004f2c <TIM_Base_SetConfig+0xfc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a37      	ldr	r2, [pc, #220]	@ (8004f30 <TIM_Base_SetConfig+0x100>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a36      	ldr	r2, [pc, #216]	@ (8004f34 <TIM_Base_SetConfig+0x104>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a35      	ldr	r2, [pc, #212]	@ (8004f38 <TIM_Base_SetConfig+0x108>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f2c <TIM_Base_SetConfig+0xfc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <TIM_Base_SetConfig+0x100>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a27      	ldr	r2, [pc, #156]	@ (8004f34 <TIM_Base_SetConfig+0x104>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <TIM_Base_SetConfig+0x108>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a25      	ldr	r2, [pc, #148]	@ (8004f3c <TIM_Base_SetConfig+0x10c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <TIM_Base_SetConfig+0x110>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	@ (8004f44 <TIM_Base_SetConfig+0x114>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <TIM_Base_SetConfig+0xfc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f023 0201 	bic.w	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0302 	bic.w	r3, r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <TIM_OC1_SetConfig+0xc8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10c      	bne.n	8004fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0308 	bic.w	r3, r3, #8
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0304 	bic.w	r3, r3, #4
 8004fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <TIM_OC1_SetConfig+0xc8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40010000 	.word	0x40010000

08005014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f023 0210 	bic.w	r2, r3, #16
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <TIM_OC2_SetConfig+0xd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <TIM_OC2_SetConfig+0xd4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d113      	bne.n	80050c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800509e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000

080050ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1d      	ldr	r2, [pc, #116]	@ (80051bc <TIM_OC3_SetConfig+0xd0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10d      	bne.n	8005166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <TIM_OC3_SetConfig+0xd0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d113      	bne.n	8005196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40010000 	.word	0x40010000

080051c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800520a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a10      	ldr	r2, [pc, #64]	@ (800525c <TIM_OC4_SetConfig+0x9c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d109      	bne.n	8005234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000

08005260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 030a 	bic.w	r3, r3, #10
 800529c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052be:	b480      	push	{r7}
 80052c0:	b087      	sub	sp, #28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f023 0210 	bic.w	r2, r3, #16
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	f043 0307 	orr.w	r3, r3, #7
 8005340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800536e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	431a      	orrs	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4313      	orrs	r3, r2
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	609a      	str	r2, [r3, #8]
}
 8005388:	bf00      	nop
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2201      	movs	r2, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e050      	b.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d018      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005444:	d013      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10c      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40014000 	.word	0x40014000

080054bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e03d      	b.n	8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e042      	b.n	8005620 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fd f838 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 ffc9 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	@ 0x30
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	d156      	bne.n	80056f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_UART_Transmit_DMA+0x26>
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e04f      	b.n	80056f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	88fa      	ldrh	r2, [r7, #6]
 800565c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2221      	movs	r2, #33	@ 0x21
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005676:	4a21      	ldr	r2, [pc, #132]	@ (80056fc <HAL_UART_Transmit_DMA+0xd4>)
 8005678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <HAL_UART_Transmit_DMA+0xd8>)
 8005680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005686:	4a1f      	ldr	r2, [pc, #124]	@ (8005704 <HAL_UART_Transmit_DMA+0xdc>)
 8005688:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	2200      	movs	r2, #0
 8005690:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3304      	adds	r3, #4
 80056a6:	461a      	mov	r2, r3
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	f7fd fca5 	bl	8002ff8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	617b      	str	r3, [r7, #20]
   return(result);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6a39      	ldr	r1, [r7, #32]
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e5      	bne.n	80056b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3730      	adds	r7, #48	@ 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	08005df1 	.word	0x08005df1
 8005700:	08005e8b 	.word	0x08005e8b
 8005704:	0800600f 	.word	0x0800600f

08005708 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	d112      	bne.n	8005748 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_Receive_DMA+0x26>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e00b      	b.n	800574a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	461a      	mov	r2, r3
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fcb0 	bl	80060a4 <UART_Start_Receive_DMA>
 8005744:	4603      	mov	r3, r0
 8005746:	e000      	b.n	800574a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b090      	sub	sp, #64	@ 0x40
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800575a:	2300      	movs	r3, #0
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005768:	2b80      	cmp	r3, #128	@ 0x80
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b21      	cmp	r3, #33	@ 0x21
 800577e:	d128      	bne.n	80057d2 <HAL_UART_DMAStop+0x80>
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d025      	beq.n	80057d2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fd fc6e 	bl	80030a8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fd03 	bl	80061d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b22      	cmp	r3, #34	@ 0x22
 80057f2:	d128      	bne.n	8005846 <HAL_UART_DMAStop+0xf4>
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d025      	beq.n	8005846 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	60fb      	str	r3, [r7, #12]
   return(result);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800581a:	61fa      	str	r2, [r7, #28]
 800581c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	617b      	str	r3, [r7, #20]
   return(result);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd fc34 	bl	80030a8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fcf1 	bl	8006228 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3740      	adds	r7, #64	@ 0x40
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b0ba      	sub	sp, #232	@ 0xe8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800588e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_UART_IRQHandler+0x66>
 80058a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fd99 	bl	80063e6 <UART_Receive_IT>
      return;
 80058b4:	e25b      	b.n	8005d6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80de 	beq.w	8005a7c <HAL_UART_IRQHandler+0x22c>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80d1 	beq.w	8005a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_UART_IRQHandler+0xae>
 80058e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_UART_IRQHandler+0xd2>
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	f043 0202 	orr.w	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_UART_IRQHandler+0xf6>
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_UART_IRQHandler+0x126>
 8005952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f043 0208 	orr.w	r2, r3, #8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 81f2 	beq.w	8005d64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_UART_IRQHandler+0x14e>
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fd24 	bl	80063e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_UART_IRQHandler+0x17a>
 80059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d04f      	beq.n	8005a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc2c 	bl	8006228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b40      	cmp	r3, #64	@ 0x40
 80059dc:	d141      	bne.n	8005a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1d9      	bne.n	80059de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	4a7e      	ldr	r2, [pc, #504]	@ (8005c30 <HAL_UART_IRQHandler+0x3e0>)
 8005a38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd fba2 	bl	8003188 <HAL_DMA_Abort_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e00e      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9b2 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	e00a      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9ae 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	e006      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9aa 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a76:	e175      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	bf00      	nop
    return;
 8005a7a:	e173      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f040 814f 	bne.w	8005d24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8148 	beq.w	8005d24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8141 	beq.w	8005d24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	f040 80b6 	bne.w	8005c34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8145 	beq.w	8005d68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	f080 813e 	bcs.w	8005d68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afe:	f000 8088 	beq.w	8005c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d9      	bne.n	8005b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e1      	bne.n	8005b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fa4b 	bl	80030a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f8d5 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c2e:	e09b      	b.n	8005d68 <HAL_UART_IRQHandler+0x518>
 8005c30:	080062ef 	.word	0x080062ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 808e 	beq.w	8005d6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8089 	beq.w	8005d6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e3      	bne.n	8005c5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0310 	bic.w	r3, r3, #16
 8005cee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cfc:	61fa      	str	r2, [r7, #28]
 8005cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e3      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f85b 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d22:	e023      	b.n	8005d6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <HAL_UART_IRQHandler+0x4f4>
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 faea 	bl	8006316 <UART_Transmit_IT>
    return;
 8005d42:	e014      	b.n	8005d6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <HAL_UART_IRQHandler+0x51e>
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fb2a 	bl	80063b6 <UART_EndTransmit_IT>
    return;
 8005d62:	e004      	b.n	8005d6e <HAL_UART_IRQHandler+0x51e>
    return;
 8005d64:	bf00      	nop
 8005d66:	e002      	b.n	8005d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8005d6c:	bf00      	nop
  }
}
 8005d6e:	37e8      	adds	r7, #232	@ 0xe8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b090      	sub	sp, #64	@ 0x40
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d137      	bne.n	8005e7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	623b      	str	r3, [r7, #32]
   return(result);
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e32:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e5      	bne.n	8005e12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e66:	61fa      	str	r2, [r7, #28]
 8005e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	69b9      	ldr	r1, [r7, #24]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	617b      	str	r3, [r7, #20]
   return(result);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e7a:	e002      	b.n	8005e82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e7e:	f7ff ff79 	bl	8005d74 <HAL_UART_TxCpltCallback>
}
 8005e82:	bf00      	nop
 8005e84:	3740      	adds	r7, #64	@ 0x40
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff ff75 	bl	8005d88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b09c      	sub	sp, #112	@ 0x70
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d172      	bne.n	8005fa8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ede:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ee8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005eea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f1c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e5      	bne.n	8005efc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3314      	adds	r3, #20
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3314      	adds	r3, #20
 8005f4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f50:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d119      	bne.n	8005fa8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005faa:	2200      	movs	r2, #0
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d106      	bne.n	8005fc4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fbe:	f7ff ff0b 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fc2:	e002      	b.n	8005fca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005fc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fc6:	f7ff fee9 	bl	8005d9c <HAL_UART_RxCpltCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3770      	adds	r7, #112	@ 0x70
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d108      	bne.n	8006000 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff feed 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ffe:	e002      	b.n	8006006 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fed5 	bl	8005db0 <HAL_UART_RxHalfCpltCallback>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b80      	cmp	r3, #128	@ 0x80
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b21      	cmp	r3, #33	@ 0x21
 8006040:	d108      	bne.n	8006054 <UART_DMAError+0x46>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2200      	movs	r2, #0
 800604c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800604e:	68b8      	ldr	r0, [r7, #8]
 8006050:	f000 f8c2 	bl	80061d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605e:	2b40      	cmp	r3, #64	@ 0x40
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b22      	cmp	r3, #34	@ 0x22
 8006074:	d108      	bne.n	8006088 <UART_DMAError+0x7a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006082:	68b8      	ldr	r0, [r7, #8]
 8006084:	f000 f8d0 	bl	8006228 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608c:	f043 0210 	orr.w	r2, r3, #16
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006094:	68b8      	ldr	r0, [r7, #8]
 8006096:	f7ff fe95 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b098      	sub	sp, #96	@ 0x60
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2222      	movs	r2, #34	@ 0x22
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <UART_Start_Receive_DMA+0x128>)
 80060d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d8:	4a3d      	ldr	r2, [pc, #244]	@ (80061d0 <UART_Start_Receive_DMA+0x12c>)
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	4a3c      	ldr	r2, [pc, #240]	@ (80061d4 <UART_Start_Receive_DMA+0x130>)
 80060e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e8:	2200      	movs	r2, #0
 80060ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	f7fc ff78 	bl	8002ff8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d019      	beq.n	800615a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800613c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006146:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006148:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800614c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800616a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	657b      	str	r3, [r7, #84]	@ 0x54
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3314      	adds	r3, #20
 8006178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800617a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006180:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	617b      	str	r3, [r7, #20]
   return(result);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3314      	adds	r3, #20
 80061ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80061ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80061b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6a39      	ldr	r1, [r7, #32]
 80061b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3760      	adds	r7, #96	@ 0x60
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	08005ea7 	.word	0x08005ea7
 80061d0:	08005fd3 	.word	0x08005fd3
 80061d4:	0800600f 	.word	0x0800600f

080061d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	@ 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	61ba      	str	r2, [r7, #24]
 8006202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6979      	ldr	r1, [r7, #20]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	613b      	str	r3, [r7, #16]
   return(result);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800621c:	bf00      	nop
 800621e:	3724      	adds	r7, #36	@ 0x24
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b095      	sub	sp, #84	@ 0x54
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006250:	643a      	str	r2, [r7, #64]	@ 0x40
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800625e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	61fb      	str	r3, [r7, #28]
   return(result);
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800628a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d119      	bne.n	80062d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c0:	61ba      	str	r2, [r7, #24]
 80062c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	613b      	str	r3, [r7, #16]
   return(result);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062e2:	bf00      	nop
 80062e4:	3754      	adds	r7, #84	@ 0x54
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fd5b 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b21      	cmp	r3, #33	@ 0x21
 8006328:	d13e      	bne.n	80063a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	d114      	bne.n	800635e <UART_Transmit_IT+0x48>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d110      	bne.n	800635e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	1c9a      	adds	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]
 800635c:	e008      	b.n	8006370 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	1c59      	adds	r1, r3, #1
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6211      	str	r1, [r2, #32]
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29b      	uxth	r3, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4619      	mov	r1, r3
 800637e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10f      	bne.n	80063a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006392:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e000      	b.n	80063aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fccc 	bl	8005d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b08c      	sub	sp, #48	@ 0x30
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b22      	cmp	r3, #34	@ 0x22
 80063f8:	f040 80ae 	bne.w	8006558 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006404:	d117      	bne.n	8006436 <UART_Receive_IT+0x50>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d113      	bne.n	8006436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	b29a      	uxth	r2, r3
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	@ 0x28
 8006434:	e026      	b.n	8006484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006448:	d007      	beq.n	800645a <UART_Receive_IT+0x74>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <UART_Receive_IT+0x82>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e008      	b.n	800647a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29b      	uxth	r3, r3
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4619      	mov	r1, r3
 8006492:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006494:	2b00      	cmp	r3, #0
 8006496:	d15d      	bne.n	8006554 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0220 	bic.w	r2, r2, #32
 80064a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d135      	bne.n	800654a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	613b      	str	r3, [r7, #16]
   return(result);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	623a      	str	r2, [r7, #32]
 8006506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	6a3a      	ldr	r2, [r7, #32]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	61bb      	str	r3, [r7, #24]
   return(result);
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d10a      	bne.n	800653c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fc48 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
 8006548:	e002      	b.n	8006550 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fc26 	bl	8005d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e002      	b.n	800655a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3730      	adds	r7, #48	@ 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b0c0      	sub	sp, #256	@ 0x100
 800656a:	af00      	add	r7, sp, #0
 800656c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	68d9      	ldr	r1, [r3, #12]
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	ea40 0301 	orr.w	r3, r0, r1
 800658c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065bc:	f021 010c 	bic.w	r1, r1, #12
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065ca:	430b      	orrs	r3, r1
 80065cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065de:	6999      	ldr	r1, [r3, #24]
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	ea40 0301 	orr.w	r3, r0, r1
 80065ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006830 <UART_SetConfig+0x2cc>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <UART_SetConfig+0xa0>
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006834 <UART_SetConfig+0x2d0>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d104      	bne.n	800660e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fd fe6e 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8006608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800660c:	e003      	b.n	8006616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7fd fe55 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8006612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006620:	f040 810c 	bne.w	800683c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800662e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	1891      	adds	r1, r2, r2
 800663c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800663e:	415b      	adcs	r3, r3
 8006640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006646:	4621      	mov	r1, r4
 8006648:	eb12 0801 	adds.w	r8, r2, r1
 800664c:	4629      	mov	r1, r5
 800664e:	eb43 0901 	adc.w	r9, r3, r1
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006666:	4690      	mov	r8, r2
 8006668:	4699      	mov	r9, r3
 800666a:	4623      	mov	r3, r4
 800666c:	eb18 0303 	adds.w	r3, r8, r3
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006674:	462b      	mov	r3, r5
 8006676:	eb49 0303 	adc.w	r3, r9, r3
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800668a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800668e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006692:	460b      	mov	r3, r1
 8006694:	18db      	adds	r3, r3, r3
 8006696:	653b      	str	r3, [r7, #80]	@ 0x50
 8006698:	4613      	mov	r3, r2
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066a8:	f7fa f9a8 	bl	80009fc <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4b61      	ldr	r3, [pc, #388]	@ (8006838 <UART_SetConfig+0x2d4>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	011c      	lsls	r4, r3, #4
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066d4:	415b      	adcs	r3, r3
 80066d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066dc:	4641      	mov	r1, r8
 80066de:	eb12 0a01 	adds.w	sl, r2, r1
 80066e2:	4649      	mov	r1, r9
 80066e4:	eb43 0b01 	adc.w	fp, r3, r1
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066fc:	4692      	mov	sl, r2
 80066fe:	469b      	mov	fp, r3
 8006700:	4643      	mov	r3, r8
 8006702:	eb1a 0303 	adds.w	r3, sl, r3
 8006706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800670a:	464b      	mov	r3, r9
 800670c:	eb4b 0303 	adc.w	r3, fp, r3
 8006710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006728:	460b      	mov	r3, r1
 800672a:	18db      	adds	r3, r3, r3
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
 800672e:	4613      	mov	r3, r2
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800673a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800673e:	f7fa f95d 	bl	80009fc <__aeabi_uldivmod>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4611      	mov	r1, r2
 8006748:	4b3b      	ldr	r3, [pc, #236]	@ (8006838 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2301 	umull	r2, r3, r3, r1
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	2264      	movs	r2, #100	@ 0x64
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	1acb      	subs	r3, r1, r3
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800675e:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006760:	fba3 2302 	umull	r2, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800676c:	441c      	add	r4, r3
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800677c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006788:	415b      	adcs	r3, r3
 800678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800678c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006790:	4641      	mov	r1, r8
 8006792:	1851      	adds	r1, r2, r1
 8006794:	6339      	str	r1, [r7, #48]	@ 0x30
 8006796:	4649      	mov	r1, r9
 8006798:	414b      	adcs	r3, r1
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067a8:	4659      	mov	r1, fp
 80067aa:	00cb      	lsls	r3, r1, #3
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b2:	4651      	mov	r1, sl
 80067b4:	00ca      	lsls	r2, r1, #3
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	4642      	mov	r2, r8
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067c4:	464b      	mov	r3, r9
 80067c6:	460a      	mov	r2, r1
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067e4:	460b      	mov	r3, r1
 80067e6:	18db      	adds	r3, r3, r3
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ea:	4613      	mov	r3, r2
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067fa:	f7fa f8ff 	bl	80009fc <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006804:	fba3 1302 	umull	r1, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	2164      	movs	r1, #100	@ 0x64
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	3332      	adds	r3, #50	@ 0x32
 8006816:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 0207 	and.w	r2, r3, #7
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4422      	add	r2, r4
 800682a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800682c:	e106      	b.n	8006a3c <UART_SetConfig+0x4d8>
 800682e:	bf00      	nop
 8006830:	40011000 	.word	0x40011000
 8006834:	40011400 	.word	0x40011400
 8006838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800684a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	6239      	str	r1, [r7, #32]
 8006856:	415b      	adcs	r3, r3
 8006858:	627b      	str	r3, [r7, #36]	@ 0x24
 800685a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685e:	4641      	mov	r1, r8
 8006860:	1854      	adds	r4, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb43 0501 	adc.w	r5, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	00eb      	lsls	r3, r5, #3
 8006872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006876:	00e2      	lsls	r2, r4, #3
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	4643      	mov	r3, r8
 800687e:	18e3      	adds	r3, r4, r3
 8006880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006884:	464b      	mov	r3, r9
 8006886:	eb45 0303 	adc.w	r3, r5, r3
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800689a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068aa:	4629      	mov	r1, r5
 80068ac:	008b      	lsls	r3, r1, #2
 80068ae:	4621      	mov	r1, r4
 80068b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b4:	4621      	mov	r1, r4
 80068b6:	008a      	lsls	r2, r1, #2
 80068b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068bc:	f7fa f89e 	bl	80009fc <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4b60      	ldr	r3, [pc, #384]	@ (8006a48 <UART_SetConfig+0x4e4>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011c      	lsls	r4, r3, #4
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	1891      	adds	r1, r2, r2
 80068e6:	61b9      	str	r1, [r7, #24]
 80068e8:	415b      	adcs	r3, r3
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f0:	4641      	mov	r1, r8
 80068f2:	1851      	adds	r1, r2, r1
 80068f4:	6139      	str	r1, [r7, #16]
 80068f6:	4649      	mov	r1, r9
 80068f8:	414b      	adcs	r3, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006908:	4659      	mov	r1, fp
 800690a:	00cb      	lsls	r3, r1, #3
 800690c:	4651      	mov	r1, sl
 800690e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006912:	4651      	mov	r1, sl
 8006914:	00ca      	lsls	r2, r1, #3
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	4603      	mov	r3, r0
 800691c:	4642      	mov	r2, r8
 800691e:	189b      	adds	r3, r3, r2
 8006920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006924:	464b      	mov	r3, r9
 8006926:	460a      	mov	r2, r1
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800693a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006948:	4649      	mov	r1, r9
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	4641      	mov	r1, r8
 800694e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006952:	4641      	mov	r1, r8
 8006954:	008a      	lsls	r2, r1, #2
 8006956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800695a:	f7fa f84f 	bl	80009fc <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b38      	ldr	r3, [pc, #224]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	@ 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	3332      	adds	r3, #50	@ 0x32
 8006978:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <UART_SetConfig+0x4e4>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006984:	441c      	add	r4, r3
 8006986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800698a:	2200      	movs	r2, #0
 800698c:	673b      	str	r3, [r7, #112]	@ 0x70
 800698e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	1891      	adds	r1, r2, r2
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	415b      	adcs	r3, r3
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a4:	4641      	mov	r1, r8
 80069a6:	1851      	adds	r1, r2, r1
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	4649      	mov	r1, r9
 80069ac:	414b      	adcs	r3, r1
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069bc:	4659      	mov	r1, fp
 80069be:	00cb      	lsls	r3, r1, #3
 80069c0:	4651      	mov	r1, sl
 80069c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c6:	4651      	mov	r1, sl
 80069c8:	00ca      	lsls	r2, r1, #3
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	4642      	mov	r2, r8
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069d6:	464b      	mov	r3, r9
 80069d8:	460a      	mov	r2, r1
 80069da:	eb42 0303 	adc.w	r3, r2, r3
 80069de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069f8:	4649      	mov	r1, r9
 80069fa:	008b      	lsls	r3, r1, #2
 80069fc:	4641      	mov	r1, r8
 80069fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a02:	4641      	mov	r1, r8
 8006a04:	008a      	lsls	r2, r1, #2
 8006a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a0a:	f7f9 fff7 	bl	80009fc <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	@ 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	@ 0x32
 8006a26:	4a08      	ldr	r2, [pc, #32]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4422      	add	r2, r4
 8006a3a:	609a      	str	r2, [r3, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <__NVIC_SetPriority>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	db0a      	blt.n	8006a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	490c      	ldr	r1, [pc, #48]	@ (8006a98 <__NVIC_SetPriority+0x4c>)
 8006a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6a:	0112      	lsls	r2, r2, #4
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	440b      	add	r3, r1
 8006a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a74:	e00a      	b.n	8006a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4908      	ldr	r1, [pc, #32]	@ (8006a9c <__NVIC_SetPriority+0x50>)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	3b04      	subs	r3, #4
 8006a84:	0112      	lsls	r2, r2, #4
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	440b      	add	r3, r1
 8006a8a:	761a      	strb	r2, [r3, #24]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	e000e100 	.word	0xe000e100
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f06f 0004 	mvn.w	r0, #4
 8006aaa:	f7ff ffcf 	bl	8006a4c <__NVIC_SetPriority>
#endif
}
 8006aae:	bf00      	nop
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aba:	f3ef 8305 	mrs	r3, IPSR
 8006abe:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ac6:	f06f 0305 	mvn.w	r3, #5
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	e00c      	b.n	8006ae8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ace:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <osKernelInitialize+0x44>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ad6:	4b08      	ldr	r3, [pc, #32]	@ (8006af8 <osKernelInitialize+0x44>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	e002      	b.n	8006ae8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ae8:	687b      	ldr	r3, [r7, #4]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	200049c4 	.word	0x200049c4

08006afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b02:	f3ef 8305 	mrs	r3, IPSR
 8006b06:	603b      	str	r3, [r7, #0]
  return(result);
 8006b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b0e:	f06f 0305 	mvn.w	r3, #5
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	e010      	b.n	8006b38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <osKernelStart+0x48>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d109      	bne.n	8006b32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b1e:	f7ff ffbf 	bl	8006aa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b22:	4b08      	ldr	r3, [pc, #32]	@ (8006b44 <osKernelStart+0x48>)
 8006b24:	2202      	movs	r2, #2
 8006b26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b28:	f001 f87a 	bl	8007c20 <vTaskStartScheduler>
      stat = osOK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e002      	b.n	8006b38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b38:	687b      	ldr	r3, [r7, #4]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200049c4 	.word	0x200049c4

08006b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	@ 0x38
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b58:	f3ef 8305 	mrs	r3, IPSR
 8006b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d17e      	bne.n	8006c62 <osThreadNew+0x11a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d07b      	beq.n	8006c62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b6a:	2380      	movs	r3, #128	@ 0x80
 8006b6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b6e:	2318      	movs	r3, #24
 8006b70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d045      	beq.n	8006c0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <osThreadNew+0x48>
        name = attr->name;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <osThreadNew+0x6e>
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b38      	cmp	r3, #56	@ 0x38
 8006ba8:	d805      	bhi.n	8006bb6 <osThreadNew+0x6e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <osThreadNew+0x72>
        return (NULL);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e054      	b.n	8006c64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00e      	beq.n	8006bf0 <osThreadNew+0xa8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	2b5b      	cmp	r3, #91	@ 0x5b
 8006bd8:	d90a      	bls.n	8006bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <osThreadNew+0xa8>
        mem = 1;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e010      	b.n	8006c12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10c      	bne.n	8006c12 <osThreadNew+0xca>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d108      	bne.n	8006c12 <osThreadNew+0xca>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <osThreadNew+0xca>
          mem = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	e001      	b.n	8006c12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c20:	9202      	str	r2, [sp, #8]
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fe1a 	bl	8007868 <xTaskCreateStatic>
 8006c34:	4603      	mov	r3, r0
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	e013      	b.n	8006c62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d110      	bne.n	8006c62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f107 0310 	add.w	r3, r7, #16
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fe68 	bl	8007928 <xTaskCreate>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <osThreadNew+0x11a>
            hTask = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c62:	693b      	ldr	r3, [r7, #16]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3728      	adds	r7, #40	@ 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c74:	f3ef 8305 	mrs	r3, IPSR
 8006c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <osDelay+0x1c>
    stat = osErrorISR;
 8006c80:	f06f 0305 	mvn.w	r3, #5
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e007      	b.n	8006c98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 ff8e 	bl	8007bb4 <vTaskDelay>
    }
  }

  return (stat);
 8006c98:	68fb      	ldr	r3, [r7, #12]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a07      	ldr	r2, [pc, #28]	@ (8006cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4a06      	ldr	r2, [pc, #24]	@ (8006cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8006cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2280      	movs	r2, #128	@ 0x80
 8006cc0:	601a      	str	r2, [r3, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200049c8 	.word	0x200049c8
 8006cd4:	20004a24 	.word	0x20004a24

08006cd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	@ (8006d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ce8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4a06      	ldr	r2, [pc, #24]	@ (8006d08 <vApplicationGetTimerTaskMemory+0x30>)
 8006cee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cf6:	601a      	str	r2, [r3, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20004c24 	.word	0x20004c24
 8006d08:	20004c80 	.word	0x20004c80

08006d0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f103 0208 	add.w	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f103 0208 	add.w	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc4:	d103      	bne.n	8006dce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e00c      	b.n	8006de8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e002      	b.n	8006ddc <vListInsert+0x2e>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d2f6      	bcs.n	8006dd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6892      	ldr	r2, [r2, #8]
 8006e36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6852      	ldr	r2, [r2, #4]
 8006e40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d103      	bne.n	8006e54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <xQueueGenericReset+0x2c>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60bb      	str	r3, [r7, #8]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ea0:	f002 f8a2 	bl	8008fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eac:	68f9      	ldr	r1, [r7, #12]
 8006eae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	441a      	add	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	22ff      	movs	r2, #255	@ 0xff
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	22ff      	movs	r2, #255	@ 0xff
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d114      	bne.n	8006f20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01a      	beq.n	8006f34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3310      	adds	r3, #16
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f91a 	bl	800813c <xTaskRemoveFromEventList>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d012      	beq.n	8006f34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <xQueueGenericReset+0xd0>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	e009      	b.n	8006f34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3310      	adds	r3, #16
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fef1 	bl	8006d0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3324      	adds	r3, #36	@ 0x24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff feec 	bl	8006d0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f34:	f002 f88a 	bl	800904c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f38:	2301      	movs	r3, #1
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08e      	sub	sp, #56	@ 0x38
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <xQueueGenericCreateStatic+0x56>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <xQueueGenericCreateStatic+0x5a>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <xQueueGenericCreateStatic+0x5c>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	623b      	str	r3, [r7, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	e7fd      	b.n	8006fbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <xQueueGenericCreateStatic+0x84>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <xQueueGenericCreateStatic+0x88>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <xQueueGenericCreateStatic+0x8a>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	61fb      	str	r3, [r7, #28]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fee:	2350      	movs	r3, #80	@ 0x50
 8006ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b50      	cmp	r3, #80	@ 0x50
 8006ff6:	d00b      	beq.n	8007010 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007010:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800701c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007024:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f805 	bl	8007042 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800703a:	4618      	mov	r0, r3
 800703c:	3730      	adds	r7, #48	@ 0x30
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e002      	b.n	8007064 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007070:	2101      	movs	r1, #1
 8007072:	69b8      	ldr	r0, [r7, #24]
 8007074:	f7ff fefe 	bl	8006e74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08e      	sub	sp, #56	@ 0x38
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <xQueueGenericSend+0x34>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0x42>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <xQueueGenericSend+0x46>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <xQueueGenericSend+0x48>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xQueueGenericSend+0x64>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d103      	bne.n	80070fa <xQueueGenericSend+0x72>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <xQueueGenericSend+0x76>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <xQueueGenericSend+0x78>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <xQueueGenericSend+0x94>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	e7fd      	b.n	8007118 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800711c:	f001 f9f6 	bl	800850c <xTaskGetSchedulerState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <xQueueGenericSend+0xa4>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <xQueueGenericSend+0xa8>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <xQueueGenericSend+0xaa>
 8007130:	2300      	movs	r3, #0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <xQueueGenericSend+0xc6>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61fb      	str	r3, [r7, #28]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800714e:	f001 ff4b 	bl	8008fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <xQueueGenericSend+0xdc>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d129      	bne.n	80071b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800716a:	f000 fa0f 	bl	800758c <prvCopyDataToQueue>
 800716e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	3324      	adds	r3, #36	@ 0x24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ffdd 	bl	800813c <xTaskRemoveFromEventList>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b3f      	ldr	r3, [pc, #252]	@ (8007288 <xQueueGenericSend+0x200>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	e00a      	b.n	80071b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071a0:	4b39      	ldr	r3, [pc, #228]	@ (8007288 <xQueueGenericSend+0x200>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071b0:	f001 ff4c 	bl	800904c <vPortExitCritical>
				return pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e063      	b.n	8007280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071be:	f001 ff45 	bl	800904c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e05c      	b.n	8007280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f83f 	bl	8008254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071da:	f001 ff37 	bl	800904c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071de:	f000 fd87 	bl	8007cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e2:	f001 ff01 	bl	8008fe8 <vPortEnterCritical>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071ec:	b25b      	sxtb	r3, r3
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f2:	d103      	bne.n	80071fc <xQueueGenericSend+0x174>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007202:	b25b      	sxtb	r3, r3
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007208:	d103      	bne.n	8007212 <xQueueGenericSend+0x18a>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007212:	f001 ff1b 	bl	800904c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007216:	1d3a      	adds	r2, r7, #4
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f82e 	bl	8008280 <xTaskCheckForTimeOut>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d124      	bne.n	8007274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800722a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722c:	f000 faa6 	bl	800777c <prvIsQueueFull>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d018      	beq.n	8007268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	3310      	adds	r3, #16
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f000 ff2a 	bl	8008098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007246:	f000 fa31 	bl	80076ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800724a:	f000 fd5f 	bl	8007d0c <xTaskResumeAll>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f af7c 	bne.w	800714e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <xQueueGenericSend+0x200>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e772      	b.n	800714e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800726a:	f000 fa1f 	bl	80076ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800726e:	f000 fd4d 	bl	8007d0c <xTaskResumeAll>
 8007272:	e76c      	b.n	800714e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007276:	f000 fa19 	bl	80076ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800727a:	f000 fd47 	bl	8007d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007280:	4618      	mov	r0, r3
 8007282:	3738      	adds	r7, #56	@ 0x38
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b090      	sub	sp, #64	@ 0x40
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <xQueueGenericSendFromISR+0x3e>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <xQueueGenericSendFromISR+0x42>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <xQueueGenericSendFromISR+0x44>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d103      	bne.n	80072fa <xQueueGenericSendFromISR+0x6e>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <xQueueGenericSendFromISR+0x72>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueGenericSendFromISR+0x74>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	623b      	str	r3, [r7, #32]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800731c:	f001 ff44 	bl	80091a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007320:	f3ef 8211 	mrs	r2, BASEPRI
 8007324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007338:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <xQueueGenericSendFromISR+0xc2>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d12f      	bne.n	80073ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007364:	f000 f912 	bl	800758c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007368:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007370:	d112      	bne.n	8007398 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	3324      	adds	r3, #36	@ 0x24
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fedc 	bl	800813c <xTaskRemoveFromEventList>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00e      	beq.n	80073a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e007      	b.n	80073a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800739c:	3301      	adds	r3, #1
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	b25a      	sxtb	r2, r3
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073a8:	2301      	movs	r3, #1
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80073ac:	e001      	b.n	80073b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3740      	adds	r7, #64	@ 0x40
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	@ 0x30
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <xQueueReceive+0x32>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	623b      	str	r3, [r7, #32]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <xQueueReceive+0x40>
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <xQueueReceive+0x44>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <xQueueReceive+0x46>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <xQueueReceive+0x62>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	61fb      	str	r3, [r7, #28]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800742a:	f001 f86f 	bl	800850c <xTaskGetSchedulerState>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <xQueueReceive+0x72>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <xQueueReceive+0x76>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <xQueueReceive+0x78>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <xQueueReceive+0x94>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61bb      	str	r3, [r7, #24]
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800745c:	f001 fdc4 	bl	8008fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01f      	beq.n	80074ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007470:	f000 f8f6 	bl	8007660 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	1e5a      	subs	r2, r3, #1
 8007478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00f      	beq.n	80074a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	3310      	adds	r3, #16
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fe57 	bl	800813c <xTaskRemoveFromEventList>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007494:	4b3c      	ldr	r3, [pc, #240]	@ (8007588 <xQueueReceive+0x1c0>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074a4:	f001 fdd2 	bl	800904c <vPortExitCritical>
				return pdPASS;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e069      	b.n	8007580 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b2:	f001 fdcb 	bl	800904c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e062      	b.n	8007580 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fec5 	bl	8008254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ce:	f001 fdbd 	bl	800904c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d2:	f000 fc0d 	bl	8007cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d6:	f001 fd87 	bl	8008fe8 <vPortEnterCritical>
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074e0:	b25b      	sxtb	r3, r3
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e6:	d103      	bne.n	80074f0 <xQueueReceive+0x128>
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074fc:	d103      	bne.n	8007506 <xQueueReceive+0x13e>
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007506:	f001 fda1 	bl	800904c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750a:	1d3a      	adds	r2, r7, #4
 800750c:	f107 0310 	add.w	r3, r7, #16
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f000 feb4 	bl	8008280 <xTaskCheckForTimeOut>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d123      	bne.n	8007566 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800751e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007520:	f000 f916 	bl	8007750 <prvIsQueueEmpty>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d017      	beq.n	800755a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	3324      	adds	r3, #36	@ 0x24
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fdb0 	bl	8008098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753a:	f000 f8b7 	bl	80076ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800753e:	f000 fbe5 	bl	8007d0c <xTaskResumeAll>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d189      	bne.n	800745c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007548:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <xQueueReceive+0x1c0>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	e780      	b.n	800745c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800755a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800755c:	f000 f8a6 	bl	80076ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007560:	f000 fbd4 	bl	8007d0c <xTaskResumeAll>
 8007564:	e77a      	b.n	800745c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007568:	f000 f8a0 	bl	80076ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800756c:	f000 fbce 	bl	8007d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007572:	f000 f8ed 	bl	8007750 <prvIsQueueEmpty>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f43f af6f 	beq.w	800745c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800757e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007580:	4618      	mov	r0, r3
 8007582:	3730      	adds	r7, #48	@ 0x30
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10d      	bne.n	80075c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d14d      	bne.n	800764e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 ffc6 	bl	8008548 <xTaskPriorityDisinherit>
 80075bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	e043      	b.n	800764e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d119      	bne.n	8007600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6858      	ldr	r0, [r3, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	461a      	mov	r2, r3
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	f00f f8e3 	bl	80167a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e4:	441a      	add	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d32b      	bcc.n	800764e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	e026      	b.n	800764e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68d8      	ldr	r0, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	f00f f8c9 	bl	80167a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	425b      	negs	r3, r3
 800761a:	441a      	add	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d207      	bcs.n	800763c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	425b      	negs	r3, r3
 8007636:	441a      	add	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d105      	bne.n	800764e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	3b01      	subs	r3, #1
 800764c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007656:	697b      	ldr	r3, [r7, #20]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d018      	beq.n	80076a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d303      	bcc.n	8007694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68d9      	ldr	r1, [r3, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	461a      	mov	r2, r3
 800769e:	6838      	ldr	r0, [r7, #0]
 80076a0:	f00f f87f 	bl	80167a2 <memcpy>
	}
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fc98 	bl	8008fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076c0:	e011      	b.n	80076e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d012      	beq.n	80076f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3324      	adds	r3, #36	@ 0x24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fd34 	bl	800813c <xTaskRemoveFromEventList>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076da:	f000 fe35 	bl	8008348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dce9      	bgt.n	80076c2 <prvUnlockQueue+0x16>
 80076ee:	e000      	b.n	80076f2 <prvUnlockQueue+0x46>
					break;
 80076f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	22ff      	movs	r2, #255	@ 0xff
 80076f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076fa:	f001 fca7 	bl	800904c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076fe:	f001 fc73 	bl	8008fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800770a:	e011      	b.n	8007730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3310      	adds	r3, #16
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fd0f 	bl	800813c <xTaskRemoveFromEventList>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007724:	f000 fe10 	bl	8008348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	3b01      	subs	r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dce9      	bgt.n	800770c <prvUnlockQueue+0x60>
 8007738:	e000      	b.n	800773c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800773a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	22ff      	movs	r2, #255	@ 0xff
 8007740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007744:	f001 fc82 	bl	800904c <vPortExitCritical>
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007758:	f001 fc46 	bl	8008fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e001      	b.n	800776e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800776e:	f001 fc6d 	bl	800904c <vPortExitCritical>

	return xReturn;
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007784:	f001 fc30 	bl	8008fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007790:	429a      	cmp	r2, r3
 8007792:	d102      	bne.n	800779a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e001      	b.n	800779e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f001 fc55 	bl	800904c <vPortExitCritical>

	return xReturn;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e014      	b.n	80077e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077bc:	4a0f      	ldr	r2, [pc, #60]	@ (80077fc <vQueueAddToRegistry+0x50>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077c8:	490c      	ldr	r1, [pc, #48]	@ (80077fc <vQueueAddToRegistry+0x50>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077d2:	4a0a      	ldr	r2, [pc, #40]	@ (80077fc <vQueueAddToRegistry+0x50>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4413      	add	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077de:	e006      	b.n	80077ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	d9e7      	bls.n	80077bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20005080 	.word	0x20005080

08007800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007810:	f001 fbea 	bl	8008fe8 <vPortEnterCritical>
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800781a:	b25b      	sxtb	r3, r3
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007820:	d103      	bne.n	800782a <vQueueWaitForMessageRestricted+0x2a>
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007830:	b25b      	sxtb	r3, r3
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007836:	d103      	bne.n	8007840 <vQueueWaitForMessageRestricted+0x40>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007840:	f001 fc04 	bl	800904c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	3324      	adds	r3, #36	@ 0x24
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fc45 	bl	80080e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800785a:	6978      	ldr	r0, [r7, #20]
 800785c:	f7ff ff26 	bl	80076ac <prvUnlockQueue>
	}
 8007860:	bf00      	nop
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08e      	sub	sp, #56	@ 0x38
 800786c:	af04      	add	r7, sp, #16
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xTaskCreateStatic+0x2c>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	623b      	str	r3, [r7, #32]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	61fb      	str	r3, [r7, #28]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078b2:	235c      	movs	r3, #92	@ 0x5c
 80078b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80078ba:	d00b      	beq.n	80078d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	61bb      	str	r3, [r7, #24]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01e      	beq.n	800791a <xTaskCreateStatic+0xb2>
 80078dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01b      	beq.n	800791a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078f4:	2300      	movs	r3, #0
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f850 	bl	80079b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007914:	f000 f8de 	bl	8007ad4 <prvAddNewTaskToReadyList>
 8007918:	e001      	b.n	800791e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800791e:	697b      	ldr	r3, [r7, #20]
	}
 8007920:	4618      	mov	r0, r3
 8007922:	3728      	adds	r7, #40	@ 0x28
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08c      	sub	sp, #48	@ 0x30
 800792c:	af04      	add	r7, sp, #16
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007938:	88fb      	ldrh	r3, [r7, #6]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fc75 	bl	800922c <pvPortMalloc>
 8007942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800794a:	205c      	movs	r0, #92	@ 0x5c
 800794c:	f001 fc6e 	bl	800922c <pvPortMalloc>
 8007950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	631a      	str	r2, [r3, #48]	@ 0x30
 800795e:	e005      	b.n	800796c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007960:	6978      	ldr	r0, [r7, #20]
 8007962:	f001 fd31 	bl	80093c8 <vPortFree>
 8007966:	e001      	b.n	800796c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d017      	beq.n	80079a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800797a:	88fa      	ldrh	r2, [r7, #6]
 800797c:	2300      	movs	r3, #0
 800797e:	9303      	str	r3, [sp, #12]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f80e 	bl	80079b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007996:	69f8      	ldr	r0, [r7, #28]
 8007998:	f000 f89c 	bl	8007ad4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800799c:	2301      	movs	r3, #1
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	e002      	b.n	80079a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079a8:	69bb      	ldr	r3, [r7, #24]
	}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b088      	sub	sp, #32
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	461a      	mov	r2, r3
 80079ca:	21a5      	movs	r1, #165	@ 0xa5
 80079cc:	f00e fe20 	bl	8016610 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079da:	3b01      	subs	r3, #1
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	f023 0307 	bic.w	r3, r3, #7
 80079e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	617b      	str	r3, [r7, #20]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d01f      	beq.n	8007a52 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e012      	b.n	8007a3e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	7819      	ldrb	r1, [r3, #0]
 8007a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	3334      	adds	r3, #52	@ 0x34
 8007a28:	460a      	mov	r2, r1
 8007a2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	2b0f      	cmp	r3, #15
 8007a42:	d9e9      	bls.n	8007a18 <prvInitialiseNewTask+0x66>
 8007a44:	e000      	b.n	8007a48 <prvInitialiseNewTask+0x96>
			{
				break;
 8007a46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a50:	e003      	b.n	8007a5a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	2b37      	cmp	r3, #55	@ 0x37
 8007a5e:	d901      	bls.n	8007a64 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a60:	2337      	movs	r3, #55	@ 0x37
 8007a62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	2200      	movs	r2, #0
 8007a74:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff f966 	bl	8006d4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	3318      	adds	r3, #24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff f961 	bl	8006d4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	69b8      	ldr	r0, [r7, #24]
 8007ab4:	f001 f966 	bl	8008d84 <pxPortInitialiseStack>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aca:	bf00      	nop
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007adc:	f001 fa84 	bl	8008fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007ae8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aea:	4b2c      	ldr	r3, [pc, #176]	@ (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007af2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007af8:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <prvAddNewTaskToReadyList+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d110      	bne.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b00:	f000 fc46 	bl	8008390 <prvInitialiseTaskLists>
 8007b04:	e00d      	b.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b06:	4b26      	ldr	r3, [pc, #152]	@ (8007ba0 <prvAddNewTaskToReadyList+0xcc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b0e:	4b23      	ldr	r3, [pc, #140]	@ (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d802      	bhi.n	8007b22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b22:	4b20      	ldr	r3, [pc, #128]	@ (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba4 <prvAddNewTaskToReadyList+0xd0>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d903      	bls.n	8007b48 <prvAddNewTaskToReadyList+0x74>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	4a18      	ldr	r2, [pc, #96]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd4>)
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <prvAddNewTaskToReadyList+0xd8>)
 8007b56:	441a      	add	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7ff f901 	bl	8006d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b64:	f001 fa72 	bl	800904c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b68:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <prvAddNewTaskToReadyList+0xcc>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b70:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <prvAddNewTaskToReadyList+0xc8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d207      	bcs.n	8007b8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <prvAddNewTaskToReadyList+0xdc>)
 8007b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20005594 	.word	0x20005594
 8007b9c:	200050c0 	.word	0x200050c0
 8007ba0:	200055a0 	.word	0x200055a0
 8007ba4:	200055b0 	.word	0x200055b0
 8007ba8:	2000559c 	.word	0x2000559c
 8007bac:	200050c4 	.word	0x200050c4
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d018      	beq.n	8007bf8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bc6:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <vTaskDelay+0x64>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <vTaskDelay+0x32>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60bb      	str	r3, [r7, #8]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007be6:	f000 f883 	bl	8007cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fd1b 	bl	8008628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bf2:	f000 f88b 	bl	8007d0c <xTaskResumeAll>
 8007bf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d107      	bne.n	8007c0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <vTaskDelay+0x68>)
 8007c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	200055bc 	.word	0x200055bc
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08a      	sub	sp, #40	@ 0x28
 8007c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c2e:	463a      	mov	r2, r7
 8007c30:	1d39      	adds	r1, r7, #4
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff f834 	bl	8006ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	4922      	ldr	r1, [pc, #136]	@ (8007cd8 <vTaskStartScheduler+0xb8>)
 8007c50:	4822      	ldr	r0, [pc, #136]	@ (8007cdc <vTaskStartScheduler+0xbc>)
 8007c52:	f7ff fe09 	bl	8007868 <xTaskCreateStatic>
 8007c56:	4603      	mov	r3, r0
 8007c58:	4a21      	ldr	r2, [pc, #132]	@ (8007ce0 <vTaskStartScheduler+0xc0>)
 8007c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c5c:	4b20      	ldr	r3, [pc, #128]	@ (8007ce0 <vTaskStartScheduler+0xc0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	e001      	b.n	8007c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d102      	bne.n	8007c7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c74:	f000 fd2c 	bl	80086d0 <xTimerCreateTimerTask>
 8007c78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d116      	bne.n	8007cae <vTaskStartScheduler+0x8e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	613b      	str	r3, [r7, #16]
}
 8007c92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c94:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <vTaskStartScheduler+0xc4>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ce8 <vTaskStartScheduler+0xc8>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ca2:	4b12      	ldr	r3, [pc, #72]	@ (8007cec <vTaskStartScheduler+0xcc>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ca8:	f001 f8fa 	bl	8008ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cac:	e00f      	b.n	8007cce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cb4:	d10b      	bne.n	8007cce <vTaskStartScheduler+0xae>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vTaskStartScheduler+0xaa>
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	0801759c 	.word	0x0801759c
 8007cdc:	08008361 	.word	0x08008361
 8007ce0:	200055b8 	.word	0x200055b8
 8007ce4:	200055b4 	.word	0x200055b4
 8007ce8:	200055a0 	.word	0x200055a0
 8007cec:	20005598 	.word	0x20005598

08007cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <vTaskSuspendAll+0x18>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	4a03      	ldr	r2, [pc, #12]	@ (8007d08 <vTaskSuspendAll+0x18>)
 8007cfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cfe:	bf00      	nop
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200055bc 	.word	0x200055bc

08007d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d1a:	4b42      	ldr	r3, [pc, #264]	@ (8007e24 <xTaskResumeAll+0x118>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <xTaskResumeAll+0x2e>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	603b      	str	r3, [r7, #0]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d3a:	f001 f955 	bl	8008fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d3e:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <xTaskResumeAll+0x118>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	4a37      	ldr	r2, [pc, #220]	@ (8007e24 <xTaskResumeAll+0x118>)
 8007d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d48:	4b36      	ldr	r3, [pc, #216]	@ (8007e24 <xTaskResumeAll+0x118>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d162      	bne.n	8007e16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d50:	4b35      	ldr	r3, [pc, #212]	@ (8007e28 <xTaskResumeAll+0x11c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d05e      	beq.n	8007e16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d58:	e02f      	b.n	8007dba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5a:	4b34      	ldr	r3, [pc, #208]	@ (8007e2c <xTaskResumeAll+0x120>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff f85a 	bl	8006e20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff f855 	bl	8006e20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <xTaskResumeAll+0x124>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d903      	bls.n	8007d8a <xTaskResumeAll+0x7e>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d86:	4a2a      	ldr	r2, [pc, #168]	@ (8007e30 <xTaskResumeAll+0x124>)
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4a27      	ldr	r2, [pc, #156]	@ (8007e34 <xTaskResumeAll+0x128>)
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7fe ffe0 	bl	8006d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007daa:	4b23      	ldr	r3, [pc, #140]	@ (8007e38 <xTaskResumeAll+0x12c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007db4:	4b21      	ldr	r3, [pc, #132]	@ (8007e3c <xTaskResumeAll+0x130>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dba:	4b1c      	ldr	r3, [pc, #112]	@ (8007e2c <xTaskResumeAll+0x120>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1cb      	bne.n	8007d5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dc8:	f000 fb80 	bl	80084cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e40 <xTaskResumeAll+0x134>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d010      	beq.n	8007dfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dd8:	f000 f846 	bl	8007e68 <xTaskIncrementTick>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007de2:	4b16      	ldr	r3, [pc, #88]	@ (8007e3c <xTaskResumeAll+0x130>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f1      	bne.n	8007dd8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007df4:	4b12      	ldr	r3, [pc, #72]	@ (8007e40 <xTaskResumeAll+0x134>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dfa:	4b10      	ldr	r3, [pc, #64]	@ (8007e3c <xTaskResumeAll+0x130>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e06:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <xTaskResumeAll+0x138>)
 8007e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e16:	f001 f919 	bl	800904c <vPortExitCritical>

	return xAlreadyYielded;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	200055bc 	.word	0x200055bc
 8007e28:	20005594 	.word	0x20005594
 8007e2c:	20005554 	.word	0x20005554
 8007e30:	2000559c 	.word	0x2000559c
 8007e34:	200050c4 	.word	0x200050c4
 8007e38:	200050c0 	.word	0x200050c0
 8007e3c:	200055a8 	.word	0x200055a8
 8007e40:	200055a4 	.word	0x200055a4
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e4e:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <xTaskGetTickCount+0x1c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e54:	687b      	ldr	r3, [r7, #4]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20005598 	.word	0x20005598

08007e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b4f      	ldr	r3, [pc, #316]	@ (8007fb0 <xTaskIncrementTick+0x148>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8090 	bne.w	8007f9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e84:	4a4b      	ldr	r2, [pc, #300]	@ (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d121      	bne.n	8007ed4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e90:	4b49      	ldr	r3, [pc, #292]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	603b      	str	r3, [r7, #0]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <xTaskIncrementTick+0x46>
 8007eb2:	4b41      	ldr	r3, [pc, #260]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	4b40      	ldr	r3, [pc, #256]	@ (8007fbc <xTaskIncrementTick+0x154>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8007fbc <xTaskIncrementTick+0x154>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc0 <xTaskIncrementTick+0x158>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8007fc0 <xTaskIncrementTick+0x158>)
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	f000 fafc 	bl	80084cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d349      	bcc.n	8007f72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ede:	4b36      	ldr	r3, [pc, #216]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee8:	4b36      	ldr	r3, [pc, #216]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007eee:	601a      	str	r2, [r3, #0]
					break;
 8007ef0:	e03f      	b.n	8007f72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b31      	ldr	r3, [pc, #196]	@ (8007fb8 <xTaskIncrementTick+0x150>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8007fc4 <xTaskIncrementTick+0x15c>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f10:	e02f      	b.n	8007f72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe ff82 	bl	8006e20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3318      	adds	r3, #24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe ff79 	bl	8006e20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f32:	4b25      	ldr	r3, [pc, #148]	@ (8007fc8 <xTaskIncrementTick+0x160>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d903      	bls.n	8007f42 <xTaskIncrementTick+0xda>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a22      	ldr	r2, [pc, #136]	@ (8007fc8 <xTaskIncrementTick+0x160>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fcc <xTaskIncrementTick+0x164>)
 8007f50:	441a      	add	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe ff04 	bl	8006d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <xTaskIncrementTick+0x168>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3b8      	bcc.n	8007ede <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f70:	e7b5      	b.n	8007ede <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f72:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <xTaskIncrementTick+0x168>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4914      	ldr	r1, [pc, #80]	@ (8007fcc <xTaskIncrementTick+0x164>)
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d901      	bls.n	8007f8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f8e:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	e004      	b.n	8007fa6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <xTaskIncrementTick+0x170>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd8 <xTaskIncrementTick+0x170>)
 8007fa4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fa6:	697b      	ldr	r3, [r7, #20]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	200055bc 	.word	0x200055bc
 8007fb4:	20005598 	.word	0x20005598
 8007fb8:	2000554c 	.word	0x2000554c
 8007fbc:	20005550 	.word	0x20005550
 8007fc0:	200055ac 	.word	0x200055ac
 8007fc4:	200055b4 	.word	0x200055b4
 8007fc8:	2000559c 	.word	0x2000559c
 8007fcc:	200050c4 	.word	0x200050c4
 8007fd0:	200050c0 	.word	0x200050c0
 8007fd4:	200055a8 	.word	0x200055a8
 8007fd8:	200055a4 	.word	0x200055a4

08007fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fe2:	4b28      	ldr	r3, [pc, #160]	@ (8008084 <vTaskSwitchContext+0xa8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fea:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <vTaskSwitchContext+0xac>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff0:	e042      	b.n	8008078 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007ff2:	4b25      	ldr	r3, [pc, #148]	@ (8008088 <vTaskSwitchContext+0xac>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	4b24      	ldr	r3, [pc, #144]	@ (800808c <vTaskSwitchContext+0xb0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e011      	b.n	8008024 <vTaskSwitchContext+0x48>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <vTaskSwitchContext+0x42>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	607b      	str	r3, [r7, #4]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <vTaskSwitchContext+0x3e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b01      	subs	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	491a      	ldr	r1, [pc, #104]	@ (8008090 <vTaskSwitchContext+0xb4>)
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0e3      	beq.n	8008000 <vTaskSwitchContext+0x24>
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a13      	ldr	r2, [pc, #76]	@ (8008090 <vTaskSwitchContext+0xb4>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3308      	adds	r3, #8
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <vTaskSwitchContext+0x8c>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	605a      	str	r2, [r3, #4]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	4a09      	ldr	r2, [pc, #36]	@ (8008094 <vTaskSwitchContext+0xb8>)
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	4a06      	ldr	r2, [pc, #24]	@ (800808c <vTaskSwitchContext+0xb0>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6013      	str	r3, [r2, #0]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	200055bc 	.word	0x200055bc
 8008088:	200055a8 	.word	0x200055a8
 800808c:	2000559c 	.word	0x2000559c
 8008090:	200050c4 	.word	0x200050c4
 8008094:	200050c0 	.word	0x200050c0

08008098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	60fb      	str	r3, [r7, #12]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080c0:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <vTaskPlaceOnEventList+0x48>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3318      	adds	r3, #24
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fe fe70 	bl	8006dae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080ce:	2101      	movs	r1, #1
 80080d0:	6838      	ldr	r0, [r7, #0]
 80080d2:	f000 faa9 	bl	8008628 <prvAddCurrentTaskToDelayedList>
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200050c0 	.word	0x200050c0

080080e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	617b      	str	r3, [r7, #20]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800810e:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <vTaskPlaceOnEventListRestricted+0x54>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3318      	adds	r3, #24
 8008114:	4619      	mov	r1, r3
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7fe fe25 	bl	8006d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008126:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f000 fa7c 	bl	8008628 <prvAddCurrentTaskToDelayedList>
	}
 8008130:	bf00      	nop
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200050c0 	.word	0x200050c0

0800813c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3318      	adds	r3, #24
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fe56 	bl	8006e20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008174:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <xTaskRemoveFromEventList+0xb0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11d      	bne.n	80081b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fe4d 	bl	8006e20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <xTaskRemoveFromEventList+0xb4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d903      	bls.n	800819a <xTaskRemoveFromEventList+0x5e>
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a16      	ldr	r2, [pc, #88]	@ (80081f0 <xTaskRemoveFromEventList+0xb4>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a13      	ldr	r2, [pc, #76]	@ (80081f4 <xTaskRemoveFromEventList+0xb8>)
 80081a8:	441a      	add	r2, r3
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fe fdd8 	bl	8006d66 <vListInsertEnd>
 80081b6:	e005      	b.n	80081c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	3318      	adds	r3, #24
 80081bc:	4619      	mov	r1, r3
 80081be:	480e      	ldr	r0, [pc, #56]	@ (80081f8 <xTaskRemoveFromEventList+0xbc>)
 80081c0:	f7fe fdd1 	bl	8006d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c8:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <xTaskRemoveFromEventList+0xc0>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d905      	bls.n	80081de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <xTaskRemoveFromEventList+0xc4>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e001      	b.n	80081e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081e2:	697b      	ldr	r3, [r7, #20]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200055bc 	.word	0x200055bc
 80081f0:	2000559c 	.word	0x2000559c
 80081f4:	200050c4 	.word	0x200050c4
 80081f8:	20005554 	.word	0x20005554
 80081fc:	200050c0 	.word	0x200050c0
 8008200:	200055a8 	.word	0x200055a8

08008204 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60fb      	str	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800822a:	f000 fedd 	bl	8008fe8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800822e:	4b07      	ldr	r3, [pc, #28]	@ (800824c <vTaskSetTimeOutState+0x48>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008236:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <vTaskSetTimeOutState+0x4c>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800823e:	f000 ff05 	bl	800904c <vPortExitCritical>
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	200055ac 	.word	0x200055ac
 8008250:	20005598 	.word	0x20005598

08008254 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <vTaskInternalSetTimeOutState+0x24>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008264:	4b05      	ldr	r3, [pc, #20]	@ (800827c <vTaskInternalSetTimeOutState+0x28>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	200055ac 	.word	0x200055ac
 800827c:	20005598 	.word	0x20005598

08008280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
}
 80082a2:	bf00      	nop
 80082a4:	bf00      	nop
 80082a6:	e7fd      	b.n	80082a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60fb      	str	r3, [r7, #12]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80082c6:	f000 fe8f 	bl	8008fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008340 <xTaskCheckForTimeOut+0xc0>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082e2:	d102      	bne.n	80082ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e023      	b.n	8008332 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b15      	ldr	r3, [pc, #84]	@ (8008344 <xTaskCheckForTimeOut+0xc4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d007      	beq.n	8008306 <xTaskCheckForTimeOut+0x86>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	e015      	b.n	8008332 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	429a      	cmp	r2, r3
 800830e:	d20b      	bcs.n	8008328 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ff99 	bl	8008254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e004      	b.n	8008332 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008332:	f000 fe8b 	bl	800904c <vPortExitCritical>

	return xReturn;
 8008336:	69fb      	ldr	r3, [r7, #28]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20005598 	.word	0x20005598
 8008344:	200055ac 	.word	0x200055ac

08008348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800834c:	4b03      	ldr	r3, [pc, #12]	@ (800835c <vTaskMissedYield+0x14>)
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]
}
 8008352:	bf00      	nop
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	200055a8 	.word	0x200055a8

08008360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008368:	f000 f852 	bl	8008410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800836c:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <prvIdleTask+0x28>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d9f9      	bls.n	8008368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008374:	4b05      	ldr	r3, [pc, #20]	@ (800838c <prvIdleTask+0x2c>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008384:	e7f0      	b.n	8008368 <prvIdleTask+0x8>
 8008386:	bf00      	nop
 8008388:	200050c4 	.word	0x200050c4
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	e00c      	b.n	80083b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4a12      	ldr	r2, [pc, #72]	@ (80083f0 <prvInitialiseTaskLists+0x60>)
 80083a8:	4413      	add	r3, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fcae 	bl	8006d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3301      	adds	r3, #1
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b37      	cmp	r3, #55	@ 0x37
 80083ba:	d9ef      	bls.n	800839c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083bc:	480d      	ldr	r0, [pc, #52]	@ (80083f4 <prvInitialiseTaskLists+0x64>)
 80083be:	f7fe fca5 	bl	8006d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083c2:	480d      	ldr	r0, [pc, #52]	@ (80083f8 <prvInitialiseTaskLists+0x68>)
 80083c4:	f7fe fca2 	bl	8006d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083c8:	480c      	ldr	r0, [pc, #48]	@ (80083fc <prvInitialiseTaskLists+0x6c>)
 80083ca:	f7fe fc9f 	bl	8006d0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083ce:	480c      	ldr	r0, [pc, #48]	@ (8008400 <prvInitialiseTaskLists+0x70>)
 80083d0:	f7fe fc9c 	bl	8006d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083d4:	480b      	ldr	r0, [pc, #44]	@ (8008404 <prvInitialiseTaskLists+0x74>)
 80083d6:	f7fe fc99 	bl	8006d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083da:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <prvInitialiseTaskLists+0x78>)
 80083dc:	4a05      	ldr	r2, [pc, #20]	@ (80083f4 <prvInitialiseTaskLists+0x64>)
 80083de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e0:	4b0a      	ldr	r3, [pc, #40]	@ (800840c <prvInitialiseTaskLists+0x7c>)
 80083e2:	4a05      	ldr	r2, [pc, #20]	@ (80083f8 <prvInitialiseTaskLists+0x68>)
 80083e4:	601a      	str	r2, [r3, #0]
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200050c4 	.word	0x200050c4
 80083f4:	20005524 	.word	0x20005524
 80083f8:	20005538 	.word	0x20005538
 80083fc:	20005554 	.word	0x20005554
 8008400:	20005568 	.word	0x20005568
 8008404:	20005580 	.word	0x20005580
 8008408:	2000554c 	.word	0x2000554c
 800840c:	20005550 	.word	0x20005550

08008410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008416:	e019      	b.n	800844c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008418:	f000 fde6 	bl	8008fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841c:	4b10      	ldr	r3, [pc, #64]	@ (8008460 <prvCheckTasksWaitingTermination+0x50>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fcf9 	bl	8006e20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <prvCheckTasksWaitingTermination+0x54>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3b01      	subs	r3, #1
 8008434:	4a0b      	ldr	r2, [pc, #44]	@ (8008464 <prvCheckTasksWaitingTermination+0x54>)
 8008436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008438:	4b0b      	ldr	r3, [pc, #44]	@ (8008468 <prvCheckTasksWaitingTermination+0x58>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3b01      	subs	r3, #1
 800843e:	4a0a      	ldr	r2, [pc, #40]	@ (8008468 <prvCheckTasksWaitingTermination+0x58>)
 8008440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008442:	f000 fe03 	bl	800904c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f810 	bl	800846c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <prvCheckTasksWaitingTermination+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e1      	bne.n	8008418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20005568 	.word	0x20005568
 8008464:	20005594 	.word	0x20005594
 8008468:	2000557c 	.word	0x2000557c

0800846c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800847a:	2b00      	cmp	r3, #0
 800847c:	d108      	bne.n	8008490 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008482:	4618      	mov	r0, r3
 8008484:	f000 ffa0 	bl	80093c8 <vPortFree>
				vPortFree( pxTCB );
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 ff9d 	bl	80093c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800848e:	e019      	b.n	80084c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008496:	2b01      	cmp	r3, #1
 8008498:	d103      	bne.n	80084a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 ff94 	bl	80093c8 <vPortFree>
	}
 80084a0:	e010      	b.n	80084c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d00b      	beq.n	80084c4 <prvDeleteTCB+0x58>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60fb      	str	r3, [r7, #12]
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <prvDeleteTCB+0x54>
	}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <prvResetNextTaskUnblockTime+0x38>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <prvResetNextTaskUnblockTime+0x3c>)
 80084de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084e4:	e008      	b.n	80084f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e6:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <prvResetNextTaskUnblockTime+0x38>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4a04      	ldr	r2, [pc, #16]	@ (8008508 <prvResetNextTaskUnblockTime+0x3c>)
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	2000554c 	.word	0x2000554c
 8008508:	200055b4 	.word	0x200055b4

0800850c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008512:	4b0b      	ldr	r3, [pc, #44]	@ (8008540 <xTaskGetSchedulerState+0x34>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800851a:	2301      	movs	r3, #1
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	e008      	b.n	8008532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008520:	4b08      	ldr	r3, [pc, #32]	@ (8008544 <xTaskGetSchedulerState+0x38>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008528:	2302      	movs	r3, #2
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	e001      	b.n	8008532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800852e:	2300      	movs	r3, #0
 8008530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008532:	687b      	ldr	r3, [r7, #4]
	}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	200055a0 	.word	0x200055a0
 8008544:	200055bc 	.word	0x200055bc

08008548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d058      	beq.n	8008610 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800855e:	4b2f      	ldr	r3, [pc, #188]	@ (800861c <xTaskPriorityDisinherit+0xd4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	429a      	cmp	r2, r3
 8008566:	d00b      	beq.n	8008580 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	60fb      	str	r3, [r7, #12]
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60bb      	str	r3, [r7, #8]
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d02c      	beq.n	8008610 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d128      	bne.n	8008610 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fc2c 	bl	8006e20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008620 <xTaskPriorityDisinherit+0xd8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d903      	bls.n	80085f0 <xTaskPriorityDisinherit+0xa8>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008620 <xTaskPriorityDisinherit+0xd8>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4a09      	ldr	r2, [pc, #36]	@ (8008624 <xTaskPriorityDisinherit+0xdc>)
 80085fe:	441a      	add	r2, r3
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7fe fbad 	bl	8006d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008610:	697b      	ldr	r3, [r7, #20]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200050c0 	.word	0x200050c0
 8008620:	2000559c 	.word	0x2000559c
 8008624:	200050c4 	.word	0x200050c4

08008628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008632:	4b21      	ldr	r3, [pc, #132]	@ (80086b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008638:	4b20      	ldr	r3, [pc, #128]	@ (80086bc <prvAddCurrentTaskToDelayedList+0x94>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3304      	adds	r3, #4
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fbee 	bl	8006e20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800864a:	d10a      	bne.n	8008662 <prvAddCurrentTaskToDelayedList+0x3a>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d007      	beq.n	8008662 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008652:	4b1a      	ldr	r3, [pc, #104]	@ (80086bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3304      	adds	r3, #4
 8008658:	4619      	mov	r1, r3
 800865a:	4819      	ldr	r0, [pc, #100]	@ (80086c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800865c:	f7fe fb83 	bl	8006d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008660:	e026      	b.n	80086b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800866a:	4b14      	ldr	r3, [pc, #80]	@ (80086bc <prvAddCurrentTaskToDelayedList+0x94>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	429a      	cmp	r2, r3
 8008678:	d209      	bcs.n	800868e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800867a:	4b12      	ldr	r3, [pc, #72]	@ (80086c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b0f      	ldr	r3, [pc, #60]	@ (80086bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7fe fb91 	bl	8006dae <vListInsert>
}
 800868c:	e010      	b.n	80086b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800868e:	4b0e      	ldr	r3, [pc, #56]	@ (80086c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3304      	adds	r3, #4
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f7fe fb87 	bl	8006dae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086a0:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d202      	bcs.n	80086b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086aa:	4a08      	ldr	r2, [pc, #32]	@ (80086cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6013      	str	r3, [r2, #0]
}
 80086b0:	bf00      	nop
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20005598 	.word	0x20005598
 80086bc:	200050c0 	.word	0x200050c0
 80086c0:	20005580 	.word	0x20005580
 80086c4:	20005550 	.word	0x20005550
 80086c8:	2000554c 	.word	0x2000554c
 80086cc:	200055b4 	.word	0x200055b4

080086d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	@ 0x28
 80086d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086da:	f000 fb13 	bl	8008d04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086de:	4b1d      	ldr	r3, [pc, #116]	@ (8008754 <xTimerCreateTimerTask+0x84>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d021      	beq.n	800872a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086ee:	1d3a      	adds	r2, r7, #4
 80086f0:	f107 0108 	add.w	r1, r7, #8
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe faed 	bl	8006cd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	9202      	str	r2, [sp, #8]
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	2302      	movs	r3, #2
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2300      	movs	r3, #0
 800870e:	460a      	mov	r2, r1
 8008710:	4911      	ldr	r1, [pc, #68]	@ (8008758 <xTimerCreateTimerTask+0x88>)
 8008712:	4812      	ldr	r0, [pc, #72]	@ (800875c <xTimerCreateTimerTask+0x8c>)
 8008714:	f7ff f8a8 	bl	8007868 <xTaskCreateStatic>
 8008718:	4603      	mov	r3, r0
 800871a:	4a11      	ldr	r2, [pc, #68]	@ (8008760 <xTimerCreateTimerTask+0x90>)
 800871c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <xTimerCreateTimerTask+0x90>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	613b      	str	r3, [r7, #16]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008748:	697b      	ldr	r3, [r7, #20]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	200055f0 	.word	0x200055f0
 8008758:	080175a4 	.word	0x080175a4
 800875c:	0800889d 	.word	0x0800889d
 8008760:	200055f4 	.word	0x200055f4

08008764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	@ 0x28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008772:	2300      	movs	r3, #0
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <xTimerGenericCommand+0x30>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	623b      	str	r3, [r7, #32]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008794:	4b19      	ldr	r3, [pc, #100]	@ (80087fc <xTimerGenericCommand+0x98>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d02a      	beq.n	80087f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	dc18      	bgt.n	80087e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087ae:	f7ff fead 	bl	800850c <xTaskGetSchedulerState>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d109      	bne.n	80087cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087b8:	4b10      	ldr	r3, [pc, #64]	@ (80087fc <xTimerGenericCommand+0x98>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	f107 0110 	add.w	r1, r7, #16
 80087c0:	2300      	movs	r3, #0
 80087c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c4:	f7fe fc60 	bl	8007088 <xQueueGenericSend>
 80087c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80087ca:	e012      	b.n	80087f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087cc:	4b0b      	ldr	r3, [pc, #44]	@ (80087fc <xTimerGenericCommand+0x98>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	f107 0110 	add.w	r1, r7, #16
 80087d4:	2300      	movs	r3, #0
 80087d6:	2200      	movs	r2, #0
 80087d8:	f7fe fc56 	bl	8007088 <xQueueGenericSend>
 80087dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80087de:	e008      	b.n	80087f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087e0:	4b06      	ldr	r3, [pc, #24]	@ (80087fc <xTimerGenericCommand+0x98>)
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	f107 0110 	add.w	r1, r7, #16
 80087e8:	2300      	movs	r3, #0
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	f7fe fd4e 	bl	800728c <xQueueGenericSendFromISR>
 80087f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3728      	adds	r7, #40	@ 0x28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200055f0 	.word	0x200055f0

08008800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b23      	ldr	r3, [pc, #140]	@ (8008898 <prvProcessExpiredTimer+0x98>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	3304      	adds	r3, #4
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe fb01 	bl	8006e20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d023      	beq.n	8008874 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	699a      	ldr	r2, [r3, #24]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	18d1      	adds	r1, r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	6978      	ldr	r0, [r7, #20]
 800883a:	f000 f8d5 	bl	80089e8 <prvInsertTimerInActiveList>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d020      	beq.n	8008886 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008844:	2300      	movs	r3, #0
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	2300      	movs	r3, #0
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	2100      	movs	r1, #0
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f7ff ff88 	bl	8008764 <xTimerGenericCommand>
 8008854:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d114      	bne.n	8008886 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60fb      	str	r3, [r7, #12]
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	e7fd      	b.n	8008870 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800887a:	f023 0301 	bic.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	6978      	ldr	r0, [r7, #20]
 800888c:	4798      	blx	r3
}
 800888e:	bf00      	nop
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200055e8 	.word	0x200055e8

0800889c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088a4:	f107 0308 	add.w	r3, r7, #8
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f859 	bl	8008960 <prvGetNextExpireTime>
 80088ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4619      	mov	r1, r3
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f805 	bl	80088c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088ba:	f000 f8d7 	bl	8008a6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088be:	bf00      	nop
 80088c0:	e7f0      	b.n	80088a4 <prvTimerTask+0x8>
	...

080088c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ce:	f7ff fa0f 	bl	8007cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f866 	bl	80089a8 <prvSampleTimeNow>
 80088dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d130      	bne.n	8008946 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <prvProcessTimerOrBlockTask+0x3c>
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d806      	bhi.n	8008900 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088f2:	f7ff fa0b 	bl	8007d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff81 	bl	8008800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088fe:	e024      	b.n	800894a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008906:	4b13      	ldr	r3, [pc, #76]	@ (8008954 <prvProcessTimerOrBlockTask+0x90>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <prvProcessTimerOrBlockTask+0x50>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <prvProcessTimerOrBlockTask+0x52>
 8008914:	2300      	movs	r3, #0
 8008916:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008918:	4b0f      	ldr	r3, [pc, #60]	@ (8008958 <prvProcessTimerOrBlockTask+0x94>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4619      	mov	r1, r3
 8008926:	f7fe ff6b 	bl	8007800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800892a:	f7ff f9ef 	bl	8007d0c <xTaskResumeAll>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008934:	4b09      	ldr	r3, [pc, #36]	@ (800895c <prvProcessTimerOrBlockTask+0x98>)
 8008936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	f3bf 8f6f 	isb	sy
}
 8008944:	e001      	b.n	800894a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008946:	f7ff f9e1 	bl	8007d0c <xTaskResumeAll>
}
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200055ec 	.word	0x200055ec
 8008958:	200055f0 	.word	0x200055f0
 800895c:	e000ed04 	.word	0xe000ed04

08008960 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008968:	4b0e      	ldr	r3, [pc, #56]	@ (80089a4 <prvGetNextExpireTime+0x44>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <prvGetNextExpireTime+0x16>
 8008972:	2201      	movs	r2, #1
 8008974:	e000      	b.n	8008978 <prvGetNextExpireTime+0x18>
 8008976:	2200      	movs	r2, #0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008984:	4b07      	ldr	r3, [pc, #28]	@ (80089a4 <prvGetNextExpireTime+0x44>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	e001      	b.n	8008994 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008994:	68fb      	ldr	r3, [r7, #12]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	200055e8 	.word	0x200055e8

080089a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089b0:	f7ff fa4a 	bl	8007e48 <xTaskGetTickCount>
 80089b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089b6:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <prvSampleTimeNow+0x3c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d205      	bcs.n	80089cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089c0:	f000 f93a 	bl	8008c38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	e002      	b.n	80089d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089d2:	4a04      	ldr	r2, [pc, #16]	@ (80089e4 <prvSampleTimeNow+0x3c>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089d8:	68fb      	ldr	r3, [r7, #12]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200055f8 	.word	0x200055f8

080089e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d812      	bhi.n	8008a34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d302      	bcc.n	8008a22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e01b      	b.n	8008a5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <prvInsertTimerInActiveList+0x7c>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f7fe f9be 	bl	8006dae <vListInsert>
 8008a32:	e012      	b.n	8008a5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d206      	bcs.n	8008a4a <prvInsertTimerInActiveList+0x62>
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e007      	b.n	8008a5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	@ (8008a68 <prvInsertTimerInActiveList+0x80>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7fe f9aa 	bl	8006dae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a5a:	697b      	ldr	r3, [r7, #20]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	200055ec 	.word	0x200055ec
 8008a68:	200055e8 	.word	0x200055e8

08008a6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08e      	sub	sp, #56	@ 0x38
 8008a70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a72:	e0ce      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	da19      	bge.n	8008aae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a7a:	1d3b      	adds	r3, r7, #4
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	61fb      	str	r3, [r7, #28]
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa4:	6850      	ldr	r0, [r2, #4]
 8008aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa8:	6892      	ldr	r2, [r2, #8]
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f2c0 80ae 	blt.w	8008c12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe f9aa 	bl	8006e20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008acc:	463b      	mov	r3, r7
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff ff6a 	bl	80089a8 <prvSampleTimeNow>
 8008ad4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	f200 8097 	bhi.w	8008c0c <prvProcessReceivedCommands+0x1a0>
 8008ade:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <prvProcessReceivedCommands+0x78>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b83 	.word	0x08008b83
 8008af4:	08008b97 	.word	0x08008b97
 8008af8:	08008be3 	.word	0x08008be3
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b0d 	.word	0x08008b0d
 8008b04:	08008b83 	.word	0x08008b83
 8008b08:	08008b97 	.word	0x08008b97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	18d1      	adds	r1, r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2c:	f7ff ff5c 	bl	80089e8 <prvInsertTimerInActiveList>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d06c      	beq.n	8008c10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d061      	beq.n	8008c10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	441a      	add	r2, r3
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b5e:	f7ff fe01 	bl	8008764 <xTimerGenericCommand>
 8008b62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d152      	bne.n	8008c10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	61bb      	str	r3, [r7, #24]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b94:	e03d      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	617b      	str	r3, [r7, #20]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	18d1      	adds	r1, r2, r3
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bdc:	f7ff ff04 	bl	80089e8 <prvInsertTimerInActiveList>
					break;
 8008be0:	e017      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d103      	bne.n	8008bf8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf2:	f000 fbe9 	bl	80093c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bf6:	e00c      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c0a:	e002      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <prvProcessReceivedCommands+0x1a6>
					break;
 8008c10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c12:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <prvProcessReceivedCommands+0x1c8>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	1d39      	adds	r1, r7, #4
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fbd4 	bl	80073c8 <xQueueReceive>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f af26 	bne.w	8008a74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	3730      	adds	r7, #48	@ 0x30
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200055f0 	.word	0x200055f0

08008c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c3e:	e049      	b.n	8008cd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c40:	4b2e      	ldr	r3, [pc, #184]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe f8e1 	bl	8006e20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d02f      	beq.n	8008cd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d90e      	bls.n	8008ca4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c92:	4b1a      	ldr	r3, [pc, #104]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fe f886 	bl	8006dae <vListInsert>
 8008ca2:	e017      	b.n	8008cd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	2100      	movs	r1, #0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fd58 	bl	8008764 <xTimerGenericCommand>
 8008cb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	603b      	str	r3, [r7, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	e7fd      	b.n	8008cd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cd4:	4b09      	ldr	r3, [pc, #36]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1b0      	bne.n	8008c40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cde:	4b07      	ldr	r3, [pc, #28]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ce4:	4b06      	ldr	r3, [pc, #24]	@ (8008d00 <prvSwitchTimerLists+0xc8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a04      	ldr	r2, [pc, #16]	@ (8008cfc <prvSwitchTimerLists+0xc4>)
 8008cea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cec:	4a04      	ldr	r2, [pc, #16]	@ (8008d00 <prvSwitchTimerLists+0xc8>)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	6013      	str	r3, [r2, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200055e8 	.word	0x200055e8
 8008d00:	200055ec 	.word	0x200055ec

08008d04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d0a:	f000 f96d 	bl	8008fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d0e:	4b15      	ldr	r3, [pc, #84]	@ (8008d64 <prvCheckForValidListAndQueue+0x60>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d120      	bne.n	8008d58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d16:	4814      	ldr	r0, [pc, #80]	@ (8008d68 <prvCheckForValidListAndQueue+0x64>)
 8008d18:	f7fd fff8 	bl	8006d0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d1c:	4813      	ldr	r0, [pc, #76]	@ (8008d6c <prvCheckForValidListAndQueue+0x68>)
 8008d1e:	f7fd fff5 	bl	8006d0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d22:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <prvCheckForValidListAndQueue+0x6c>)
 8008d24:	4a10      	ldr	r2, [pc, #64]	@ (8008d68 <prvCheckForValidListAndQueue+0x64>)
 8008d26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d28:	4b12      	ldr	r3, [pc, #72]	@ (8008d74 <prvCheckForValidListAndQueue+0x70>)
 8008d2a:	4a10      	ldr	r2, [pc, #64]	@ (8008d6c <prvCheckForValidListAndQueue+0x68>)
 8008d2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <prvCheckForValidListAndQueue+0x74>)
 8008d34:	4a11      	ldr	r2, [pc, #68]	@ (8008d7c <prvCheckForValidListAndQueue+0x78>)
 8008d36:	2110      	movs	r1, #16
 8008d38:	200a      	movs	r0, #10
 8008d3a:	f7fe f905 	bl	8006f48 <xQueueGenericCreateStatic>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4a08      	ldr	r2, [pc, #32]	@ (8008d64 <prvCheckForValidListAndQueue+0x60>)
 8008d42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d44:	4b07      	ldr	r3, [pc, #28]	@ (8008d64 <prvCheckForValidListAndQueue+0x60>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d4c:	4b05      	ldr	r3, [pc, #20]	@ (8008d64 <prvCheckForValidListAndQueue+0x60>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	490b      	ldr	r1, [pc, #44]	@ (8008d80 <prvCheckForValidListAndQueue+0x7c>)
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fd2a 	bl	80077ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d58:	f000 f978 	bl	800904c <vPortExitCritical>
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	200055f0 	.word	0x200055f0
 8008d68:	200055c0 	.word	0x200055c0
 8008d6c:	200055d4 	.word	0x200055d4
 8008d70:	200055e8 	.word	0x200055e8
 8008d74:	200055ec 	.word	0x200055ec
 8008d78:	2000569c 	.word	0x2000569c
 8008d7c:	200055fc 	.word	0x200055fc
 8008d80:	080175ac 	.word	0x080175ac

08008d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3b04      	subs	r3, #4
 8008d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f023 0201 	bic.w	r2, r3, #1
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008db4:	4a0c      	ldr	r2, [pc, #48]	@ (8008de8 <pxPortInitialiseStack+0x64>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3b14      	subs	r3, #20
 8008dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f06f 0202 	mvn.w	r2, #2
 8008dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3b20      	subs	r3, #32
 8008dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	08008ded 	.word	0x08008ded

08008dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <prvTaskExitError+0x58>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dfe:	d00b      	beq.n	8008e18 <prvTaskExitError+0x2c>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <prvTaskExitError+0x28>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	60bb      	str	r3, [r7, #8]
}
 8008e2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e2c:	bf00      	nop
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0fc      	beq.n	8008e2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000054 	.word	0x20000054
	...

08008e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e50:	4b07      	ldr	r3, [pc, #28]	@ (8008e70 <pxCurrentTCBConst2>)
 8008e52:	6819      	ldr	r1, [r3, #0]
 8008e54:	6808      	ldr	r0, [r1, #0]
 8008e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5a:	f380 8809 	msr	PSP, r0
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f380 8811 	msr	BASEPRI, r0
 8008e6a:	4770      	bx	lr
 8008e6c:	f3af 8000 	nop.w

08008e70 <pxCurrentTCBConst2>:
 8008e70:	200050c0 	.word	0x200050c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e78:	4808      	ldr	r0, [pc, #32]	@ (8008e9c <prvPortStartFirstTask+0x24>)
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	6800      	ldr	r0, [r0, #0]
 8008e7e:	f380 8808 	msr	MSP, r0
 8008e82:	f04f 0000 	mov.w	r0, #0
 8008e86:	f380 8814 	msr	CONTROL, r0
 8008e8a:	b662      	cpsie	i
 8008e8c:	b661      	cpsie	f
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	df00      	svc	0
 8008e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e9a:	bf00      	nop
 8008e9c:	e000ed08 	.word	0xe000ed08

08008ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ea6:	4b47      	ldr	r3, [pc, #284]	@ (8008fc4 <xPortStartScheduler+0x124>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a47      	ldr	r2, [pc, #284]	@ (8008fc8 <xPortStartScheduler+0x128>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d10b      	bne.n	8008ec8 <xPortStartScheduler+0x28>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	613b      	str	r3, [r7, #16]
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	e7fd      	b.n	8008ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc4 <xPortStartScheduler+0x124>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8008fcc <xPortStartScheduler+0x12c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d10b      	bne.n	8008eea <xPortStartScheduler+0x4a>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eea:	4b39      	ldr	r3, [pc, #228]	@ (8008fd0 <xPortStartScheduler+0x130>)
 8008eec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	22ff      	movs	r2, #255	@ 0xff
 8008efa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4b31      	ldr	r3, [pc, #196]	@ (8008fd4 <xPortStartScheduler+0x134>)
 8008f10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f12:	4b31      	ldr	r3, [pc, #196]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f14:	2207      	movs	r2, #7
 8008f16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f18:	e009      	b.n	8008f2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4a2d      	ldr	r2, [pc, #180]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f36:	2b80      	cmp	r3, #128	@ 0x80
 8008f38:	d0ef      	beq.n	8008f1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f3a:	4b27      	ldr	r3, [pc, #156]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f1c3 0307 	rsb	r3, r3, #7
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d00b      	beq.n	8008f5e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60bb      	str	r3, [r7, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	e7fd      	b.n	8008f5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f68:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f70:	4a19      	ldr	r2, [pc, #100]	@ (8008fd8 <xPortStartScheduler+0x138>)
 8008f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f7c:	4b17      	ldr	r3, [pc, #92]	@ (8008fdc <xPortStartScheduler+0x13c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a16      	ldr	r2, [pc, #88]	@ (8008fdc <xPortStartScheduler+0x13c>)
 8008f82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f88:	4b14      	ldr	r3, [pc, #80]	@ (8008fdc <xPortStartScheduler+0x13c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a13      	ldr	r2, [pc, #76]	@ (8008fdc <xPortStartScheduler+0x13c>)
 8008f8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f94:	f000 f8da 	bl	800914c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f98:	4b11      	ldr	r3, [pc, #68]	@ (8008fe0 <xPortStartScheduler+0x140>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f9e:	f000 f8f9 	bl	8009194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fa2:	4b10      	ldr	r3, [pc, #64]	@ (8008fe4 <xPortStartScheduler+0x144>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8008fe4 <xPortStartScheduler+0x144>)
 8008fa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008fac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fae:	f7ff ff63 	bl	8008e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fb2:	f7ff f813 	bl	8007fdc <vTaskSwitchContext>
	prvTaskExitError();
 8008fb6:	f7ff ff19 	bl	8008dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	e000ed00 	.word	0xe000ed00
 8008fc8:	410fc271 	.word	0x410fc271
 8008fcc:	410fc270 	.word	0x410fc270
 8008fd0:	e000e400 	.word	0xe000e400
 8008fd4:	200056ec 	.word	0x200056ec
 8008fd8:	200056f0 	.word	0x200056f0
 8008fdc:	e000ed20 	.word	0xe000ed20
 8008fe0:	20000054 	.word	0x20000054
 8008fe4:	e000ef34 	.word	0xe000ef34

08008fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009002:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <vPortEnterCritical+0x5c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	4a0e      	ldr	r2, [pc, #56]	@ (8009044 <vPortEnterCritical+0x5c>)
 800900a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800900c:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <vPortEnterCritical+0x5c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d110      	bne.n	8009036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009014:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <vPortEnterCritical+0x60>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <vPortEnterCritical+0x4e>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	603b      	str	r3, [r7, #0]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <vPortEnterCritical+0x4a>
	}
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000054 	.word	0x20000054
 8009048:	e000ed04 	.word	0xe000ed04

0800904c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009052:	4b12      	ldr	r3, [pc, #72]	@ (800909c <vPortExitCritical+0x50>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <vPortExitCritical+0x26>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	607b      	str	r3, [r7, #4]
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	e7fd      	b.n	800906e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009072:	4b0a      	ldr	r3, [pc, #40]	@ (800909c <vPortExitCritical+0x50>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3b01      	subs	r3, #1
 8009078:	4a08      	ldr	r2, [pc, #32]	@ (800909c <vPortExitCritical+0x50>)
 800907a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800907c:	4b07      	ldr	r3, [pc, #28]	@ (800909c <vPortExitCritical+0x50>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d105      	bne.n	8009090 <vPortExitCritical+0x44>
 8009084:	2300      	movs	r3, #0
 8009086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f383 8811 	msr	BASEPRI, r3
}
 800908e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000054 	.word	0x20000054

080090a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090a0:	f3ef 8009 	mrs	r0, PSP
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4b15      	ldr	r3, [pc, #84]	@ (8009100 <pxCurrentTCBConst>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	f01e 0f10 	tst.w	lr, #16
 80090b0:	bf08      	it	eq
 80090b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ba:	6010      	str	r0, [r2, #0]
 80090bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090c4:	f380 8811 	msr	BASEPRI, r0
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f7fe ff84 	bl	8007fdc <vTaskSwitchContext>
 80090d4:	f04f 0000 	mov.w	r0, #0
 80090d8:	f380 8811 	msr	BASEPRI, r0
 80090dc:	bc09      	pop	{r0, r3}
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e6:	f01e 0f10 	tst.w	lr, #16
 80090ea:	bf08      	it	eq
 80090ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090f0:	f380 8809 	msr	PSP, r0
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w

08009100 <pxCurrentTCBConst>:
 8009100:	200050c0 	.word	0x200050c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop

08009108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	607b      	str	r3, [r7, #4]
}
 8009120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009122:	f7fe fea1 	bl	8007e68 <xTaskIncrementTick>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800912c:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <xPortSysTickHandler+0x40>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f383 8811 	msr	BASEPRI, r3
}
 800913e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009150:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <vPortSetupTimerInterrupt+0x34>)
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009156:	4b0b      	ldr	r3, [pc, #44]	@ (8009184 <vPortSetupTimerInterrupt+0x38>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800915c:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <vPortSetupTimerInterrupt+0x3c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a0a      	ldr	r2, [pc, #40]	@ (800918c <vPortSetupTimerInterrupt+0x40>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	099b      	lsrs	r3, r3, #6
 8009168:	4a09      	ldr	r2, [pc, #36]	@ (8009190 <vPortSetupTimerInterrupt+0x44>)
 800916a:	3b01      	subs	r3, #1
 800916c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800916e:	4b04      	ldr	r3, [pc, #16]	@ (8009180 <vPortSetupTimerInterrupt+0x34>)
 8009170:	2207      	movs	r2, #7
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	e000e010 	.word	0xe000e010
 8009184:	e000e018 	.word	0xe000e018
 8009188:	20000048 	.word	0x20000048
 800918c:	10624dd3 	.word	0x10624dd3
 8009190:	e000e014 	.word	0xe000e014

08009194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091a4 <vPortEnableVFP+0x10>
 8009198:	6801      	ldr	r1, [r0, #0]
 800919a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800919e:	6001      	str	r1, [r0, #0]
 80091a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091a2:	bf00      	nop
 80091a4:	e000ed88 	.word	0xe000ed88

080091a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091ae:	f3ef 8305 	mrs	r3, IPSR
 80091b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b0f      	cmp	r3, #15
 80091b8:	d915      	bls.n	80091e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ba:	4a18      	ldr	r2, [pc, #96]	@ (800921c <vPortValidateInterruptPriority+0x74>)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091c4:	4b16      	ldr	r3, [pc, #88]	@ (8009220 <vPortValidateInterruptPriority+0x78>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	7afa      	ldrb	r2, [r7, #11]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d20b      	bcs.n	80091e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	607b      	str	r3, [r7, #4]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <vPortValidateInterruptPriority+0x7c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009228 <vPortValidateInterruptPriority+0x80>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d90b      	bls.n	800920e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	603b      	str	r3, [r7, #0]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <vPortValidateInterruptPriority+0x62>
	}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	e000e3f0 	.word	0xe000e3f0
 8009220:	200056ec 	.word	0x200056ec
 8009224:	e000ed0c 	.word	0xe000ed0c
 8009228:	200056f0 	.word	0x200056f0

0800922c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	@ 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009238:	f7fe fd5a 	bl	8007cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800923c:	4b5c      	ldr	r3, [pc, #368]	@ (80093b0 <pvPortMalloc+0x184>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009244:	f000 f924 	bl	8009490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009248:	4b5a      	ldr	r3, [pc, #360]	@ (80093b4 <pvPortMalloc+0x188>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4013      	ands	r3, r2
 8009250:	2b00      	cmp	r3, #0
 8009252:	f040 8095 	bne.w	8009380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01e      	beq.n	800929a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800925c:	2208      	movs	r2, #8
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4413      	add	r3, r2
 8009262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	3308      	adds	r3, #8
 8009276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <pvPortMalloc+0x6e>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	617b      	str	r3, [r7, #20]
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	e7fd      	b.n	8009296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d06f      	beq.n	8009380 <pvPortMalloc+0x154>
 80092a0:	4b45      	ldr	r3, [pc, #276]	@ (80093b8 <pvPortMalloc+0x18c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d86a      	bhi.n	8009380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092aa:	4b44      	ldr	r3, [pc, #272]	@ (80093bc <pvPortMalloc+0x190>)
 80092ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092ae:	4b43      	ldr	r3, [pc, #268]	@ (80093bc <pvPortMalloc+0x190>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092b4:	e004      	b.n	80092c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d903      	bls.n	80092d2 <pvPortMalloc+0xa6>
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1f1      	bne.n	80092b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092d2:	4b37      	ldr	r3, [pc, #220]	@ (80093b0 <pvPortMalloc+0x184>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d8:	429a      	cmp	r2, r3
 80092da:	d051      	beq.n	8009380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2208      	movs	r2, #8
 80092e2:	4413      	add	r3, r2
 80092e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	1ad2      	subs	r2, r2, r3
 80092f6:	2308      	movs	r3, #8
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d920      	bls.n	8009340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4413      	add	r3, r2
 8009304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <pvPortMalloc+0xfc>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800933a:	69b8      	ldr	r0, [r7, #24]
 800933c:	f000 f90a 	bl	8009554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009340:	4b1d      	ldr	r3, [pc, #116]	@ (80093b8 <pvPortMalloc+0x18c>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	4a1b      	ldr	r2, [pc, #108]	@ (80093b8 <pvPortMalloc+0x18c>)
 800934c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800934e:	4b1a      	ldr	r3, [pc, #104]	@ (80093b8 <pvPortMalloc+0x18c>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b1b      	ldr	r3, [pc, #108]	@ (80093c0 <pvPortMalloc+0x194>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d203      	bcs.n	8009362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800935a:	4b17      	ldr	r3, [pc, #92]	@ (80093b8 <pvPortMalloc+0x18c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a18      	ldr	r2, [pc, #96]	@ (80093c0 <pvPortMalloc+0x194>)
 8009360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	4b13      	ldr	r3, [pc, #76]	@ (80093b4 <pvPortMalloc+0x188>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	431a      	orrs	r2, r3
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009376:	4b13      	ldr	r3, [pc, #76]	@ (80093c4 <pvPortMalloc+0x198>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3301      	adds	r3, #1
 800937c:	4a11      	ldr	r2, [pc, #68]	@ (80093c4 <pvPortMalloc+0x198>)
 800937e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009380:	f7fe fcc4 	bl	8007d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <pvPortMalloc+0x17a>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60fb      	str	r3, [r7, #12]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <pvPortMalloc+0x176>
	return pvReturn;
 80093a6:	69fb      	ldr	r3, [r7, #28]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3728      	adds	r7, #40	@ 0x28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	200092fc 	.word	0x200092fc
 80093b4:	20009310 	.word	0x20009310
 80093b8:	20009300 	.word	0x20009300
 80093bc:	200092f4 	.word	0x200092f4
 80093c0:	20009304 	.word	0x20009304
 80093c4:	20009308 	.word	0x20009308

080093c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d04f      	beq.n	800947a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093da:	2308      	movs	r3, #8
 80093dc:	425b      	negs	r3, r3
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	4b25      	ldr	r3, [pc, #148]	@ (8009484 <vPortFree+0xbc>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <vPortFree+0x46>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	60fb      	str	r3, [r7, #12]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <vPortFree+0x66>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60bb      	str	r3, [r7, #8]
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	4b14      	ldr	r3, [pc, #80]	@ (8009484 <vPortFree+0xbc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4013      	ands	r3, r2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01e      	beq.n	800947a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d11a      	bne.n	800947a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	4b0e      	ldr	r3, [pc, #56]	@ (8009484 <vPortFree+0xbc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	43db      	mvns	r3, r3
 800944e:	401a      	ands	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009454:	f7fe fc4c 	bl	8007cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	4b0a      	ldr	r3, [pc, #40]	@ (8009488 <vPortFree+0xc0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4413      	add	r3, r2
 8009462:	4a09      	ldr	r2, [pc, #36]	@ (8009488 <vPortFree+0xc0>)
 8009464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009466:	6938      	ldr	r0, [r7, #16]
 8009468:	f000 f874 	bl	8009554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800946c:	4b07      	ldr	r3, [pc, #28]	@ (800948c <vPortFree+0xc4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	4a06      	ldr	r2, [pc, #24]	@ (800948c <vPortFree+0xc4>)
 8009474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009476:	f7fe fc49 	bl	8007d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800947a:	bf00      	nop
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20009310 	.word	0x20009310
 8009488:	20009300 	.word	0x20009300
 800948c:	2000930c 	.word	0x2000930c

08009490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800949a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800949c:	4b27      	ldr	r3, [pc, #156]	@ (800953c <prvHeapInit+0xac>)
 800949e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00c      	beq.n	80094c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3307      	adds	r3, #7
 80094ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0307 	bic.w	r3, r3, #7
 80094b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	4a1f      	ldr	r2, [pc, #124]	@ (800953c <prvHeapInit+0xac>)
 80094c0:	4413      	add	r3, r2
 80094c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009540 <prvHeapInit+0xb0>)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <prvHeapInit+0xb0>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094dc:	2208      	movs	r2, #8
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0307 	bic.w	r3, r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a15      	ldr	r2, [pc, #84]	@ (8009544 <prvHeapInit+0xb4>)
 80094f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094f2:	4b14      	ldr	r3, [pc, #80]	@ (8009544 <prvHeapInit+0xb4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094fa:	4b12      	ldr	r3, [pc, #72]	@ (8009544 <prvHeapInit+0xb4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009510:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <prvHeapInit+0xb4>)
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	4a0a      	ldr	r2, [pc, #40]	@ (8009548 <prvHeapInit+0xb8>)
 800951e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	4a09      	ldr	r2, [pc, #36]	@ (800954c <prvHeapInit+0xbc>)
 8009526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009528:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <prvHeapInit+0xc0>)
 800952a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800952e:	601a      	str	r2, [r3, #0]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	200056f4 	.word	0x200056f4
 8009540:	200092f4 	.word	0x200092f4
 8009544:	200092fc 	.word	0x200092fc
 8009548:	20009304 	.word	0x20009304
 800954c:	20009300 	.word	0x20009300
 8009550:	20009310 	.word	0x20009310

08009554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800955c:	4b28      	ldr	r3, [pc, #160]	@ (8009600 <prvInsertBlockIntoFreeList+0xac>)
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e002      	b.n	8009568 <prvInsertBlockIntoFreeList+0x14>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d8f7      	bhi.n	8009562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d108      	bne.n	8009596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	441a      	add	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	441a      	add	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d118      	bne.n	80095dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b15      	ldr	r3, [pc, #84]	@ (8009604 <prvInsertBlockIntoFreeList+0xb0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d00d      	beq.n	80095d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	441a      	add	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	e008      	b.n	80095e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009604 <prvInsertBlockIntoFreeList+0xb0>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	e003      	b.n	80095e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d002      	beq.n	80095f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	200092f4 	.word	0x200092f4
 8009604:	200092fc 	.word	0x200092fc

08009608 <rcl_get_zero_initialized_publisher>:
 8009608:	4b01      	ldr	r3, [pc, #4]	@ (8009610 <rcl_get_zero_initialized_publisher+0x8>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	08017614 	.word	0x08017614

08009614 <rcl_publisher_init>:
 8009614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800961c:	2d00      	cmp	r5, #0
 800961e:	d069      	beq.n	80096f4 <rcl_publisher_init+0xe0>
 8009620:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009624:	4604      	mov	r4, r0
 8009626:	4648      	mov	r0, r9
 8009628:	460e      	mov	r6, r1
 800962a:	4690      	mov	r8, r2
 800962c:	461f      	mov	r7, r3
 800962e:	f001 f81d 	bl	800a66c <rcutils_allocator_is_valid>
 8009632:	2800      	cmp	r0, #0
 8009634:	d05e      	beq.n	80096f4 <rcl_publisher_init+0xe0>
 8009636:	2c00      	cmp	r4, #0
 8009638:	d05c      	beq.n	80096f4 <rcl_publisher_init+0xe0>
 800963a:	f8d4 a000 	ldr.w	sl, [r4]
 800963e:	f1ba 0f00 	cmp.w	sl, #0
 8009642:	d004      	beq.n	800964e <rcl_publisher_init+0x3a>
 8009644:	2764      	movs	r7, #100	@ 0x64
 8009646:	4638      	mov	r0, r7
 8009648:	b008      	add	sp, #32
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	4630      	mov	r0, r6
 8009650:	f006 fb8a 	bl	800fd68 <rcl_node_is_valid>
 8009654:	2800      	cmp	r0, #0
 8009656:	d052      	beq.n	80096fe <rcl_publisher_init+0xea>
 8009658:	f1b8 0f00 	cmp.w	r8, #0
 800965c:	d04a      	beq.n	80096f4 <rcl_publisher_init+0xe0>
 800965e:	2f00      	cmp	r7, #0
 8009660:	d048      	beq.n	80096f4 <rcl_publisher_init+0xe0>
 8009662:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009666:	aa07      	add	r2, sp, #28
 8009668:	9205      	str	r2, [sp, #20]
 800966a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800966e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009672:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009676:	f8cd a01c 	str.w	sl, [sp, #28]
 800967a:	4639      	mov	r1, r7
 800967c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009680:	4630      	mov	r0, r6
 8009682:	f006 fbc5 	bl	800fe10 <rcl_node_resolve_name>
 8009686:	4607      	mov	r7, r0
 8009688:	2800      	cmp	r0, #0
 800968a:	d14f      	bne.n	800972c <rcl_publisher_init+0x118>
 800968c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800968e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009690:	20c8      	movs	r0, #200	@ 0xc8
 8009692:	4798      	blx	r3
 8009694:	6020      	str	r0, [r4, #0]
 8009696:	2800      	cmp	r0, #0
 8009698:	d04e      	beq.n	8009738 <rcl_publisher_init+0x124>
 800969a:	4630      	mov	r0, r6
 800969c:	f006 fb86 	bl	800fdac <rcl_node_get_rmw_handle>
 80096a0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	9a07      	ldr	r2, [sp, #28]
 80096a8:	6827      	ldr	r7, [r4, #0]
 80096aa:	462b      	mov	r3, r5
 80096ac:	4641      	mov	r1, r8
 80096ae:	f001 f8ed 	bl	800a88c <rmw_create_publisher>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80096b8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80096bc:	b370      	cbz	r0, 800971c <rcl_publisher_init+0x108>
 80096be:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80096c2:	f001 f9c1 	bl	800aa48 <rmw_publisher_get_actual_qos>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	4607      	mov	r7, r0
 80096ca:	b9d0      	cbnz	r0, 8009702 <rcl_publisher_init+0xee>
 80096cc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80096d0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80096d4:	4629      	mov	r1, r5
 80096d6:	2270      	movs	r2, #112	@ 0x70
 80096d8:	4618      	mov	r0, r3
 80096da:	f00d f862 	bl	80167a2 <memcpy>
 80096de:	6832      	ldr	r2, [r6, #0]
 80096e0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80096e4:	9807      	ldr	r0, [sp, #28]
 80096e6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80096e8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80096ea:	4798      	blx	r3
 80096ec:	4638      	mov	r0, r7
 80096ee:	b008      	add	sp, #32
 80096f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f4:	270b      	movs	r7, #11
 80096f6:	4638      	mov	r0, r7
 80096f8:	b008      	add	sp, #32
 80096fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fe:	27c8      	movs	r7, #200	@ 0xc8
 8009700:	e7a1      	b.n	8009646 <rcl_publisher_init+0x32>
 8009702:	b18b      	cbz	r3, 8009728 <rcl_publisher_init+0x114>
 8009704:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009708:	b142      	cbz	r2, 800971c <rcl_publisher_init+0x108>
 800970a:	4630      	mov	r0, r6
 800970c:	f006 fb4e 	bl	800fdac <rcl_node_get_rmw_handle>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009716:	f001 f9a7 	bl	800aa68 <rmw_destroy_publisher>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800971e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009720:	4618      	mov	r0, r3
 8009722:	4790      	blx	r2
 8009724:	2300      	movs	r3, #0
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	2701      	movs	r7, #1
 800972a:	e7db      	b.n	80096e4 <rcl_publisher_init+0xd0>
 800972c:	2867      	cmp	r0, #103	@ 0x67
 800972e:	d0d9      	beq.n	80096e4 <rcl_publisher_init+0xd0>
 8009730:	2869      	cmp	r0, #105	@ 0x69
 8009732:	d003      	beq.n	800973c <rcl_publisher_init+0x128>
 8009734:	280a      	cmp	r0, #10
 8009736:	d1f7      	bne.n	8009728 <rcl_publisher_init+0x114>
 8009738:	270a      	movs	r7, #10
 800973a:	e7d3      	b.n	80096e4 <rcl_publisher_init+0xd0>
 800973c:	2767      	movs	r7, #103	@ 0x67
 800973e:	e7d1      	b.n	80096e4 <rcl_publisher_init+0xd0>

08009740 <rcl_publisher_get_default_options>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4d14      	ldr	r5, [pc, #80]	@ (8009794 <rcl_publisher_get_default_options+0x54>)
 8009744:	4914      	ldr	r1, [pc, #80]	@ (8009798 <rcl_publisher_get_default_options+0x58>)
 8009746:	b088      	sub	sp, #32
 8009748:	4604      	mov	r4, r0
 800974a:	2250      	movs	r2, #80	@ 0x50
 800974c:	4628      	mov	r0, r5
 800974e:	f00d f828 	bl	80167a2 <memcpy>
 8009752:	a802      	add	r0, sp, #8
 8009754:	f000 ff7c 	bl	800a650 <rcutils_get_default_allocator>
 8009758:	f10d 0c08 	add.w	ip, sp, #8
 800975c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009760:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009764:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009768:	466e      	mov	r6, sp
 800976a:	f8dc 3000 	ldr.w	r3, [ip]
 800976e:	f8ce 3000 	str.w	r3, [lr]
 8009772:	4630      	mov	r0, r6
 8009774:	f001 f80c 	bl	800a790 <rmw_get_default_publisher_options>
 8009778:	e896 0003 	ldmia.w	r6, {r0, r1}
 800977c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009780:	e883 0003 	stmia.w	r3, {r0, r1}
 8009784:	2270      	movs	r2, #112	@ 0x70
 8009786:	4629      	mov	r1, r5
 8009788:	4620      	mov	r0, r4
 800978a:	f00d f80a 	bl	80167a2 <memcpy>
 800978e:	4620      	mov	r0, r4
 8009790:	b008      	add	sp, #32
 8009792:	bd70      	pop	{r4, r5, r6, pc}
 8009794:	20009318 	.word	0x20009318
 8009798:	08017618 	.word	0x08017618

0800979c <rcl_publish>:
 800979c:	b1f8      	cbz	r0, 80097de <rcl_publish+0x42>
 800979e:	6803      	ldr	r3, [r0, #0]
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4604      	mov	r4, r0
 80097a4:	b1b3      	cbz	r3, 80097d4 <rcl_publish+0x38>
 80097a6:	4616      	mov	r6, r2
 80097a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80097ac:	b192      	cbz	r2, 80097d4 <rcl_publish+0x38>
 80097ae:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80097b2:	460d      	mov	r5, r1
 80097b4:	f005 ff14 	bl	800f5e0 <rcl_context_is_valid>
 80097b8:	b160      	cbz	r0, 80097d4 <rcl_publish+0x38>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80097c0:	b140      	cbz	r0, 80097d4 <rcl_publish+0x38>
 80097c2:	b155      	cbz	r5, 80097da <rcl_publish+0x3e>
 80097c4:	4632      	mov	r2, r6
 80097c6:	4629      	mov	r1, r5
 80097c8:	f001 f800 	bl	800a7cc <rmw_publish>
 80097cc:	3800      	subs	r0, #0
 80097ce:	bf18      	it	ne
 80097d0:	2001      	movne	r0, #1
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	200b      	movs	r0, #11
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80097e2:	4770      	bx	lr

080097e4 <rcl_publisher_is_valid>:
 80097e4:	b1a0      	cbz	r0, 8009810 <rcl_publisher_is_valid+0x2c>
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	b173      	cbz	r3, 800980c <rcl_publisher_is_valid+0x28>
 80097ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80097f2:	b15a      	cbz	r2, 800980c <rcl_publisher_is_valid+0x28>
 80097f4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80097f8:	f005 fef2 	bl	800f5e0 <rcl_context_is_valid>
 80097fc:	b130      	cbz	r0, 800980c <rcl_publisher_is_valid+0x28>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009804:	3800      	subs	r0, #0
 8009806:	bf18      	it	ne
 8009808:	2001      	movne	r0, #1
 800980a:	bd10      	pop	{r4, pc}
 800980c:	2000      	movs	r0, #0
 800980e:	bd10      	pop	{r4, pc}
 8009810:	2000      	movs	r0, #0
 8009812:	4770      	bx	lr

08009814 <rcl_publisher_is_valid_except_context>:
 8009814:	b130      	cbz	r0, 8009824 <rcl_publisher_is_valid_except_context+0x10>
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	b120      	cbz	r0, 8009824 <rcl_publisher_is_valid_except_context+0x10>
 800981a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800981e:	3800      	subs	r0, #0
 8009820:	bf18      	it	ne
 8009822:	2001      	movne	r0, #1
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop

08009828 <_rclc_check_for_new_data>:
 8009828:	2800      	cmp	r0, #0
 800982a:	d046      	beq.n	80098ba <_rclc_check_for_new_data+0x92>
 800982c:	b510      	push	{r4, lr}
 800982e:	7802      	ldrb	r2, [r0, #0]
 8009830:	b084      	sub	sp, #16
 8009832:	4603      	mov	r3, r0
 8009834:	2a0a      	cmp	r2, #10
 8009836:	d842      	bhi.n	80098be <_rclc_check_for_new_data+0x96>
 8009838:	e8df f002 	tbb	[pc, r2]
 800983c:	14181212 	.word	0x14181212
 8009840:	06060614 	.word	0x06060614
 8009844:	2e1a      	.short	0x2e1a
 8009846:	16          	.byte	0x16
 8009847:	00          	.byte	0x00
 8009848:	6a0a      	ldr	r2, [r1, #32]
 800984a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800984c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009850:	2000      	movs	r0, #0
 8009852:	1a12      	subs	r2, r2, r0
 8009854:	bf18      	it	ne
 8009856:	2201      	movne	r2, #1
 8009858:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800985c:	b004      	add	sp, #16
 800985e:	bd10      	pop	{r4, pc}
 8009860:	680a      	ldr	r2, [r1, #0]
 8009862:	e7f2      	b.n	800984a <_rclc_check_for_new_data+0x22>
 8009864:	698a      	ldr	r2, [r1, #24]
 8009866:	e7f0      	b.n	800984a <_rclc_check_for_new_data+0x22>
 8009868:	688a      	ldr	r2, [r1, #8]
 800986a:	e7ee      	b.n	800984a <_rclc_check_for_new_data+0x22>
 800986c:	690a      	ldr	r2, [r1, #16]
 800986e:	e7ec      	b.n	800984a <_rclc_check_for_new_data+0x22>
 8009870:	685c      	ldr	r4, [r3, #4]
 8009872:	4608      	mov	r0, r1
 8009874:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009878:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800987c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009880:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800988a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800988e:	f104 0110 	add.w	r1, r4, #16
 8009892:	f007 fe25 	bl	80114e0 <rcl_action_client_wait_set_get_entities_ready>
 8009896:	e7e1      	b.n	800985c <_rclc_check_for_new_data+0x34>
 8009898:	685c      	ldr	r4, [r3, #4]
 800989a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800989e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80098a2:	e9cd 3200 	strd	r3, r2, [sp]
 80098a6:	4608      	mov	r0, r1
 80098a8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80098ac:	f104 0220 	add.w	r2, r4, #32
 80098b0:	f104 0110 	add.w	r1, r4, #16
 80098b4:	f008 f82c 	bl	8011910 <rcl_action_server_wait_set_get_entities_ready>
 80098b8:	e7d0      	b.n	800985c <_rclc_check_for_new_data+0x34>
 80098ba:	200b      	movs	r0, #11
 80098bc:	4770      	bx	lr
 80098be:	2001      	movs	r0, #1
 80098c0:	e7cc      	b.n	800985c <_rclc_check_for_new_data+0x34>
 80098c2:	bf00      	nop

080098c4 <_rclc_take_new_data>:
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	b09b      	sub	sp, #108	@ 0x6c
 80098c8:	2800      	cmp	r0, #0
 80098ca:	f000 8088 	beq.w	80099de <_rclc_take_new_data+0x11a>
 80098ce:	7803      	ldrb	r3, [r0, #0]
 80098d0:	4604      	mov	r4, r0
 80098d2:	2b0a      	cmp	r3, #10
 80098d4:	f200 8167 	bhi.w	8009ba6 <_rclc_take_new_data+0x2e2>
 80098d8:	e8df f003 	tbb	[pc, r3]
 80098dc:	44152d2d 	.word	0x44152d2d
 80098e0:	19191944 	.word	0x19191944
 80098e4:	065a      	.short	0x065a
 80098e6:	15          	.byte	0x15
 80098e7:	00          	.byte	0x00
 80098e8:	6840      	ldr	r0, [r0, #4]
 80098ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80b2 	bne.w	8009a58 <_rclc_take_new_data+0x194>
 80098f4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f040 80e4 	bne.w	8009ac6 <_rclc_take_new_data+0x202>
 80098fe:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009902:	2b00      	cmp	r3, #0
 8009904:	d16f      	bne.n	80099e6 <_rclc_take_new_data+0x122>
 8009906:	2500      	movs	r5, #0
 8009908:	4628      	mov	r0, r5
 800990a:	b01b      	add	sp, #108	@ 0x6c
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009910:	6a0b      	ldr	r3, [r1, #32]
 8009912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0f5      	beq.n	8009906 <_rclc_take_new_data+0x42>
 800991a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800991e:	f104 0110 	add.w	r1, r4, #16
 8009922:	f006 fb23 	bl	800ff6c <rcl_take_request>
 8009926:	4605      	mov	r5, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d0ec      	beq.n	8009906 <_rclc_take_new_data+0x42>
 800992c:	f240 2359 	movw	r3, #601	@ 0x259
 8009930:	4298      	cmp	r0, r3
 8009932:	d013      	beq.n	800995c <_rclc_take_new_data+0x98>
 8009934:	e029      	b.n	800998a <_rclc_take_new_data+0xc6>
 8009936:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009938:	680b      	ldr	r3, [r1, #0]
 800993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0e1      	beq.n	8009906 <_rclc_take_new_data+0x42>
 8009942:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009946:	2300      	movs	r3, #0
 8009948:	aa0a      	add	r2, sp, #40	@ 0x28
 800994a:	f006 fc4d 	bl	80101e8 <rcl_take>
 800994e:	4605      	mov	r5, r0
 8009950:	2800      	cmp	r0, #0
 8009952:	d0d9      	beq.n	8009908 <_rclc_take_new_data+0x44>
 8009954:	f240 1391 	movw	r3, #401	@ 0x191
 8009958:	4298      	cmp	r0, r3
 800995a:	d116      	bne.n	800998a <_rclc_take_new_data+0xc6>
 800995c:	2300      	movs	r3, #0
 800995e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009962:	e7d1      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009964:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009966:	698b      	ldr	r3, [r1, #24]
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0ca      	beq.n	8009906 <_rclc_take_new_data+0x42>
 8009970:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009974:	f104 0110 	add.w	r1, r4, #16
 8009978:	f005 fdc2 	bl	800f500 <rcl_take_response>
 800997c:	4605      	mov	r5, r0
 800997e:	2800      	cmp	r0, #0
 8009980:	d0c1      	beq.n	8009906 <_rclc_take_new_data+0x42>
 8009982:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009986:	4298      	cmp	r0, r3
 8009988:	d0be      	beq.n	8009908 <_rclc_take_new_data+0x44>
 800998a:	f000 fe95 	bl	800a6b8 <rcutils_reset_error>
 800998e:	e7bb      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009990:	6840      	ldr	r0, [r0, #4]
 8009992:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009996:	2b00      	cmp	r3, #0
 8009998:	d17d      	bne.n	8009a96 <_rclc_take_new_data+0x1d2>
 800999a:	69c3      	ldr	r3, [r0, #28]
 800999c:	b11b      	cbz	r3, 80099a6 <_rclc_take_new_data+0xe2>
 800999e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d144      	bne.n	8009a30 <_rclc_take_new_data+0x16c>
 80099a6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 80ac 	bne.w	8009b08 <_rclc_take_new_data+0x244>
 80099b0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0a6      	beq.n	8009906 <_rclc_take_new_data+0x42>
 80099b8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80099ba:	a90a      	add	r1, sp, #40	@ 0x28
 80099bc:	3010      	adds	r0, #16
 80099be:	f007 fc67 	bl	8011290 <rcl_action_take_result_response>
 80099c2:	4605      	mov	r5, r0
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e0      	bne.n	800998a <_rclc_take_new_data+0xc6>
 80099c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099cc:	6860      	ldr	r0, [r4, #4]
 80099ce:	f008 f8c3 	bl	8011b58 <rclc_action_find_handle_by_result_request_sequence_number>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d098      	beq.n	8009908 <_rclc_take_new_data+0x44>
 80099d6:	2301      	movs	r3, #1
 80099d8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80099dc:	e794      	b.n	8009908 <_rclc_take_new_data+0x44>
 80099de:	250b      	movs	r5, #11
 80099e0:	4628      	mov	r0, r5
 80099e2:	b01b      	add	sp, #108	@ 0x6c
 80099e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e6:	ae04      	add	r6, sp, #16
 80099e8:	aa0a      	add	r2, sp, #40	@ 0x28
 80099ea:	3010      	adds	r0, #16
 80099ec:	4631      	mov	r1, r6
 80099ee:	f007 fec3 	bl	8011778 <rcl_action_take_cancel_request>
 80099f2:	4605      	mov	r5, r0
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d1c8      	bne.n	800998a <_rclc_take_new_data+0xc6>
 80099f8:	6860      	ldr	r0, [r4, #4]
 80099fa:	a90a      	add	r1, sp, #40	@ 0x28
 80099fc:	f008 f86a 	bl	8011ad4 <rclc_action_find_goal_handle_by_uuid>
 8009a00:	4607      	mov	r7, r0
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f000 80bb 	beq.w	8009b7e <_rclc_take_new_data+0x2ba>
 8009a08:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	f007 ffeb 	bl	80119e8 <rcl_action_transition_goal_state>
 8009a12:	2803      	cmp	r0, #3
 8009a14:	4684      	mov	ip, r0
 8009a16:	f040 80a7 	bne.w	8009b68 <_rclc_take_new_data+0x2a4>
 8009a1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009a1c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a22:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009a26:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a2a:	f887 c008 	strb.w	ip, [r7, #8]
 8009a2e:	e76b      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009a30:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a32:	3010      	adds	r0, #16
 8009a34:	f007 fcac 	bl	8011390 <rcl_action_take_feedback>
 8009a38:	4605      	mov	r5, r0
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d1a5      	bne.n	800998a <_rclc_take_new_data+0xc6>
 8009a3e:	6860      	ldr	r0, [r4, #4]
 8009a40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a42:	f008 f847 	bl	8011ad4 <rclc_action_find_goal_handle_by_uuid>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f000 80a3 	beq.w	8009b94 <_rclc_take_new_data+0x2d0>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	6860      	ldr	r0, [r4, #4]
 8009a52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009a56:	e7a6      	b.n	80099a6 <_rclc_take_new_data+0xe2>
 8009a58:	f008 f816 	bl	8011a88 <rclc_action_take_goal_handle>
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	6860      	ldr	r0, [r4, #4]
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	f43f af47 	beq.w	80098f4 <_rclc_take_new_data+0x30>
 8009a66:	6070      	str	r0, [r6, #4]
 8009a68:	69f2      	ldr	r2, [r6, #28]
 8009a6a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009a6e:	3010      	adds	r0, #16
 8009a70:	f007 fdca 	bl	8011608 <rcl_action_take_goal_request>
 8009a74:	4605      	mov	r5, r0
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f040 808e 	bne.w	8009b98 <_rclc_take_new_data+0x2d4>
 8009a7c:	69f7      	ldr	r7, [r6, #28]
 8009a7e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009a80:	7235      	strb	r5, [r6, #8]
 8009a82:	f8c6 0009 	str.w	r0, [r6, #9]
 8009a86:	f8c6 100d 	str.w	r1, [r6, #13]
 8009a8a:	6860      	ldr	r0, [r4, #4]
 8009a8c:	f8c6 2011 	str.w	r2, [r6, #17]
 8009a90:	f8c6 3015 	str.w	r3, [r6, #21]
 8009a94:	e72e      	b.n	80098f4 <_rclc_take_new_data+0x30>
 8009a96:	aa04      	add	r2, sp, #16
 8009a98:	a90a      	add	r1, sp, #40	@ 0x28
 8009a9a:	3010      	adds	r0, #16
 8009a9c:	f007 fb80 	bl	80111a0 <rcl_action_take_goal_response>
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f47f af71 	bne.w	800998a <_rclc_take_new_data+0xc6>
 8009aa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aac:	6860      	ldr	r0, [r4, #4]
 8009aae:	f008 f841 	bl	8011b34 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009ab2:	b130      	cbz	r0, 8009ac2 <_rclc_take_new_data+0x1fe>
 8009ab4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009ab8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009abc:	2201      	movs	r2, #1
 8009abe:	f880 2020 	strb.w	r2, [r0, #32]
 8009ac2:	6860      	ldr	r0, [r4, #4]
 8009ac4:	e769      	b.n	800999a <_rclc_take_new_data+0xd6>
 8009ac6:	aa04      	add	r2, sp, #16
 8009ac8:	3010      	adds	r0, #16
 8009aca:	a90a      	add	r1, sp, #40	@ 0x28
 8009acc:	f007 fe14 	bl	80116f8 <rcl_action_take_result_request>
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f47f af59 	bne.w	800998a <_rclc_take_new_data+0xc6>
 8009ad8:	6860      	ldr	r0, [r4, #4]
 8009ada:	a904      	add	r1, sp, #16
 8009adc:	f007 fffa 	bl	8011ad4 <rclc_action_find_goal_handle_by_uuid>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	b160      	cbz	r0, 8009afe <_rclc_take_new_data+0x23a>
 8009ae4:	ad0a      	add	r5, sp, #40	@ 0x28
 8009ae6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009aee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009af2:	f04f 0c02 	mov.w	ip, #2
 8009af6:	e886 0003 	stmia.w	r6, {r0, r1}
 8009afa:	f887 c008 	strb.w	ip, [r7, #8]
 8009afe:	6860      	ldr	r0, [r4, #4]
 8009b00:	2300      	movs	r3, #0
 8009b02:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009b06:	e6fa      	b.n	80098fe <_rclc_take_new_data+0x3a>
 8009b08:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009b0c:	a90a      	add	r1, sp, #40	@ 0x28
 8009b0e:	3010      	adds	r0, #16
 8009b10:	f007 fbfe 	bl	8011310 <rcl_action_take_cancel_response>
 8009b14:	4605      	mov	r5, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f47f af37 	bne.w	800998a <_rclc_take_new_data+0xc6>
 8009b1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b20:	6860      	ldr	r0, [r4, #4]
 8009b22:	f008 f82b 	bl	8011b7c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009b26:	4606      	mov	r6, r0
 8009b28:	6860      	ldr	r0, [r4, #4]
 8009b2a:	2e00      	cmp	r6, #0
 8009b2c:	f43f af40 	beq.w	80099b0 <_rclc_take_new_data+0xec>
 8009b30:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b32:	2701      	movs	r7, #1
 8009b34:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f43f af3a 	beq.w	80099b0 <_rclc_take_new_data+0xec>
 8009b3c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b3e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009b42:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b46:	f007 ffc5 	bl	8011ad4 <rclc_action_find_goal_handle_by_uuid>
 8009b4a:	b138      	cbz	r0, 8009b5c <_rclc_take_new_data+0x298>
 8009b4c:	6860      	ldr	r0, [r4, #4]
 8009b4e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b50:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009b54:	3501      	adds	r5, #1
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	d8f0      	bhi.n	8009b3c <_rclc_take_new_data+0x278>
 8009b5a:	e729      	b.n	80099b0 <_rclc_take_new_data+0xec>
 8009b5c:	6860      	ldr	r0, [r4, #4]
 8009b5e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b60:	3501      	adds	r5, #1
 8009b62:	42ab      	cmp	r3, r5
 8009b64:	d8ea      	bhi.n	8009b3c <_rclc_take_new_data+0x278>
 8009b66:	e723      	b.n	80099b0 <_rclc_take_new_data+0xec>
 8009b68:	ab06      	add	r3, sp, #24
 8009b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b70:	2103      	movs	r1, #3
 8009b72:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009b76:	6860      	ldr	r0, [r4, #4]
 8009b78:	f008 f876 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 8009b7c:	e6c4      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009b7e:	ab06      	add	r3, sp, #24
 8009b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b86:	2102      	movs	r1, #2
 8009b88:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009b8c:	6860      	ldr	r0, [r4, #4]
 8009b8e:	f008 f86b 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 8009b92:	e6b9      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009b94:	6860      	ldr	r0, [r4, #4]
 8009b96:	e706      	b.n	80099a6 <_rclc_take_new_data+0xe2>
 8009b98:	6860      	ldr	r0, [r4, #4]
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	f007 ff84 	bl	8011aa8 <rclc_action_remove_used_goal_handle>
 8009ba0:	f000 fd8a 	bl	800a6b8 <rcutils_reset_error>
 8009ba4:	e6b0      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009ba6:	2501      	movs	r5, #1
 8009ba8:	e6ae      	b.n	8009908 <_rclc_take_new_data+0x44>
 8009baa:	bf00      	nop

08009bac <_rclc_execute.part.0>:
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	7803      	ldrb	r3, [r0, #0]
 8009bb0:	b087      	sub	sp, #28
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	2b0a      	cmp	r3, #10
 8009bb6:	f200 8136 	bhi.w	8009e26 <_rclc_execute.part.0+0x27a>
 8009bba:	e8df f003 	tbb	[pc, r3]
 8009bbe:	435e      	.short	0x435e
 8009bc0:	06a1664f 	.word	0x06a1664f
 8009bc4:	6c1e0606 	.word	0x6c1e0606
 8009bc8:	59          	.byte	0x59
 8009bc9:	00          	.byte	0x00
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	f000 8122 	beq.w	8009e14 <_rclc_execute.part.0+0x268>
 8009bd0:	2b07      	cmp	r3, #7
 8009bd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009bd4:	f040 8118 	bne.w	8009e08 <_rclc_execute.part.0+0x25c>
 8009bd8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009bdc:	6880      	ldr	r0, [r0, #8]
 8009bde:	4798      	blx	r3
 8009be0:	f104 0110 	add.w	r1, r4, #16
 8009be4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009be6:	6860      	ldr	r0, [r4, #4]
 8009be8:	f006 fa00 	bl	800ffec <rcl_send_response>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d033      	beq.n	8009c58 <_rclc_execute.part.0+0xac>
 8009bf0:	9005      	str	r0, [sp, #20]
 8009bf2:	f000 fd61 	bl	800a6b8 <rcutils_reset_error>
 8009bf6:	9805      	ldr	r0, [sp, #20]
 8009bf8:	e02e      	b.n	8009c58 <_rclc_execute.part.0+0xac>
 8009bfa:	6840      	ldr	r0, [r0, #4]
 8009bfc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 8086 	beq.w	8009d12 <_rclc_execute.part.0+0x166>
 8009c06:	2600      	movs	r6, #0
 8009c08:	2701      	movs	r7, #1
 8009c0a:	e004      	b.n	8009c16 <_rclc_execute.part.0+0x6a>
 8009c0c:	f007 ff16 	bl	8011a3c <rclc_action_send_result_request>
 8009c10:	b998      	cbnz	r0, 8009c3a <_rclc_execute.part.0+0x8e>
 8009c12:	722f      	strb	r7, [r5, #8]
 8009c14:	6860      	ldr	r0, [r4, #4]
 8009c16:	f007 ffc3 	bl	8011ba0 <rclc_action_find_first_handle_with_goal_response>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d077      	beq.n	8009d10 <_rclc_execute.part.0+0x164>
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009c2a:	f885 6020 	strb.w	r6, [r5, #32]
 8009c2e:	4798      	blx	r3
 8009c30:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009c34:	4628      	mov	r0, r5
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e8      	bne.n	8009c0c <_rclc_execute.part.0+0x60>
 8009c3a:	6860      	ldr	r0, [r4, #4]
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	f007 ff33 	bl	8011aa8 <rclc_action_remove_used_goal_handle>
 8009c42:	e7e7      	b.n	8009c14 <_rclc_execute.part.0+0x68>
 8009c44:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009c48:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	f000 80c9 	beq.w	8009de4 <_rclc_execute.part.0+0x238>
 8009c52:	6880      	ldr	r0, [r0, #8]
 8009c54:	4798      	blx	r3
 8009c56:	2000      	movs	r0, #0
 8009c58:	b007      	add	sp, #28
 8009c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5c:	6840      	ldr	r0, [r0, #4]
 8009c5e:	f006 fbc7 	bl	80103f0 <rcl_timer_call>
 8009c62:	f240 3321 	movw	r3, #801	@ 0x321
 8009c66:	4298      	cmp	r0, r3
 8009c68:	d004      	beq.n	8009c74 <_rclc_execute.part.0+0xc8>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0f4      	beq.n	8009c58 <_rclc_execute.part.0+0xac>
 8009c6e:	e7bf      	b.n	8009bf0 <_rclc_execute.part.0+0x44>
 8009c70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c72:	4798      	blx	r3
 8009c74:	2000      	movs	r0, #0
 8009c76:	b007      	add	sp, #28
 8009c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009c7e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c80:	b925      	cbnz	r5, 8009c8c <_rclc_execute.part.0+0xe0>
 8009c82:	4628      	mov	r0, r5
 8009c84:	4798      	blx	r3
 8009c86:	4628      	mov	r0, r5
 8009c88:	e7e6      	b.n	8009c58 <_rclc_execute.part.0+0xac>
 8009c8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c8c:	68a0      	ldr	r0, [r4, #8]
 8009c8e:	4798      	blx	r3
 8009c90:	2000      	movs	r0, #0
 8009c92:	b007      	add	sp, #28
 8009c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c96:	6840      	ldr	r0, [r0, #4]
 8009c98:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009c9c:	bb3b      	cbnz	r3, 8009cee <_rclc_execute.part.0+0x142>
 8009c9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d07b      	beq.n	8009d9e <_rclc_execute.part.0+0x1f2>
 8009ca6:	f640 0634 	movw	r6, #2100	@ 0x834
 8009caa:	2701      	movs	r7, #1
 8009cac:	e007      	b.n	8009cbe <_rclc_execute.part.0+0x112>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f007 ff8e 	bl	8011bd0 <rclc_action_server_response_goal_request>
 8009cb4:	6860      	ldr	r0, [r4, #4]
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f007 fef6 	bl	8011aa8 <rclc_action_remove_used_goal_handle>
 8009cbc:	6860      	ldr	r0, [r4, #4]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	f007 ff20 	bl	8011b04 <rclc_action_find_first_handle_by_status>
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d066      	beq.n	8009d98 <_rclc_execute.part.0+0x1ec>
 8009cca:	6863      	ldr	r3, [r4, #4]
 8009ccc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	4798      	blx	r3
 8009cd2:	42b0      	cmp	r0, r6
 8009cd4:	f04f 0100 	mov.w	r1, #0
 8009cd8:	d1e9      	bne.n	8009cae <_rclc_execute.part.0+0x102>
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f007 ff77 	bl	8011bd0 <rclc_action_server_response_goal_request>
 8009ce2:	722f      	strb	r7, [r5, #8]
 8009ce4:	e7ea      	b.n	8009cbc <_rclc_execute.part.0+0x110>
 8009ce6:	6848      	ldr	r0, [r1, #4]
 8009ce8:	f007 fede 	bl	8011aa8 <rclc_action_remove_used_goal_handle>
 8009cec:	6860      	ldr	r0, [r4, #4]
 8009cee:	f007 ff15 	bl	8011b1c <rclc_action_find_first_terminated_handle>
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1f6      	bne.n	8009ce6 <_rclc_execute.part.0+0x13a>
 8009cf8:	6860      	ldr	r0, [r4, #4]
 8009cfa:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009cfe:	e7ce      	b.n	8009c9e <_rclc_execute.part.0+0xf2>
 8009d00:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009d02:	6880      	ldr	r0, [r0, #8]
 8009d04:	f104 0110 	add.w	r1, r4, #16
 8009d08:	4798      	blx	r3
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	b007      	add	sp, #28
 8009d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d10:	6860      	ldr	r0, [r4, #4]
 8009d12:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009d16:	b18b      	cbz	r3, 8009d3c <_rclc_execute.part.0+0x190>
 8009d18:	68c5      	ldr	r5, [r0, #12]
 8009d1a:	b32d      	cbz	r5, 8009d68 <_rclc_execute.part.0+0x1bc>
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009d22:	b143      	cbz	r3, 8009d36 <_rclc_execute.part.0+0x18a>
 8009d24:	69c3      	ldr	r3, [r0, #28]
 8009d26:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009d2a:	b123      	cbz	r3, 8009d36 <_rclc_execute.part.0+0x18a>
 8009d2c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009d2e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d30:	4628      	mov	r0, r5
 8009d32:	4798      	blx	r3
 8009d34:	6860      	ldr	r0, [r4, #4]
 8009d36:	682d      	ldr	r5, [r5, #0]
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d1f0      	bne.n	8009d1e <_rclc_execute.part.0+0x172>
 8009d3c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009d40:	b193      	cbz	r3, 8009d68 <_rclc_execute.part.0+0x1bc>
 8009d42:	68c5      	ldr	r5, [r0, #12]
 8009d44:	b185      	cbz	r5, 8009d68 <_rclc_execute.part.0+0x1bc>
 8009d46:	2600      	movs	r6, #0
 8009d48:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009d4c:	b14b      	cbz	r3, 8009d62 <_rclc_execute.part.0+0x1b6>
 8009d4e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009d50:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009d54:	b12b      	cbz	r3, 8009d62 <_rclc_execute.part.0+0x1b6>
 8009d56:	4628      	mov	r0, r5
 8009d58:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009d5c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d5e:	4798      	blx	r3
 8009d60:	6860      	ldr	r0, [r4, #4]
 8009d62:	682d      	ldr	r5, [r5, #0]
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	d1ef      	bne.n	8009d48 <_rclc_execute.part.0+0x19c>
 8009d68:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d081      	beq.n	8009c74 <_rclc_execute.part.0+0xc8>
 8009d70:	2700      	movs	r7, #0
 8009d72:	e00b      	b.n	8009d8c <_rclc_execute.part.0+0x1e0>
 8009d74:	6863      	ldr	r3, [r4, #4]
 8009d76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009d7a:	6a1e      	ldr	r6, [r3, #32]
 8009d7c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009d80:	47b0      	blx	r6
 8009d82:	6860      	ldr	r0, [r4, #4]
 8009d84:	4629      	mov	r1, r5
 8009d86:	f007 fe8f 	bl	8011aa8 <rclc_action_remove_used_goal_handle>
 8009d8a:	6860      	ldr	r0, [r4, #4]
 8009d8c:	f007 ff14 	bl	8011bb8 <rclc_action_find_first_handle_with_result_response>
 8009d90:	4605      	mov	r5, r0
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1ee      	bne.n	8009d74 <_rclc_execute.part.0+0x1c8>
 8009d96:	e76d      	b.n	8009c74 <_rclc_execute.part.0+0xc8>
 8009d98:	6860      	ldr	r0, [r4, #4]
 8009d9a:	f880 5020 	strb.w	r5, [r0, #32]
 8009d9e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f43f af66 	beq.w	8009c74 <_rclc_execute.part.0+0xc8>
 8009da8:	68c5      	ldr	r5, [r0, #12]
 8009daa:	b1b5      	cbz	r5, 8009dda <_rclc_execute.part.0+0x22e>
 8009dac:	2602      	movs	r6, #2
 8009dae:	e001      	b.n	8009db4 <_rclc_execute.part.0+0x208>
 8009db0:	682d      	ldr	r5, [r5, #0]
 8009db2:	b195      	cbz	r5, 8009dda <_rclc_execute.part.0+0x22e>
 8009db4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d1f9      	bne.n	8009db0 <_rclc_execute.part.0+0x204>
 8009dbc:	69c3      	ldr	r3, [r0, #28]
 8009dbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	4798      	blx	r3
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009dd0:	b163      	cbz	r3, 8009dec <_rclc_execute.part.0+0x240>
 8009dd2:	f007 ff1d 	bl	8011c10 <rclc_action_server_goal_cancel_accept>
 8009dd6:	6860      	ldr	r0, [r4, #4]
 8009dd8:	e7ea      	b.n	8009db0 <_rclc_execute.part.0+0x204>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009de0:	4618      	mov	r0, r3
 8009de2:	e739      	b.n	8009c58 <_rclc_execute.part.0+0xac>
 8009de4:	4628      	mov	r0, r5
 8009de6:	4798      	blx	r3
 8009de8:	4628      	mov	r0, r5
 8009dea:	e735      	b.n	8009c58 <_rclc_execute.part.0+0xac>
 8009dec:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009dee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009df2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfa:	6860      	ldr	r0, [r4, #4]
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	f007 ff33 	bl	8011c68 <rclc_action_server_goal_cancel_reject>
 8009e02:	722e      	strb	r6, [r5, #8]
 8009e04:	6860      	ldr	r0, [r4, #4]
 8009e06:	e7d3      	b.n	8009db0 <_rclc_execute.part.0+0x204>
 8009e08:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009e0a:	6880      	ldr	r0, [r0, #8]
 8009e0c:	4798      	blx	r3
 8009e0e:	f104 0110 	add.w	r1, r4, #16
 8009e12:	e6e7      	b.n	8009be4 <_rclc_execute.part.0+0x38>
 8009e14:	f100 0110 	add.w	r1, r0, #16
 8009e18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e1a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009e1c:	6880      	ldr	r0, [r0, #8]
 8009e1e:	9105      	str	r1, [sp, #20]
 8009e20:	4798      	blx	r3
 8009e22:	9905      	ldr	r1, [sp, #20]
 8009e24:	e6de      	b.n	8009be4 <_rclc_execute.part.0+0x38>
 8009e26:	2001      	movs	r0, #1
 8009e28:	e716      	b.n	8009c58 <_rclc_execute.part.0+0xac>
 8009e2a:	bf00      	nop

08009e2c <rclc_executor_trigger_any>:
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d03f      	beq.n	8009eb0 <rclc_executor_trigger_any+0x84>
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d03e      	beq.n	8009eb2 <rclc_executor_trigger_any+0x86>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d037      	beq.n	8009eb0 <rclc_executor_trigger_any+0x84>
 8009e40:	b430      	push	{r4, r5}
 8009e42:	f893 c000 	ldrb.w	ip, [r3]
 8009e46:	f1bc 0f08 	cmp.w	ip, #8
 8009e4a:	d11e      	bne.n	8009e8a <rclc_executor_trigger_any+0x5e>
 8009e4c:	685c      	ldr	r4, [r3, #4]
 8009e4e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009e50:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009e54:	d105      	bne.n	8009e62 <rclc_executor_trigger_any+0x36>
 8009e56:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009e5a:	b910      	cbnz	r0, 8009e62 <rclc_executor_trigger_any+0x36>
 8009e5c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009e60:	b128      	cbz	r0, 8009e6e <rclc_executor_trigger_any+0x42>
 8009e62:	bc30      	pop	{r4, r5}
 8009e64:	4770      	bx	lr
 8009e66:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d1f9      	bne.n	8009e62 <rclc_executor_trigger_any+0x36>
 8009e6e:	3201      	adds	r2, #1
 8009e70:	4291      	cmp	r1, r2
 8009e72:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009e76:	d018      	beq.n	8009eaa <rclc_executor_trigger_any+0x7e>
 8009e78:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d0f0      	beq.n	8009e62 <rclc_executor_trigger_any+0x36>
 8009e80:	f893 c000 	ldrb.w	ip, [r3]
 8009e84:	f1bc 0f08 	cmp.w	ip, #8
 8009e88:	d0e0      	beq.n	8009e4c <rclc_executor_trigger_any+0x20>
 8009e8a:	f1bc 0f09 	cmp.w	ip, #9
 8009e8e:	d1ea      	bne.n	8009e66 <rclc_executor_trigger_any+0x3a>
 8009e90:	685c      	ldr	r4, [r3, #4]
 8009e92:	6a25      	ldr	r5, [r4, #32]
 8009e94:	2d00      	cmp	r5, #0
 8009e96:	d1e4      	bne.n	8009e62 <rclc_executor_trigger_any+0x36>
 8009e98:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d1e0      	bne.n	8009e62 <rclc_executor_trigger_any+0x36>
 8009ea0:	3201      	adds	r2, #1
 8009ea2:	4291      	cmp	r1, r2
 8009ea4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009ea8:	d1e6      	bne.n	8009e78 <rclc_executor_trigger_any+0x4c>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	bc30      	pop	{r4, r5}
 8009eae:	4770      	bx	lr
 8009eb0:	4770      	bx	lr
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop

08009eb8 <rclc_executor_init>:
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d05f      	beq.n	8009f7c <rclc_executor_init+0xc4>
 8009ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	b0b0      	sub	sp, #192	@ 0xc0
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d051      	beq.n	8009f6c <rclc_executor_init+0xb4>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	4616      	mov	r6, r2
 8009ece:	461f      	mov	r7, r3
 8009ed0:	f000 fbcc 	bl	800a66c <rcutils_allocator_is_valid>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d049      	beq.n	8009f6c <rclc_executor_init+0xb4>
 8009ed8:	2e00      	cmp	r6, #0
 8009eda:	d047      	beq.n	8009f6c <rclc_executor_init+0xb4>
 8009edc:	492c      	ldr	r1, [pc, #176]	@ (8009f90 <rclc_executor_init+0xd8>)
 8009ede:	2288      	movs	r2, #136	@ 0x88
 8009ee0:	a80e      	add	r0, sp, #56	@ 0x38
 8009ee2:	f00c fc5e 	bl	80167a2 <memcpy>
 8009ee6:	a90e      	add	r1, sp, #56	@ 0x38
 8009ee8:	2288      	movs	r2, #136	@ 0x88
 8009eea:	4628      	mov	r0, r5
 8009eec:	f00c fc59 	bl	80167a2 <memcpy>
 8009ef0:	602c      	str	r4, [r5, #0]
 8009ef2:	4668      	mov	r0, sp
 8009ef4:	60ae      	str	r6, [r5, #8]
 8009ef6:	466c      	mov	r4, sp
 8009ef8:	f006 fb82 	bl	8010600 <rcl_get_zero_initialized_wait_set>
 8009efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009efe:	f105 0c14 	add.w	ip, r5, #20
 8009f02:	f8d7 8000 	ldr.w	r8, [r7]
 8009f06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f16:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009f88 <rclc_executor_init+0xd0>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	f8cc 3000 	str.w	r3, [ip]
 8009f20:	6939      	ldr	r1, [r7, #16]
 8009f22:	612f      	str	r7, [r5, #16]
 8009f24:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009f28:	01b0      	lsls	r0, r6, #6
 8009f2a:	47c0      	blx	r8
 8009f2c:	6068      	str	r0, [r5, #4]
 8009f2e:	b338      	cbz	r0, 8009f80 <rclc_executor_init+0xc8>
 8009f30:	2400      	movs	r4, #0
 8009f32:	e000      	b.n	8009f36 <rclc_executor_init+0x7e>
 8009f34:	6868      	ldr	r0, [r5, #4]
 8009f36:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	3401      	adds	r4, #1
 8009f3e:	f000 fa6b 	bl	800a418 <rclc_executor_handle_init>
 8009f42:	42a6      	cmp	r6, r4
 8009f44:	d1f6      	bne.n	8009f34 <rclc_executor_init+0x7c>
 8009f46:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009f4a:	f000 fa5b 	bl	800a404 <rclc_executor_handle_counters_zero_init>
 8009f4e:	4a11      	ldr	r2, [pc, #68]	@ (8009f94 <rclc_executor_init+0xdc>)
 8009f50:	686b      	ldr	r3, [r5, #4]
 8009f52:	2000      	movs	r0, #0
 8009f54:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009f58:	b163      	cbz	r3, 8009f74 <rclc_executor_init+0xbc>
 8009f5a:	692b      	ldr	r3, [r5, #16]
 8009f5c:	b153      	cbz	r3, 8009f74 <rclc_executor_init+0xbc>
 8009f5e:	68ab      	ldr	r3, [r5, #8]
 8009f60:	b143      	cbz	r3, 8009f74 <rclc_executor_init+0xbc>
 8009f62:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009f66:	b030      	add	sp, #192	@ 0xc0
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	200b      	movs	r0, #11
 8009f6e:	b030      	add	sp, #192	@ 0xc0
 8009f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f74:	4618      	mov	r0, r3
 8009f76:	b030      	add	sp, #192	@ 0xc0
 8009f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7c:	200b      	movs	r0, #11
 8009f7e:	4770      	bx	lr
 8009f80:	200a      	movs	r0, #10
 8009f82:	e7f4      	b.n	8009f6e <rclc_executor_init+0xb6>
 8009f84:	f3af 8000 	nop.w
 8009f88:	3b9aca00 	.word	0x3b9aca00
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	08017668 	.word	0x08017668
 8009f94:	08009e2d 	.word	0x08009e2d

08009f98 <rclc_executor_add_subscription>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009f9e:	b338      	cbz	r0, 8009ff0 <rclc_executor_add_subscription+0x58>
 8009fa0:	b331      	cbz	r1, 8009ff0 <rclc_executor_add_subscription+0x58>
 8009fa2:	b32a      	cbz	r2, 8009ff0 <rclc_executor_add_subscription+0x58>
 8009fa4:	b323      	cbz	r3, 8009ff0 <rclc_executor_add_subscription+0x58>
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009fac:	42a8      	cmp	r0, r5
 8009fae:	d301      	bcc.n	8009fb4 <rclc_executor_add_subscription+0x1c>
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb4:	6866      	ldr	r6, [r4, #4]
 8009fb6:	0187      	lsls	r7, r0, #6
 8009fb8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009fbc:	2500      	movs	r5, #0
 8009fbe:	55f5      	strb	r5, [r6, r7]
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009fc6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f104 0514 	add.w	r5, r4, #20
 8009fd0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009fd4:	f88c e001 	strb.w	lr, [ip, #1]
 8009fd8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009fdc:	60e0      	str	r0, [r4, #12]
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f006 fb22 	bl	8010628 <rcl_wait_set_is_valid>
 8009fe4:	b930      	cbnz	r0, 8009ff4 <rclc_executor_add_subscription+0x5c>
 8009fe6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009fe8:	3301      	adds	r3, #1
 8009fea:	2000      	movs	r0, #0
 8009fec:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff0:	200b      	movs	r0, #11
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f006 fb1d 	bl	8010634 <rcl_wait_set_fini>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0f3      	beq.n	8009fe6 <rclc_executor_add_subscription+0x4e>
 8009ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a000 <rclc_executor_prepare>:
 800a000:	2800      	cmp	r0, #0
 800a002:	d044      	beq.n	800a08e <rclc_executor_prepare+0x8e>
 800a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a006:	f100 0514 	add.w	r5, r0, #20
 800a00a:	b09b      	sub	sp, #108	@ 0x6c
 800a00c:	4604      	mov	r4, r0
 800a00e:	4628      	mov	r0, r5
 800a010:	f006 fb0a 	bl	8010628 <rcl_wait_set_is_valid>
 800a014:	b110      	cbz	r0, 800a01c <rclc_executor_prepare+0x1c>
 800a016:	2000      	movs	r0, #0
 800a018:	b01b      	add	sp, #108	@ 0x6c
 800a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01c:	4628      	mov	r0, r5
 800a01e:	f006 fb09 	bl	8010634 <rcl_wait_set_fini>
 800a022:	2800      	cmp	r0, #0
 800a024:	d130      	bne.n	800a088 <rclc_executor_prepare+0x88>
 800a026:	a80c      	add	r0, sp, #48	@ 0x30
 800a028:	f006 faea 	bl	8010600 <rcl_get_zero_initialized_wait_set>
 800a02c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a030:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a034:	46ae      	mov	lr, r5
 800a036:	6927      	ldr	r7, [r4, #16]
 800a038:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a03c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a040:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a048:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a04c:	f8dc 3000 	ldr.w	r3, [ip]
 800a050:	f8ce 3000 	str.w	r3, [lr]
 800a054:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a056:	ae04      	add	r6, sp, #16
 800a058:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	6033      	str	r3, [r6, #0]
 800a060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a062:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a064:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a068:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a06c:	e9cd 2100 	strd	r2, r1, [sp]
 800a070:	4628      	mov	r0, r5
 800a072:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a074:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a076:	f006 fddb 	bl	8010c30 <rcl_wait_set_init>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d0cc      	beq.n	800a018 <rclc_executor_prepare+0x18>
 800a07e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a080:	f000 fb1a 	bl	800a6b8 <rcutils_reset_error>
 800a084:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a086:	e7c7      	b.n	800a018 <rclc_executor_prepare+0x18>
 800a088:	f000 fb16 	bl	800a6b8 <rcutils_reset_error>
 800a08c:	e7cb      	b.n	800a026 <rclc_executor_prepare+0x26>
 800a08e:	200b      	movs	r0, #11
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop

0800a094 <rclc_executor_spin_some.part.0>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	f100 0614 	add.w	r6, r0, #20
 800a09c:	b083      	sub	sp, #12
 800a09e:	4691      	mov	r9, r2
 800a0a0:	4698      	mov	r8, r3
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	f7ff ffac 	bl	800a000 <rclc_executor_prepare>
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f006 fb8f 	bl	80107cc <rcl_wait_set_clear>
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f040 80ed 	bne.w	800a290 <rclc_executor_spin_some.part.0+0x1fc>
 800a0b6:	68ab      	ldr	r3, [r5, #8]
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	b303      	cbz	r3, 800a0fe <rclc_executor_spin_some.part.0+0x6a>
 800a0bc:	6869      	ldr	r1, [r5, #4]
 800a0be:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a0c2:	01a2      	lsls	r2, r4, #6
 800a0c4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a0c8:	b1cb      	cbz	r3, 800a0fe <rclc_executor_spin_some.part.0+0x6a>
 800a0ca:	5c8b      	ldrb	r3, [r1, r2]
 800a0cc:	2b0a      	cmp	r3, #10
 800a0ce:	f200 80d8 	bhi.w	800a282 <rclc_executor_spin_some.part.0+0x1ee>
 800a0d2:	e8df f003 	tbb	[pc, r3]
 800a0d6:	9c9c      	.short	0x9c9c
 800a0d8:	068c8ca7 	.word	0x068c8ca7
 800a0dc:	bdc90606 	.word	0xbdc90606
 800a0e0:	b2          	.byte	0xb2
 800a0e1:	00          	.byte	0x00
 800a0e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a0e6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f006 feb6 	bl	8010e5c <rcl_wait_set_add_service>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	f040 8086 	bne.w	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a0f6:	68ab      	ldr	r3, [r5, #8]
 800a0f8:	3401      	adds	r4, #1
 800a0fa:	429c      	cmp	r4, r3
 800a0fc:	d3de      	bcc.n	800a0bc <rclc_executor_spin_some.part.0+0x28>
 800a0fe:	4643      	mov	r3, r8
 800a100:	464a      	mov	r2, r9
 800a102:	4630      	mov	r0, r6
 800a104:	f006 fed8 	bl	8010eb8 <rcl_wait>
 800a108:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80c7 	beq.w	800a2a0 <rclc_executor_spin_some.part.0+0x20c>
 800a112:	2b01      	cmp	r3, #1
 800a114:	f040 80b5 	bne.w	800a282 <rclc_executor_spin_some.part.0+0x1ee>
 800a118:	68ab      	ldr	r3, [r5, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8159 	beq.w	800a3d2 <rclc_executor_spin_some.part.0+0x33e>
 800a120:	2400      	movs	r4, #0
 800a122:	46a0      	mov	r8, r4
 800a124:	f240 1991 	movw	r9, #401	@ 0x191
 800a128:	e00a      	b.n	800a140 <rclc_executor_spin_some.part.0+0xac>
 800a12a:	f7ff fb7d 	bl	8009828 <_rclc_check_for_new_data>
 800a12e:	4604      	mov	r4, r0
 800a130:	b110      	cbz	r0, 800a138 <rclc_executor_spin_some.part.0+0xa4>
 800a132:	4548      	cmp	r0, r9
 800a134:	f040 80b2 	bne.w	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a138:	68ab      	ldr	r3, [r5, #8]
 800a13a:	4598      	cmp	r8, r3
 800a13c:	f080 8126 	bcs.w	800a38c <rclc_executor_spin_some.part.0+0x2f8>
 800a140:	686a      	ldr	r2, [r5, #4]
 800a142:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a146:	4631      	mov	r1, r6
 800a148:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	f1bc 0f00 	cmp.w	ip, #0
 800a154:	d1e9      	bne.n	800a12a <rclc_executor_spin_some.part.0+0x96>
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a15e:	4798      	blx	r3
 800a160:	2800      	cmp	r0, #0
 800a162:	f000 809b 	beq.w	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a166:	68ab      	ldr	r3, [r5, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8097 	beq.w	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a16e:	f04f 0800 	mov.w	r8, #0
 800a172:	f240 1991 	movw	r9, #401	@ 0x191
 800a176:	e009      	b.n	800a18c <rclc_executor_spin_some.part.0+0xf8>
 800a178:	f7ff fba4 	bl	80098c4 <_rclc_take_new_data>
 800a17c:	4604      	mov	r4, r0
 800a17e:	b110      	cbz	r0, 800a186 <rclc_executor_spin_some.part.0+0xf2>
 800a180:	4548      	cmp	r0, r9
 800a182:	f040 808b 	bne.w	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a186:	68ab      	ldr	r3, [r5, #8]
 800a188:	4598      	cmp	r8, r3
 800a18a:	d209      	bcs.n	800a1a0 <rclc_executor_spin_some.part.0+0x10c>
 800a18c:	6868      	ldr	r0, [r5, #4]
 800a18e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a192:	4631      	mov	r1, r6
 800a194:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a198:	f108 0801 	add.w	r8, r8, #1
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1eb      	bne.n	800a178 <rclc_executor_spin_some.part.0+0xe4>
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	b97b      	cbnz	r3, 800a1c4 <rclc_executor_spin_some.part.0+0x130>
 800a1a4:	e07a      	b.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a1a6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a1aa:	2a08      	cmp	r2, #8
 800a1ac:	f000 80fd 	beq.w	800a3aa <rclc_executor_spin_some.part.0+0x316>
 800a1b0:	2a09      	cmp	r2, #9
 800a1b2:	f000 80ef 	beq.w	800a394 <rclc_executor_spin_some.part.0+0x300>
 800a1b6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a1ba:	b98a      	cbnz	r2, 800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a1bc:	3601      	adds	r6, #1
 800a1be:	429e      	cmp	r6, r3
 800a1c0:	d262      	bcs.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a1c2:	2400      	movs	r4, #0
 800a1c4:	686a      	ldr	r2, [r5, #4]
 800a1c6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a1ca:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a1ce:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d062      	beq.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a1d6:	7841      	ldrb	r1, [r0, #1]
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d0e4      	beq.n	800a1a6 <rclc_executor_spin_some.part.0+0x112>
 800a1dc:	2901      	cmp	r1, #1
 800a1de:	d1ed      	bne.n	800a1bc <rclc_executor_spin_some.part.0+0x128>
 800a1e0:	f7ff fce4 	bl	8009bac <_rclc_execute.part.0>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f040 80b6 	bne.w	800a356 <rclc_executor_spin_some.part.0+0x2c2>
 800a1ea:	68ab      	ldr	r3, [r5, #8]
 800a1ec:	e7e6      	b.n	800a1bc <rclc_executor_spin_some.part.0+0x128>
 800a1ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a1f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f006 fe04 	bl	8010e04 <rcl_wait_set_add_client>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f af7a 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a202:	9001      	str	r0, [sp, #4]
 800a204:	f000 fa58 	bl	800a6b8 <rcutils_reset_error>
 800a208:	9801      	ldr	r0, [sp, #4]
 800a20a:	4607      	mov	r7, r0
 800a20c:	e03c      	b.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a20e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a212:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a216:	4630      	mov	r0, r6
 800a218:	f006 faac 	bl	8010774 <rcl_wait_set_add_subscription>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f43f af6a 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a222:	e7ee      	b.n	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a224:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a228:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a22c:	4630      	mov	r0, r6
 800a22e:	f006 fdb9 	bl	8010da4 <rcl_wait_set_add_timer>
 800a232:	2800      	cmp	r0, #0
 800a234:	f43f af5f 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a238:	e7e3      	b.n	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a23a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a23e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a242:	4630      	mov	r0, r6
 800a244:	f006 fd82 	bl	8010d4c <rcl_wait_set_add_guard_condition>
 800a248:	2800      	cmp	r0, #0
 800a24a:	f43f af54 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a24e:	e7d8      	b.n	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a250:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a254:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a258:	3110      	adds	r1, #16
 800a25a:	4630      	mov	r0, r6
 800a25c:	f007 fb04 	bl	8011868 <rcl_action_wait_set_add_action_server>
 800a260:	2800      	cmp	r0, #0
 800a262:	f43f af48 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a266:	e7cc      	b.n	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a268:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a26c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a270:	3110      	adds	r1, #16
 800a272:	2300      	movs	r3, #0
 800a274:	4630      	mov	r0, r6
 800a276:	f007 f8cf 	bl	8011418 <rcl_action_wait_set_add_action_client>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f af3b 	beq.w	800a0f6 <rclc_executor_spin_some.part.0+0x62>
 800a280:	e7bf      	b.n	800a202 <rclc_executor_spin_some.part.0+0x16e>
 800a282:	f000 fa19 	bl	800a6b8 <rcutils_reset_error>
 800a286:	2701      	movs	r7, #1
 800a288:	4638      	mov	r0, r7
 800a28a:	b003      	add	sp, #12
 800a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a290:	f000 fa12 	bl	800a6b8 <rcutils_reset_error>
 800a294:	4638      	mov	r0, r7
 800a296:	b003      	add	sp, #12
 800a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29c:	4627      	mov	r7, r4
 800a29e:	e7f3      	b.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a2a0:	68ab      	ldr	r3, [r5, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8092 	beq.w	800a3cc <rclc_executor_spin_some.part.0+0x338>
 800a2a8:	2400      	movs	r4, #0
 800a2aa:	46a0      	mov	r8, r4
 800a2ac:	f240 1991 	movw	r9, #401	@ 0x191
 800a2b0:	e008      	b.n	800a2c4 <rclc_executor_spin_some.part.0+0x230>
 800a2b2:	f7ff fab9 	bl	8009828 <_rclc_check_for_new_data>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	b108      	cbz	r0, 800a2be <rclc_executor_spin_some.part.0+0x22a>
 800a2ba:	4548      	cmp	r0, r9
 800a2bc:	d1ee      	bne.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a2be:	68ab      	ldr	r3, [r5, #8]
 800a2c0:	4598      	cmp	r8, r3
 800a2c2:	d265      	bcs.n	800a390 <rclc_executor_spin_some.part.0+0x2fc>
 800a2c4:	686a      	ldr	r2, [r5, #4]
 800a2c6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a2d0:	f108 0801 	add.w	r8, r8, #1
 800a2d4:	f1bc 0f00 	cmp.w	ip, #0
 800a2d8:	d1eb      	bne.n	800a2b2 <rclc_executor_spin_some.part.0+0x21e>
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a2e2:	4798      	blx	r3
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0d9      	beq.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a2e8:	68ab      	ldr	r3, [r5, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0d6      	beq.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	f240 1991 	movw	r9, #401	@ 0x191
 800a2f6:	f240 2a59 	movw	sl, #601	@ 0x259
 800a2fa:	e00e      	b.n	800a31a <rclc_executor_spin_some.part.0+0x286>
 800a2fc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a300:	2b08      	cmp	r3, #8
 800a302:	d033      	beq.n	800a36c <rclc_executor_spin_some.part.0+0x2d8>
 800a304:	2b09      	cmp	r3, #9
 800a306:	d028      	beq.n	800a35a <rclc_executor_spin_some.part.0+0x2c6>
 800a308:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a30c:	b9fb      	cbnz	r3, 800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a30e:	68ab      	ldr	r3, [r5, #8]
 800a310:	f108 0801 	add.w	r8, r8, #1
 800a314:	4598      	cmp	r8, r3
 800a316:	d2b7      	bcs.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a318:	2400      	movs	r4, #0
 800a31a:	6868      	ldr	r0, [r5, #4]
 800a31c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a320:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a324:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0b7      	beq.n	800a29c <rclc_executor_spin_some.part.0+0x208>
 800a32c:	4631      	mov	r1, r6
 800a32e:	f7ff fac9 	bl	80098c4 <_rclc_take_new_data>
 800a332:	b118      	cbz	r0, 800a33c <rclc_executor_spin_some.part.0+0x2a8>
 800a334:	4548      	cmp	r0, r9
 800a336:	d001      	beq.n	800a33c <rclc_executor_spin_some.part.0+0x2a8>
 800a338:	4550      	cmp	r0, sl
 800a33a:	d10c      	bne.n	800a356 <rclc_executor_spin_some.part.0+0x2c2>
 800a33c:	686b      	ldr	r3, [r5, #4]
 800a33e:	eb13 000b 	adds.w	r0, r3, fp
 800a342:	d021      	beq.n	800a388 <rclc_executor_spin_some.part.0+0x2f4>
 800a344:	7842      	ldrb	r2, [r0, #1]
 800a346:	2a00      	cmp	r2, #0
 800a348:	d0d8      	beq.n	800a2fc <rclc_executor_spin_some.part.0+0x268>
 800a34a:	2a01      	cmp	r2, #1
 800a34c:	d1df      	bne.n	800a30e <rclc_executor_spin_some.part.0+0x27a>
 800a34e:	f7ff fc2d 	bl	8009bac <_rclc_execute.part.0>
 800a352:	2800      	cmp	r0, #0
 800a354:	d0db      	beq.n	800a30e <rclc_executor_spin_some.part.0+0x27a>
 800a356:	4607      	mov	r7, r0
 800a358:	e796      	b.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a35a:	6843      	ldr	r3, [r0, #4]
 800a35c:	6a1a      	ldr	r2, [r3, #32]
 800a35e:	2a00      	cmp	r2, #0
 800a360:	d1f5      	bne.n	800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0d1      	beq.n	800a30e <rclc_executor_spin_some.part.0+0x27a>
 800a36a:	e7f0      	b.n	800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a36c:	6843      	ldr	r3, [r0, #4]
 800a36e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a370:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a374:	d1eb      	bne.n	800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a376:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d1e7      	bne.n	800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a37e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0c3      	beq.n	800a30e <rclc_executor_spin_some.part.0+0x27a>
 800a386:	e7e2      	b.n	800a34e <rclc_executor_spin_some.part.0+0x2ba>
 800a388:	270b      	movs	r7, #11
 800a38a:	e77d      	b.n	800a288 <rclc_executor_spin_some.part.0+0x1f4>
 800a38c:	686a      	ldr	r2, [r5, #4]
 800a38e:	e6e2      	b.n	800a156 <rclc_executor_spin_some.part.0+0xc2>
 800a390:	686a      	ldr	r2, [r5, #4]
 800a392:	e7a2      	b.n	800a2da <rclc_executor_spin_some.part.0+0x246>
 800a394:	6842      	ldr	r2, [r0, #4]
 800a396:	6a11      	ldr	r1, [r2, #32]
 800a398:	2900      	cmp	r1, #0
 800a39a:	f47f af21 	bne.w	800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a39e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	f43f af0a 	beq.w	800a1bc <rclc_executor_spin_some.part.0+0x128>
 800a3a8:	e71a      	b.n	800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a3aa:	6842      	ldr	r2, [r0, #4]
 800a3ac:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a3ae:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a3b2:	f47f af15 	bne.w	800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a3b6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	f47f af10 	bne.w	800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a3c0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a3c4:	2a00      	cmp	r2, #0
 800a3c6:	f43f aef9 	beq.w	800a1bc <rclc_executor_spin_some.part.0+0x128>
 800a3ca:	e709      	b.n	800a1e0 <rclc_executor_spin_some.part.0+0x14c>
 800a3cc:	686a      	ldr	r2, [r5, #4]
 800a3ce:	461c      	mov	r4, r3
 800a3d0:	e783      	b.n	800a2da <rclc_executor_spin_some.part.0+0x246>
 800a3d2:	686a      	ldr	r2, [r5, #4]
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	e6be      	b.n	800a156 <rclc_executor_spin_some.part.0+0xc2>

0800a3d8 <rclc_executor_spin_some>:
 800a3d8:	b190      	cbz	r0, 800a400 <rclc_executor_spin_some+0x28>
 800a3da:	b570      	push	{r4, r5, r6, lr}
 800a3dc:	4604      	mov	r4, r0
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	461d      	mov	r5, r3
 800a3e4:	f005 f8fc 	bl	800f5e0 <rcl_context_is_valid>
 800a3e8:	b130      	cbz	r0, 800a3f8 <rclc_executor_spin_some+0x20>
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3f4:	f7ff be4e 	b.w	800a094 <rclc_executor_spin_some.part.0>
 800a3f8:	f000 f95e 	bl	800a6b8 <rcutils_reset_error>
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	200b      	movs	r0, #11
 800a402:	4770      	bx	lr

0800a404 <rclc_executor_handle_counters_zero_init>:
 800a404:	b130      	cbz	r0, 800a414 <rclc_executor_handle_counters_zero_init+0x10>
 800a406:	b508      	push	{r3, lr}
 800a408:	2220      	movs	r2, #32
 800a40a:	2100      	movs	r1, #0
 800a40c:	f00c f900 	bl	8016610 <memset>
 800a410:	2000      	movs	r0, #0
 800a412:	bd08      	pop	{r3, pc}
 800a414:	200b      	movs	r0, #11
 800a416:	4770      	bx	lr

0800a418 <rclc_executor_handle_init>:
 800a418:	b168      	cbz	r0, 800a436 <rclc_executor_handle_init+0x1e>
 800a41a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a440 <rclc_executor_handle_init+0x28>
 800a41e:	2300      	movs	r3, #0
 800a420:	220b      	movs	r2, #11
 800a422:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a426:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a42a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a42e:	8002      	strh	r2, [r0, #0]
 800a430:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a432:	4618      	mov	r0, r3
 800a434:	4770      	bx	lr
 800a436:	200b      	movs	r0, #11
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
	...

0800a448 <rclc_support_init>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	b086      	sub	sp, #24
 800a44e:	b3b8      	cbz	r0, 800a4c0 <rclc_support_init+0x78>
 800a450:	461c      	mov	r4, r3
 800a452:	b3ab      	cbz	r3, 800a4c0 <rclc_support_init+0x78>
 800a454:	460f      	mov	r7, r1
 800a456:	4690      	mov	r8, r2
 800a458:	4606      	mov	r6, r0
 800a45a:	f005 fa15 	bl	800f888 <rcl_get_zero_initialized_init_options>
 800a45e:	f104 030c 	add.w	r3, r4, #12
 800a462:	9005      	str	r0, [sp, #20]
 800a464:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a468:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a46c:	a805      	add	r0, sp, #20
 800a46e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a472:	f005 fa0b 	bl	800f88c <rcl_init_options_init>
 800a476:	4605      	mov	r5, r0
 800a478:	b9e0      	cbnz	r0, 800a4b4 <rclc_support_init+0x6c>
 800a47a:	ad02      	add	r5, sp, #8
 800a47c:	4628      	mov	r0, r5
 800a47e:	f005 f8a5 	bl	800f5cc <rcl_get_zero_initialized_context>
 800a482:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a486:	4633      	mov	r3, r6
 800a488:	e886 0003 	stmia.w	r6, {r0, r1}
 800a48c:	aa05      	add	r2, sp, #20
 800a48e:	4641      	mov	r1, r8
 800a490:	4638      	mov	r0, r7
 800a492:	f005 f90b 	bl	800f6ac <rcl_init>
 800a496:	4605      	mov	r5, r0
 800a498:	b9b8      	cbnz	r0, 800a4ca <rclc_support_init+0x82>
 800a49a:	60b4      	str	r4, [r6, #8]
 800a49c:	4622      	mov	r2, r4
 800a49e:	f106 010c 	add.w	r1, r6, #12
 800a4a2:	2003      	movs	r0, #3
 800a4a4:	f005 ff20 	bl	80102e8 <rcl_clock_init>
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	b970      	cbnz	r0, 800a4ca <rclc_support_init+0x82>
 800a4ac:	a805      	add	r0, sp, #20
 800a4ae:	f005 fa53 	bl	800f958 <rcl_init_options_fini>
 800a4b2:	b108      	cbz	r0, 800a4b8 <rclc_support_init+0x70>
 800a4b4:	f000 f900 	bl	800a6b8 <rcutils_reset_error>
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	b006      	add	sp, #24
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	250b      	movs	r5, #11
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	b006      	add	sp, #24
 800a4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ca:	f000 f8f5 	bl	800a6b8 <rcutils_reset_error>
 800a4ce:	a805      	add	r0, sp, #20
 800a4d0:	f005 fa42 	bl	800f958 <rcl_init_options_fini>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d0ef      	beq.n	800a4b8 <rclc_support_init+0x70>
 800a4d8:	e7ec      	b.n	800a4b4 <rclc_support_init+0x6c>
 800a4da:	bf00      	nop

0800a4dc <rclc_node_init_default>:
 800a4dc:	b3b8      	cbz	r0, 800a54e <rclc_node_init_default+0x72>
 800a4de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	b0a1      	sub	sp, #132	@ 0x84
 800a4e6:	b329      	cbz	r1, 800a534 <rclc_node_init_default+0x58>
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	b31a      	cbz	r2, 800a534 <rclc_node_init_default+0x58>
 800a4ec:	461f      	mov	r7, r3
 800a4ee:	b30b      	cbz	r3, 800a534 <rclc_node_init_default+0x58>
 800a4f0:	f10d 0810 	add.w	r8, sp, #16
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f005 fae6 	bl	800fac8 <rcl_get_zero_initialized_node>
 800a4fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a500:	f10d 0918 	add.w	r9, sp, #24
 800a504:	e884 0003 	stmia.w	r4, {r0, r1}
 800a508:	4648      	mov	r0, r9
 800a50a:	f005 fc55 	bl	800fdb8 <rcl_node_get_default_options>
 800a50e:	4640      	mov	r0, r8
 800a510:	f005 fada 	bl	800fac8 <rcl_get_zero_initialized_node>
 800a514:	f8cd 9000 	str.w	r9, [sp]
 800a518:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a51c:	463b      	mov	r3, r7
 800a51e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a522:	4632      	mov	r2, r6
 800a524:	4629      	mov	r1, r5
 800a526:	4620      	mov	r0, r4
 800a528:	f005 fad8 	bl	800fadc <rcl_node_init>
 800a52c:	b930      	cbnz	r0, 800a53c <rclc_node_init_default+0x60>
 800a52e:	b021      	add	sp, #132	@ 0x84
 800a530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a534:	200b      	movs	r0, #11
 800a536:	b021      	add	sp, #132	@ 0x84
 800a538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a53c:	9003      	str	r0, [sp, #12]
 800a53e:	f000 f8bb 	bl	800a6b8 <rcutils_reset_error>
 800a542:	f000 f8b9 	bl	800a6b8 <rcutils_reset_error>
 800a546:	9803      	ldr	r0, [sp, #12]
 800a548:	b021      	add	sp, #132	@ 0x84
 800a54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a54e:	200b      	movs	r0, #11
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop

0800a554 <rclc_publisher_init_default>:
 800a554:	b368      	cbz	r0, 800a5b2 <rclc_publisher_init_default+0x5e>
 800a556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	460d      	mov	r5, r1
 800a55c:	b0a0      	sub	sp, #128	@ 0x80
 800a55e:	b321      	cbz	r1, 800a5aa <rclc_publisher_init_default+0x56>
 800a560:	4616      	mov	r6, r2
 800a562:	b312      	cbz	r2, 800a5aa <rclc_publisher_init_default+0x56>
 800a564:	461f      	mov	r7, r3
 800a566:	b303      	cbz	r3, 800a5aa <rclc_publisher_init_default+0x56>
 800a568:	4604      	mov	r4, r0
 800a56a:	f7ff f84d 	bl	8009608 <rcl_get_zero_initialized_publisher>
 800a56e:	f10d 0810 	add.w	r8, sp, #16
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	4640      	mov	r0, r8
 800a576:	f7ff f8e3 	bl	8009740 <rcl_publisher_get_default_options>
 800a57a:	490f      	ldr	r1, [pc, #60]	@ (800a5b8 <rclc_publisher_init_default+0x64>)
 800a57c:	2250      	movs	r2, #80	@ 0x50
 800a57e:	4640      	mov	r0, r8
 800a580:	f00c f90f 	bl	80167a2 <memcpy>
 800a584:	f8cd 8000 	str.w	r8, [sp]
 800a588:	463b      	mov	r3, r7
 800a58a:	4632      	mov	r2, r6
 800a58c:	4629      	mov	r1, r5
 800a58e:	4620      	mov	r0, r4
 800a590:	f7ff f840 	bl	8009614 <rcl_publisher_init>
 800a594:	b910      	cbnz	r0, 800a59c <rclc_publisher_init_default+0x48>
 800a596:	b020      	add	sp, #128	@ 0x80
 800a598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a59c:	9003      	str	r0, [sp, #12]
 800a59e:	f000 f88b 	bl	800a6b8 <rcutils_reset_error>
 800a5a2:	9803      	ldr	r0, [sp, #12]
 800a5a4:	b020      	add	sp, #128	@ 0x80
 800a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5aa:	200b      	movs	r0, #11
 800a5ac:	b020      	add	sp, #128	@ 0x80
 800a5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b2:	200b      	movs	r0, #11
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	080176f0 	.word	0x080176f0

0800a5bc <rclc_subscription_init_default>:
 800a5bc:	b368      	cbz	r0, 800a61a <rclc_subscription_init_default+0x5e>
 800a5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	b0a0      	sub	sp, #128	@ 0x80
 800a5c6:	b321      	cbz	r1, 800a612 <rclc_subscription_init_default+0x56>
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	b312      	cbz	r2, 800a612 <rclc_subscription_init_default+0x56>
 800a5cc:	461f      	mov	r7, r3
 800a5ce:	b303      	cbz	r3, 800a612 <rclc_subscription_init_default+0x56>
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	f005 fd2d 	bl	8010030 <rcl_get_zero_initialized_subscription>
 800a5d6:	f10d 0810 	add.w	r8, sp, #16
 800a5da:	6020      	str	r0, [r4, #0]
 800a5dc:	4640      	mov	r0, r8
 800a5de:	f005 fdd5 	bl	801018c <rcl_subscription_get_default_options>
 800a5e2:	490f      	ldr	r1, [pc, #60]	@ (800a620 <rclc_subscription_init_default+0x64>)
 800a5e4:	2250      	movs	r2, #80	@ 0x50
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f00c f8db 	bl	80167a2 <memcpy>
 800a5ec:	f8cd 8000 	str.w	r8, [sp]
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f005 fd20 	bl	801003c <rcl_subscription_init>
 800a5fc:	b910      	cbnz	r0, 800a604 <rclc_subscription_init_default+0x48>
 800a5fe:	b020      	add	sp, #128	@ 0x80
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a604:	9003      	str	r0, [sp, #12]
 800a606:	f000 f857 	bl	800a6b8 <rcutils_reset_error>
 800a60a:	9803      	ldr	r0, [sp, #12]
 800a60c:	b020      	add	sp, #128	@ 0x80
 800a60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a612:	200b      	movs	r0, #11
 800a614:	b020      	add	sp, #128	@ 0x80
 800a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61a:	200b      	movs	r0, #11
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	08017740 	.word	0x08017740

0800a624 <__default_zero_allocate>:
 800a624:	f00b bc1c 	b.w	8015e60 <calloc>

0800a628 <__default_reallocate>:
 800a628:	f00b bda8 	b.w	801617c <realloc>

0800a62c <__default_deallocate>:
 800a62c:	f00b bc84 	b.w	8015f38 <free>

0800a630 <__default_allocate>:
 800a630:	f00b bc7a 	b.w	8015f28 <malloc>

0800a634 <rcutils_get_zero_initialized_allocator>:
 800a634:	b510      	push	{r4, lr}
 800a636:	4c05      	ldr	r4, [pc, #20]	@ (800a64c <rcutils_get_zero_initialized_allocator+0x18>)
 800a638:	4686      	mov	lr, r0
 800a63a:	4684      	mov	ip, r0
 800a63c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a63e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	f8cc 3000 	str.w	r3, [ip]
 800a648:	4670      	mov	r0, lr
 800a64a:	bd10      	pop	{r4, pc}
 800a64c:	08017790 	.word	0x08017790

0800a650 <rcutils_get_default_allocator>:
 800a650:	b510      	push	{r4, lr}
 800a652:	4c05      	ldr	r4, [pc, #20]	@ (800a668 <rcutils_get_default_allocator+0x18>)
 800a654:	4686      	mov	lr, r0
 800a656:	4684      	mov	ip, r0
 800a658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a65a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	f8cc 3000 	str.w	r3, [ip]
 800a664:	4670      	mov	r0, lr
 800a666:	bd10      	pop	{r4, pc}
 800a668:	20000058 	.word	0x20000058

0800a66c <rcutils_allocator_is_valid>:
 800a66c:	b158      	cbz	r0, 800a686 <rcutils_allocator_is_valid+0x1a>
 800a66e:	6803      	ldr	r3, [r0, #0]
 800a670:	b143      	cbz	r3, 800a684 <rcutils_allocator_is_valid+0x18>
 800a672:	6843      	ldr	r3, [r0, #4]
 800a674:	b133      	cbz	r3, 800a684 <rcutils_allocator_is_valid+0x18>
 800a676:	68c3      	ldr	r3, [r0, #12]
 800a678:	b123      	cbz	r3, 800a684 <rcutils_allocator_is_valid+0x18>
 800a67a:	6880      	ldr	r0, [r0, #8]
 800a67c:	3800      	subs	r0, #0
 800a67e:	bf18      	it	ne
 800a680:	2001      	movne	r0, #1
 800a682:	4770      	bx	lr
 800a684:	4618      	mov	r0, r3
 800a686:	4770      	bx	lr

0800a688 <rcutils_get_error_string>:
 800a688:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <rcutils_get_error_string+0x1c>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	b13b      	cbz	r3, 800a69e <rcutils_get_error_string+0x16>
 800a68e:	4b06      	ldr	r3, [pc, #24]	@ (800a6a8 <rcutils_get_error_string+0x20>)
 800a690:	781a      	ldrb	r2, [r3, #0]
 800a692:	b90a      	cbnz	r2, 800a698 <rcutils_get_error_string+0x10>
 800a694:	2201      	movs	r2, #1
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	4b04      	ldr	r3, [pc, #16]	@ (800a6ac <rcutils_get_error_string+0x24>)
 800a69a:	7818      	ldrb	r0, [r3, #0]
 800a69c:	4770      	bx	lr
 800a69e:	4b04      	ldr	r3, [pc, #16]	@ (800a6b0 <rcutils_get_error_string+0x28>)
 800a6a0:	7818      	ldrb	r0, [r3, #0]
 800a6a2:	4770      	bx	lr
 800a6a4:	20009388 	.word	0x20009388
 800a6a8:	200093a1 	.word	0x200093a1
 800a6ac:	200093a0 	.word	0x200093a0
 800a6b0:	080177a4 	.word	0x080177a4
 800a6b4:	00000000 	.word	0x00000000

0800a6b8 <rcutils_reset_error>:
 800a6b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a6d8 <rcutils_reset_error+0x20>
 800a6bc:	4a08      	ldr	r2, [pc, #32]	@ (800a6e0 <rcutils_reset_error+0x28>)
 800a6be:	4809      	ldr	r0, [pc, #36]	@ (800a6e4 <rcutils_reset_error+0x2c>)
 800a6c0:	4909      	ldr	r1, [pc, #36]	@ (800a6e8 <rcutils_reset_error+0x30>)
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	8013      	strh	r3, [r2, #0]
 800a6c6:	ed82 7b02 	vstr	d7, [r2, #8]
 800a6ca:	4a08      	ldr	r2, [pc, #32]	@ (800a6ec <rcutils_reset_error+0x34>)
 800a6cc:	7003      	strb	r3, [r0, #0]
 800a6ce:	700b      	strb	r3, [r1, #0]
 800a6d0:	7013      	strb	r3, [r2, #0]
 800a6d2:	4770      	bx	lr
 800a6d4:	f3af 8000 	nop.w
	...
 800a6e0:	20009390 	.word	0x20009390
 800a6e4:	200093a1 	.word	0x200093a1
 800a6e8:	200093a0 	.word	0x200093a0
 800a6ec:	20009388 	.word	0x20009388

0800a6f0 <rcutils_system_time_now>:
 800a6f0:	b308      	cbz	r0, 800a736 <rcutils_system_time_now+0x46>
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4669      	mov	r1, sp
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	f7f7 fdf8 	bl	80022f0 <clock_gettime>
 800a700:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a704:	2d00      	cmp	r5, #0
 800a706:	db13      	blt.n	800a730 <rcutils_system_time_now+0x40>
 800a708:	9902      	ldr	r1, [sp, #8]
 800a70a:	2900      	cmp	r1, #0
 800a70c:	db0d      	blt.n	800a72a <rcutils_system_time_now+0x3a>
 800a70e:	4e0b      	ldr	r6, [pc, #44]	@ (800a73c <rcutils_system_time_now+0x4c>)
 800a710:	fba3 3206 	umull	r3, r2, r3, r6
 800a714:	185b      	adds	r3, r3, r1
 800a716:	fb06 2205 	mla	r2, r6, r5, r2
 800a71a:	f04f 0000 	mov.w	r0, #0
 800a71e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a722:	e9c4 3200 	strd	r3, r2, [r4]
 800a726:	b004      	add	sp, #16
 800a728:	bd70      	pop	{r4, r5, r6, pc}
 800a72a:	ea53 0205 	orrs.w	r2, r3, r5
 800a72e:	d1ee      	bne.n	800a70e <rcutils_system_time_now+0x1e>
 800a730:	2002      	movs	r0, #2
 800a732:	b004      	add	sp, #16
 800a734:	bd70      	pop	{r4, r5, r6, pc}
 800a736:	200b      	movs	r0, #11
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	3b9aca00 	.word	0x3b9aca00

0800a740 <rcutils_steady_time_now>:
 800a740:	b308      	cbz	r0, 800a786 <rcutils_steady_time_now+0x46>
 800a742:	b570      	push	{r4, r5, r6, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	4604      	mov	r4, r0
 800a748:	4669      	mov	r1, sp
 800a74a:	2000      	movs	r0, #0
 800a74c:	f7f7 fdd0 	bl	80022f0 <clock_gettime>
 800a750:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a754:	2d00      	cmp	r5, #0
 800a756:	db13      	blt.n	800a780 <rcutils_steady_time_now+0x40>
 800a758:	9902      	ldr	r1, [sp, #8]
 800a75a:	2900      	cmp	r1, #0
 800a75c:	db0d      	blt.n	800a77a <rcutils_steady_time_now+0x3a>
 800a75e:	4e0b      	ldr	r6, [pc, #44]	@ (800a78c <rcutils_steady_time_now+0x4c>)
 800a760:	fba3 3206 	umull	r3, r2, r3, r6
 800a764:	185b      	adds	r3, r3, r1
 800a766:	fb06 2205 	mla	r2, r6, r5, r2
 800a76a:	f04f 0000 	mov.w	r0, #0
 800a76e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a772:	e9c4 3200 	strd	r3, r2, [r4]
 800a776:	b004      	add	sp, #16
 800a778:	bd70      	pop	{r4, r5, r6, pc}
 800a77a:	ea53 0205 	orrs.w	r2, r3, r5
 800a77e:	d1ee      	bne.n	800a75e <rcutils_steady_time_now+0x1e>
 800a780:	2002      	movs	r0, #2
 800a782:	b004      	add	sp, #16
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	200b      	movs	r0, #11
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	3b9aca00 	.word	0x3b9aca00

0800a790 <rmw_get_default_publisher_options>:
 800a790:	2200      	movs	r2, #0
 800a792:	6002      	str	r2, [r0, #0]
 800a794:	7102      	strb	r2, [r0, #4]
 800a796:	4770      	bx	lr

0800a798 <rmw_uros_set_custom_transport>:
 800a798:	b470      	push	{r4, r5, r6}
 800a79a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a79e:	b162      	cbz	r2, 800a7ba <rmw_uros_set_custom_transport+0x22>
 800a7a0:	b15b      	cbz	r3, 800a7ba <rmw_uros_set_custom_transport+0x22>
 800a7a2:	b155      	cbz	r5, 800a7ba <rmw_uros_set_custom_transport+0x22>
 800a7a4:	b14e      	cbz	r6, 800a7ba <rmw_uros_set_custom_transport+0x22>
 800a7a6:	4c06      	ldr	r4, [pc, #24]	@ (800a7c0 <rmw_uros_set_custom_transport+0x28>)
 800a7a8:	7020      	strb	r0, [r4, #0]
 800a7aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a7ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7b2:	6166      	str	r6, [r4, #20]
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	bc70      	pop	{r4, r5, r6}
 800a7b8:	4770      	bx	lr
 800a7ba:	200b      	movs	r0, #11
 800a7bc:	bc70      	pop	{r4, r5, r6}
 800a7be:	4770      	bx	lr
 800a7c0:	200093a4 	.word	0x200093a4

0800a7c4 <flush_session>:
 800a7c4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a7c6:	f002 beeb 	b.w	800d5a0 <uxr_run_session_until_confirm_delivery>
 800a7ca:	bf00      	nop

0800a7cc <rmw_publish>:
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d053      	beq.n	800a878 <rmw_publish+0xac>
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	b08e      	sub	sp, #56	@ 0x38
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	d04b      	beq.n	800a872 <rmw_publish+0xa6>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	6800      	ldr	r0, [r0, #0]
 800a7de:	f000 fced 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d045      	beq.n	800a872 <rmw_publish+0xa6>
 800a7e6:	6866      	ldr	r6, [r4, #4]
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	d042      	beq.n	800a872 <rmw_publish+0xa6>
 800a7ec:	69b4      	ldr	r4, [r6, #24]
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	4798      	blx	r3
 800a7f4:	69f3      	ldr	r3, [r6, #28]
 800a7f6:	9005      	str	r0, [sp, #20]
 800a7f8:	b113      	cbz	r3, 800a800 <rmw_publish+0x34>
 800a7fa:	a805      	add	r0, sp, #20
 800a7fc:	4798      	blx	r3
 800a7fe:	9805      	ldr	r0, [sp, #20]
 800a800:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	9000      	str	r0, [sp, #0]
 800a808:	6972      	ldr	r2, [r6, #20]
 800a80a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a80c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a810:	ab06      	add	r3, sp, #24
 800a812:	f003 fcb1 	bl	800e178 <uxr_prepare_output_stream>
 800a816:	b1d8      	cbz	r0, 800a850 <rmw_publish+0x84>
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	a906      	add	r1, sp, #24
 800a81c:	4628      	mov	r0, r5
 800a81e:	4798      	blx	r3
 800a820:	6a33      	ldr	r3, [r6, #32]
 800a822:	4604      	mov	r4, r0
 800a824:	b10b      	cbz	r3, 800a82a <rmw_publish+0x5e>
 800a826:	a806      	add	r0, sp, #24
 800a828:	4798      	blx	r3
 800a82a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a82e:	2b01      	cmp	r3, #1
 800a830:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a834:	d022      	beq.n	800a87c <rmw_publish+0xb0>
 800a836:	6918      	ldr	r0, [r3, #16]
 800a838:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a83a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a83e:	f002 feaf 	bl	800d5a0 <uxr_run_session_until_confirm_delivery>
 800a842:	4020      	ands	r0, r4
 800a844:	b2c4      	uxtb	r4, r0
 800a846:	f084 0001 	eor.w	r0, r4, #1
 800a84a:	b2c0      	uxtb	r0, r0
 800a84c:	b00e      	add	sp, #56	@ 0x38
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a854:	6918      	ldr	r0, [r3, #16]
 800a856:	9b05      	ldr	r3, [sp, #20]
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	4b0b      	ldr	r3, [pc, #44]	@ (800a888 <rmw_publish+0xbc>)
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	9602      	str	r6, [sp, #8]
 800a860:	6972      	ldr	r2, [r6, #20]
 800a862:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a864:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a868:	ab06      	add	r3, sp, #24
 800a86a:	f003 fcb5 	bl	800e1d8 <uxr_prepare_output_stream_fragmented>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d1d2      	bne.n	800a818 <rmw_publish+0x4c>
 800a872:	2001      	movs	r0, #1
 800a874:	b00e      	add	sp, #56	@ 0x38
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	2001      	movs	r0, #1
 800a87a:	4770      	bx	lr
 800a87c:	6918      	ldr	r0, [r3, #16]
 800a87e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a882:	f002 facd 	bl	800ce20 <uxr_flash_output_streams>
 800a886:	e7de      	b.n	800a846 <rmw_publish+0x7a>
 800a888:	0800a7c5 	.word	0x0800a7c5

0800a88c <rmw_create_publisher>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	b087      	sub	sp, #28
 800a892:	2800      	cmp	r0, #0
 800a894:	f000 80cc 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a898:	460e      	mov	r6, r1
 800a89a:	2900      	cmp	r1, #0
 800a89c:	f000 80c8 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	6800      	ldr	r0, [r0, #0]
 800a8a4:	4615      	mov	r5, r2
 800a8a6:	4698      	mov	r8, r3
 800a8a8:	f000 fc88 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f000 80bf 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	f000 80bc 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8b8:	782b      	ldrb	r3, [r5, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 80b8 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8c0:	f1b8 0f00 	cmp.w	r8, #0
 800a8c4:	f000 80b4 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8c8:	485c      	ldr	r0, [pc, #368]	@ (800aa3c <rmw_create_publisher+0x1b0>)
 800a8ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a8ce:	f007 ff3b 	bl	8012748 <get_memory>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f000 80ac 	beq.w	800aa30 <rmw_create_publisher+0x1a4>
 800a8d8:	6884      	ldr	r4, [r0, #8]
 800a8da:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a8de:	f007 ff9b 	bl	8012818 <rmw_get_implementation_identifier>
 800a8e2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a8e6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a8ea:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f7f5 fc80 	bl	80001f4 <strlen>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	283c      	cmp	r0, #60	@ 0x3c
 800a8f8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a8fc:	f200 8091 	bhi.w	800aa22 <rmw_create_publisher+0x196>
 800a900:	4a4f      	ldr	r2, [pc, #316]	@ (800aa40 <rmw_create_publisher+0x1b4>)
 800a902:	462b      	mov	r3, r5
 800a904:	213c      	movs	r1, #60	@ 0x3c
 800a906:	4650      	mov	r0, sl
 800a908:	f00b fda8 	bl	801645c <sniprintf>
 800a90c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a910:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a912:	4641      	mov	r1, r8
 800a914:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a918:	2250      	movs	r2, #80	@ 0x50
 800a91a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a91e:	f00b ff40 	bl	80167a2 <memcpy>
 800a922:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a926:	4947      	ldr	r1, [pc, #284]	@ (800aa44 <rmw_create_publisher+0x1b8>)
 800a928:	2b02      	cmp	r3, #2
 800a92a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a92e:	bf0c      	ite	eq
 800a930:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a934:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a938:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a93a:	2300      	movs	r3, #0
 800a93c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a940:	4630      	mov	r0, r6
 800a942:	f000 fc49 	bl	800b1d8 <get_message_typesupport_handle>
 800a946:	2800      	cmp	r0, #0
 800a948:	d06b      	beq.n	800aa22 <rmw_create_publisher+0x196>
 800a94a:	6842      	ldr	r2, [r0, #4]
 800a94c:	61a2      	str	r2, [r4, #24]
 800a94e:	2a00      	cmp	r2, #0
 800a950:	d067      	beq.n	800aa22 <rmw_create_publisher+0x196>
 800a952:	4629      	mov	r1, r5
 800a954:	4643      	mov	r3, r8
 800a956:	4648      	mov	r0, r9
 800a958:	f008 f9ee 	bl	8012d38 <create_topic>
 800a95c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a95e:	2800      	cmp	r0, #0
 800a960:	d063      	beq.n	800aa2a <rmw_create_publisher+0x19e>
 800a962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a96a:	2103      	movs	r1, #3
 800a96c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a970:	1c42      	adds	r2, r0, #1
 800a972:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a976:	f002 f903 	bl	800cb80 <uxr_object_id>
 800a97a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a97e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a982:	6120      	str	r0, [r4, #16]
 800a984:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a988:	6910      	ldr	r0, [r2, #16]
 800a98a:	2506      	movs	r5, #6
 800a98c:	9500      	str	r5, [sp, #0]
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a996:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a99a:	f001 ffa3 	bl	800c8e4 <uxr_buffer_create_publisher_bin>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a9a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a9a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a9ac:	f000 fb86 	bl	800b0bc <run_xrce_session>
 800a9b0:	b3b8      	cbz	r0, 800aa22 <rmw_create_publisher+0x196>
 800a9b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ba:	2105      	movs	r1, #5
 800a9bc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a9c0:	1c42      	adds	r2, r0, #1
 800a9c2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a9c6:	f002 f8db 	bl	800cb80 <uxr_object_id>
 800a9ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a9ce:	6160      	str	r0, [r4, #20]
 800a9d0:	691e      	ldr	r6, [r3, #16]
 800a9d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9d6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a9da:	f10d 0a10 	add.w	sl, sp, #16
 800a9de:	4641      	mov	r1, r8
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800a9e6:	f000 fb85 	bl	800b0f4 <convert_qos_profile>
 800a9ea:	9503      	str	r5, [sp, #12]
 800a9ec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a9f0:	9001      	str	r0, [sp, #4]
 800a9f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a9f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800aa00:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800aa04:	f8d8 1000 	ldr.w	r1, [r8]
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f001 ffcb 	bl	800c9a4 <uxr_buffer_create_datawriter_bin>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aa14:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aa18:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aa1c:	f000 fb4e 	bl	800b0bc <run_xrce_session>
 800aa20:	b938      	cbnz	r0, 800aa32 <rmw_create_publisher+0x1a6>
 800aa22:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aa24:	b108      	cbz	r0, 800aa2a <rmw_create_publisher+0x19e>
 800aa26:	f000 fa47 	bl	800aeb8 <rmw_uxrce_fini_topic_memory>
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f000 f9ec 	bl	800ae08 <rmw_uxrce_fini_publisher_memory>
 800aa30:	2700      	movs	r7, #0
 800aa32:	4638      	mov	r0, r7
 800aa34:	b007      	add	sp, #28
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2000dc9c 	.word	0x2000dc9c
 800aa40:	080177dc 	.word	0x080177dc
 800aa44:	080177a8 	.word	0x080177a8

0800aa48 <rmw_publisher_get_actual_qos>:
 800aa48:	b150      	cbz	r0, 800aa60 <rmw_publisher_get_actual_qos+0x18>
 800aa4a:	b508      	push	{r3, lr}
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	b149      	cbz	r1, 800aa64 <rmw_publisher_get_actual_qos+0x1c>
 800aa50:	6841      	ldr	r1, [r0, #4]
 800aa52:	2250      	movs	r2, #80	@ 0x50
 800aa54:	3128      	adds	r1, #40	@ 0x28
 800aa56:	4618      	mov	r0, r3
 800aa58:	f00b fea3 	bl	80167a2 <memcpy>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	bd08      	pop	{r3, pc}
 800aa60:	200b      	movs	r0, #11
 800aa62:	4770      	bx	lr
 800aa64:	200b      	movs	r0, #11
 800aa66:	bd08      	pop	{r3, pc}

0800aa68 <rmw_destroy_publisher>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	b128      	cbz	r0, 800aa78 <rmw_destroy_publisher+0x10>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	6800      	ldr	r0, [r0, #0]
 800aa70:	460d      	mov	r5, r1
 800aa72:	f000 fba3 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 800aa76:	b910      	cbnz	r0, 800aa7e <rmw_destroy_publisher+0x16>
 800aa78:	2401      	movs	r4, #1
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7e:	6863      	ldr	r3, [r4, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0f9      	beq.n	800aa78 <rmw_destroy_publisher+0x10>
 800aa84:	2d00      	cmp	r5, #0
 800aa86:	d0f7      	beq.n	800aa78 <rmw_destroy_publisher+0x10>
 800aa88:	6828      	ldr	r0, [r5, #0]
 800aa8a:	f000 fb97 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d0f2      	beq.n	800aa78 <rmw_destroy_publisher+0x10>
 800aa92:	686c      	ldr	r4, [r5, #4]
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	d0ef      	beq.n	800aa78 <rmw_destroy_publisher+0x10>
 800aa98:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aa9a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800aa9e:	f008 f99b 	bl	8012dd8 <destroy_topic>
 800aaa2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aaa6:	6962      	ldr	r2, [r4, #20]
 800aaa8:	6918      	ldr	r0, [r3, #16]
 800aaaa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800aaae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aab2:	6819      	ldr	r1, [r3, #0]
 800aab4:	f001 fe62 	bl	800c77c <uxr_buffer_delete_entity>
 800aab8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aabc:	6922      	ldr	r2, [r4, #16]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800aac4:	4604      	mov	r4, r0
 800aac6:	6809      	ldr	r1, [r1, #0]
 800aac8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800aacc:	f001 fe56 	bl	800c77c <uxr_buffer_delete_entity>
 800aad0:	693e      	ldr	r6, [r7, #16]
 800aad2:	4622      	mov	r2, r4
 800aad4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aad8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aadc:	4604      	mov	r4, r0
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 faec 	bl	800b0bc <run_xrce_session>
 800aae4:	693e      	ldr	r6, [r7, #16]
 800aae6:	4622      	mov	r2, r4
 800aae8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aaec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f000 fae2 	bl	800b0bc <run_xrce_session>
 800aaf8:	b12c      	cbz	r4, 800ab06 <rmw_destroy_publisher+0x9e>
 800aafa:	b120      	cbz	r0, 800ab06 <rmw_destroy_publisher+0x9e>
 800aafc:	2400      	movs	r4, #0
 800aafe:	4628      	mov	r0, r5
 800ab00:	f000 f982 	bl	800ae08 <rmw_uxrce_fini_publisher_memory>
 800ab04:	e7b9      	b.n	800aa7a <rmw_destroy_publisher+0x12>
 800ab06:	2402      	movs	r4, #2
 800ab08:	e7f9      	b.n	800aafe <rmw_destroy_publisher+0x96>
 800ab0a:	bf00      	nop

0800ab0c <rmw_uxrce_init_service_memory>:
 800ab0c:	b1e2      	cbz	r2, 800ab48 <rmw_uxrce_init_service_memory+0x3c>
 800ab0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab12:	7b05      	ldrb	r5, [r0, #12]
 800ab14:	4606      	mov	r6, r0
 800ab16:	b9ad      	cbnz	r5, 800ab44 <rmw_uxrce_init_service_memory+0x38>
 800ab18:	23c8      	movs	r3, #200	@ 0xc8
 800ab1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab1e:	6083      	str	r3, [r0, #8]
 800ab20:	f240 1301 	movw	r3, #257	@ 0x101
 800ab24:	4617      	mov	r7, r2
 800ab26:	8183      	strh	r3, [r0, #12]
 800ab28:	460c      	mov	r4, r1
 800ab2a:	46a8      	mov	r8, r5
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	3501      	adds	r5, #1
 800ab32:	f007 fe19 	bl	8012768 <put_memory>
 800ab36:	42af      	cmp	r7, r5
 800ab38:	60a4      	str	r4, [r4, #8]
 800ab3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab3e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ab42:	d1f3      	bne.n	800ab2c <rmw_uxrce_init_service_memory+0x20>
 800ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop

0800ab4c <rmw_uxrce_init_client_memory>:
 800ab4c:	b1e2      	cbz	r2, 800ab88 <rmw_uxrce_init_client_memory+0x3c>
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	7b05      	ldrb	r5, [r0, #12]
 800ab54:	4606      	mov	r6, r0
 800ab56:	b9ad      	cbnz	r5, 800ab84 <rmw_uxrce_init_client_memory+0x38>
 800ab58:	23c8      	movs	r3, #200	@ 0xc8
 800ab5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab5e:	6083      	str	r3, [r0, #8]
 800ab60:	f240 1301 	movw	r3, #257	@ 0x101
 800ab64:	4617      	mov	r7, r2
 800ab66:	8183      	strh	r3, [r0, #12]
 800ab68:	460c      	mov	r4, r1
 800ab6a:	46a8      	mov	r8, r5
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4630      	mov	r0, r6
 800ab70:	3501      	adds	r5, #1
 800ab72:	f007 fdf9 	bl	8012768 <put_memory>
 800ab76:	42af      	cmp	r7, r5
 800ab78:	60a4      	str	r4, [r4, #8]
 800ab7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab7e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ab82:	d1f3      	bne.n	800ab6c <rmw_uxrce_init_client_memory+0x20>
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop

0800ab8c <rmw_uxrce_init_publisher_memory>:
 800ab8c:	b1e2      	cbz	r2, 800abc8 <rmw_uxrce_init_publisher_memory+0x3c>
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	7b05      	ldrb	r5, [r0, #12]
 800ab94:	4606      	mov	r6, r0
 800ab96:	b9ad      	cbnz	r5, 800abc4 <rmw_uxrce_init_publisher_memory+0x38>
 800ab98:	23d8      	movs	r3, #216	@ 0xd8
 800ab9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab9e:	6083      	str	r3, [r0, #8]
 800aba0:	f240 1301 	movw	r3, #257	@ 0x101
 800aba4:	4617      	mov	r7, r2
 800aba6:	8183      	strh	r3, [r0, #12]
 800aba8:	460c      	mov	r4, r1
 800abaa:	46a8      	mov	r8, r5
 800abac:	4621      	mov	r1, r4
 800abae:	4630      	mov	r0, r6
 800abb0:	3501      	adds	r5, #1
 800abb2:	f007 fdd9 	bl	8012768 <put_memory>
 800abb6:	42af      	cmp	r7, r5
 800abb8:	60a4      	str	r4, [r4, #8]
 800abba:	f884 800c 	strb.w	r8, [r4, #12]
 800abbe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800abc2:	d1f3      	bne.n	800abac <rmw_uxrce_init_publisher_memory+0x20>
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <rmw_uxrce_init_subscription_memory>:
 800abcc:	b1e2      	cbz	r2, 800ac08 <rmw_uxrce_init_subscription_memory+0x3c>
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	7b05      	ldrb	r5, [r0, #12]
 800abd4:	4606      	mov	r6, r0
 800abd6:	b9ad      	cbnz	r5, 800ac04 <rmw_uxrce_init_subscription_memory+0x38>
 800abd8:	23d8      	movs	r3, #216	@ 0xd8
 800abda:	e9c0 5500 	strd	r5, r5, [r0]
 800abde:	6083      	str	r3, [r0, #8]
 800abe0:	f240 1301 	movw	r3, #257	@ 0x101
 800abe4:	4617      	mov	r7, r2
 800abe6:	8183      	strh	r3, [r0, #12]
 800abe8:	460c      	mov	r4, r1
 800abea:	46a8      	mov	r8, r5
 800abec:	4621      	mov	r1, r4
 800abee:	4630      	mov	r0, r6
 800abf0:	3501      	adds	r5, #1
 800abf2:	f007 fdb9 	bl	8012768 <put_memory>
 800abf6:	42af      	cmp	r7, r5
 800abf8:	60a4      	str	r4, [r4, #8]
 800abfa:	f884 800c 	strb.w	r8, [r4, #12]
 800abfe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ac02:	d1f3      	bne.n	800abec <rmw_uxrce_init_subscription_memory+0x20>
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop

0800ac0c <rmw_uxrce_init_node_memory>:
 800ac0c:	b1e2      	cbz	r2, 800ac48 <rmw_uxrce_init_node_memory+0x3c>
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	7b05      	ldrb	r5, [r0, #12]
 800ac14:	4606      	mov	r6, r0
 800ac16:	b9ad      	cbnz	r5, 800ac44 <rmw_uxrce_init_node_memory+0x38>
 800ac18:	23a4      	movs	r3, #164	@ 0xa4
 800ac1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	f240 1301 	movw	r3, #257	@ 0x101
 800ac24:	4617      	mov	r7, r2
 800ac26:	8183      	strh	r3, [r0, #12]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	46a8      	mov	r8, r5
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4630      	mov	r0, r6
 800ac30:	3501      	adds	r5, #1
 800ac32:	f007 fd99 	bl	8012768 <put_memory>
 800ac36:	42af      	cmp	r7, r5
 800ac38:	60a4      	str	r4, [r4, #8]
 800ac3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ac42:	d1f3      	bne.n	800ac2c <rmw_uxrce_init_node_memory+0x20>
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop

0800ac4c <rmw_uxrce_init_session_memory>:
 800ac4c:	b1ea      	cbz	r2, 800ac8a <rmw_uxrce_init_session_memory+0x3e>
 800ac4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac52:	7b05      	ldrb	r5, [r0, #12]
 800ac54:	4606      	mov	r6, r0
 800ac56:	b9b5      	cbnz	r5, 800ac86 <rmw_uxrce_init_session_memory+0x3a>
 800ac58:	e9c0 5500 	strd	r5, r5, [r0]
 800ac5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ac60:	f240 1301 	movw	r3, #257	@ 0x101
 800ac64:	4617      	mov	r7, r2
 800ac66:	f8c0 8008 	str.w	r8, [r0, #8]
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	8183      	strh	r3, [r0, #12]
 800ac6e:	46a9      	mov	r9, r5
 800ac70:	4621      	mov	r1, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	3501      	adds	r5, #1
 800ac76:	f007 fd77 	bl	8012768 <put_memory>
 800ac7a:	42af      	cmp	r7, r5
 800ac7c:	60a4      	str	r4, [r4, #8]
 800ac7e:	f884 900c 	strb.w	r9, [r4, #12]
 800ac82:	4444      	add	r4, r8
 800ac84:	d1f4      	bne.n	800ac70 <rmw_uxrce_init_session_memory+0x24>
 800ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	4770      	bx	lr

0800ac8c <rmw_uxrce_init_topic_memory>:
 800ac8c:	b1e2      	cbz	r2, 800acc8 <rmw_uxrce_init_topic_memory+0x3c>
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	7b05      	ldrb	r5, [r0, #12]
 800ac94:	4606      	mov	r6, r0
 800ac96:	b9ad      	cbnz	r5, 800acc4 <rmw_uxrce_init_topic_memory+0x38>
 800ac98:	231c      	movs	r3, #28
 800ac9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac9e:	6083      	str	r3, [r0, #8]
 800aca0:	f240 1301 	movw	r3, #257	@ 0x101
 800aca4:	4617      	mov	r7, r2
 800aca6:	8183      	strh	r3, [r0, #12]
 800aca8:	460c      	mov	r4, r1
 800acaa:	46a8      	mov	r8, r5
 800acac:	4621      	mov	r1, r4
 800acae:	4630      	mov	r0, r6
 800acb0:	3501      	adds	r5, #1
 800acb2:	f007 fd59 	bl	8012768 <put_memory>
 800acb6:	42af      	cmp	r7, r5
 800acb8:	60a4      	str	r4, [r4, #8]
 800acba:	f884 800c 	strb.w	r8, [r4, #12]
 800acbe:	f104 041c 	add.w	r4, r4, #28
 800acc2:	d1f3      	bne.n	800acac <rmw_uxrce_init_topic_memory+0x20>
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop

0800accc <rmw_uxrce_init_static_input_buffer_memory>:
 800accc:	b1ea      	cbz	r2, 800ad0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	7b05      	ldrb	r5, [r0, #12]
 800acd4:	4606      	mov	r6, r0
 800acd6:	b9b5      	cbnz	r5, 800ad06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800acd8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800acdc:	e9c0 5500 	strd	r5, r5, [r0]
 800ace0:	6083      	str	r3, [r0, #8]
 800ace2:	f240 1301 	movw	r3, #257	@ 0x101
 800ace6:	4617      	mov	r7, r2
 800ace8:	8183      	strh	r3, [r0, #12]
 800acea:	460c      	mov	r4, r1
 800acec:	46a8      	mov	r8, r5
 800acee:	4621      	mov	r1, r4
 800acf0:	4630      	mov	r0, r6
 800acf2:	3501      	adds	r5, #1
 800acf4:	f007 fd38 	bl	8012768 <put_memory>
 800acf8:	42af      	cmp	r7, r5
 800acfa:	60a4      	str	r4, [r4, #8]
 800acfc:	f884 800c 	strb.w	r8, [r4, #12]
 800ad00:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ad04:	d1f3      	bne.n	800acee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad0a:	4770      	bx	lr

0800ad0c <rmw_uxrce_init_init_options_impl_memory>:
 800ad0c:	b1e2      	cbz	r2, 800ad48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ad0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	7b05      	ldrb	r5, [r0, #12]
 800ad14:	4606      	mov	r6, r0
 800ad16:	b9ad      	cbnz	r5, 800ad44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ad18:	232c      	movs	r3, #44	@ 0x2c
 800ad1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad1e:	6083      	str	r3, [r0, #8]
 800ad20:	f240 1301 	movw	r3, #257	@ 0x101
 800ad24:	4617      	mov	r7, r2
 800ad26:	8183      	strh	r3, [r0, #12]
 800ad28:	460c      	mov	r4, r1
 800ad2a:	46a8      	mov	r8, r5
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4630      	mov	r0, r6
 800ad30:	3501      	adds	r5, #1
 800ad32:	f007 fd19 	bl	8012768 <put_memory>
 800ad36:	42af      	cmp	r7, r5
 800ad38:	60a4      	str	r4, [r4, #8]
 800ad3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ad42:	d1f3      	bne.n	800ad2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop

0800ad4c <rmw_uxrce_init_wait_set_memory>:
 800ad4c:	b1e2      	cbz	r2, 800ad88 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ad4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	7b05      	ldrb	r5, [r0, #12]
 800ad54:	4606      	mov	r6, r0
 800ad56:	b9ad      	cbnz	r5, 800ad84 <rmw_uxrce_init_wait_set_memory+0x38>
 800ad58:	231c      	movs	r3, #28
 800ad5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad5e:	6083      	str	r3, [r0, #8]
 800ad60:	f240 1301 	movw	r3, #257	@ 0x101
 800ad64:	4617      	mov	r7, r2
 800ad66:	8183      	strh	r3, [r0, #12]
 800ad68:	460c      	mov	r4, r1
 800ad6a:	46a8      	mov	r8, r5
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	4630      	mov	r0, r6
 800ad70:	3501      	adds	r5, #1
 800ad72:	f007 fcf9 	bl	8012768 <put_memory>
 800ad76:	42af      	cmp	r7, r5
 800ad78:	60a4      	str	r4, [r4, #8]
 800ad7a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad7e:	f104 041c 	add.w	r4, r4, #28
 800ad82:	d1f3      	bne.n	800ad6c <rmw_uxrce_init_wait_set_memory+0x20>
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop

0800ad8c <rmw_uxrce_init_guard_condition_memory>:
 800ad8c:	b1e2      	cbz	r2, 800adc8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	7b05      	ldrb	r5, [r0, #12]
 800ad94:	4606      	mov	r6, r0
 800ad96:	b9ad      	cbnz	r5, 800adc4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad9e:	6083      	str	r3, [r0, #8]
 800ada0:	f240 1301 	movw	r3, #257	@ 0x101
 800ada4:	4617      	mov	r7, r2
 800ada6:	8183      	strh	r3, [r0, #12]
 800ada8:	460c      	mov	r4, r1
 800adaa:	46a8      	mov	r8, r5
 800adac:	4621      	mov	r1, r4
 800adae:	4630      	mov	r0, r6
 800adb0:	3501      	adds	r5, #1
 800adb2:	f007 fcd9 	bl	8012768 <put_memory>
 800adb6:	42af      	cmp	r7, r5
 800adb8:	60a4      	str	r4, [r4, #8]
 800adba:	f884 800c 	strb.w	r8, [r4, #12]
 800adbe:	f104 0420 	add.w	r4, r4, #32
 800adc2:	d1f3      	bne.n	800adac <rmw_uxrce_init_guard_condition_memory+0x20>
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop

0800adcc <rmw_uxrce_fini_session_memory>:
 800adcc:	4601      	mov	r1, r0
 800adce:	4801      	ldr	r0, [pc, #4]	@ (800add4 <rmw_uxrce_fini_session_memory+0x8>)
 800add0:	f007 bcca 	b.w	8012768 <put_memory>
 800add4:	2000dcbc 	.word	0x2000dcbc

0800add8 <rmw_uxrce_fini_node_memory>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	6800      	ldr	r0, [r0, #0]
 800adde:	b128      	cbz	r0, 800adec <rmw_uxrce_fini_node_memory+0x14>
 800ade0:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <rmw_uxrce_fini_node_memory+0x28>)
 800ade2:	6819      	ldr	r1, [r3, #0]
 800ade4:	f7f5 f9fc 	bl	80001e0 <strcmp>
 800ade8:	b940      	cbnz	r0, 800adfc <rmw_uxrce_fini_node_memory+0x24>
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	6861      	ldr	r1, [r4, #4]
 800adee:	b129      	cbz	r1, 800adfc <rmw_uxrce_fini_node_memory+0x24>
 800adf0:	2500      	movs	r5, #0
 800adf2:	4804      	ldr	r0, [pc, #16]	@ (800ae04 <rmw_uxrce_fini_node_memory+0x2c>)
 800adf4:	610d      	str	r5, [r1, #16]
 800adf6:	f007 fcb7 	bl	8012768 <put_memory>
 800adfa:	6065      	str	r5, [r4, #4]
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
 800adfe:	bf00      	nop
 800ae00:	08017f7c 	.word	0x08017f7c
 800ae04:	2000dc8c 	.word	0x2000dc8c

0800ae08 <rmw_uxrce_fini_publisher_memory>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	6800      	ldr	r0, [r0, #0]
 800ae0e:	b128      	cbz	r0, 800ae1c <rmw_uxrce_fini_publisher_memory+0x14>
 800ae10:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	f7f5 f9e4 	bl	80001e0 <strcmp>
 800ae18:	b938      	cbnz	r0, 800ae2a <rmw_uxrce_fini_publisher_memory+0x22>
 800ae1a:	6020      	str	r0, [r4, #0]
 800ae1c:	6861      	ldr	r1, [r4, #4]
 800ae1e:	b121      	cbz	r1, 800ae2a <rmw_uxrce_fini_publisher_memory+0x22>
 800ae20:	4803      	ldr	r0, [pc, #12]	@ (800ae30 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ae22:	f007 fca1 	bl	8012768 <put_memory>
 800ae26:	2300      	movs	r3, #0
 800ae28:	6063      	str	r3, [r4, #4]
 800ae2a:	bd10      	pop	{r4, pc}
 800ae2c:	08017f7c 	.word	0x08017f7c
 800ae30:	2000dc9c 	.word	0x2000dc9c

0800ae34 <rmw_uxrce_fini_subscription_memory>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	4604      	mov	r4, r0
 800ae38:	6800      	ldr	r0, [r0, #0]
 800ae3a:	b128      	cbz	r0, 800ae48 <rmw_uxrce_fini_subscription_memory+0x14>
 800ae3c:	4b06      	ldr	r3, [pc, #24]	@ (800ae58 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ae3e:	6819      	ldr	r1, [r3, #0]
 800ae40:	f7f5 f9ce 	bl	80001e0 <strcmp>
 800ae44:	b938      	cbnz	r0, 800ae56 <rmw_uxrce_fini_subscription_memory+0x22>
 800ae46:	6020      	str	r0, [r4, #0]
 800ae48:	6861      	ldr	r1, [r4, #4]
 800ae4a:	b121      	cbz	r1, 800ae56 <rmw_uxrce_fini_subscription_memory+0x22>
 800ae4c:	4803      	ldr	r0, [pc, #12]	@ (800ae5c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ae4e:	f007 fc8b 	bl	8012768 <put_memory>
 800ae52:	2300      	movs	r3, #0
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	bd10      	pop	{r4, pc}
 800ae58:	08017f7c 	.word	0x08017f7c
 800ae5c:	2000dcdc 	.word	0x2000dcdc

0800ae60 <rmw_uxrce_fini_service_memory>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	4604      	mov	r4, r0
 800ae64:	6800      	ldr	r0, [r0, #0]
 800ae66:	b128      	cbz	r0, 800ae74 <rmw_uxrce_fini_service_memory+0x14>
 800ae68:	4b06      	ldr	r3, [pc, #24]	@ (800ae84 <rmw_uxrce_fini_service_memory+0x24>)
 800ae6a:	6819      	ldr	r1, [r3, #0]
 800ae6c:	f7f5 f9b8 	bl	80001e0 <strcmp>
 800ae70:	b938      	cbnz	r0, 800ae82 <rmw_uxrce_fini_service_memory+0x22>
 800ae72:	6020      	str	r0, [r4, #0]
 800ae74:	6861      	ldr	r1, [r4, #4]
 800ae76:	b121      	cbz	r1, 800ae82 <rmw_uxrce_fini_service_memory+0x22>
 800ae78:	4803      	ldr	r0, [pc, #12]	@ (800ae88 <rmw_uxrce_fini_service_memory+0x28>)
 800ae7a:	f007 fc75 	bl	8012768 <put_memory>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	08017f7c 	.word	0x08017f7c
 800ae88:	2000dcac 	.word	0x2000dcac

0800ae8c <rmw_uxrce_fini_client_memory>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	6800      	ldr	r0, [r0, #0]
 800ae92:	b128      	cbz	r0, 800aea0 <rmw_uxrce_fini_client_memory+0x14>
 800ae94:	4b06      	ldr	r3, [pc, #24]	@ (800aeb0 <rmw_uxrce_fini_client_memory+0x24>)
 800ae96:	6819      	ldr	r1, [r3, #0]
 800ae98:	f7f5 f9a2 	bl	80001e0 <strcmp>
 800ae9c:	b938      	cbnz	r0, 800aeae <rmw_uxrce_fini_client_memory+0x22>
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	6861      	ldr	r1, [r4, #4]
 800aea2:	b121      	cbz	r1, 800aeae <rmw_uxrce_fini_client_memory+0x22>
 800aea4:	4803      	ldr	r0, [pc, #12]	@ (800aeb4 <rmw_uxrce_fini_client_memory+0x28>)
 800aea6:	f007 fc5f 	bl	8012768 <put_memory>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	bd10      	pop	{r4, pc}
 800aeb0:	08017f7c 	.word	0x08017f7c
 800aeb4:	200093c0 	.word	0x200093c0

0800aeb8 <rmw_uxrce_fini_topic_memory>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	4621      	mov	r1, r4
 800aebe:	4803      	ldr	r0, [pc, #12]	@ (800aecc <rmw_uxrce_fini_topic_memory+0x14>)
 800aec0:	f007 fc52 	bl	8012768 <put_memory>
 800aec4:	2300      	movs	r3, #0
 800aec6:	61a3      	str	r3, [r4, #24]
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	bf00      	nop
 800aecc:	2000dcec 	.word	0x2000dcec

0800aed0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800aed0:	b082      	sub	sp, #8
 800aed2:	b530      	push	{r4, r5, lr}
 800aed4:	4925      	ldr	r1, [pc, #148]	@ (800af6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800aed6:	680d      	ldr	r5, [r1, #0]
 800aed8:	ac03      	add	r4, sp, #12
 800aeda:	e884 000c 	stmia.w	r4, {r2, r3}
 800aede:	461c      	mov	r4, r3
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	d041      	beq.n	800af68 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800aee4:	462b      	mov	r3, r5
 800aee6:	2100      	movs	r1, #0
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800aef0:	4290      	cmp	r0, r2
 800aef2:	bf08      	it	eq
 800aef4:	3101      	addeq	r1, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f6      	bne.n	800aee8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800aefa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d029      	beq.n	800af56 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800af02:	d907      	bls.n	800af14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af04:	2b03      	cmp	r3, #3
 800af06:	d005      	beq.n	800af14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af08:	2100      	movs	r1, #0
 800af0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af0e:	4608      	mov	r0, r1
 800af10:	b002      	add	sp, #8
 800af12:	4770      	bx	lr
 800af14:	b314      	cbz	r4, 800af5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af16:	428c      	cmp	r4, r1
 800af18:	d820      	bhi.n	800af5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	d0f4      	beq.n	800af08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800af1e:	2100      	movs	r1, #0
 800af20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800af24:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800af28:	e002      	b.n	800af30 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800af2a:	686d      	ldr	r5, [r5, #4]
 800af2c:	2d00      	cmp	r5, #0
 800af2e:	d0ec      	beq.n	800af0a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800af30:	68ab      	ldr	r3, [r5, #8]
 800af32:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800af36:	4290      	cmp	r0, r2
 800af38:	d1f7      	bne.n	800af2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af3a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800af3e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800af42:	4562      	cmp	r2, ip
 800af44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800af48:	eb73 0e04 	sbcs.w	lr, r3, r4
 800af4c:	daed      	bge.n	800af2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af4e:	4694      	mov	ip, r2
 800af50:	461c      	mov	r4, r3
 800af52:	4629      	mov	r1, r5
 800af54:	e7e9      	b.n	800af2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af56:	b10c      	cbz	r4, 800af5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af58:	428c      	cmp	r4, r1
 800af5a:	d9d5      	bls.n	800af08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800af5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af60:	4802      	ldr	r0, [pc, #8]	@ (800af6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800af62:	b002      	add	sp, #8
 800af64:	f007 bbf0 	b.w	8012748 <get_memory>
 800af68:	4629      	mov	r1, r5
 800af6a:	e7c6      	b.n	800aefa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800af6c:	2000dccc 	.word	0x2000dccc

0800af70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800af70:	4b11      	ldr	r3, [pc, #68]	@ (800afb8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b530      	push	{r4, r5, lr}
 800af76:	b1e3      	cbz	r3, 800afb2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800af78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800af7c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800af80:	2400      	movs	r4, #0
 800af82:	e001      	b.n	800af88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	b193      	cbz	r3, 800afae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800af8e:	4288      	cmp	r0, r1
 800af90:	d1f8      	bne.n	800af84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800af92:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800af96:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800af9a:	4571      	cmp	r1, lr
 800af9c:	eb72 050c 	sbcs.w	r5, r2, ip
 800afa0:	daf0      	bge.n	800af84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800afa2:	461c      	mov	r4, r3
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	468e      	mov	lr, r1
 800afa8:	4694      	mov	ip, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1ec      	bne.n	800af88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800afae:	4620      	mov	r0, r4
 800afb0:	bd30      	pop	{r4, r5, pc}
 800afb2:	461c      	mov	r4, r3
 800afb4:	4620      	mov	r0, r4
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	2000dccc 	.word	0x2000dccc
 800afbc:	00000000 	.word	0x00000000

0800afc0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	4b3c      	ldr	r3, [pc, #240]	@ (800b0b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800afc6:	ed2d 8b06 	vpush	{d8-d10}
 800afca:	681f      	ldr	r7, [r3, #0]
 800afcc:	b08d      	sub	sp, #52	@ 0x34
 800afce:	f008 fd23 	bl	8013a18 <rmw_uros_epoch_nanos>
 800afd2:	2f00      	cmp	r7, #0
 800afd4:	d05d      	beq.n	800b092 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800afd6:	46b8      	mov	r8, r7
 800afd8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b0a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800afdc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800afe0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b0a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800afea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b0b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800afee:	4681      	mov	r9, r0
 800aff0:	468a      	mov	sl, r1
 800aff2:	ac04      	add	r4, sp, #16
 800aff4:	d03f      	beq.n	800b076 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800aff6:	2b05      	cmp	r3, #5
 800aff8:	d044      	beq.n	800b084 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800affa:	2b03      	cmp	r3, #3
 800affc:	d03b      	beq.n	800b076 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800affe:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b002:	ed8d ab06 	vstr	d10, [sp, #24]
 800b006:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b00a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b00e:	ab08      	add	r3, sp, #32
 800b010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b012:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b016:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b01a:	f007 f9c9 	bl	80123b0 <rmw_time_equal>
 800b01e:	b118      	cbz	r0, 800b028 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b020:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b024:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b02c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b030:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b034:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b038:	f007 fa0e 	bl	8012458 <rmw_time_total_nsec>
 800b03c:	1830      	adds	r0, r6, r0
 800b03e:	eb47 0101 	adc.w	r1, r7, r1
 800b042:	4548      	cmp	r0, r9
 800b044:	eb71 030a 	sbcs.w	r3, r1, sl
 800b048:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b04c:	db05      	blt.n	800b05a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b04e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b052:	4591      	cmp	r9, r2
 800b054:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b058:	da03      	bge.n	800b062 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b05a:	4817      	ldr	r0, [pc, #92]	@ (800b0b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b05c:	4641      	mov	r1, r8
 800b05e:	f007 fb83 	bl	8012768 <put_memory>
 800b062:	f1bb 0f00 	cmp.w	fp, #0
 800b066:	d014      	beq.n	800b092 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b068:	46d8      	mov	r8, fp
 800b06a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b06e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b072:	2b04      	cmp	r3, #4
 800b074:	d1bf      	bne.n	800aff6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b076:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b07a:	3340      	adds	r3, #64	@ 0x40
 800b07c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b07e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b082:	e7c0      	b.n	800b006 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b084:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b088:	3348      	adds	r3, #72	@ 0x48
 800b08a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b08c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b090:	e7b9      	b.n	800b006 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b092:	b00d      	add	sp, #52	@ 0x34
 800b094:	ecbd 8b06 	vpop	{d8-d10}
 800b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	f3af 8000 	nop.w
	...
 800b0a8:	00000001 	.word	0x00000001
 800b0ac:	00000000 	.word	0x00000000
 800b0b0:	0000001e 	.word	0x0000001e
 800b0b4:	00000000 	.word	0x00000000
 800b0b8:	2000dccc 	.word	0x2000dccc

0800b0bc <run_xrce_session>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	788c      	ldrb	r4, [r1, #2]
 800b0c0:	b086      	sub	sp, #24
 800b0c2:	2c01      	cmp	r4, #1
 800b0c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b0c8:	d00c      	beq.n	800b0e4 <run_xrce_session+0x28>
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	f10d 020e 	add.w	r2, sp, #14
 800b0d4:	f10d 0317 	add.w	r3, sp, #23
 800b0d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b0dc:	f002 fa86 	bl	800d5ec <uxr_run_session_until_all_status>
 800b0e0:	b006      	add	sp, #24
 800b0e2:	bd10      	pop	{r4, pc}
 800b0e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b0e8:	f001 fe9a 	bl	800ce20 <uxr_flash_output_streams>
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	b006      	add	sp, #24
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	bf00      	nop

0800b0f4 <convert_qos_profile>:
 800b0f4:	7a4a      	ldrb	r2, [r1, #9]
 800b0f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b0fa:	2a02      	cmp	r2, #2
 800b0fc:	bf18      	it	ne
 800b0fe:	2200      	movne	r2, #0
 800b100:	7002      	strb	r2, [r0, #0]
 800b102:	780a      	ldrb	r2, [r1, #0]
 800b104:	8889      	ldrh	r1, [r1, #4]
 800b106:	8081      	strh	r1, [r0, #4]
 800b108:	f1ac 0c02 	sub.w	ip, ip, #2
 800b10c:	f1a2 0202 	sub.w	r2, r2, #2
 800b110:	fabc fc8c 	clz	ip, ip
 800b114:	fab2 f282 	clz	r2, r2
 800b118:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b11c:	0952      	lsrs	r2, r2, #5
 800b11e:	f880 c001 	strb.w	ip, [r0, #1]
 800b122:	7082      	strb	r2, [r0, #2]
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop

0800b128 <generate_type_name>:
 800b128:	b530      	push	{r4, r5, lr}
 800b12a:	2300      	movs	r3, #0
 800b12c:	700b      	strb	r3, [r1, #0]
 800b12e:	6803      	ldr	r3, [r0, #0]
 800b130:	b087      	sub	sp, #28
 800b132:	4614      	mov	r4, r2
 800b134:	b1d3      	cbz	r3, 800b16c <generate_type_name+0x44>
 800b136:	4a0f      	ldr	r2, [pc, #60]	@ (800b174 <generate_type_name+0x4c>)
 800b138:	4615      	mov	r5, r2
 800b13a:	9203      	str	r2, [sp, #12]
 800b13c:	9500      	str	r5, [sp, #0]
 800b13e:	6842      	ldr	r2, [r0, #4]
 800b140:	480d      	ldr	r0, [pc, #52]	@ (800b178 <generate_type_name+0x50>)
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	4608      	mov	r0, r1
 800b146:	490d      	ldr	r1, [pc, #52]	@ (800b17c <generate_type_name+0x54>)
 800b148:	9204      	str	r2, [sp, #16]
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	9102      	str	r1, [sp, #8]
 800b14e:	4a0c      	ldr	r2, [pc, #48]	@ (800b180 <generate_type_name+0x58>)
 800b150:	4621      	mov	r1, r4
 800b152:	f00b f983 	bl	801645c <sniprintf>
 800b156:	2800      	cmp	r0, #0
 800b158:	db05      	blt.n	800b166 <generate_type_name+0x3e>
 800b15a:	4284      	cmp	r4, r0
 800b15c:	bfd4      	ite	le
 800b15e:	2000      	movle	r0, #0
 800b160:	2001      	movgt	r0, #1
 800b162:	b007      	add	sp, #28
 800b164:	bd30      	pop	{r4, r5, pc}
 800b166:	2000      	movs	r0, #0
 800b168:	b007      	add	sp, #28
 800b16a:	bd30      	pop	{r4, r5, pc}
 800b16c:	4b05      	ldr	r3, [pc, #20]	@ (800b184 <generate_type_name+0x5c>)
 800b16e:	4a01      	ldr	r2, [pc, #4]	@ (800b174 <generate_type_name+0x4c>)
 800b170:	461d      	mov	r5, r3
 800b172:	e7e2      	b.n	800b13a <generate_type_name+0x12>
 800b174:	080177cc 	.word	0x080177cc
 800b178:	080177e4 	.word	0x080177e4
 800b17c:	080177e0 	.word	0x080177e0
 800b180:	080177d0 	.word	0x080177d0
 800b184:	08017d54 	.word	0x08017d54

0800b188 <generate_topic_name>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	4614      	mov	r4, r2
 800b18e:	9000      	str	r0, [sp, #0]
 800b190:	4b08      	ldr	r3, [pc, #32]	@ (800b1b4 <generate_topic_name+0x2c>)
 800b192:	4a09      	ldr	r2, [pc, #36]	@ (800b1b8 <generate_topic_name+0x30>)
 800b194:	4608      	mov	r0, r1
 800b196:	4621      	mov	r1, r4
 800b198:	f00b f960 	bl	801645c <sniprintf>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	db05      	blt.n	800b1ac <generate_topic_name+0x24>
 800b1a0:	4284      	cmp	r4, r0
 800b1a2:	bfd4      	ite	le
 800b1a4:	2000      	movle	r0, #0
 800b1a6:	2001      	movgt	r0, #1
 800b1a8:	b002      	add	sp, #8
 800b1aa:	bd10      	pop	{r4, pc}
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	b002      	add	sp, #8
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	bf00      	nop
 800b1b4:	080177f0 	.word	0x080177f0
 800b1b8:	080177e8 	.word	0x080177e8

0800b1bc <is_uxrce_rmw_identifier_valid>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b140      	cbz	r0, 800b1d4 <is_uxrce_rmw_identifier_valid+0x18>
 800b1c2:	f007 fb29 	bl	8012818 <rmw_get_implementation_identifier>
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7f5 f809 	bl	80001e0 <strcmp>
 800b1ce:	fab0 f080 	clz	r0, r0
 800b1d2:	0940      	lsrs	r0, r0, #5
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	bf00      	nop

0800b1d8 <get_message_typesupport_handle>:
 800b1d8:	6883      	ldr	r3, [r0, #8]
 800b1da:	4718      	bx	r3

0800b1dc <get_message_typesupport_handle_function>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4604      	mov	r4, r0
 800b1e0:	6800      	ldr	r0, [r0, #0]
 800b1e2:	f7f4 fffd 	bl	80001e0 <strcmp>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	bf0c      	ite	eq
 800b1ea:	4620      	moveq	r0, r4
 800b1ec:	2000      	movne	r0, #0
 800b1ee:	bd10      	pop	{r4, pc}

0800b1f0 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b1f0:	4b04      	ldr	r3, [pc, #16]	@ (800b204 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	b10a      	cbz	r2, 800b1fa <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800b1f6:	4803      	ldr	r0, [pc, #12]	@ (800b204 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1f8:	4770      	bx	lr
 800b1fa:	4a03      	ldr	r2, [pc, #12]	@ (800b208 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1fe:	6812      	ldr	r2, [r2, #0]
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	4770      	bx	lr
 800b204:	20000074 	.word	0x20000074
 800b208:	200002a0 	.word	0x200002a0

0800b20c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b20c:	4a02      	ldr	r2, [pc, #8]	@ (800b218 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xc>)
 800b20e:	4b03      	ldr	r3, [pc, #12]	@ (800b21c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x10>)
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	200002a0 	.word	0x200002a0
 800b21c:	20000074 	.word	0x20000074

0800b220 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b220:	4b04      	ldr	r3, [pc, #16]	@ (800b234 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	b10a      	cbz	r2, 800b22a <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800b226:	4803      	ldr	r0, [pc, #12]	@ (800b234 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b228:	4770      	bx	lr
 800b22a:	4a03      	ldr	r2, [pc, #12]	@ (800b238 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800b22c:	4801      	ldr	r0, [pc, #4]	@ (800b234 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	4770      	bx	lr
 800b234:	20000088 	.word	0x20000088
 800b238:	200002a0 	.word	0x200002a0

0800b23c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b23c:	4a02      	ldr	r2, [pc, #8]	@ (800b248 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xc>)
 800b23e:	4b03      	ldr	r3, [pc, #12]	@ (800b24c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x10>)
 800b240:	6812      	ldr	r2, [r2, #0]
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	200002a0 	.word	0x200002a0
 800b24c:	20000088 	.word	0x20000088

0800b250 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_init_function>:
 800b250:	f008 bc1e 	b.w	8013a90 <rover_msgs__msg__ControllerMsg__init>

0800b254 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_fini_function>:
 800b254:	f008 bc20 	b.w	8013a98 <rover_msgs__msg__ControllerMsg__fini>

0800b258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b258:	4b04      	ldr	r3, [pc, #16]	@ (800b26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	b10a      	cbz	r2, 800b262 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800b25e:	4803      	ldr	r0, [pc, #12]	@ (800b26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b260:	4770      	bx	lr
 800b262:	4a03      	ldr	r2, [pc, #12]	@ (800b270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800b264:	4801      	ldr	r0, [pc, #4]	@ (800b26c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	4770      	bx	lr
 800b26c:	20000148 	.word	0x20000148
 800b270:	200002a4 	.word	0x200002a4

0800b274 <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_init_function>:
 800b274:	f008 bc12 	b.w	8013a9c <rover_msgs__msg__EncoderMsg__init>

0800b278 <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_fini_function>:
 800b278:	f008 bc14 	b.w	8013aa4 <rover_msgs__msg__EncoderMsg__fini>

0800b27c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b27c:	4b04      	ldr	r3, [pc, #16]	@ (800b290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	b10a      	cbz	r2, 800b286 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800b282:	4803      	ldr	r0, [pc, #12]	@ (800b290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b284:	4770      	bx	lr
 800b286:	4a03      	ldr	r2, [pc, #12]	@ (800b294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b28a:	6812      	ldr	r2, [r2, #0]
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	4770      	bx	lr
 800b290:	20000244 	.word	0x20000244
 800b294:	200002a4 	.word	0x200002a4

0800b298 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 800b298:	b1b0      	cbz	r0, 800b2c8 <get_serialized_size_rover_msgs__msg__ControllerMsg+0x30>
 800b29a:	b538      	push	{r3, r4, r5, lr}
 800b29c:	460d      	mov	r5, r1
 800b29e:	4628      	mov	r0, r5
 800b2a0:	2104      	movs	r1, #4
 800b2a2:	f001 f9ff 	bl	800c6a4 <ucdr_alignment>
 800b2a6:	1d2b      	adds	r3, r5, #4
 800b2a8:	181c      	adds	r4, r3, r0
 800b2aa:	2104      	movs	r1, #4
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 f9f9 	bl	800c6a4 <ucdr_alignment>
 800b2b2:	3004      	adds	r0, #4
 800b2b4:	4404      	add	r4, r0
 800b2b6:	2104      	movs	r1, #4
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 f9f3 	bl	800c6a4 <ucdr_alignment>
 800b2be:	f1c5 0504 	rsb	r5, r5, #4
 800b2c2:	4428      	add	r0, r5
 800b2c4:	4420      	add	r0, r4
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop

0800b2cc <_ControllerMsg__cdr_deserialize>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b169      	cbz	r1, 800b2ee <_ControllerMsg__cdr_deserialize+0x22>
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	f001 f8fe 	bl	800c4d4 <ucdr_deserialize_float>
 800b2d8:	1d21      	adds	r1, r4, #4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f001 f8fa 	bl	800c4d4 <ucdr_deserialize_float>
 800b2e0:	f104 0108 	add.w	r1, r4, #8
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ea:	f001 b8f3 	b.w	800c4d4 <ucdr_deserialize_float>
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop

0800b2f4 <_ControllerMsg__cdr_serialize>:
 800b2f4:	b198      	cbz	r0, 800b31e <_ControllerMsg__cdr_serialize+0x2a>
 800b2f6:	b538      	push	{r3, r4, r5, lr}
 800b2f8:	ed90 0a00 	vldr	s0, [r0]
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	f001 f84f 	bl	800c3a4 <ucdr_serialize_float>
 800b306:	ed94 0a01 	vldr	s0, [r4, #4]
 800b30a:	4628      	mov	r0, r5
 800b30c:	f001 f84a 	bl	800c3a4 <ucdr_serialize_float>
 800b310:	ed94 0a02 	vldr	s0, [r4, #8]
 800b314:	4628      	mov	r0, r5
 800b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31a:	f001 b843 	b.w	800c3a4 <ucdr_serialize_float>
 800b31e:	4770      	bx	lr

0800b320 <_ControllerMsg__get_serialized_size>:
 800b320:	b190      	cbz	r0, 800b348 <_ControllerMsg__get_serialized_size+0x28>
 800b322:	b510      	push	{r4, lr}
 800b324:	2104      	movs	r1, #4
 800b326:	2000      	movs	r0, #0
 800b328:	f001 f9bc 	bl	800c6a4 <ucdr_alignment>
 800b32c:	1d04      	adds	r4, r0, #4
 800b32e:	2104      	movs	r1, #4
 800b330:	4620      	mov	r0, r4
 800b332:	f001 f9b7 	bl	800c6a4 <ucdr_alignment>
 800b336:	3004      	adds	r0, #4
 800b338:	4404      	add	r4, r0
 800b33a:	2104      	movs	r1, #4
 800b33c:	4620      	mov	r0, r4
 800b33e:	f001 f9b1 	bl	800c6a4 <ucdr_alignment>
 800b342:	3004      	adds	r0, #4
 800b344:	4420      	add	r0, r4
 800b346:	bd10      	pop	{r4, pc}
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop

0800b34c <_ControllerMsg__max_serialized_size>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	2104      	movs	r1, #4
 800b350:	2000      	movs	r0, #0
 800b352:	f001 f9a7 	bl	800c6a4 <ucdr_alignment>
 800b356:	1d05      	adds	r5, r0, #4
 800b358:	2104      	movs	r1, #4
 800b35a:	4628      	mov	r0, r5
 800b35c:	f001 f9a2 	bl	800c6a4 <ucdr_alignment>
 800b360:	1d04      	adds	r4, r0, #4
 800b362:	442c      	add	r4, r5
 800b364:	2104      	movs	r1, #4
 800b366:	4620      	mov	r0, r4
 800b368:	f001 f99c 	bl	800c6a4 <ucdr_alignment>
 800b36c:	3004      	adds	r0, #4
 800b36e:	4420      	add	r0, r4
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop

0800b374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b374:	4800      	ldr	r0, [pc, #0]	@ (800b378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 800b376:	4770      	bx	lr
 800b378:	20000250 	.word	0x20000250

0800b37c <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 800b37c:	b1e0      	cbz	r0, 800b3b8 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 800b37e:	b570      	push	{r4, r5, r6, lr}
 800b380:	460d      	mov	r5, r1
 800b382:	4628      	mov	r0, r5
 800b384:	2104      	movs	r1, #4
 800b386:	f001 f98d 	bl	800c6a4 <ucdr_alignment>
 800b38a:	1d2b      	adds	r3, r5, #4
 800b38c:	181e      	adds	r6, r3, r0
 800b38e:	2104      	movs	r1, #4
 800b390:	4630      	mov	r0, r6
 800b392:	f001 f987 	bl	800c6a4 <ucdr_alignment>
 800b396:	1d04      	adds	r4, r0, #4
 800b398:	4434      	add	r4, r6
 800b39a:	2104      	movs	r1, #4
 800b39c:	4620      	mov	r0, r4
 800b39e:	f001 f981 	bl	800c6a4 <ucdr_alignment>
 800b3a2:	3004      	adds	r0, #4
 800b3a4:	4404      	add	r4, r0
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f001 f97b 	bl	800c6a4 <ucdr_alignment>
 800b3ae:	f1c5 0504 	rsb	r5, r5, #4
 800b3b2:	4428      	add	r0, r5
 800b3b4:	4420      	add	r0, r4
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop

0800b3bc <_EncoderMsg__cdr_deserialize>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	b191      	cbz	r1, 800b3e8 <_EncoderMsg__cdr_deserialize+0x2c>
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	f001 f886 	bl	800c4d4 <ucdr_deserialize_float>
 800b3c8:	1d21      	adds	r1, r4, #4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f001 f882 	bl	800c4d4 <ucdr_deserialize_float>
 800b3d0:	f104 0108 	add.w	r1, r4, #8
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f001 f87d 	bl	800c4d4 <ucdr_deserialize_float>
 800b3da:	f104 010c 	add.w	r1, r4, #12
 800b3de:	4628      	mov	r0, r5
 800b3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3e4:	f001 b876 	b.w	800c4d4 <ucdr_deserialize_float>
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}

0800b3ec <_EncoderMsg__cdr_serialize>:
 800b3ec:	b1c0      	cbz	r0, 800b420 <_EncoderMsg__cdr_serialize+0x34>
 800b3ee:	b538      	push	{r3, r4, r5, lr}
 800b3f0:	ed90 0a00 	vldr	s0, [r0]
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	f000 ffd3 	bl	800c3a4 <ucdr_serialize_float>
 800b3fe:	ed94 0a01 	vldr	s0, [r4, #4]
 800b402:	4628      	mov	r0, r5
 800b404:	f000 ffce 	bl	800c3a4 <ucdr_serialize_float>
 800b408:	ed94 0a02 	vldr	s0, [r4, #8]
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 ffc9 	bl	800c3a4 <ucdr_serialize_float>
 800b412:	ed94 0a03 	vldr	s0, [r4, #12]
 800b416:	4628      	mov	r0, r5
 800b418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b41c:	f000 bfc2 	b.w	800c3a4 <ucdr_serialize_float>
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop

0800b424 <_EncoderMsg__get_serialized_size>:
 800b424:	b1c0      	cbz	r0, 800b458 <_EncoderMsg__get_serialized_size+0x34>
 800b426:	b538      	push	{r3, r4, r5, lr}
 800b428:	2104      	movs	r1, #4
 800b42a:	2000      	movs	r0, #0
 800b42c:	f001 f93a 	bl	800c6a4 <ucdr_alignment>
 800b430:	1d05      	adds	r5, r0, #4
 800b432:	2104      	movs	r1, #4
 800b434:	4628      	mov	r0, r5
 800b436:	f001 f935 	bl	800c6a4 <ucdr_alignment>
 800b43a:	1d04      	adds	r4, r0, #4
 800b43c:	442c      	add	r4, r5
 800b43e:	2104      	movs	r1, #4
 800b440:	4620      	mov	r0, r4
 800b442:	f001 f92f 	bl	800c6a4 <ucdr_alignment>
 800b446:	3004      	adds	r0, #4
 800b448:	4404      	add	r4, r0
 800b44a:	2104      	movs	r1, #4
 800b44c:	4620      	mov	r0, r4
 800b44e:	f001 f929 	bl	800c6a4 <ucdr_alignment>
 800b452:	3004      	adds	r0, #4
 800b454:	4420      	add	r0, r4
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop

0800b45c <_EncoderMsg__max_serialized_size>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	2104      	movs	r1, #4
 800b460:	2000      	movs	r0, #0
 800b462:	f001 f91f 	bl	800c6a4 <ucdr_alignment>
 800b466:	1d05      	adds	r5, r0, #4
 800b468:	2104      	movs	r1, #4
 800b46a:	4628      	mov	r0, r5
 800b46c:	f001 f91a 	bl	800c6a4 <ucdr_alignment>
 800b470:	1d04      	adds	r4, r0, #4
 800b472:	442c      	add	r4, r5
 800b474:	2104      	movs	r1, #4
 800b476:	4620      	mov	r0, r4
 800b478:	f001 f914 	bl	800c6a4 <ucdr_alignment>
 800b47c:	3004      	adds	r0, #4
 800b47e:	4404      	add	r4, r0
 800b480:	2104      	movs	r1, #4
 800b482:	4620      	mov	r0, r4
 800b484:	f001 f90e 	bl	800c6a4 <ucdr_alignment>
 800b488:	3004      	adds	r0, #4
 800b48a:	4420      	add	r0, r4
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop

0800b490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b490:	4800      	ldr	r0, [pc, #0]	@ (800b494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 800b492:	4770      	bx	lr
 800b494:	20000278 	.word	0x20000278

0800b498 <ucdr_serialize_bool>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	460d      	mov	r5, r1
 800b49c:	2101      	movs	r1, #1
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f001 f8b4 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b4a4:	b148      	cbz	r0, 800b4ba <ucdr_serialize_bool+0x22>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	701d      	strb	r5, [r3, #0]
 800b4aa:	68a2      	ldr	r2, [r4, #8]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	440a      	add	r2, r1
 800b4b2:	440b      	add	r3, r1
 800b4b4:	60a2      	str	r2, [r4, #8]
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	7561      	strb	r1, [r4, #21]
 800b4ba:	7da0      	ldrb	r0, [r4, #22]
 800b4bc:	f080 0001 	eor.w	r0, r0, #1
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
 800b4c2:	bf00      	nop

0800b4c4 <ucdr_deserialize_bool>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	f001 f89e 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b4d0:	b160      	cbz	r0, 800b4ec <ucdr_deserialize_bool+0x28>
 800b4d2:	68a2      	ldr	r2, [r4, #8]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b4da:	3900      	subs	r1, #0
 800b4dc:	bf18      	it	ne
 800b4de:	2101      	movne	r1, #1
 800b4e0:	7029      	strb	r1, [r5, #0]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	60a2      	str	r2, [r4, #8]
 800b4e8:	6123      	str	r3, [r4, #16]
 800b4ea:	7561      	strb	r1, [r4, #21]
 800b4ec:	7da0      	ldrb	r0, [r4, #22]
 800b4ee:	f080 0001 	eor.w	r0, r0, #1
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}

0800b4f4 <ucdr_serialize_uint8_t>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f001 f886 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b500:	b148      	cbz	r0, 800b516 <ucdr_serialize_uint8_t+0x22>
 800b502:	68a3      	ldr	r3, [r4, #8]
 800b504:	701d      	strb	r5, [r3, #0]
 800b506:	68a2      	ldr	r2, [r4, #8]
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	2101      	movs	r1, #1
 800b50c:	440a      	add	r2, r1
 800b50e:	440b      	add	r3, r1
 800b510:	60a2      	str	r2, [r4, #8]
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	7561      	strb	r1, [r4, #21]
 800b516:	7da0      	ldrb	r0, [r4, #22]
 800b518:	f080 0001 	eor.w	r0, r0, #1
 800b51c:	bd38      	pop	{r3, r4, r5, pc}
 800b51e:	bf00      	nop

0800b520 <ucdr_deserialize_uint8_t>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	460d      	mov	r5, r1
 800b524:	2101      	movs	r1, #1
 800b526:	4604      	mov	r4, r0
 800b528:	f001 f870 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b52c:	b150      	cbz	r0, 800b544 <ucdr_deserialize_uint8_t+0x24>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	702b      	strb	r3, [r5, #0]
 800b534:	68a2      	ldr	r2, [r4, #8]
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	2101      	movs	r1, #1
 800b53a:	440a      	add	r2, r1
 800b53c:	440b      	add	r3, r1
 800b53e:	60a2      	str	r2, [r4, #8]
 800b540:	6123      	str	r3, [r4, #16]
 800b542:	7561      	strb	r1, [r4, #21]
 800b544:	7da0      	ldrb	r0, [r4, #22]
 800b546:	f080 0001 	eor.w	r0, r0, #1
 800b54a:	bd38      	pop	{r3, r4, r5, pc}

0800b54c <ucdr_serialize_uint16_t>:
 800b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	460b      	mov	r3, r1
 800b554:	2102      	movs	r1, #2
 800b556:	4604      	mov	r4, r0
 800b558:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b55c:	f001 f8aa 	bl	800c6b4 <ucdr_buffer_alignment>
 800b560:	4601      	mov	r1, r0
 800b562:	4620      	mov	r0, r4
 800b564:	7d67      	ldrb	r7, [r4, #21]
 800b566:	f001 f8e9 	bl	800c73c <ucdr_advance_buffer>
 800b56a:	2102      	movs	r1, #2
 800b56c:	4620      	mov	r0, r4
 800b56e:	f001 f841 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b572:	bb78      	cbnz	r0, 800b5d4 <ucdr_serialize_uint16_t+0x88>
 800b574:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b578:	42ab      	cmp	r3, r5
 800b57a:	d926      	bls.n	800b5ca <ucdr_serialize_uint16_t+0x7e>
 800b57c:	1b5e      	subs	r6, r3, r5
 800b57e:	60a3      	str	r3, [r4, #8]
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	f1c6 0802 	rsb	r8, r6, #2
 800b586:	4433      	add	r3, r6
 800b588:	6123      	str	r3, [r4, #16]
 800b58a:	4641      	mov	r1, r8
 800b58c:	4620      	mov	r0, r4
 800b58e:	f001 f83d 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b592:	2800      	cmp	r0, #0
 800b594:	d03b      	beq.n	800b60e <ucdr_serialize_uint16_t+0xc2>
 800b596:	7d23      	ldrb	r3, [r4, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d04a      	beq.n	800b632 <ucdr_serialize_uint16_t+0xe6>
 800b59c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5a0:	702b      	strb	r3, [r5, #0]
 800b5a2:	2e00      	cmp	r6, #0
 800b5a4:	d040      	beq.n	800b628 <ucdr_serialize_uint16_t+0xdc>
 800b5a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5aa:	706b      	strb	r3, [r5, #1]
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	68a2      	ldr	r2, [r4, #8]
 800b5b0:	7da0      	ldrb	r0, [r4, #22]
 800b5b2:	3302      	adds	r3, #2
 800b5b4:	1b9e      	subs	r6, r3, r6
 800b5b6:	4442      	add	r2, r8
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	f080 0001 	eor.w	r0, r0, #1
 800b5be:	60a2      	str	r2, [r4, #8]
 800b5c0:	6126      	str	r6, [r4, #16]
 800b5c2:	7563      	strb	r3, [r4, #21]
 800b5c4:	b002      	add	sp, #8
 800b5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ca:	2102      	movs	r1, #2
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 f81d 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b5d2:	b190      	cbz	r0, 800b5fa <ucdr_serialize_uint16_t+0xae>
 800b5d4:	7d23      	ldrb	r3, [r4, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	68a3      	ldr	r3, [r4, #8]
 800b5da:	d014      	beq.n	800b606 <ucdr_serialize_uint16_t+0xba>
 800b5dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5e8:	705a      	strb	r2, [r3, #1]
 800b5ea:	68a2      	ldr	r2, [r4, #8]
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	3202      	adds	r2, #2
 800b5f0:	3302      	adds	r3, #2
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	60a2      	str	r2, [r4, #8]
 800b5f6:	6123      	str	r3, [r4, #16]
 800b5f8:	7561      	strb	r1, [r4, #21]
 800b5fa:	7da0      	ldrb	r0, [r4, #22]
 800b5fc:	f080 0001 	eor.w	r0, r0, #1
 800b600:	b002      	add	sp, #8
 800b602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b606:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	e7ed      	b.n	800b5ea <ucdr_serialize_uint16_t+0x9e>
 800b60e:	68a2      	ldr	r2, [r4, #8]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	7da0      	ldrb	r0, [r4, #22]
 800b614:	7567      	strb	r7, [r4, #21]
 800b616:	1b92      	subs	r2, r2, r6
 800b618:	1b9b      	subs	r3, r3, r6
 800b61a:	f080 0001 	eor.w	r0, r0, #1
 800b61e:	60a2      	str	r2, [r4, #8]
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	b002      	add	sp, #8
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	e7bc      	b.n	800b5ac <ucdr_serialize_uint16_t+0x60>
 800b632:	4628      	mov	r0, r5
 800b634:	f10d 0506 	add.w	r5, sp, #6
 800b638:	4629      	mov	r1, r5
 800b63a:	4632      	mov	r2, r6
 800b63c:	f00b f8b1 	bl	80167a2 <memcpy>
 800b640:	68a0      	ldr	r0, [r4, #8]
 800b642:	4642      	mov	r2, r8
 800b644:	19a9      	adds	r1, r5, r6
 800b646:	f00b f8ac 	bl	80167a2 <memcpy>
 800b64a:	e7af      	b.n	800b5ac <ucdr_serialize_uint16_t+0x60>

0800b64c <ucdr_serialize_endian_uint16_t>:
 800b64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b650:	b083      	sub	sp, #12
 800b652:	460d      	mov	r5, r1
 800b654:	2102      	movs	r1, #2
 800b656:	4604      	mov	r4, r0
 800b658:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b65c:	f001 f82a 	bl	800c6b4 <ucdr_buffer_alignment>
 800b660:	4601      	mov	r1, r0
 800b662:	4620      	mov	r0, r4
 800b664:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b668:	f001 f868 	bl	800c73c <ucdr_advance_buffer>
 800b66c:	2102      	movs	r1, #2
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 ffc0 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b674:	bb70      	cbnz	r0, 800b6d4 <ucdr_serialize_endian_uint16_t+0x88>
 800b676:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b67a:	42be      	cmp	r6, r7
 800b67c:	d925      	bls.n	800b6ca <ucdr_serialize_endian_uint16_t+0x7e>
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	60a6      	str	r6, [r4, #8]
 800b682:	1bf6      	subs	r6, r6, r7
 800b684:	4433      	add	r3, r6
 800b686:	f1c6 0902 	rsb	r9, r6, #2
 800b68a:	6123      	str	r3, [r4, #16]
 800b68c:	4649      	mov	r1, r9
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 ffbc 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b694:	2800      	cmp	r0, #0
 800b696:	d039      	beq.n	800b70c <ucdr_serialize_endian_uint16_t+0xc0>
 800b698:	2d01      	cmp	r5, #1
 800b69a:	d04a      	beq.n	800b732 <ucdr_serialize_endian_uint16_t+0xe6>
 800b69c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b6a0:	703b      	strb	r3, [r7, #0]
 800b6a2:	2e00      	cmp	r6, #0
 800b6a4:	d040      	beq.n	800b728 <ucdr_serialize_endian_uint16_t+0xdc>
 800b6a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b6aa:	707b      	strb	r3, [r7, #1]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	68a2      	ldr	r2, [r4, #8]
 800b6b0:	7da0      	ldrb	r0, [r4, #22]
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	444a      	add	r2, r9
 800b6b6:	1b9b      	subs	r3, r3, r6
 800b6b8:	2102      	movs	r1, #2
 800b6ba:	f080 0001 	eor.w	r0, r0, #1
 800b6be:	60a2      	str	r2, [r4, #8]
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	7561      	strb	r1, [r4, #21]
 800b6c4:	b003      	add	sp, #12
 800b6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ca:	2102      	movs	r1, #2
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 ff9d 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b6d2:	b188      	cbz	r0, 800b6f8 <ucdr_serialize_endian_uint16_t+0xac>
 800b6d4:	2d01      	cmp	r5, #1
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	d014      	beq.n	800b704 <ucdr_serialize_endian_uint16_t+0xb8>
 800b6da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6de:	701a      	strb	r2, [r3, #0]
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6e6:	705a      	strb	r2, [r3, #1]
 800b6e8:	68a2      	ldr	r2, [r4, #8]
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	3202      	adds	r2, #2
 800b6ee:	3302      	adds	r3, #2
 800b6f0:	2102      	movs	r1, #2
 800b6f2:	60a2      	str	r2, [r4, #8]
 800b6f4:	6123      	str	r3, [r4, #16]
 800b6f6:	7561      	strb	r1, [r4, #21]
 800b6f8:	7da0      	ldrb	r0, [r4, #22]
 800b6fa:	f080 0001 	eor.w	r0, r0, #1
 800b6fe:	b003      	add	sp, #12
 800b700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b704:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	e7ed      	b.n	800b6e8 <ucdr_serialize_endian_uint16_t+0x9c>
 800b70c:	68a2      	ldr	r2, [r4, #8]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	7da0      	ldrb	r0, [r4, #22]
 800b712:	f884 8015 	strb.w	r8, [r4, #21]
 800b716:	1b92      	subs	r2, r2, r6
 800b718:	1b9b      	subs	r3, r3, r6
 800b71a:	f080 0001 	eor.w	r0, r0, #1
 800b71e:	60a2      	str	r2, [r4, #8]
 800b720:	6123      	str	r3, [r4, #16]
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b72e:	701a      	strb	r2, [r3, #0]
 800b730:	e7bc      	b.n	800b6ac <ucdr_serialize_endian_uint16_t+0x60>
 800b732:	f10d 0506 	add.w	r5, sp, #6
 800b736:	4629      	mov	r1, r5
 800b738:	4632      	mov	r2, r6
 800b73a:	4638      	mov	r0, r7
 800b73c:	f00b f831 	bl	80167a2 <memcpy>
 800b740:	68a0      	ldr	r0, [r4, #8]
 800b742:	464a      	mov	r2, r9
 800b744:	19a9      	adds	r1, r5, r6
 800b746:	f00b f82c 	bl	80167a2 <memcpy>
 800b74a:	e7af      	b.n	800b6ac <ucdr_serialize_endian_uint16_t+0x60>

0800b74c <ucdr_deserialize_uint16_t>:
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b750:	460d      	mov	r5, r1
 800b752:	2102      	movs	r1, #2
 800b754:	4604      	mov	r4, r0
 800b756:	f000 ffad 	bl	800c6b4 <ucdr_buffer_alignment>
 800b75a:	4601      	mov	r1, r0
 800b75c:	4620      	mov	r0, r4
 800b75e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b762:	f000 ffeb 	bl	800c73c <ucdr_advance_buffer>
 800b766:	2102      	movs	r1, #2
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 ff43 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b76e:	bb60      	cbnz	r0, 800b7ca <ucdr_deserialize_uint16_t+0x7e>
 800b770:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b774:	42be      	cmp	r6, r7
 800b776:	d923      	bls.n	800b7c0 <ucdr_deserialize_uint16_t+0x74>
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	60a6      	str	r6, [r4, #8]
 800b77c:	1bf6      	subs	r6, r6, r7
 800b77e:	4433      	add	r3, r6
 800b780:	f1c6 0902 	rsb	r9, r6, #2
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	4649      	mov	r1, r9
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 ff3f 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d034      	beq.n	800b7fc <ucdr_deserialize_uint16_t+0xb0>
 800b792:	7d23      	ldrb	r3, [r4, #20]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d042      	beq.n	800b81e <ucdr_deserialize_uint16_t+0xd2>
 800b798:	787b      	ldrb	r3, [r7, #1]
 800b79a:	702b      	strb	r3, [r5, #0]
 800b79c:	2e00      	cmp	r6, #0
 800b79e:	d03a      	beq.n	800b816 <ucdr_deserialize_uint16_t+0xca>
 800b7a0:	783b      	ldrb	r3, [r7, #0]
 800b7a2:	706b      	strb	r3, [r5, #1]
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	68a2      	ldr	r2, [r4, #8]
 800b7a8:	7da0      	ldrb	r0, [r4, #22]
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	3302      	adds	r3, #2
 800b7ae:	444a      	add	r2, r9
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	7561      	strb	r1, [r4, #21]
 800b7b4:	60a2      	str	r2, [r4, #8]
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	f080 0001 	eor.w	r0, r0, #1
 800b7bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 ff22 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b7c8:	b180      	cbz	r0, 800b7ec <ucdr_deserialize_uint16_t+0xa0>
 800b7ca:	7d23      	ldrb	r3, [r4, #20]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	d011      	beq.n	800b7f6 <ucdr_deserialize_uint16_t+0xaa>
 800b7d2:	785b      	ldrb	r3, [r3, #1]
 800b7d4:	702b      	strb	r3, [r5, #0]
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	706b      	strb	r3, [r5, #1]
 800b7dc:	68a2      	ldr	r2, [r4, #8]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	3202      	adds	r2, #2
 800b7e2:	3302      	adds	r3, #2
 800b7e4:	2102      	movs	r1, #2
 800b7e6:	60a2      	str	r2, [r4, #8]
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	7561      	strb	r1, [r4, #21]
 800b7ec:	7da0      	ldrb	r0, [r4, #22]
 800b7ee:	f080 0001 	eor.w	r0, r0, #1
 800b7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	802b      	strh	r3, [r5, #0]
 800b7fa:	e7ef      	b.n	800b7dc <ucdr_deserialize_uint16_t+0x90>
 800b7fc:	68a2      	ldr	r2, [r4, #8]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	7da0      	ldrb	r0, [r4, #22]
 800b802:	f884 8015 	strb.w	r8, [r4, #21]
 800b806:	1b92      	subs	r2, r2, r6
 800b808:	1b9b      	subs	r3, r3, r6
 800b80a:	60a2      	str	r2, [r4, #8]
 800b80c:	6123      	str	r3, [r4, #16]
 800b80e:	f080 0001 	eor.w	r0, r0, #1
 800b812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	706b      	strb	r3, [r5, #1]
 800b81c:	e7c2      	b.n	800b7a4 <ucdr_deserialize_uint16_t+0x58>
 800b81e:	4639      	mov	r1, r7
 800b820:	4632      	mov	r2, r6
 800b822:	4628      	mov	r0, r5
 800b824:	f00a ffbd 	bl	80167a2 <memcpy>
 800b828:	68a1      	ldr	r1, [r4, #8]
 800b82a:	464a      	mov	r2, r9
 800b82c:	19a8      	adds	r0, r5, r6
 800b82e:	f00a ffb8 	bl	80167a2 <memcpy>
 800b832:	e7b7      	b.n	800b7a4 <ucdr_deserialize_uint16_t+0x58>

0800b834 <ucdr_deserialize_endian_uint16_t>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	460e      	mov	r6, r1
 800b83a:	2102      	movs	r1, #2
 800b83c:	4604      	mov	r4, r0
 800b83e:	4615      	mov	r5, r2
 800b840:	f000 ff38 	bl	800c6b4 <ucdr_buffer_alignment>
 800b844:	4601      	mov	r1, r0
 800b846:	4620      	mov	r0, r4
 800b848:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b84c:	f000 ff76 	bl	800c73c <ucdr_advance_buffer>
 800b850:	2102      	movs	r1, #2
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fece 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b858:	bb70      	cbnz	r0, 800b8b8 <ucdr_deserialize_endian_uint16_t+0x84>
 800b85a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b85e:	4547      	cmp	r7, r8
 800b860:	d925      	bls.n	800b8ae <ucdr_deserialize_endian_uint16_t+0x7a>
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	60a7      	str	r7, [r4, #8]
 800b866:	eba7 0708 	sub.w	r7, r7, r8
 800b86a:	443b      	add	r3, r7
 800b86c:	f1c7 0a02 	rsb	sl, r7, #2
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	4651      	mov	r1, sl
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fec9 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d034      	beq.n	800b8e8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b87e:	2e01      	cmp	r6, #1
 800b880:	d043      	beq.n	800b90a <ucdr_deserialize_endian_uint16_t+0xd6>
 800b882:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b886:	702b      	strb	r3, [r5, #0]
 800b888:	2f00      	cmp	r7, #0
 800b88a:	d03a      	beq.n	800b902 <ucdr_deserialize_endian_uint16_t+0xce>
 800b88c:	f898 3000 	ldrb.w	r3, [r8]
 800b890:	706b      	strb	r3, [r5, #1]
 800b892:	6923      	ldr	r3, [r4, #16]
 800b894:	68a2      	ldr	r2, [r4, #8]
 800b896:	7da0      	ldrb	r0, [r4, #22]
 800b898:	2102      	movs	r1, #2
 800b89a:	3302      	adds	r3, #2
 800b89c:	4452      	add	r2, sl
 800b89e:	1bdb      	subs	r3, r3, r7
 800b8a0:	7561      	strb	r1, [r4, #21]
 800b8a2:	60a2      	str	r2, [r4, #8]
 800b8a4:	6123      	str	r3, [r4, #16]
 800b8a6:	f080 0001 	eor.w	r0, r0, #1
 800b8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ae:	2102      	movs	r1, #2
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 feab 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b8b6:	b178      	cbz	r0, 800b8d8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b8b8:	2e01      	cmp	r6, #1
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	d011      	beq.n	800b8e2 <ucdr_deserialize_endian_uint16_t+0xae>
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	702b      	strb	r3, [r5, #0]
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	706b      	strb	r3, [r5, #1]
 800b8c8:	68a2      	ldr	r2, [r4, #8]
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	3202      	adds	r2, #2
 800b8ce:	3302      	adds	r3, #2
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	60a2      	str	r2, [r4, #8]
 800b8d4:	6123      	str	r3, [r4, #16]
 800b8d6:	7561      	strb	r1, [r4, #21]
 800b8d8:	7da0      	ldrb	r0, [r4, #22]
 800b8da:	f080 0001 	eor.w	r0, r0, #1
 800b8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	802b      	strh	r3, [r5, #0]
 800b8e6:	e7ef      	b.n	800b8c8 <ucdr_deserialize_endian_uint16_t+0x94>
 800b8e8:	68a2      	ldr	r2, [r4, #8]
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	7da0      	ldrb	r0, [r4, #22]
 800b8ee:	f884 9015 	strb.w	r9, [r4, #21]
 800b8f2:	1bd2      	subs	r2, r2, r7
 800b8f4:	1bdb      	subs	r3, r3, r7
 800b8f6:	60a2      	str	r2, [r4, #8]
 800b8f8:	6123      	str	r3, [r4, #16]
 800b8fa:	f080 0001 	eor.w	r0, r0, #1
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	706b      	strb	r3, [r5, #1]
 800b908:	e7c3      	b.n	800b892 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b90a:	4641      	mov	r1, r8
 800b90c:	463a      	mov	r2, r7
 800b90e:	4628      	mov	r0, r5
 800b910:	f00a ff47 	bl	80167a2 <memcpy>
 800b914:	68a1      	ldr	r1, [r4, #8]
 800b916:	4652      	mov	r2, sl
 800b918:	19e8      	adds	r0, r5, r7
 800b91a:	f00a ff42 	bl	80167a2 <memcpy>
 800b91e:	e7b8      	b.n	800b892 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b920 <ucdr_serialize_uint32_t>:
 800b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	4604      	mov	r4, r0
 800b928:	9101      	str	r1, [sp, #4]
 800b92a:	2104      	movs	r1, #4
 800b92c:	f000 fec2 	bl	800c6b4 <ucdr_buffer_alignment>
 800b930:	4601      	mov	r1, r0
 800b932:	4620      	mov	r0, r4
 800b934:	7d67      	ldrb	r7, [r4, #21]
 800b936:	f000 ff01 	bl	800c73c <ucdr_advance_buffer>
 800b93a:	2104      	movs	r1, #4
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 fe59 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b942:	2800      	cmp	r0, #0
 800b944:	d139      	bne.n	800b9ba <ucdr_serialize_uint32_t+0x9a>
 800b946:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b94a:	42ab      	cmp	r3, r5
 800b94c:	d930      	bls.n	800b9b0 <ucdr_serialize_uint32_t+0x90>
 800b94e:	1b5e      	subs	r6, r3, r5
 800b950:	60a3      	str	r3, [r4, #8]
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	f1c6 0804 	rsb	r8, r6, #4
 800b958:	4433      	add	r3, r6
 800b95a:	6123      	str	r3, [r4, #16]
 800b95c:	4641      	mov	r1, r8
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fe54 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b964:	2800      	cmp	r0, #0
 800b966:	d04c      	beq.n	800ba02 <ucdr_serialize_uint32_t+0xe2>
 800b968:	7d23      	ldrb	r3, [r4, #20]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d063      	beq.n	800ba36 <ucdr_serialize_uint32_t+0x116>
 800b96e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b972:	702b      	strb	r3, [r5, #0]
 800b974:	2e00      	cmp	r6, #0
 800b976:	d051      	beq.n	800ba1c <ucdr_serialize_uint32_t+0xfc>
 800b978:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b97c:	706b      	strb	r3, [r5, #1]
 800b97e:	2e01      	cmp	r6, #1
 800b980:	d050      	beq.n	800ba24 <ucdr_serialize_uint32_t+0x104>
 800b982:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b986:	70ab      	strb	r3, [r5, #2]
 800b988:	2e02      	cmp	r6, #2
 800b98a:	d04f      	beq.n	800ba2c <ucdr_serialize_uint32_t+0x10c>
 800b98c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b990:	70eb      	strb	r3, [r5, #3]
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	68a2      	ldr	r2, [r4, #8]
 800b996:	7da0      	ldrb	r0, [r4, #22]
 800b998:	3304      	adds	r3, #4
 800b99a:	1b9e      	subs	r6, r3, r6
 800b99c:	4442      	add	r2, r8
 800b99e:	2304      	movs	r3, #4
 800b9a0:	f080 0001 	eor.w	r0, r0, #1
 800b9a4:	60a2      	str	r2, [r4, #8]
 800b9a6:	6126      	str	r6, [r4, #16]
 800b9a8:	7563      	strb	r3, [r4, #21]
 800b9aa:	b002      	add	sp, #8
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	2104      	movs	r1, #4
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 fe2a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b9b8:	b1d0      	cbz	r0, 800b9f0 <ucdr_serialize_uint32_t+0xd0>
 800b9ba:	7d23      	ldrb	r3, [r4, #20]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	d01c      	beq.n	800b9fc <ucdr_serialize_uint32_t+0xdc>
 800b9c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9ce:	705a      	strb	r2, [r3, #1]
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9d6:	709a      	strb	r2, [r3, #2]
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9de:	70da      	strb	r2, [r3, #3]
 800b9e0:	68a2      	ldr	r2, [r4, #8]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	3204      	adds	r2, #4
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	60a2      	str	r2, [r4, #8]
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	7561      	strb	r1, [r4, #21]
 800b9f0:	7da0      	ldrb	r0, [r4, #22]
 800b9f2:	f080 0001 	eor.w	r0, r0, #1
 800b9f6:	b002      	add	sp, #8
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	9a01      	ldr	r2, [sp, #4]
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	e7ee      	b.n	800b9e0 <ucdr_serialize_uint32_t+0xc0>
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	7da0      	ldrb	r0, [r4, #22]
 800ba08:	7567      	strb	r7, [r4, #21]
 800ba0a:	1b92      	subs	r2, r2, r6
 800ba0c:	1b9b      	subs	r3, r3, r6
 800ba0e:	f080 0001 	eor.w	r0, r0, #1
 800ba12:	60a2      	str	r2, [r4, #8]
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	b002      	add	sp, #8
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba2a:	701a      	strb	r2, [r3, #0]
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	e7ad      	b.n	800b992 <ucdr_serialize_uint32_t+0x72>
 800ba36:	4628      	mov	r0, r5
 800ba38:	ad01      	add	r5, sp, #4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	f00a feb0 	bl	80167a2 <memcpy>
 800ba42:	68a0      	ldr	r0, [r4, #8]
 800ba44:	4642      	mov	r2, r8
 800ba46:	19a9      	adds	r1, r5, r6
 800ba48:	f00a feab 	bl	80167a2 <memcpy>
 800ba4c:	e7a1      	b.n	800b992 <ucdr_serialize_uint32_t+0x72>
 800ba4e:	bf00      	nop

0800ba50 <ucdr_serialize_endian_uint32_t>:
 800ba50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba54:	b083      	sub	sp, #12
 800ba56:	460d      	mov	r5, r1
 800ba58:	2104      	movs	r1, #4
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	9201      	str	r2, [sp, #4]
 800ba5e:	f000 fe29 	bl	800c6b4 <ucdr_buffer_alignment>
 800ba62:	4601      	mov	r1, r0
 800ba64:	4620      	mov	r0, r4
 800ba66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba6a:	f000 fe67 	bl	800c73c <ucdr_advance_buffer>
 800ba6e:	2104      	movs	r1, #4
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fdbf 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d138      	bne.n	800baec <ucdr_serialize_endian_uint32_t+0x9c>
 800ba7a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba7e:	42b7      	cmp	r7, r6
 800ba80:	d92f      	bls.n	800bae2 <ucdr_serialize_endian_uint32_t+0x92>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	60a7      	str	r7, [r4, #8]
 800ba86:	1bbf      	subs	r7, r7, r6
 800ba88:	443b      	add	r3, r7
 800ba8a:	f1c7 0904 	rsb	r9, r7, #4
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	4649      	mov	r1, r9
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 fdba 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d04a      	beq.n	800bb32 <ucdr_serialize_endian_uint32_t+0xe2>
 800ba9c:	2d01      	cmp	r5, #1
 800ba9e:	d063      	beq.n	800bb68 <ucdr_serialize_endian_uint32_t+0x118>
 800baa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800baa4:	7033      	strb	r3, [r6, #0]
 800baa6:	2f00      	cmp	r7, #0
 800baa8:	d051      	beq.n	800bb4e <ucdr_serialize_endian_uint32_t+0xfe>
 800baaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baae:	7073      	strb	r3, [r6, #1]
 800bab0:	2f01      	cmp	r7, #1
 800bab2:	d050      	beq.n	800bb56 <ucdr_serialize_endian_uint32_t+0x106>
 800bab4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bab8:	70b3      	strb	r3, [r6, #2]
 800baba:	2f02      	cmp	r7, #2
 800babc:	d04f      	beq.n	800bb5e <ucdr_serialize_endian_uint32_t+0x10e>
 800babe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bac2:	70f3      	strb	r3, [r6, #3]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	68a2      	ldr	r2, [r4, #8]
 800bac8:	7da0      	ldrb	r0, [r4, #22]
 800baca:	3304      	adds	r3, #4
 800bacc:	444a      	add	r2, r9
 800bace:	1bdb      	subs	r3, r3, r7
 800bad0:	2104      	movs	r1, #4
 800bad2:	f080 0001 	eor.w	r0, r0, #1
 800bad6:	60a2      	str	r2, [r4, #8]
 800bad8:	6123      	str	r3, [r4, #16]
 800bada:	7561      	strb	r1, [r4, #21]
 800badc:	b003      	add	sp, #12
 800bade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae2:	2104      	movs	r1, #4
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fd91 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800baea:	b1c8      	cbz	r0, 800bb20 <ucdr_serialize_endian_uint32_t+0xd0>
 800baec:	2d01      	cmp	r5, #1
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	d01c      	beq.n	800bb2c <ucdr_serialize_endian_uint32_t+0xdc>
 800baf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bafe:	705a      	strb	r2, [r3, #1]
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb06:	709a      	strb	r2, [r3, #2]
 800bb08:	68a3      	ldr	r3, [r4, #8]
 800bb0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb0e:	70da      	strb	r2, [r3, #3]
 800bb10:	68a2      	ldr	r2, [r4, #8]
 800bb12:	6923      	ldr	r3, [r4, #16]
 800bb14:	3204      	adds	r2, #4
 800bb16:	3304      	adds	r3, #4
 800bb18:	2104      	movs	r1, #4
 800bb1a:	60a2      	str	r2, [r4, #8]
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	7561      	strb	r1, [r4, #21]
 800bb20:	7da0      	ldrb	r0, [r4, #22]
 800bb22:	f080 0001 	eor.w	r0, r0, #1
 800bb26:	b003      	add	sp, #12
 800bb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb2c:	9a01      	ldr	r2, [sp, #4]
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	e7ee      	b.n	800bb10 <ucdr_serialize_endian_uint32_t+0xc0>
 800bb32:	68a2      	ldr	r2, [r4, #8]
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	7da0      	ldrb	r0, [r4, #22]
 800bb38:	f884 8015 	strb.w	r8, [r4, #21]
 800bb3c:	1bd2      	subs	r2, r2, r7
 800bb3e:	1bdb      	subs	r3, r3, r7
 800bb40:	f080 0001 	eor.w	r0, r0, #1
 800bb44:	60a2      	str	r2, [r4, #8]
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	b003      	add	sp, #12
 800bb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	e7ad      	b.n	800bac4 <ucdr_serialize_endian_uint32_t+0x74>
 800bb68:	ad01      	add	r5, sp, #4
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	463a      	mov	r2, r7
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f00a fe17 	bl	80167a2 <memcpy>
 800bb74:	68a0      	ldr	r0, [r4, #8]
 800bb76:	464a      	mov	r2, r9
 800bb78:	19e9      	adds	r1, r5, r7
 800bb7a:	f00a fe12 	bl	80167a2 <memcpy>
 800bb7e:	e7a1      	b.n	800bac4 <ucdr_serialize_endian_uint32_t+0x74>

0800bb80 <ucdr_deserialize_uint32_t>:
 800bb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb84:	460d      	mov	r5, r1
 800bb86:	2104      	movs	r1, #4
 800bb88:	4604      	mov	r4, r0
 800bb8a:	f000 fd93 	bl	800c6b4 <ucdr_buffer_alignment>
 800bb8e:	4601      	mov	r1, r0
 800bb90:	4620      	mov	r0, r4
 800bb92:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb96:	f000 fdd1 	bl	800c73c <ucdr_advance_buffer>
 800bb9a:	2104      	movs	r1, #4
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 fd29 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d138      	bne.n	800bc18 <ucdr_deserialize_uint32_t+0x98>
 800bba6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bbaa:	42b7      	cmp	r7, r6
 800bbac:	d92f      	bls.n	800bc0e <ucdr_deserialize_uint32_t+0x8e>
 800bbae:	6923      	ldr	r3, [r4, #16]
 800bbb0:	60a7      	str	r7, [r4, #8]
 800bbb2:	1bbf      	subs	r7, r7, r6
 800bbb4:	443b      	add	r3, r7
 800bbb6:	f1c7 0904 	rsb	r9, r7, #4
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 fd24 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d046      	beq.n	800bc56 <ucdr_deserialize_uint32_t+0xd6>
 800bbc8:	7d23      	ldrb	r3, [r4, #20]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d05c      	beq.n	800bc88 <ucdr_deserialize_uint32_t+0x108>
 800bbce:	78f3      	ldrb	r3, [r6, #3]
 800bbd0:	702b      	strb	r3, [r5, #0]
 800bbd2:	2f00      	cmp	r7, #0
 800bbd4:	d04c      	beq.n	800bc70 <ucdr_deserialize_uint32_t+0xf0>
 800bbd6:	78b3      	ldrb	r3, [r6, #2]
 800bbd8:	706b      	strb	r3, [r5, #1]
 800bbda:	2f01      	cmp	r7, #1
 800bbdc:	f105 0302 	add.w	r3, r5, #2
 800bbe0:	d04a      	beq.n	800bc78 <ucdr_deserialize_uint32_t+0xf8>
 800bbe2:	7873      	ldrb	r3, [r6, #1]
 800bbe4:	70ab      	strb	r3, [r5, #2]
 800bbe6:	2f02      	cmp	r7, #2
 800bbe8:	f105 0303 	add.w	r3, r5, #3
 800bbec:	d048      	beq.n	800bc80 <ucdr_deserialize_uint32_t+0x100>
 800bbee:	7833      	ldrb	r3, [r6, #0]
 800bbf0:	70eb      	strb	r3, [r5, #3]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	68a2      	ldr	r2, [r4, #8]
 800bbf6:	7da0      	ldrb	r0, [r4, #22]
 800bbf8:	2104      	movs	r1, #4
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	444a      	add	r2, r9
 800bbfe:	1bdb      	subs	r3, r3, r7
 800bc00:	7561      	strb	r1, [r4, #21]
 800bc02:	60a2      	str	r2, [r4, #8]
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	f080 0001 	eor.w	r0, r0, #1
 800bc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0e:	2104      	movs	r1, #4
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 fcfb 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bc16:	b1b0      	cbz	r0, 800bc46 <ucdr_deserialize_uint32_t+0xc6>
 800bc18:	7d23      	ldrb	r3, [r4, #20]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	68a3      	ldr	r3, [r4, #8]
 800bc1e:	d017      	beq.n	800bc50 <ucdr_deserialize_uint32_t+0xd0>
 800bc20:	78db      	ldrb	r3, [r3, #3]
 800bc22:	702b      	strb	r3, [r5, #0]
 800bc24:	68a3      	ldr	r3, [r4, #8]
 800bc26:	789b      	ldrb	r3, [r3, #2]
 800bc28:	706b      	strb	r3, [r5, #1]
 800bc2a:	68a3      	ldr	r3, [r4, #8]
 800bc2c:	785b      	ldrb	r3, [r3, #1]
 800bc2e:	70ab      	strb	r3, [r5, #2]
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	70eb      	strb	r3, [r5, #3]
 800bc36:	68a2      	ldr	r2, [r4, #8]
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	3204      	adds	r2, #4
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	2104      	movs	r1, #4
 800bc40:	60a2      	str	r2, [r4, #8]
 800bc42:	6123      	str	r3, [r4, #16]
 800bc44:	7561      	strb	r1, [r4, #21]
 800bc46:	7da0      	ldrb	r0, [r4, #22]
 800bc48:	f080 0001 	eor.w	r0, r0, #1
 800bc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	602b      	str	r3, [r5, #0]
 800bc54:	e7ef      	b.n	800bc36 <ucdr_deserialize_uint32_t+0xb6>
 800bc56:	68a2      	ldr	r2, [r4, #8]
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	7da0      	ldrb	r0, [r4, #22]
 800bc5c:	f884 8015 	strb.w	r8, [r4, #21]
 800bc60:	1bd2      	subs	r2, r2, r7
 800bc62:	1bdb      	subs	r3, r3, r7
 800bc64:	60a2      	str	r2, [r4, #8]
 800bc66:	6123      	str	r3, [r4, #16]
 800bc68:	f080 0001 	eor.w	r0, r0, #1
 800bc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc70:	68a3      	ldr	r3, [r4, #8]
 800bc72:	789b      	ldrb	r3, [r3, #2]
 800bc74:	706b      	strb	r3, [r5, #1]
 800bc76:	1cab      	adds	r3, r5, #2
 800bc78:	68a2      	ldr	r2, [r4, #8]
 800bc7a:	7852      	ldrb	r2, [r2, #1]
 800bc7c:	f803 2b01 	strb.w	r2, [r3], #1
 800bc80:	68a2      	ldr	r2, [r4, #8]
 800bc82:	7812      	ldrb	r2, [r2, #0]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e7b4      	b.n	800bbf2 <ucdr_deserialize_uint32_t+0x72>
 800bc88:	4631      	mov	r1, r6
 800bc8a:	463a      	mov	r2, r7
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f00a fd88 	bl	80167a2 <memcpy>
 800bc92:	68a1      	ldr	r1, [r4, #8]
 800bc94:	464a      	mov	r2, r9
 800bc96:	19e8      	adds	r0, r5, r7
 800bc98:	f00a fd83 	bl	80167a2 <memcpy>
 800bc9c:	e7a9      	b.n	800bbf2 <ucdr_deserialize_uint32_t+0x72>
 800bc9e:	bf00      	nop

0800bca0 <ucdr_deserialize_endian_uint32_t>:
 800bca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca4:	460e      	mov	r6, r1
 800bca6:	2104      	movs	r1, #4
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4615      	mov	r5, r2
 800bcac:	f000 fd02 	bl	800c6b4 <ucdr_buffer_alignment>
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bcb8:	f000 fd40 	bl	800c73c <ucdr_advance_buffer>
 800bcbc:	2104      	movs	r1, #4
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 fc98 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d13c      	bne.n	800bd42 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bcc8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bccc:	42bb      	cmp	r3, r7
 800bcce:	d933      	bls.n	800bd38 <ucdr_deserialize_endian_uint32_t+0x98>
 800bcd0:	eba3 0807 	sub.w	r8, r3, r7
 800bcd4:	60a3      	str	r3, [r4, #8]
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	f1c8 0a04 	rsb	sl, r8, #4
 800bcdc:	4443      	add	r3, r8
 800bcde:	6123      	str	r3, [r4, #16]
 800bce0:	4651      	mov	r1, sl
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fc92 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d048      	beq.n	800bd7e <ucdr_deserialize_endian_uint32_t+0xde>
 800bcec:	2e01      	cmp	r6, #1
 800bcee:	d061      	beq.n	800bdb4 <ucdr_deserialize_endian_uint32_t+0x114>
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	702b      	strb	r3, [r5, #0]
 800bcf4:	f1b8 0f00 	cmp.w	r8, #0
 800bcf8:	d050      	beq.n	800bd9c <ucdr_deserialize_endian_uint32_t+0xfc>
 800bcfa:	78bb      	ldrb	r3, [r7, #2]
 800bcfc:	706b      	strb	r3, [r5, #1]
 800bcfe:	f1b8 0f01 	cmp.w	r8, #1
 800bd02:	f105 0302 	add.w	r3, r5, #2
 800bd06:	d04d      	beq.n	800bda4 <ucdr_deserialize_endian_uint32_t+0x104>
 800bd08:	787b      	ldrb	r3, [r7, #1]
 800bd0a:	70ab      	strb	r3, [r5, #2]
 800bd0c:	f1b8 0f02 	cmp.w	r8, #2
 800bd10:	f105 0303 	add.w	r3, r5, #3
 800bd14:	d04a      	beq.n	800bdac <ucdr_deserialize_endian_uint32_t+0x10c>
 800bd16:	783b      	ldrb	r3, [r7, #0]
 800bd18:	70eb      	strb	r3, [r5, #3]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	68a2      	ldr	r2, [r4, #8]
 800bd1e:	7da0      	ldrb	r0, [r4, #22]
 800bd20:	2104      	movs	r1, #4
 800bd22:	3304      	adds	r3, #4
 800bd24:	4452      	add	r2, sl
 800bd26:	eba3 0308 	sub.w	r3, r3, r8
 800bd2a:	7561      	strb	r1, [r4, #21]
 800bd2c:	60a2      	str	r2, [r4, #8]
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	f080 0001 	eor.w	r0, r0, #1
 800bd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd38:	2104      	movs	r1, #4
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fc66 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bd40:	b1a8      	cbz	r0, 800bd6e <ucdr_deserialize_endian_uint32_t+0xce>
 800bd42:	2e01      	cmp	r6, #1
 800bd44:	68a3      	ldr	r3, [r4, #8]
 800bd46:	d017      	beq.n	800bd78 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bd48:	78db      	ldrb	r3, [r3, #3]
 800bd4a:	702b      	strb	r3, [r5, #0]
 800bd4c:	68a3      	ldr	r3, [r4, #8]
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	706b      	strb	r3, [r5, #1]
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	785b      	ldrb	r3, [r3, #1]
 800bd56:	70ab      	strb	r3, [r5, #2]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	70eb      	strb	r3, [r5, #3]
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	3204      	adds	r2, #4
 800bd64:	3304      	adds	r3, #4
 800bd66:	2104      	movs	r1, #4
 800bd68:	60a2      	str	r2, [r4, #8]
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	7561      	strb	r1, [r4, #21]
 800bd6e:	7da0      	ldrb	r0, [r4, #22]
 800bd70:	f080 0001 	eor.w	r0, r0, #1
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	e7ef      	b.n	800bd5e <ucdr_deserialize_endian_uint32_t+0xbe>
 800bd7e:	68a2      	ldr	r2, [r4, #8]
 800bd80:	6923      	ldr	r3, [r4, #16]
 800bd82:	7da0      	ldrb	r0, [r4, #22]
 800bd84:	f884 9015 	strb.w	r9, [r4, #21]
 800bd88:	eba2 0208 	sub.w	r2, r2, r8
 800bd8c:	eba3 0308 	sub.w	r3, r3, r8
 800bd90:	60a2      	str	r2, [r4, #8]
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	f080 0001 	eor.w	r0, r0, #1
 800bd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	789b      	ldrb	r3, [r3, #2]
 800bda0:	706b      	strb	r3, [r5, #1]
 800bda2:	1cab      	adds	r3, r5, #2
 800bda4:	68a2      	ldr	r2, [r4, #8]
 800bda6:	7852      	ldrb	r2, [r2, #1]
 800bda8:	f803 2b01 	strb.w	r2, [r3], #1
 800bdac:	68a2      	ldr	r2, [r4, #8]
 800bdae:	7812      	ldrb	r2, [r2, #0]
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	e7b2      	b.n	800bd1a <ucdr_deserialize_endian_uint32_t+0x7a>
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	4642      	mov	r2, r8
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f00a fcf2 	bl	80167a2 <memcpy>
 800bdbe:	68a1      	ldr	r1, [r4, #8]
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	eb05 0008 	add.w	r0, r5, r8
 800bdc6:	f00a fcec 	bl	80167a2 <memcpy>
 800bdca:	e7a6      	b.n	800bd1a <ucdr_deserialize_endian_uint32_t+0x7a>

0800bdcc <ucdr_serialize_uint64_t>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	2108      	movs	r1, #8
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	e9cd 2300 	strd	r2, r3, [sp]
 800bdda:	f000 fc6b 	bl	800c6b4 <ucdr_buffer_alignment>
 800bdde:	4601      	mov	r1, r0
 800bde0:	4620      	mov	r0, r4
 800bde2:	7d67      	ldrb	r7, [r4, #21]
 800bde4:	f000 fcaa 	bl	800c73c <ucdr_advance_buffer>
 800bde8:	2108      	movs	r1, #8
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 fc02 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d14e      	bne.n	800be92 <ucdr_serialize_uint64_t+0xc6>
 800bdf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	d945      	bls.n	800be88 <ucdr_serialize_uint64_t+0xbc>
 800bdfc:	1b5e      	subs	r6, r3, r5
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	f1c6 0808 	rsb	r8, r6, #8
 800be06:	4433      	add	r3, r6
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	4641      	mov	r1, r8
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 fbfd 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800be12:	2800      	cmp	r0, #0
 800be14:	d074      	beq.n	800bf00 <ucdr_serialize_uint64_t+0x134>
 800be16:	7d23      	ldrb	r3, [r4, #20]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	f000 809b 	beq.w	800bf54 <ucdr_serialize_uint64_t+0x188>
 800be1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be22:	702b      	strb	r3, [r5, #0]
 800be24:	2e00      	cmp	r6, #0
 800be26:	d078      	beq.n	800bf1a <ucdr_serialize_uint64_t+0x14e>
 800be28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be2c:	706b      	strb	r3, [r5, #1]
 800be2e:	2e01      	cmp	r6, #1
 800be30:	d077      	beq.n	800bf22 <ucdr_serialize_uint64_t+0x156>
 800be32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be36:	70ab      	strb	r3, [r5, #2]
 800be38:	2e02      	cmp	r6, #2
 800be3a:	d076      	beq.n	800bf2a <ucdr_serialize_uint64_t+0x15e>
 800be3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be40:	70eb      	strb	r3, [r5, #3]
 800be42:	2e03      	cmp	r6, #3
 800be44:	d075      	beq.n	800bf32 <ucdr_serialize_uint64_t+0x166>
 800be46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be4a:	712b      	strb	r3, [r5, #4]
 800be4c:	2e04      	cmp	r6, #4
 800be4e:	d074      	beq.n	800bf3a <ucdr_serialize_uint64_t+0x16e>
 800be50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be54:	716b      	strb	r3, [r5, #5]
 800be56:	2e05      	cmp	r6, #5
 800be58:	d073      	beq.n	800bf42 <ucdr_serialize_uint64_t+0x176>
 800be5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be5e:	71ab      	strb	r3, [r5, #6]
 800be60:	2e06      	cmp	r6, #6
 800be62:	d072      	beq.n	800bf4a <ucdr_serialize_uint64_t+0x17e>
 800be64:	f89d 3000 	ldrb.w	r3, [sp]
 800be68:	71eb      	strb	r3, [r5, #7]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	68a2      	ldr	r2, [r4, #8]
 800be6e:	7da0      	ldrb	r0, [r4, #22]
 800be70:	3308      	adds	r3, #8
 800be72:	1b9e      	subs	r6, r3, r6
 800be74:	4442      	add	r2, r8
 800be76:	2308      	movs	r3, #8
 800be78:	f080 0001 	eor.w	r0, r0, #1
 800be7c:	60a2      	str	r2, [r4, #8]
 800be7e:	6126      	str	r6, [r4, #16]
 800be80:	7563      	strb	r3, [r4, #21]
 800be82:	b002      	add	sp, #8
 800be84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be88:	2108      	movs	r1, #8
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 fbbe 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800be90:	b350      	cbz	r0, 800bee8 <ucdr_serialize_uint64_t+0x11c>
 800be92:	7d23      	ldrb	r3, [r4, #20]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d02d      	beq.n	800bef4 <ucdr_serialize_uint64_t+0x128>
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bea6:	705a      	strb	r2, [r3, #1]
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800beae:	709a      	strb	r2, [r3, #2]
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800beb6:	70da      	strb	r2, [r3, #3]
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bebe:	711a      	strb	r2, [r3, #4]
 800bec0:	68a3      	ldr	r3, [r4, #8]
 800bec2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bec6:	715a      	strb	r2, [r3, #5]
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bece:	719a      	strb	r2, [r3, #6]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	f89d 2000 	ldrb.w	r2, [sp]
 800bed6:	71da      	strb	r2, [r3, #7]
 800bed8:	68a2      	ldr	r2, [r4, #8]
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	3208      	adds	r2, #8
 800bede:	3308      	adds	r3, #8
 800bee0:	2108      	movs	r1, #8
 800bee2:	60a2      	str	r2, [r4, #8]
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	7561      	strb	r1, [r4, #21]
 800bee8:	7da0      	ldrb	r0, [r4, #22]
 800beea:	f080 0001 	eor.w	r0, r0, #1
 800beee:	b002      	add	sp, #8
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	466b      	mov	r3, sp
 800bef6:	cb03      	ldmia	r3!, {r0, r1}
 800bef8:	68a3      	ldr	r3, [r4, #8]
 800befa:	6018      	str	r0, [r3, #0]
 800befc:	6059      	str	r1, [r3, #4]
 800befe:	e7eb      	b.n	800bed8 <ucdr_serialize_uint64_t+0x10c>
 800bf00:	68a2      	ldr	r2, [r4, #8]
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	7da0      	ldrb	r0, [r4, #22]
 800bf06:	7567      	strb	r7, [r4, #21]
 800bf08:	1b92      	subs	r2, r2, r6
 800bf0a:	1b9b      	subs	r3, r3, r6
 800bf0c:	f080 0001 	eor.w	r0, r0, #1
 800bf10:	60a2      	str	r2, [r4, #8]
 800bf12:	6123      	str	r3, [r4, #16]
 800bf14:	b002      	add	sp, #8
 800bf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1a:	68a3      	ldr	r3, [r4, #8]
 800bf1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf28:	701a      	strb	r2, [r3, #0]
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf30:	701a      	strb	r2, [r3, #0]
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	f89d 2000 	ldrb.w	r2, [sp]
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	e78a      	b.n	800be6a <ucdr_serialize_uint64_t+0x9e>
 800bf54:	4628      	mov	r0, r5
 800bf56:	466d      	mov	r5, sp
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	f00a fc21 	bl	80167a2 <memcpy>
 800bf60:	68a0      	ldr	r0, [r4, #8]
 800bf62:	4642      	mov	r2, r8
 800bf64:	19a9      	adds	r1, r5, r6
 800bf66:	f00a fc1c 	bl	80167a2 <memcpy>
 800bf6a:	e77e      	b.n	800be6a <ucdr_serialize_uint64_t+0x9e>

0800bf6c <ucdr_serialize_int16_t>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	460b      	mov	r3, r1
 800bf74:	2102      	movs	r1, #2
 800bf76:	4604      	mov	r4, r0
 800bf78:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bf7c:	f000 fb9a 	bl	800c6b4 <ucdr_buffer_alignment>
 800bf80:	4601      	mov	r1, r0
 800bf82:	4620      	mov	r0, r4
 800bf84:	7d67      	ldrb	r7, [r4, #21]
 800bf86:	f000 fbd9 	bl	800c73c <ucdr_advance_buffer>
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 fb31 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bf92:	bb78      	cbnz	r0, 800bff4 <ucdr_serialize_int16_t+0x88>
 800bf94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	d926      	bls.n	800bfea <ucdr_serialize_int16_t+0x7e>
 800bf9c:	1b5e      	subs	r6, r3, r5
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	f1c6 0802 	rsb	r8, r6, #2
 800bfa6:	4433      	add	r3, r6
 800bfa8:	6123      	str	r3, [r4, #16]
 800bfaa:	4641      	mov	r1, r8
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fb2d 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d03b      	beq.n	800c02e <ucdr_serialize_int16_t+0xc2>
 800bfb6:	7d23      	ldrb	r3, [r4, #20]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d04a      	beq.n	800c052 <ucdr_serialize_int16_t+0xe6>
 800bfbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfc0:	702b      	strb	r3, [r5, #0]
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	d040      	beq.n	800c048 <ucdr_serialize_int16_t+0xdc>
 800bfc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bfca:	706b      	strb	r3, [r5, #1]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	68a2      	ldr	r2, [r4, #8]
 800bfd0:	7da0      	ldrb	r0, [r4, #22]
 800bfd2:	3302      	adds	r3, #2
 800bfd4:	1b9e      	subs	r6, r3, r6
 800bfd6:	4442      	add	r2, r8
 800bfd8:	2302      	movs	r3, #2
 800bfda:	f080 0001 	eor.w	r0, r0, #1
 800bfde:	60a2      	str	r2, [r4, #8]
 800bfe0:	6126      	str	r6, [r4, #16]
 800bfe2:	7563      	strb	r3, [r4, #21]
 800bfe4:	b002      	add	sp, #8
 800bfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfea:	2102      	movs	r1, #2
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 fb0d 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bff2:	b190      	cbz	r0, 800c01a <ucdr_serialize_int16_t+0xae>
 800bff4:	7d23      	ldrb	r3, [r4, #20]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	d014      	beq.n	800c026 <ucdr_serialize_int16_t+0xba>
 800bffc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	68a3      	ldr	r3, [r4, #8]
 800c004:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c008:	705a      	strb	r2, [r3, #1]
 800c00a:	68a2      	ldr	r2, [r4, #8]
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	3202      	adds	r2, #2
 800c010:	3302      	adds	r3, #2
 800c012:	2102      	movs	r1, #2
 800c014:	60a2      	str	r2, [r4, #8]
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	7561      	strb	r1, [r4, #21]
 800c01a:	7da0      	ldrb	r0, [r4, #22]
 800c01c:	f080 0001 	eor.w	r0, r0, #1
 800c020:	b002      	add	sp, #8
 800c022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c026:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c02a:	801a      	strh	r2, [r3, #0]
 800c02c:	e7ed      	b.n	800c00a <ucdr_serialize_int16_t+0x9e>
 800c02e:	68a2      	ldr	r2, [r4, #8]
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	7da0      	ldrb	r0, [r4, #22]
 800c034:	7567      	strb	r7, [r4, #21]
 800c036:	1b92      	subs	r2, r2, r6
 800c038:	1b9b      	subs	r3, r3, r6
 800c03a:	f080 0001 	eor.w	r0, r0, #1
 800c03e:	60a2      	str	r2, [r4, #8]
 800c040:	6123      	str	r3, [r4, #16]
 800c042:	b002      	add	sp, #8
 800c044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c048:	68a3      	ldr	r3, [r4, #8]
 800c04a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c04e:	701a      	strb	r2, [r3, #0]
 800c050:	e7bc      	b.n	800bfcc <ucdr_serialize_int16_t+0x60>
 800c052:	4628      	mov	r0, r5
 800c054:	f10d 0506 	add.w	r5, sp, #6
 800c058:	4629      	mov	r1, r5
 800c05a:	4632      	mov	r2, r6
 800c05c:	f00a fba1 	bl	80167a2 <memcpy>
 800c060:	68a0      	ldr	r0, [r4, #8]
 800c062:	4642      	mov	r2, r8
 800c064:	19a9      	adds	r1, r5, r6
 800c066:	f00a fb9c 	bl	80167a2 <memcpy>
 800c06a:	e7af      	b.n	800bfcc <ucdr_serialize_int16_t+0x60>

0800c06c <ucdr_deserialize_int16_t>:
 800c06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c070:	460d      	mov	r5, r1
 800c072:	2102      	movs	r1, #2
 800c074:	4604      	mov	r4, r0
 800c076:	f000 fb1d 	bl	800c6b4 <ucdr_buffer_alignment>
 800c07a:	4601      	mov	r1, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c082:	f000 fb5b 	bl	800c73c <ucdr_advance_buffer>
 800c086:	2102      	movs	r1, #2
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fab3 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c08e:	bb60      	cbnz	r0, 800c0ea <ucdr_deserialize_int16_t+0x7e>
 800c090:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c094:	42be      	cmp	r6, r7
 800c096:	d923      	bls.n	800c0e0 <ucdr_deserialize_int16_t+0x74>
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	60a6      	str	r6, [r4, #8]
 800c09c:	1bf6      	subs	r6, r6, r7
 800c09e:	4433      	add	r3, r6
 800c0a0:	f1c6 0902 	rsb	r9, r6, #2
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 faaf 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d034      	beq.n	800c11c <ucdr_deserialize_int16_t+0xb0>
 800c0b2:	7d23      	ldrb	r3, [r4, #20]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d042      	beq.n	800c13e <ucdr_deserialize_int16_t+0xd2>
 800c0b8:	787b      	ldrb	r3, [r7, #1]
 800c0ba:	702b      	strb	r3, [r5, #0]
 800c0bc:	2e00      	cmp	r6, #0
 800c0be:	d03a      	beq.n	800c136 <ucdr_deserialize_int16_t+0xca>
 800c0c0:	783b      	ldrb	r3, [r7, #0]
 800c0c2:	706b      	strb	r3, [r5, #1]
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	68a2      	ldr	r2, [r4, #8]
 800c0c8:	7da0      	ldrb	r0, [r4, #22]
 800c0ca:	2102      	movs	r1, #2
 800c0cc:	3302      	adds	r3, #2
 800c0ce:	444a      	add	r2, r9
 800c0d0:	1b9b      	subs	r3, r3, r6
 800c0d2:	7561      	strb	r1, [r4, #21]
 800c0d4:	60a2      	str	r2, [r4, #8]
 800c0d6:	6123      	str	r3, [r4, #16]
 800c0d8:	f080 0001 	eor.w	r0, r0, #1
 800c0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e0:	2102      	movs	r1, #2
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 fa92 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c0e8:	b180      	cbz	r0, 800c10c <ucdr_deserialize_int16_t+0xa0>
 800c0ea:	7d23      	ldrb	r3, [r4, #20]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	68a3      	ldr	r3, [r4, #8]
 800c0f0:	d011      	beq.n	800c116 <ucdr_deserialize_int16_t+0xaa>
 800c0f2:	785b      	ldrb	r3, [r3, #1]
 800c0f4:	702b      	strb	r3, [r5, #0]
 800c0f6:	68a3      	ldr	r3, [r4, #8]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	706b      	strb	r3, [r5, #1]
 800c0fc:	68a2      	ldr	r2, [r4, #8]
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	3202      	adds	r2, #2
 800c102:	3302      	adds	r3, #2
 800c104:	2102      	movs	r1, #2
 800c106:	60a2      	str	r2, [r4, #8]
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	7561      	strb	r1, [r4, #21]
 800c10c:	7da0      	ldrb	r0, [r4, #22]
 800c10e:	f080 0001 	eor.w	r0, r0, #1
 800c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	802b      	strh	r3, [r5, #0]
 800c11a:	e7ef      	b.n	800c0fc <ucdr_deserialize_int16_t+0x90>
 800c11c:	68a2      	ldr	r2, [r4, #8]
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	7da0      	ldrb	r0, [r4, #22]
 800c122:	f884 8015 	strb.w	r8, [r4, #21]
 800c126:	1b92      	subs	r2, r2, r6
 800c128:	1b9b      	subs	r3, r3, r6
 800c12a:	60a2      	str	r2, [r4, #8]
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	f080 0001 	eor.w	r0, r0, #1
 800c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	706b      	strb	r3, [r5, #1]
 800c13c:	e7c2      	b.n	800c0c4 <ucdr_deserialize_int16_t+0x58>
 800c13e:	4639      	mov	r1, r7
 800c140:	4632      	mov	r2, r6
 800c142:	4628      	mov	r0, r5
 800c144:	f00a fb2d 	bl	80167a2 <memcpy>
 800c148:	68a1      	ldr	r1, [r4, #8]
 800c14a:	464a      	mov	r2, r9
 800c14c:	19a8      	adds	r0, r5, r6
 800c14e:	f00a fb28 	bl	80167a2 <memcpy>
 800c152:	e7b7      	b.n	800c0c4 <ucdr_deserialize_int16_t+0x58>

0800c154 <ucdr_serialize_int32_t>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	4604      	mov	r4, r0
 800c15c:	9101      	str	r1, [sp, #4]
 800c15e:	2104      	movs	r1, #4
 800c160:	f000 faa8 	bl	800c6b4 <ucdr_buffer_alignment>
 800c164:	4601      	mov	r1, r0
 800c166:	4620      	mov	r0, r4
 800c168:	7d67      	ldrb	r7, [r4, #21]
 800c16a:	f000 fae7 	bl	800c73c <ucdr_advance_buffer>
 800c16e:	2104      	movs	r1, #4
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fa3f 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c176:	2800      	cmp	r0, #0
 800c178:	d139      	bne.n	800c1ee <ucdr_serialize_int32_t+0x9a>
 800c17a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c17e:	42ab      	cmp	r3, r5
 800c180:	d930      	bls.n	800c1e4 <ucdr_serialize_int32_t+0x90>
 800c182:	1b5e      	subs	r6, r3, r5
 800c184:	60a3      	str	r3, [r4, #8]
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	f1c6 0804 	rsb	r8, r6, #4
 800c18c:	4433      	add	r3, r6
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	4641      	mov	r1, r8
 800c192:	4620      	mov	r0, r4
 800c194:	f000 fa3a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d04c      	beq.n	800c236 <ucdr_serialize_int32_t+0xe2>
 800c19c:	7d23      	ldrb	r3, [r4, #20]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d063      	beq.n	800c26a <ucdr_serialize_int32_t+0x116>
 800c1a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1a6:	702b      	strb	r3, [r5, #0]
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	d051      	beq.n	800c250 <ucdr_serialize_int32_t+0xfc>
 800c1ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1b0:	706b      	strb	r3, [r5, #1]
 800c1b2:	2e01      	cmp	r6, #1
 800c1b4:	d050      	beq.n	800c258 <ucdr_serialize_int32_t+0x104>
 800c1b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c1ba:	70ab      	strb	r3, [r5, #2]
 800c1bc:	2e02      	cmp	r6, #2
 800c1be:	d04f      	beq.n	800c260 <ucdr_serialize_int32_t+0x10c>
 800c1c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1c4:	70eb      	strb	r3, [r5, #3]
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	68a2      	ldr	r2, [r4, #8]
 800c1ca:	7da0      	ldrb	r0, [r4, #22]
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	1b9e      	subs	r6, r3, r6
 800c1d0:	4442      	add	r2, r8
 800c1d2:	2304      	movs	r3, #4
 800c1d4:	f080 0001 	eor.w	r0, r0, #1
 800c1d8:	60a2      	str	r2, [r4, #8]
 800c1da:	6126      	str	r6, [r4, #16]
 800c1dc:	7563      	strb	r3, [r4, #21]
 800c1de:	b002      	add	sp, #8
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	2104      	movs	r1, #4
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 fa10 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c1ec:	b1d0      	cbz	r0, 800c224 <ucdr_serialize_int32_t+0xd0>
 800c1ee:	7d23      	ldrb	r3, [r4, #20]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	d01c      	beq.n	800c230 <ucdr_serialize_int32_t+0xdc>
 800c1f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1fa:	701a      	strb	r2, [r3, #0]
 800c1fc:	68a3      	ldr	r3, [r4, #8]
 800c1fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c202:	705a      	strb	r2, [r3, #1]
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c20a:	709a      	strb	r2, [r3, #2]
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c212:	70da      	strb	r2, [r3, #3]
 800c214:	68a2      	ldr	r2, [r4, #8]
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	3204      	adds	r2, #4
 800c21a:	3304      	adds	r3, #4
 800c21c:	2104      	movs	r1, #4
 800c21e:	60a2      	str	r2, [r4, #8]
 800c220:	6123      	str	r3, [r4, #16]
 800c222:	7561      	strb	r1, [r4, #21]
 800c224:	7da0      	ldrb	r0, [r4, #22]
 800c226:	f080 0001 	eor.w	r0, r0, #1
 800c22a:	b002      	add	sp, #8
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	9a01      	ldr	r2, [sp, #4]
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e7ee      	b.n	800c214 <ucdr_serialize_int32_t+0xc0>
 800c236:	68a2      	ldr	r2, [r4, #8]
 800c238:	6923      	ldr	r3, [r4, #16]
 800c23a:	7da0      	ldrb	r0, [r4, #22]
 800c23c:	7567      	strb	r7, [r4, #21]
 800c23e:	1b92      	subs	r2, r2, r6
 800c240:	1b9b      	subs	r3, r3, r6
 800c242:	f080 0001 	eor.w	r0, r0, #1
 800c246:	60a2      	str	r2, [r4, #8]
 800c248:	6123      	str	r3, [r4, #16]
 800c24a:	b002      	add	sp, #8
 800c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c250:	68a3      	ldr	r3, [r4, #8]
 800c252:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c256:	701a      	strb	r2, [r3, #0]
 800c258:	68a3      	ldr	r3, [r4, #8]
 800c25a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	e7ad      	b.n	800c1c6 <ucdr_serialize_int32_t+0x72>
 800c26a:	4628      	mov	r0, r5
 800c26c:	ad01      	add	r5, sp, #4
 800c26e:	4629      	mov	r1, r5
 800c270:	4632      	mov	r2, r6
 800c272:	f00a fa96 	bl	80167a2 <memcpy>
 800c276:	68a0      	ldr	r0, [r4, #8]
 800c278:	4642      	mov	r2, r8
 800c27a:	19a9      	adds	r1, r5, r6
 800c27c:	f00a fa91 	bl	80167a2 <memcpy>
 800c280:	e7a1      	b.n	800c1c6 <ucdr_serialize_int32_t+0x72>
 800c282:	bf00      	nop

0800c284 <ucdr_deserialize_int32_t>:
 800c284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c288:	460d      	mov	r5, r1
 800c28a:	2104      	movs	r1, #4
 800c28c:	4604      	mov	r4, r0
 800c28e:	f000 fa11 	bl	800c6b4 <ucdr_buffer_alignment>
 800c292:	4601      	mov	r1, r0
 800c294:	4620      	mov	r0, r4
 800c296:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c29a:	f000 fa4f 	bl	800c73c <ucdr_advance_buffer>
 800c29e:	2104      	movs	r1, #4
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 f9a7 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d138      	bne.n	800c31c <ucdr_deserialize_int32_t+0x98>
 800c2aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c2ae:	42b7      	cmp	r7, r6
 800c2b0:	d92f      	bls.n	800c312 <ucdr_deserialize_int32_t+0x8e>
 800c2b2:	6923      	ldr	r3, [r4, #16]
 800c2b4:	60a7      	str	r7, [r4, #8]
 800c2b6:	1bbf      	subs	r7, r7, r6
 800c2b8:	443b      	add	r3, r7
 800c2ba:	f1c7 0904 	rsb	r9, r7, #4
 800c2be:	6123      	str	r3, [r4, #16]
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f9a2 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d046      	beq.n	800c35a <ucdr_deserialize_int32_t+0xd6>
 800c2cc:	7d23      	ldrb	r3, [r4, #20]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d05c      	beq.n	800c38c <ucdr_deserialize_int32_t+0x108>
 800c2d2:	78f3      	ldrb	r3, [r6, #3]
 800c2d4:	702b      	strb	r3, [r5, #0]
 800c2d6:	2f00      	cmp	r7, #0
 800c2d8:	d04c      	beq.n	800c374 <ucdr_deserialize_int32_t+0xf0>
 800c2da:	78b3      	ldrb	r3, [r6, #2]
 800c2dc:	706b      	strb	r3, [r5, #1]
 800c2de:	2f01      	cmp	r7, #1
 800c2e0:	f105 0302 	add.w	r3, r5, #2
 800c2e4:	d04a      	beq.n	800c37c <ucdr_deserialize_int32_t+0xf8>
 800c2e6:	7873      	ldrb	r3, [r6, #1]
 800c2e8:	70ab      	strb	r3, [r5, #2]
 800c2ea:	2f02      	cmp	r7, #2
 800c2ec:	f105 0303 	add.w	r3, r5, #3
 800c2f0:	d048      	beq.n	800c384 <ucdr_deserialize_int32_t+0x100>
 800c2f2:	7833      	ldrb	r3, [r6, #0]
 800c2f4:	70eb      	strb	r3, [r5, #3]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	68a2      	ldr	r2, [r4, #8]
 800c2fa:	7da0      	ldrb	r0, [r4, #22]
 800c2fc:	2104      	movs	r1, #4
 800c2fe:	3304      	adds	r3, #4
 800c300:	444a      	add	r2, r9
 800c302:	1bdb      	subs	r3, r3, r7
 800c304:	7561      	strb	r1, [r4, #21]
 800c306:	60a2      	str	r2, [r4, #8]
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	f080 0001 	eor.w	r0, r0, #1
 800c30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c312:	2104      	movs	r1, #4
 800c314:	4620      	mov	r0, r4
 800c316:	f000 f979 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c31a:	b1b0      	cbz	r0, 800c34a <ucdr_deserialize_int32_t+0xc6>
 800c31c:	7d23      	ldrb	r3, [r4, #20]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	68a3      	ldr	r3, [r4, #8]
 800c322:	d017      	beq.n	800c354 <ucdr_deserialize_int32_t+0xd0>
 800c324:	78db      	ldrb	r3, [r3, #3]
 800c326:	702b      	strb	r3, [r5, #0]
 800c328:	68a3      	ldr	r3, [r4, #8]
 800c32a:	789b      	ldrb	r3, [r3, #2]
 800c32c:	706b      	strb	r3, [r5, #1]
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	785b      	ldrb	r3, [r3, #1]
 800c332:	70ab      	strb	r3, [r5, #2]
 800c334:	68a3      	ldr	r3, [r4, #8]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	70eb      	strb	r3, [r5, #3]
 800c33a:	68a2      	ldr	r2, [r4, #8]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	3204      	adds	r2, #4
 800c340:	3304      	adds	r3, #4
 800c342:	2104      	movs	r1, #4
 800c344:	60a2      	str	r2, [r4, #8]
 800c346:	6123      	str	r3, [r4, #16]
 800c348:	7561      	strb	r1, [r4, #21]
 800c34a:	7da0      	ldrb	r0, [r4, #22]
 800c34c:	f080 0001 	eor.w	r0, r0, #1
 800c350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	e7ef      	b.n	800c33a <ucdr_deserialize_int32_t+0xb6>
 800c35a:	68a2      	ldr	r2, [r4, #8]
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	7da0      	ldrb	r0, [r4, #22]
 800c360:	f884 8015 	strb.w	r8, [r4, #21]
 800c364:	1bd2      	subs	r2, r2, r7
 800c366:	1bdb      	subs	r3, r3, r7
 800c368:	60a2      	str	r2, [r4, #8]
 800c36a:	6123      	str	r3, [r4, #16]
 800c36c:	f080 0001 	eor.w	r0, r0, #1
 800c370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c374:	68a3      	ldr	r3, [r4, #8]
 800c376:	789b      	ldrb	r3, [r3, #2]
 800c378:	706b      	strb	r3, [r5, #1]
 800c37a:	1cab      	adds	r3, r5, #2
 800c37c:	68a2      	ldr	r2, [r4, #8]
 800c37e:	7852      	ldrb	r2, [r2, #1]
 800c380:	f803 2b01 	strb.w	r2, [r3], #1
 800c384:	68a2      	ldr	r2, [r4, #8]
 800c386:	7812      	ldrb	r2, [r2, #0]
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e7b4      	b.n	800c2f6 <ucdr_deserialize_int32_t+0x72>
 800c38c:	4631      	mov	r1, r6
 800c38e:	463a      	mov	r2, r7
 800c390:	4628      	mov	r0, r5
 800c392:	f00a fa06 	bl	80167a2 <memcpy>
 800c396:	68a1      	ldr	r1, [r4, #8]
 800c398:	464a      	mov	r2, r9
 800c39a:	19e8      	adds	r0, r5, r7
 800c39c:	f00a fa01 	bl	80167a2 <memcpy>
 800c3a0:	e7a9      	b.n	800c2f6 <ucdr_deserialize_int32_t+0x72>
 800c3a2:	bf00      	nop

0800c3a4 <ucdr_serialize_float>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	2104      	movs	r1, #4
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c3b2:	f000 f97f 	bl	800c6b4 <ucdr_buffer_alignment>
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	7d67      	ldrb	r7, [r4, #21]
 800c3bc:	f000 f9be 	bl	800c73c <ucdr_advance_buffer>
 800c3c0:	2104      	movs	r1, #4
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 f916 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d139      	bne.n	800c440 <ucdr_serialize_float+0x9c>
 800c3cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	d930      	bls.n	800c436 <ucdr_serialize_float+0x92>
 800c3d4:	1b5e      	subs	r6, r3, r5
 800c3d6:	60a3      	str	r3, [r4, #8]
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	f1c6 0804 	rsb	r8, r6, #4
 800c3de:	4433      	add	r3, r6
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 f911 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d04c      	beq.n	800c488 <ucdr_serialize_float+0xe4>
 800c3ee:	7d23      	ldrb	r3, [r4, #20]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d063      	beq.n	800c4bc <ucdr_serialize_float+0x118>
 800c3f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3f8:	702b      	strb	r3, [r5, #0]
 800c3fa:	2e00      	cmp	r6, #0
 800c3fc:	d051      	beq.n	800c4a2 <ucdr_serialize_float+0xfe>
 800c3fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c402:	706b      	strb	r3, [r5, #1]
 800c404:	2e01      	cmp	r6, #1
 800c406:	d050      	beq.n	800c4aa <ucdr_serialize_float+0x106>
 800c408:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c40c:	70ab      	strb	r3, [r5, #2]
 800c40e:	2e02      	cmp	r6, #2
 800c410:	d04f      	beq.n	800c4b2 <ucdr_serialize_float+0x10e>
 800c412:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c416:	70eb      	strb	r3, [r5, #3]
 800c418:	6923      	ldr	r3, [r4, #16]
 800c41a:	68a2      	ldr	r2, [r4, #8]
 800c41c:	7da0      	ldrb	r0, [r4, #22]
 800c41e:	3304      	adds	r3, #4
 800c420:	1b9e      	subs	r6, r3, r6
 800c422:	4442      	add	r2, r8
 800c424:	2304      	movs	r3, #4
 800c426:	f080 0001 	eor.w	r0, r0, #1
 800c42a:	60a2      	str	r2, [r4, #8]
 800c42c:	6126      	str	r6, [r4, #16]
 800c42e:	7563      	strb	r3, [r4, #21]
 800c430:	b002      	add	sp, #8
 800c432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c436:	2104      	movs	r1, #4
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 f8e7 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c43e:	b1d0      	cbz	r0, 800c476 <ucdr_serialize_float+0xd2>
 800c440:	7d23      	ldrb	r3, [r4, #20]
 800c442:	2b01      	cmp	r3, #1
 800c444:	68a3      	ldr	r3, [r4, #8]
 800c446:	d01c      	beq.n	800c482 <ucdr_serialize_float+0xde>
 800c448:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	68a3      	ldr	r3, [r4, #8]
 800c450:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c454:	705a      	strb	r2, [r3, #1]
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c45c:	709a      	strb	r2, [r3, #2]
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c464:	70da      	strb	r2, [r3, #3]
 800c466:	68a2      	ldr	r2, [r4, #8]
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	3204      	adds	r2, #4
 800c46c:	3304      	adds	r3, #4
 800c46e:	2104      	movs	r1, #4
 800c470:	60a2      	str	r2, [r4, #8]
 800c472:	6123      	str	r3, [r4, #16]
 800c474:	7561      	strb	r1, [r4, #21]
 800c476:	7da0      	ldrb	r0, [r4, #22]
 800c478:	f080 0001 	eor.w	r0, r0, #1
 800c47c:	b002      	add	sp, #8
 800c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c482:	9a01      	ldr	r2, [sp, #4]
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	e7ee      	b.n	800c466 <ucdr_serialize_float+0xc2>
 800c488:	68a2      	ldr	r2, [r4, #8]
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	7da0      	ldrb	r0, [r4, #22]
 800c48e:	7567      	strb	r7, [r4, #21]
 800c490:	1b92      	subs	r2, r2, r6
 800c492:	1b9b      	subs	r3, r3, r6
 800c494:	f080 0001 	eor.w	r0, r0, #1
 800c498:	60a2      	str	r2, [r4, #8]
 800c49a:	6123      	str	r3, [r4, #16]
 800c49c:	b002      	add	sp, #8
 800c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	68a3      	ldr	r3, [r4, #8]
 800c4ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	e7ad      	b.n	800c418 <ucdr_serialize_float+0x74>
 800c4bc:	4628      	mov	r0, r5
 800c4be:	ad01      	add	r5, sp, #4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	f00a f96d 	bl	80167a2 <memcpy>
 800c4c8:	68a0      	ldr	r0, [r4, #8]
 800c4ca:	4642      	mov	r2, r8
 800c4cc:	19a9      	adds	r1, r5, r6
 800c4ce:	f00a f968 	bl	80167a2 <memcpy>
 800c4d2:	e7a1      	b.n	800c418 <ucdr_serialize_float+0x74>

0800c4d4 <ucdr_deserialize_float>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	460d      	mov	r5, r1
 800c4da:	2104      	movs	r1, #4
 800c4dc:	4604      	mov	r4, r0
 800c4de:	f000 f8e9 	bl	800c6b4 <ucdr_buffer_alignment>
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c4ea:	f000 f927 	bl	800c73c <ucdr_advance_buffer>
 800c4ee:	2104      	movs	r1, #4
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 f87f 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d138      	bne.n	800c56c <ucdr_deserialize_float+0x98>
 800c4fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c4fe:	42b7      	cmp	r7, r6
 800c500:	d92f      	bls.n	800c562 <ucdr_deserialize_float+0x8e>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	60a7      	str	r7, [r4, #8]
 800c506:	1bbf      	subs	r7, r7, r6
 800c508:	443b      	add	r3, r7
 800c50a:	f1c7 0904 	rsb	r9, r7, #4
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	4649      	mov	r1, r9
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f87a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d046      	beq.n	800c5aa <ucdr_deserialize_float+0xd6>
 800c51c:	7d23      	ldrb	r3, [r4, #20]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d05c      	beq.n	800c5dc <ucdr_deserialize_float+0x108>
 800c522:	78f3      	ldrb	r3, [r6, #3]
 800c524:	702b      	strb	r3, [r5, #0]
 800c526:	2f00      	cmp	r7, #0
 800c528:	d04c      	beq.n	800c5c4 <ucdr_deserialize_float+0xf0>
 800c52a:	78b3      	ldrb	r3, [r6, #2]
 800c52c:	706b      	strb	r3, [r5, #1]
 800c52e:	2f01      	cmp	r7, #1
 800c530:	f105 0302 	add.w	r3, r5, #2
 800c534:	d04a      	beq.n	800c5cc <ucdr_deserialize_float+0xf8>
 800c536:	7873      	ldrb	r3, [r6, #1]
 800c538:	70ab      	strb	r3, [r5, #2]
 800c53a:	2f02      	cmp	r7, #2
 800c53c:	f105 0303 	add.w	r3, r5, #3
 800c540:	d048      	beq.n	800c5d4 <ucdr_deserialize_float+0x100>
 800c542:	7833      	ldrb	r3, [r6, #0]
 800c544:	70eb      	strb	r3, [r5, #3]
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	68a2      	ldr	r2, [r4, #8]
 800c54a:	7da0      	ldrb	r0, [r4, #22]
 800c54c:	2104      	movs	r1, #4
 800c54e:	3304      	adds	r3, #4
 800c550:	444a      	add	r2, r9
 800c552:	1bdb      	subs	r3, r3, r7
 800c554:	7561      	strb	r1, [r4, #21]
 800c556:	60a2      	str	r2, [r4, #8]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	f080 0001 	eor.w	r0, r0, #1
 800c55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c562:	2104      	movs	r1, #4
 800c564:	4620      	mov	r0, r4
 800c566:	f000 f851 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c56a:	b1b0      	cbz	r0, 800c59a <ucdr_deserialize_float+0xc6>
 800c56c:	7d23      	ldrb	r3, [r4, #20]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	d017      	beq.n	800c5a4 <ucdr_deserialize_float+0xd0>
 800c574:	78db      	ldrb	r3, [r3, #3]
 800c576:	702b      	strb	r3, [r5, #0]
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	789b      	ldrb	r3, [r3, #2]
 800c57c:	706b      	strb	r3, [r5, #1]
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	785b      	ldrb	r3, [r3, #1]
 800c582:	70ab      	strb	r3, [r5, #2]
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	70eb      	strb	r3, [r5, #3]
 800c58a:	68a2      	ldr	r2, [r4, #8]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	3204      	adds	r2, #4
 800c590:	3304      	adds	r3, #4
 800c592:	2104      	movs	r1, #4
 800c594:	60a2      	str	r2, [r4, #8]
 800c596:	6123      	str	r3, [r4, #16]
 800c598:	7561      	strb	r1, [r4, #21]
 800c59a:	7da0      	ldrb	r0, [r4, #22]
 800c59c:	f080 0001 	eor.w	r0, r0, #1
 800c5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	e7ef      	b.n	800c58a <ucdr_deserialize_float+0xb6>
 800c5aa:	68a2      	ldr	r2, [r4, #8]
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	7da0      	ldrb	r0, [r4, #22]
 800c5b0:	f884 8015 	strb.w	r8, [r4, #21]
 800c5b4:	1bd2      	subs	r2, r2, r7
 800c5b6:	1bdb      	subs	r3, r3, r7
 800c5b8:	60a2      	str	r2, [r4, #8]
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	f080 0001 	eor.w	r0, r0, #1
 800c5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	706b      	strb	r3, [r5, #1]
 800c5ca:	1cab      	adds	r3, r5, #2
 800c5cc:	68a2      	ldr	r2, [r4, #8]
 800c5ce:	7852      	ldrb	r2, [r2, #1]
 800c5d0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5d4:	68a2      	ldr	r2, [r4, #8]
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	e7b4      	b.n	800c546 <ucdr_deserialize_float+0x72>
 800c5dc:	4631      	mov	r1, r6
 800c5de:	463a      	mov	r2, r7
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f00a f8de 	bl	80167a2 <memcpy>
 800c5e6:	68a1      	ldr	r1, [r4, #8]
 800c5e8:	464a      	mov	r2, r9
 800c5ea:	19e8      	adds	r0, r5, r7
 800c5ec:	f00a f8d9 	bl	80167a2 <memcpy>
 800c5f0:	e7a9      	b.n	800c546 <ucdr_deserialize_float+0x72>
 800c5f2:	bf00      	nop

0800c5f4 <ucdr_check_buffer_available_for>:
 800c5f4:	7d83      	ldrb	r3, [r0, #22]
 800c5f6:	b93b      	cbnz	r3, 800c608 <ucdr_check_buffer_available_for+0x14>
 800c5f8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c5fc:	4419      	add	r1, r3
 800c5fe:	4288      	cmp	r0, r1
 800c600:	bf34      	ite	cc
 800c602:	2000      	movcc	r0, #0
 800c604:	2001      	movcs	r0, #1
 800c606:	4770      	bx	lr
 800c608:	2000      	movs	r0, #0
 800c60a:	4770      	bx	lr

0800c60c <ucdr_check_final_buffer_behavior>:
 800c60c:	7d83      	ldrb	r3, [r0, #22]
 800c60e:	b943      	cbnz	r3, 800c622 <ucdr_check_final_buffer_behavior+0x16>
 800c610:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c614:	4291      	cmp	r1, r2
 800c616:	b510      	push	{r4, lr}
 800c618:	4604      	mov	r4, r0
 800c61a:	d205      	bcs.n	800c628 <ucdr_check_final_buffer_behavior+0x1c>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4618      	mov	r0, r3
 800c620:	bd10      	pop	{r4, pc}
 800c622:	2300      	movs	r3, #0
 800c624:	4618      	mov	r0, r3
 800c626:	4770      	bx	lr
 800c628:	6982      	ldr	r2, [r0, #24]
 800c62a:	b13a      	cbz	r2, 800c63c <ucdr_check_final_buffer_behavior+0x30>
 800c62c:	69c1      	ldr	r1, [r0, #28]
 800c62e:	4790      	blx	r2
 800c630:	f080 0301 	eor.w	r3, r0, #1
 800c634:	b2db      	uxtb	r3, r3
 800c636:	75a0      	strb	r0, [r4, #22]
 800c638:	4618      	mov	r0, r3
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	2001      	movs	r0, #1
 800c63e:	75a0      	strb	r0, [r4, #22]
 800c640:	e7fa      	b.n	800c638 <ucdr_check_final_buffer_behavior+0x2c>
 800c642:	bf00      	nop

0800c644 <ucdr_set_on_full_buffer_callback>:
 800c644:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop

0800c64c <ucdr_init_buffer_origin_offset_endian>:
 800c64c:	b410      	push	{r4}
 800c64e:	9c01      	ldr	r4, [sp, #4]
 800c650:	6001      	str	r1, [r0, #0]
 800c652:	440a      	add	r2, r1
 800c654:	6042      	str	r2, [r0, #4]
 800c656:	190a      	adds	r2, r1, r4
 800c658:	441c      	add	r4, r3
 800c65a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c65e:	6082      	str	r2, [r0, #8]
 800c660:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c664:	7503      	strb	r3, [r0, #20]
 800c666:	2200      	movs	r2, #0
 800c668:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c670:	7542      	strb	r2, [r0, #21]
 800c672:	7582      	strb	r2, [r0, #22]
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop

0800c678 <ucdr_init_buffer_origin_offset>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	9c04      	ldr	r4, [sp, #16]
 800c67e:	9400      	str	r4, [sp, #0]
 800c680:	2401      	movs	r4, #1
 800c682:	9401      	str	r4, [sp, #4]
 800c684:	f7ff ffe2 	bl	800c64c <ucdr_init_buffer_origin_offset_endian>
 800c688:	b002      	add	sp, #8
 800c68a:	bd10      	pop	{r4, pc}

0800c68c <ucdr_init_buffer_origin>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	2400      	movs	r4, #0
 800c692:	9400      	str	r4, [sp, #0]
 800c694:	f7ff fff0 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800c698:	b002      	add	sp, #8
 800c69a:	bd10      	pop	{r4, pc}

0800c69c <ucdr_init_buffer>:
 800c69c:	2300      	movs	r3, #0
 800c69e:	f7ff bff5 	b.w	800c68c <ucdr_init_buffer_origin>
 800c6a2:	bf00      	nop

0800c6a4 <ucdr_alignment>:
 800c6a4:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6a8:	fb03 0011 	mls	r0, r3, r1, r0
 800c6ac:	1a08      	subs	r0, r1, r0
 800c6ae:	3901      	subs	r1, #1
 800c6b0:	4008      	ands	r0, r1
 800c6b2:	4770      	bx	lr

0800c6b4 <ucdr_buffer_alignment>:
 800c6b4:	7d43      	ldrb	r3, [r0, #21]
 800c6b6:	428b      	cmp	r3, r1
 800c6b8:	d208      	bcs.n	800c6cc <ucdr_buffer_alignment+0x18>
 800c6ba:	6900      	ldr	r0, [r0, #16]
 800c6bc:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6c0:	fb01 0013 	mls	r0, r1, r3, r0
 800c6c4:	1a08      	subs	r0, r1, r0
 800c6c6:	3901      	subs	r1, #1
 800c6c8:	4008      	ands	r0, r1
 800c6ca:	4770      	bx	lr
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	4770      	bx	lr

0800c6d0 <ucdr_align_to>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	f7ff ffed 	bl	800c6b4 <ucdr_buffer_alignment>
 800c6da:	68a3      	ldr	r3, [r4, #8]
 800c6dc:	6921      	ldr	r1, [r4, #16]
 800c6de:	7565      	strb	r5, [r4, #21]
 800c6e0:	181a      	adds	r2, r3, r0
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	4408      	add	r0, r1
 800c6e8:	bf28      	it	cs
 800c6ea:	4613      	movcs	r3, r2
 800c6ec:	6120      	str	r0, [r4, #16]
 800c6ee:	60a3      	str	r3, [r4, #8]
 800c6f0:	bd38      	pop	{r3, r4, r5, pc}
 800c6f2:	bf00      	nop

0800c6f4 <ucdr_buffer_length>:
 800c6f4:	6882      	ldr	r2, [r0, #8]
 800c6f6:	6800      	ldr	r0, [r0, #0]
 800c6f8:	1a10      	subs	r0, r2, r0
 800c6fa:	4770      	bx	lr

0800c6fc <ucdr_buffer_remaining>:
 800c6fc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c700:	1a10      	subs	r0, r2, r0
 800c702:	4770      	bx	lr

0800c704 <ucdr_check_final_buffer_behavior_array>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	7d83      	ldrb	r3, [r0, #22]
 800c708:	b963      	cbnz	r3, 800c724 <ucdr_check_final_buffer_behavior_array+0x20>
 800c70a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c70e:	429a      	cmp	r2, r3
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	d308      	bcc.n	800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c716:	b139      	cbz	r1, 800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c718:	6983      	ldr	r3, [r0, #24]
 800c71a:	b163      	cbz	r3, 800c736 <ucdr_check_final_buffer_behavior_array+0x32>
 800c71c:	69c1      	ldr	r1, [r0, #28]
 800c71e:	4798      	blx	r3
 800c720:	75a0      	strb	r0, [r4, #22]
 800c722:	b108      	cbz	r0, 800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c724:	2000      	movs	r0, #0
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	4620      	mov	r0, r4
 800c72a:	f7ff ffe7 	bl	800c6fc <ucdr_buffer_remaining>
 800c72e:	42a8      	cmp	r0, r5
 800c730:	bf28      	it	cs
 800c732:	4628      	movcs	r0, r5
 800c734:	bd38      	pop	{r3, r4, r5, pc}
 800c736:	2301      	movs	r3, #1
 800c738:	7583      	strb	r3, [r0, #22]
 800c73a:	e7f3      	b.n	800c724 <ucdr_check_final_buffer_behavior_array+0x20>

0800c73c <ucdr_advance_buffer>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	f7ff ff57 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c746:	b178      	cbz	r0, 800c768 <ucdr_advance_buffer+0x2c>
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	68a2      	ldr	r2, [r4, #8]
 800c74c:	442b      	add	r3, r5
 800c74e:	6123      	str	r3, [r4, #16]
 800c750:	2301      	movs	r3, #1
 800c752:	442a      	add	r2, r5
 800c754:	7563      	strb	r3, [r4, #21]
 800c756:	60a2      	str	r2, [r4, #8]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	68a2      	ldr	r2, [r4, #8]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	4402      	add	r2, r0
 800c760:	4403      	add	r3, r0
 800c762:	1a2d      	subs	r5, r5, r0
 800c764:	60a2      	str	r2, [r4, #8]
 800c766:	6123      	str	r3, [r4, #16]
 800c768:	4629      	mov	r1, r5
 800c76a:	2201      	movs	r2, #1
 800c76c:	4620      	mov	r0, r4
 800c76e:	f7ff ffc9 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 800c772:	2800      	cmp	r0, #0
 800c774:	d1f1      	bne.n	800c75a <ucdr_advance_buffer+0x1e>
 800c776:	2301      	movs	r3, #1
 800c778:	7563      	strb	r3, [r4, #21]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}

0800c77c <uxr_buffer_delete_entity>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	2300      	movs	r3, #0
 800c780:	b08e      	sub	sp, #56	@ 0x38
 800c782:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c786:	2303      	movs	r3, #3
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	2204      	movs	r2, #4
 800c78c:	ab06      	add	r3, sp, #24
 800c78e:	4604      	mov	r4, r0
 800c790:	9103      	str	r1, [sp, #12]
 800c792:	f001 f953 	bl	800da3c <uxr_prepare_stream_to_write_submessage>
 800c796:	b918      	cbnz	r0, 800c7a0 <uxr_buffer_delete_entity+0x24>
 800c798:	4604      	mov	r4, r0
 800c79a:	4620      	mov	r0, r4
 800c79c:	b00e      	add	sp, #56	@ 0x38
 800c79e:	bd10      	pop	{r4, pc}
 800c7a0:	9902      	ldr	r1, [sp, #8]
 800c7a2:	aa05      	add	r2, sp, #20
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f001 fa7f 	bl	800dca8 <uxr_init_base_object_request>
 800c7aa:	a905      	add	r1, sp, #20
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	a806      	add	r0, sp, #24
 800c7b0:	f002 fcd0 	bl	800f154 <uxr_serialize_DELETE_Payload>
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	b00e      	add	sp, #56	@ 0x38
 800c7b8:	bd10      	pop	{r4, pc}
 800c7ba:	bf00      	nop

0800c7bc <uxr_common_create_entity>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c7c2:	b08c      	sub	sp, #48	@ 0x30
 800c7c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c7c8:	f1bc 0f01 	cmp.w	ip, #1
 800c7cc:	bf0c      	ite	eq
 800c7ce:	f003 0201 	andeq.w	r2, r3, #1
 800c7d2:	2200      	movne	r2, #0
 800c7d4:	330e      	adds	r3, #14
 800c7d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c7da:	9101      	str	r1, [sp, #4]
 800c7dc:	441a      	add	r2, r3
 800c7de:	2301      	movs	r3, #1
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	9903      	ldr	r1, [sp, #12]
 800c7e4:	ab04      	add	r3, sp, #16
 800c7e6:	b292      	uxth	r2, r2
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	f001 f927 	bl	800da3c <uxr_prepare_stream_to_write_submessage>
 800c7ee:	b918      	cbnz	r0, 800c7f8 <uxr_common_create_entity+0x3c>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	b00c      	add	sp, #48	@ 0x30
 800c7f6:	bd10      	pop	{r4, pc}
 800c7f8:	9902      	ldr	r1, [sp, #8]
 800c7fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f001 fa53 	bl	800dca8 <uxr_init_base_object_request>
 800c802:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c804:	4604      	mov	r4, r0
 800c806:	a804      	add	r0, sp, #16
 800c808:	f002 fc00 	bl	800f00c <uxr_serialize_CREATE_Payload>
 800c80c:	4620      	mov	r0, r4
 800c80e:	b00c      	add	sp, #48	@ 0x30
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop

0800c814 <uxr_buffer_create_participant_bin>:
 800c814:	b570      	push	{r4, r5, r6, lr}
 800c816:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c81a:	ac11      	add	r4, sp, #68	@ 0x44
 800c81c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c820:	2303      	movs	r3, #3
 800c822:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c826:	7223      	strb	r3, [r4, #8]
 800c828:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c82a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c82e:	2201      	movs	r2, #1
 800c830:	2100      	movs	r1, #0
 800c832:	4605      	mov	r5, r0
 800c834:	7122      	strb	r2, [r4, #4]
 800c836:	f88d 1014 	strb.w	r1, [sp, #20]
 800c83a:	b1cb      	cbz	r3, 800c870 <uxr_buffer_create_participant_bin+0x5c>
 800c83c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c840:	9308      	str	r3, [sp, #32]
 800c842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c846:	a915      	add	r1, sp, #84	@ 0x54
 800c848:	a809      	add	r0, sp, #36	@ 0x24
 800c84a:	f7ff ff27 	bl	800c69c <ucdr_init_buffer>
 800c84e:	a905      	add	r1, sp, #20
 800c850:	a809      	add	r0, sp, #36	@ 0x24
 800c852:	f001 ffbd 	bl	800e7d0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c858:	9600      	str	r6, [sp, #0]
 800c85a:	9401      	str	r4, [sp, #4]
 800c85c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c860:	60e3      	str	r3, [r4, #12]
 800c862:	4628      	mov	r0, r5
 800c864:	b29b      	uxth	r3, r3
 800c866:	f7ff ffa9 	bl	800c7bc <uxr_common_create_entity>
 800c86a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	f88d 301c 	strb.w	r3, [sp, #28]
 800c874:	e7e5      	b.n	800c842 <uxr_buffer_create_participant_bin+0x2e>
 800c876:	bf00      	nop

0800c878 <uxr_buffer_create_topic_bin>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c87e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c882:	9105      	str	r1, [sp, #20]
 800c884:	4605      	mov	r5, r0
 800c886:	a997      	add	r1, sp, #604	@ 0x25c
 800c888:	4618      	mov	r0, r3
 800c88a:	2302      	movs	r3, #2
 800c88c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c890:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c894:	f000 f996 	bl	800cbc4 <uxr_object_id_to_raw>
 800c898:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c89a:	9306      	str	r3, [sp, #24]
 800c89c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8ac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c8b0:	a917      	add	r1, sp, #92	@ 0x5c
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8b6:	f88d 301c 	strb.w	r3, [sp, #28]
 800c8ba:	f7ff feef 	bl	800c69c <ucdr_init_buffer>
 800c8be:	a906      	add	r1, sp, #24
 800c8c0:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8c2:	f001 ffa7 	bl	800e814 <uxr_serialize_OBJK_Topic_Binary>
 800c8c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8ca:	ac13      	add	r4, sp, #76	@ 0x4c
 800c8cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8d0:	9600      	str	r6, [sp, #0]
 800c8d2:	9401      	str	r4, [sp, #4]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff ff70 	bl	800c7bc <uxr_common_create_entity>
 800c8dc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
 800c8e2:	bf00      	nop

0800c8e4 <uxr_buffer_create_publisher_bin>:
 800c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	9105      	str	r1, [sp, #20]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	2603      	movs	r6, #3
 800c8f2:	a992      	add	r1, sp, #584	@ 0x248
 800c8f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c8f8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c8fc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c900:	f000 f960 	bl	800cbc4 <uxr_object_id_to_raw>
 800c904:	2300      	movs	r3, #0
 800c906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c90a:	a912      	add	r1, sp, #72	@ 0x48
 800c90c:	a806      	add	r0, sp, #24
 800c90e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c912:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c916:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c91a:	f7ff febf 	bl	800c69c <ucdr_init_buffer>
 800c91e:	a993      	add	r1, sp, #588	@ 0x24c
 800c920:	a806      	add	r0, sp, #24
 800c922:	f002 f82b 	bl	800e97c <uxr_serialize_OBJK_Publisher_Binary>
 800c926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c928:	9311      	str	r3, [sp, #68]	@ 0x44
 800c92a:	ac0e      	add	r4, sp, #56	@ 0x38
 800c92c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c930:	9700      	str	r7, [sp, #0]
 800c932:	9401      	str	r4, [sp, #4]
 800c934:	b29b      	uxth	r3, r3
 800c936:	4628      	mov	r0, r5
 800c938:	f7ff ff40 	bl	800c7bc <uxr_common_create_entity>
 800c93c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c942:	bf00      	nop

0800c944 <uxr_buffer_create_subscriber_bin>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c94a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c94e:	9105      	str	r1, [sp, #20]
 800c950:	4605      	mov	r5, r0
 800c952:	a992      	add	r1, sp, #584	@ 0x248
 800c954:	4618      	mov	r0, r3
 800c956:	2304      	movs	r3, #4
 800c958:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c95c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c960:	f000 f930 	bl	800cbc4 <uxr_object_id_to_raw>
 800c964:	2300      	movs	r3, #0
 800c966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c96a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c96e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c972:	a912      	add	r1, sp, #72	@ 0x48
 800c974:	2303      	movs	r3, #3
 800c976:	a806      	add	r0, sp, #24
 800c978:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c97c:	f7ff fe8e 	bl	800c69c <ucdr_init_buffer>
 800c980:	a993      	add	r1, sp, #588	@ 0x24c
 800c982:	a806      	add	r0, sp, #24
 800c984:	f002 f8aa 	bl	800eadc <uxr_serialize_OBJK_Subscriber_Binary>
 800c988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c98a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c98c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c98e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c992:	9600      	str	r6, [sp, #0]
 800c994:	9401      	str	r4, [sp, #4]
 800c996:	b29b      	uxth	r3, r3
 800c998:	4628      	mov	r0, r5
 800c99a:	f7ff ff0f 	bl	800c7bc <uxr_common_create_entity>
 800c99e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}

0800c9a4 <uxr_buffer_create_datawriter_bin>:
 800c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c9ac:	ac1d      	add	r4, sp, #116	@ 0x74
 800c9ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c9b2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c9b6:	9105      	str	r1, [sp, #20]
 800c9b8:	4606      	mov	r6, r0
 800c9ba:	a9a1      	add	r1, sp, #644	@ 0x284
 800c9bc:	4618      	mov	r0, r3
 800c9be:	2305      	movs	r3, #5
 800c9c0:	7123      	strb	r3, [r4, #4]
 800c9c2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c9c6:	2703      	movs	r7, #3
 800c9c8:	f000 f8fc 	bl	800cbc4 <uxr_object_id_to_raw>
 800c9cc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c9ce:	7227      	strb	r7, [r4, #8]
 800c9d0:	a90e      	add	r1, sp, #56	@ 0x38
 800c9d2:	f000 f8f7 	bl	800cbc4 <uxr_object_id_to_raw>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c9dc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c9e0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c9e4:	3d00      	subs	r5, #0
 800c9e6:	bf18      	it	ne
 800c9e8:	2501      	movne	r5, #1
 800c9ea:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c9ee:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c9f2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c9f6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ca00:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ca04:	bb8a      	cbnz	r2, 800ca6a <uxr_buffer_create_datawriter_bin+0xc6>
 800ca06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ca0a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ca0e:	f04f 0c13 	mov.w	ip, #19
 800ca12:	250b      	movs	r5, #11
 800ca14:	2221      	movs	r2, #33	@ 0x21
 800ca16:	2111      	movs	r1, #17
 800ca18:	2009      	movs	r0, #9
 800ca1a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ca1e:	b923      	cbnz	r3, 800ca2a <uxr_buffer_create_datawriter_bin+0x86>
 800ca20:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ca24:	4672      	mov	r2, lr
 800ca26:	4661      	mov	r1, ip
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d025      	beq.n	800ca7e <uxr_buffer_create_datawriter_bin+0xda>
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d029      	beq.n	800ca8a <uxr_buffer_create_datawriter_bin+0xe6>
 800ca36:	b32b      	cbz	r3, 800ca84 <uxr_buffer_create_datawriter_bin+0xe0>
 800ca38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca3c:	a921      	add	r1, sp, #132	@ 0x84
 800ca3e:	a806      	add	r0, sp, #24
 800ca40:	f7ff fe2c 	bl	800c69c <ucdr_init_buffer>
 800ca44:	a90e      	add	r1, sp, #56	@ 0x38
 800ca46:	a806      	add	r0, sp, #24
 800ca48:	f002 f8fa 	bl	800ec40 <uxr_serialize_OBJK_DataWriter_Binary>
 800ca4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca4e:	f8cd 8000 	str.w	r8, [sp]
 800ca52:	9401      	str	r4, [sp, #4]
 800ca54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ca58:	60e3      	str	r3, [r4, #12]
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	f7ff fead 	bl	800c7bc <uxr_common_create_entity>
 800ca62:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ca66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca6a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ca6e:	f04f 0c12 	mov.w	ip, #18
 800ca72:	250a      	movs	r5, #10
 800ca74:	2220      	movs	r2, #32
 800ca76:	2110      	movs	r1, #16
 800ca78:	2008      	movs	r0, #8
 800ca7a:	2702      	movs	r7, #2
 800ca7c:	e7cd      	b.n	800ca1a <uxr_buffer_create_datawriter_bin+0x76>
 800ca7e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ca82:	e7d9      	b.n	800ca38 <uxr_buffer_create_datawriter_bin+0x94>
 800ca84:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ca88:	e7d6      	b.n	800ca38 <uxr_buffer_create_datawriter_bin+0x94>
 800ca8a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ca8e:	e7d3      	b.n	800ca38 <uxr_buffer_create_datawriter_bin+0x94>

0800ca90 <uxr_buffer_create_datareader_bin>:
 800ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca94:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ca98:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ca9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ca9e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800caa2:	9105      	str	r1, [sp, #20]
 800caa4:	4606      	mov	r6, r0
 800caa6:	a9a3      	add	r1, sp, #652	@ 0x28c
 800caa8:	4618      	mov	r0, r3
 800caaa:	2306      	movs	r3, #6
 800caac:	7123      	strb	r3, [r4, #4]
 800caae:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800cab2:	2703      	movs	r7, #3
 800cab4:	f000 f886 	bl	800cbc4 <uxr_object_id_to_raw>
 800cab8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800caba:	7227      	strb	r7, [r4, #8]
 800cabc:	a90e      	add	r1, sp, #56	@ 0x38
 800cabe:	f000 f881 	bl	800cbc4 <uxr_object_id_to_raw>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800cac8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800cacc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800cad0:	3d00      	subs	r5, #0
 800cad2:	bf18      	it	ne
 800cad4:	2501      	movne	r5, #1
 800cad6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800cada:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cade:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cae2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cae6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800caea:	2301      	movs	r3, #1
 800caec:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800caf0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800caf4:	bb8a      	cbnz	r2, 800cb5a <uxr_buffer_create_datareader_bin+0xca>
 800caf6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cafa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800cafe:	f04f 0c13 	mov.w	ip, #19
 800cb02:	250b      	movs	r5, #11
 800cb04:	2221      	movs	r2, #33	@ 0x21
 800cb06:	2111      	movs	r1, #17
 800cb08:	2009      	movs	r0, #9
 800cb0a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800cb0e:	b923      	cbnz	r3, 800cb1a <uxr_buffer_create_datareader_bin+0x8a>
 800cb10:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800cb14:	4672      	mov	r2, lr
 800cb16:	4661      	mov	r1, ip
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d025      	beq.n	800cb6e <uxr_buffer_create_datareader_bin+0xde>
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d029      	beq.n	800cb7a <uxr_buffer_create_datareader_bin+0xea>
 800cb26:	b32b      	cbz	r3, 800cb74 <uxr_buffer_create_datareader_bin+0xe4>
 800cb28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb2c:	a923      	add	r1, sp, #140	@ 0x8c
 800cb2e:	a806      	add	r0, sp, #24
 800cb30:	f7ff fdb4 	bl	800c69c <ucdr_init_buffer>
 800cb34:	a90e      	add	r1, sp, #56	@ 0x38
 800cb36:	a806      	add	r0, sp, #24
 800cb38:	f002 f846 	bl	800ebc8 <uxr_serialize_OBJK_DataReader_Binary>
 800cb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb3e:	f8cd 8000 	str.w	r8, [sp]
 800cb42:	9401      	str	r4, [sp, #4]
 800cb44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cb48:	60e3      	str	r3, [r4, #12]
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	f7ff fe35 	bl	800c7bc <uxr_common_create_entity>
 800cb52:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cb5e:	f04f 0c12 	mov.w	ip, #18
 800cb62:	250a      	movs	r5, #10
 800cb64:	2220      	movs	r2, #32
 800cb66:	2110      	movs	r1, #16
 800cb68:	2008      	movs	r0, #8
 800cb6a:	2702      	movs	r7, #2
 800cb6c:	e7cd      	b.n	800cb0a <uxr_buffer_create_datareader_bin+0x7a>
 800cb6e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cb72:	e7d9      	b.n	800cb28 <uxr_buffer_create_datareader_bin+0x98>
 800cb74:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cb78:	e7d6      	b.n	800cb28 <uxr_buffer_create_datareader_bin+0x98>
 800cb7a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800cb7e:	e7d3      	b.n	800cb28 <uxr_buffer_create_datareader_bin+0x98>

0800cb80 <uxr_object_id>:
 800cb80:	b082      	sub	sp, #8
 800cb82:	2300      	movs	r3, #0
 800cb84:	f88d 1006 	strb.w	r1, [sp, #6]
 800cb88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb8c:	f360 030f 	bfi	r3, r0, #0, #16
 800cb90:	f362 431f 	bfi	r3, r2, #16, #16
 800cb94:	4618      	mov	r0, r3
 800cb96:	b002      	add	sp, #8
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop

0800cb9c <uxr_object_id_from_raw>:
 800cb9c:	7843      	ldrb	r3, [r0, #1]
 800cb9e:	7801      	ldrb	r1, [r0, #0]
 800cba0:	b082      	sub	sp, #8
 800cba2:	f003 020f 	and.w	r2, r3, #15
 800cba6:	f88d 2006 	strb.w	r2, [sp, #6]
 800cbaa:	091b      	lsrs	r3, r3, #4
 800cbac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbb0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f363 000f 	bfi	r0, r3, #0, #16
 800cbba:	f362 401f 	bfi	r0, r2, #16, #16
 800cbbe:	b002      	add	sp, #8
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop

0800cbc4 <uxr_object_id_to_raw>:
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800cbca:	b082      	sub	sp, #8
 800cbcc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800cbd0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cbd4:	f881 c000 	strb.w	ip, [r1]
 800cbd8:	7048      	strb	r0, [r1, #1]
 800cbda:	b002      	add	sp, #8
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <on_get_fragmentation_info>:
 800cbe0:	b500      	push	{lr}
 800cbe2:	b08b      	sub	sp, #44	@ 0x2c
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	2204      	movs	r2, #4
 800cbe8:	a802      	add	r0, sp, #8
 800cbea:	f7ff fd57 	bl	800c69c <ucdr_init_buffer>
 800cbee:	f10d 0305 	add.w	r3, sp, #5
 800cbf2:	f10d 0206 	add.w	r2, sp, #6
 800cbf6:	a901      	add	r1, sp, #4
 800cbf8:	a802      	add	r0, sp, #8
 800cbfa:	f001 f9d7 	bl	800dfac <uxr_read_submessage_header>
 800cbfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc02:	2b0d      	cmp	r3, #13
 800cc04:	d003      	beq.n	800cc0e <on_get_fragmentation_info+0x2e>
 800cc06:	2000      	movs	r0, #0
 800cc08:	b00b      	add	sp, #44	@ 0x2c
 800cc0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc12:	f013 0f02 	tst.w	r3, #2
 800cc16:	bf14      	ite	ne
 800cc18:	2002      	movne	r0, #2
 800cc1a:	2001      	moveq	r0, #1
 800cc1c:	b00b      	add	sp, #44	@ 0x2c
 800cc1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc22:	bf00      	nop

0800cc24 <read_submessage_get_info>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	2500      	movs	r5, #0
 800cc28:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cc32:	460e      	mov	r6, r1
 800cc34:	a810      	add	r0, sp, #64	@ 0x40
 800cc36:	4629      	mov	r1, r5
 800cc38:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cc3c:	f009 fce8 	bl	8016610 <memset>
 800cc40:	a903      	add	r1, sp, #12
 800cc42:	4630      	mov	r0, r6
 800cc44:	f002 fa72 	bl	800f12c <uxr_deserialize_GET_INFO_Payload>
 800cc48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cc4c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cc50:	4620      	mov	r0, r4
 800cc52:	f001 f821 	bl	800dc98 <uxr_session_header_offset>
 800cc56:	462b      	mov	r3, r5
 800cc58:	9000      	str	r0, [sp, #0]
 800cc5a:	220c      	movs	r2, #12
 800cc5c:	a905      	add	r1, sp, #20
 800cc5e:	a808      	add	r0, sp, #32
 800cc60:	f7ff fd0a 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800cc64:	a910      	add	r1, sp, #64	@ 0x40
 800cc66:	a808      	add	r0, sp, #32
 800cc68:	f002 fad2 	bl	800f210 <uxr_serialize_INFO_Payload>
 800cc6c:	9b08      	ldr	r3, [sp, #32]
 800cc6e:	462a      	mov	r2, r5
 800cc70:	4629      	mov	r1, r5
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 ffba 	bl	800dbec <uxr_stamp_session_header>
 800cc78:	a808      	add	r0, sp, #32
 800cc7a:	f7ff fd3b 	bl	800c6f4 <ucdr_buffer_length>
 800cc7e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cc80:	4602      	mov	r2, r0
 800cc82:	a905      	add	r1, sp, #20
 800cc84:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cc88:	47a0      	blx	r4
 800cc8a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}

0800cc90 <write_submessage_acknack.isra.0>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	b092      	sub	sp, #72	@ 0x48
 800cc94:	4605      	mov	r5, r0
 800cc96:	460e      	mov	r6, r1
 800cc98:	4614      	mov	r4, r2
 800cc9a:	f000 fffd 	bl	800dc98 <uxr_session_header_offset>
 800cc9e:	a905      	add	r1, sp, #20
 800cca0:	9000      	str	r0, [sp, #0]
 800cca2:	2300      	movs	r3, #0
 800cca4:	a80a      	add	r0, sp, #40	@ 0x28
 800cca6:	2211      	movs	r2, #17
 800cca8:	f7ff fce6 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800ccac:	2218      	movs	r2, #24
 800ccae:	fb02 5404 	mla	r4, r2, r4, r5
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	2205      	movs	r2, #5
 800ccb6:	3450      	adds	r4, #80	@ 0x50
 800ccb8:	210a      	movs	r1, #10
 800ccba:	a80a      	add	r0, sp, #40	@ 0x28
 800ccbc:	f001 f95c 	bl	800df78 <uxr_buffer_submessage_header>
 800ccc0:	a903      	add	r1, sp, #12
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f007 faf0 	bl	80142a8 <uxr_compute_acknack>
 800ccc8:	ba40      	rev16	r0, r0
 800ccca:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ccce:	a903      	add	r1, sp, #12
 800ccd0:	a80a      	add	r0, sp, #40	@ 0x28
 800ccd2:	f88d 6010 	strb.w	r6, [sp, #16]
 800ccd6:	f002 fb0b 	bl	800f2f0 <uxr_serialize_ACKNACK_Payload>
 800ccda:	2200      	movs	r2, #0
 800ccdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccde:	4611      	mov	r1, r2
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 ff83 	bl	800dbec <uxr_stamp_session_header>
 800cce6:	a80a      	add	r0, sp, #40	@ 0x28
 800cce8:	f7ff fd04 	bl	800c6f4 <ucdr_buffer_length>
 800ccec:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ccee:	4602      	mov	r2, r0
 800ccf0:	a905      	add	r1, sp, #20
 800ccf2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ccf6:	47a0      	blx	r4
 800ccf8:	b012      	add	sp, #72	@ 0x48
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	0000      	movs	r0, r0
	...

0800cd00 <uxr_init_session>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cd38 <uxr_init_session+0x38>
 800cd06:	2300      	movs	r3, #0
 800cd08:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800cd12:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800cd16:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800cd1a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800cd1e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cd22:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cd26:	2181      	movs	r1, #129	@ 0x81
 800cd28:	f000 fecc 	bl	800dac4 <uxr_init_session_info>
 800cd2c:	f104 0008 	add.w	r0, r4, #8
 800cd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd34:	f001 b83c 	b.w	800ddb0 <uxr_init_stream_storage>
	...

0800cd40 <uxr_set_status_callback>:
 800cd40:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <uxr_set_topic_callback>:
 800cd48:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <uxr_set_request_callback>:
 800cd50:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop

0800cd58 <uxr_set_reply_callback>:
 800cd58:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop

0800cd60 <uxr_create_output_best_effort_stream>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	e9cd 2100 	strd	r2, r1, [sp]
 800cd68:	4604      	mov	r4, r0
 800cd6a:	f000 ff95 	bl	800dc98 <uxr_session_header_offset>
 800cd6e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cd72:	4603      	mov	r3, r0
 800cd74:	f104 0008 	add.w	r0, r4, #8
 800cd78:	b004      	add	sp, #16
 800cd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7e:	f001 b861 	b.w	800de44 <uxr_add_output_best_effort_buffer>
 800cd82:	bf00      	nop

0800cd84 <uxr_create_output_reliable_stream>:
 800cd84:	b510      	push	{r4, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	9303      	str	r3, [sp, #12]
 800cd90:	f000 ff82 	bl	800dc98 <uxr_session_header_offset>
 800cd94:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cd98:	9000      	str	r0, [sp, #0]
 800cd9a:	9905      	ldr	r1, [sp, #20]
 800cd9c:	f104 0008 	add.w	r0, r4, #8
 800cda0:	f001 f864 	bl	800de6c <uxr_add_output_reliable_buffer>
 800cda4:	2200      	movs	r2, #0
 800cda6:	b2c3      	uxtb	r3, r0
 800cda8:	f363 0207 	bfi	r2, r3, #0, #8
 800cdac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cdb0:	f363 220f 	bfi	r2, r3, #8, #8
 800cdb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdb8:	f363 4217 	bfi	r2, r3, #16, #8
 800cdbc:	0e03      	lsrs	r3, r0, #24
 800cdbe:	f363 621f 	bfi	r2, r3, #24, #8
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	b008      	add	sp, #32
 800cdc6:	bd10      	pop	{r4, pc}

0800cdc8 <uxr_create_input_best_effort_stream>:
 800cdc8:	b082      	sub	sp, #8
 800cdca:	3008      	adds	r0, #8
 800cdcc:	b002      	add	sp, #8
 800cdce:	f001 b867 	b.w	800dea0 <uxr_add_input_best_effort_buffer>
 800cdd2:	bf00      	nop

0800cdd4 <uxr_create_input_reliable_stream>:
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	4c0b      	ldr	r4, [pc, #44]	@ (800ce08 <uxr_create_input_reliable_stream+0x34>)
 800cdda:	9400      	str	r4, [sp, #0]
 800cddc:	3008      	adds	r0, #8
 800cdde:	f001 f875 	bl	800decc <uxr_add_input_reliable_buffer>
 800cde2:	2200      	movs	r2, #0
 800cde4:	b2c3      	uxtb	r3, r0
 800cde6:	f363 0207 	bfi	r2, r3, #0, #8
 800cdea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cdee:	f363 220f 	bfi	r2, r3, #8, #8
 800cdf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdf6:	f363 4217 	bfi	r2, r3, #16, #8
 800cdfa:	0e03      	lsrs	r3, r0, #24
 800cdfc:	f363 621f 	bfi	r2, r3, #24, #8
 800ce00:	4610      	mov	r0, r2
 800ce02:	b004      	add	sp, #16
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop
 800ce08:	0800cbe1 	.word	0x0800cbe1

0800ce0c <uxr_epoch_nanos>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	4604      	mov	r4, r0
 800ce10:	f001 f912 	bl	800e038 <uxr_nanos>
 800ce14:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ce18:	1ac0      	subs	r0, r0, r3
 800ce1a:	eb61 0102 	sbc.w	r1, r1, r2
 800ce1e:	bd10      	pop	{r4, pc}

0800ce20 <uxr_flash_output_streams>:
 800ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	7e03      	ldrb	r3, [r0, #24]
 800ce26:	b084      	sub	sp, #16
 800ce28:	4604      	mov	r4, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d035      	beq.n	800ce9a <uxr_flash_output_streams+0x7a>
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	4648      	mov	r0, r9
 800ce34:	f10d 0802 	add.w	r8, sp, #2
 800ce38:	af03      	add	r7, sp, #12
 800ce3a:	ae02      	add	r6, sp, #8
 800ce3c:	e006      	b.n	800ce4c <uxr_flash_output_streams+0x2c>
 800ce3e:	7e23      	ldrb	r3, [r4, #24]
 800ce40:	f109 0901 	add.w	r9, r9, #1
 800ce44:	fa5f f089 	uxtb.w	r0, r9
 800ce48:	4283      	cmp	r3, r0
 800ce4a:	d926      	bls.n	800ce9a <uxr_flash_output_streams+0x7a>
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4611      	mov	r1, r2
 800ce50:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ce54:	f000 ff58 	bl	800dd08 <uxr_stream_id>
 800ce58:	3508      	adds	r5, #8
 800ce5a:	4684      	mov	ip, r0
 800ce5c:	4643      	mov	r3, r8
 800ce5e:	463a      	mov	r2, r7
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	f8cd c004 	str.w	ip, [sp, #4]
 800ce68:	f007 faa4 	bl	80143b4 <uxr_prepare_best_effort_buffer_to_send>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d0e6      	beq.n	800ce3e <uxr_flash_output_streams+0x1e>
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ce76:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 feb6 	bl	800dbec <uxr_stamp_session_header>
 800ce80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ce82:	9a03      	ldr	r2, [sp, #12]
 800ce84:	685d      	ldr	r5, [r3, #4]
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	9902      	ldr	r1, [sp, #8]
 800ce8a:	47a8      	blx	r5
 800ce8c:	f109 0901 	add.w	r9, r9, #1
 800ce90:	7e23      	ldrb	r3, [r4, #24]
 800ce92:	fa5f f089 	uxtb.w	r0, r9
 800ce96:	4283      	cmp	r3, r0
 800ce98:	d8d8      	bhi.n	800ce4c <uxr_flash_output_streams+0x2c>
 800ce9a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ce9e:	b38b      	cbz	r3, 800cf04 <uxr_flash_output_streams+0xe4>
 800cea0:	f04f 0900 	mov.w	r9, #0
 800cea4:	f10d 0802 	add.w	r8, sp, #2
 800cea8:	af03      	add	r7, sp, #12
 800ceaa:	ae02      	add	r6, sp, #8
 800ceac:	4648      	mov	r0, r9
 800ceae:	2201      	movs	r2, #1
 800ceb0:	2102      	movs	r1, #2
 800ceb2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ceb6:	f000 ff27 	bl	800dd08 <uxr_stream_id>
 800ceba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cebe:	3520      	adds	r5, #32
 800cec0:	9001      	str	r0, [sp, #4]
 800cec2:	e00d      	b.n	800cee0 <uxr_flash_output_streams+0xc0>
 800cec4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cec8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	f000 fe8d 	bl	800dbec <uxr_stamp_session_header>
 800ced2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ced4:	9a03      	ldr	r2, [sp, #12]
 800ced6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ceda:	9902      	ldr	r1, [sp, #8]
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	47d0      	blx	sl
 800cee0:	4643      	mov	r3, r8
 800cee2:	463a      	mov	r2, r7
 800cee4:	4631      	mov	r1, r6
 800cee6:	4628      	mov	r0, r5
 800cee8:	f007 fc82 	bl	80147f0 <uxr_prepare_next_reliable_buffer_to_send>
 800ceec:	4603      	mov	r3, r0
 800ceee:	4620      	mov	r0, r4
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1e7      	bne.n	800cec4 <uxr_flash_output_streams+0xa4>
 800cef4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cef8:	f109 0901 	add.w	r9, r9, #1
 800cefc:	fa5f f089 	uxtb.w	r0, r9
 800cf00:	4283      	cmp	r3, r0
 800cf02:	d8d4      	bhi.n	800ceae <uxr_flash_output_streams+0x8e>
 800cf04:	b004      	add	sp, #16
 800cf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0a:	bf00      	nop

0800cf0c <read_submessage_info>:
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	460d      	mov	r5, r1
 800cf12:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cf16:	4669      	mov	r1, sp
 800cf18:	4607      	mov	r7, r0
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f002 f814 	bl	800ef48 <uxr_deserialize_BaseObjectReply>
 800cf20:	a902      	add	r1, sp, #8
 800cf22:	4604      	mov	r4, r0
 800cf24:	4628      	mov	r0, r5
 800cf26:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cf2a:	f7fe facb 	bl	800b4c4 <ucdr_deserialize_bool>
 800cf2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf32:	4004      	ands	r4, r0
 800cf34:	b2e4      	uxtb	r4, r4
 800cf36:	b95b      	cbnz	r3, 800cf50 <read_submessage_info+0x44>
 800cf38:	a987      	add	r1, sp, #540	@ 0x21c
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f7fe fac2 	bl	800b4c4 <ucdr_deserialize_bool>
 800cf40:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cf44:	4606      	mov	r6, r0
 800cf46:	b94b      	cbnz	r3, 800cf5c <read_submessage_info+0x50>
 800cf48:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf50:	a903      	add	r1, sp, #12
 800cf52:	4628      	mov	r0, r5
 800cf54:	f001 fea0 	bl	800ec98 <uxr_deserialize_ObjectVariant>
 800cf58:	4004      	ands	r4, r0
 800cf5a:	e7ed      	b.n	800cf38 <read_submessage_info+0x2c>
 800cf5c:	a988      	add	r1, sp, #544	@ 0x220
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f7fe fade 	bl	800b520 <ucdr_deserialize_uint8_t>
 800cf64:	4234      	tst	r4, r6
 800cf66:	d0ef      	beq.n	800cf48 <read_submessage_info+0x3c>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0ed      	beq.n	800cf48 <read_submessage_info+0x3c>
 800cf6c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cf70:	2b0d      	cmp	r3, #13
 800cf72:	d1e9      	bne.n	800cf48 <read_submessage_info+0x3c>
 800cf74:	a98a      	add	r1, sp, #552	@ 0x228
 800cf76:	4628      	mov	r0, r5
 800cf78:	f7ff f878 	bl	800c06c <ucdr_deserialize_int16_t>
 800cf7c:	b140      	cbz	r0, 800cf90 <read_submessage_info+0x84>
 800cf7e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dd07      	ble.n	800cf96 <read_submessage_info+0x8a>
 800cf86:	f1b8 0f00 	cmp.w	r8, #0
 800cf8a:	bf14      	ite	ne
 800cf8c:	2001      	movne	r0, #1
 800cf8e:	2002      	moveq	r0, #2
 800cf90:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cf94:	e7d8      	b.n	800cf48 <read_submessage_info+0x3c>
 800cf96:	2000      	movs	r0, #0
 800cf98:	e7fa      	b.n	800cf90 <read_submessage_info+0x84>
 800cf9a:	bf00      	nop

0800cf9c <read_submessage_list>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	b097      	sub	sp, #92	@ 0x5c
 800cfa2:	4ec1      	ldr	r6, [pc, #772]	@ (800d2a8 <read_submessage_list+0x30c>)
 800cfa4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	f04f 0801 	mov.w	r8, #1
 800cfae:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cfb2:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfb4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f000 fff7 	bl	800dfac <uxr_read_submessage_header>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	f000 813e 	beq.w	800d240 <read_submessage_list+0x2a4>
 800cfc4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800cfc8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800cfcc:	3b02      	subs	r3, #2
 800cfce:	2b0d      	cmp	r3, #13
 800cfd0:	d8ed      	bhi.n	800cfae <read_submessage_list+0x12>
 800cfd2:	a101      	add	r1, pc, #4	@ (adr r1, 800cfd8 <read_submessage_list+0x3c>)
 800cfd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfd8:	0800d237 	.word	0x0800d237
 800cfdc:	0800cfaf 	.word	0x0800cfaf
 800cfe0:	0800d227 	.word	0x0800d227
 800cfe4:	0800d1c5 	.word	0x0800d1c5
 800cfe8:	0800d1bb 	.word	0x0800d1bb
 800cfec:	0800cfaf 	.word	0x0800cfaf
 800cff0:	0800cfaf 	.word	0x0800cfaf
 800cff4:	0800d11b 	.word	0x0800d11b
 800cff8:	0800d0ab 	.word	0x0800d0ab
 800cffc:	0800d06b 	.word	0x0800d06b
 800d000:	0800cfaf 	.word	0x0800cfaf
 800d004:	0800cfaf 	.word	0x0800cfaf
 800d008:	0800cfaf 	.word	0x0800cfaf
 800d00c:	0800d011 	.word	0x0800d011
 800d010:	a910      	add	r1, sp, #64	@ 0x40
 800d012:	4628      	mov	r0, r5
 800d014:	f002 f9bc 	bl	800f390 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d018:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d01c:	f1b9 0f00 	cmp.w	r9, #0
 800d020:	f000 8116 	beq.w	800d250 <read_submessage_list+0x2b4>
 800d024:	f001 f808 	bl	800e038 <uxr_nanos>
 800d028:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d030:	2100      	movs	r1, #0
 800d032:	468c      	mov	ip, r1
 800d034:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d038:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d03c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d03e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d040:	468c      	mov	ip, r1
 800d042:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d046:	46e2      	mov	sl, ip
 800d048:	46bc      	mov	ip, r7
 800d04a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d04e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d052:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d056:	e9cd 7100 	strd	r7, r1, [sp]
 800d05a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d05e:	9106      	str	r1, [sp, #24]
 800d060:	4620      	mov	r0, r4
 800d062:	47c8      	blx	r9
 800d064:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d068:	e7a1      	b.n	800cfae <read_submessage_list+0x12>
 800d06a:	a910      	add	r1, sp, #64	@ 0x40
 800d06c:	4628      	mov	r0, r5
 800d06e:	f002 f97d 	bl	800f36c <uxr_deserialize_HEARTBEAT_Payload>
 800d072:	2100      	movs	r1, #0
 800d074:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d078:	f000 fe70 	bl	800dd5c <uxr_stream_id_from_raw>
 800d07c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d080:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d082:	4639      	mov	r1, r7
 800d084:	f104 0008 	add.w	r0, r4, #8
 800d088:	f000 ff56 	bl	800df38 <uxr_get_input_reliable_stream>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d08e      	beq.n	800cfae <read_submessage_list+0x12>
 800d090:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d094:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d098:	f007 f8fa 	bl	8014290 <uxr_process_heartbeat>
 800d09c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d0a0:	463a      	mov	r2, r7
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff fdf4 	bl	800cc90 <write_submessage_acknack.isra.0>
 800d0a8:	e781      	b.n	800cfae <read_submessage_list+0x12>
 800d0aa:	a910      	add	r1, sp, #64	@ 0x40
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f002 f935 	bl	800f31c <uxr_deserialize_ACKNACK_Payload>
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d0b8:	f000 fe50 	bl	800dd5c <uxr_stream_id_from_raw>
 800d0bc:	900d      	str	r0, [sp, #52]	@ 0x34
 800d0be:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d0c2:	f104 0008 	add.w	r0, r4, #8
 800d0c6:	f000 ff23 	bl	800df10 <uxr_get_output_reliable_stream>
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	f43f af6e 	beq.w	800cfae <read_submessage_list+0x12>
 800d0d2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d0d6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d0da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d0de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d0e2:	b289      	uxth	r1, r1
 800d0e4:	f007 fc2e 	bl	8014944 <uxr_process_acknack>
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f007 fbeb 	bl	80148c4 <uxr_begin_output_nack_buffer_it>
 800d0ee:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d0f2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d0f6:	e006      	b.n	800d106 <read_submessage_list+0x16a>
 800d0f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d0fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0fc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	47c8      	blx	r9
 800d106:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d10a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d10c:	4651      	mov	r1, sl
 800d10e:	4638      	mov	r0, r7
 800d110:	f007 fbda 	bl	80148c8 <uxr_next_reliable_nack_buffer_to_send>
 800d114:	2800      	cmp	r0, #0
 800d116:	d1ef      	bne.n	800d0f8 <read_submessage_list+0x15c>
 800d118:	e749      	b.n	800cfae <read_submessage_list+0x12>
 800d11a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d11e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d122:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d126:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d12a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d12e:	4651      	mov	r1, sl
 800d130:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d134:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d138:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d13c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d140:	4628      	mov	r0, r5
 800d142:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d146:	f001 fe49 	bl	800eddc <uxr_deserialize_BaseObjectRequest>
 800d14a:	4650      	mov	r0, sl
 800d14c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d14e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d152:	f000 fdc7 	bl	800dce4 <uxr_parse_base_object_request>
 800d156:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d15a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d15c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d160:	9110      	str	r1, [sp, #64]	@ 0x40
 800d162:	3f04      	subs	r7, #4
 800d164:	f009 090e 	and.w	r9, r9, #14
 800d168:	b2bf      	uxth	r7, r7
 800d16a:	f1bb 0f00 	cmp.w	fp, #0
 800d16e:	d006      	beq.n	800d17e <read_submessage_list+0x1e2>
 800d170:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	4652      	mov	r2, sl
 800d178:	2300      	movs	r3, #0
 800d17a:	4620      	mov	r0, r4
 800d17c:	47d8      	blx	fp
 800d17e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d180:	b16a      	cbz	r2, 800d19e <read_submessage_list+0x202>
 800d182:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d184:	2100      	movs	r1, #0
 800d186:	3802      	subs	r0, #2
 800d188:	e002      	b.n	800d190 <read_submessage_list+0x1f4>
 800d18a:	3101      	adds	r1, #1
 800d18c:	4291      	cmp	r1, r2
 800d18e:	d006      	beq.n	800d19e <read_submessage_list+0x202>
 800d190:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d194:	4553      	cmp	r3, sl
 800d196:	d1f8      	bne.n	800d18a <read_submessage_list+0x1ee>
 800d198:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d19a:	2200      	movs	r2, #0
 800d19c:	545a      	strb	r2, [r3, r1]
 800d19e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d1a2:	9102      	str	r1, [sp, #8]
 800d1a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1a6:	9101      	str	r1, [sp, #4]
 800d1a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d1aa:	9100      	str	r1, [sp, #0]
 800d1ac:	464b      	mov	r3, r9
 800d1ae:	463a      	mov	r2, r7
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f007 fc84 	bl	8014ac0 <read_submessage_format>
 800d1b8:	e6f9      	b.n	800cfae <read_submessage_list+0x12>
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f7ff fea5 	bl	800cf0c <read_submessage_info>
 800d1c2:	e6f4      	b.n	800cfae <read_submessage_list+0x12>
 800d1c4:	2a00      	cmp	r2, #0
 800d1c6:	d03e      	beq.n	800d246 <read_submessage_list+0x2aa>
 800d1c8:	a910      	add	r1, sp, #64	@ 0x40
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f002 f802 	bl	800f1d4 <uxr_deserialize_STATUS_Payload>
 800d1d0:	a90e      	add	r1, sp, #56	@ 0x38
 800d1d2:	aa0d      	add	r2, sp, #52	@ 0x34
 800d1d4:	a810      	add	r0, sp, #64	@ 0x40
 800d1d6:	f000 fd85 	bl	800dce4 <uxr_parse_base_object_request>
 800d1da:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d1de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1e0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d1e4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d1e8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d1ea:	f1ba 0f00 	cmp.w	sl, #0
 800d1ee:	d006      	beq.n	800d1fe <read_submessage_list+0x262>
 800d1f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	463a      	mov	r2, r7
 800d1f8:	464b      	mov	r3, r9
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	47d0      	blx	sl
 800d1fe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d200:	2a00      	cmp	r2, #0
 800d202:	f43f aed4 	beq.w	800cfae <read_submessage_list+0x12>
 800d206:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d208:	2100      	movs	r1, #0
 800d20a:	3802      	subs	r0, #2
 800d20c:	e003      	b.n	800d216 <read_submessage_list+0x27a>
 800d20e:	3101      	adds	r1, #1
 800d210:	4291      	cmp	r1, r2
 800d212:	f43f aecc 	beq.w	800cfae <read_submessage_list+0x12>
 800d216:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d21a:	42bb      	cmp	r3, r7
 800d21c:	d1f7      	bne.n	800d20e <read_submessage_list+0x272>
 800d21e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d220:	f803 9001 	strb.w	r9, [r3, r1]
 800d224:	e6c3      	b.n	800cfae <read_submessage_list+0x12>
 800d226:	2a00      	cmp	r2, #0
 800d228:	f47f aec1 	bne.w	800cfae <read_submessage_list+0x12>
 800d22c:	4629      	mov	r1, r5
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 fc9e 	bl	800db70 <uxr_read_create_session_status>
 800d234:	e6bb      	b.n	800cfae <read_submessage_list+0x12>
 800d236:	4629      	mov	r1, r5
 800d238:	4620      	mov	r0, r4
 800d23a:	f7ff fcf3 	bl	800cc24 <read_submessage_get_info>
 800d23e:	e6b6      	b.n	800cfae <read_submessage_list+0x12>
 800d240:	b017      	add	sp, #92	@ 0x5c
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d246:	4629      	mov	r1, r5
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 fc9d 	bl	800db88 <uxr_read_delete_session_status>
 800d24e:	e6ae      	b.n	800cfae <read_submessage_list+0x12>
 800d250:	f000 fef2 	bl	800e038 <uxr_nanos>
 800d254:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d256:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d258:	464f      	mov	r7, r9
 800d25a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d25e:	1812      	adds	r2, r2, r0
 800d260:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d262:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d264:	eb47 0101 	adc.w	r1, r7, r1
 800d268:	464f      	mov	r7, r9
 800d26a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	4684      	mov	ip, r0
 800d272:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d276:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d27a:	eb1c 0c00 	adds.w	ip, ip, r0
 800d27e:	464f      	mov	r7, r9
 800d280:	eb43 0307 	adc.w	r3, r3, r7
 800d284:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d288:	eb61 0303 	sbc.w	r3, r1, r3
 800d28c:	0fda      	lsrs	r2, r3, #31
 800d28e:	eb12 020c 	adds.w	r2, r2, ip
 800d292:	f143 0300 	adc.w	r3, r3, #0
 800d296:	0852      	lsrs	r2, r2, #1
 800d298:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d29c:	105b      	asrs	r3, r3, #1
 800d29e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d2a2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d2a6:	e6dd      	b.n	800d064 <read_submessage_list+0xc8>
 800d2a8:	3b9aca00 	.word	0x3b9aca00

0800d2ac <listen_message_reliably>:
 800d2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	1e0b      	subs	r3, r1, #0
 800d2b2:	b09d      	sub	sp, #116	@ 0x74
 800d2b4:	bfb8      	it	lt
 800d2b6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d2ba:	4680      	mov	r8, r0
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	f000 fea1 	bl	800e004 <uxr_millis>
 800d2c2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d2c6:	4681      	mov	r9, r0
 800d2c8:	2a00      	cmp	r2, #0
 800d2ca:	f000 80a1 	beq.w	800d410 <listen_message_reliably+0x164>
 800d2ce:	2600      	movs	r6, #0
 800d2d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d2d4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	4630      	mov	r0, r6
 800d2dc:	460f      	mov	r7, r1
 800d2de:	e00f      	b.n	800d300 <listen_message_reliably+0x54>
 800d2e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d2e4:	9903      	ldr	r1, [sp, #12]
 800d2e6:	455a      	cmp	r2, fp
 800d2e8:	f106 0601 	add.w	r6, r6, #1
 800d2ec:	eb73 0101 	sbcs.w	r1, r3, r1
 800d2f0:	b2f0      	uxtb	r0, r6
 800d2f2:	da01      	bge.n	800d2f8 <listen_message_reliably+0x4c>
 800d2f4:	4693      	mov	fp, r2
 800d2f6:	9303      	str	r3, [sp, #12]
 800d2f8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d2fc:	4283      	cmp	r3, r0
 800d2fe:	d960      	bls.n	800d3c2 <listen_message_reliably+0x116>
 800d300:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d304:	2102      	movs	r1, #2
 800d306:	2201      	movs	r2, #1
 800d308:	f000 fcfe 	bl	800dd08 <uxr_stream_id>
 800d30c:	00e4      	lsls	r4, r4, #3
 800d30e:	f104 0520 	add.w	r5, r4, #32
 800d312:	4445      	add	r5, r8
 800d314:	4601      	mov	r1, r0
 800d316:	463b      	mov	r3, r7
 800d318:	464a      	mov	r2, r9
 800d31a:	4628      	mov	r0, r5
 800d31c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d31e:	f007 faa7 	bl	8014870 <uxr_update_output_stream_heartbeat_timestamp>
 800d322:	eb08 0304 	add.w	r3, r8, r4
 800d326:	2800      	cmp	r0, #0
 800d328:	d0da      	beq.n	800d2e0 <listen_message_reliably+0x34>
 800d32a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d32e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	4640      	mov	r0, r8
 800d336:	f000 fcaf 	bl	800dc98 <uxr_session_header_offset>
 800d33a:	3501      	adds	r5, #1
 800d33c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d340:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d344:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d348:	2300      	movs	r3, #0
 800d34a:	2211      	movs	r2, #17
 800d34c:	9000      	str	r0, [sp, #0]
 800d34e:	a90c      	add	r1, sp, #48	@ 0x30
 800d350:	4650      	mov	r0, sl
 800d352:	f7ff f991 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800d356:	2300      	movs	r3, #0
 800d358:	2205      	movs	r2, #5
 800d35a:	210b      	movs	r1, #11
 800d35c:	4650      	mov	r0, sl
 800d35e:	f000 fe0b 	bl	800df78 <uxr_buffer_submessage_header>
 800d362:	8968      	ldrh	r0, [r5, #10]
 800d364:	2101      	movs	r1, #1
 800d366:	f007 fc75 	bl	8014c54 <uxr_seq_num_add>
 800d36a:	892b      	ldrh	r3, [r5, #8]
 800d36c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d370:	4602      	mov	r2, r0
 800d372:	9b04      	ldr	r3, [sp, #16]
 800d374:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d378:	a90a      	add	r1, sp, #40	@ 0x28
 800d37a:	4650      	mov	r0, sl
 800d37c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d380:	f001 ffe0 	bl	800f344 <uxr_serialize_HEARTBEAT_Payload>
 800d384:	2200      	movs	r2, #0
 800d386:	4611      	mov	r1, r2
 800d388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d38a:	4640      	mov	r0, r8
 800d38c:	f000 fc2e 	bl	800dbec <uxr_stamp_session_header>
 800d390:	4650      	mov	r0, sl
 800d392:	f7ff f9af 	bl	800c6f4 <ucdr_buffer_length>
 800d396:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d39a:	4602      	mov	r2, r0
 800d39c:	a90c      	add	r1, sp, #48	@ 0x30
 800d39e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d3a2:	4444      	add	r4, r8
 800d3a4:	47a8      	blx	r5
 800d3a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d3aa:	9903      	ldr	r1, [sp, #12]
 800d3ac:	455a      	cmp	r2, fp
 800d3ae:	f106 0601 	add.w	r6, r6, #1
 800d3b2:	eb73 0101 	sbcs.w	r1, r3, r1
 800d3b6:	b2f0      	uxtb	r0, r6
 800d3b8:	db9c      	blt.n	800d2f4 <listen_message_reliably+0x48>
 800d3ba:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d3be:	4283      	cmp	r3, r0
 800d3c0:	d89e      	bhi.n	800d300 <listen_message_reliably+0x54>
 800d3c2:	9a03      	ldr	r2, [sp, #12]
 800d3c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	bf08      	it	eq
 800d3cc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d3d0:	d01e      	beq.n	800d410 <listen_message_reliably+0x164>
 800d3d2:	ebab 0309 	sub.w	r3, fp, r9
 800d3d6:	9905      	ldr	r1, [sp, #20]
 800d3d8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bf08      	it	eq
 800d3e0:	2301      	moveq	r3, #1
 800d3e2:	4299      	cmp	r1, r3
 800d3e4:	bfa8      	it	ge
 800d3e6:	4619      	movge	r1, r3
 800d3e8:	6894      	ldr	r4, [r2, #8]
 800d3ea:	6810      	ldr	r0, [r2, #0]
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	aa08      	add	r2, sp, #32
 800d3f2:	a907      	add	r1, sp, #28
 800d3f4:	47a0      	blx	r4
 800d3f6:	b968      	cbnz	r0, 800d414 <listen_message_reliably+0x168>
 800d3f8:	9b05      	ldr	r3, [sp, #20]
 800d3fa:	eba3 0309 	sub.w	r3, r3, r9
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	9305      	str	r3, [sp, #20]
 800d402:	f73f af5c 	bgt.w	800d2be <listen_message_reliably+0x12>
 800d406:	4604      	mov	r4, r0
 800d408:	4620      	mov	r0, r4
 800d40a:	b01d      	add	sp, #116	@ 0x74
 800d40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d410:	9b05      	ldr	r3, [sp, #20]
 800d412:	e7e0      	b.n	800d3d6 <listen_message_reliably+0x12a>
 800d414:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d418:	4604      	mov	r4, r0
 800d41a:	a80c      	add	r0, sp, #48	@ 0x30
 800d41c:	f7ff f93e 	bl	800c69c <ucdr_init_buffer>
 800d420:	2500      	movs	r5, #0
 800d422:	f10d 031a 	add.w	r3, sp, #26
 800d426:	aa06      	add	r2, sp, #24
 800d428:	a90c      	add	r1, sp, #48	@ 0x30
 800d42a:	4640      	mov	r0, r8
 800d42c:	f88d 5018 	strb.w	r5, [sp, #24]
 800d430:	f000 fbf0 	bl	800dc14 <uxr_read_session_header>
 800d434:	b918      	cbnz	r0, 800d43e <listen_message_reliably+0x192>
 800d436:	4620      	mov	r0, r4
 800d438:	b01d      	add	sp, #116	@ 0x74
 800d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43e:	4629      	mov	r1, r5
 800d440:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d444:	f000 fc8a 	bl	800dd5c <uxr_stream_id_from_raw>
 800d448:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d44c:	2d01      	cmp	r5, #1
 800d44e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d452:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d456:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d45a:	d04b      	beq.n	800d4f4 <listen_message_reliably+0x248>
 800d45c:	2d02      	cmp	r5, #2
 800d45e:	d00f      	beq.n	800d480 <listen_message_reliably+0x1d4>
 800d460:	2d00      	cmp	r5, #0
 800d462:	d1e8      	bne.n	800d436 <listen_message_reliably+0x18a>
 800d464:	4629      	mov	r1, r5
 800d466:	4628      	mov	r0, r5
 800d468:	f000 fc78 	bl	800dd5c <uxr_stream_id_from_raw>
 800d46c:	a90c      	add	r1, sp, #48	@ 0x30
 800d46e:	4602      	mov	r2, r0
 800d470:	4640      	mov	r0, r8
 800d472:	920a      	str	r2, [sp, #40]	@ 0x28
 800d474:	f7ff fd92 	bl	800cf9c <read_submessage_list>
 800d478:	4620      	mov	r0, r4
 800d47a:	b01d      	add	sp, #116	@ 0x74
 800d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d480:	4631      	mov	r1, r6
 800d482:	f108 0008 	add.w	r0, r8, #8
 800d486:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d48a:	f000 fd55 	bl	800df38 <uxr_get_input_reliable_stream>
 800d48e:	4607      	mov	r7, r0
 800d490:	b338      	cbz	r0, 800d4e2 <listen_message_reliably+0x236>
 800d492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d494:	9203      	str	r2, [sp, #12]
 800d496:	a80c      	add	r0, sp, #48	@ 0x30
 800d498:	f7ff f930 	bl	800c6fc <ucdr_buffer_remaining>
 800d49c:	4603      	mov	r3, r0
 800d49e:	f10d 0019 	add.w	r0, sp, #25
 800d4a2:	9000      	str	r0, [sp, #0]
 800d4a4:	9a03      	ldr	r2, [sp, #12]
 800d4a6:	4651      	mov	r1, sl
 800d4a8:	4638      	mov	r0, r7
 800d4aa:	f006 fdf7 	bl	801409c <uxr_receive_reliable_message>
 800d4ae:	b1c0      	cbz	r0, 800d4e2 <listen_message_reliably+0x236>
 800d4b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d4b4:	b393      	cbz	r3, 800d51c <listen_message_reliably+0x270>
 800d4b6:	ad14      	add	r5, sp, #80	@ 0x50
 800d4b8:	f04f 0a02 	mov.w	sl, #2
 800d4bc:	e00a      	b.n	800d4d4 <listen_message_reliably+0x228>
 800d4be:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d4c2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d4c6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f7ff fd64 	bl	800cf9c <read_submessage_list>
 800d4d4:	2204      	movs	r2, #4
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f006 fe5f 	bl	801419c <uxr_next_input_reliable_buffer_available>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d1ed      	bne.n	800d4be <listen_message_reliably+0x212>
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4632      	mov	r2, r6
 800d4e6:	4649      	mov	r1, r9
 800d4e8:	f7ff fbd2 	bl	800cc90 <write_submessage_acknack.isra.0>
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	b01d      	add	sp, #116	@ 0x74
 800d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	f108 0008 	add.w	r0, r8, #8
 800d4fa:	f000 fd13 	bl	800df24 <uxr_get_input_best_effort_stream>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d099      	beq.n	800d436 <listen_message_reliably+0x18a>
 800d502:	4651      	mov	r1, sl
 800d504:	f006 fd36 	bl	8013f74 <uxr_receive_best_effort_message>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d094      	beq.n	800d436 <listen_message_reliably+0x18a>
 800d50c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d510:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d512:	a90c      	add	r1, sp, #48	@ 0x30
 800d514:	4640      	mov	r0, r8
 800d516:	f7ff fd41 	bl	800cf9c <read_submessage_list>
 800d51a:	e78c      	b.n	800d436 <listen_message_reliably+0x18a>
 800d51c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d520:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d522:	a90c      	add	r1, sp, #48	@ 0x30
 800d524:	4640      	mov	r0, r8
 800d526:	f7ff fd39 	bl	800cf9c <read_submessage_list>
 800d52a:	e7c4      	b.n	800d4b6 <listen_message_reliably+0x20a>

0800d52c <uxr_run_session_timeout>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	4604      	mov	r4, r0
 800d530:	460d      	mov	r5, r1
 800d532:	f000 fd67 	bl	800e004 <uxr_millis>
 800d536:	4606      	mov	r6, r0
 800d538:	4620      	mov	r0, r4
 800d53a:	f7ff fc71 	bl	800ce20 <uxr_flash_output_streams>
 800d53e:	4629      	mov	r1, r5
 800d540:	4620      	mov	r0, r4
 800d542:	f7ff feb3 	bl	800d2ac <listen_message_reliably>
 800d546:	f000 fd5d 	bl	800e004 <uxr_millis>
 800d54a:	1b83      	subs	r3, r0, r6
 800d54c:	1ae9      	subs	r1, r5, r3
 800d54e:	2900      	cmp	r1, #0
 800d550:	dcf6      	bgt.n	800d540 <uxr_run_session_timeout+0x14>
 800d552:	f104 0008 	add.w	r0, r4, #8
 800d556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d55a:	f000 bcf7 	b.w	800df4c <uxr_output_streams_confirmed>
 800d55e:	bf00      	nop

0800d560 <uxr_run_session_until_data>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	4604      	mov	r4, r0
 800d564:	460d      	mov	r5, r1
 800d566:	f000 fd4d 	bl	800e004 <uxr_millis>
 800d56a:	4606      	mov	r6, r0
 800d56c:	4620      	mov	r0, r4
 800d56e:	f7ff fc57 	bl	800ce20 <uxr_flash_output_streams>
 800d572:	2300      	movs	r3, #0
 800d574:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d578:	4629      	mov	r1, r5
 800d57a:	e005      	b.n	800d588 <uxr_run_session_until_data+0x28>
 800d57c:	f000 fd42 	bl	800e004 <uxr_millis>
 800d580:	1b83      	subs	r3, r0, r6
 800d582:	1ae9      	subs	r1, r5, r3
 800d584:	2900      	cmp	r1, #0
 800d586:	dd07      	ble.n	800d598 <uxr_run_session_until_data+0x38>
 800d588:	4620      	mov	r0, r4
 800d58a:	f7ff fe8f 	bl	800d2ac <listen_message_reliably>
 800d58e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d592:	2800      	cmp	r0, #0
 800d594:	d0f2      	beq.n	800d57c <uxr_run_session_until_data+0x1c>
 800d596:	bd70      	pop	{r4, r5, r6, pc}
 800d598:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d59c:	bd70      	pop	{r4, r5, r6, pc}
 800d59e:	bf00      	nop

0800d5a0 <uxr_run_session_until_confirm_delivery>:
 800d5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	f000 fd2c 	bl	800e004 <uxr_millis>
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7ff fc36 	bl	800ce20 <uxr_flash_output_streams>
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	f106 0808 	add.w	r8, r6, #8
 800d5ba:	bfa8      	it	ge
 800d5bc:	462c      	movge	r4, r5
 800d5be:	da07      	bge.n	800d5d0 <uxr_run_session_until_confirm_delivery+0x30>
 800d5c0:	e00e      	b.n	800d5e0 <uxr_run_session_until_confirm_delivery+0x40>
 800d5c2:	f7ff fe73 	bl	800d2ac <listen_message_reliably>
 800d5c6:	f000 fd1d 	bl	800e004 <uxr_millis>
 800d5ca:	1bc3      	subs	r3, r0, r7
 800d5cc:	1aec      	subs	r4, r5, r3
 800d5ce:	d407      	bmi.n	800d5e0 <uxr_run_session_until_confirm_delivery+0x40>
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	f000 fcbb 	bl	800df4c <uxr_output_streams_confirmed>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4630      	mov	r0, r6
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d0f0      	beq.n	800d5c2 <uxr_run_session_until_confirm_delivery+0x22>
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	f000 bcb1 	b.w	800df4c <uxr_output_streams_confirmed>
 800d5ea:	bf00      	nop

0800d5ec <uxr_run_session_until_all_status>:
 800d5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f0:	9c08      	ldr	r4, [sp, #32]
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	4691      	mov	r9, r2
 800d5f8:	461d      	mov	r5, r3
 800d5fa:	f7ff fc11 	bl	800ce20 <uxr_flash_output_streams>
 800d5fe:	b124      	cbz	r4, 800d60a <uxr_run_session_until_all_status+0x1e>
 800d600:	4622      	mov	r2, r4
 800d602:	21ff      	movs	r1, #255	@ 0xff
 800d604:	4628      	mov	r0, r5
 800d606:	f009 f803 	bl	8016610 <memset>
 800d60a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d60e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d610:	f000 fcf8 	bl	800e004 <uxr_millis>
 800d614:	3d01      	subs	r5, #1
 800d616:	f1a9 0902 	sub.w	r9, r9, #2
 800d61a:	4680      	mov	r8, r0
 800d61c:	4639      	mov	r1, r7
 800d61e:	4630      	mov	r0, r6
 800d620:	f7ff fe44 	bl	800d2ac <listen_message_reliably>
 800d624:	f000 fcee 	bl	800e004 <uxr_millis>
 800d628:	eba0 0008 	sub.w	r0, r0, r8
 800d62c:	1a39      	subs	r1, r7, r0
 800d62e:	b344      	cbz	r4, 800d682 <uxr_run_session_until_all_status+0x96>
 800d630:	4628      	mov	r0, r5
 800d632:	46ac      	mov	ip, r5
 800d634:	2301      	movs	r3, #1
 800d636:	e002      	b.n	800d63e <uxr_run_session_until_all_status+0x52>
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d20d      	bcs.n	800d658 <uxr_run_session_until_all_status+0x6c>
 800d63c:	3301      	adds	r3, #1
 800d63e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d642:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d646:	d1f7      	bne.n	800d638 <uxr_run_session_until_all_status+0x4c>
 800d648:	42a3      	cmp	r3, r4
 800d64a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d64e:	d213      	bcs.n	800d678 <uxr_run_session_until_all_status+0x8c>
 800d650:	2a00      	cmp	r2, #0
 800d652:	d0f3      	beq.n	800d63c <uxr_run_session_until_all_status+0x50>
 800d654:	2900      	cmp	r1, #0
 800d656:	dce2      	bgt.n	800d61e <uxr_run_session_until_all_status+0x32>
 800d658:	2300      	movs	r3, #0
 800d65a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d65c:	442c      	add	r4, r5
 800d65e:	e001      	b.n	800d664 <uxr_run_session_until_all_status+0x78>
 800d660:	2b01      	cmp	r3, #1
 800d662:	d812      	bhi.n	800d68a <uxr_run_session_until_all_status+0x9e>
 800d664:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d668:	4284      	cmp	r4, r0
 800d66a:	d1f9      	bne.n	800d660 <uxr_run_session_until_all_status+0x74>
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	bf8c      	ite	hi
 800d670:	2000      	movhi	r0, #0
 800d672:	2001      	movls	r0, #1
 800d674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d678:	2900      	cmp	r1, #0
 800d67a:	dded      	ble.n	800d658 <uxr_run_session_until_all_status+0x6c>
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	d1ce      	bne.n	800d61e <uxr_run_session_until_all_status+0x32>
 800d680:	e7ea      	b.n	800d658 <uxr_run_session_until_all_status+0x6c>
 800d682:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d684:	2001      	movs	r0, #1
 800d686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d68a:	2000      	movs	r0, #0
 800d68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d690 <wait_session_status>:
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	4604      	mov	r4, r0
 800d696:	b09d      	sub	sp, #116	@ 0x74
 800d698:	20ff      	movs	r0, #255	@ 0xff
 800d69a:	7160      	strb	r0, [r4, #5]
 800d69c:	9303      	str	r3, [sp, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 80b6 	beq.w	800d810 <wait_session_status+0x180>
 800d6a4:	468a      	mov	sl, r1
 800d6a6:	4691      	mov	r9, r2
 800d6a8:	f04f 0b00 	mov.w	fp, #0
 800d6ac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d6ae:	464a      	mov	r2, r9
 800d6b0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d6b4:	4651      	mov	r1, sl
 800d6b6:	47a8      	blx	r5
 800d6b8:	f000 fca4 	bl	800e004 <uxr_millis>
 800d6bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	e009      	b.n	800d6d8 <wait_session_status+0x48>
 800d6c4:	f000 fc9e 	bl	800e004 <uxr_millis>
 800d6c8:	1b40      	subs	r0, r0, r5
 800d6ca:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	dd40      	ble.n	800d754 <wait_session_status+0xc4>
 800d6d2:	7960      	ldrb	r0, [r4, #5]
 800d6d4:	28ff      	cmp	r0, #255	@ 0xff
 800d6d6:	d145      	bne.n	800d764 <wait_session_status+0xd4>
 800d6d8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d6da:	a908      	add	r1, sp, #32
 800d6dc:	6896      	ldr	r6, [r2, #8]
 800d6de:	6810      	ldr	r0, [r2, #0]
 800d6e0:	aa09      	add	r2, sp, #36	@ 0x24
 800d6e2:	47b0      	blx	r6
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d0ed      	beq.n	800d6c4 <wait_session_status+0x34>
 800d6e8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d6ec:	a80c      	add	r0, sp, #48	@ 0x30
 800d6ee:	f7fe ffd5 	bl	800c69c <ucdr_init_buffer>
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	f10d 031e 	add.w	r3, sp, #30
 800d6f8:	aa07      	add	r2, sp, #28
 800d6fa:	a90c      	add	r1, sp, #48	@ 0x30
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f88d 601c 	strb.w	r6, [sp, #28]
 800d702:	f000 fa87 	bl	800dc14 <uxr_read_session_header>
 800d706:	2800      	cmp	r0, #0
 800d708:	d0dc      	beq.n	800d6c4 <wait_session_status+0x34>
 800d70a:	4631      	mov	r1, r6
 800d70c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d710:	f000 fb24 	bl	800dd5c <uxr_stream_id_from_raw>
 800d714:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d718:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d71c:	9302      	str	r3, [sp, #8]
 800d71e:	2f01      	cmp	r7, #1
 800d720:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d724:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d728:	d05c      	beq.n	800d7e4 <wait_session_status+0x154>
 800d72a:	2f02      	cmp	r7, #2
 800d72c:	d020      	beq.n	800d770 <wait_session_status+0xe0>
 800d72e:	2f00      	cmp	r7, #0
 800d730:	d1c8      	bne.n	800d6c4 <wait_session_status+0x34>
 800d732:	4639      	mov	r1, r7
 800d734:	4638      	mov	r0, r7
 800d736:	f000 fb11 	bl	800dd5c <uxr_stream_id_from_raw>
 800d73a:	a90c      	add	r1, sp, #48	@ 0x30
 800d73c:	4602      	mov	r2, r0
 800d73e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d740:	4620      	mov	r0, r4
 800d742:	f7ff fc2b 	bl	800cf9c <read_submessage_list>
 800d746:	f000 fc5d 	bl	800e004 <uxr_millis>
 800d74a:	1b40      	subs	r0, r0, r5
 800d74c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d750:	2b00      	cmp	r3, #0
 800d752:	dcbe      	bgt.n	800d6d2 <wait_session_status+0x42>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	7960      	ldrb	r0, [r4, #5]
 800d758:	f10b 0b01 	add.w	fp, fp, #1
 800d75c:	455b      	cmp	r3, fp
 800d75e:	d001      	beq.n	800d764 <wait_session_status+0xd4>
 800d760:	28ff      	cmp	r0, #255	@ 0xff
 800d762:	d0a3      	beq.n	800d6ac <wait_session_status+0x1c>
 800d764:	38ff      	subs	r0, #255	@ 0xff
 800d766:	bf18      	it	ne
 800d768:	2001      	movne	r0, #1
 800d76a:	b01d      	add	sp, #116	@ 0x74
 800d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d770:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	4631      	mov	r1, r6
 800d778:	f104 0008 	add.w	r0, r4, #8
 800d77c:	f000 fbdc 	bl	800df38 <uxr_get_input_reliable_stream>
 800d780:	4680      	mov	r8, r0
 800d782:	b348      	cbz	r0, 800d7d8 <wait_session_status+0x148>
 800d784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d786:	9205      	str	r2, [sp, #20]
 800d788:	a80c      	add	r0, sp, #48	@ 0x30
 800d78a:	f7fe ffb7 	bl	800c6fc <ucdr_buffer_remaining>
 800d78e:	4603      	mov	r3, r0
 800d790:	f10d 001d 	add.w	r0, sp, #29
 800d794:	9000      	str	r0, [sp, #0]
 800d796:	9a05      	ldr	r2, [sp, #20]
 800d798:	9902      	ldr	r1, [sp, #8]
 800d79a:	4640      	mov	r0, r8
 800d79c:	f006 fc7e 	bl	801409c <uxr_receive_reliable_message>
 800d7a0:	b1d0      	cbz	r0, 800d7d8 <wait_session_status+0x148>
 800d7a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d03a      	beq.n	800d820 <wait_session_status+0x190>
 800d7aa:	9f04      	ldr	r7, [sp, #16]
 800d7ac:	e00a      	b.n	800d7c4 <wait_session_status+0x134>
 800d7ae:	f04f 0302 	mov.w	r3, #2
 800d7b2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d7b6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d7ba:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d7be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7c0:	f7ff fbec 	bl	800cf9c <read_submessage_list>
 800d7c4:	a914      	add	r1, sp, #80	@ 0x50
 800d7c6:	2204      	movs	r2, #4
 800d7c8:	4640      	mov	r0, r8
 800d7ca:	f006 fce7 	bl	801419c <uxr_next_input_reliable_buffer_available>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	a914      	add	r1, sp, #80	@ 0x50
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1ea      	bne.n	800d7ae <wait_session_status+0x11e>
 800d7d8:	9904      	ldr	r1, [sp, #16]
 800d7da:	4632      	mov	r2, r6
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f7ff fa57 	bl	800cc90 <write_submessage_acknack.isra.0>
 800d7e2:	e76f      	b.n	800d6c4 <wait_session_status+0x34>
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	f104 0008 	add.w	r0, r4, #8
 800d7ea:	f000 fb9b 	bl	800df24 <uxr_get_input_best_effort_stream>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f43f af68 	beq.w	800d6c4 <wait_session_status+0x34>
 800d7f4:	9902      	ldr	r1, [sp, #8]
 800d7f6:	f006 fbbd 	bl	8013f74 <uxr_receive_best_effort_message>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	f43f af62 	beq.w	800d6c4 <wait_session_status+0x34>
 800d800:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d804:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d806:	a90c      	add	r1, sp, #48	@ 0x30
 800d808:	4620      	mov	r0, r4
 800d80a:	f7ff fbc7 	bl	800cf9c <read_submessage_list>
 800d80e:	e759      	b.n	800d6c4 <wait_session_status+0x34>
 800d810:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d812:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d816:	47a0      	blx	r4
 800d818:	2001      	movs	r0, #1
 800d81a:	b01d      	add	sp, #116	@ 0x74
 800d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d820:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d824:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d826:	a90c      	add	r1, sp, #48	@ 0x30
 800d828:	4620      	mov	r0, r4
 800d82a:	f7ff fbb7 	bl	800cf9c <read_submessage_list>
 800d82e:	e7bc      	b.n	800d7aa <wait_session_status+0x11a>

0800d830 <uxr_delete_session_retries>:
 800d830:	b530      	push	{r4, r5, lr}
 800d832:	b08f      	sub	sp, #60	@ 0x3c
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	f000 fa2e 	bl	800dc98 <uxr_session_header_offset>
 800d83c:	2300      	movs	r3, #0
 800d83e:	2210      	movs	r2, #16
 800d840:	9000      	str	r0, [sp, #0]
 800d842:	a902      	add	r1, sp, #8
 800d844:	a806      	add	r0, sp, #24
 800d846:	f7fe ff17 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800d84a:	a906      	add	r1, sp, #24
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 f973 	bl	800db38 <uxr_buffer_delete_session>
 800d852:	2200      	movs	r2, #0
 800d854:	4611      	mov	r1, r2
 800d856:	9b06      	ldr	r3, [sp, #24]
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 f9c7 	bl	800dbec <uxr_stamp_session_header>
 800d85e:	a806      	add	r0, sp, #24
 800d860:	f7fe ff48 	bl	800c6f4 <ucdr_buffer_length>
 800d864:	462b      	mov	r3, r5
 800d866:	4602      	mov	r2, r0
 800d868:	a902      	add	r1, sp, #8
 800d86a:	4620      	mov	r0, r4
 800d86c:	f7ff ff10 	bl	800d690 <wait_session_status>
 800d870:	b118      	cbz	r0, 800d87a <uxr_delete_session_retries+0x4a>
 800d872:	7960      	ldrb	r0, [r4, #5]
 800d874:	fab0 f080 	clz	r0, r0
 800d878:	0940      	lsrs	r0, r0, #5
 800d87a:	b00f      	add	sp, #60	@ 0x3c
 800d87c:	bd30      	pop	{r4, r5, pc}
 800d87e:	bf00      	nop

0800d880 <uxr_create_session>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	f100 0b08 	add.w	fp, r0, #8
 800d888:	b0ab      	sub	sp, #172	@ 0xac
 800d88a:	4604      	mov	r4, r0
 800d88c:	4658      	mov	r0, fp
 800d88e:	f000 fa99 	bl	800ddc4 <uxr_reset_stream_storage>
 800d892:	4620      	mov	r0, r4
 800d894:	f000 fa00 	bl	800dc98 <uxr_session_header_offset>
 800d898:	2300      	movs	r3, #0
 800d89a:	9000      	str	r0, [sp, #0]
 800d89c:	221c      	movs	r2, #28
 800d89e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d8a0:	a812      	add	r0, sp, #72	@ 0x48
 800d8a2:	f7fe fee9 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800d8a6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8a8:	8a1a      	ldrh	r2, [r3, #16]
 800d8aa:	3a04      	subs	r2, #4
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	a912      	add	r1, sp, #72	@ 0x48
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 f917 	bl	800dae4 <uxr_buffer_create_session>
 800d8b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 f983 	bl	800dbc4 <uxr_stamp_create_session_header>
 800d8be:	a812      	add	r0, sp, #72	@ 0x48
 800d8c0:	f7fe ff18 	bl	800c6f4 <ucdr_buffer_length>
 800d8c4:	23ff      	movs	r3, #255	@ 0xff
 800d8c6:	7163      	strb	r3, [r4, #5]
 800d8c8:	230a      	movs	r3, #10
 800d8ca:	46da      	mov	sl, fp
 800d8cc:	9303      	str	r3, [sp, #12]
 800d8ce:	4683      	mov	fp, r0
 800d8d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8d2:	465a      	mov	r2, fp
 800d8d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d8d8:	a90b      	add	r1, sp, #44	@ 0x2c
 800d8da:	47a8      	blx	r5
 800d8dc:	f000 fb92 	bl	800e004 <uxr_millis>
 800d8e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8e4:	4605      	mov	r5, r0
 800d8e6:	e009      	b.n	800d8fc <uxr_create_session+0x7c>
 800d8e8:	f000 fb8c 	bl	800e004 <uxr_millis>
 800d8ec:	1b40      	subs	r0, r0, r5
 800d8ee:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	7962      	ldrb	r2, [r4, #5]
 800d8f6:	dd38      	ble.n	800d96a <uxr_create_session+0xea>
 800d8f8:	2aff      	cmp	r2, #255	@ 0xff
 800d8fa:	d13c      	bne.n	800d976 <uxr_create_session+0xf6>
 800d8fc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d8fe:	a907      	add	r1, sp, #28
 800d900:	6896      	ldr	r6, [r2, #8]
 800d902:	6810      	ldr	r0, [r2, #0]
 800d904:	aa08      	add	r2, sp, #32
 800d906:	47b0      	blx	r6
 800d908:	2800      	cmp	r0, #0
 800d90a:	d0ed      	beq.n	800d8e8 <uxr_create_session+0x68>
 800d90c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d910:	a81a      	add	r0, sp, #104	@ 0x68
 800d912:	f7fe fec3 	bl	800c69c <ucdr_init_buffer>
 800d916:	2600      	movs	r6, #0
 800d918:	f10d 031a 	add.w	r3, sp, #26
 800d91c:	aa06      	add	r2, sp, #24
 800d91e:	a91a      	add	r1, sp, #104	@ 0x68
 800d920:	4620      	mov	r0, r4
 800d922:	f88d 6018 	strb.w	r6, [sp, #24]
 800d926:	f000 f975 	bl	800dc14 <uxr_read_session_header>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d0dc      	beq.n	800d8e8 <uxr_create_session+0x68>
 800d92e:	4631      	mov	r1, r6
 800d930:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d934:	f000 fa12 	bl	800dd5c <uxr_stream_id_from_raw>
 800d938:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d93c:	2e01      	cmp	r6, #1
 800d93e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d942:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d946:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d94a:	d053      	beq.n	800d9f4 <uxr_create_session+0x174>
 800d94c:	2e02      	cmp	r6, #2
 800d94e:	d018      	beq.n	800d982 <uxr_create_session+0x102>
 800d950:	2e00      	cmp	r6, #0
 800d952:	d1c9      	bne.n	800d8e8 <uxr_create_session+0x68>
 800d954:	4631      	mov	r1, r6
 800d956:	4630      	mov	r0, r6
 800d958:	f000 fa00 	bl	800dd5c <uxr_stream_id_from_raw>
 800d95c:	a91a      	add	r1, sp, #104	@ 0x68
 800d95e:	4602      	mov	r2, r0
 800d960:	900a      	str	r0, [sp, #40]	@ 0x28
 800d962:	4620      	mov	r0, r4
 800d964:	f7ff fb1a 	bl	800cf9c <read_submessage_list>
 800d968:	e7be      	b.n	800d8e8 <uxr_create_session+0x68>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	d001      	beq.n	800d976 <uxr_create_session+0xf6>
 800d972:	2aff      	cmp	r2, #255	@ 0xff
 800d974:	d0ac      	beq.n	800d8d0 <uxr_create_session+0x50>
 800d976:	2a00      	cmp	r2, #0
 800d978:	d051      	beq.n	800da1e <uxr_create_session+0x19e>
 800d97a:	2000      	movs	r0, #0
 800d97c:	b02b      	add	sp, #172	@ 0xac
 800d97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d982:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	4639      	mov	r1, r7
 800d98a:	4650      	mov	r0, sl
 800d98c:	f000 fad4 	bl	800df38 <uxr_get_input_reliable_stream>
 800d990:	4680      	mov	r8, r0
 800d992:	b348      	cbz	r0, 800d9e8 <uxr_create_session+0x168>
 800d994:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d996:	9205      	str	r2, [sp, #20]
 800d998:	a81a      	add	r0, sp, #104	@ 0x68
 800d99a:	f7fe feaf 	bl	800c6fc <ucdr_buffer_remaining>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	f10d 0019 	add.w	r0, sp, #25
 800d9a4:	9000      	str	r0, [sp, #0]
 800d9a6:	9a05      	ldr	r2, [sp, #20]
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	f006 fb76 	bl	801409c <uxr_receive_reliable_message>
 800d9b0:	b1d0      	cbz	r0, 800d9e8 <uxr_create_session+0x168>
 800d9b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d038      	beq.n	800da2c <uxr_create_session+0x1ac>
 800d9ba:	9e04      	ldr	r6, [sp, #16]
 800d9bc:	e00a      	b.n	800d9d4 <uxr_create_session+0x154>
 800d9be:	f04f 0302 	mov.w	r3, #2
 800d9c2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d9c6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d9ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9d0:	f7ff fae4 	bl	800cf9c <read_submessage_list>
 800d9d4:	a922      	add	r1, sp, #136	@ 0x88
 800d9d6:	2204      	movs	r2, #4
 800d9d8:	4640      	mov	r0, r8
 800d9da:	f006 fbdf 	bl	801419c <uxr_next_input_reliable_buffer_available>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	a922      	add	r1, sp, #136	@ 0x88
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1ea      	bne.n	800d9be <uxr_create_session+0x13e>
 800d9e8:	9904      	ldr	r1, [sp, #16]
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f7ff f94f 	bl	800cc90 <write_submessage_acknack.isra.0>
 800d9f2:	e779      	b.n	800d8e8 <uxr_create_session+0x68>
 800d9f4:	4639      	mov	r1, r7
 800d9f6:	4650      	mov	r0, sl
 800d9f8:	f000 fa94 	bl	800df24 <uxr_get_input_best_effort_stream>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f43f af73 	beq.w	800d8e8 <uxr_create_session+0x68>
 800da02:	4649      	mov	r1, r9
 800da04:	f006 fab6 	bl	8013f74 <uxr_receive_best_effort_message>
 800da08:	2800      	cmp	r0, #0
 800da0a:	f43f af6d 	beq.w	800d8e8 <uxr_create_session+0x68>
 800da0e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da14:	a91a      	add	r1, sp, #104	@ 0x68
 800da16:	4620      	mov	r0, r4
 800da18:	f7ff fac0 	bl	800cf9c <read_submessage_list>
 800da1c:	e764      	b.n	800d8e8 <uxr_create_session+0x68>
 800da1e:	4650      	mov	r0, sl
 800da20:	f000 f9d0 	bl	800ddc4 <uxr_reset_stream_storage>
 800da24:	2001      	movs	r0, #1
 800da26:	b02b      	add	sp, #172	@ 0xac
 800da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da32:	a91a      	add	r1, sp, #104	@ 0x68
 800da34:	4620      	mov	r0, r4
 800da36:	f7ff fab1 	bl	800cf9c <read_submessage_list>
 800da3a:	e7be      	b.n	800d9ba <uxr_create_session+0x13a>

0800da3c <uxr_prepare_stream_to_write_submessage>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	4682      	mov	sl, r0
 800da44:	4610      	mov	r0, r2
 800da46:	4615      	mov	r5, r2
 800da48:	461e      	mov	r6, r3
 800da4a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800da4e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800da52:	9101      	str	r1, [sp, #4]
 800da54:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800da58:	f000 face 	bl	800dff8 <uxr_submessage_padding>
 800da5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da60:	f105 0904 	add.w	r9, r5, #4
 800da64:	2b01      	cmp	r3, #1
 800da66:	4481      	add	r9, r0
 800da68:	d01d      	beq.n	800daa6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d116      	bne.n	800da9c <uxr_prepare_stream_to_write_submessage+0x60>
 800da6e:	4621      	mov	r1, r4
 800da70:	f10a 0008 	add.w	r0, sl, #8
 800da74:	f000 fa4c 	bl	800df10 <uxr_get_output_reliable_stream>
 800da78:	4604      	mov	r4, r0
 800da7a:	b158      	cbz	r0, 800da94 <uxr_prepare_stream_to_write_submessage+0x58>
 800da7c:	4649      	mov	r1, r9
 800da7e:	4632      	mov	r2, r6
 800da80:	f006 fd48 	bl	8014514 <uxr_prepare_reliable_buffer_to_write>
 800da84:	4604      	mov	r4, r0
 800da86:	b12c      	cbz	r4, 800da94 <uxr_prepare_stream_to_write_submessage+0x58>
 800da88:	4643      	mov	r3, r8
 800da8a:	b2aa      	uxth	r2, r5
 800da8c:	4639      	mov	r1, r7
 800da8e:	4630      	mov	r0, r6
 800da90:	f000 fa72 	bl	800df78 <uxr_buffer_submessage_header>
 800da94:	4620      	mov	r0, r4
 800da96:	b002      	add	sp, #8
 800da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9c:	2400      	movs	r4, #0
 800da9e:	4620      	mov	r0, r4
 800daa0:	b002      	add	sp, #8
 800daa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa6:	4621      	mov	r1, r4
 800daa8:	f10a 0008 	add.w	r0, sl, #8
 800daac:	f000 fa28 	bl	800df00 <uxr_get_output_best_effort_stream>
 800dab0:	4604      	mov	r4, r0
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0ee      	beq.n	800da94 <uxr_prepare_stream_to_write_submessage+0x58>
 800dab6:	4649      	mov	r1, r9
 800dab8:	4632      	mov	r2, r6
 800daba:	f006 fc5b 	bl	8014374 <uxr_prepare_best_effort_buffer_to_write>
 800dabe:	4604      	mov	r4, r0
 800dac0:	e7e1      	b.n	800da86 <uxr_prepare_stream_to_write_submessage+0x4a>
 800dac2:	bf00      	nop

0800dac4 <uxr_init_session_info>:
 800dac4:	0e13      	lsrs	r3, r2, #24
 800dac6:	7043      	strb	r3, [r0, #1]
 800dac8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800dacc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dad0:	7001      	strb	r1, [r0, #0]
 800dad2:	70c3      	strb	r3, [r0, #3]
 800dad4:	2109      	movs	r1, #9
 800dad6:	23ff      	movs	r3, #255	@ 0xff
 800dad8:	f880 c002 	strb.w	ip, [r0, #2]
 800dadc:	7102      	strb	r2, [r0, #4]
 800dade:	80c1      	strh	r1, [r0, #6]
 800dae0:	7143      	strb	r3, [r0, #5]
 800dae2:	4770      	bx	lr

0800dae4 <uxr_buffer_create_session>:
 800dae4:	b530      	push	{r4, r5, lr}
 800dae6:	b089      	sub	sp, #36	@ 0x24
 800dae8:	2300      	movs	r3, #0
 800daea:	4d12      	ldr	r5, [pc, #72]	@ (800db34 <uxr_buffer_create_session+0x50>)
 800daec:	9307      	str	r3, [sp, #28]
 800daee:	f8ad 201c 	strh.w	r2, [sp, #28]
 800daf2:	2201      	movs	r2, #1
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	80c2      	strh	r2, [r0, #6]
 800daf8:	f88d 2004 	strb.w	r2, [sp, #4]
 800dafc:	682a      	ldr	r2, [r5, #0]
 800dafe:	9200      	str	r2, [sp, #0]
 800db00:	88aa      	ldrh	r2, [r5, #4]
 800db02:	f8ad 2006 	strh.w	r2, [sp, #6]
 800db06:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800db0a:	9202      	str	r2, [sp, #8]
 800db0c:	460c      	mov	r4, r1
 800db0e:	7802      	ldrb	r2, [r0, #0]
 800db10:	9303      	str	r3, [sp, #12]
 800db12:	4619      	mov	r1, r3
 800db14:	f88d 200c 	strb.w	r2, [sp, #12]
 800db18:	4620      	mov	r0, r4
 800db1a:	2210      	movs	r2, #16
 800db1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800db20:	9306      	str	r3, [sp, #24]
 800db22:	f000 fa29 	bl	800df78 <uxr_buffer_submessage_header>
 800db26:	4669      	mov	r1, sp
 800db28:	4620      	mov	r0, r4
 800db2a:	f001 fa6d 	bl	800f008 <uxr_serialize_CREATE_CLIENT_Payload>
 800db2e:	b009      	add	sp, #36	@ 0x24
 800db30:	bd30      	pop	{r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	080175b4 	.word	0x080175b4

0800db38 <uxr_buffer_delete_session>:
 800db38:	b510      	push	{r4, lr}
 800db3a:	4b0c      	ldr	r3, [pc, #48]	@ (800db6c <uxr_buffer_delete_session+0x34>)
 800db3c:	b082      	sub	sp, #8
 800db3e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800db42:	f8ad c006 	strh.w	ip, [sp, #6]
 800db46:	460c      	mov	r4, r1
 800db48:	2202      	movs	r2, #2
 800db4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db4e:	80c2      	strh	r2, [r0, #6]
 800db50:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db54:	2204      	movs	r2, #4
 800db56:	2300      	movs	r3, #0
 800db58:	2103      	movs	r1, #3
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fa0c 	bl	800df78 <uxr_buffer_submessage_header>
 800db60:	a901      	add	r1, sp, #4
 800db62:	4620      	mov	r0, r4
 800db64:	f001 faf6 	bl	800f154 <uxr_serialize_DELETE_Payload>
 800db68:	b002      	add	sp, #8
 800db6a:	bd10      	pop	{r4, pc}
 800db6c:	080175b4 	.word	0x080175b4

0800db70 <uxr_read_create_session_status>:
 800db70:	b510      	push	{r4, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	a901      	add	r1, sp, #4
 800db7a:	f001 fafb 	bl	800f174 <uxr_deserialize_STATUS_AGENT_Payload>
 800db7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db82:	7163      	strb	r3, [r4, #5]
 800db84:	b008      	add	sp, #32
 800db86:	bd10      	pop	{r4, pc}

0800db88 <uxr_read_delete_session_status>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	4604      	mov	r4, r0
 800db8c:	b084      	sub	sp, #16
 800db8e:	4608      	mov	r0, r1
 800db90:	a902      	add	r1, sp, #8
 800db92:	f001 fb1f 	bl	800f1d4 <uxr_deserialize_STATUS_Payload>
 800db96:	88e3      	ldrh	r3, [r4, #6]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d001      	beq.n	800dba0 <uxr_read_delete_session_status+0x18>
 800db9c:	b004      	add	sp, #16
 800db9e:	bd10      	pop	{r4, pc}
 800dba0:	f10d 000a 	add.w	r0, sp, #10
 800dba4:	f7fe fffa 	bl	800cb9c <uxr_object_id_from_raw>
 800dba8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dbac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800dbb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	bf04      	itt	eq
 800dbba:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800dbbe:	7163      	strbeq	r3, [r4, #5]
 800dbc0:	b004      	add	sp, #16
 800dbc2:	bd10      	pop	{r4, pc}

0800dbc4 <uxr_stamp_create_session_header>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	2208      	movs	r2, #8
 800dbc8:	b08a      	sub	sp, #40	@ 0x28
 800dbca:	4604      	mov	r4, r0
 800dbcc:	eb0d 0002 	add.w	r0, sp, r2
 800dbd0:	f7fe fd64 	bl	800c69c <ucdr_init_buffer>
 800dbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd8:	9400      	str	r4, [sp, #0]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	461a      	mov	r2, r3
 800dbde:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800dbe2:	a802      	add	r0, sp, #8
 800dbe4:	f000 fbc2 	bl	800e36c <uxr_serialize_message_header>
 800dbe8:	b00a      	add	sp, #40	@ 0x28
 800dbea:	bd10      	pop	{r4, pc}

0800dbec <uxr_stamp_session_header>:
 800dbec:	b530      	push	{r4, r5, lr}
 800dbee:	b08d      	sub	sp, #52	@ 0x34
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	9203      	str	r2, [sp, #12]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	a804      	add	r0, sp, #16
 800dbfa:	2208      	movs	r2, #8
 800dbfc:	f7fe fd4e 	bl	800c69c <ucdr_init_buffer>
 800dc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	9400      	str	r4, [sp, #0]
 800dc08:	462a      	mov	r2, r5
 800dc0a:	a804      	add	r0, sp, #16
 800dc0c:	f000 fbae 	bl	800e36c <uxr_serialize_message_header>
 800dc10:	b00d      	add	sp, #52	@ 0x34
 800dc12:	bd30      	pop	{r4, r5, pc}

0800dc14 <uxr_read_session_header>:
 800dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc18:	4607      	mov	r7, r0
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	460c      	mov	r4, r1
 800dc20:	4615      	mov	r5, r2
 800dc22:	461e      	mov	r6, r3
 800dc24:	f7fe fd6a 	bl	800c6fc <ucdr_buffer_remaining>
 800dc28:	2808      	cmp	r0, #8
 800dc2a:	d803      	bhi.n	800dc34 <uxr_read_session_header+0x20>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	b004      	add	sp, #16
 800dc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc34:	f10d 080c 	add.w	r8, sp, #12
 800dc38:	4633      	mov	r3, r6
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	f8cd 8000 	str.w	r8, [sp]
 800dc40:	4620      	mov	r0, r4
 800dc42:	f10d 010b 	add.w	r1, sp, #11
 800dc46:	f000 fbaf 	bl	800e3a8 <uxr_deserialize_message_header>
 800dc4a:	783a      	ldrb	r2, [r7, #0]
 800dc4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d1eb      	bne.n	800dc2c <uxr_read_session_header+0x18>
 800dc54:	061b      	lsls	r3, r3, #24
 800dc56:	d41c      	bmi.n	800dc92 <uxr_read_session_header+0x7e>
 800dc58:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dc5c:	787b      	ldrb	r3, [r7, #1]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d003      	beq.n	800dc6a <uxr_read_session_header+0x56>
 800dc62:	2001      	movs	r0, #1
 800dc64:	f080 0001 	eor.w	r0, r0, #1
 800dc68:	e7e1      	b.n	800dc2e <uxr_read_session_header+0x1a>
 800dc6a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dc6e:	78bb      	ldrb	r3, [r7, #2]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	f107 0102 	add.w	r1, r7, #2
 800dc76:	d1f4      	bne.n	800dc62 <uxr_read_session_header+0x4e>
 800dc78:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dc7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d1ee      	bne.n	800dc62 <uxr_read_session_header+0x4e>
 800dc84:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dc88:	784b      	ldrb	r3, [r1, #1]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d1e9      	bne.n	800dc62 <uxr_read_session_header+0x4e>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e7e8      	b.n	800dc64 <uxr_read_session_header+0x50>
 800dc92:	2001      	movs	r0, #1
 800dc94:	e7cb      	b.n	800dc2e <uxr_read_session_header+0x1a>
 800dc96:	bf00      	nop

0800dc98 <uxr_session_header_offset>:
 800dc98:	f990 3000 	ldrsb.w	r3, [r0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfac      	ite	ge
 800dca0:	2008      	movge	r0, #8
 800dca2:	2004      	movlt	r0, #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop

0800dca8 <uxr_init_base_object_request>:
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	88c3      	ldrh	r3, [r0, #6]
 800dcac:	b082      	sub	sp, #8
 800dcae:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800dcb2:	9101      	str	r1, [sp, #4]
 800dcb4:	f1a3 010a 	sub.w	r1, r3, #10
 800dcb8:	b289      	uxth	r1, r1
 800dcba:	42a1      	cmp	r1, r4
 800dcbc:	d80e      	bhi.n	800dcdc <uxr_init_base_object_request+0x34>
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	b29c      	uxth	r4, r3
 800dcc2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	80c4      	strh	r4, [r0, #6]
 800dcca:	9801      	ldr	r0, [sp, #4]
 800dccc:	7011      	strb	r1, [r2, #0]
 800dcce:	7053      	strb	r3, [r2, #1]
 800dcd0:	1c91      	adds	r1, r2, #2
 800dcd2:	f7fe ff77 	bl	800cbc4 <uxr_object_id_to_raw>
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	b002      	add	sp, #8
 800dcda:	bd10      	pop	{r4, pc}
 800dcdc:	230a      	movs	r3, #10
 800dcde:	2100      	movs	r1, #0
 800dce0:	461c      	mov	r4, r3
 800dce2:	e7f1      	b.n	800dcc8 <uxr_init_base_object_request+0x20>

0800dce4 <uxr_parse_base_object_request>:
 800dce4:	b570      	push	{r4, r5, r6, lr}
 800dce6:	4604      	mov	r4, r0
 800dce8:	3002      	adds	r0, #2
 800dcea:	460d      	mov	r5, r1
 800dcec:	4616      	mov	r6, r2
 800dcee:	f7fe ff55 	bl	800cb9c <uxr_object_id_from_raw>
 800dcf2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dcf6:	8028      	strh	r0, [r5, #0]
 800dcf8:	806b      	strh	r3, [r5, #2]
 800dcfa:	7822      	ldrb	r2, [r4, #0]
 800dcfc:	7863      	ldrb	r3, [r4, #1]
 800dcfe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dd02:	8033      	strh	r3, [r6, #0]
 800dd04:	bd70      	pop	{r4, r5, r6, pc}
 800dd06:	bf00      	nop

0800dd08 <uxr_stream_id>:
 800dd08:	2901      	cmp	r1, #1
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	d01d      	beq.n	800dd4a <uxr_stream_id+0x42>
 800dd0e:	2902      	cmp	r1, #2
 800dd10:	f04f 0c00 	mov.w	ip, #0
 800dd14:	d01e      	beq.n	800dd54 <uxr_stream_id+0x4c>
 800dd16:	2300      	movs	r3, #0
 800dd18:	f36c 0307 	bfi	r3, ip, #0, #8
 800dd1c:	f360 230f 	bfi	r3, r0, #8, #8
 800dd20:	f361 4317 	bfi	r3, r1, #16, #8
 800dd24:	f362 631f 	bfi	r3, r2, #24, #8
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	f362 0007 	bfi	r0, r2, #0, #8
 800dd30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd34:	f362 200f 	bfi	r0, r2, #8, #8
 800dd38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd3c:	f362 4017 	bfi	r0, r2, #16, #8
 800dd40:	0e1b      	lsrs	r3, r3, #24
 800dd42:	f363 601f 	bfi	r0, r3, #24, #8
 800dd46:	b002      	add	sp, #8
 800dd48:	4770      	bx	lr
 800dd4a:	f100 0c01 	add.w	ip, r0, #1
 800dd4e:	fa5f fc8c 	uxtb.w	ip, ip
 800dd52:	e7e0      	b.n	800dd16 <uxr_stream_id+0xe>
 800dd54:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800dd58:	e7dd      	b.n	800dd16 <uxr_stream_id+0xe>
 800dd5a:	bf00      	nop

0800dd5c <uxr_stream_id_from_raw>:
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	b130      	cbz	r0, 800dd6e <uxr_stream_id_from_raw+0x12>
 800dd60:	0603      	lsls	r3, r0, #24
 800dd62:	d420      	bmi.n	800dda6 <uxr_stream_id_from_raw+0x4a>
 800dd64:	1e42      	subs	r2, r0, #1
 800dd66:	b2d2      	uxtb	r2, r2
 800dd68:	f04f 0c01 	mov.w	ip, #1
 800dd6c:	e001      	b.n	800dd72 <uxr_stream_id_from_raw+0x16>
 800dd6e:	4684      	mov	ip, r0
 800dd70:	4602      	mov	r2, r0
 800dd72:	2300      	movs	r3, #0
 800dd74:	f360 0307 	bfi	r3, r0, #0, #8
 800dd78:	f362 230f 	bfi	r3, r2, #8, #8
 800dd7c:	f36c 4317 	bfi	r3, ip, #16, #8
 800dd80:	f361 631f 	bfi	r3, r1, #24, #8
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	2000      	movs	r0, #0
 800dd88:	f362 0007 	bfi	r0, r2, #0, #8
 800dd8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd90:	f362 200f 	bfi	r0, r2, #8, #8
 800dd94:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd98:	f362 4017 	bfi	r0, r2, #16, #8
 800dd9c:	0e1b      	lsrs	r3, r3, #24
 800dd9e:	f363 601f 	bfi	r0, r3, #24, #8
 800dda2:	b002      	add	sp, #8
 800dda4:	4770      	bx	lr
 800dda6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ddaa:	f04f 0c02 	mov.w	ip, #2
 800ddae:	e7e0      	b.n	800dd72 <uxr_stream_id_from_raw+0x16>

0800ddb0 <uxr_init_stream_storage>:
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	7403      	strb	r3, [r0, #16]
 800ddb4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ddb8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ddbc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop

0800ddc4 <uxr_reset_stream_storage>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	7c03      	ldrb	r3, [r0, #16]
 800ddc8:	4604      	mov	r4, r0
 800ddca:	b153      	cbz	r3, 800dde2 <uxr_reset_stream_storage+0x1e>
 800ddcc:	4606      	mov	r6, r0
 800ddce:	2500      	movs	r5, #0
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f006 fac9 	bl	8014368 <uxr_reset_output_best_effort_stream>
 800ddd6:	7c23      	ldrb	r3, [r4, #16]
 800ddd8:	3501      	adds	r5, #1
 800ddda:	42ab      	cmp	r3, r5
 800dddc:	f106 0610 	add.w	r6, r6, #16
 800dde0:	d8f6      	bhi.n	800ddd0 <uxr_reset_stream_storage+0xc>
 800dde2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dde6:	b163      	cbz	r3, 800de02 <uxr_reset_stream_storage+0x3e>
 800dde8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddec:	2500      	movs	r5, #0
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f006 f8bc 	bl	8013f6c <uxr_reset_input_best_effort_stream>
 800ddf4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	42ab      	cmp	r3, r5
 800ddfc:	f106 0602 	add.w	r6, r6, #2
 800de00:	d8f5      	bhi.n	800ddee <uxr_reset_stream_storage+0x2a>
 800de02:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800de06:	b163      	cbz	r3, 800de22 <uxr_reset_stream_storage+0x5e>
 800de08:	f104 0618 	add.w	r6, r4, #24
 800de0c:	2500      	movs	r5, #0
 800de0e:	4630      	mov	r0, r6
 800de10:	f006 fb56 	bl	80144c0 <uxr_reset_output_reliable_stream>
 800de14:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800de18:	3501      	adds	r5, #1
 800de1a:	42ab      	cmp	r3, r5
 800de1c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800de20:	d8f5      	bhi.n	800de0e <uxr_reset_stream_storage+0x4a>
 800de22:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de26:	b163      	cbz	r3, 800de42 <uxr_reset_stream_storage+0x7e>
 800de28:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800de2c:	2500      	movs	r5, #0
 800de2e:	4630      	mov	r0, r6
 800de30:	f006 f910 	bl	8014054 <uxr_reset_input_reliable_stream>
 800de34:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de38:	3501      	adds	r5, #1
 800de3a:	42ab      	cmp	r3, r5
 800de3c:	f106 0618 	add.w	r6, r6, #24
 800de40:	d8f5      	bhi.n	800de2e <uxr_reset_stream_storage+0x6a>
 800de42:	bd70      	pop	{r4, r5, r6, pc}

0800de44 <uxr_add_output_best_effort_buffer>:
 800de44:	b510      	push	{r4, lr}
 800de46:	7c04      	ldrb	r4, [r0, #16]
 800de48:	f104 0c01 	add.w	ip, r4, #1
 800de4c:	b082      	sub	sp, #8
 800de4e:	f880 c010 	strb.w	ip, [r0, #16]
 800de52:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800de56:	f006 fa7d 	bl	8014354 <uxr_init_output_best_effort_stream>
 800de5a:	2201      	movs	r2, #1
 800de5c:	4611      	mov	r1, r2
 800de5e:	4620      	mov	r0, r4
 800de60:	b002      	add	sp, #8
 800de62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de66:	f7ff bf4f 	b.w	800dd08 <uxr_stream_id>
 800de6a:	bf00      	nop

0800de6c <uxr_add_output_reliable_buffer>:
 800de6c:	b510      	push	{r4, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	4684      	mov	ip, r0
 800de72:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800de76:	9000      	str	r0, [sp, #0]
 800de78:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800de7c:	2028      	movs	r0, #40	@ 0x28
 800de7e:	fb00 c004 	mla	r0, r0, r4, ip
 800de82:	f104 0e01 	add.w	lr, r4, #1
 800de86:	3018      	adds	r0, #24
 800de88:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800de8c:	f006 fae0 	bl	8014450 <uxr_init_output_reliable_stream>
 800de90:	2201      	movs	r2, #1
 800de92:	2102      	movs	r1, #2
 800de94:	4620      	mov	r0, r4
 800de96:	b004      	add	sp, #16
 800de98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de9c:	f7ff bf34 	b.w	800dd08 <uxr_stream_id>

0800dea0 <uxr_add_input_best_effort_buffer>:
 800dea0:	b510      	push	{r4, lr}
 800dea2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800dea6:	4603      	mov	r3, r0
 800dea8:	1c62      	adds	r2, r4, #1
 800deaa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800deae:	b082      	sub	sp, #8
 800deb0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800deb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deb8:	f006 f854 	bl	8013f64 <uxr_init_input_best_effort_stream>
 800debc:	2200      	movs	r2, #0
 800debe:	2101      	movs	r1, #1
 800dec0:	4620      	mov	r0, r4
 800dec2:	b002      	add	sp, #8
 800dec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dec8:	f7ff bf1e 	b.w	800dd08 <uxr_stream_id>

0800decc <uxr_add_input_reliable_buffer>:
 800decc:	b510      	push	{r4, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	4684      	mov	ip, r0
 800ded2:	9806      	ldr	r0, [sp, #24]
 800ded4:	9000      	str	r0, [sp, #0]
 800ded6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800deda:	2018      	movs	r0, #24
 800dedc:	fb00 c004 	mla	r0, r0, r4, ip
 800dee0:	f104 0e01 	add.w	lr, r4, #1
 800dee4:	3048      	adds	r0, #72	@ 0x48
 800dee6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800deea:	f006 f887 	bl	8013ffc <uxr_init_input_reliable_stream>
 800deee:	2200      	movs	r2, #0
 800def0:	2102      	movs	r1, #2
 800def2:	4620      	mov	r0, r4
 800def4:	b004      	add	sp, #16
 800def6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800defa:	f7ff bf05 	b.w	800dd08 <uxr_stream_id>
 800defe:	bf00      	nop

0800df00 <uxr_get_output_best_effort_stream>:
 800df00:	7c03      	ldrb	r3, [r0, #16]
 800df02:	428b      	cmp	r3, r1
 800df04:	bf8c      	ite	hi
 800df06:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800df0a:	2000      	movls	r0, #0
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop

0800df10 <uxr_get_output_reliable_stream>:
 800df10:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800df14:	428b      	cmp	r3, r1
 800df16:	bf83      	ittte	hi
 800df18:	2328      	movhi	r3, #40	@ 0x28
 800df1a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800df1e:	3018      	addhi	r0, #24
 800df20:	2000      	movls	r0, #0
 800df22:	4770      	bx	lr

0800df24 <uxr_get_input_best_effort_stream>:
 800df24:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800df28:	428b      	cmp	r3, r1
 800df2a:	bf86      	itte	hi
 800df2c:	3121      	addhi	r1, #33	@ 0x21
 800df2e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800df32:	2000      	movls	r0, #0
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop

0800df38 <uxr_get_input_reliable_stream>:
 800df38:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800df3c:	428b      	cmp	r3, r1
 800df3e:	bf83      	ittte	hi
 800df40:	2318      	movhi	r3, #24
 800df42:	fb03 0001 	mlahi	r0, r3, r1, r0
 800df46:	3048      	addhi	r0, #72	@ 0x48
 800df48:	2000      	movls	r0, #0
 800df4a:	4770      	bx	lr

0800df4c <uxr_output_streams_confirmed>:
 800df4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800df50:	b183      	cbz	r3, 800df74 <uxr_output_streams_confirmed+0x28>
 800df52:	b570      	push	{r4, r5, r6, lr}
 800df54:	4606      	mov	r6, r0
 800df56:	f100 0518 	add.w	r5, r0, #24
 800df5a:	2400      	movs	r4, #0
 800df5c:	e001      	b.n	800df62 <uxr_output_streams_confirmed+0x16>
 800df5e:	3528      	adds	r5, #40	@ 0x28
 800df60:	b138      	cbz	r0, 800df72 <uxr_output_streams_confirmed+0x26>
 800df62:	4628      	mov	r0, r5
 800df64:	f006 fd1c 	bl	80149a0 <uxr_is_output_up_to_date>
 800df68:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800df6c:	3401      	adds	r4, #1
 800df6e:	42a3      	cmp	r3, r4
 800df70:	d8f5      	bhi.n	800df5e <uxr_output_streams_confirmed+0x12>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	2001      	movs	r0, #1
 800df76:	4770      	bx	lr

0800df78 <uxr_buffer_submessage_header>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	4604      	mov	r4, r0
 800df7c:	460e      	mov	r6, r1
 800df7e:	2104      	movs	r1, #4
 800df80:	4615      	mov	r5, r2
 800df82:	461f      	mov	r7, r3
 800df84:	f7fe fba4 	bl	800c6d0 <ucdr_align_to>
 800df88:	2301      	movs	r3, #1
 800df8a:	ea47 0203 	orr.w	r2, r7, r3
 800df8e:	4631      	mov	r1, r6
 800df90:	7523      	strb	r3, [r4, #20]
 800df92:	4620      	mov	r0, r4
 800df94:	462b      	mov	r3, r5
 800df96:	f000 fa27 	bl	800e3e8 <uxr_serialize_submessage_header>
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7fe fbae 	bl	800c6fc <ucdr_buffer_remaining>
 800dfa0:	42a8      	cmp	r0, r5
 800dfa2:	bf34      	ite	cc
 800dfa4:	2000      	movcc	r0, #0
 800dfa6:	2001      	movcs	r0, #1
 800dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfaa:	bf00      	nop

0800dfac <uxr_read_submessage_header>:
 800dfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	2104      	movs	r1, #4
 800dfb6:	4616      	mov	r6, r2
 800dfb8:	4698      	mov	r8, r3
 800dfba:	f7fe fb89 	bl	800c6d0 <ucdr_align_to>
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f7fe fb9c 	bl	800c6fc <ucdr_buffer_remaining>
 800dfc4:	2803      	cmp	r0, #3
 800dfc6:	bf8c      	ite	hi
 800dfc8:	2701      	movhi	r7, #1
 800dfca:	2700      	movls	r7, #0
 800dfcc:	d802      	bhi.n	800dfd4 <uxr_read_submessage_header+0x28>
 800dfce:	4638      	mov	r0, r7
 800dfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd4:	4633      	mov	r3, r6
 800dfd6:	4642      	mov	r2, r8
 800dfd8:	4620      	mov	r0, r4
 800dfda:	4629      	mov	r1, r5
 800dfdc:	f000 fa18 	bl	800e410 <uxr_deserialize_submessage_header>
 800dfe0:	f898 3000 	ldrb.w	r3, [r8]
 800dfe4:	f003 0201 	and.w	r2, r3, #1
 800dfe8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dfec:	f888 3000 	strb.w	r3, [r8]
 800dff0:	7522      	strb	r2, [r4, #20]
 800dff2:	4638      	mov	r0, r7
 800dff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dff8 <uxr_submessage_padding>:
 800dff8:	f010 0003 	ands.w	r0, r0, #3
 800dffc:	bf18      	it	ne
 800dffe:	f1c0 0004 	rsbne	r0, r0, #4
 800e002:	4770      	bx	lr

0800e004 <uxr_millis>:
 800e004:	b510      	push	{r4, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	4669      	mov	r1, sp
 800e00a:	2001      	movs	r0, #1
 800e00c:	f7f4 f970 	bl	80022f0 <clock_gettime>
 800e010:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e014:	4906      	ldr	r1, [pc, #24]	@ (800e030 <uxr_millis+0x2c>)
 800e016:	fba0 0301 	umull	r0, r3, r0, r1
 800e01a:	1900      	adds	r0, r0, r4
 800e01c:	fb01 3102 	mla	r1, r1, r2, r3
 800e020:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e024:	4a03      	ldr	r2, [pc, #12]	@ (800e034 <uxr_millis+0x30>)
 800e026:	2300      	movs	r3, #0
 800e028:	f7f2 fc98 	bl	800095c <__aeabi_ldivmod>
 800e02c:	b004      	add	sp, #16
 800e02e:	bd10      	pop	{r4, pc}
 800e030:	3b9aca00 	.word	0x3b9aca00
 800e034:	000f4240 	.word	0x000f4240

0800e038 <uxr_nanos>:
 800e038:	b510      	push	{r4, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	4669      	mov	r1, sp
 800e03e:	2001      	movs	r0, #1
 800e040:	f7f4 f956 	bl	80022f0 <clock_gettime>
 800e044:	4a06      	ldr	r2, [pc, #24]	@ (800e060 <uxr_nanos+0x28>)
 800e046:	9800      	ldr	r0, [sp, #0]
 800e048:	9902      	ldr	r1, [sp, #8]
 800e04a:	9c01      	ldr	r4, [sp, #4]
 800e04c:	fba0 0302 	umull	r0, r3, r0, r2
 800e050:	1840      	adds	r0, r0, r1
 800e052:	fb02 3304 	mla	r3, r2, r4, r3
 800e056:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e05a:	b004      	add	sp, #16
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	bf00      	nop
 800e060:	3b9aca00 	.word	0x3b9aca00

0800e064 <on_full_output_buffer_fragmented>:
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	460c      	mov	r4, r1
 800e06a:	b08a      	sub	sp, #40	@ 0x28
 800e06c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e070:	4606      	mov	r6, r0
 800e072:	f104 0008 	add.w	r0, r4, #8
 800e076:	f7ff ff4b 	bl	800df10 <uxr_get_output_reliable_stream>
 800e07a:	4605      	mov	r5, r0
 800e07c:	f006 fc9a 	bl	80149b4 <get_available_free_slots>
 800e080:	b968      	cbnz	r0, 800e09e <on_full_output_buffer_fragmented+0x3a>
 800e082:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e086:	4620      	mov	r0, r4
 800e088:	4798      	blx	r3
 800e08a:	b918      	cbnz	r0, 800e094 <on_full_output_buffer_fragmented+0x30>
 800e08c:	2001      	movs	r0, #1
 800e08e:	b00a      	add	sp, #40	@ 0x28
 800e090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e094:	4628      	mov	r0, r5
 800e096:	f006 fc8d 	bl	80149b4 <get_available_free_slots>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d0f6      	beq.n	800e08c <on_full_output_buffer_fragmented+0x28>
 800e09e:	8929      	ldrh	r1, [r5, #8]
 800e0a0:	89eb      	ldrh	r3, [r5, #14]
 800e0a2:	7b28      	ldrb	r0, [r5, #12]
 800e0a4:	686a      	ldr	r2, [r5, #4]
 800e0a6:	fbb2 f8f1 	udiv	r8, r2, r1
 800e0aa:	fbb3 f2f1 	udiv	r2, r3, r1
 800e0ae:	fb01 3112 	mls	r1, r1, r2, r3
 800e0b2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e0b6:	b289      	uxth	r1, r1
 800e0b8:	fb08 f101 	mul.w	r1, r8, r1
 800e0bc:	30fc      	adds	r0, #252	@ 0xfc
 800e0be:	f1a8 0804 	sub.w	r8, r8, #4
 800e0c2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e0c6:	4440      	add	r0, r8
 800e0c8:	b287      	uxth	r7, r0
 800e0ca:	1bdb      	subs	r3, r3, r7
 800e0cc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	3104      	adds	r1, #4
 800e0d4:	4419      	add	r1, r3
 800e0d6:	4642      	mov	r2, r8
 800e0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	a802      	add	r0, sp, #8
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f7fe fac9 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800e0e6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e0ea:	f102 0308 	add.w	r3, r2, #8
 800e0ee:	4543      	cmp	r3, r8
 800e0f0:	d928      	bls.n	800e144 <on_full_output_buffer_fragmented+0xe0>
 800e0f2:	463a      	mov	r2, r7
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	210d      	movs	r1, #13
 800e0f8:	a802      	add	r0, sp, #8
 800e0fa:	f7ff ff3d 	bl	800df78 <uxr_buffer_submessage_header>
 800e0fe:	8929      	ldrh	r1, [r5, #8]
 800e100:	89eb      	ldrh	r3, [r5, #14]
 800e102:	fbb3 f2f1 	udiv	r2, r3, r1
 800e106:	fb01 3312 	mls	r3, r1, r2, r3
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	686a      	ldr	r2, [r5, #4]
 800e10e:	fbb2 f2f1 	udiv	r2, r2, r1
 800e112:	fb02 f303 	mul.w	r3, r2, r3
 800e116:	682a      	ldr	r2, [r5, #0]
 800e118:	f842 8003 	str.w	r8, [r2, r3]
 800e11c:	89e8      	ldrh	r0, [r5, #14]
 800e11e:	2101      	movs	r1, #1
 800e120:	f006 fd98 	bl	8014c54 <uxr_seq_num_add>
 800e124:	9904      	ldr	r1, [sp, #16]
 800e126:	9a03      	ldr	r2, [sp, #12]
 800e128:	81e8      	strh	r0, [r5, #14]
 800e12a:	1a52      	subs	r2, r2, r1
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7fe fab5 	bl	800c69c <ucdr_init_buffer>
 800e132:	4630      	mov	r0, r6
 800e134:	490f      	ldr	r1, [pc, #60]	@ (800e174 <on_full_output_buffer_fragmented+0x110>)
 800e136:	4622      	mov	r2, r4
 800e138:	f7fe fa84 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800e13c:	2000      	movs	r0, #0
 800e13e:	b00a      	add	sp, #40	@ 0x28
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	b292      	uxth	r2, r2
 800e146:	2302      	movs	r3, #2
 800e148:	210d      	movs	r1, #13
 800e14a:	a802      	add	r0, sp, #8
 800e14c:	f7ff ff14 	bl	800df78 <uxr_buffer_submessage_header>
 800e150:	8928      	ldrh	r0, [r5, #8]
 800e152:	89eb      	ldrh	r3, [r5, #14]
 800e154:	fbb3 f1f0 	udiv	r1, r3, r0
 800e158:	fb00 3311 	mls	r3, r0, r1, r3
 800e15c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e160:	6869      	ldr	r1, [r5, #4]
 800e162:	fbb1 f1f0 	udiv	r1, r1, r0
 800e166:	b29b      	uxth	r3, r3
 800e168:	fb01 f303 	mul.w	r3, r1, r3
 800e16c:	6829      	ldr	r1, [r5, #0]
 800e16e:	3208      	adds	r2, #8
 800e170:	50ca      	str	r2, [r1, r3]
 800e172:	e7d3      	b.n	800e11c <on_full_output_buffer_fragmented+0xb8>
 800e174:	0800e065 	.word	0x0800e065

0800e178 <uxr_prepare_output_stream>:
 800e178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17a:	b087      	sub	sp, #28
 800e17c:	2707      	movs	r7, #7
 800e17e:	9202      	str	r2, [sp, #8]
 800e180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e182:	9103      	str	r1, [sp, #12]
 800e184:	2500      	movs	r5, #0
 800e186:	3204      	adds	r2, #4
 800e188:	e9cd 7500 	strd	r7, r5, [sp]
 800e18c:	461c      	mov	r4, r3
 800e18e:	4606      	mov	r6, r0
 800e190:	f7ff fc54 	bl	800da3c <uxr_prepare_stream_to_write_submessage>
 800e194:	f080 0201 	eor.w	r2, r0, #1
 800e198:	b2d2      	uxtb	r2, r2
 800e19a:	75a2      	strb	r2, [r4, #22]
 800e19c:	b112      	cbz	r2, 800e1a4 <uxr_prepare_output_stream+0x2c>
 800e19e:	4628      	mov	r0, r5
 800e1a0:	b007      	add	sp, #28
 800e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a4:	aa05      	add	r2, sp, #20
 800e1a6:	9902      	ldr	r1, [sp, #8]
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f7ff fd7d 	bl	800dca8 <uxr_init_base_object_request>
 800e1ae:	a905      	add	r1, sp, #20
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f001 f88c 	bl	800f2d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e1b8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e1bc:	69a6      	ldr	r6, [r4, #24]
 800e1be:	69e7      	ldr	r7, [r4, #28]
 800e1c0:	1a52      	subs	r2, r2, r1
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f7fe fa6a 	bl	800c69c <ucdr_init_buffer>
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	463a      	mov	r2, r7
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	f7fe fa39 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	b007      	add	sp, #28
 800e1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1d8 <uxr_prepare_output_stream_fragmented>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	b091      	sub	sp, #68	@ 0x44
 800e1de:	4605      	mov	r5, r0
 800e1e0:	9105      	str	r1, [sp, #20]
 800e1e2:	3008      	adds	r0, #8
 800e1e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e1e8:	461e      	mov	r6, r3
 800e1ea:	9204      	str	r2, [sp, #16]
 800e1ec:	f7ff fe90 	bl	800df10 <uxr_get_output_reliable_stream>
 800e1f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	f000 8091 	beq.w	800e31c <uxr_prepare_output_stream_fragmented+0x144>
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	f000 808d 	beq.w	800e31c <uxr_prepare_output_stream_fragmented+0x144>
 800e202:	f006 fbd7 	bl	80149b4 <get_available_free_slots>
 800e206:	2800      	cmp	r0, #0
 800e208:	f000 8083 	beq.w	800e312 <uxr_prepare_output_stream_fragmented+0x13a>
 800e20c:	8922      	ldrh	r2, [r4, #8]
 800e20e:	89e7      	ldrh	r7, [r4, #14]
 800e210:	fbb7 f9f2 	udiv	r9, r7, r2
 800e214:	fb02 7919 	mls	r9, r2, r9, r7
 800e218:	fa1f f989 	uxth.w	r9, r9
 800e21c:	6863      	ldr	r3, [r4, #4]
 800e21e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	9203      	str	r2, [sp, #12]
 800e226:	fb02 f909 	mul.w	r9, r2, r9
 800e22a:	f109 0904 	add.w	r9, r9, #4
 800e22e:	4499      	add	r9, r3
 800e230:	7b23      	ldrb	r3, [r4, #12]
 800e232:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e236:	4543      	cmp	r3, r8
 800e238:	f1a2 0b04 	sub.w	fp, r2, #4
 800e23c:	d37a      	bcc.n	800e334 <uxr_prepare_output_stream_fragmented+0x15c>
 800e23e:	f1ab 0a04 	sub.w	sl, fp, #4
 800e242:	ebaa 0a03 	sub.w	sl, sl, r3
 800e246:	465a      	mov	r2, fp
 800e248:	2300      	movs	r3, #0
 800e24a:	4649      	mov	r1, r9
 800e24c:	a808      	add	r0, sp, #32
 800e24e:	f8cd 8000 	str.w	r8, [sp]
 800e252:	f7fe fa11 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800e256:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e258:	fa1f fa8a 	uxth.w	sl, sl
 800e25c:	4652      	mov	r2, sl
 800e25e:	f103 0a08 	add.w	sl, r3, #8
 800e262:	45da      	cmp	sl, fp
 800e264:	bf34      	ite	cc
 800e266:	2302      	movcc	r3, #2
 800e268:	2300      	movcs	r3, #0
 800e26a:	210d      	movs	r1, #13
 800e26c:	a808      	add	r0, sp, #32
 800e26e:	f7ff fe83 	bl	800df78 <uxr_buffer_submessage_header>
 800e272:	8921      	ldrh	r1, [r4, #8]
 800e274:	fbb7 f2f1 	udiv	r2, r7, r1
 800e278:	fb01 7212 	mls	r2, r1, r2, r7
 800e27c:	b292      	uxth	r2, r2
 800e27e:	6863      	ldr	r3, [r4, #4]
 800e280:	fbb3 f3f1 	udiv	r3, r3, r1
 800e284:	fb02 f303 	mul.w	r3, r2, r3
 800e288:	6822      	ldr	r2, [r4, #0]
 800e28a:	4638      	mov	r0, r7
 800e28c:	f842 b003 	str.w	fp, [r2, r3]
 800e290:	2101      	movs	r1, #1
 800e292:	f006 fcdf 	bl	8014c54 <uxr_seq_num_add>
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	f108 0104 	add.w	r1, r8, #4
 800e29c:	f1a3 0208 	sub.w	r2, r3, #8
 800e2a0:	eba2 0208 	sub.w	r2, r2, r8
 800e2a4:	4449      	add	r1, r9
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f7fe f9f7 	bl	800c69c <ucdr_init_buffer>
 800e2ae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e2b0:	81e7      	strh	r7, [r4, #14]
 800e2b2:	1d1a      	adds	r2, r3, #4
 800e2b4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e2b8:	bf28      	it	cs
 800e2ba:	2200      	movcs	r2, #0
 800e2bc:	2300      	movs	r3, #0
 800e2be:	b292      	uxth	r2, r2
 800e2c0:	2107      	movs	r1, #7
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff fe58 	bl	800df78 <uxr_buffer_submessage_header>
 800e2c8:	9904      	ldr	r1, [sp, #16]
 800e2ca:	aa07      	add	r2, sp, #28
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f7ff fceb 	bl	800dca8 <uxr_init_base_object_request>
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	b318      	cbz	r0, 800e31e <uxr_prepare_output_stream_fragmented+0x146>
 800e2d6:	a907      	add	r1, sp, #28
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f000 fff9 	bl	800f2d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e2de:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	1a52      	subs	r2, r2, r1
 800e2e6:	f7fe f9d9 	bl	800c69c <ucdr_init_buffer>
 800e2ea:	9b05      	ldr	r3, [sp, #20]
 800e2ec:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e2f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e2f2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e2f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e2f8:	491b      	ldr	r1, [pc, #108]	@ (800e368 <uxr_prepare_output_stream_fragmented+0x190>)
 800e2fa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e2fe:	4630      	mov	r0, r6
 800e300:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e304:	462a      	mov	r2, r5
 800e306:	f7fe f99d 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800e30a:	4620      	mov	r0, r4
 800e30c:	b011      	add	sp, #68	@ 0x44
 800e30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e312:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e314:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e316:	4628      	mov	r0, r5
 800e318:	4798      	blx	r3
 800e31a:	b920      	cbnz	r0, 800e326 <uxr_prepare_output_stream_fragmented+0x14e>
 800e31c:	2400      	movs	r4, #0
 800e31e:	4620      	mov	r0, r4
 800e320:	b011      	add	sp, #68	@ 0x44
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e326:	4620      	mov	r0, r4
 800e328:	f006 fb44 	bl	80149b4 <get_available_free_slots>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	f47f af6d 	bne.w	800e20c <uxr_prepare_output_stream_fragmented+0x34>
 800e332:	e7f3      	b.n	800e31c <uxr_prepare_output_stream_fragmented+0x144>
 800e334:	4638      	mov	r0, r7
 800e336:	2101      	movs	r1, #1
 800e338:	f006 fc8c 	bl	8014c54 <uxr_seq_num_add>
 800e33c:	8921      	ldrh	r1, [r4, #8]
 800e33e:	fbb0 f2f1 	udiv	r2, r0, r1
 800e342:	fb01 0912 	mls	r9, r1, r2, r0
 800e346:	fa1f f289 	uxth.w	r2, r9
 800e34a:	6863      	ldr	r3, [r4, #4]
 800e34c:	fbb3 f9f1 	udiv	r9, r3, r1
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	fb02 f909 	mul.w	r9, r2, r9
 800e356:	f109 0904 	add.w	r9, r9, #4
 800e35a:	4499      	add	r9, r3
 800e35c:	4607      	mov	r7, r0
 800e35e:	7b23      	ldrb	r3, [r4, #12]
 800e360:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e364:	e76b      	b.n	800e23e <uxr_prepare_output_stream_fragmented+0x66>
 800e366:	bf00      	nop
 800e368:	0800e065 	.word	0x0800e065

0800e36c <uxr_serialize_message_header>:
 800e36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e36e:	b083      	sub	sp, #12
 800e370:	4616      	mov	r6, r2
 800e372:	4604      	mov	r4, r0
 800e374:	9301      	str	r3, [sp, #4]
 800e376:	460d      	mov	r5, r1
 800e378:	9f08      	ldr	r7, [sp, #32]
 800e37a:	f7fd f8bb 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e37e:	4631      	mov	r1, r6
 800e380:	4620      	mov	r0, r4
 800e382:	f7fd f8b7 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e386:	9a01      	ldr	r2, [sp, #4]
 800e388:	2101      	movs	r1, #1
 800e38a:	4620      	mov	r0, r4
 800e38c:	f7fd f95e 	bl	800b64c <ucdr_serialize_endian_uint16_t>
 800e390:	062b      	lsls	r3, r5, #24
 800e392:	d501      	bpl.n	800e398 <uxr_serialize_message_header+0x2c>
 800e394:	b003      	add	sp, #12
 800e396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e398:	2204      	movs	r2, #4
 800e39a:	4639      	mov	r1, r7
 800e39c:	4620      	mov	r0, r4
 800e39e:	b003      	add	sp, #12
 800e3a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3a4:	f005 bbe4 	b.w	8013b70 <ucdr_serialize_array_uint8_t>

0800e3a8 <uxr_deserialize_message_header>:
 800e3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	4616      	mov	r6, r2
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	9f08      	ldr	r7, [sp, #32]
 800e3b6:	f7fd f8b3 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7fd f8af 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e3c2:	9a01      	ldr	r2, [sp, #4]
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f7fd fa34 	bl	800b834 <ucdr_deserialize_endian_uint16_t>
 800e3cc:	f995 3000 	ldrsb.w	r3, [r5]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	da01      	bge.n	800e3d8 <uxr_deserialize_message_header+0x30>
 800e3d4:	b003      	add	sp, #12
 800e3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d8:	2204      	movs	r2, #4
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4620      	mov	r0, r4
 800e3de:	b003      	add	sp, #12
 800e3e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3e4:	f005 bc28 	b.w	8013c38 <ucdr_deserialize_array_uint8_t>

0800e3e8 <uxr_serialize_submessage_header>:
 800e3e8:	b530      	push	{r4, r5, lr}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	4615      	mov	r5, r2
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	9301      	str	r3, [sp, #4]
 800e3f2:	f7fd f87f 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7fd f87b 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e3fe:	9a01      	ldr	r2, [sp, #4]
 800e400:	2101      	movs	r1, #1
 800e402:	4620      	mov	r0, r4
 800e404:	b003      	add	sp, #12
 800e406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e40a:	f7fd b91f 	b.w	800b64c <ucdr_serialize_endian_uint16_t>
 800e40e:	bf00      	nop

0800e410 <uxr_deserialize_submessage_header>:
 800e410:	b530      	push	{r4, r5, lr}
 800e412:	b083      	sub	sp, #12
 800e414:	4615      	mov	r5, r2
 800e416:	4604      	mov	r4, r0
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	f7fd f881 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e41e:	4629      	mov	r1, r5
 800e420:	4620      	mov	r0, r4
 800e422:	f7fd f87d 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e426:	9a01      	ldr	r2, [sp, #4]
 800e428:	2101      	movs	r1, #1
 800e42a:	4620      	mov	r0, r4
 800e42c:	b003      	add	sp, #12
 800e42e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e432:	f7fd b9ff 	b.w	800b834 <ucdr_deserialize_endian_uint16_t>
 800e436:	bf00      	nop

0800e438 <uxr_serialize_CLIENT_Representation>:
 800e438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e43c:	2204      	movs	r2, #4
 800e43e:	460e      	mov	r6, r1
 800e440:	4605      	mov	r5, r0
 800e442:	f005 fb95 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e446:	2202      	movs	r2, #2
 800e448:	4607      	mov	r7, r0
 800e44a:	1d31      	adds	r1, r6, #4
 800e44c:	4628      	mov	r0, r5
 800e44e:	f005 fb8f 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e452:	4038      	ands	r0, r7
 800e454:	2202      	movs	r2, #2
 800e456:	1db1      	adds	r1, r6, #6
 800e458:	b2c7      	uxtb	r7, r0
 800e45a:	4628      	mov	r0, r5
 800e45c:	f005 fb88 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e460:	2204      	movs	r2, #4
 800e462:	4007      	ands	r7, r0
 800e464:	f106 0108 	add.w	r1, r6, #8
 800e468:	4628      	mov	r0, r5
 800e46a:	f005 fb81 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e46e:	7b31      	ldrb	r1, [r6, #12]
 800e470:	4007      	ands	r7, r0
 800e472:	4628      	mov	r0, r5
 800e474:	f7fd f83e 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e478:	7b71      	ldrb	r1, [r6, #13]
 800e47a:	4007      	ands	r7, r0
 800e47c:	4628      	mov	r0, r5
 800e47e:	f7fd f80b 	bl	800b498 <ucdr_serialize_bool>
 800e482:	7b73      	ldrb	r3, [r6, #13]
 800e484:	ea07 0800 	and.w	r8, r7, r0
 800e488:	b93b      	cbnz	r3, 800e49a <uxr_serialize_CLIENT_Representation+0x62>
 800e48a:	8bb1      	ldrh	r1, [r6, #28]
 800e48c:	4628      	mov	r0, r5
 800e48e:	f7fd f85d 	bl	800b54c <ucdr_serialize_uint16_t>
 800e492:	ea08 0000 	and.w	r0, r8, r0
 800e496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49a:	6931      	ldr	r1, [r6, #16]
 800e49c:	4628      	mov	r0, r5
 800e49e:	f7fd fa3f 	bl	800b920 <ucdr_serialize_uint32_t>
 800e4a2:	6933      	ldr	r3, [r6, #16]
 800e4a4:	b1e3      	cbz	r3, 800e4e0 <uxr_serialize_CLIENT_Representation+0xa8>
 800e4a6:	b1c0      	cbz	r0, 800e4da <uxr_serialize_CLIENT_Representation+0xa2>
 800e4a8:	4637      	mov	r7, r6
 800e4aa:	f04f 0900 	mov.w	r9, #0
 800e4ae:	e001      	b.n	800e4b4 <uxr_serialize_CLIENT_Representation+0x7c>
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	b194      	cbz	r4, 800e4da <uxr_serialize_CLIENT_Representation+0xa2>
 800e4b4:	6979      	ldr	r1, [r7, #20]
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f005 fc7a 	bl	8013db0 <ucdr_serialize_string>
 800e4bc:	69b9      	ldr	r1, [r7, #24]
 800e4be:	4604      	mov	r4, r0
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f005 fc75 	bl	8013db0 <ucdr_serialize_string>
 800e4c6:	6933      	ldr	r3, [r6, #16]
 800e4c8:	f109 0901 	add.w	r9, r9, #1
 800e4cc:	4004      	ands	r4, r0
 800e4ce:	4599      	cmp	r9, r3
 800e4d0:	b2e4      	uxtb	r4, r4
 800e4d2:	d3ed      	bcc.n	800e4b0 <uxr_serialize_CLIENT_Representation+0x78>
 800e4d4:	ea08 0804 	and.w	r8, r8, r4
 800e4d8:	e7d7      	b.n	800e48a <uxr_serialize_CLIENT_Representation+0x52>
 800e4da:	f04f 0800 	mov.w	r8, #0
 800e4de:	e7d4      	b.n	800e48a <uxr_serialize_CLIENT_Representation+0x52>
 800e4e0:	ea08 0800 	and.w	r8, r8, r0
 800e4e4:	e7d1      	b.n	800e48a <uxr_serialize_CLIENT_Representation+0x52>
 800e4e6:	bf00      	nop

0800e4e8 <uxr_deserialize_CLIENT_Representation>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	2204      	movs	r2, #4
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	f005 fba1 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	1d21      	adds	r1, r4, #4
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	f005 fb9b 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800e502:	4038      	ands	r0, r7
 800e504:	2202      	movs	r2, #2
 800e506:	1da1      	adds	r1, r4, #6
 800e508:	b2c6      	uxtb	r6, r0
 800e50a:	4628      	mov	r0, r5
 800e50c:	f005 fb94 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800e510:	2204      	movs	r2, #4
 800e512:	4006      	ands	r6, r0
 800e514:	f104 0108 	add.w	r1, r4, #8
 800e518:	4628      	mov	r0, r5
 800e51a:	f005 fb8d 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800e51e:	f104 010c 	add.w	r1, r4, #12
 800e522:	4006      	ands	r6, r0
 800e524:	4628      	mov	r0, r5
 800e526:	f7fc fffb 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e52a:	f104 010d 	add.w	r1, r4, #13
 800e52e:	ea06 0700 	and.w	r7, r6, r0
 800e532:	4628      	mov	r0, r5
 800e534:	f7fc ffc6 	bl	800b4c4 <ucdr_deserialize_bool>
 800e538:	7b63      	ldrb	r3, [r4, #13]
 800e53a:	4007      	ands	r7, r0
 800e53c:	b93b      	cbnz	r3, 800e54e <uxr_deserialize_CLIENT_Representation+0x66>
 800e53e:	f104 011c 	add.w	r1, r4, #28
 800e542:	4628      	mov	r0, r5
 800e544:	f7fd f902 	bl	800b74c <ucdr_deserialize_uint16_t>
 800e548:	4038      	ands	r0, r7
 800e54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e54e:	f104 0110 	add.w	r1, r4, #16
 800e552:	4628      	mov	r0, r5
 800e554:	f7fd fb14 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800e558:	6923      	ldr	r3, [r4, #16]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d903      	bls.n	800e566 <uxr_deserialize_CLIENT_Representation+0x7e>
 800e55e:	2301      	movs	r3, #1
 800e560:	75ab      	strb	r3, [r5, #22]
 800e562:	2700      	movs	r7, #0
 800e564:	e7eb      	b.n	800e53e <uxr_deserialize_CLIENT_Representation+0x56>
 800e566:	b30b      	cbz	r3, 800e5ac <uxr_deserialize_CLIENT_Representation+0xc4>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d0fa      	beq.n	800e562 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e56c:	46a0      	mov	r8, r4
 800e56e:	f04f 0900 	mov.w	r9, #0
 800e572:	e001      	b.n	800e578 <uxr_deserialize_CLIENT_Representation+0x90>
 800e574:	2e00      	cmp	r6, #0
 800e576:	d0f4      	beq.n	800e562 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e578:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e580:	4628      	mov	r0, r5
 800e582:	f005 fc25 	bl	8013dd0 <ucdr_deserialize_string>
 800e586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e58a:	4606      	mov	r6, r0
 800e58c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e590:	4628      	mov	r0, r5
 800e592:	f005 fc1d 	bl	8013dd0 <ucdr_deserialize_string>
 800e596:	6923      	ldr	r3, [r4, #16]
 800e598:	f109 0901 	add.w	r9, r9, #1
 800e59c:	4006      	ands	r6, r0
 800e59e:	4599      	cmp	r9, r3
 800e5a0:	f108 0808 	add.w	r8, r8, #8
 800e5a4:	b2f6      	uxtb	r6, r6
 800e5a6:	d3e5      	bcc.n	800e574 <uxr_deserialize_CLIENT_Representation+0x8c>
 800e5a8:	4037      	ands	r7, r6
 800e5aa:	e7c8      	b.n	800e53e <uxr_deserialize_CLIENT_Representation+0x56>
 800e5ac:	4007      	ands	r7, r0
 800e5ae:	e7c6      	b.n	800e53e <uxr_deserialize_CLIENT_Representation+0x56>

0800e5b0 <uxr_serialize_AGENT_Representation>:
 800e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b4:	2204      	movs	r2, #4
 800e5b6:	460f      	mov	r7, r1
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	f005 fad9 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e5be:	2202      	movs	r2, #2
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	1d39      	adds	r1, r7, #4
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	f005 fad3 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e5ca:	4020      	ands	r0, r4
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	1db9      	adds	r1, r7, #6
 800e5d0:	b2c4      	uxtb	r4, r0
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f005 facc 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e5d8:	7a39      	ldrb	r1, [r7, #8]
 800e5da:	4004      	ands	r4, r0
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f7fc ff5b 	bl	800b498 <ucdr_serialize_bool>
 800e5e2:	7a3b      	ldrb	r3, [r7, #8]
 800e5e4:	ea00 0804 	and.w	r8, r0, r4
 800e5e8:	b913      	cbnz	r3, 800e5f0 <uxr_serialize_AGENT_Representation+0x40>
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5f0:	68f9      	ldr	r1, [r7, #12]
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f7fd f994 	bl	800b920 <ucdr_serialize_uint32_t>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	b303      	cbz	r3, 800e63e <uxr_serialize_AGENT_Representation+0x8e>
 800e5fc:	b1d0      	cbz	r0, 800e634 <uxr_serialize_AGENT_Representation+0x84>
 800e5fe:	463e      	mov	r6, r7
 800e600:	f04f 0900 	mov.w	r9, #0
 800e604:	e001      	b.n	800e60a <uxr_serialize_AGENT_Representation+0x5a>
 800e606:	3608      	adds	r6, #8
 800e608:	b1a4      	cbz	r4, 800e634 <uxr_serialize_AGENT_Representation+0x84>
 800e60a:	6931      	ldr	r1, [r6, #16]
 800e60c:	4628      	mov	r0, r5
 800e60e:	f005 fbcf 	bl	8013db0 <ucdr_serialize_string>
 800e612:	6971      	ldr	r1, [r6, #20]
 800e614:	4604      	mov	r4, r0
 800e616:	4628      	mov	r0, r5
 800e618:	f005 fbca 	bl	8013db0 <ucdr_serialize_string>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f109 0901 	add.w	r9, r9, #1
 800e622:	4004      	ands	r4, r0
 800e624:	4599      	cmp	r9, r3
 800e626:	b2e4      	uxtb	r4, r4
 800e628:	d3ed      	bcc.n	800e606 <uxr_serialize_AGENT_Representation+0x56>
 800e62a:	ea08 0804 	and.w	r8, r8, r4
 800e62e:	4640      	mov	r0, r8
 800e630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e634:	f04f 0800 	mov.w	r8, #0
 800e638:	4640      	mov	r0, r8
 800e63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e63e:	ea08 0800 	and.w	r8, r8, r0
 800e642:	e7d2      	b.n	800e5ea <uxr_serialize_AGENT_Representation+0x3a>

0800e644 <uxr_serialize_DATAWRITER_Representation>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	460d      	mov	r5, r1
 800e648:	7809      	ldrb	r1, [r1, #0]
 800e64a:	4606      	mov	r6, r0
 800e64c:	f7fc ff52 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e650:	4604      	mov	r4, r0
 800e652:	b130      	cbz	r0, 800e662 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e654:	782b      	ldrb	r3, [r5, #0]
 800e656:	2b02      	cmp	r3, #2
 800e658:	d00c      	beq.n	800e674 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d010      	beq.n	800e680 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d008      	beq.n	800e674 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e662:	2202      	movs	r2, #2
 800e664:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e668:	4630      	mov	r0, r6
 800e66a:	f005 fa81 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e66e:	4020      	ands	r0, r4
 800e670:	b2c0      	uxtb	r0, r0
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	6869      	ldr	r1, [r5, #4]
 800e676:	4630      	mov	r0, r6
 800e678:	f005 fb9a 	bl	8013db0 <ucdr_serialize_string>
 800e67c:	4604      	mov	r4, r0
 800e67e:	e7f0      	b.n	800e662 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e680:	4629      	mov	r1, r5
 800e682:	4630      	mov	r0, r6
 800e684:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e688:	3104      	adds	r1, #4
 800e68a:	f005 fb65 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800e68e:	4604      	mov	r4, r0
 800e690:	e7e7      	b.n	800e662 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e692:	bf00      	nop

0800e694 <uxr_serialize_ObjectVariant.part.0>:
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	780b      	ldrb	r3, [r1, #0]
 800e698:	3b01      	subs	r3, #1
 800e69a:	460c      	mov	r4, r1
 800e69c:	4605      	mov	r5, r0
 800e69e:	2b0d      	cmp	r3, #13
 800e6a0:	d854      	bhi.n	800e74c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e6a2:	e8df f003 	tbb	[pc, r3]
 800e6a6:	0730      	.short	0x0730
 800e6a8:	07071b1b 	.word	0x07071b1b
 800e6ac:	0c530707 	.word	0x0c530707
 800e6b0:	494e0c0c 	.word	0x494e0c0c
 800e6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b8:	3104      	adds	r1, #4
 800e6ba:	f7ff bfc3 	b.w	800e644 <uxr_serialize_DATAWRITER_Representation>
 800e6be:	7909      	ldrb	r1, [r1, #4]
 800e6c0:	f7fc ff18 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e6c4:	b1e8      	cbz	r0, 800e702 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e6c6:	7923      	ldrb	r3, [r4, #4]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d001      	beq.n	800e6d0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d13d      	bne.n	800e74c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e6d0:	68a1      	ldr	r1, [r4, #8]
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6d8:	f005 bb6a 	b.w	8013db0 <ucdr_serialize_string>
 800e6dc:	7909      	ldrb	r1, [r1, #4]
 800e6de:	f7fc ff09 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	b120      	cbz	r0, 800e6f0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e6e6:	7923      	ldrb	r3, [r4, #4]
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d039      	beq.n	800e760 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d02f      	beq.n	800e750 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e6f0:	2202      	movs	r2, #2
 800e6f2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f005 fa3a 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800e6fc:	4030      	ands	r0, r6
 800e6fe:	b2c0      	uxtb	r0, r0
 800e700:	bd70      	pop	{r4, r5, r6, pc}
 800e702:	2000      	movs	r0, #0
 800e704:	bd70      	pop	{r4, r5, r6, pc}
 800e706:	7909      	ldrb	r1, [r1, #4]
 800e708:	f7fc fef4 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800e70c:	4606      	mov	r6, r0
 800e70e:	b158      	cbz	r0, 800e728 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e710:	7923      	ldrb	r3, [r4, #4]
 800e712:	2b02      	cmp	r3, #2
 800e714:	d003      	beq.n	800e71e <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e716:	2b03      	cmp	r3, #3
 800e718:	d028      	beq.n	800e76c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d104      	bne.n	800e728 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e71e:	68a1      	ldr	r1, [r4, #8]
 800e720:	4628      	mov	r0, r5
 800e722:	f005 fb45 	bl	8013db0 <ucdr_serialize_string>
 800e726:	4606      	mov	r6, r0
 800e728:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e72c:	4628      	mov	r0, r5
 800e72e:	f7fd fc1d 	bl	800bf6c <ucdr_serialize_int16_t>
 800e732:	4030      	ands	r0, r6
 800e734:	b2c0      	uxtb	r0, r0
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e73c:	3104      	adds	r1, #4
 800e73e:	f7ff be7b 	b.w	800e438 <uxr_serialize_CLIENT_Representation>
 800e742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e746:	3104      	adds	r1, #4
 800e748:	f7ff bf32 	b.w	800e5b0 <uxr_serialize_AGENT_Representation>
 800e74c:	2001      	movs	r0, #1
 800e74e:	bd70      	pop	{r4, r5, r6, pc}
 800e750:	68a2      	ldr	r2, [r4, #8]
 800e752:	f104 010c 	add.w	r1, r4, #12
 800e756:	4628      	mov	r0, r5
 800e758:	f005 fafe 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800e75c:	4606      	mov	r6, r0
 800e75e:	e7c7      	b.n	800e6f0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e760:	68a1      	ldr	r1, [r4, #8]
 800e762:	4628      	mov	r0, r5
 800e764:	f005 fb24 	bl	8013db0 <ucdr_serialize_string>
 800e768:	4606      	mov	r6, r0
 800e76a:	e7c1      	b.n	800e6f0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e76c:	68a2      	ldr	r2, [r4, #8]
 800e76e:	f104 010c 	add.w	r1, r4, #12
 800e772:	4628      	mov	r0, r5
 800e774:	f005 faf0 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800e778:	4606      	mov	r6, r0
 800e77a:	e7d5      	b.n	800e728 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e77c <uxr_deserialize_DATAWRITER_Representation>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4606      	mov	r6, r0
 800e780:	460d      	mov	r5, r1
 800e782:	f7fc fecd 	bl	800b520 <ucdr_deserialize_uint8_t>
 800e786:	4604      	mov	r4, r0
 800e788:	b130      	cbz	r0, 800e798 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e78a:	782b      	ldrb	r3, [r5, #0]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d00c      	beq.n	800e7aa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e790:	2b03      	cmp	r3, #3
 800e792:	d012      	beq.n	800e7ba <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e794:	2b01      	cmp	r3, #1
 800e796:	d008      	beq.n	800e7aa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e798:	2202      	movs	r2, #2
 800e79a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f005 fa4a 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800e7a4:	4020      	ands	r0, r4
 800e7a6:	b2c0      	uxtb	r0, r0
 800e7a8:	bd70      	pop	{r4, r5, r6, pc}
 800e7aa:	6869      	ldr	r1, [r5, #4]
 800e7ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f005 fb0d 	bl	8013dd0 <ucdr_deserialize_string>
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	e7ee      	b.n	800e798 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e7ba:	1d2b      	adds	r3, r5, #4
 800e7bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7c0:	f105 0108 	add.w	r1, r5, #8
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f005 fad9 	bl	8013d7c <ucdr_deserialize_sequence_uint8_t>
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	e7e4      	b.n	800e798 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e7ce:	bf00      	nop

0800e7d0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	7809      	ldrb	r1, [r1, #0]
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	f7fc fe5e 	bl	800b498 <ucdr_serialize_bool>
 800e7dc:	782b      	ldrb	r3, [r5, #0]
 800e7de:	4604      	mov	r4, r0
 800e7e0:	b94b      	cbnz	r3, 800e7f6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e7e2:	7a29      	ldrb	r1, [r5, #8]
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f7fc fe57 	bl	800b498 <ucdr_serialize_bool>
 800e7ea:	7a2b      	ldrb	r3, [r5, #8]
 800e7ec:	4004      	ands	r4, r0
 800e7ee:	b2e4      	uxtb	r4, r4
 800e7f0:	b943      	cbnz	r3, 800e804 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	bd70      	pop	{r4, r5, r6, pc}
 800e7f6:	6869      	ldr	r1, [r5, #4]
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f005 fad9 	bl	8013db0 <ucdr_serialize_string>
 800e7fe:	4004      	ands	r4, r0
 800e800:	b2e4      	uxtb	r4, r4
 800e802:	e7ee      	b.n	800e7e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e804:	68e9      	ldr	r1, [r5, #12]
 800e806:	4630      	mov	r0, r6
 800e808:	f005 fad2 	bl	8013db0 <ucdr_serialize_string>
 800e80c:	4004      	ands	r4, r0
 800e80e:	4620      	mov	r0, r4
 800e810:	bd70      	pop	{r4, r5, r6, pc}
 800e812:	bf00      	nop

0800e814 <uxr_serialize_OBJK_Topic_Binary>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	460d      	mov	r5, r1
 800e818:	6809      	ldr	r1, [r1, #0]
 800e81a:	4606      	mov	r6, r0
 800e81c:	f005 fac8 	bl	8013db0 <ucdr_serialize_string>
 800e820:	7929      	ldrb	r1, [r5, #4]
 800e822:	4604      	mov	r4, r0
 800e824:	4630      	mov	r0, r6
 800e826:	f7fc fe37 	bl	800b498 <ucdr_serialize_bool>
 800e82a:	792b      	ldrb	r3, [r5, #4]
 800e82c:	4004      	ands	r4, r0
 800e82e:	b2e4      	uxtb	r4, r4
 800e830:	b943      	cbnz	r3, 800e844 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e832:	7b29      	ldrb	r1, [r5, #12]
 800e834:	4630      	mov	r0, r6
 800e836:	f7fc fe2f 	bl	800b498 <ucdr_serialize_bool>
 800e83a:	7b2b      	ldrb	r3, [r5, #12]
 800e83c:	4004      	ands	r4, r0
 800e83e:	b93b      	cbnz	r3, 800e850 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e840:	4620      	mov	r0, r4
 800e842:	bd70      	pop	{r4, r5, r6, pc}
 800e844:	68a9      	ldr	r1, [r5, #8]
 800e846:	4630      	mov	r0, r6
 800e848:	f005 fab2 	bl	8013db0 <ucdr_serialize_string>
 800e84c:	4004      	ands	r4, r0
 800e84e:	e7f0      	b.n	800e832 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e850:	6929      	ldr	r1, [r5, #16]
 800e852:	4630      	mov	r0, r6
 800e854:	f005 faac 	bl	8013db0 <ucdr_serialize_string>
 800e858:	4004      	ands	r4, r0
 800e85a:	b2e4      	uxtb	r4, r4
 800e85c:	4620      	mov	r0, r4
 800e85e:	bd70      	pop	{r4, r5, r6, pc}

0800e860 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	460c      	mov	r4, r1
 800e866:	7809      	ldrb	r1, [r1, #0]
 800e868:	4606      	mov	r6, r0
 800e86a:	f7fc fe15 	bl	800b498 <ucdr_serialize_bool>
 800e86e:	7823      	ldrb	r3, [r4, #0]
 800e870:	4605      	mov	r5, r0
 800e872:	b96b      	cbnz	r3, 800e890 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e874:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e878:	4630      	mov	r0, r6
 800e87a:	f7fc fe0d 	bl	800b498 <ucdr_serialize_bool>
 800e87e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e882:	4005      	ands	r5, r0
 800e884:	b2ed      	uxtb	r5, r5
 800e886:	2b00      	cmp	r3, #0
 800e888:	d169      	bne.n	800e95e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e88a:	4628      	mov	r0, r5
 800e88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e890:	6861      	ldr	r1, [r4, #4]
 800e892:	4630      	mov	r0, r6
 800e894:	f7fd f844 	bl	800b920 <ucdr_serialize_uint32_t>
 800e898:	6863      	ldr	r3, [r4, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d06b      	beq.n	800e976 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d067      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8a2:	68a1      	ldr	r1, [r4, #8]
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f005 fa83 	bl	8013db0 <ucdr_serialize_string>
 800e8aa:	6863      	ldr	r3, [r4, #4]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d953      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d05e      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8b4:	68e1      	ldr	r1, [r4, #12]
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f005 fa7a 	bl	8013db0 <ucdr_serialize_string>
 800e8bc:	6863      	ldr	r3, [r4, #4]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d94a      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d055      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8c6:	6921      	ldr	r1, [r4, #16]
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f005 fa71 	bl	8013db0 <ucdr_serialize_string>
 800e8ce:	6863      	ldr	r3, [r4, #4]
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	d941      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d04c      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8d8:	6961      	ldr	r1, [r4, #20]
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f005 fa68 	bl	8013db0 <ucdr_serialize_string>
 800e8e0:	6863      	ldr	r3, [r4, #4]
 800e8e2:	2b04      	cmp	r3, #4
 800e8e4:	d938      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d043      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8ea:	69a1      	ldr	r1, [r4, #24]
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f005 fa5f 	bl	8013db0 <ucdr_serialize_string>
 800e8f2:	6863      	ldr	r3, [r4, #4]
 800e8f4:	2b05      	cmp	r3, #5
 800e8f6:	d92f      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d03a      	beq.n	800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8fc:	69e1      	ldr	r1, [r4, #28]
 800e8fe:	4630      	mov	r0, r6
 800e900:	f005 fa56 	bl	8013db0 <ucdr_serialize_string>
 800e904:	6863      	ldr	r3, [r4, #4]
 800e906:	2b06      	cmp	r3, #6
 800e908:	d926      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e90a:	b390      	cbz	r0, 800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e90c:	6a21      	ldr	r1, [r4, #32]
 800e90e:	4630      	mov	r0, r6
 800e910:	f005 fa4e 	bl	8013db0 <ucdr_serialize_string>
 800e914:	6863      	ldr	r3, [r4, #4]
 800e916:	2b07      	cmp	r3, #7
 800e918:	d91e      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e91a:	b350      	cbz	r0, 800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e91c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e91e:	4630      	mov	r0, r6
 800e920:	f005 fa46 	bl	8013db0 <ucdr_serialize_string>
 800e924:	6863      	ldr	r3, [r4, #4]
 800e926:	2b08      	cmp	r3, #8
 800e928:	d916      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e92a:	b310      	cbz	r0, 800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e92c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e92e:	4630      	mov	r0, r6
 800e930:	f005 fa3e 	bl	8013db0 <ucdr_serialize_string>
 800e934:	6863      	ldr	r3, [r4, #4]
 800e936:	2b09      	cmp	r3, #9
 800e938:	d90e      	bls.n	800e958 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e93a:	b1d0      	cbz	r0, 800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e93c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e940:	2709      	movs	r7, #9
 800e942:	e000      	b.n	800e946 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e944:	b1a8      	cbz	r0, 800e972 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e946:	f858 1b04 	ldr.w	r1, [r8], #4
 800e94a:	4630      	mov	r0, r6
 800e94c:	f005 fa30 	bl	8013db0 <ucdr_serialize_string>
 800e950:	6862      	ldr	r2, [r4, #4]
 800e952:	3701      	adds	r7, #1
 800e954:	4297      	cmp	r7, r2
 800e956:	d3f5      	bcc.n	800e944 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e958:	4005      	ands	r5, r0
 800e95a:	b2ed      	uxtb	r5, r5
 800e95c:	e78a      	b.n	800e874 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e95e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e960:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e964:	4630      	mov	r0, r6
 800e966:	f005 f9f7 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800e96a:	4005      	ands	r5, r0
 800e96c:	4628      	mov	r0, r5
 800e96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e972:	2500      	movs	r5, #0
 800e974:	e77e      	b.n	800e874 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e976:	4028      	ands	r0, r5
 800e978:	b2c5      	uxtb	r5, r0
 800e97a:	e77b      	b.n	800e874 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e97c <uxr_serialize_OBJK_Publisher_Binary>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	460d      	mov	r5, r1
 800e980:	7809      	ldrb	r1, [r1, #0]
 800e982:	4606      	mov	r6, r0
 800e984:	f7fc fd88 	bl	800b498 <ucdr_serialize_bool>
 800e988:	782b      	ldrb	r3, [r5, #0]
 800e98a:	4604      	mov	r4, r0
 800e98c:	b94b      	cbnz	r3, 800e9a2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e98e:	7a29      	ldrb	r1, [r5, #8]
 800e990:	4630      	mov	r0, r6
 800e992:	f7fc fd81 	bl	800b498 <ucdr_serialize_bool>
 800e996:	7a2b      	ldrb	r3, [r5, #8]
 800e998:	4004      	ands	r4, r0
 800e99a:	b2e4      	uxtb	r4, r4
 800e99c:	b943      	cbnz	r3, 800e9b0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e99e:	4620      	mov	r0, r4
 800e9a0:	bd70      	pop	{r4, r5, r6, pc}
 800e9a2:	6869      	ldr	r1, [r5, #4]
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f005 fa03 	bl	8013db0 <ucdr_serialize_string>
 800e9aa:	4004      	ands	r4, r0
 800e9ac:	b2e4      	uxtb	r4, r4
 800e9ae:	e7ee      	b.n	800e98e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e9b0:	f105 010c 	add.w	r1, r5, #12
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	f7ff ff53 	bl	800e860 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e9ba:	4004      	ands	r4, r0
 800e9bc:	4620      	mov	r0, r4
 800e9be:	bd70      	pop	{r4, r5, r6, pc}

0800e9c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	7809      	ldrb	r1, [r1, #0]
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	f7fc fd65 	bl	800b498 <ucdr_serialize_bool>
 800e9ce:	7823      	ldrb	r3, [r4, #0]
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	b96b      	cbnz	r3, 800e9f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e9d4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f7fc fd5d 	bl	800b498 <ucdr_serialize_bool>
 800e9de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9e2:	4005      	ands	r5, r0
 800e9e4:	b2ed      	uxtb	r5, r5
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d169      	bne.n	800eabe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f0:	6861      	ldr	r1, [r4, #4]
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f7fc ff94 	bl	800b920 <ucdr_serialize_uint32_t>
 800e9f8:	6863      	ldr	r3, [r4, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d06b      	beq.n	800ead6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d067      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea02:	68a1      	ldr	r1, [r4, #8]
 800ea04:	4630      	mov	r0, r6
 800ea06:	f005 f9d3 	bl	8013db0 <ucdr_serialize_string>
 800ea0a:	6863      	ldr	r3, [r4, #4]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d953      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d05e      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea14:	68e1      	ldr	r1, [r4, #12]
 800ea16:	4630      	mov	r0, r6
 800ea18:	f005 f9ca 	bl	8013db0 <ucdr_serialize_string>
 800ea1c:	6863      	ldr	r3, [r4, #4]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d94a      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d055      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea26:	6921      	ldr	r1, [r4, #16]
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f005 f9c1 	bl	8013db0 <ucdr_serialize_string>
 800ea2e:	6863      	ldr	r3, [r4, #4]
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	d941      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d04c      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea38:	6961      	ldr	r1, [r4, #20]
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f005 f9b8 	bl	8013db0 <ucdr_serialize_string>
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	2b04      	cmp	r3, #4
 800ea44:	d938      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d043      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea4a:	69a1      	ldr	r1, [r4, #24]
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f005 f9af 	bl	8013db0 <ucdr_serialize_string>
 800ea52:	6863      	ldr	r3, [r4, #4]
 800ea54:	2b05      	cmp	r3, #5
 800ea56:	d92f      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d03a      	beq.n	800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea5c:	69e1      	ldr	r1, [r4, #28]
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f005 f9a6 	bl	8013db0 <ucdr_serialize_string>
 800ea64:	6863      	ldr	r3, [r4, #4]
 800ea66:	2b06      	cmp	r3, #6
 800ea68:	d926      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea6a:	b390      	cbz	r0, 800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea6c:	6a21      	ldr	r1, [r4, #32]
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f005 f99e 	bl	8013db0 <ucdr_serialize_string>
 800ea74:	6863      	ldr	r3, [r4, #4]
 800ea76:	2b07      	cmp	r3, #7
 800ea78:	d91e      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea7a:	b350      	cbz	r0, 800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f005 f996 	bl	8013db0 <ucdr_serialize_string>
 800ea84:	6863      	ldr	r3, [r4, #4]
 800ea86:	2b08      	cmp	r3, #8
 800ea88:	d916      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea8a:	b310      	cbz	r0, 800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f005 f98e 	bl	8013db0 <ucdr_serialize_string>
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	d90e      	bls.n	800eab8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea9a:	b1d0      	cbz	r0, 800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea9c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800eaa0:	2709      	movs	r7, #9
 800eaa2:	e000      	b.n	800eaa6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800eaa4:	b1a8      	cbz	r0, 800ead2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eaa6:	f858 1b04 	ldr.w	r1, [r8], #4
 800eaaa:	4630      	mov	r0, r6
 800eaac:	f005 f980 	bl	8013db0 <ucdr_serialize_string>
 800eab0:	6862      	ldr	r2, [r4, #4]
 800eab2:	3701      	adds	r7, #1
 800eab4:	4297      	cmp	r7, r2
 800eab6:	d3f5      	bcc.n	800eaa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800eab8:	4005      	ands	r5, r0
 800eaba:	b2ed      	uxtb	r5, r5
 800eabc:	e78a      	b.n	800e9d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800eabe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eac0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800eac4:	4630      	mov	r0, r6
 800eac6:	f005 f947 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800eaca:	4005      	ands	r5, r0
 800eacc:	4628      	mov	r0, r5
 800eace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead2:	2500      	movs	r5, #0
 800ead4:	e77e      	b.n	800e9d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ead6:	4028      	ands	r0, r5
 800ead8:	b2c5      	uxtb	r5, r0
 800eada:	e77b      	b.n	800e9d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800eadc <uxr_serialize_OBJK_Subscriber_Binary>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	460d      	mov	r5, r1
 800eae0:	7809      	ldrb	r1, [r1, #0]
 800eae2:	4606      	mov	r6, r0
 800eae4:	f7fc fcd8 	bl	800b498 <ucdr_serialize_bool>
 800eae8:	782b      	ldrb	r3, [r5, #0]
 800eaea:	4604      	mov	r4, r0
 800eaec:	b94b      	cbnz	r3, 800eb02 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800eaee:	7a29      	ldrb	r1, [r5, #8]
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7fc fcd1 	bl	800b498 <ucdr_serialize_bool>
 800eaf6:	7a2b      	ldrb	r3, [r5, #8]
 800eaf8:	4004      	ands	r4, r0
 800eafa:	b2e4      	uxtb	r4, r4
 800eafc:	b943      	cbnz	r3, 800eb10 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800eafe:	4620      	mov	r0, r4
 800eb00:	bd70      	pop	{r4, r5, r6, pc}
 800eb02:	6869      	ldr	r1, [r5, #4]
 800eb04:	4630      	mov	r0, r6
 800eb06:	f005 f953 	bl	8013db0 <ucdr_serialize_string>
 800eb0a:	4004      	ands	r4, r0
 800eb0c:	b2e4      	uxtb	r4, r4
 800eb0e:	e7ee      	b.n	800eaee <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800eb10:	f105 010c 	add.w	r1, r5, #12
 800eb14:	4630      	mov	r0, r6
 800eb16:	f7ff ff53 	bl	800e9c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800eb1a:	4004      	ands	r4, r0
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}

0800eb20 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800eb20:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800eb24:	4688      	mov	r8, r1
 800eb26:	8809      	ldrh	r1, [r1, #0]
 800eb28:	4681      	mov	r9, r0
 800eb2a:	f7fc fd0f 	bl	800b54c <ucdr_serialize_uint16_t>
 800eb2e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800eb32:	4606      	mov	r6, r0
 800eb34:	4648      	mov	r0, r9
 800eb36:	f7fc fcaf 	bl	800b498 <ucdr_serialize_bool>
 800eb3a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eb3e:	4006      	ands	r6, r0
 800eb40:	b2f5      	uxtb	r5, r6
 800eb42:	b9eb      	cbnz	r3, 800eb80 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800eb44:	f898 1006 	ldrb.w	r1, [r8, #6]
 800eb48:	4648      	mov	r0, r9
 800eb4a:	f7fc fca5 	bl	800b498 <ucdr_serialize_bool>
 800eb4e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800eb52:	4005      	ands	r5, r0
 800eb54:	bb7b      	cbnz	r3, 800ebb6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800eb56:	f898 100c 	ldrb.w	r1, [r8, #12]
 800eb5a:	4648      	mov	r0, r9
 800eb5c:	f7fc fc9c 	bl	800b498 <ucdr_serialize_bool>
 800eb60:	f898 300c 	ldrb.w	r3, [r8, #12]
 800eb64:	4005      	ands	r5, r0
 800eb66:	b9f3      	cbnz	r3, 800eba6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800eb68:	f898 1014 	ldrb.w	r1, [r8, #20]
 800eb6c:	4648      	mov	r0, r9
 800eb6e:	f7fc fc93 	bl	800b498 <ucdr_serialize_bool>
 800eb72:	f898 3014 	ldrb.w	r3, [r8, #20]
 800eb76:	4005      	ands	r5, r0
 800eb78:	b94b      	cbnz	r3, 800eb8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eb80:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800eb84:	4648      	mov	r0, r9
 800eb86:	f7fc fce1 	bl	800b54c <ucdr_serialize_uint16_t>
 800eb8a:	4005      	ands	r5, r0
 800eb8c:	e7da      	b.n	800eb44 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800eb8e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800eb92:	f108 011c 	add.w	r1, r8, #28
 800eb96:	4648      	mov	r0, r9
 800eb98:	f005 f8de 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800eb9c:	4028      	ands	r0, r5
 800eb9e:	b2c5      	uxtb	r5, r0
 800eba0:	4628      	mov	r0, r5
 800eba2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ebaa:	4648      	mov	r0, r9
 800ebac:	f7fc feb8 	bl	800b920 <ucdr_serialize_uint32_t>
 800ebb0:	4028      	ands	r0, r5
 800ebb2:	b2c5      	uxtb	r5, r0
 800ebb4:	e7d8      	b.n	800eb68 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ebb6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ebba:	4648      	mov	r0, r9
 800ebbc:	f7fc feb0 	bl	800b920 <ucdr_serialize_uint32_t>
 800ebc0:	4028      	ands	r0, r5
 800ebc2:	b2c5      	uxtb	r5, r0
 800ebc4:	e7c7      	b.n	800eb56 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ebc6:	bf00      	nop

0800ebc8 <uxr_serialize_OBJK_DataReader_Binary>:
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	2202      	movs	r2, #2
 800ebcc:	460c      	mov	r4, r1
 800ebce:	4606      	mov	r6, r0
 800ebd0:	f004 ffce 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800ebd4:	78a1      	ldrb	r1, [r4, #2]
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7fc fc5d 	bl	800b498 <ucdr_serialize_bool>
 800ebde:	78a3      	ldrb	r3, [r4, #2]
 800ebe0:	4005      	ands	r5, r0
 800ebe2:	b2ed      	uxtb	r5, r5
 800ebe4:	b90b      	cbnz	r3, 800ebea <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebea:	f104 0108 	add.w	r1, r4, #8
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f7ff ff96 	bl	800eb20 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ebf4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ebf8:	4607      	mov	r7, r0
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7fc fc4c 	bl	800b498 <ucdr_serialize_bool>
 800ec00:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ec04:	4038      	ands	r0, r7
 800ec06:	b2c7      	uxtb	r7, r0
 800ec08:	b95b      	cbnz	r3, 800ec22 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ec0a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800ec0e:	4630      	mov	r0, r6
 800ec10:	f7fc fc42 	bl	800b498 <ucdr_serialize_bool>
 800ec14:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ec18:	4007      	ands	r7, r0
 800ec1a:	b94b      	cbnz	r3, 800ec30 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800ec1c:	403d      	ands	r5, r7
 800ec1e:	4628      	mov	r0, r5
 800ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec22:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800ec26:	4630      	mov	r0, r6
 800ec28:	f7fd f8d0 	bl	800bdcc <ucdr_serialize_uint64_t>
 800ec2c:	4007      	ands	r7, r0
 800ec2e:	e7ec      	b.n	800ec0a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800ec30:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ec32:	4630      	mov	r0, r6
 800ec34:	f005 f8bc 	bl	8013db0 <ucdr_serialize_string>
 800ec38:	4007      	ands	r7, r0
 800ec3a:	b2ff      	uxtb	r7, r7
 800ec3c:	e7ee      	b.n	800ec1c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800ec3e:	bf00      	nop

0800ec40 <uxr_serialize_OBJK_DataWriter_Binary>:
 800ec40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec42:	2202      	movs	r2, #2
 800ec44:	460d      	mov	r5, r1
 800ec46:	4606      	mov	r6, r0
 800ec48:	f004 ff92 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800ec4c:	78a9      	ldrb	r1, [r5, #2]
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7fc fc21 	bl	800b498 <ucdr_serialize_bool>
 800ec56:	78ab      	ldrb	r3, [r5, #2]
 800ec58:	4004      	ands	r4, r0
 800ec5a:	b2e4      	uxtb	r4, r4
 800ec5c:	b90b      	cbnz	r3, 800ec62 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ec5e:	4620      	mov	r0, r4
 800ec60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec62:	f105 0108 	add.w	r1, r5, #8
 800ec66:	4630      	mov	r0, r6
 800ec68:	f7ff ff5a 	bl	800eb20 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ec6c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ec70:	4607      	mov	r7, r0
 800ec72:	4630      	mov	r0, r6
 800ec74:	f7fc fc10 	bl	800b498 <ucdr_serialize_bool>
 800ec78:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ec7c:	4038      	ands	r0, r7
 800ec7e:	b2c7      	uxtb	r7, r0
 800ec80:	b913      	cbnz	r3, 800ec88 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ec82:	403c      	ands	r4, r7
 800ec84:	4620      	mov	r0, r4
 800ec86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec88:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f7fd f89d 	bl	800bdcc <ucdr_serialize_uint64_t>
 800ec92:	4007      	ands	r7, r0
 800ec94:	e7f5      	b.n	800ec82 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ec96:	bf00      	nop

0800ec98 <uxr_deserialize_ObjectVariant>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	460e      	mov	r6, r1
 800ec9e:	f7fc fc3f 	bl	800b520 <ucdr_deserialize_uint8_t>
 800eca2:	b168      	cbz	r0, 800ecc0 <uxr_deserialize_ObjectVariant+0x28>
 800eca4:	7833      	ldrb	r3, [r6, #0]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	4604      	mov	r4, r0
 800ecaa:	2b0d      	cmp	r3, #13
 800ecac:	d809      	bhi.n	800ecc2 <uxr_deserialize_ObjectVariant+0x2a>
 800ecae:	e8df f003 	tbb	[pc, r3]
 800ecb2:	0a41      	.short	0x0a41
 800ecb4:	0a0a2323 	.word	0x0a0a2323
 800ecb8:	10080a0a 	.word	0x10080a0a
 800ecbc:	565c1010 	.word	0x565c1010
 800ecc0:	2400      	movs	r4, #0
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	bd70      	pop	{r4, r5, r6, pc}
 800ecc6:	1d31      	adds	r1, r6, #4
 800ecc8:	4628      	mov	r0, r5
 800ecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecce:	f7ff bd55 	b.w	800e77c <uxr_deserialize_DATAWRITER_Representation>
 800ecd2:	1d31      	adds	r1, r6, #4
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f7fc fc23 	bl	800b520 <ucdr_deserialize_uint8_t>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0f0      	beq.n	800ecc0 <uxr_deserialize_ObjectVariant+0x28>
 800ecde:	7933      	ldrb	r3, [r6, #4]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d001      	beq.n	800ece8 <uxr_deserialize_ObjectVariant+0x50>
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d1ec      	bne.n	800ecc2 <uxr_deserialize_ObjectVariant+0x2a>
 800ece8:	68b1      	ldr	r1, [r6, #8]
 800ecea:	4628      	mov	r0, r5
 800ecec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecf4:	f005 b86c 	b.w	8013dd0 <ucdr_deserialize_string>
 800ecf8:	1d31      	adds	r1, r6, #4
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f7fc fc10 	bl	800b520 <ucdr_deserialize_uint8_t>
 800ed00:	4604      	mov	r4, r0
 800ed02:	b170      	cbz	r0, 800ed22 <uxr_deserialize_ObjectVariant+0x8a>
 800ed04:	7933      	ldrb	r3, [r6, #4]
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d04c      	beq.n	800eda4 <uxr_deserialize_ObjectVariant+0x10c>
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	d109      	bne.n	800ed22 <uxr_deserialize_ObjectVariant+0x8a>
 800ed0e:	f106 0308 	add.w	r3, r6, #8
 800ed12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed16:	f106 010c 	add.w	r1, r6, #12
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f005 f82e 	bl	8013d7c <ucdr_deserialize_sequence_uint8_t>
 800ed20:	4604      	mov	r4, r0
 800ed22:	2202      	movs	r2, #2
 800ed24:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f004 ff85 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ed2e:	4020      	ands	r0, r4
 800ed30:	b2c4      	uxtb	r4, r0
 800ed32:	e7c6      	b.n	800ecc2 <uxr_deserialize_ObjectVariant+0x2a>
 800ed34:	1d31      	adds	r1, r6, #4
 800ed36:	4628      	mov	r0, r5
 800ed38:	f7fc fbf2 	bl	800b520 <ucdr_deserialize_uint8_t>
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	b130      	cbz	r0, 800ed4e <uxr_deserialize_ObjectVariant+0xb6>
 800ed40:	7933      	ldrb	r3, [r6, #4]
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d036      	beq.n	800edb4 <uxr_deserialize_ObjectVariant+0x11c>
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	d03c      	beq.n	800edc4 <uxr_deserialize_ObjectVariant+0x12c>
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d032      	beq.n	800edb4 <uxr_deserialize_ObjectVariant+0x11c>
 800ed4e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed52:	4628      	mov	r0, r5
 800ed54:	f7fd f98a 	bl	800c06c <ucdr_deserialize_int16_t>
 800ed58:	4020      	ands	r0, r4
 800ed5a:	b2c4      	uxtb	r4, r0
 800ed5c:	e7b1      	b.n	800ecc2 <uxr_deserialize_ObjectVariant+0x2a>
 800ed5e:	1d31      	adds	r1, r6, #4
 800ed60:	4628      	mov	r0, r5
 800ed62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed66:	f7ff bbbf 	b.w	800e4e8 <uxr_deserialize_CLIENT_Representation>
 800ed6a:	2204      	movs	r2, #4
 800ed6c:	18b1      	adds	r1, r6, r2
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f004 ff62 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ed74:	2202      	movs	r2, #2
 800ed76:	f106 0108 	add.w	r1, r6, #8
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f004 ff5b 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ed82:	2202      	movs	r2, #2
 800ed84:	4004      	ands	r4, r0
 800ed86:	f106 010a 	add.w	r1, r6, #10
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f004 ff54 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ed90:	b2e4      	uxtb	r4, r4
 800ed92:	4603      	mov	r3, r0
 800ed94:	f106 010c 	add.w	r1, r6, #12
 800ed98:	4628      	mov	r0, r5
 800ed9a:	401c      	ands	r4, r3
 800ed9c:	f7fc fb92 	bl	800b4c4 <ucdr_deserialize_bool>
 800eda0:	4004      	ands	r4, r0
 800eda2:	e78e      	b.n	800ecc2 <uxr_deserialize_ObjectVariant+0x2a>
 800eda4:	68b1      	ldr	r1, [r6, #8]
 800eda6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edaa:	4628      	mov	r0, r5
 800edac:	f005 f810 	bl	8013dd0 <ucdr_deserialize_string>
 800edb0:	4604      	mov	r4, r0
 800edb2:	e7b6      	b.n	800ed22 <uxr_deserialize_ObjectVariant+0x8a>
 800edb4:	68b1      	ldr	r1, [r6, #8]
 800edb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edba:	4628      	mov	r0, r5
 800edbc:	f005 f808 	bl	8013dd0 <ucdr_deserialize_string>
 800edc0:	4604      	mov	r4, r0
 800edc2:	e7c4      	b.n	800ed4e <uxr_deserialize_ObjectVariant+0xb6>
 800edc4:	f106 0308 	add.w	r3, r6, #8
 800edc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edcc:	f106 010c 	add.w	r1, r6, #12
 800edd0:	4628      	mov	r0, r5
 800edd2:	f004 ffd3 	bl	8013d7c <ucdr_deserialize_sequence_uint8_t>
 800edd6:	4604      	mov	r4, r0
 800edd8:	e7b9      	b.n	800ed4e <uxr_deserialize_ObjectVariant+0xb6>
 800edda:	bf00      	nop

0800eddc <uxr_deserialize_BaseObjectRequest>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	2202      	movs	r2, #2
 800ede0:	4605      	mov	r5, r0
 800ede2:	460e      	mov	r6, r1
 800ede4:	f004 ff28 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ede8:	2202      	movs	r2, #2
 800edea:	4604      	mov	r4, r0
 800edec:	18b1      	adds	r1, r6, r2
 800edee:	4628      	mov	r0, r5
 800edf0:	f004 ff22 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800edf4:	4020      	ands	r0, r4
 800edf6:	b2c0      	uxtb	r0, r0
 800edf8:	bd70      	pop	{r4, r5, r6, pc}
 800edfa:	bf00      	nop

0800edfc <uxr_serialize_ActivityInfoVariant>:
 800edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee00:	460d      	mov	r5, r1
 800ee02:	7809      	ldrb	r1, [r1, #0]
 800ee04:	4607      	mov	r7, r0
 800ee06:	f7fc fb75 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800ee0a:	4681      	mov	r9, r0
 800ee0c:	b138      	cbz	r0, 800ee1e <uxr_serialize_ActivityInfoVariant+0x22>
 800ee0e:	782b      	ldrb	r3, [r5, #0]
 800ee10:	2b06      	cmp	r3, #6
 800ee12:	f000 8082 	beq.w	800ef1a <uxr_serialize_ActivityInfoVariant+0x11e>
 800ee16:	2b0d      	cmp	r3, #13
 800ee18:	d016      	beq.n	800ee48 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ee1a:	2b05      	cmp	r3, #5
 800ee1c:	d002      	beq.n	800ee24 <uxr_serialize_ActivityInfoVariant+0x28>
 800ee1e:	4648      	mov	r0, r9
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee28:	4638      	mov	r0, r7
 800ee2a:	f7fd f89f 	bl	800bf6c <ucdr_serialize_int16_t>
 800ee2e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ee32:	4681      	mov	r9, r0
 800ee34:	4638      	mov	r0, r7
 800ee36:	f7fc ffc9 	bl	800bdcc <ucdr_serialize_uint64_t>
 800ee3a:	ea09 0000 	and.w	r0, r9, r0
 800ee3e:	fa5f f980 	uxtb.w	r9, r0
 800ee42:	4648      	mov	r0, r9
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	f7fd f88d 	bl	800bf6c <ucdr_serialize_int16_t>
 800ee52:	68e9      	ldr	r1, [r5, #12]
 800ee54:	4681      	mov	r9, r0
 800ee56:	4638      	mov	r0, r7
 800ee58:	f7fc fd62 	bl	800b920 <ucdr_serialize_uint32_t>
 800ee5c:	68eb      	ldr	r3, [r5, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0eb      	beq.n	800ee3a <uxr_serialize_ActivityInfoVariant+0x3e>
 800ee62:	b320      	cbz	r0, 800eeae <uxr_serialize_ActivityInfoVariant+0xb2>
 800ee64:	f105 080c 	add.w	r8, r5, #12
 800ee68:	2600      	movs	r6, #0
 800ee6a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ee6e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ee72:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ee76:	4638      	mov	r0, r7
 800ee78:	f7fc fb3c 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d053      	beq.n	800ef28 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ee80:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ee84:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ee88:	0074      	lsls	r4, r6, #1
 800ee8a:	00c9      	lsls	r1, r1, #3
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d854      	bhi.n	800ef3a <uxr_serialize_ActivityInfoVariant+0x13e>
 800ee90:	e8df f003 	tbb	[pc, r3]
 800ee94:	02102132 	.word	0x02102132
 800ee98:	4441      	add	r1, r8
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	6889      	ldr	r1, [r1, #8]
 800ee9e:	f004 ff87 	bl	8013db0 <ucdr_serialize_string>
 800eea2:	68ea      	ldr	r2, [r5, #12]
 800eea4:	3601      	adds	r6, #1
 800eea6:	4296      	cmp	r6, r2
 800eea8:	d242      	bcs.n	800ef30 <uxr_serialize_ActivityInfoVariant+0x134>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d1dd      	bne.n	800ee6a <uxr_serialize_ActivityInfoVariant+0x6e>
 800eeae:	f04f 0900 	mov.w	r9, #0
 800eeb2:	e7b4      	b.n	800ee1e <uxr_serialize_ActivityInfoVariant+0x22>
 800eeb4:	3108      	adds	r1, #8
 800eeb6:	4441      	add	r1, r8
 800eeb8:	2210      	movs	r2, #16
 800eeba:	4638      	mov	r0, r7
 800eebc:	f004 fe58 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800eec0:	4434      	add	r4, r6
 800eec2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eec6:	4604      	mov	r4, r0
 800eec8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800eeca:	4638      	mov	r0, r7
 800eecc:	f7fc fd28 	bl	800b920 <ucdr_serialize_uint32_t>
 800eed0:	4020      	ands	r0, r4
 800eed2:	b2c0      	uxtb	r0, r0
 800eed4:	e7e5      	b.n	800eea2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800eed6:	3108      	adds	r1, #8
 800eed8:	4441      	add	r1, r8
 800eeda:	2204      	movs	r2, #4
 800eedc:	4638      	mov	r0, r7
 800eede:	f004 fe47 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800eee2:	4434      	add	r4, r6
 800eee4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eee8:	4604      	mov	r4, r0
 800eeea:	8b19      	ldrh	r1, [r3, #24]
 800eeec:	4638      	mov	r0, r7
 800eeee:	f7fc fb2d 	bl	800b54c <ucdr_serialize_uint16_t>
 800eef2:	4020      	ands	r0, r4
 800eef4:	b2c0      	uxtb	r0, r0
 800eef6:	e7d4      	b.n	800eea2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800eef8:	3108      	adds	r1, #8
 800eefa:	4441      	add	r1, r8
 800eefc:	2202      	movs	r2, #2
 800eefe:	4638      	mov	r0, r7
 800ef00:	f004 fe36 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800ef04:	4434      	add	r4, r6
 800ef06:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	7d99      	ldrb	r1, [r3, #22]
 800ef0e:	4638      	mov	r0, r7
 800ef10:	f7fc faf0 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800ef14:	4020      	ands	r0, r4
 800ef16:	b2c0      	uxtb	r0, r0
 800ef18:	e7c3      	b.n	800eea2 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ef1a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ef1e:	4638      	mov	r0, r7
 800ef20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef24:	f7fd b822 	b.w	800bf6c <ucdr_serialize_int16_t>
 800ef28:	68ea      	ldr	r2, [r5, #12]
 800ef2a:	3601      	adds	r6, #1
 800ef2c:	42b2      	cmp	r2, r6
 800ef2e:	d8be      	bhi.n	800eeae <uxr_serialize_ActivityInfoVariant+0xb2>
 800ef30:	ea09 0900 	and.w	r9, r9, r0
 800ef34:	fa5f f989 	uxtb.w	r9, r9
 800ef38:	e771      	b.n	800ee1e <uxr_serialize_ActivityInfoVariant+0x22>
 800ef3a:	68eb      	ldr	r3, [r5, #12]
 800ef3c:	3601      	adds	r6, #1
 800ef3e:	429e      	cmp	r6, r3
 800ef40:	f10a 0a18 	add.w	sl, sl, #24
 800ef44:	d395      	bcc.n	800ee72 <uxr_serialize_ActivityInfoVariant+0x76>
 800ef46:	e76a      	b.n	800ee1e <uxr_serialize_ActivityInfoVariant+0x22>

0800ef48 <uxr_deserialize_BaseObjectReply>:
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	4606      	mov	r6, r0
 800ef50:	460f      	mov	r7, r1
 800ef52:	f004 fe71 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ef56:	2202      	movs	r2, #2
 800ef58:	18b9      	adds	r1, r7, r2
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f004 fe6b 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800ef62:	1d39      	adds	r1, r7, #4
 800ef64:	4680      	mov	r8, r0
 800ef66:	4630      	mov	r0, r6
 800ef68:	f7fc fada 	bl	800b520 <ucdr_deserialize_uint8_t>
 800ef6c:	1d79      	adds	r1, r7, #5
 800ef6e:	4604      	mov	r4, r0
 800ef70:	4630      	mov	r0, r6
 800ef72:	f7fc fad5 	bl	800b520 <ucdr_deserialize_uint8_t>
 800ef76:	ea05 0508 	and.w	r5, r5, r8
 800ef7a:	402c      	ands	r4, r5
 800ef7c:	4020      	ands	r0, r4
 800ef7e:	b2c0      	uxtb	r0, r0
 800ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef84 <uxr_serialize_ReadSpecification>:
 800ef84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef88:	460e      	mov	r6, r1
 800ef8a:	7809      	ldrb	r1, [r1, #0]
 800ef8c:	4607      	mov	r7, r0
 800ef8e:	f7fc fab1 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800ef92:	7871      	ldrb	r1, [r6, #1]
 800ef94:	4604      	mov	r4, r0
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7fc faac 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800ef9c:	78b1      	ldrb	r1, [r6, #2]
 800ef9e:	4004      	ands	r4, r0
 800efa0:	4638      	mov	r0, r7
 800efa2:	f7fc fa79 	bl	800b498 <ucdr_serialize_bool>
 800efa6:	78b3      	ldrb	r3, [r6, #2]
 800efa8:	b2e4      	uxtb	r4, r4
 800efaa:	4004      	ands	r4, r0
 800efac:	b94b      	cbnz	r3, 800efc2 <uxr_serialize_ReadSpecification+0x3e>
 800efae:	7a31      	ldrb	r1, [r6, #8]
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7fc fa71 	bl	800b498 <ucdr_serialize_bool>
 800efb6:	7a33      	ldrb	r3, [r6, #8]
 800efb8:	4004      	ands	r4, r0
 800efba:	b943      	cbnz	r3, 800efce <uxr_serialize_ReadSpecification+0x4a>
 800efbc:	4620      	mov	r0, r4
 800efbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc2:	6871      	ldr	r1, [r6, #4]
 800efc4:	4638      	mov	r0, r7
 800efc6:	f004 fef3 	bl	8013db0 <ucdr_serialize_string>
 800efca:	4004      	ands	r4, r0
 800efcc:	e7ef      	b.n	800efae <uxr_serialize_ReadSpecification+0x2a>
 800efce:	8971      	ldrh	r1, [r6, #10]
 800efd0:	4638      	mov	r0, r7
 800efd2:	f7fc fabb 	bl	800b54c <ucdr_serialize_uint16_t>
 800efd6:	89b1      	ldrh	r1, [r6, #12]
 800efd8:	4605      	mov	r5, r0
 800efda:	4638      	mov	r0, r7
 800efdc:	f7fc fab6 	bl	800b54c <ucdr_serialize_uint16_t>
 800efe0:	89f1      	ldrh	r1, [r6, #14]
 800efe2:	4005      	ands	r5, r0
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7fc fab1 	bl	800b54c <ucdr_serialize_uint16_t>
 800efea:	8a31      	ldrh	r1, [r6, #16]
 800efec:	4680      	mov	r8, r0
 800efee:	4638      	mov	r0, r7
 800eff0:	f7fc faac 	bl	800b54c <ucdr_serialize_uint16_t>
 800eff4:	b2ed      	uxtb	r5, r5
 800eff6:	4025      	ands	r5, r4
 800eff8:	ea08 0505 	and.w	r5, r8, r5
 800effc:	ea00 0405 	and.w	r4, r0, r5
 800f000:	4620      	mov	r0, r4
 800f002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f006:	bf00      	nop

0800f008 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f008:	f7ff ba16 	b.w	800e438 <uxr_serialize_CLIENT_Representation>

0800f00c <uxr_serialize_CREATE_Payload>:
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00e:	2202      	movs	r2, #2
 800f010:	4607      	mov	r7, r0
 800f012:	460e      	mov	r6, r1
 800f014:	f004 fdac 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f018:	2202      	movs	r2, #2
 800f01a:	18b1      	adds	r1, r6, r2
 800f01c:	4605      	mov	r5, r0
 800f01e:	4638      	mov	r0, r7
 800f020:	f004 fda6 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f024:	7931      	ldrb	r1, [r6, #4]
 800f026:	4604      	mov	r4, r0
 800f028:	4638      	mov	r0, r7
 800f02a:	f7fc fa63 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f02e:	b170      	cbz	r0, 800f04e <uxr_serialize_CREATE_Payload+0x42>
 800f030:	7933      	ldrb	r3, [r6, #4]
 800f032:	402c      	ands	r4, r5
 800f034:	3b01      	subs	r3, #1
 800f036:	b2e4      	uxtb	r4, r4
 800f038:	2b0d      	cmp	r3, #13
 800f03a:	d809      	bhi.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f03c:	e8df f003 	tbb	[pc, r3]
 800f040:	23230a4c 	.word	0x23230a4c
 800f044:	0a0a0a0a 	.word	0x0a0a0a0a
 800f048:	12121208 	.word	0x12121208
 800f04c:	3e45      	.short	0x3e45
 800f04e:	2400      	movs	r4, #0
 800f050:	4620      	mov	r0, r4
 800f052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f054:	f106 0108 	add.w	r1, r6, #8
 800f058:	4638      	mov	r0, r7
 800f05a:	f7ff faf3 	bl	800e644 <uxr_serialize_DATAWRITER_Representation>
 800f05e:	4004      	ands	r4, r0
 800f060:	4620      	mov	r0, r4
 800f062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f064:	7a31      	ldrb	r1, [r6, #8]
 800f066:	4638      	mov	r0, r7
 800f068:	f7fc fa44 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d0ee      	beq.n	800f04e <uxr_serialize_CREATE_Payload+0x42>
 800f070:	7a33      	ldrb	r3, [r6, #8]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d001      	beq.n	800f07a <uxr_serialize_CREATE_Payload+0x6e>
 800f076:	2b02      	cmp	r3, #2
 800f078:	d1ea      	bne.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f07a:	68f1      	ldr	r1, [r6, #12]
 800f07c:	4638      	mov	r0, r7
 800f07e:	f004 fe97 	bl	8013db0 <ucdr_serialize_string>
 800f082:	4004      	ands	r4, r0
 800f084:	e7e4      	b.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f086:	7a31      	ldrb	r1, [r6, #8]
 800f088:	4638      	mov	r0, r7
 800f08a:	f7fc fa33 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f08e:	4605      	mov	r5, r0
 800f090:	b158      	cbz	r0, 800f0aa <uxr_serialize_CREATE_Payload+0x9e>
 800f092:	7a33      	ldrb	r3, [r6, #8]
 800f094:	2b02      	cmp	r3, #2
 800f096:	d034      	beq.n	800f102 <uxr_serialize_CREATE_Payload+0xf6>
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d106      	bne.n	800f0aa <uxr_serialize_CREATE_Payload+0x9e>
 800f09c:	68f2      	ldr	r2, [r6, #12]
 800f09e:	f106 0110 	add.w	r1, r6, #16
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f004 fe58 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f0b0:	4638      	mov	r0, r7
 800f0b2:	f004 fd5d 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f0b6:	4028      	ands	r0, r5
 800f0b8:	4004      	ands	r4, r0
 800f0ba:	e7c9      	b.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f0bc:	f106 0108 	add.w	r1, r6, #8
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7ff f9b9 	bl	800e438 <uxr_serialize_CLIENT_Representation>
 800f0c6:	4004      	ands	r4, r0
 800f0c8:	e7c2      	b.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f0ca:	f106 0108 	add.w	r1, r6, #8
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	f7ff fa6e 	bl	800e5b0 <uxr_serialize_AGENT_Representation>
 800f0d4:	4004      	ands	r4, r0
 800f0d6:	e7bb      	b.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f0d8:	7a31      	ldrb	r1, [r6, #8]
 800f0da:	4638      	mov	r0, r7
 800f0dc:	f7fc fa0a 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	b130      	cbz	r0, 800f0f2 <uxr_serialize_CREATE_Payload+0xe6>
 800f0e4:	7a33      	ldrb	r3, [r6, #8]
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d011      	beq.n	800f10e <uxr_serialize_CREATE_Payload+0x102>
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d015      	beq.n	800f11a <uxr_serialize_CREATE_Payload+0x10e>
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d00d      	beq.n	800f10e <uxr_serialize_CREATE_Payload+0x102>
 800f0f2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	f7fc ff38 	bl	800bf6c <ucdr_serialize_int16_t>
 800f0fc:	4028      	ands	r0, r5
 800f0fe:	4004      	ands	r4, r0
 800f100:	e7a6      	b.n	800f050 <uxr_serialize_CREATE_Payload+0x44>
 800f102:	68f1      	ldr	r1, [r6, #12]
 800f104:	4638      	mov	r0, r7
 800f106:	f004 fe53 	bl	8013db0 <ucdr_serialize_string>
 800f10a:	4605      	mov	r5, r0
 800f10c:	e7cd      	b.n	800f0aa <uxr_serialize_CREATE_Payload+0x9e>
 800f10e:	68f1      	ldr	r1, [r6, #12]
 800f110:	4638      	mov	r0, r7
 800f112:	f004 fe4d 	bl	8013db0 <ucdr_serialize_string>
 800f116:	4605      	mov	r5, r0
 800f118:	e7eb      	b.n	800f0f2 <uxr_serialize_CREATE_Payload+0xe6>
 800f11a:	68f2      	ldr	r2, [r6, #12]
 800f11c:	f106 0110 	add.w	r1, r6, #16
 800f120:	4638      	mov	r0, r7
 800f122:	f004 fe19 	bl	8013d58 <ucdr_serialize_sequence_uint8_t>
 800f126:	4605      	mov	r5, r0
 800f128:	e7e3      	b.n	800f0f2 <uxr_serialize_CREATE_Payload+0xe6>
 800f12a:	bf00      	nop

0800f12c <uxr_deserialize_GET_INFO_Payload>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	2202      	movs	r2, #2
 800f130:	4605      	mov	r5, r0
 800f132:	460e      	mov	r6, r1
 800f134:	f004 fd80 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f138:	2202      	movs	r2, #2
 800f13a:	18b1      	adds	r1, r6, r2
 800f13c:	4604      	mov	r4, r0
 800f13e:	4628      	mov	r0, r5
 800f140:	f004 fd7a 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f144:	1d31      	adds	r1, r6, #4
 800f146:	4004      	ands	r4, r0
 800f148:	4628      	mov	r0, r5
 800f14a:	f7fc fd19 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800f14e:	b2e4      	uxtb	r4, r4
 800f150:	4020      	ands	r0, r4
 800f152:	bd70      	pop	{r4, r5, r6, pc}

0800f154 <uxr_serialize_DELETE_Payload>:
 800f154:	b570      	push	{r4, r5, r6, lr}
 800f156:	2202      	movs	r2, #2
 800f158:	4605      	mov	r5, r0
 800f15a:	460e      	mov	r6, r1
 800f15c:	f004 fd08 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f160:	2202      	movs	r2, #2
 800f162:	4604      	mov	r4, r0
 800f164:	18b1      	adds	r1, r6, r2
 800f166:	4628      	mov	r0, r5
 800f168:	f004 fd02 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f16c:	4020      	ands	r0, r4
 800f16e:	b2c0      	uxtb	r0, r0
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	bf00      	nop

0800f174 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f178:	4605      	mov	r5, r0
 800f17a:	460e      	mov	r6, r1
 800f17c:	f7fc f9d0 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f180:	1c71      	adds	r1, r6, #1
 800f182:	4604      	mov	r4, r0
 800f184:	4628      	mov	r0, r5
 800f186:	f7fc f9cb 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f18a:	2204      	movs	r2, #4
 800f18c:	18b1      	adds	r1, r6, r2
 800f18e:	4680      	mov	r8, r0
 800f190:	4628      	mov	r0, r5
 800f192:	f004 fd51 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f196:	f106 0108 	add.w	r1, r6, #8
 800f19a:	4607      	mov	r7, r0
 800f19c:	2202      	movs	r2, #2
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f004 fd4a 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f1a4:	ea04 0308 	and.w	r3, r4, r8
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	ea03 0407 	and.w	r4, r3, r7
 800f1ae:	2202      	movs	r2, #2
 800f1b0:	4607      	mov	r7, r0
 800f1b2:	f106 010a 	add.w	r1, r6, #10
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f004 fd3e 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f1bc:	f106 010c 	add.w	r1, r6, #12
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	461d      	mov	r5, r3
 800f1c6:	f7fc f97d 	bl	800b4c4 <ucdr_deserialize_bool>
 800f1ca:	403c      	ands	r4, r7
 800f1cc:	4025      	ands	r5, r4
 800f1ce:	4028      	ands	r0, r5
 800f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1d4 <uxr_deserialize_STATUS_Payload>:
 800f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d8:	2202      	movs	r2, #2
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460f      	mov	r7, r1
 800f1de:	f004 fd2b 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	18b9      	adds	r1, r7, r2
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f004 fd25 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f1ee:	1d39      	adds	r1, r7, #4
 800f1f0:	4680      	mov	r8, r0
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7fc f994 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f1f8:	1d79      	adds	r1, r7, #5
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	f7fc f98f 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f202:	ea05 0508 	and.w	r5, r5, r8
 800f206:	402c      	ands	r4, r5
 800f208:	4020      	ands	r0, r4
 800f20a:	b2c0      	uxtb	r0, r0
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f210 <uxr_serialize_INFO_Payload>:
 800f210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f214:	2202      	movs	r2, #2
 800f216:	460c      	mov	r4, r1
 800f218:	4605      	mov	r5, r0
 800f21a:	f004 fca9 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f21e:	2202      	movs	r2, #2
 800f220:	18a1      	adds	r1, r4, r2
 800f222:	4680      	mov	r8, r0
 800f224:	4628      	mov	r0, r5
 800f226:	f004 fca3 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f22a:	7921      	ldrb	r1, [r4, #4]
 800f22c:	4607      	mov	r7, r0
 800f22e:	4628      	mov	r0, r5
 800f230:	f7fc f960 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f234:	7961      	ldrb	r1, [r4, #5]
 800f236:	4606      	mov	r6, r0
 800f238:	4628      	mov	r0, r5
 800f23a:	f7fc f95b 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f23e:	ea08 0807 	and.w	r8, r8, r7
 800f242:	ea06 0608 	and.w	r6, r6, r8
 800f246:	4006      	ands	r6, r0
 800f248:	7a21      	ldrb	r1, [r4, #8]
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7fc f924 	bl	800b498 <ucdr_serialize_bool>
 800f250:	7a23      	ldrb	r3, [r4, #8]
 800f252:	b2f7      	uxtb	r7, r6
 800f254:	4606      	mov	r6, r0
 800f256:	b96b      	cbnz	r3, 800f274 <uxr_serialize_INFO_Payload+0x64>
 800f258:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f25c:	4628      	mov	r0, r5
 800f25e:	f7fc f91b 	bl	800b498 <ucdr_serialize_bool>
 800f262:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f266:	4030      	ands	r0, r6
 800f268:	b2c6      	uxtb	r6, r0
 800f26a:	b983      	cbnz	r3, 800f28e <uxr_serialize_INFO_Payload+0x7e>
 800f26c:	ea06 0007 	and.w	r0, r6, r7
 800f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f274:	7b21      	ldrb	r1, [r4, #12]
 800f276:	4628      	mov	r0, r5
 800f278:	f7fc f93c 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f27c:	b188      	cbz	r0, 800f2a2 <uxr_serialize_INFO_Payload+0x92>
 800f27e:	f104 010c 	add.w	r1, r4, #12
 800f282:	4628      	mov	r0, r5
 800f284:	f7ff fa06 	bl	800e694 <uxr_serialize_ObjectVariant.part.0>
 800f288:	4030      	ands	r0, r6
 800f28a:	b2c6      	uxtb	r6, r0
 800f28c:	e7e4      	b.n	800f258 <uxr_serialize_INFO_Payload+0x48>
 800f28e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f292:	4628      	mov	r0, r5
 800f294:	f7ff fdb2 	bl	800edfc <uxr_serialize_ActivityInfoVariant>
 800f298:	4006      	ands	r6, r0
 800f29a:	ea06 0007 	and.w	r0, r6, r7
 800f29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	e7d8      	b.n	800f258 <uxr_serialize_INFO_Payload+0x48>
 800f2a6:	bf00      	nop

0800f2a8 <uxr_serialize_READ_DATA_Payload>:
 800f2a8:	b570      	push	{r4, r5, r6, lr}
 800f2aa:	2202      	movs	r2, #2
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	460e      	mov	r6, r1
 800f2b0:	f004 fc5e 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	18b1      	adds	r1, r6, r2
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f004 fc58 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f2c0:	1d31      	adds	r1, r6, #4
 800f2c2:	4004      	ands	r4, r0
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f7ff fe5d 	bl	800ef84 <uxr_serialize_ReadSpecification>
 800f2ca:	b2e4      	uxtb	r4, r4
 800f2cc:	4020      	ands	r0, r4
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}

0800f2d0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	4605      	mov	r5, r0
 800f2d6:	460e      	mov	r6, r1
 800f2d8:	f004 fc4a 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f2dc:	2202      	movs	r2, #2
 800f2de:	4604      	mov	r4, r0
 800f2e0:	18b1      	adds	r1, r6, r2
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f004 fc44 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f2e8:	4020      	ands	r0, r4
 800f2ea:	b2c0      	uxtb	r0, r0
 800f2ec:	bd70      	pop	{r4, r5, r6, pc}
 800f2ee:	bf00      	nop

0800f2f0 <uxr_serialize_ACKNACK_Payload>:
 800f2f0:	b570      	push	{r4, r5, r6, lr}
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	460e      	mov	r6, r1
 800f2f6:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	f7fc f926 	bl	800b54c <ucdr_serialize_uint16_t>
 800f300:	2202      	movs	r2, #2
 800f302:	4621      	mov	r1, r4
 800f304:	4604      	mov	r4, r0
 800f306:	4628      	mov	r0, r5
 800f308:	f004 fc32 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f30c:	7931      	ldrb	r1, [r6, #4]
 800f30e:	4004      	ands	r4, r0
 800f310:	4628      	mov	r0, r5
 800f312:	f7fc f8ef 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f316:	b2e4      	uxtb	r4, r4
 800f318:	4020      	ands	r0, r4
 800f31a:	bd70      	pop	{r4, r5, r6, pc}

0800f31c <uxr_deserialize_ACKNACK_Payload>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4605      	mov	r5, r0
 800f320:	460e      	mov	r6, r1
 800f322:	f7fc fa13 	bl	800b74c <ucdr_deserialize_uint16_t>
 800f326:	2202      	movs	r2, #2
 800f328:	18b1      	adds	r1, r6, r2
 800f32a:	4604      	mov	r4, r0
 800f32c:	4628      	mov	r0, r5
 800f32e:	f004 fc83 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f332:	1d31      	adds	r1, r6, #4
 800f334:	4004      	ands	r4, r0
 800f336:	4628      	mov	r0, r5
 800f338:	f7fc f8f2 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f33c:	b2e4      	uxtb	r4, r4
 800f33e:	4020      	ands	r0, r4
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	bf00      	nop

0800f344 <uxr_serialize_HEARTBEAT_Payload>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	460d      	mov	r5, r1
 800f348:	8809      	ldrh	r1, [r1, #0]
 800f34a:	4606      	mov	r6, r0
 800f34c:	f7fc f8fe 	bl	800b54c <ucdr_serialize_uint16_t>
 800f350:	8869      	ldrh	r1, [r5, #2]
 800f352:	4604      	mov	r4, r0
 800f354:	4630      	mov	r0, r6
 800f356:	f7fc f8f9 	bl	800b54c <ucdr_serialize_uint16_t>
 800f35a:	7929      	ldrb	r1, [r5, #4]
 800f35c:	4004      	ands	r4, r0
 800f35e:	4630      	mov	r0, r6
 800f360:	f7fc f8c8 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f364:	b2e4      	uxtb	r4, r4
 800f366:	4020      	ands	r0, r4
 800f368:	bd70      	pop	{r4, r5, r6, pc}
 800f36a:	bf00      	nop

0800f36c <uxr_deserialize_HEARTBEAT_Payload>:
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	4605      	mov	r5, r0
 800f370:	460e      	mov	r6, r1
 800f372:	f7fc f9eb 	bl	800b74c <ucdr_deserialize_uint16_t>
 800f376:	1cb1      	adds	r1, r6, #2
 800f378:	4604      	mov	r4, r0
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7fc f9e6 	bl	800b74c <ucdr_deserialize_uint16_t>
 800f380:	1d31      	adds	r1, r6, #4
 800f382:	4004      	ands	r4, r0
 800f384:	4628      	mov	r0, r5
 800f386:	f7fc f8cb 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f38a:	b2e4      	uxtb	r4, r4
 800f38c:	4020      	ands	r0, r4
 800f38e:	bd70      	pop	{r4, r5, r6, pc}

0800f390 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f394:	4605      	mov	r5, r0
 800f396:	460e      	mov	r6, r1
 800f398:	f7fc ff74 	bl	800c284 <ucdr_deserialize_int32_t>
 800f39c:	1d31      	adds	r1, r6, #4
 800f39e:	4607      	mov	r7, r0
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f7fc fbed 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800f3a6:	f106 0108 	add.w	r1, r6, #8
 800f3aa:	4680      	mov	r8, r0
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f7fc ff69 	bl	800c284 <ucdr_deserialize_int32_t>
 800f3b2:	f106 010c 	add.w	r1, r6, #12
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f7fc fbe1 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800f3be:	ea07 0708 	and.w	r7, r7, r8
 800f3c2:	403c      	ands	r4, r7
 800f3c4:	f106 0110 	add.w	r1, r6, #16
 800f3c8:	4004      	ands	r4, r0
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f7fc ff5a 	bl	800c284 <ucdr_deserialize_int32_t>
 800f3d0:	f106 0114 	add.w	r1, r6, #20
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f7fc fbd2 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800f3dc:	b2e4      	uxtb	r4, r4
 800f3de:	403c      	ands	r4, r7
 800f3e0:	4020      	ands	r0, r4
 800f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e6:	bf00      	nop

0800f3e8 <uxr_serialize_SampleIdentity>:
 800f3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ec:	220c      	movs	r2, #12
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	460d      	mov	r5, r1
 800f3f2:	f004 fbbd 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f3f6:	2203      	movs	r2, #3
 800f3f8:	f105 010c 	add.w	r1, r5, #12
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	4620      	mov	r0, r4
 800f400:	f004 fbb6 	bl	8013b70 <ucdr_serialize_array_uint8_t>
 800f404:	7be9      	ldrb	r1, [r5, #15]
 800f406:	4680      	mov	r8, r0
 800f408:	4620      	mov	r0, r4
 800f40a:	f7fc f873 	bl	800b4f4 <ucdr_serialize_uint8_t>
 800f40e:	6929      	ldr	r1, [r5, #16]
 800f410:	4606      	mov	r6, r0
 800f412:	4620      	mov	r0, r4
 800f414:	f7fc fe9e 	bl	800c154 <ucdr_serialize_int32_t>
 800f418:	6969      	ldr	r1, [r5, #20]
 800f41a:	4603      	mov	r3, r0
 800f41c:	4620      	mov	r0, r4
 800f41e:	ea07 0708 	and.w	r7, r7, r8
 800f422:	461c      	mov	r4, r3
 800f424:	f7fc fa7c 	bl	800b920 <ucdr_serialize_uint32_t>
 800f428:	403e      	ands	r6, r7
 800f42a:	4034      	ands	r4, r6
 800f42c:	4020      	ands	r0, r4
 800f42e:	b2c0      	uxtb	r0, r0
 800f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f434 <uxr_deserialize_SampleIdentity>:
 800f434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f438:	220c      	movs	r2, #12
 800f43a:	4604      	mov	r4, r0
 800f43c:	460d      	mov	r5, r1
 800f43e:	f004 fbfb 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f442:	2203      	movs	r2, #3
 800f444:	f105 010c 	add.w	r1, r5, #12
 800f448:	4607      	mov	r7, r0
 800f44a:	4620      	mov	r0, r4
 800f44c:	f004 fbf4 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 800f450:	f105 010f 	add.w	r1, r5, #15
 800f454:	4680      	mov	r8, r0
 800f456:	4620      	mov	r0, r4
 800f458:	f7fc f862 	bl	800b520 <ucdr_deserialize_uint8_t>
 800f45c:	f105 0110 	add.w	r1, r5, #16
 800f460:	4606      	mov	r6, r0
 800f462:	4620      	mov	r0, r4
 800f464:	f7fc ff0e 	bl	800c284 <ucdr_deserialize_int32_t>
 800f468:	f105 0114 	add.w	r1, r5, #20
 800f46c:	4603      	mov	r3, r0
 800f46e:	4620      	mov	r0, r4
 800f470:	ea07 0708 	and.w	r7, r7, r8
 800f474:	461c      	mov	r4, r3
 800f476:	f7fc fb83 	bl	800bb80 <ucdr_deserialize_uint32_t>
 800f47a:	403e      	ands	r6, r7
 800f47c:	4034      	ands	r4, r6
 800f47e:	4020      	ands	r0, r4
 800f480:	b2c0      	uxtb	r0, r0
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f486:	bf00      	nop

0800f488 <rcl_client_get_rmw_handle>:
 800f488:	b118      	cbz	r0, 800f492 <rcl_client_get_rmw_handle+0xa>
 800f48a:	6800      	ldr	r0, [r0, #0]
 800f48c:	b108      	cbz	r0, 800f492 <rcl_client_get_rmw_handle+0xa>
 800f48e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f492:	4770      	bx	lr

0800f494 <rcl_send_request>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	b1e8      	cbz	r0, 800f4d6 <rcl_send_request+0x42>
 800f49a:	4604      	mov	r4, r0
 800f49c:	6800      	ldr	r0, [r0, #0]
 800f49e:	b1d0      	cbz	r0, 800f4d6 <rcl_send_request+0x42>
 800f4a0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f4a4:	b1bb      	cbz	r3, 800f4d6 <rcl_send_request+0x42>
 800f4a6:	460e      	mov	r6, r1
 800f4a8:	b1d1      	cbz	r1, 800f4e0 <rcl_send_request+0x4c>
 800f4aa:	4615      	mov	r5, r2
 800f4ac:	b1c2      	cbz	r2, 800f4e0 <rcl_send_request+0x4c>
 800f4ae:	2105      	movs	r1, #5
 800f4b0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f4b4:	f002 fbf8 	bl	8011ca8 <__atomic_load_8>
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	e9c5 0100 	strd	r0, r1, [r5]
 800f4be:	462a      	mov	r2, r5
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f4c6:	f003 fdbd 	bl	8013044 <rmw_send_request>
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	b160      	cbz	r0, 800f4e8 <rcl_send_request+0x54>
 800f4ce:	2601      	movs	r6, #1
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	b002      	add	sp, #8
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
 800f4d6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f4da:	4630      	mov	r0, r6
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	260b      	movs	r6, #11
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	b002      	add	sp, #8
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	2105      	movs	r1, #5
 800f4ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4f0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f4f4:	9100      	str	r1, [sp, #0]
 800f4f6:	f002 fc43 	bl	8011d80 <__atomic_exchange_8>
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	b002      	add	sp, #8
 800f4fe:	bd70      	pop	{r4, r5, r6, pc}

0800f500 <rcl_take_response>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	468e      	mov	lr, r1
 800f504:	460c      	mov	r4, r1
 800f506:	4616      	mov	r6, r2
 800f508:	4605      	mov	r5, r0
 800f50a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f50e:	b08c      	sub	sp, #48	@ 0x30
 800f510:	f10d 0c18 	add.w	ip, sp, #24
 800f514:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f518:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f51c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f520:	b35d      	cbz	r5, 800f57a <rcl_take_response+0x7a>
 800f522:	682b      	ldr	r3, [r5, #0]
 800f524:	b34b      	cbz	r3, 800f57a <rcl_take_response+0x7a>
 800f526:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f52a:	b330      	cbz	r0, 800f57a <rcl_take_response+0x7a>
 800f52c:	b346      	cbz	r6, 800f580 <rcl_take_response+0x80>
 800f52e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f588 <rcl_take_response+0x88>
 800f532:	2300      	movs	r3, #0
 800f534:	f88d 3007 	strb.w	r3, [sp, #7]
 800f538:	4632      	mov	r2, r6
 800f53a:	f10d 0307 	add.w	r3, sp, #7
 800f53e:	a902      	add	r1, sp, #8
 800f540:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f544:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f548:	f003 fe84 	bl	8013254 <rmw_take_response>
 800f54c:	4605      	mov	r5, r0
 800f54e:	b9c8      	cbnz	r0, 800f584 <rcl_take_response+0x84>
 800f550:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f554:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f558:	2a00      	cmp	r2, #0
 800f55a:	bf08      	it	eq
 800f55c:	461d      	moveq	r5, r3
 800f55e:	f10d 0e18 	add.w	lr, sp, #24
 800f562:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f566:	46a4      	mov	ip, r4
 800f568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f56c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f570:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f574:	4628      	mov	r0, r5
 800f576:	b00c      	add	sp, #48	@ 0x30
 800f578:	bd70      	pop	{r4, r5, r6, pc}
 800f57a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800f57e:	e7ee      	b.n	800f55e <rcl_take_response+0x5e>
 800f580:	250b      	movs	r5, #11
 800f582:	e7ec      	b.n	800f55e <rcl_take_response+0x5e>
 800f584:	2501      	movs	r5, #1
 800f586:	e7ea      	b.n	800f55e <rcl_take_response+0x5e>
	...

0800f590 <rcl_client_is_valid>:
 800f590:	b130      	cbz	r0, 800f5a0 <rcl_client_is_valid+0x10>
 800f592:	6800      	ldr	r0, [r0, #0]
 800f594:	b120      	cbz	r0, 800f5a0 <rcl_client_is_valid+0x10>
 800f596:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f59a:	3800      	subs	r0, #0
 800f59c:	bf18      	it	ne
 800f59e:	2001      	movne	r0, #1
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop

0800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f5a4:	280b      	cmp	r0, #11
 800f5a6:	dc0d      	bgt.n	800f5c4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	db09      	blt.n	800f5c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5ac:	280b      	cmp	r0, #11
 800f5ae:	d807      	bhi.n	800f5c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5b0:	e8df f000 	tbb	[pc, r0]
 800f5b4:	07060607 	.word	0x07060607
 800f5b8:	06060606 	.word	0x06060606
 800f5bc:	07070606 	.word	0x07070606
 800f5c0:	2001      	movs	r0, #1
 800f5c2:	4770      	bx	lr
 800f5c4:	28cb      	cmp	r0, #203	@ 0xcb
 800f5c6:	bf18      	it	ne
 800f5c8:	2001      	movne	r0, #1
 800f5ca:	4770      	bx	lr

0800f5cc <rcl_get_zero_initialized_context>:
 800f5cc:	4a03      	ldr	r2, [pc, #12]	@ (800f5dc <rcl_get_zero_initialized_context+0x10>)
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	4770      	bx	lr
 800f5dc:	08017aa4 	.word	0x08017aa4

0800f5e0 <rcl_context_is_valid>:
 800f5e0:	b118      	cbz	r0, 800f5ea <rcl_context_is_valid+0xa>
 800f5e2:	6840      	ldr	r0, [r0, #4]
 800f5e4:	3800      	subs	r0, #0
 800f5e6:	bf18      	it	ne
 800f5e8:	2001      	movne	r0, #1
 800f5ea:	4770      	bx	lr

0800f5ec <__cleanup_context>:
 800f5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	6800      	ldr	r0, [r0, #0]
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	6073      	str	r3, [r6, #4]
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d049      	beq.n	800f690 <__cleanup_context+0xa4>
 800f5fc:	6947      	ldr	r7, [r0, #20]
 800f5fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f602:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f606:	b137      	cbz	r7, 800f616 <__cleanup_context+0x2a>
 800f608:	3014      	adds	r0, #20
 800f60a:	f000 f9a5 	bl	800f958 <rcl_init_options_fini>
 800f60e:	4607      	mov	r7, r0
 800f610:	2800      	cmp	r0, #0
 800f612:	d144      	bne.n	800f69e <__cleanup_context+0xb2>
 800f614:	6830      	ldr	r0, [r6, #0]
 800f616:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f618:	b143      	cbz	r3, 800f62c <__cleanup_context+0x40>
 800f61a:	3028      	adds	r0, #40	@ 0x28
 800f61c:	f003 fb5a 	bl	8012cd4 <rmw_context_fini>
 800f620:	b118      	cbz	r0, 800f62a <__cleanup_context+0x3e>
 800f622:	2f00      	cmp	r7, #0
 800f624:	d03e      	beq.n	800f6a4 <__cleanup_context+0xb8>
 800f626:	f7fb f847 	bl	800a6b8 <rcutils_reset_error>
 800f62a:	6830      	ldr	r0, [r6, #0]
 800f62c:	6a03      	ldr	r3, [r0, #32]
 800f62e:	b1db      	cbz	r3, 800f668 <__cleanup_context+0x7c>
 800f630:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f634:	2a01      	cmp	r2, #1
 800f636:	f17c 0100 	sbcs.w	r1, ip, #0
 800f63a:	db11      	blt.n	800f660 <__cleanup_context+0x74>
 800f63c:	2400      	movs	r4, #0
 800f63e:	4625      	mov	r5, r4
 800f640:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f644:	4649      	mov	r1, r9
 800f646:	b1b8      	cbz	r0, 800f678 <__cleanup_context+0x8c>
 800f648:	47c0      	blx	r8
 800f64a:	6833      	ldr	r3, [r6, #0]
 800f64c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f650:	3401      	adds	r4, #1
 800f652:	f145 0500 	adc.w	r5, r5, #0
 800f656:	4294      	cmp	r4, r2
 800f658:	eb75 010c 	sbcs.w	r1, r5, ip
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	dbef      	blt.n	800f640 <__cleanup_context+0x54>
 800f660:	4618      	mov	r0, r3
 800f662:	4649      	mov	r1, r9
 800f664:	47c0      	blx	r8
 800f666:	6830      	ldr	r0, [r6, #0]
 800f668:	4649      	mov	r1, r9
 800f66a:	47c0      	blx	r8
 800f66c:	2300      	movs	r3, #0
 800f66e:	e9c6 3300 	strd	r3, r3, [r6]
 800f672:	4638      	mov	r0, r7
 800f674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f678:	3401      	adds	r4, #1
 800f67a:	f145 0500 	adc.w	r5, r5, #0
 800f67e:	4294      	cmp	r4, r2
 800f680:	eb75 010c 	sbcs.w	r1, r5, ip
 800f684:	dbdc      	blt.n	800f640 <__cleanup_context+0x54>
 800f686:	4618      	mov	r0, r3
 800f688:	4649      	mov	r1, r9
 800f68a:	47c0      	blx	r8
 800f68c:	6830      	ldr	r0, [r6, #0]
 800f68e:	e7eb      	b.n	800f668 <__cleanup_context+0x7c>
 800f690:	4607      	mov	r7, r0
 800f692:	2300      	movs	r3, #0
 800f694:	e9c6 3300 	strd	r3, r3, [r6]
 800f698:	4638      	mov	r0, r7
 800f69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69e:	f7fb f80b 	bl	800a6b8 <rcutils_reset_error>
 800f6a2:	e7b7      	b.n	800f614 <__cleanup_context+0x28>
 800f6a4:	f7ff ff7e 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	e7bc      	b.n	800f626 <__cleanup_context+0x3a>

0800f6ac <rcl_init>:
 800f6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	1e05      	subs	r5, r0, #0
 800f6b2:	b09c      	sub	sp, #112	@ 0x70
 800f6b4:	460e      	mov	r6, r1
 800f6b6:	4690      	mov	r8, r2
 800f6b8:	461f      	mov	r7, r3
 800f6ba:	f340 8099 	ble.w	800f7f0 <rcl_init+0x144>
 800f6be:	2900      	cmp	r1, #0
 800f6c0:	f000 8099 	beq.w	800f7f6 <rcl_init+0x14a>
 800f6c4:	f1a1 0e04 	sub.w	lr, r1, #4
 800f6c8:	f04f 0c00 	mov.w	ip, #0
 800f6cc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f6d0:	f10c 0c01 	add.w	ip, ip, #1
 800f6d4:	2c00      	cmp	r4, #0
 800f6d6:	f000 808e 	beq.w	800f7f6 <rcl_init+0x14a>
 800f6da:	4565      	cmp	r5, ip
 800f6dc:	d1f6      	bne.n	800f6cc <rcl_init+0x20>
 800f6de:	f1b8 0f00 	cmp.w	r8, #0
 800f6e2:	f000 8088 	beq.w	800f7f6 <rcl_init+0x14a>
 800f6e6:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ea:	2c00      	cmp	r4, #0
 800f6ec:	f000 8083 	beq.w	800f7f6 <rcl_init+0x14a>
 800f6f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6f2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f6f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	f8cc 3000 	str.w	r3, [ip]
 800f700:	a817      	add	r0, sp, #92	@ 0x5c
 800f702:	f7fa ffb3 	bl	800a66c <rcutils_allocator_is_valid>
 800f706:	2800      	cmp	r0, #0
 800f708:	d075      	beq.n	800f7f6 <rcl_init+0x14a>
 800f70a:	2f00      	cmp	r7, #0
 800f70c:	d073      	beq.n	800f7f6 <rcl_init+0x14a>
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d175      	bne.n	800f800 <rcl_init+0x154>
 800f714:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f718:	2178      	movs	r1, #120	@ 0x78
 800f71a:	2001      	movs	r0, #1
 800f71c:	4798      	blx	r3
 800f71e:	4604      	mov	r4, r0
 800f720:	6038      	str	r0, [r7, #0]
 800f722:	2800      	cmp	r0, #0
 800f724:	f000 80a0 	beq.w	800f868 <rcl_init+0x1bc>
 800f728:	a802      	add	r0, sp, #8
 800f72a:	f002 fdfd 	bl	8012328 <rmw_get_zero_initialized_context>
 800f72e:	a902      	add	r1, sp, #8
 800f730:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f734:	2250      	movs	r2, #80	@ 0x50
 800f736:	ac17      	add	r4, sp, #92	@ 0x5c
 800f738:	f007 f833 	bl	80167a2 <memcpy>
 800f73c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f73e:	f8d7 e000 	ldr.w	lr, [r7]
 800f742:	46f4      	mov	ip, lr
 800f744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	f8cc 3000 	str.w	r3, [ip]
 800f74e:	f10e 0114 	add.w	r1, lr, #20
 800f752:	4640      	mov	r0, r8
 800f754:	f000 f92a 	bl	800f9ac <rcl_init_options_copy>
 800f758:	4604      	mov	r4, r0
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d144      	bne.n	800f7e8 <rcl_init+0x13c>
 800f75e:	f8d7 9000 	ldr.w	r9, [r7]
 800f762:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f766:	f8c9 0020 	str.w	r0, [r9, #32]
 800f76a:	f8c9 5018 	str.w	r5, [r9, #24]
 800f76e:	f8c9 801c 	str.w	r8, [r9, #28]
 800f772:	2d00      	cmp	r5, #0
 800f774:	d04b      	beq.n	800f80e <rcl_init+0x162>
 800f776:	2e00      	cmp	r6, #0
 800f778:	d049      	beq.n	800f80e <rcl_init+0x162>
 800f77a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f77e:	2104      	movs	r1, #4
 800f780:	4628      	mov	r0, r5
 800f782:	4798      	blx	r3
 800f784:	f8c9 0020 	str.w	r0, [r9, #32]
 800f788:	f8d7 9000 	ldr.w	r9, [r7]
 800f78c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f790:	46ca      	mov	sl, r9
 800f792:	b343      	cbz	r3, 800f7e6 <rcl_init+0x13a>
 800f794:	2d01      	cmp	r5, #1
 800f796:	f178 0300 	sbcs.w	r3, r8, #0
 800f79a:	db38      	blt.n	800f80e <rcl_init+0x162>
 800f79c:	2400      	movs	r4, #0
 800f79e:	3e04      	subs	r6, #4
 800f7a0:	46a1      	mov	r9, r4
 800f7a2:	e00b      	b.n	800f7bc <rcl_init+0x110>
 800f7a4:	6831      	ldr	r1, [r6, #0]
 800f7a6:	f006 fffc 	bl	80167a2 <memcpy>
 800f7aa:	3401      	adds	r4, #1
 800f7ac:	f149 0900 	adc.w	r9, r9, #0
 800f7b0:	45c8      	cmp	r8, r9
 800f7b2:	bf08      	it	eq
 800f7b4:	42a5      	cmpeq	r5, r4
 800f7b6:	d028      	beq.n	800f80a <rcl_init+0x15e>
 800f7b8:	f8d7 a000 	ldr.w	sl, [r7]
 800f7bc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f7c0:	f7f0 fd18 	bl	80001f4 <strlen>
 800f7c4:	1c42      	adds	r2, r0, #1
 800f7c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7c8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800f7ca:	f8da a020 	ldr.w	sl, [sl, #32]
 800f7ce:	9201      	str	r2, [sp, #4]
 800f7d0:	4610      	mov	r0, r2
 800f7d2:	4798      	blx	r3
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f7da:	6a1b      	ldr	r3, [r3, #32]
 800f7dc:	9a01      	ldr	r2, [sp, #4]
 800f7de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d1de      	bne.n	800f7a4 <rcl_init+0xf8>
 800f7e6:	240a      	movs	r4, #10
 800f7e8:	4638      	mov	r0, r7
 800f7ea:	f7ff feff 	bl	800f5ec <__cleanup_context>
 800f7ee:	e003      	b.n	800f7f8 <rcl_init+0x14c>
 800f7f0:	2900      	cmp	r1, #0
 800f7f2:	f43f af74 	beq.w	800f6de <rcl_init+0x32>
 800f7f6:	240b      	movs	r4, #11
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	b01c      	add	sp, #112	@ 0x70
 800f7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f800:	2464      	movs	r4, #100	@ 0x64
 800f802:	4620      	mov	r0, r4
 800f804:	b01c      	add	sp, #112	@ 0x70
 800f806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f80a:	f8d7 9000 	ldr.w	r9, [r7]
 800f80e:	491d      	ldr	r1, [pc, #116]	@ (800f884 <rcl_init+0x1d8>)
 800f810:	680b      	ldr	r3, [r1, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	d023      	beq.n	800f85e <rcl_init+0x1b2>
 800f816:	600b      	str	r3, [r1, #0]
 800f818:	461a      	mov	r2, r3
 800f81a:	2400      	movs	r4, #0
 800f81c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f820:	607b      	str	r3, [r7, #4]
 800f822:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f824:	6182      	str	r2, [r0, #24]
 800f826:	3301      	adds	r3, #1
 800f828:	61c4      	str	r4, [r0, #28]
 800f82a:	d01f      	beq.n	800f86c <rcl_init+0x1c0>
 800f82c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f830:	b94b      	cbnz	r3, 800f846 <rcl_init+0x19a>
 800f832:	3030      	adds	r0, #48	@ 0x30
 800f834:	f000 f926 	bl	800fa84 <rcl_get_localhost_only>
 800f838:	4604      	mov	r4, r0
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d1d4      	bne.n	800f7e8 <rcl_init+0x13c>
 800f83e:	f8d7 9000 	ldr.w	r9, [r7]
 800f842:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f846:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800f84a:	3018      	adds	r0, #24
 800f84c:	f003 f90c 	bl	8012a68 <rmw_init>
 800f850:	4604      	mov	r4, r0
 800f852:	2800      	cmp	r0, #0
 800f854:	d0d0      	beq.n	800f7f8 <rcl_init+0x14c>
 800f856:	f7ff fea5 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f85a:	4604      	mov	r4, r0
 800f85c:	e7c4      	b.n	800f7e8 <rcl_init+0x13c>
 800f85e:	2201      	movs	r2, #1
 800f860:	461c      	mov	r4, r3
 800f862:	600a      	str	r2, [r1, #0]
 800f864:	4613      	mov	r3, r2
 800f866:	e7d9      	b.n	800f81c <rcl_init+0x170>
 800f868:	240a      	movs	r4, #10
 800f86a:	e7c5      	b.n	800f7f8 <rcl_init+0x14c>
 800f86c:	3024      	adds	r0, #36	@ 0x24
 800f86e:	f005 fea3 	bl	80155b8 <rcl_get_default_domain_id>
 800f872:	4604      	mov	r4, r0
 800f874:	2800      	cmp	r0, #0
 800f876:	d1b7      	bne.n	800f7e8 <rcl_init+0x13c>
 800f878:	f8d7 9000 	ldr.w	r9, [r7]
 800f87c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f880:	e7d4      	b.n	800f82c <rcl_init+0x180>
 800f882:	bf00      	nop
 800f884:	2000dd0c 	.word	0x2000dd0c

0800f888 <rcl_get_zero_initialized_init_options>:
 800f888:	2000      	movs	r0, #0
 800f88a:	4770      	bx	lr

0800f88c <rcl_init_options_init>:
 800f88c:	b084      	sub	sp, #16
 800f88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f890:	b097      	sub	sp, #92	@ 0x5c
 800f892:	ae1d      	add	r6, sp, #116	@ 0x74
 800f894:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f898:	2800      	cmp	r0, #0
 800f89a:	d058      	beq.n	800f94e <rcl_init_options_init+0xc2>
 800f89c:	6803      	ldr	r3, [r0, #0]
 800f89e:	4605      	mov	r5, r0
 800f8a0:	b133      	cbz	r3, 800f8b0 <rcl_init_options_init+0x24>
 800f8a2:	2464      	movs	r4, #100	@ 0x64
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	b017      	add	sp, #92	@ 0x5c
 800f8a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8ac:	b004      	add	sp, #16
 800f8ae:	4770      	bx	lr
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7fa fedb 	bl	800a66c <rcutils_allocator_is_valid>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d049      	beq.n	800f94e <rcl_init_options_init+0xc2>
 800f8ba:	46b4      	mov	ip, r6
 800f8bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8c0:	ac11      	add	r4, sp, #68	@ 0x44
 800f8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8c4:	f8dc 3000 	ldr.w	r3, [ip]
 800f8c8:	6023      	str	r3, [r4, #0]
 800f8ca:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f8cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8ce:	2050      	movs	r0, #80	@ 0x50
 800f8d0:	4798      	blx	r3
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	6028      	str	r0, [r5, #0]
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d03b      	beq.n	800f952 <rcl_init_options_init+0xc6>
 800f8da:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800f8de:	4686      	mov	lr, r0
 800f8e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8e8:	f8dc 3000 	ldr.w	r3, [ip]
 800f8ec:	f8ce 3000 	str.w	r3, [lr]
 800f8f0:	a802      	add	r0, sp, #8
 800f8f2:	f002 fd29 	bl	8012348 <rmw_get_zero_initialized_init_options>
 800f8f6:	f10d 0e08 	add.w	lr, sp, #8
 800f8fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8fe:	f104 0c18 	add.w	ip, r4, #24
 800f902:	682f      	ldr	r7, [r5, #0]
 800f904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f908:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f90c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f918:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f91c:	ac20      	add	r4, sp, #128	@ 0x80
 800f91e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f922:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f926:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f92a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f92e:	f107 0018 	add.w	r0, r7, #24
 800f932:	f002 ff77 	bl	8012824 <rmw_init_options_init>
 800f936:	4604      	mov	r4, r0
 800f938:	2800      	cmp	r0, #0
 800f93a:	d0b3      	beq.n	800f8a4 <rcl_init_options_init+0x18>
 800f93c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f93e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f940:	6828      	ldr	r0, [r5, #0]
 800f942:	4798      	blx	r3
 800f944:	4620      	mov	r0, r4
 800f946:	f7ff fe2d 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f94a:	4604      	mov	r4, r0
 800f94c:	e7aa      	b.n	800f8a4 <rcl_init_options_init+0x18>
 800f94e:	240b      	movs	r4, #11
 800f950:	e7a8      	b.n	800f8a4 <rcl_init_options_init+0x18>
 800f952:	240a      	movs	r4, #10
 800f954:	e7a6      	b.n	800f8a4 <rcl_init_options_init+0x18>
 800f956:	bf00      	nop

0800f958 <rcl_init_options_fini>:
 800f958:	b530      	push	{r4, r5, lr}
 800f95a:	b087      	sub	sp, #28
 800f95c:	b1f0      	cbz	r0, 800f99c <rcl_init_options_fini+0x44>
 800f95e:	6803      	ldr	r3, [r0, #0]
 800f960:	4604      	mov	r4, r0
 800f962:	b1db      	cbz	r3, 800f99c <rcl_init_options_fini+0x44>
 800f964:	469c      	mov	ip, r3
 800f966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f96a:	f10d 0e04 	add.w	lr, sp, #4
 800f96e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f972:	f8dc 3000 	ldr.w	r3, [ip]
 800f976:	f8ce 3000 	str.w	r3, [lr]
 800f97a:	a801      	add	r0, sp, #4
 800f97c:	f7fa fe76 	bl	800a66c <rcutils_allocator_is_valid>
 800f980:	b160      	cbz	r0, 800f99c <rcl_init_options_fini+0x44>
 800f982:	6820      	ldr	r0, [r4, #0]
 800f984:	3018      	adds	r0, #24
 800f986:	f003 f823 	bl	80129d0 <rmw_init_options_fini>
 800f98a:	4605      	mov	r5, r0
 800f98c:	b950      	cbnz	r0, 800f9a4 <rcl_init_options_fini+0x4c>
 800f98e:	6820      	ldr	r0, [r4, #0]
 800f990:	9b02      	ldr	r3, [sp, #8]
 800f992:	9905      	ldr	r1, [sp, #20]
 800f994:	4798      	blx	r3
 800f996:	4628      	mov	r0, r5
 800f998:	b007      	add	sp, #28
 800f99a:	bd30      	pop	{r4, r5, pc}
 800f99c:	250b      	movs	r5, #11
 800f99e:	4628      	mov	r0, r5
 800f9a0:	b007      	add	sp, #28
 800f9a2:	bd30      	pop	{r4, r5, pc}
 800f9a4:	f7ff fdfe 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	e7f8      	b.n	800f99e <rcl_init_options_fini+0x46>

0800f9ac <rcl_init_options_copy>:
 800f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b0:	b094      	sub	sp, #80	@ 0x50
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d058      	beq.n	800fa68 <rcl_init_options_copy+0xbc>
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	6800      	ldr	r0, [r0, #0]
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d054      	beq.n	800fa68 <rcl_init_options_copy+0xbc>
 800f9be:	460e      	mov	r6, r1
 800f9c0:	f7fa fe54 	bl	800a66c <rcutils_allocator_is_valid>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d04f      	beq.n	800fa68 <rcl_init_options_copy+0xbc>
 800f9c8:	2e00      	cmp	r6, #0
 800f9ca:	d04d      	beq.n	800fa68 <rcl_init_options_copy+0xbc>
 800f9cc:	6833      	ldr	r3, [r6, #0]
 800f9ce:	b123      	cbz	r3, 800f9da <rcl_init_options_copy+0x2e>
 800f9d0:	2464      	movs	r4, #100	@ 0x64
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	b014      	add	sp, #80	@ 0x50
 800f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9da:	6827      	ldr	r7, [r4, #0]
 800f9dc:	46bc      	mov	ip, r7
 800f9de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9e2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800f9e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f9e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f9ea:	f8d7 8000 	ldr.w	r8, [r7]
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	2050      	movs	r0, #80	@ 0x50
 800f9f4:	47c0      	blx	r8
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	6030      	str	r0, [r6, #0]
 800f9fa:	b3d0      	cbz	r0, 800fa72 <rcl_init_options_copy+0xc6>
 800f9fc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800fa00:	4686      	mov	lr, r0
 800fa02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0e:	f8ce 3000 	str.w	r3, [lr]
 800fa12:	4668      	mov	r0, sp
 800fa14:	f002 fc98 	bl	8012348 <rmw_get_zero_initialized_init_options>
 800fa18:	46ee      	mov	lr, sp
 800fa1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa1e:	f105 0c18 	add.w	ip, r5, #24
 800fa22:	6824      	ldr	r4, [r4, #0]
 800fa24:	6835      	ldr	r5, [r6, #0]
 800fa26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa3a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa42:	f104 0018 	add.w	r0, r4, #24
 800fa46:	f105 0118 	add.w	r1, r5, #24
 800fa4a:	f002 ff4d 	bl	80128e8 <rmw_init_options_copy>
 800fa4e:	4604      	mov	r4, r0
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d0be      	beq.n	800f9d2 <rcl_init_options_copy+0x26>
 800fa54:	f7fa fe18 	bl	800a688 <rcutils_get_error_string>
 800fa58:	f7fa fe2e 	bl	800a6b8 <rcutils_reset_error>
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f7ff ff7b 	bl	800f958 <rcl_init_options_fini>
 800fa62:	b140      	cbz	r0, 800fa76 <rcl_init_options_copy+0xca>
 800fa64:	4604      	mov	r4, r0
 800fa66:	e7b4      	b.n	800f9d2 <rcl_init_options_copy+0x26>
 800fa68:	240b      	movs	r4, #11
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	b014      	add	sp, #80	@ 0x50
 800fa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa72:	240a      	movs	r4, #10
 800fa74:	e7ad      	b.n	800f9d2 <rcl_init_options_copy+0x26>
 800fa76:	4620      	mov	r0, r4
 800fa78:	b014      	add	sp, #80	@ 0x50
 800fa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	f7ff bd91 	b.w	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800fa82:	bf00      	nop

0800fa84 <rcl_get_localhost_only>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	2300      	movs	r3, #0
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	b1b8      	cbz	r0, 800fabe <rcl_get_localhost_only+0x3a>
 800fa8e:	4604      	mov	r4, r0
 800fa90:	a901      	add	r1, sp, #4
 800fa92:	480c      	ldr	r0, [pc, #48]	@ (800fac4 <rcl_get_localhost_only+0x40>)
 800fa94:	f002 f9ac 	bl	8011df0 <rcutils_get_env>
 800fa98:	b110      	cbz	r0, 800faa0 <rcl_get_localhost_only+0x1c>
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	b002      	add	sp, #8
 800fa9e:	bd10      	pop	{r4, pc}
 800faa0:	9b01      	ldr	r3, [sp, #4]
 800faa2:	b113      	cbz	r3, 800faaa <rcl_get_localhost_only+0x26>
 800faa4:	781a      	ldrb	r2, [r3, #0]
 800faa6:	2a31      	cmp	r2, #49	@ 0x31
 800faa8:	d004      	beq.n	800fab4 <rcl_get_localhost_only+0x30>
 800faaa:	2302      	movs	r3, #2
 800faac:	2000      	movs	r0, #0
 800faae:	7023      	strb	r3, [r4, #0]
 800fab0:	b002      	add	sp, #8
 800fab2:	bd10      	pop	{r4, pc}
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1f7      	bne.n	800faaa <rcl_get_localhost_only+0x26>
 800faba:	2301      	movs	r3, #1
 800fabc:	e7f6      	b.n	800faac <rcl_get_localhost_only+0x28>
 800fabe:	200b      	movs	r0, #11
 800fac0:	b002      	add	sp, #8
 800fac2:	bd10      	pop	{r4, pc}
 800fac4:	08017aac 	.word	0x08017aac

0800fac8 <rcl_get_zero_initialized_node>:
 800fac8:	4a03      	ldr	r2, [pc, #12]	@ (800fad8 <rcl_get_zero_initialized_node+0x10>)
 800faca:	4603      	mov	r3, r0
 800facc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fad0:	e883 0003 	stmia.w	r3, {r0, r1}
 800fad4:	4618      	mov	r0, r3
 800fad6:	4770      	bx	lr
 800fad8:	08017ad4 	.word	0x08017ad4

0800fadc <rcl_node_init>:
 800fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae0:	b0a9      	sub	sp, #164	@ 0xa4
 800fae2:	4604      	mov	r4, r0
 800fae4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fae8:	a823      	add	r0, sp, #140	@ 0x8c
 800faea:	460e      	mov	r6, r1
 800faec:	4615      	mov	r5, r2
 800faee:	461f      	mov	r7, r3
 800faf0:	f005 ff8a 	bl	8015a08 <rcl_guard_condition_get_default_options>
 800faf4:	f1b8 0f00 	cmp.w	r8, #0
 800faf8:	f000 80e6 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fafc:	4640      	mov	r0, r8
 800fafe:	f7fa fdb5 	bl	800a66c <rcutils_allocator_is_valid>
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f000 80e0 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fb08:	2e00      	cmp	r6, #0
 800fb0a:	f000 80dd 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fb0e:	2d00      	cmp	r5, #0
 800fb10:	f000 80da 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fb14:	2c00      	cmp	r4, #0
 800fb16:	f000 80d7 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fb1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fb1e:	f1b9 0f00 	cmp.w	r9, #0
 800fb22:	f040 80fd 	bne.w	800fd20 <rcl_node_init+0x244>
 800fb26:	2f00      	cmp	r7, #0
 800fb28:	f000 80ce 	beq.w	800fcc8 <rcl_node_init+0x1ec>
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	f7ff fd57 	bl	800f5e0 <rcl_context_is_valid>
 800fb32:	4682      	mov	sl, r0
 800fb34:	2800      	cmp	r0, #0
 800fb36:	f000 80cd 	beq.w	800fcd4 <rcl_node_init+0x1f8>
 800fb3a:	464a      	mov	r2, r9
 800fb3c:	a922      	add	r1, sp, #136	@ 0x88
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fb44:	f002 fda2 	bl	801268c <rmw_validate_node_name>
 800fb48:	4681      	mov	r9, r0
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f040 80be 	bne.w	800fccc <rcl_node_init+0x1f0>
 800fb50:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f040 80f0 	bne.w	800fd38 <rcl_node_init+0x25c>
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f7f0 fb4b 	bl	80001f4 <strlen>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	f040 80bb 	bne.w	800fcda <rcl_node_init+0x1fe>
 800fb64:	4d7c      	ldr	r5, [pc, #496]	@ (800fd58 <rcl_node_init+0x27c>)
 800fb66:	a922      	add	r1, sp, #136	@ 0x88
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f002 fd70 	bl	8012650 <rmw_validate_namespace>
 800fb70:	4681      	mov	r9, r0
 800fb72:	2800      	cmp	r0, #0
 800fb74:	f040 80aa 	bne.w	800fccc <rcl_node_init+0x1f0>
 800fb78:	4682      	mov	sl, r0
 800fb7a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f040 80e0 	bne.w	800fd42 <rcl_node_init+0x266>
 800fb82:	f8d8 3000 	ldr.w	r3, [r8]
 800fb86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb8a:	2078      	movs	r0, #120	@ 0x78
 800fb8c:	4798      	blx	r3
 800fb8e:	4681      	mov	r9, r0
 800fb90:	6060      	str	r0, [r4, #4]
 800fb92:	2800      	cmp	r0, #0
 800fb94:	f000 80ca 	beq.w	800fd2c <rcl_node_init+0x250>
 800fb98:	2200      	movs	r2, #0
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800fba0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800fba4:	a808      	add	r0, sp, #32
 800fba6:	f000 f907 	bl	800fdb8 <rcl_node_get_default_options>
 800fbaa:	a908      	add	r1, sp, #32
 800fbac:	4648      	mov	r0, r9
 800fbae:	2268      	movs	r2, #104	@ 0x68
 800fbb0:	f006 fdf7 	bl	80167a2 <memcpy>
 800fbb4:	6861      	ldr	r1, [r4, #4]
 800fbb6:	6027      	str	r7, [r4, #0]
 800fbb8:	4640      	mov	r0, r8
 800fbba:	f000 f90b 	bl	800fdd4 <rcl_node_options_copy>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d158      	bne.n	800fc74 <rcl_node_init+0x198>
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7f0 fb16 	bl	80001f4 <strlen>
 800fbc8:	4428      	add	r0, r5
 800fbca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fbce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fbd2:	2b2f      	cmp	r3, #47	@ 0x2f
 800fbd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fbd8:	9300      	str	r3, [sp, #0]
 800fbda:	bf0c      	ite	eq
 800fbdc:	4b5f      	ldreq	r3, [pc, #380]	@ (800fd5c <rcl_node_init+0x280>)
 800fbde:	4b60      	ldrne	r3, [pc, #384]	@ (800fd60 <rcl_node_init+0x284>)
 800fbe0:	9302      	str	r3, [sp, #8]
 800fbe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fbec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fbf0:	f002 f916 	bl	8011e20 <rcutils_format_string_limit>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800fbfa:	6818      	ldr	r0, [r3, #0]
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	3028      	adds	r0, #40	@ 0x28
 800fc00:	462a      	mov	r2, r5
 800fc02:	6866      	ldr	r6, [r4, #4]
 800fc04:	f003 f984 	bl	8012f10 <rmw_create_node>
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800fc0c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d032      	beq.n	800fc78 <rcl_node_init+0x19c>
 800fc12:	f003 fa11 	bl	8013038 <rmw_node_get_graph_guard_condition>
 800fc16:	4681      	mov	r9, r0
 800fc18:	b360      	cbz	r0, 800fc74 <rcl_node_init+0x198>
 800fc1a:	f8d8 3000 	ldr.w	r3, [r8]
 800fc1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc22:	6866      	ldr	r6, [r4, #4]
 800fc24:	2008      	movs	r0, #8
 800fc26:	4798      	blx	r3
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fc2c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800fc30:	f1bb 0f00 	cmp.w	fp, #0
 800fc34:	d020      	beq.n	800fc78 <rcl_node_init+0x19c>
 800fc36:	a806      	add	r0, sp, #24
 800fc38:	f005 fe56 	bl	80158e8 <rcl_get_zero_initialized_guard_condition>
 800fc3c:	a806      	add	r0, sp, #24
 800fc3e:	c803      	ldmia	r0, {r0, r1}
 800fc40:	6863      	ldr	r3, [r4, #4]
 800fc42:	46c4      	mov	ip, r8
 800fc44:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fc48:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fc4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc50:	ae23      	add	r6, sp, #140	@ 0x8c
 800fc52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc54:	f8dc 3000 	ldr.w	r3, [ip]
 800fc58:	6033      	str	r3, [r6, #0]
 800fc5a:	ab28      	add	r3, sp, #160	@ 0xa0
 800fc5c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fc60:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc64:	4649      	mov	r1, r9
 800fc66:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc68:	463a      	mov	r2, r7
 800fc6a:	4670      	mov	r0, lr
 800fc6c:	f005 fe46 	bl	80158fc <rcl_guard_condition_init_from_rmw>
 800fc70:	4681      	mov	r9, r0
 800fc72:	b328      	cbz	r0, 800fcc0 <rcl_node_init+0x1e4>
 800fc74:	6863      	ldr	r3, [r4, #4]
 800fc76:	b1f3      	cbz	r3, 800fcb6 <rcl_node_init+0x1da>
 800fc78:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fc7a:	b128      	cbz	r0, 800fc88 <rcl_node_init+0x1ac>
 800fc7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc80:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc84:	4798      	blx	r3
 800fc86:	6863      	ldr	r3, [r4, #4]
 800fc88:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fc8a:	b110      	cbz	r0, 800fc92 <rcl_node_init+0x1b6>
 800fc8c:	f003 f958 	bl	8012f40 <rmw_destroy_node>
 800fc90:	6863      	ldr	r3, [r4, #4]
 800fc92:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fc94:	b148      	cbz	r0, 800fcaa <rcl_node_init+0x1ce>
 800fc96:	f005 fe91 	bl	80159bc <rcl_guard_condition_fini>
 800fc9a:	6863      	ldr	r3, [r4, #4]
 800fc9c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fca0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fca6:	4798      	blx	r3
 800fca8:	6863      	ldr	r3, [r4, #4]
 800fcaa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fcb4:	4798      	blx	r3
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e9c4 3300 	strd	r3, r3, [r4]
 800fcbc:	f04f 0901 	mov.w	r9, #1
 800fcc0:	f1ba 0f00 	cmp.w	sl, #0
 800fcc4:	d125      	bne.n	800fd12 <rcl_node_init+0x236>
 800fcc6:	e001      	b.n	800fccc <rcl_node_init+0x1f0>
 800fcc8:	f04f 090b 	mov.w	r9, #11
 800fccc:	4648      	mov	r0, r9
 800fcce:	b029      	add	sp, #164	@ 0xa4
 800fcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800fcd8:	e7f8      	b.n	800fccc <rcl_node_init+0x1f0>
 800fcda:	782b      	ldrb	r3, [r5, #0]
 800fcdc:	2b2f      	cmp	r3, #47	@ 0x2f
 800fcde:	f43f af42 	beq.w	800fb66 <rcl_node_init+0x8a>
 800fce2:	9503      	str	r5, [sp, #12]
 800fce4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	4b1e      	ldr	r3, [pc, #120]	@ (800fd64 <rcl_node_init+0x288>)
 800fcec:	9302      	str	r3, [sp, #8]
 800fcee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fcf2:	9301      	str	r3, [sp, #4]
 800fcf4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fcf8:	f002 f892 	bl	8011e20 <rcutils_format_string_limit>
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	b340      	cbz	r0, 800fd52 <rcl_node_init+0x276>
 800fd00:	2200      	movs	r2, #0
 800fd02:	a922      	add	r1, sp, #136	@ 0x88
 800fd04:	9222      	str	r2, [sp, #136]	@ 0x88
 800fd06:	f002 fca3 	bl	8012650 <rmw_validate_namespace>
 800fd0a:	4681      	mov	r9, r0
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	f43f af34 	beq.w	800fb7a <rcl_node_init+0x9e>
 800fd12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	4798      	blx	r3
 800fd1e:	e7d5      	b.n	800fccc <rcl_node_init+0x1f0>
 800fd20:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800fd24:	4648      	mov	r0, r9
 800fd26:	b029      	add	sp, #164	@ 0xa4
 800fd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2c:	f04f 090a 	mov.w	r9, #10
 800fd30:	f1ba 0f00 	cmp.w	sl, #0
 800fd34:	d1ed      	bne.n	800fd12 <rcl_node_init+0x236>
 800fd36:	e7c9      	b.n	800fccc <rcl_node_init+0x1f0>
 800fd38:	f002 fcfa 	bl	8012730 <rmw_node_name_validation_result_string>
 800fd3c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800fd40:	e7c4      	b.n	800fccc <rcl_node_init+0x1f0>
 800fd42:	f002 fc97 	bl	8012674 <rmw_namespace_validation_result_string>
 800fd46:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800fd4a:	f1ba 0f00 	cmp.w	sl, #0
 800fd4e:	d1e0      	bne.n	800fd12 <rcl_node_init+0x236>
 800fd50:	e7bc      	b.n	800fccc <rcl_node_init+0x1f0>
 800fd52:	f04f 090a 	mov.w	r9, #10
 800fd56:	e7b9      	b.n	800fccc <rcl_node_init+0x1f0>
 800fd58:	08017ac4 	.word	0x08017ac4
 800fd5c:	080177e8 	.word	0x080177e8
 800fd60:	08017acc 	.word	0x08017acc
 800fd64:	08017ac8 	.word	0x08017ac8

0800fd68 <rcl_node_is_valid>:
 800fd68:	b130      	cbz	r0, 800fd78 <rcl_node_is_valid+0x10>
 800fd6a:	6843      	ldr	r3, [r0, #4]
 800fd6c:	b123      	cbz	r3, 800fd78 <rcl_node_is_valid+0x10>
 800fd6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd70:	b113      	cbz	r3, 800fd78 <rcl_node_is_valid+0x10>
 800fd72:	6800      	ldr	r0, [r0, #0]
 800fd74:	f7ff bc34 	b.w	800f5e0 <rcl_context_is_valid>
 800fd78:	2000      	movs	r0, #0
 800fd7a:	4770      	bx	lr

0800fd7c <rcl_node_get_name>:
 800fd7c:	b120      	cbz	r0, 800fd88 <rcl_node_get_name+0xc>
 800fd7e:	6840      	ldr	r0, [r0, #4]
 800fd80:	b110      	cbz	r0, 800fd88 <rcl_node_get_name+0xc>
 800fd82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd84:	b100      	cbz	r0, 800fd88 <rcl_node_get_name+0xc>
 800fd86:	6880      	ldr	r0, [r0, #8]
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop

0800fd8c <rcl_node_get_namespace>:
 800fd8c:	b120      	cbz	r0, 800fd98 <rcl_node_get_namespace+0xc>
 800fd8e:	6840      	ldr	r0, [r0, #4]
 800fd90:	b110      	cbz	r0, 800fd98 <rcl_node_get_namespace+0xc>
 800fd92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd94:	b100      	cbz	r0, 800fd98 <rcl_node_get_namespace+0xc>
 800fd96:	68c0      	ldr	r0, [r0, #12]
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop

0800fd9c <rcl_node_get_options>:
 800fd9c:	b128      	cbz	r0, 800fdaa <rcl_node_get_options+0xe>
 800fd9e:	6840      	ldr	r0, [r0, #4]
 800fda0:	b118      	cbz	r0, 800fdaa <rcl_node_get_options+0xe>
 800fda2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	bf08      	it	eq
 800fda8:	2000      	moveq	r0, #0
 800fdaa:	4770      	bx	lr

0800fdac <rcl_node_get_rmw_handle>:
 800fdac:	b110      	cbz	r0, 800fdb4 <rcl_node_get_rmw_handle+0x8>
 800fdae:	6840      	ldr	r0, [r0, #4]
 800fdb0:	b100      	cbz	r0, 800fdb4 <rcl_node_get_rmw_handle+0x8>
 800fdb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop

0800fdb8 <rcl_node_get_default_options>:
 800fdb8:	b510      	push	{r4, lr}
 800fdba:	2268      	movs	r2, #104	@ 0x68
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	f006 fc26 	bl	8016610 <memset>
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f7fa fc43 	bl	800a650 <rcutils_get_default_allocator>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	7523      	strb	r3, [r4, #20]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	bd10      	pop	{r4, pc}
 800fdd2:	bf00      	nop

0800fdd4 <rcl_node_options_copy>:
 800fdd4:	b1d0      	cbz	r0, 800fe0c <rcl_node_options_copy+0x38>
 800fdd6:	b570      	push	{r4, r5, r6, lr}
 800fdd8:	460c      	mov	r4, r1
 800fdda:	b1a9      	cbz	r1, 800fe08 <rcl_node_options_copy+0x34>
 800fddc:	4288      	cmp	r0, r1
 800fdde:	4684      	mov	ip, r0
 800fde0:	d012      	beq.n	800fe08 <rcl_node_options_copy+0x34>
 800fde2:	4605      	mov	r5, r0
 800fde4:	8a86      	ldrh	r6, [r0, #20]
 800fde6:	468e      	mov	lr, r1
 800fde8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	f8ce 3000 	str.w	r3, [lr]
 800fdf4:	f10c 0118 	add.w	r1, ip, #24
 800fdf8:	2250      	movs	r2, #80	@ 0x50
 800fdfa:	82a6      	strh	r6, [r4, #20]
 800fdfc:	f104 0018 	add.w	r0, r4, #24
 800fe00:	f006 fccf 	bl	80167a2 <memcpy>
 800fe04:	2000      	movs	r0, #0
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	200b      	movs	r0, #11
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	200b      	movs	r0, #11
 800fe0e:	4770      	bx	lr

0800fe10 <rcl_node_resolve_name>:
 800fe10:	b082      	sub	sp, #8
 800fe12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe16:	b091      	sub	sp, #68	@ 0x44
 800fe18:	ac1a      	add	r4, sp, #104	@ 0x68
 800fe1a:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe1e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d03b      	beq.n	800fe9e <rcl_node_resolve_name+0x8e>
 800fe26:	460c      	mov	r4, r1
 800fe28:	4605      	mov	r5, r0
 800fe2a:	f7ff ffb7 	bl	800fd9c <rcl_node_get_options>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d037      	beq.n	800fea2 <rcl_node_resolve_name+0x92>
 800fe32:	4628      	mov	r0, r5
 800fe34:	f7ff ffa2 	bl	800fd7c <rcl_node_get_name>
 800fe38:	4606      	mov	r6, r0
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f7ff ffa6 	bl	800fd8c <rcl_node_get_namespace>
 800fe40:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fe44:	4681      	mov	r9, r0
 800fe46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe4a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fe4c:	46ac      	mov	ip, r5
 800fe4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe52:	f8de 3000 	ldr.w	r3, [lr]
 800fe56:	f8cc 3000 	str.w	r3, [ip]
 800fe5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe5c:	b1fb      	cbz	r3, 800fe9e <rcl_node_resolve_name+0x8e>
 800fe5e:	468a      	mov	sl, r1
 800fe60:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fe64:	f002 f934 	bl	80120d0 <rcutils_get_zero_initialized_string_map>
 800fe68:	ab10      	add	r3, sp, #64	@ 0x40
 800fe6a:	9008      	str	r0, [sp, #32]
 800fe6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fe70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe74:	2100      	movs	r1, #0
 800fe76:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fe7a:	a808      	add	r0, sp, #32
 800fe7c:	f002 f9a0 	bl	80121c0 <rcutils_string_map_init>
 800fe80:	4607      	mov	r7, r0
 800fe82:	b180      	cbz	r0, 800fea6 <rcl_node_resolve_name+0x96>
 800fe84:	f7fa fc00 	bl	800a688 <rcutils_get_error_string>
 800fe88:	f7fa fc16 	bl	800a6b8 <rcutils_reset_error>
 800fe8c:	2f0a      	cmp	r7, #10
 800fe8e:	bf18      	it	ne
 800fe90:	2701      	movne	r7, #1
 800fe92:	4638      	mov	r0, r7
 800fe94:	b011      	add	sp, #68	@ 0x44
 800fe96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9a:	b002      	add	sp, #8
 800fe9c:	4770      	bx	lr
 800fe9e:	270b      	movs	r7, #11
 800fea0:	e7f7      	b.n	800fe92 <rcl_node_resolve_name+0x82>
 800fea2:	2701      	movs	r7, #1
 800fea4:	e7f5      	b.n	800fe92 <rcl_node_resolve_name+0x82>
 800fea6:	9009      	str	r0, [sp, #36]	@ 0x24
 800fea8:	9007      	str	r0, [sp, #28]
 800feaa:	a808      	add	r0, sp, #32
 800feac:	f005 fd16 	bl	80158dc <rcl_get_default_topic_name_substitutions>
 800feb0:	4607      	mov	r7, r0
 800feb2:	b1a8      	cbz	r0, 800fee0 <rcl_node_resolve_name+0xd0>
 800feb4:	280a      	cmp	r0, #10
 800feb6:	9c07      	ldr	r4, [sp, #28]
 800feb8:	d000      	beq.n	800febc <rcl_node_resolve_name+0xac>
 800feba:	2701      	movs	r7, #1
 800febc:	a808      	add	r0, sp, #32
 800febe:	f002 f9bf 	bl	8012240 <rcutils_string_map_fini>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d13d      	bne.n	800ff42 <rcl_node_resolve_name+0x132>
 800fec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fec8:	4659      	mov	r1, fp
 800feca:	47d0      	blx	sl
 800fecc:	4659      	mov	r1, fp
 800fece:	4620      	mov	r0, r4
 800fed0:	47d0      	blx	sl
 800fed2:	f1b8 0f00 	cmp.w	r8, #0
 800fed6:	d0dc      	beq.n	800fe92 <rcl_node_resolve_name+0x82>
 800fed8:	2f67      	cmp	r7, #103	@ 0x67
 800feda:	bf08      	it	eq
 800fedc:	2768      	moveq	r7, #104	@ 0x68
 800fede:	e7d8      	b.n	800fe92 <rcl_node_resolve_name+0x82>
 800fee0:	ab09      	add	r3, sp, #36	@ 0x24
 800fee2:	9305      	str	r3, [sp, #20]
 800fee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fee6:	46ec      	mov	ip, sp
 800fee8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feec:	682b      	ldr	r3, [r5, #0]
 800feee:	f8cc 3000 	str.w	r3, [ip]
 800fef2:	464a      	mov	r2, r9
 800fef4:	4631      	mov	r1, r6
 800fef6:	4620      	mov	r0, r4
 800fef8:	ab08      	add	r3, sp, #32
 800fefa:	f005 fb91 	bl	8015620 <rcl_expand_topic_name>
 800fefe:	4607      	mov	r7, r0
 800ff00:	b9b8      	cbnz	r0, 800ff32 <rcl_node_resolve_name+0x122>
 800ff02:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ff04:	9009      	str	r0, [sp, #36]	@ 0x24
 800ff06:	4602      	mov	r2, r0
 800ff08:	a90a      	add	r1, sp, #40	@ 0x28
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f002 fadc 	bl	80124c8 <rmw_validate_full_topic_name>
 800ff10:	b988      	cbnz	r0, 800ff36 <rcl_node_resolve_name+0x126>
 800ff12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ff14:	b9d5      	cbnz	r5, 800ff4c <rcl_node_resolve_name+0x13c>
 800ff16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff18:	a808      	add	r0, sp, #32
 800ff1a:	601c      	str	r4, [r3, #0]
 800ff1c:	f002 f990 	bl	8012240 <rcutils_string_map_fini>
 800ff20:	4607      	mov	r7, r0
 800ff22:	b1a8      	cbz	r0, 800ff50 <rcl_node_resolve_name+0x140>
 800ff24:	f7fa fbb0 	bl	800a688 <rcutils_get_error_string>
 800ff28:	462c      	mov	r4, r5
 800ff2a:	f7fa fbc5 	bl	800a6b8 <rcutils_reset_error>
 800ff2e:	2701      	movs	r7, #1
 800ff30:	e7c9      	b.n	800fec6 <rcl_node_resolve_name+0xb6>
 800ff32:	9c07      	ldr	r4, [sp, #28]
 800ff34:	e7c2      	b.n	800febc <rcl_node_resolve_name+0xac>
 800ff36:	f7fa fba7 	bl	800a688 <rcutils_get_error_string>
 800ff3a:	2701      	movs	r7, #1
 800ff3c:	f7fa fbbc 	bl	800a6b8 <rcutils_reset_error>
 800ff40:	e7bc      	b.n	800febc <rcl_node_resolve_name+0xac>
 800ff42:	f7fa fba1 	bl	800a688 <rcutils_get_error_string>
 800ff46:	f7fa fbb7 	bl	800a6b8 <rcutils_reset_error>
 800ff4a:	e7bc      	b.n	800fec6 <rcl_node_resolve_name+0xb6>
 800ff4c:	2767      	movs	r7, #103	@ 0x67
 800ff4e:	e7b5      	b.n	800febc <rcl_node_resolve_name+0xac>
 800ff50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff52:	4659      	mov	r1, fp
 800ff54:	47d0      	blx	sl
 800ff56:	4659      	mov	r1, fp
 800ff58:	4638      	mov	r0, r7
 800ff5a:	47d0      	blx	sl
 800ff5c:	e799      	b.n	800fe92 <rcl_node_resolve_name+0x82>
 800ff5e:	bf00      	nop

0800ff60 <rcl_service_get_rmw_handle>:
 800ff60:	b118      	cbz	r0, 800ff6a <rcl_service_get_rmw_handle+0xa>
 800ff62:	6800      	ldr	r0, [r0, #0]
 800ff64:	b108      	cbz	r0, 800ff6a <rcl_service_get_rmw_handle+0xa>
 800ff66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ff6a:	4770      	bx	lr

0800ff6c <rcl_take_request>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	468e      	mov	lr, r1
 800ff70:	460c      	mov	r4, r1
 800ff72:	4616      	mov	r6, r2
 800ff74:	4605      	mov	r5, r0
 800ff76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff7a:	b08c      	sub	sp, #48	@ 0x30
 800ff7c:	f10d 0c18 	add.w	ip, sp, #24
 800ff80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff84:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ff88:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff8c:	b30d      	cbz	r5, 800ffd2 <rcl_take_request+0x66>
 800ff8e:	682b      	ldr	r3, [r5, #0]
 800ff90:	b1fb      	cbz	r3, 800ffd2 <rcl_take_request+0x66>
 800ff92:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ff96:	b1e0      	cbz	r0, 800ffd2 <rcl_take_request+0x66>
 800ff98:	b336      	cbz	r6, 800ffe8 <rcl_take_request+0x7c>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ffa0:	4632      	mov	r2, r6
 800ffa2:	f10d 0307 	add.w	r3, sp, #7
 800ffa6:	a902      	add	r1, sp, #8
 800ffa8:	f003 f89a 	bl	80130e0 <rmw_take_request>
 800ffac:	4605      	mov	r5, r0
 800ffae:	b198      	cbz	r0, 800ffd8 <rcl_take_request+0x6c>
 800ffb0:	280a      	cmp	r0, #10
 800ffb2:	bf18      	it	ne
 800ffb4:	2501      	movne	r5, #1
 800ffb6:	f10d 0e18 	add.w	lr, sp, #24
 800ffba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffbe:	46a4      	mov	ip, r4
 800ffc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ffc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ffcc:	4628      	mov	r0, r5
 800ffce:	b00c      	add	sp, #48	@ 0x30
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}
 800ffd2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800ffd6:	e7ee      	b.n	800ffb6 <rcl_take_request+0x4a>
 800ffd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ffdc:	f240 2359 	movw	r3, #601	@ 0x259
 800ffe0:	2a00      	cmp	r2, #0
 800ffe2:	bf08      	it	eq
 800ffe4:	461d      	moveq	r5, r3
 800ffe6:	e7e6      	b.n	800ffb6 <rcl_take_request+0x4a>
 800ffe8:	250b      	movs	r5, #11
 800ffea:	e7e4      	b.n	800ffb6 <rcl_take_request+0x4a>

0800ffec <rcl_send_response>:
 800ffec:	b170      	cbz	r0, 801000c <rcl_send_response+0x20>
 800ffee:	6800      	ldr	r0, [r0, #0]
 800fff0:	b160      	cbz	r0, 801000c <rcl_send_response+0x20>
 800fff2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fff6:	b148      	cbz	r0, 801000c <rcl_send_response+0x20>
 800fff8:	b159      	cbz	r1, 8010012 <rcl_send_response+0x26>
 800fffa:	b510      	push	{r4, lr}
 800fffc:	b15a      	cbz	r2, 8010016 <rcl_send_response+0x2a>
 800fffe:	f003 f8cd 	bl	801319c <rmw_send_response>
 8010002:	b110      	cbz	r0, 801000a <rcl_send_response+0x1e>
 8010004:	2802      	cmp	r0, #2
 8010006:	bf18      	it	ne
 8010008:	2001      	movne	r0, #1
 801000a:	bd10      	pop	{r4, pc}
 801000c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010010:	4770      	bx	lr
 8010012:	200b      	movs	r0, #11
 8010014:	4770      	bx	lr
 8010016:	200b      	movs	r0, #11
 8010018:	bd10      	pop	{r4, pc}
 801001a:	bf00      	nop

0801001c <rcl_service_is_valid>:
 801001c:	b130      	cbz	r0, 801002c <rcl_service_is_valid+0x10>
 801001e:	6800      	ldr	r0, [r0, #0]
 8010020:	b120      	cbz	r0, 801002c <rcl_service_is_valid+0x10>
 8010022:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010026:	3800      	subs	r0, #0
 8010028:	bf18      	it	ne
 801002a:	2001      	movne	r0, #1
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop

08010030 <rcl_get_zero_initialized_subscription>:
 8010030:	4b01      	ldr	r3, [pc, #4]	@ (8010038 <rcl_get_zero_initialized_subscription+0x8>)
 8010032:	6818      	ldr	r0, [r3, #0]
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	08017adc 	.word	0x08017adc

0801003c <rcl_subscription_init>:
 801003c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010040:	b089      	sub	sp, #36	@ 0x24
 8010042:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010044:	b1d6      	cbz	r6, 801007c <rcl_subscription_init+0x40>
 8010046:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801004a:	4604      	mov	r4, r0
 801004c:	4648      	mov	r0, r9
 801004e:	460d      	mov	r5, r1
 8010050:	4690      	mov	r8, r2
 8010052:	461f      	mov	r7, r3
 8010054:	f7fa fb0a 	bl	800a66c <rcutils_allocator_is_valid>
 8010058:	b180      	cbz	r0, 801007c <rcl_subscription_init+0x40>
 801005a:	b17c      	cbz	r4, 801007c <rcl_subscription_init+0x40>
 801005c:	4628      	mov	r0, r5
 801005e:	f7ff fe83 	bl	800fd68 <rcl_node_is_valid>
 8010062:	2800      	cmp	r0, #0
 8010064:	d054      	beq.n	8010110 <rcl_subscription_init+0xd4>
 8010066:	f1b8 0f00 	cmp.w	r8, #0
 801006a:	d007      	beq.n	801007c <rcl_subscription_init+0x40>
 801006c:	b137      	cbz	r7, 801007c <rcl_subscription_init+0x40>
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	b14b      	cbz	r3, 8010086 <rcl_subscription_init+0x4a>
 8010072:	2764      	movs	r7, #100	@ 0x64
 8010074:	4638      	mov	r0, r7
 8010076:	b009      	add	sp, #36	@ 0x24
 8010078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801007c:	270b      	movs	r7, #11
 801007e:	4638      	mov	r0, r7
 8010080:	b009      	add	sp, #36	@ 0x24
 8010082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010086:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801008a:	aa07      	add	r2, sp, #28
 801008c:	9205      	str	r2, [sp, #20]
 801008e:	9307      	str	r3, [sp, #28]
 8010090:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010094:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010098:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801009c:	4639      	mov	r1, r7
 801009e:	e899 000c 	ldmia.w	r9, {r2, r3}
 80100a2:	4628      	mov	r0, r5
 80100a4:	f7ff feb4 	bl	800fe10 <rcl_node_resolve_name>
 80100a8:	4607      	mov	r7, r0
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d15f      	bne.n	801016e <rcl_subscription_init+0x132>
 80100ae:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80100b2:	21c8      	movs	r1, #200	@ 0xc8
 80100b4:	2001      	movs	r0, #1
 80100b6:	4798      	blx	r3
 80100b8:	6020      	str	r0, [r4, #0]
 80100ba:	2800      	cmp	r0, #0
 80100bc:	d05d      	beq.n	801017a <rcl_subscription_init+0x13e>
 80100be:	4628      	mov	r0, r5
 80100c0:	f7ff fe74 	bl	800fdac <rcl_node_get_rmw_handle>
 80100c4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	9a07      	ldr	r2, [sp, #28]
 80100cc:	6827      	ldr	r7, [r4, #0]
 80100ce:	4641      	mov	r1, r8
 80100d0:	4633      	mov	r3, r6
 80100d2:	f003 f94d 	bl	8013370 <rmw_create_subscription>
 80100d6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80100da:	6827      	ldr	r7, [r4, #0]
 80100dc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80100e0:	b348      	cbz	r0, 8010136 <rcl_subscription_init+0xfa>
 80100e2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80100e6:	f003 fa25 	bl	8013534 <rmw_subscription_get_actual_qos>
 80100ea:	4607      	mov	r7, r0
 80100ec:	b9a8      	cbnz	r0, 801011a <rcl_subscription_init+0xde>
 80100ee:	6820      	ldr	r0, [r4, #0]
 80100f0:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80100f4:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80100f8:	2270      	movs	r2, #112	@ 0x70
 80100fa:	4631      	mov	r1, r6
 80100fc:	f006 fb51 	bl	80167a2 <memcpy>
 8010100:	9807      	ldr	r0, [sp, #28]
 8010102:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010104:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010106:	4798      	blx	r3
 8010108:	4638      	mov	r0, r7
 801010a:	b009      	add	sp, #36	@ 0x24
 801010c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010110:	27c8      	movs	r7, #200	@ 0xc8
 8010112:	4638      	mov	r0, r7
 8010114:	b009      	add	sp, #36	@ 0x24
 8010116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801011a:	6827      	ldr	r7, [r4, #0]
 801011c:	b32f      	cbz	r7, 801016a <rcl_subscription_init+0x12e>
 801011e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010122:	b14b      	cbz	r3, 8010138 <rcl_subscription_init+0xfc>
 8010124:	4628      	mov	r0, r5
 8010126:	f7ff fe41 	bl	800fdac <rcl_node_get_rmw_handle>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8010130:	f003 fa10 	bl	8013554 <rmw_destroy_subscription>
 8010134:	6827      	ldr	r7, [r4, #0]
 8010136:	b197      	cbz	r7, 801015e <rcl_subscription_init+0x122>
 8010138:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801013c:	4628      	mov	r0, r5
 801013e:	f7fa fa95 	bl	800a66c <rcutils_allocator_is_valid>
 8010142:	b158      	cbz	r0, 801015c <rcl_subscription_init+0x120>
 8010144:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010146:	b148      	cbz	r0, 801015c <rcl_subscription_init+0x120>
 8010148:	4629      	mov	r1, r5
 801014a:	f002 f911 	bl	8012370 <rmw_subscription_content_filter_options_fini>
 801014e:	4605      	mov	r5, r0
 8010150:	b9b8      	cbnz	r0, 8010182 <rcl_subscription_init+0x146>
 8010152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010154:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010156:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010158:	4798      	blx	r3
 801015a:	66fd      	str	r5, [r7, #108]	@ 0x6c
 801015c:	6827      	ldr	r7, [r4, #0]
 801015e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010160:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010162:	4638      	mov	r0, r7
 8010164:	4798      	blx	r3
 8010166:	2300      	movs	r3, #0
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	2701      	movs	r7, #1
 801016c:	e7c8      	b.n	8010100 <rcl_subscription_init+0xc4>
 801016e:	2867      	cmp	r0, #103	@ 0x67
 8010170:	d0c6      	beq.n	8010100 <rcl_subscription_init+0xc4>
 8010172:	2869      	cmp	r0, #105	@ 0x69
 8010174:	d003      	beq.n	801017e <rcl_subscription_init+0x142>
 8010176:	280a      	cmp	r0, #10
 8010178:	d1f7      	bne.n	801016a <rcl_subscription_init+0x12e>
 801017a:	270a      	movs	r7, #10
 801017c:	e7c0      	b.n	8010100 <rcl_subscription_init+0xc4>
 801017e:	2767      	movs	r7, #103	@ 0x67
 8010180:	e7be      	b.n	8010100 <rcl_subscription_init+0xc4>
 8010182:	f7ff fa0f 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010186:	6827      	ldr	r7, [r4, #0]
 8010188:	e7e9      	b.n	801015e <rcl_subscription_init+0x122>
 801018a:	bf00      	nop

0801018c <rcl_subscription_get_default_options>:
 801018c:	b570      	push	{r4, r5, r6, lr}
 801018e:	4d14      	ldr	r5, [pc, #80]	@ (80101e0 <rcl_subscription_get_default_options+0x54>)
 8010190:	4914      	ldr	r1, [pc, #80]	@ (80101e4 <rcl_subscription_get_default_options+0x58>)
 8010192:	b08a      	sub	sp, #40	@ 0x28
 8010194:	4604      	mov	r4, r0
 8010196:	2250      	movs	r2, #80	@ 0x50
 8010198:	4628      	mov	r0, r5
 801019a:	f006 fb02 	bl	80167a2 <memcpy>
 801019e:	a804      	add	r0, sp, #16
 80101a0:	f7fa fa56 	bl	800a650 <rcutils_get_default_allocator>
 80101a4:	f10d 0c10 	add.w	ip, sp, #16
 80101a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80101b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101b4:	466e      	mov	r6, sp
 80101b6:	f8dc 3000 	ldr.w	r3, [ip]
 80101ba:	f8ce 3000 	str.w	r3, [lr]
 80101be:	4630      	mov	r0, r6
 80101c0:	f002 f8f0 	bl	80123a4 <rmw_get_default_subscription_options>
 80101c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80101c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80101cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101d0:	2270      	movs	r2, #112	@ 0x70
 80101d2:	4629      	mov	r1, r5
 80101d4:	4620      	mov	r0, r4
 80101d6:	f006 fae4 	bl	80167a2 <memcpy>
 80101da:	4620      	mov	r0, r4
 80101dc:	b00a      	add	sp, #40	@ 0x28
 80101de:	bd70      	pop	{r4, r5, r6, pc}
 80101e0:	2000dd10 	.word	0x2000dd10
 80101e4:	08017ae0 	.word	0x08017ae0

080101e8 <rcl_take>:
 80101e8:	2800      	cmp	r0, #0
 80101ea:	d04a      	beq.n	8010282 <rcl_take+0x9a>
 80101ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f0:	4604      	mov	r4, r0
 80101f2:	6800      	ldr	r0, [r0, #0]
 80101f4:	b0a4      	sub	sp, #144	@ 0x90
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d03b      	beq.n	8010272 <rcl_take+0x8a>
 80101fa:	461f      	mov	r7, r3
 80101fc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d036      	beq.n	8010272 <rcl_take+0x8a>
 8010204:	460e      	mov	r6, r1
 8010206:	2900      	cmp	r1, #0
 8010208:	d039      	beq.n	801027e <rcl_take+0x96>
 801020a:	4615      	mov	r5, r2
 801020c:	2a00      	cmp	r2, #0
 801020e:	d03c      	beq.n	801028a <rcl_take+0xa2>
 8010210:	a802      	add	r0, sp, #8
 8010212:	f002 f951 	bl	80124b8 <rmw_get_zero_initialized_message_info>
 8010216:	f10d 0c08 	add.w	ip, sp, #8
 801021a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801021e:	46ae      	mov	lr, r5
 8010220:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010228:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801022c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010230:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010234:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010238:	f04f 0800 	mov.w	r8, #0
 801023c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010240:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010244:	6822      	ldr	r2, [r4, #0]
 8010246:	462b      	mov	r3, r5
 8010248:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801024c:	9700      	str	r7, [sp, #0]
 801024e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010252:	4631      	mov	r1, r6
 8010254:	f003 f9de 	bl	8013614 <rmw_take_with_info>
 8010258:	4603      	mov	r3, r0
 801025a:	b9c0      	cbnz	r0, 801028e <rcl_take+0xa6>
 801025c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010260:	f240 1291 	movw	r2, #401	@ 0x191
 8010264:	2900      	cmp	r1, #0
 8010266:	bf08      	it	eq
 8010268:	4613      	moveq	r3, r2
 801026a:	4618      	mov	r0, r3
 801026c:	b024      	add	sp, #144	@ 0x90
 801026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010272:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010276:	4618      	mov	r0, r3
 8010278:	b024      	add	sp, #144	@ 0x90
 801027a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801027e:	230b      	movs	r3, #11
 8010280:	e7f3      	b.n	801026a <rcl_take+0x82>
 8010282:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010286:	4618      	mov	r0, r3
 8010288:	4770      	bx	lr
 801028a:	ad14      	add	r5, sp, #80	@ 0x50
 801028c:	e7c0      	b.n	8010210 <rcl_take+0x28>
 801028e:	f7ff f989 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010292:	4603      	mov	r3, r0
 8010294:	e7e9      	b.n	801026a <rcl_take+0x82>
 8010296:	bf00      	nop

08010298 <rcl_subscription_get_rmw_handle>:
 8010298:	b118      	cbz	r0, 80102a2 <rcl_subscription_get_rmw_handle+0xa>
 801029a:	6800      	ldr	r0, [r0, #0]
 801029c:	b108      	cbz	r0, 80102a2 <rcl_subscription_get_rmw_handle+0xa>
 801029e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80102a2:	4770      	bx	lr

080102a4 <rcl_subscription_is_valid>:
 80102a4:	b130      	cbz	r0, 80102b4 <rcl_subscription_is_valid+0x10>
 80102a6:	6800      	ldr	r0, [r0, #0]
 80102a8:	b120      	cbz	r0, 80102b4 <rcl_subscription_is_valid+0x10>
 80102aa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80102ae:	3800      	subs	r0, #0
 80102b0:	bf18      	it	ne
 80102b2:	2001      	movne	r0, #1
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop

080102b8 <rcl_get_system_time>:
 80102b8:	4608      	mov	r0, r1
 80102ba:	f7fa ba19 	b.w	800a6f0 <rcutils_system_time_now>
 80102be:	bf00      	nop

080102c0 <rcl_get_steady_time>:
 80102c0:	4608      	mov	r0, r1
 80102c2:	f7fa ba3d 	b.w	800a740 <rcutils_steady_time_now>
 80102c6:	bf00      	nop

080102c8 <rcl_get_ros_time>:
 80102c8:	7a03      	ldrb	r3, [r0, #8]
 80102ca:	b510      	push	{r4, lr}
 80102cc:	460c      	mov	r4, r1
 80102ce:	b133      	cbz	r3, 80102de <rcl_get_ros_time+0x16>
 80102d0:	2105      	movs	r1, #5
 80102d2:	f001 fce9 	bl	8011ca8 <__atomic_load_8>
 80102d6:	e9c4 0100 	strd	r0, r1, [r4]
 80102da:	2000      	movs	r0, #0
 80102dc:	bd10      	pop	{r4, pc}
 80102de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102e2:	4608      	mov	r0, r1
 80102e4:	f7fa ba04 	b.w	800a6f0 <rcutils_system_time_now>

080102e8 <rcl_clock_init>:
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ea:	4605      	mov	r5, r0
 80102ec:	4610      	mov	r0, r2
 80102ee:	4614      	mov	r4, r2
 80102f0:	460e      	mov	r6, r1
 80102f2:	f7fa f9bb 	bl	800a66c <rcutils_allocator_is_valid>
 80102f6:	b128      	cbz	r0, 8010304 <rcl_clock_init+0x1c>
 80102f8:	2d03      	cmp	r5, #3
 80102fa:	d803      	bhi.n	8010304 <rcl_clock_init+0x1c>
 80102fc:	e8df f005 	tbb	[pc, r5]
 8010300:	06532e1d 	.word	0x06532e1d
 8010304:	f04f 0c0b 	mov.w	ip, #11
 8010308:	4660      	mov	r0, ip
 801030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030c:	2e00      	cmp	r6, #0
 801030e:	d0f9      	beq.n	8010304 <rcl_clock_init+0x1c>
 8010310:	2c00      	cmp	r4, #0
 8010312:	d0f7      	beq.n	8010304 <rcl_clock_init+0x1c>
 8010314:	2300      	movs	r3, #0
 8010316:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801031a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80103d0 <rcl_clock_init+0xe8>
 801031e:	6133      	str	r3, [r6, #16]
 8010320:	f106 0514 	add.w	r5, r6, #20
 8010324:	469c      	mov	ip, r3
 8010326:	2703      	movs	r7, #3
 8010328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801032a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	602b      	str	r3, [r5, #0]
 8010330:	7037      	strb	r7, [r6, #0]
 8010332:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010336:	4660      	mov	r0, ip
 8010338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033a:	2e00      	cmp	r6, #0
 801033c:	d0e2      	beq.n	8010304 <rcl_clock_init+0x1c>
 801033e:	2300      	movs	r3, #0
 8010340:	7033      	strb	r3, [r6, #0]
 8010342:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010346:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801034a:	469c      	mov	ip, r3
 801034c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801034e:	f106 0514 	add.w	r5, r6, #20
 8010352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	602b      	str	r3, [r5, #0]
 8010358:	4660      	mov	r0, ip
 801035a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801035c:	2e00      	cmp	r6, #0
 801035e:	d0d1      	beq.n	8010304 <rcl_clock_init+0x1c>
 8010360:	2c00      	cmp	r4, #0
 8010362:	d0cf      	beq.n	8010304 <rcl_clock_init+0x1c>
 8010364:	2700      	movs	r7, #0
 8010366:	7037      	strb	r7, [r6, #0]
 8010368:	46a4      	mov	ip, r4
 801036a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801036e:	f106 0514 	add.w	r5, r6, #20
 8010372:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010376:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801037a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801037c:	f8dc 3000 	ldr.w	r3, [ip]
 8010380:	602b      	str	r3, [r5, #0]
 8010382:	6921      	ldr	r1, [r4, #16]
 8010384:	6823      	ldr	r3, [r4, #0]
 8010386:	2010      	movs	r0, #16
 8010388:	4798      	blx	r3
 801038a:	6130      	str	r0, [r6, #16]
 801038c:	b1d0      	cbz	r0, 80103c4 <rcl_clock_init+0xdc>
 801038e:	2200      	movs	r2, #0
 8010390:	2300      	movs	r3, #0
 8010392:	e9c0 2300 	strd	r2, r3, [r0]
 8010396:	2301      	movs	r3, #1
 8010398:	7207      	strb	r7, [r0, #8]
 801039a:	4a0c      	ldr	r2, [pc, #48]	@ (80103cc <rcl_clock_init+0xe4>)
 801039c:	7033      	strb	r3, [r6, #0]
 801039e:	46bc      	mov	ip, r7
 80103a0:	60f2      	str	r2, [r6, #12]
 80103a2:	4660      	mov	r0, ip
 80103a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	d0ac      	beq.n	8010304 <rcl_clock_init+0x1c>
 80103aa:	2c00      	cmp	r4, #0
 80103ac:	d0aa      	beq.n	8010304 <rcl_clock_init+0x1c>
 80103ae:	2300      	movs	r3, #0
 80103b0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80103b4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80103d4 <rcl_clock_init+0xec>
 80103b8:	6133      	str	r3, [r6, #16]
 80103ba:	f106 0514 	add.w	r5, r6, #20
 80103be:	469c      	mov	ip, r3
 80103c0:	2702      	movs	r7, #2
 80103c2:	e7b1      	b.n	8010328 <rcl_clock_init+0x40>
 80103c4:	f04f 0c0a 	mov.w	ip, #10
 80103c8:	e79e      	b.n	8010308 <rcl_clock_init+0x20>
 80103ca:	bf00      	nop
 80103cc:	080102c9 	.word	0x080102c9
 80103d0:	080102c1 	.word	0x080102c1
 80103d4:	080102b9 	.word	0x080102b9

080103d8 <rcl_clock_get_now>:
 80103d8:	b140      	cbz	r0, 80103ec <rcl_clock_get_now+0x14>
 80103da:	b139      	cbz	r1, 80103ec <rcl_clock_get_now+0x14>
 80103dc:	7803      	ldrb	r3, [r0, #0]
 80103de:	b11b      	cbz	r3, 80103e8 <rcl_clock_get_now+0x10>
 80103e0:	68c3      	ldr	r3, [r0, #12]
 80103e2:	b10b      	cbz	r3, 80103e8 <rcl_clock_get_now+0x10>
 80103e4:	6900      	ldr	r0, [r0, #16]
 80103e6:	4718      	bx	r3
 80103e8:	2001      	movs	r0, #1
 80103ea:	4770      	bx	lr
 80103ec:	200b      	movs	r0, #11
 80103ee:	4770      	bx	lr

080103f0 <rcl_timer_call>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	b087      	sub	sp, #28
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d06d      	beq.n	80104d6 <rcl_timer_call+0xe6>
 80103fa:	6803      	ldr	r3, [r0, #0]
 80103fc:	4604      	mov	r4, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d063      	beq.n	80104ca <rcl_timer_call+0xda>
 8010402:	f3bf 8f5b 	dmb	ish
 8010406:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801040a:	f3bf 8f5b 	dmb	ish
 801040e:	2b00      	cmp	r3, #0
 8010410:	d150      	bne.n	80104b4 <rcl_timer_call+0xc4>
 8010412:	6803      	ldr	r3, [r0, #0]
 8010414:	a904      	add	r1, sp, #16
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	f7ff ffde 	bl	80103d8 <rcl_clock_get_now>
 801041c:	4605      	mov	r5, r0
 801041e:	2800      	cmp	r0, #0
 8010420:	d14a      	bne.n	80104b8 <rcl_timer_call+0xc8>
 8010422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010426:	2b00      	cmp	r3, #0
 8010428:	db4a      	blt.n	80104c0 <rcl_timer_call+0xd0>
 801042a:	6820      	ldr	r0, [r4, #0]
 801042c:	f04f 0a05 	mov.w	sl, #5
 8010430:	f8cd a000 	str.w	sl, [sp]
 8010434:	3020      	adds	r0, #32
 8010436:	f001 fca3 	bl	8011d80 <__atomic_exchange_8>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	f3bf 8f5b 	dmb	ish
 8010440:	4680      	mov	r8, r0
 8010442:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010446:	f3bf 8f5b 	dmb	ish
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	4689      	mov	r9, r1
 801044e:	3028      	adds	r0, #40	@ 0x28
 8010450:	4651      	mov	r1, sl
 8010452:	f001 fc29 	bl	8011ca8 <__atomic_load_8>
 8010456:	4606      	mov	r6, r0
 8010458:	6820      	ldr	r0, [r4, #0]
 801045a:	460f      	mov	r7, r1
 801045c:	3018      	adds	r0, #24
 801045e:	4651      	mov	r1, sl
 8010460:	f001 fc22 	bl	8011ca8 <__atomic_load_8>
 8010464:	1836      	adds	r6, r6, r0
 8010466:	4602      	mov	r2, r0
 8010468:	4682      	mov	sl, r0
 801046a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801046e:	eb47 0701 	adc.w	r7, r7, r1
 8010472:	4286      	cmp	r6, r0
 8010474:	460b      	mov	r3, r1
 8010476:	eb77 010c 	sbcs.w	r1, r7, ip
 801047a:	da04      	bge.n	8010486 <rcl_timer_call+0x96>
 801047c:	ea53 0102 	orrs.w	r1, r3, r2
 8010480:	d12e      	bne.n	80104e0 <rcl_timer_call+0xf0>
 8010482:	4606      	mov	r6, r0
 8010484:	4667      	mov	r7, ip
 8010486:	6820      	ldr	r0, [r4, #0]
 8010488:	2105      	movs	r1, #5
 801048a:	4632      	mov	r2, r6
 801048c:	463b      	mov	r3, r7
 801048e:	3028      	adds	r0, #40	@ 0x28
 8010490:	9100      	str	r1, [sp, #0]
 8010492:	f001 fc3f 	bl	8011d14 <__atomic_store_8>
 8010496:	f1bb 0f00 	cmp.w	fp, #0
 801049a:	d00d      	beq.n	80104b8 <rcl_timer_call+0xc8>
 801049c:	9a04      	ldr	r2, [sp, #16]
 801049e:	9b05      	ldr	r3, [sp, #20]
 80104a0:	ebb2 0208 	subs.w	r2, r2, r8
 80104a4:	4620      	mov	r0, r4
 80104a6:	eb63 0309 	sbc.w	r3, r3, r9
 80104aa:	47d8      	blx	fp
 80104ac:	4628      	mov	r0, r5
 80104ae:	b007      	add	sp, #28
 80104b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b4:	f240 3521 	movw	r5, #801	@ 0x321
 80104b8:	4628      	mov	r0, r5
 80104ba:	b007      	add	sp, #28
 80104bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c0:	2501      	movs	r5, #1
 80104c2:	4628      	mov	r0, r5
 80104c4:	b007      	add	sp, #28
 80104c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ca:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80104ce:	4628      	mov	r0, r5
 80104d0:	b007      	add	sp, #28
 80104d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d6:	250b      	movs	r5, #11
 80104d8:	4628      	mov	r0, r5
 80104da:	b007      	add	sp, #28
 80104dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e0:	1b80      	subs	r0, r0, r6
 80104e2:	eb6c 0107 	sbc.w	r1, ip, r7
 80104e6:	3801      	subs	r0, #1
 80104e8:	f161 0100 	sbc.w	r1, r1, #0
 80104ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80104f0:	f7f0 fa34 	bl	800095c <__aeabi_ldivmod>
 80104f4:	9b02      	ldr	r3, [sp, #8]
 80104f6:	3001      	adds	r0, #1
 80104f8:	f141 0100 	adc.w	r1, r1, #0
 80104fc:	fb00 f303 	mul.w	r3, r0, r3
 8010500:	fb01 330a 	mla	r3, r1, sl, r3
 8010504:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010508:	1986      	adds	r6, r0, r6
 801050a:	4453      	add	r3, sl
 801050c:	eb43 0707 	adc.w	r7, r3, r7
 8010510:	e7b9      	b.n	8010486 <rcl_timer_call+0x96>
 8010512:	bf00      	nop

08010514 <rcl_timer_is_ready>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	b378      	cbz	r0, 801057a <rcl_timer_is_ready+0x66>
 801051a:	6803      	ldr	r3, [r0, #0]
 801051c:	4604      	mov	r4, r0
 801051e:	b383      	cbz	r3, 8010582 <rcl_timer_is_ready+0x6e>
 8010520:	460d      	mov	r5, r1
 8010522:	b351      	cbz	r1, 801057a <rcl_timer_is_ready+0x66>
 8010524:	f3bf 8f5b 	dmb	ish
 8010528:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801052c:	f3bf 8f5b 	dmb	ish
 8010530:	b953      	cbnz	r3, 8010548 <rcl_timer_is_ready+0x34>
 8010532:	6803      	ldr	r3, [r0, #0]
 8010534:	4669      	mov	r1, sp
 8010536:	6818      	ldr	r0, [r3, #0]
 8010538:	f7ff ff4e 	bl	80103d8 <rcl_clock_get_now>
 801053c:	4606      	mov	r6, r0
 801053e:	b140      	cbz	r0, 8010552 <rcl_timer_is_ready+0x3e>
 8010540:	f240 3321 	movw	r3, #801	@ 0x321
 8010544:	4298      	cmp	r0, r3
 8010546:	d101      	bne.n	801054c <rcl_timer_is_ready+0x38>
 8010548:	2600      	movs	r6, #0
 801054a:	702e      	strb	r6, [r5, #0]
 801054c:	4630      	mov	r0, r6
 801054e:	b002      	add	sp, #8
 8010550:	bd70      	pop	{r4, r5, r6, pc}
 8010552:	6820      	ldr	r0, [r4, #0]
 8010554:	2105      	movs	r1, #5
 8010556:	3028      	adds	r0, #40	@ 0x28
 8010558:	f001 fba6 	bl	8011ca8 <__atomic_load_8>
 801055c:	9b00      	ldr	r3, [sp, #0]
 801055e:	1ac0      	subs	r0, r0, r3
 8010560:	9b01      	ldr	r3, [sp, #4]
 8010562:	eb61 0103 	sbc.w	r1, r1, r3
 8010566:	2801      	cmp	r0, #1
 8010568:	f171 0300 	sbcs.w	r3, r1, #0
 801056c:	bfb4      	ite	lt
 801056e:	2301      	movlt	r3, #1
 8010570:	2300      	movge	r3, #0
 8010572:	4630      	mov	r0, r6
 8010574:	702b      	strb	r3, [r5, #0]
 8010576:	b002      	add	sp, #8
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	260b      	movs	r6, #11
 801057c:	4630      	mov	r0, r6
 801057e:	b002      	add	sp, #8
 8010580:	bd70      	pop	{r4, r5, r6, pc}
 8010582:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010586:	e7e1      	b.n	801054c <rcl_timer_is_ready+0x38>

08010588 <rcl_timer_get_time_until_next_call>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	b330      	cbz	r0, 80105dc <rcl_timer_get_time_until_next_call+0x54>
 801058e:	6803      	ldr	r3, [r0, #0]
 8010590:	4604      	mov	r4, r0
 8010592:	b33b      	cbz	r3, 80105e4 <rcl_timer_get_time_until_next_call+0x5c>
 8010594:	460d      	mov	r5, r1
 8010596:	b309      	cbz	r1, 80105dc <rcl_timer_get_time_until_next_call+0x54>
 8010598:	f3bf 8f5b 	dmb	ish
 801059c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80105a0:	f3bf 8f5b 	dmb	ish
 80105a4:	b9ab      	cbnz	r3, 80105d2 <rcl_timer_get_time_until_next_call+0x4a>
 80105a6:	6803      	ldr	r3, [r0, #0]
 80105a8:	4669      	mov	r1, sp
 80105aa:	6818      	ldr	r0, [r3, #0]
 80105ac:	f7ff ff14 	bl	80103d8 <rcl_clock_get_now>
 80105b0:	4606      	mov	r6, r0
 80105b2:	b958      	cbnz	r0, 80105cc <rcl_timer_get_time_until_next_call+0x44>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	2105      	movs	r1, #5
 80105b8:	3028      	adds	r0, #40	@ 0x28
 80105ba:	f001 fb75 	bl	8011ca8 <__atomic_load_8>
 80105be:	9b00      	ldr	r3, [sp, #0]
 80105c0:	1ac0      	subs	r0, r0, r3
 80105c2:	9b01      	ldr	r3, [sp, #4]
 80105c4:	6028      	str	r0, [r5, #0]
 80105c6:	eb61 0103 	sbc.w	r1, r1, r3
 80105ca:	6069      	str	r1, [r5, #4]
 80105cc:	4630      	mov	r0, r6
 80105ce:	b002      	add	sp, #8
 80105d0:	bd70      	pop	{r4, r5, r6, pc}
 80105d2:	f240 3621 	movw	r6, #801	@ 0x321
 80105d6:	4630      	mov	r0, r6
 80105d8:	b002      	add	sp, #8
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	260b      	movs	r6, #11
 80105de:	4630      	mov	r0, r6
 80105e0:	b002      	add	sp, #8
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80105e8:	e7f0      	b.n	80105cc <rcl_timer_get_time_until_next_call+0x44>
 80105ea:	bf00      	nop

080105ec <rcl_timer_get_guard_condition>:
 80105ec:	b130      	cbz	r0, 80105fc <rcl_timer_get_guard_condition+0x10>
 80105ee:	6800      	ldr	r0, [r0, #0]
 80105f0:	b120      	cbz	r0, 80105fc <rcl_timer_get_guard_condition+0x10>
 80105f2:	68c3      	ldr	r3, [r0, #12]
 80105f4:	b10b      	cbz	r3, 80105fa <rcl_timer_get_guard_condition+0xe>
 80105f6:	3008      	adds	r0, #8
 80105f8:	4770      	bx	lr
 80105fa:	4618      	mov	r0, r3
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop

08010600 <rcl_get_zero_initialized_wait_set>:
 8010600:	b510      	push	{r4, lr}
 8010602:	4c08      	ldr	r4, [pc, #32]	@ (8010624 <rcl_get_zero_initialized_wait_set+0x24>)
 8010604:	4686      	mov	lr, r0
 8010606:	4684      	mov	ip, r0
 8010608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801060a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801061a:	6823      	ldr	r3, [r4, #0]
 801061c:	f8cc 3000 	str.w	r3, [ip]
 8010620:	4670      	mov	r0, lr
 8010622:	bd10      	pop	{r4, pc}
 8010624:	08017b30 	.word	0x08017b30

08010628 <rcl_wait_set_is_valid>:
 8010628:	b118      	cbz	r0, 8010632 <rcl_wait_set_is_valid+0xa>
 801062a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801062c:	3800      	subs	r0, #0
 801062e:	bf18      	it	ne
 8010630:	2001      	movne	r0, #1
 8010632:	4770      	bx	lr

08010634 <rcl_wait_set_fini>:
 8010634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010638:	b082      	sub	sp, #8
 801063a:	2800      	cmp	r0, #0
 801063c:	f000 8095 	beq.w	801076a <rcl_wait_set_fini+0x136>
 8010640:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010642:	4604      	mov	r4, r0
 8010644:	2e00      	cmp	r6, #0
 8010646:	f000 808c 	beq.w	8010762 <rcl_wait_set_fini+0x12e>
 801064a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801064c:	f003 f9d0 	bl	80139f0 <rmw_destroy_wait_set>
 8010650:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010652:	1e06      	subs	r6, r0, #0
 8010654:	bf18      	it	ne
 8010656:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801065a:	2d00      	cmp	r5, #0
 801065c:	f000 8081 	beq.w	8010762 <rcl_wait_set_fini+0x12e>
 8010660:	6820      	ldr	r0, [r4, #0]
 8010662:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010666:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010668:	2700      	movs	r7, #0
 801066a:	6067      	str	r7, [r4, #4]
 801066c:	602f      	str	r7, [r5, #0]
 801066e:	b120      	cbz	r0, 801067a <rcl_wait_set_fini+0x46>
 8010670:	9101      	str	r1, [sp, #4]
 8010672:	47c0      	blx	r8
 8010674:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010676:	9901      	ldr	r1, [sp, #4]
 8010678:	6027      	str	r7, [r4, #0]
 801067a:	68a8      	ldr	r0, [r5, #8]
 801067c:	b120      	cbz	r0, 8010688 <rcl_wait_set_fini+0x54>
 801067e:	47c0      	blx	r8
 8010680:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010682:	2300      	movs	r3, #0
 8010684:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010688:	68a0      	ldr	r0, [r4, #8]
 801068a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801068c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801068e:	f04f 0800 	mov.w	r8, #0
 8010692:	f8c4 800c 	str.w	r8, [r4, #12]
 8010696:	f8c5 800c 	str.w	r8, [r5, #12]
 801069a:	b128      	cbz	r0, 80106a8 <rcl_wait_set_fini+0x74>
 801069c:	47b8      	blx	r7
 801069e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106a0:	f8c4 8008 	str.w	r8, [r4, #8]
 80106a4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80106a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106a8:	6968      	ldr	r0, [r5, #20]
 80106aa:	f04f 0800 	mov.w	r8, #0
 80106ae:	f8c5 8010 	str.w	r8, [r5, #16]
 80106b2:	b128      	cbz	r0, 80106c0 <rcl_wait_set_fini+0x8c>
 80106b4:	47b8      	blx	r7
 80106b6:	f8c5 8014 	str.w	r8, [r5, #20]
 80106ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80106be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106c0:	6920      	ldr	r0, [r4, #16]
 80106c2:	f04f 0800 	mov.w	r8, #0
 80106c6:	f8c4 8014 	str.w	r8, [r4, #20]
 80106ca:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80106ce:	b128      	cbz	r0, 80106dc <rcl_wait_set_fini+0xa8>
 80106d0:	47b8      	blx	r7
 80106d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80106d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80106da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106dc:	69a0      	ldr	r0, [r4, #24]
 80106de:	f04f 0800 	mov.w	r8, #0
 80106e2:	f8c4 801c 	str.w	r8, [r4, #28]
 80106e6:	f8c5 8018 	str.w	r8, [r5, #24]
 80106ea:	b128      	cbz	r0, 80106f8 <rcl_wait_set_fini+0xc4>
 80106ec:	9101      	str	r1, [sp, #4]
 80106ee:	47b8      	blx	r7
 80106f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106f2:	9901      	ldr	r1, [sp, #4]
 80106f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80106f8:	6a28      	ldr	r0, [r5, #32]
 80106fa:	b120      	cbz	r0, 8010706 <rcl_wait_set_fini+0xd2>
 80106fc:	47b8      	blx	r7
 80106fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010700:	2300      	movs	r3, #0
 8010702:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010706:	6a20      	ldr	r0, [r4, #32]
 8010708:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801070c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801070e:	2700      	movs	r7, #0
 8010710:	6267      	str	r7, [r4, #36]	@ 0x24
 8010712:	626f      	str	r7, [r5, #36]	@ 0x24
 8010714:	b120      	cbz	r0, 8010720 <rcl_wait_set_fini+0xec>
 8010716:	9101      	str	r1, [sp, #4]
 8010718:	47c0      	blx	r8
 801071a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801071c:	9901      	ldr	r1, [sp, #4]
 801071e:	6227      	str	r7, [r4, #32]
 8010720:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010722:	b120      	cbz	r0, 801072e <rcl_wait_set_fini+0xfa>
 8010724:	47c0      	blx	r8
 8010726:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010728:	2300      	movs	r3, #0
 801072a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801072e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010730:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010734:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010736:	2700      	movs	r7, #0
 8010738:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801073a:	632f      	str	r7, [r5, #48]	@ 0x30
 801073c:	b120      	cbz	r0, 8010748 <rcl_wait_set_fini+0x114>
 801073e:	9101      	str	r1, [sp, #4]
 8010740:	47c0      	blx	r8
 8010742:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010744:	9901      	ldr	r1, [sp, #4]
 8010746:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010748:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801074a:	b120      	cbz	r0, 8010756 <rcl_wait_set_fini+0x122>
 801074c:	47c0      	blx	r8
 801074e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010750:	2300      	movs	r3, #0
 8010752:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010756:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010758:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801075a:	4628      	mov	r0, r5
 801075c:	4798      	blx	r3
 801075e:	2300      	movs	r3, #0
 8010760:	6323      	str	r3, [r4, #48]	@ 0x30
 8010762:	4630      	mov	r0, r6
 8010764:	b002      	add	sp, #8
 8010766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076a:	260b      	movs	r6, #11
 801076c:	4630      	mov	r0, r6
 801076e:	b002      	add	sp, #8
 8010770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010774 <rcl_wait_set_add_subscription>:
 8010774:	b318      	cbz	r0, 80107be <rcl_wait_set_add_subscription+0x4a>
 8010776:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	4604      	mov	r4, r0
 801077c:	b30b      	cbz	r3, 80107c2 <rcl_wait_set_add_subscription+0x4e>
 801077e:	b319      	cbz	r1, 80107c8 <rcl_wait_set_add_subscription+0x54>
 8010780:	681d      	ldr	r5, [r3, #0]
 8010782:	6840      	ldr	r0, [r0, #4]
 8010784:	4285      	cmp	r5, r0
 8010786:	d217      	bcs.n	80107b8 <rcl_wait_set_add_subscription+0x44>
 8010788:	6820      	ldr	r0, [r4, #0]
 801078a:	1c6e      	adds	r6, r5, #1
 801078c:	601e      	str	r6, [r3, #0]
 801078e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010792:	b102      	cbz	r2, 8010796 <rcl_wait_set_add_subscription+0x22>
 8010794:	6015      	str	r5, [r2, #0]
 8010796:	4608      	mov	r0, r1
 8010798:	f7ff fd7e 	bl	8010298 <rcl_subscription_get_rmw_handle>
 801079c:	b150      	cbz	r0, 80107b4 <rcl_wait_set_add_subscription+0x40>
 801079e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107a0:	6842      	ldr	r2, [r0, #4]
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80107aa:	6853      	ldr	r3, [r2, #4]
 80107ac:	3301      	adds	r3, #1
 80107ae:	2000      	movs	r0, #0
 80107b0:	6053      	str	r3, [r2, #4]
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	2001      	movs	r0, #1
 80107b6:	bd70      	pop	{r4, r5, r6, pc}
 80107b8:	f240 3086 	movw	r0, #902	@ 0x386
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
 80107be:	200b      	movs	r0, #11
 80107c0:	4770      	bx	lr
 80107c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	200b      	movs	r0, #11
 80107ca:	bd70      	pop	{r4, r5, r6, pc}

080107cc <rcl_wait_set_clear>:
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d073      	beq.n	80108b8 <rcl_wait_set_clear+0xec>
 80107d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80107d2:	b510      	push	{r4, lr}
 80107d4:	4604      	mov	r4, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d070      	beq.n	80108bc <rcl_wait_set_clear+0xf0>
 80107da:	6800      	ldr	r0, [r0, #0]
 80107dc:	b138      	cbz	r0, 80107ee <rcl_wait_set_clear+0x22>
 80107de:	6862      	ldr	r2, [r4, #4]
 80107e0:	2100      	movs	r1, #0
 80107e2:	0092      	lsls	r2, r2, #2
 80107e4:	f005 ff14 	bl	8016610 <memset>
 80107e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107ea:	2200      	movs	r2, #0
 80107ec:	601a      	str	r2, [r3, #0]
 80107ee:	68a0      	ldr	r0, [r4, #8]
 80107f0:	b138      	cbz	r0, 8010802 <rcl_wait_set_clear+0x36>
 80107f2:	68e2      	ldr	r2, [r4, #12]
 80107f4:	2100      	movs	r1, #0
 80107f6:	0092      	lsls	r2, r2, #2
 80107f8:	f005 ff0a 	bl	8016610 <memset>
 80107fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107fe:	2200      	movs	r2, #0
 8010800:	60da      	str	r2, [r3, #12]
 8010802:	69a0      	ldr	r0, [r4, #24]
 8010804:	b138      	cbz	r0, 8010816 <rcl_wait_set_clear+0x4a>
 8010806:	69e2      	ldr	r2, [r4, #28]
 8010808:	2100      	movs	r1, #0
 801080a:	0092      	lsls	r2, r2, #2
 801080c:	f005 ff00 	bl	8016610 <memset>
 8010810:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010812:	2200      	movs	r2, #0
 8010814:	619a      	str	r2, [r3, #24]
 8010816:	6a20      	ldr	r0, [r4, #32]
 8010818:	b138      	cbz	r0, 801082a <rcl_wait_set_clear+0x5e>
 801081a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801081c:	2100      	movs	r1, #0
 801081e:	0092      	lsls	r2, r2, #2
 8010820:	f005 fef6 	bl	8016610 <memset>
 8010824:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010826:	2200      	movs	r2, #0
 8010828:	625a      	str	r2, [r3, #36]	@ 0x24
 801082a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801082c:	b138      	cbz	r0, 801083e <rcl_wait_set_clear+0x72>
 801082e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010830:	2100      	movs	r1, #0
 8010832:	0092      	lsls	r2, r2, #2
 8010834:	f005 feec 	bl	8016610 <memset>
 8010838:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801083a:	2200      	movs	r2, #0
 801083c:	631a      	str	r2, [r3, #48]	@ 0x30
 801083e:	6920      	ldr	r0, [r4, #16]
 8010840:	b138      	cbz	r0, 8010852 <rcl_wait_set_clear+0x86>
 8010842:	6962      	ldr	r2, [r4, #20]
 8010844:	2100      	movs	r1, #0
 8010846:	0092      	lsls	r2, r2, #2
 8010848:	f005 fee2 	bl	8016610 <memset>
 801084c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801084e:	2200      	movs	r2, #0
 8010850:	641a      	str	r2, [r3, #64]	@ 0x40
 8010852:	6898      	ldr	r0, [r3, #8]
 8010854:	b138      	cbz	r0, 8010866 <rcl_wait_set_clear+0x9a>
 8010856:	685a      	ldr	r2, [r3, #4]
 8010858:	2100      	movs	r1, #0
 801085a:	0092      	lsls	r2, r2, #2
 801085c:	f005 fed8 	bl	8016610 <memset>
 8010860:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010862:	2200      	movs	r2, #0
 8010864:	605a      	str	r2, [r3, #4]
 8010866:	6958      	ldr	r0, [r3, #20]
 8010868:	b138      	cbz	r0, 801087a <rcl_wait_set_clear+0xae>
 801086a:	691a      	ldr	r2, [r3, #16]
 801086c:	2100      	movs	r1, #0
 801086e:	0092      	lsls	r2, r2, #2
 8010870:	f005 fece 	bl	8016610 <memset>
 8010874:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010876:	2200      	movs	r2, #0
 8010878:	611a      	str	r2, [r3, #16]
 801087a:	6a18      	ldr	r0, [r3, #32]
 801087c:	b138      	cbz	r0, 801088e <rcl_wait_set_clear+0xc2>
 801087e:	69da      	ldr	r2, [r3, #28]
 8010880:	2100      	movs	r1, #0
 8010882:	0092      	lsls	r2, r2, #2
 8010884:	f005 fec4 	bl	8016610 <memset>
 8010888:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801088a:	2200      	movs	r2, #0
 801088c:	61da      	str	r2, [r3, #28]
 801088e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010890:	b138      	cbz	r0, 80108a2 <rcl_wait_set_clear+0xd6>
 8010892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010894:	2100      	movs	r1, #0
 8010896:	0092      	lsls	r2, r2, #2
 8010898:	f005 feba 	bl	8016610 <memset>
 801089c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801089e:	2200      	movs	r2, #0
 80108a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80108a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80108a4:	b138      	cbz	r0, 80108b6 <rcl_wait_set_clear+0xea>
 80108a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80108a8:	2100      	movs	r1, #0
 80108aa:	0092      	lsls	r2, r2, #2
 80108ac:	f005 feb0 	bl	8016610 <memset>
 80108b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80108b2:	2000      	movs	r0, #0
 80108b4:	6358      	str	r0, [r3, #52]	@ 0x34
 80108b6:	bd10      	pop	{r4, pc}
 80108b8:	200b      	movs	r0, #11
 80108ba:	4770      	bx	lr
 80108bc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80108c0:	bd10      	pop	{r4, pc}
 80108c2:	bf00      	nop

080108c4 <rcl_wait_set_resize>:
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f000 8185 	beq.w	8010bd4 <rcl_wait_set_resize+0x310>
 80108ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80108d0:	b083      	sub	sp, #12
 80108d2:	4605      	mov	r5, r0
 80108d4:	2c00      	cmp	r4, #0
 80108d6:	f000 817f 	beq.w	8010bd8 <rcl_wait_set_resize+0x314>
 80108da:	f04f 0900 	mov.w	r9, #0
 80108de:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80108e2:	461f      	mov	r7, r3
 80108e4:	4688      	mov	r8, r1
 80108e6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80108ea:	4616      	mov	r6, r2
 80108ec:	f8c0 9004 	str.w	r9, [r0, #4]
 80108f0:	f8c4 9000 	str.w	r9, [r4]
 80108f4:	2900      	cmp	r1, #0
 80108f6:	f000 80bd 	beq.w	8010a74 <rcl_wait_set_resize+0x1b0>
 80108fa:	008c      	lsls	r4, r1, #2
 80108fc:	6800      	ldr	r0, [r0, #0]
 80108fe:	9301      	str	r3, [sp, #4]
 8010900:	4652      	mov	r2, sl
 8010902:	4621      	mov	r1, r4
 8010904:	4798      	blx	r3
 8010906:	9b01      	ldr	r3, [sp, #4]
 8010908:	6028      	str	r0, [r5, #0]
 801090a:	2800      	cmp	r0, #0
 801090c:	f000 80cb 	beq.w	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010910:	4622      	mov	r2, r4
 8010912:	4649      	mov	r1, r9
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	f005 fe7b 	bl	8016610 <memset>
 801091a:	f8c5 8004 	str.w	r8, [r5, #4]
 801091e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8010922:	9b01      	ldr	r3, [sp, #4]
 8010924:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010928:	f8c8 9004 	str.w	r9, [r8, #4]
 801092c:	4652      	mov	r2, sl
 801092e:	4621      	mov	r1, r4
 8010930:	4798      	blx	r3
 8010932:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010934:	f8c8 0008 	str.w	r0, [r8, #8]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 80ac 	beq.w	8010a98 <rcl_wait_set_resize+0x1d4>
 8010940:	4622      	mov	r2, r4
 8010942:	4649      	mov	r1, r9
 8010944:	4618      	mov	r0, r3
 8010946:	f005 fe63 	bl	8016610 <memset>
 801094a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801094c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010950:	f04f 0800 	mov.w	r8, #0
 8010954:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8010958:	f8c5 800c 	str.w	r8, [r5, #12]
 801095c:	f8c4 800c 	str.w	r8, [r4, #12]
 8010960:	2e00      	cmp	r6, #0
 8010962:	f040 80a4 	bne.w	8010aae <rcl_wait_set_resize+0x1ea>
 8010966:	68a8      	ldr	r0, [r5, #8]
 8010968:	b128      	cbz	r0, 8010976 <rcl_wait_set_resize+0xb2>
 801096a:	4649      	mov	r1, r9
 801096c:	4790      	blx	r2
 801096e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010970:	60ae      	str	r6, [r5, #8]
 8010972:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010976:	f04f 0800 	mov.w	r8, #0
 801097a:	19f6      	adds	r6, r6, r7
 801097c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010980:	f040 80ac 	bne.w	8010adc <rcl_wait_set_resize+0x218>
 8010984:	6960      	ldr	r0, [r4, #20]
 8010986:	b130      	cbz	r0, 8010996 <rcl_wait_set_resize+0xd2>
 8010988:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801098a:	4649      	mov	r1, r9
 801098c:	4798      	blx	r3
 801098e:	6166      	str	r6, [r4, #20]
 8010990:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010992:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010996:	2600      	movs	r6, #0
 8010998:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801099c:	616e      	str	r6, [r5, #20]
 801099e:	6426      	str	r6, [r4, #64]	@ 0x40
 80109a0:	2f00      	cmp	r7, #0
 80109a2:	f040 80ad 	bne.w	8010b00 <rcl_wait_set_resize+0x23c>
 80109a6:	6928      	ldr	r0, [r5, #16]
 80109a8:	b138      	cbz	r0, 80109ba <rcl_wait_set_resize+0xf6>
 80109aa:	4649      	mov	r1, r9
 80109ac:	47d0      	blx	sl
 80109ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109b0:	612f      	str	r7, [r5, #16]
 80109b2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80109b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80109ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109bc:	2600      	movs	r6, #0
 80109be:	61ee      	str	r6, [r5, #28]
 80109c0:	61a6      	str	r6, [r4, #24]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	f040 80af 	bne.w	8010b26 <rcl_wait_set_resize+0x262>
 80109c8:	69a8      	ldr	r0, [r5, #24]
 80109ca:	b120      	cbz	r0, 80109d6 <rcl_wait_set_resize+0x112>
 80109cc:	4649      	mov	r1, r9
 80109ce:	47d0      	blx	sl
 80109d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109d4:	61ab      	str	r3, [r5, #24]
 80109d6:	6a20      	ldr	r0, [r4, #32]
 80109d8:	b128      	cbz	r0, 80109e6 <rcl_wait_set_resize+0x122>
 80109da:	4649      	mov	r1, r9
 80109dc:	47d0      	blx	sl
 80109de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109e0:	2300      	movs	r3, #0
 80109e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80109e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109e8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80109ea:	2600      	movs	r6, #0
 80109ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80109f0:	626e      	str	r6, [r5, #36]	@ 0x24
 80109f2:	6266      	str	r6, [r4, #36]	@ 0x24
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f000 80b6 	beq.w	8010b66 <rcl_wait_set_resize+0x2a2>
 80109fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80109fe:	6a28      	ldr	r0, [r5, #32]
 8010a00:	463a      	mov	r2, r7
 8010a02:	4651      	mov	r1, sl
 8010a04:	47c8      	blx	r9
 8010a06:	6228      	str	r0, [r5, #32]
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d04c      	beq.n	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	4631      	mov	r1, r6
 8010a10:	f005 fdfe 	bl	8016610 <memset>
 8010a14:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a18:	626b      	str	r3, [r5, #36]	@ 0x24
 8010a1a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010a1c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8010a1e:	463a      	mov	r2, r7
 8010a20:	4651      	mov	r1, sl
 8010a22:	47c8      	blx	r9
 8010a24:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a26:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8010a28:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8010a2a:	2c00      	cmp	r4, #0
 8010a2c:	f000 80f0 	beq.w	8010c10 <rcl_wait_set_resize+0x34c>
 8010a30:	4620      	mov	r0, r4
 8010a32:	4652      	mov	r2, sl
 8010a34:	4631      	mov	r1, r6
 8010a36:	f005 fdeb 	bl	8016610 <memset>
 8010a3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a3e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010a40:	2600      	movs	r6, #0
 8010a42:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010a46:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8010a48:	6326      	str	r6, [r4, #48]	@ 0x30
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f040 809d 	bne.w	8010b8a <rcl_wait_set_resize+0x2c6>
 8010a50:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010a52:	b120      	cbz	r0, 8010a5e <rcl_wait_set_resize+0x19a>
 8010a54:	4639      	mov	r1, r7
 8010a56:	47c0      	blx	r8
 8010a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a5c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8010a5e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010a60:	b310      	cbz	r0, 8010aa8 <rcl_wait_set_resize+0x1e4>
 8010a62:	4639      	mov	r1, r7
 8010a64:	47c0      	blx	r8
 8010a66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a68:	2000      	movs	r0, #0
 8010a6a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8010a6e:	b003      	add	sp, #12
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a74:	6800      	ldr	r0, [r0, #0]
 8010a76:	b120      	cbz	r0, 8010a82 <rcl_wait_set_resize+0x1be>
 8010a78:	4651      	mov	r1, sl
 8010a7a:	47d8      	blx	fp
 8010a7c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a7e:	f8c5 8000 	str.w	r8, [r5]
 8010a82:	68a0      	ldr	r0, [r4, #8]
 8010a84:	2800      	cmp	r0, #0
 8010a86:	f43f af61 	beq.w	801094c <rcl_wait_set_resize+0x88>
 8010a8a:	4651      	mov	r1, sl
 8010a8c:	47d8      	blx	fp
 8010a8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a90:	2300      	movs	r3, #0
 8010a92:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a96:	e759      	b.n	801094c <rcl_wait_set_resize+0x88>
 8010a98:	6828      	ldr	r0, [r5, #0]
 8010a9a:	9301      	str	r3, [sp, #4]
 8010a9c:	4651      	mov	r1, sl
 8010a9e:	47d8      	blx	fp
 8010aa0:	9b01      	ldr	r3, [sp, #4]
 8010aa2:	e9c5 3300 	strd	r3, r3, [r5]
 8010aa6:	200a      	movs	r0, #10
 8010aa8:	b003      	add	sp, #12
 8010aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aae:	00b4      	lsls	r4, r6, #2
 8010ab0:	68a8      	ldr	r0, [r5, #8]
 8010ab2:	464a      	mov	r2, r9
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4798      	blx	r3
 8010ab8:	60a8      	str	r0, [r5, #8]
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d0f3      	beq.n	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010abe:	4622      	mov	r2, r4
 8010ac0:	4641      	mov	r1, r8
 8010ac2:	f005 fda5 	bl	8016610 <memset>
 8010ac6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ac8:	60ee      	str	r6, [r5, #12]
 8010aca:	f04f 0800 	mov.w	r8, #0
 8010ace:	19f6      	adds	r6, r6, r7
 8010ad0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010ad4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010ad8:	f43f af54 	beq.w	8010984 <rcl_wait_set_resize+0xc0>
 8010adc:	00b6      	lsls	r6, r6, #2
 8010ade:	464a      	mov	r2, r9
 8010ae0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010ae2:	6960      	ldr	r0, [r4, #20]
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4798      	blx	r3
 8010ae8:	4681      	mov	r9, r0
 8010aea:	6160      	str	r0, [r4, #20]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d076      	beq.n	8010bde <rcl_wait_set_resize+0x31a>
 8010af0:	4632      	mov	r2, r6
 8010af2:	4641      	mov	r1, r8
 8010af4:	f005 fd8c 	bl	8016610 <memset>
 8010af8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010afa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010afe:	e74a      	b.n	8010996 <rcl_wait_set_resize+0xd2>
 8010b00:	00bc      	lsls	r4, r7, #2
 8010b02:	6928      	ldr	r0, [r5, #16]
 8010b04:	464a      	mov	r2, r9
 8010b06:	4621      	mov	r1, r4
 8010b08:	47c0      	blx	r8
 8010b0a:	6128      	str	r0, [r5, #16]
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d0ca      	beq.n	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010b10:	4622      	mov	r2, r4
 8010b12:	4631      	mov	r1, r6
 8010b14:	f005 fd7c 	bl	8016610 <memset>
 8010b18:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b1a:	616f      	str	r7, [r5, #20]
 8010b1c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010b20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b24:	e749      	b.n	80109ba <rcl_wait_set_resize+0xf6>
 8010b26:	009c      	lsls	r4, r3, #2
 8010b28:	69a8      	ldr	r0, [r5, #24]
 8010b2a:	464a      	mov	r2, r9
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	47c0      	blx	r8
 8010b30:	61a8      	str	r0, [r5, #24]
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d0b7      	beq.n	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010b36:	4622      	mov	r2, r4
 8010b38:	4631      	mov	r1, r6
 8010b3a:	f005 fd69 	bl	8016610 <memset>
 8010b3e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8010b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b42:	61eb      	str	r3, [r5, #28]
 8010b44:	6a38      	ldr	r0, [r7, #32]
 8010b46:	61fe      	str	r6, [r7, #28]
 8010b48:	464a      	mov	r2, r9
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	47c0      	blx	r8
 8010b4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010b50:	6238      	str	r0, [r7, #32]
 8010b52:	6a1f      	ldr	r7, [r3, #32]
 8010b54:	2f00      	cmp	r7, #0
 8010b56:	d054      	beq.n	8010c02 <rcl_wait_set_resize+0x33e>
 8010b58:	4622      	mov	r2, r4
 8010b5a:	4631      	mov	r1, r6
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	f005 fd57 	bl	8016610 <memset>
 8010b62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b64:	e73f      	b.n	80109e6 <rcl_wait_set_resize+0x122>
 8010b66:	6a28      	ldr	r0, [r5, #32]
 8010b68:	b120      	cbz	r0, 8010b74 <rcl_wait_set_resize+0x2b0>
 8010b6a:	4639      	mov	r1, r7
 8010b6c:	47c0      	blx	r8
 8010b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b70:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b72:	622b      	str	r3, [r5, #32]
 8010b74:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010b76:	2800      	cmp	r0, #0
 8010b78:	f43f af60 	beq.w	8010a3c <rcl_wait_set_resize+0x178>
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	47c0      	blx	r8
 8010b80:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b82:	2300      	movs	r3, #0
 8010b84:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010b88:	e758      	b.n	8010a3c <rcl_wait_set_resize+0x178>
 8010b8a:	009c      	lsls	r4, r3, #2
 8010b8c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010b8e:	463a      	mov	r2, r7
 8010b90:	4621      	mov	r1, r4
 8010b92:	47c8      	blx	r9
 8010b94:	62a8      	str	r0, [r5, #40]	@ 0x28
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d085      	beq.n	8010aa6 <rcl_wait_set_resize+0x1e2>
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	4631      	mov	r1, r6
 8010b9e:	f005 fd37 	bl	8016610 <memset>
 8010ba2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8010ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ba8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8010baa:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010bae:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8010bb2:	463a      	mov	r2, r7
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	47c8      	blx	r9
 8010bb8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010bba:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8010bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bc0:	b36b      	cbz	r3, 8010c1e <rcl_wait_set_resize+0x35a>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f005 fd22 	bl	8016610 <memset>
 8010bcc:	4630      	mov	r0, r6
 8010bce:	b003      	add	sp, #12
 8010bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd4:	200b      	movs	r0, #11
 8010bd6:	4770      	bx	lr
 8010bd8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010bdc:	e764      	b.n	8010aa8 <rcl_wait_set_resize+0x1e4>
 8010bde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010be0:	68a8      	ldr	r0, [r5, #8]
 8010be2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010be6:	4798      	blx	r3
 8010be8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010bea:	6928      	ldr	r0, [r5, #16]
 8010bec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010bee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010bf0:	f8c5 900c 	str.w	r9, [r5, #12]
 8010bf4:	f8c5 9008 	str.w	r9, [r5, #8]
 8010bf8:	4790      	blx	r2
 8010bfa:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010bfe:	200a      	movs	r0, #10
 8010c00:	e752      	b.n	8010aa8 <rcl_wait_set_resize+0x1e4>
 8010c02:	69a8      	ldr	r0, [r5, #24]
 8010c04:	4649      	mov	r1, r9
 8010c06:	47d0      	blx	sl
 8010c08:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010c0c:	200a      	movs	r0, #10
 8010c0e:	e74b      	b.n	8010aa8 <rcl_wait_set_resize+0x1e4>
 8010c10:	6a28      	ldr	r0, [r5, #32]
 8010c12:	4639      	mov	r1, r7
 8010c14:	47c0      	blx	r8
 8010c16:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010c1a:	200a      	movs	r0, #10
 8010c1c:	e744      	b.n	8010aa8 <rcl_wait_set_resize+0x1e4>
 8010c1e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	4639      	mov	r1, r7
 8010c24:	47c0      	blx	r8
 8010c26:	9b01      	ldr	r3, [sp, #4]
 8010c28:	200a      	movs	r0, #10
 8010c2a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010c2e:	e73b      	b.n	8010aa8 <rcl_wait_set_resize+0x1e4>

08010c30 <rcl_wait_set_init>:
 8010c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	4604      	mov	r4, r0
 8010c38:	a810      	add	r0, sp, #64	@ 0x40
 8010c3a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8010c3e:	460f      	mov	r7, r1
 8010c40:	4690      	mov	r8, r2
 8010c42:	4699      	mov	r9, r3
 8010c44:	f7f9 fd12 	bl	800a66c <rcutils_allocator_is_valid>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d06b      	beq.n	8010d24 <rcl_wait_set_init+0xf4>
 8010c4c:	2c00      	cmp	r4, #0
 8010c4e:	d069      	beq.n	8010d24 <rcl_wait_set_init+0xf4>
 8010c50:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c52:	b125      	cbz	r5, 8010c5e <rcl_wait_set_init+0x2e>
 8010c54:	2564      	movs	r5, #100	@ 0x64
 8010c56:	4628      	mov	r0, r5
 8010c58:	b004      	add	sp, #16
 8010c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c5e:	f1ba 0f00 	cmp.w	sl, #0
 8010c62:	d05f      	beq.n	8010d24 <rcl_wait_set_init+0xf4>
 8010c64:	4650      	mov	r0, sl
 8010c66:	f7fe fcbb 	bl	800f5e0 <rcl_context_is_valid>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d067      	beq.n	8010d3e <rcl_wait_set_init+0x10e>
 8010c6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c70:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010c72:	205c      	movs	r0, #92	@ 0x5c
 8010c74:	4798      	blx	r3
 8010c76:	6320      	str	r0, [r4, #48]	@ 0x30
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d062      	beq.n	8010d42 <rcl_wait_set_init+0x112>
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	225c      	movs	r2, #92	@ 0x5c
 8010c80:	f005 fcc6 	bl	8016610 <memset>
 8010c84:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8010c88:	eb03 0e02 	add.w	lr, r3, r2
 8010c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c8e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010c90:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010c94:	449e      	add	lr, r3
 8010c96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c9a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010c9e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010ca2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010ca6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8010caa:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8010cae:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8010cb2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8010cb6:	f8da a000 	ldr.w	sl, [sl]
 8010cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cbc:	44c6      	add	lr, r8
 8010cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8010cc2:	602b      	str	r3, [r5, #0]
 8010cc4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010cc8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8010ccc:	f002 fe86 	bl	80139dc <rmw_create_wait_set>
 8010cd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cd2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8010cd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010cd6:	b350      	cbz	r0, 8010d2e <rcl_wait_set_init+0xfe>
 8010cd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cda:	9302      	str	r3, [sp, #8]
 8010cdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010cde:	9301      	str	r3, [sp, #4]
 8010ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	4642      	mov	r2, r8
 8010ce6:	464b      	mov	r3, r9
 8010ce8:	4639      	mov	r1, r7
 8010cea:	4620      	mov	r0, r4
 8010cec:	f7ff fdea 	bl	80108c4 <rcl_wait_set_resize>
 8010cf0:	4605      	mov	r5, r0
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d0af      	beq.n	8010c56 <rcl_wait_set_init+0x26>
 8010cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cf8:	bb2b      	cbnz	r3, 8010d46 <rcl_wait_set_init+0x116>
 8010cfa:	2600      	movs	r6, #0
 8010cfc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010d00:	9600      	str	r6, [sp, #0]
 8010d02:	4633      	mov	r3, r6
 8010d04:	4632      	mov	r2, r6
 8010d06:	4631      	mov	r1, r6
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f7ff fddb 	bl	80108c4 <rcl_wait_set_resize>
 8010d0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d0a0      	beq.n	8010c56 <rcl_wait_set_init+0x26>
 8010d14:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010d16:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8010d18:	4798      	blx	r3
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	6326      	str	r6, [r4, #48]	@ 0x30
 8010d1e:	b004      	add	sp, #16
 8010d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d24:	250b      	movs	r5, #11
 8010d26:	4628      	mov	r0, r5
 8010d28:	b004      	add	sp, #16
 8010d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d2e:	2501      	movs	r5, #1
 8010d30:	f002 fe5e 	bl	80139f0 <rmw_destroy_wait_set>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	bf18      	it	ne
 8010d38:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8010d3c:	e7dd      	b.n	8010cfa <rcl_wait_set_init+0xca>
 8010d3e:	2565      	movs	r5, #101	@ 0x65
 8010d40:	e789      	b.n	8010c56 <rcl_wait_set_init+0x26>
 8010d42:	250a      	movs	r5, #10
 8010d44:	e787      	b.n	8010c56 <rcl_wait_set_init+0x26>
 8010d46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010d48:	e7f2      	b.n	8010d30 <rcl_wait_set_init+0x100>
 8010d4a:	bf00      	nop

08010d4c <rcl_wait_set_add_guard_condition>:
 8010d4c:	b318      	cbz	r0, 8010d96 <rcl_wait_set_add_guard_condition+0x4a>
 8010d4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d50:	b570      	push	{r4, r5, r6, lr}
 8010d52:	4604      	mov	r4, r0
 8010d54:	b30b      	cbz	r3, 8010d9a <rcl_wait_set_add_guard_condition+0x4e>
 8010d56:	b319      	cbz	r1, 8010da0 <rcl_wait_set_add_guard_condition+0x54>
 8010d58:	68dd      	ldr	r5, [r3, #12]
 8010d5a:	68c0      	ldr	r0, [r0, #12]
 8010d5c:	4285      	cmp	r5, r0
 8010d5e:	d217      	bcs.n	8010d90 <rcl_wait_set_add_guard_condition+0x44>
 8010d60:	68a0      	ldr	r0, [r4, #8]
 8010d62:	1c6e      	adds	r6, r5, #1
 8010d64:	60de      	str	r6, [r3, #12]
 8010d66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010d6a:	b102      	cbz	r2, 8010d6e <rcl_wait_set_add_guard_condition+0x22>
 8010d6c:	6015      	str	r5, [r2, #0]
 8010d6e:	4608      	mov	r0, r1
 8010d70:	f004 fe66 	bl	8015a40 <rcl_guard_condition_get_rmw_handle>
 8010d74:	b150      	cbz	r0, 8010d8c <rcl_wait_set_add_guard_condition+0x40>
 8010d76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d78:	6842      	ldr	r2, [r0, #4]
 8010d7a:	695b      	ldr	r3, [r3, #20]
 8010d7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010d82:	6913      	ldr	r3, [r2, #16]
 8010d84:	3301      	adds	r3, #1
 8010d86:	2000      	movs	r0, #0
 8010d88:	6113      	str	r3, [r2, #16]
 8010d8a:	bd70      	pop	{r4, r5, r6, pc}
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	f240 3086 	movw	r0, #902	@ 0x386
 8010d94:	bd70      	pop	{r4, r5, r6, pc}
 8010d96:	200b      	movs	r0, #11
 8010d98:	4770      	bx	lr
 8010d9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010d9e:	bd70      	pop	{r4, r5, r6, pc}
 8010da0:	200b      	movs	r0, #11
 8010da2:	bd70      	pop	{r4, r5, r6, pc}

08010da4 <rcl_wait_set_add_timer>:
 8010da4:	b328      	cbz	r0, 8010df2 <rcl_wait_set_add_timer+0x4e>
 8010da6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010da8:	b570      	push	{r4, r5, r6, lr}
 8010daa:	4604      	mov	r4, r0
 8010dac:	b31b      	cbz	r3, 8010df6 <rcl_wait_set_add_timer+0x52>
 8010dae:	b329      	cbz	r1, 8010dfc <rcl_wait_set_add_timer+0x58>
 8010db0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010db2:	6965      	ldr	r5, [r4, #20]
 8010db4:	42a8      	cmp	r0, r5
 8010db6:	d219      	bcs.n	8010dec <rcl_wait_set_add_timer+0x48>
 8010db8:	6925      	ldr	r5, [r4, #16]
 8010dba:	1c46      	adds	r6, r0, #1
 8010dbc:	641e      	str	r6, [r3, #64]	@ 0x40
 8010dbe:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8010dc2:	b102      	cbz	r2, 8010dc6 <rcl_wait_set_add_timer+0x22>
 8010dc4:	6010      	str	r0, [r2, #0]
 8010dc6:	4608      	mov	r0, r1
 8010dc8:	f7ff fc10 	bl	80105ec <rcl_timer_get_guard_condition>
 8010dcc:	b168      	cbz	r0, 8010dea <rcl_wait_set_add_timer+0x46>
 8010dce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010dd0:	68e3      	ldr	r3, [r4, #12]
 8010dd2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	441d      	add	r5, r3
 8010dd8:	f004 fe32 	bl	8015a40 <rcl_guard_condition_get_rmw_handle>
 8010ddc:	b180      	cbz	r0, 8010e00 <rcl_wait_set_add_timer+0x5c>
 8010dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010de0:	6842      	ldr	r2, [r0, #4]
 8010de2:	695b      	ldr	r3, [r3, #20]
 8010de4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010de8:	2000      	movs	r0, #0
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	f240 3086 	movw	r0, #902	@ 0x386
 8010df0:	bd70      	pop	{r4, r5, r6, pc}
 8010df2:	200b      	movs	r0, #11
 8010df4:	4770      	bx	lr
 8010df6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	200b      	movs	r0, #11
 8010dfe:	bd70      	pop	{r4, r5, r6, pc}
 8010e00:	2001      	movs	r0, #1
 8010e02:	bd70      	pop	{r4, r5, r6, pc}

08010e04 <rcl_wait_set_add_client>:
 8010e04:	b318      	cbz	r0, 8010e4e <rcl_wait_set_add_client+0x4a>
 8010e06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b30b      	cbz	r3, 8010e52 <rcl_wait_set_add_client+0x4e>
 8010e0e:	b319      	cbz	r1, 8010e58 <rcl_wait_set_add_client+0x54>
 8010e10:	699d      	ldr	r5, [r3, #24]
 8010e12:	69c0      	ldr	r0, [r0, #28]
 8010e14:	4285      	cmp	r5, r0
 8010e16:	d217      	bcs.n	8010e48 <rcl_wait_set_add_client+0x44>
 8010e18:	69a0      	ldr	r0, [r4, #24]
 8010e1a:	1c6e      	adds	r6, r5, #1
 8010e1c:	619e      	str	r6, [r3, #24]
 8010e1e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010e22:	b102      	cbz	r2, 8010e26 <rcl_wait_set_add_client+0x22>
 8010e24:	6015      	str	r5, [r2, #0]
 8010e26:	4608      	mov	r0, r1
 8010e28:	f7fe fb2e 	bl	800f488 <rcl_client_get_rmw_handle>
 8010e2c:	b150      	cbz	r0, 8010e44 <rcl_wait_set_add_client+0x40>
 8010e2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e30:	6842      	ldr	r2, [r0, #4]
 8010e32:	6a1b      	ldr	r3, [r3, #32]
 8010e34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e38:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010e3a:	69d3      	ldr	r3, [r2, #28]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	2000      	movs	r0, #0
 8010e40:	61d3      	str	r3, [r2, #28]
 8010e42:	bd70      	pop	{r4, r5, r6, pc}
 8010e44:	2001      	movs	r0, #1
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	f240 3086 	movw	r0, #902	@ 0x386
 8010e4c:	bd70      	pop	{r4, r5, r6, pc}
 8010e4e:	200b      	movs	r0, #11
 8010e50:	4770      	bx	lr
 8010e52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e56:	bd70      	pop	{r4, r5, r6, pc}
 8010e58:	200b      	movs	r0, #11
 8010e5a:	bd70      	pop	{r4, r5, r6, pc}

08010e5c <rcl_wait_set_add_service>:
 8010e5c:	b318      	cbz	r0, 8010ea6 <rcl_wait_set_add_service+0x4a>
 8010e5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	4604      	mov	r4, r0
 8010e64:	b30b      	cbz	r3, 8010eaa <rcl_wait_set_add_service+0x4e>
 8010e66:	b319      	cbz	r1, 8010eb0 <rcl_wait_set_add_service+0x54>
 8010e68:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010e6a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010e6c:	4285      	cmp	r5, r0
 8010e6e:	d217      	bcs.n	8010ea0 <rcl_wait_set_add_service+0x44>
 8010e70:	6a20      	ldr	r0, [r4, #32]
 8010e72:	1c6e      	adds	r6, r5, #1
 8010e74:	625e      	str	r6, [r3, #36]	@ 0x24
 8010e76:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010e7a:	b102      	cbz	r2, 8010e7e <rcl_wait_set_add_service+0x22>
 8010e7c:	6015      	str	r5, [r2, #0]
 8010e7e:	4608      	mov	r0, r1
 8010e80:	f7ff f86e 	bl	800ff60 <rcl_service_get_rmw_handle>
 8010e84:	b150      	cbz	r0, 8010e9c <rcl_wait_set_add_service+0x40>
 8010e86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e88:	6842      	ldr	r2, [r0, #4]
 8010e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e8c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010e92:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010e94:	3301      	adds	r3, #1
 8010e96:	2000      	movs	r0, #0
 8010e98:	6293      	str	r3, [r2, #40]	@ 0x28
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}
 8010e9c:	2001      	movs	r0, #1
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ea0:	f240 3086 	movw	r0, #902	@ 0x386
 8010ea4:	bd70      	pop	{r4, r5, r6, pc}
 8010ea6:	200b      	movs	r0, #11
 8010ea8:	4770      	bx	lr
 8010eaa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010eae:	bd70      	pop	{r4, r5, r6, pc}
 8010eb0:	200b      	movs	r0, #11
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	0000      	movs	r0, r0
	...

08010eb8 <rcl_wait>:
 8010eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebc:	ed2d 8b02 	vpush	{d8}
 8010ec0:	b08d      	sub	sp, #52	@ 0x34
 8010ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	f000 8143 	beq.w	8011152 <rcl_wait+0x29a>
 8010ecc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010ece:	4605      	mov	r5, r0
 8010ed0:	2e00      	cmp	r6, #0
 8010ed2:	f000 8112 	beq.w	80110fa <rcl_wait+0x242>
 8010ed6:	6843      	ldr	r3, [r0, #4]
 8010ed8:	b983      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010eda:	68eb      	ldr	r3, [r5, #12]
 8010edc:	b973      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010ede:	696b      	ldr	r3, [r5, #20]
 8010ee0:	b963      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010ee2:	69eb      	ldr	r3, [r5, #28]
 8010ee4:	b953      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010ee6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010ee8:	b943      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010eea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010eec:	b933      	cbnz	r3, 8010efc <rcl_wait+0x44>
 8010eee:	f240 3085 	movw	r0, #901	@ 0x385
 8010ef2:	b00d      	add	sp, #52	@ 0x34
 8010ef4:	ecbd 8b02 	vpop	{d8}
 8010ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efc:	9b04      	ldr	r3, [sp, #16]
 8010efe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	9b05      	ldr	r3, [sp, #20]
 8010f04:	f173 0300 	sbcs.w	r3, r3, #0
 8010f08:	f2c0 80f0 	blt.w	80110ec <rcl_wait+0x234>
 8010f0c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010f10:	4643      	mov	r3, r8
 8010f12:	2a00      	cmp	r2, #0
 8010f14:	f000 8133 	beq.w	801117e <rcl_wait+0x2c6>
 8010f18:	2400      	movs	r4, #0
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011190 <rcl_wait+0x2d8>
 8010f20:	46a2      	mov	sl, r4
 8010f22:	46a3      	mov	fp, r4
 8010f24:	f240 3921 	movw	r9, #801	@ 0x321
 8010f28:	4632      	mov	r2, r6
 8010f2a:	e014      	b.n	8010f56 <rcl_wait+0x9e>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d1e0      	bne.n	8010ef2 <rcl_wait+0x3a>
 8010f30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f34:	4542      	cmp	r2, r8
 8010f36:	eb73 0107 	sbcs.w	r1, r3, r7
 8010f3a:	da03      	bge.n	8010f44 <rcl_wait+0x8c>
 8010f3c:	4690      	mov	r8, r2
 8010f3e:	461f      	mov	r7, r3
 8010f40:	f04f 0b01 	mov.w	fp, #1
 8010f44:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010f46:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010f48:	3401      	adds	r4, #1
 8010f4a:	f14a 0a00 	adc.w	sl, sl, #0
 8010f4e:	429c      	cmp	r4, r3
 8010f50:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f54:	d228      	bcs.n	8010fa8 <rcl_wait+0xf0>
 8010f56:	6928      	ldr	r0, [r5, #16]
 8010f58:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f5c:	a908      	add	r1, sp, #32
 8010f5e:	00a6      	lsls	r6, r4, #2
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d0f1      	beq.n	8010f48 <rcl_wait+0x90>
 8010f64:	68eb      	ldr	r3, [r5, #12]
 8010f66:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f6a:	4423      	add	r3, r4
 8010f6c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f70:	f1be 0f00 	cmp.w	lr, #0
 8010f74:	d006      	beq.n	8010f84 <rcl_wait+0xcc>
 8010f76:	6913      	ldr	r3, [r2, #16]
 8010f78:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	6113      	str	r3, [r2, #16]
 8010f80:	692b      	ldr	r3, [r5, #16]
 8010f82:	5998      	ldr	r0, [r3, r6]
 8010f84:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f88:	f7ff fafe 	bl	8010588 <rcl_timer_get_time_until_next_call>
 8010f8c:	4548      	cmp	r0, r9
 8010f8e:	d1cd      	bne.n	8010f2c <rcl_wait+0x74>
 8010f90:	692b      	ldr	r3, [r5, #16]
 8010f92:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010f94:	2100      	movs	r1, #0
 8010f96:	5199      	str	r1, [r3, r6]
 8010f98:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010f9a:	3401      	adds	r4, #1
 8010f9c:	f14a 0a00 	adc.w	sl, sl, #0
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	f17a 0100 	sbcs.w	r1, sl, #0
 8010fa6:	d3d6      	bcc.n	8010f56 <rcl_wait+0x9e>
 8010fa8:	4616      	mov	r6, r2
 8010faa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	46d9      	mov	r9, fp
 8010fb2:	f040 80a9 	bne.w	8011108 <rcl_wait+0x250>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	2200      	movs	r2, #0
 8010fba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8010fc2:	ab08      	add	r3, sp, #32
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8010fc8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8010fcc:	e9cd 3200 	strd	r3, r2, [sp]
 8010fd0:	f106 0110 	add.w	r1, r6, #16
 8010fd4:	f106 031c 	add.w	r3, r6, #28
 8010fd8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8010fdc:	1d30      	adds	r0, r6, #4
 8010fde:	f002 fb85 	bl	80136ec <rmw_wait>
 8010fe2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010fe6:	4680      	mov	r8, r0
 8010fe8:	b1ca      	cbz	r2, 801101e <rcl_wait+0x166>
 8010fea:	2400      	movs	r4, #0
 8010fec:	4627      	mov	r7, r4
 8010fee:	692a      	ldr	r2, [r5, #16]
 8010ff0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8010ff4:	f10d 011f 	add.w	r1, sp, #31
 8010ff8:	00a6      	lsls	r6, r4, #2
 8010ffa:	b160      	cbz	r0, 8011016 <rcl_wait+0x15e>
 8010ffc:	f88d 701f 	strb.w	r7, [sp, #31]
 8011000:	f7ff fa88 	bl	8010514 <rcl_timer_is_ready>
 8011004:	2800      	cmp	r0, #0
 8011006:	f47f af74 	bne.w	8010ef2 <rcl_wait+0x3a>
 801100a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801100e:	b90b      	cbnz	r3, 8011014 <rcl_wait+0x15c>
 8011010:	692a      	ldr	r2, [r5, #16]
 8011012:	5193      	str	r3, [r2, r6]
 8011014:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011018:	3401      	adds	r4, #1
 801101a:	42a2      	cmp	r2, r4
 801101c:	d8e7      	bhi.n	8010fee <rcl_wait+0x136>
 801101e:	f038 0002 	bics.w	r0, r8, #2
 8011022:	f040 8090 	bne.w	8011146 <rcl_wait+0x28e>
 8011026:	686e      	ldr	r6, [r5, #4]
 8011028:	4602      	mov	r2, r0
 801102a:	b91e      	cbnz	r6, 8011034 <rcl_wait+0x17c>
 801102c:	e00d      	b.n	801104a <rcl_wait+0x192>
 801102e:	3201      	adds	r2, #1
 8011030:	42b2      	cmp	r2, r6
 8011032:	d00a      	beq.n	801104a <rcl_wait+0x192>
 8011034:	6899      	ldr	r1, [r3, #8]
 8011036:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801103a:	2900      	cmp	r1, #0
 801103c:	d1f7      	bne.n	801102e <rcl_wait+0x176>
 801103e:	682c      	ldr	r4, [r5, #0]
 8011040:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011044:	3201      	adds	r2, #1
 8011046:	42b2      	cmp	r2, r6
 8011048:	d1f4      	bne.n	8011034 <rcl_wait+0x17c>
 801104a:	68ee      	ldr	r6, [r5, #12]
 801104c:	2200      	movs	r2, #0
 801104e:	b91e      	cbnz	r6, 8011058 <rcl_wait+0x1a0>
 8011050:	e00d      	b.n	801106e <rcl_wait+0x1b6>
 8011052:	3201      	adds	r2, #1
 8011054:	42b2      	cmp	r2, r6
 8011056:	d00a      	beq.n	801106e <rcl_wait+0x1b6>
 8011058:	6959      	ldr	r1, [r3, #20]
 801105a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801105e:	2900      	cmp	r1, #0
 8011060:	d1f7      	bne.n	8011052 <rcl_wait+0x19a>
 8011062:	68ac      	ldr	r4, [r5, #8]
 8011064:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011068:	3201      	adds	r2, #1
 801106a:	42b2      	cmp	r2, r6
 801106c:	d1f4      	bne.n	8011058 <rcl_wait+0x1a0>
 801106e:	69ee      	ldr	r6, [r5, #28]
 8011070:	2200      	movs	r2, #0
 8011072:	b91e      	cbnz	r6, 801107c <rcl_wait+0x1c4>
 8011074:	e00d      	b.n	8011092 <rcl_wait+0x1da>
 8011076:	3201      	adds	r2, #1
 8011078:	42b2      	cmp	r2, r6
 801107a:	d00a      	beq.n	8011092 <rcl_wait+0x1da>
 801107c:	6a19      	ldr	r1, [r3, #32]
 801107e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011082:	2900      	cmp	r1, #0
 8011084:	d1f7      	bne.n	8011076 <rcl_wait+0x1be>
 8011086:	69ac      	ldr	r4, [r5, #24]
 8011088:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801108c:	3201      	adds	r2, #1
 801108e:	42b2      	cmp	r2, r6
 8011090:	d1f4      	bne.n	801107c <rcl_wait+0x1c4>
 8011092:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011094:	2200      	movs	r2, #0
 8011096:	b91e      	cbnz	r6, 80110a0 <rcl_wait+0x1e8>
 8011098:	e00d      	b.n	80110b6 <rcl_wait+0x1fe>
 801109a:	3201      	adds	r2, #1
 801109c:	4296      	cmp	r6, r2
 801109e:	d00a      	beq.n	80110b6 <rcl_wait+0x1fe>
 80110a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80110a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110a6:	2900      	cmp	r1, #0
 80110a8:	d1f7      	bne.n	801109a <rcl_wait+0x1e2>
 80110aa:	6a2c      	ldr	r4, [r5, #32]
 80110ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110b0:	3201      	adds	r2, #1
 80110b2:	4296      	cmp	r6, r2
 80110b4:	d1f4      	bne.n	80110a0 <rcl_wait+0x1e8>
 80110b6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80110b8:	2200      	movs	r2, #0
 80110ba:	b91e      	cbnz	r6, 80110c4 <rcl_wait+0x20c>
 80110bc:	e00d      	b.n	80110da <rcl_wait+0x222>
 80110be:	3201      	adds	r2, #1
 80110c0:	42b2      	cmp	r2, r6
 80110c2:	d00a      	beq.n	80110da <rcl_wait+0x222>
 80110c4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80110c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110ca:	2900      	cmp	r1, #0
 80110cc:	d1f7      	bne.n	80110be <rcl_wait+0x206>
 80110ce:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80110d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110d4:	3201      	adds	r2, #1
 80110d6:	42b2      	cmp	r2, r6
 80110d8:	d1f4      	bne.n	80110c4 <rcl_wait+0x20c>
 80110da:	f1b8 0f02 	cmp.w	r8, #2
 80110de:	f47f af08 	bne.w	8010ef2 <rcl_wait+0x3a>
 80110e2:	464b      	mov	r3, r9
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bf08      	it	eq
 80110e8:	2002      	moveq	r0, #2
 80110ea:	e702      	b.n	8010ef2 <rcl_wait+0x3a>
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d03a      	beq.n	8011166 <rcl_wait+0x2ae>
 80110f0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80110f4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80110f8:	e70e      	b.n	8010f18 <rcl_wait+0x60>
 80110fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80110fe:	b00d      	add	sp, #52	@ 0x34
 8011100:	ecbd 8b02 	vpop	{d8}
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	9b04      	ldr	r3, [sp, #16]
 801110a:	2b01      	cmp	r3, #1
 801110c:	9b05      	ldr	r3, [sp, #20]
 801110e:	f173 0300 	sbcs.w	r3, r3, #0
 8011112:	db24      	blt.n	801115e <rcl_wait+0x2a6>
 8011114:	2f00      	cmp	r7, #0
 8011116:	bfbc      	itt	lt
 8011118:	f04f 0800 	movlt.w	r8, #0
 801111c:	4647      	movlt	r7, r8
 801111e:	a31e      	add	r3, pc, #120	@ (adr r3, 8011198 <rcl_wait+0x2e0>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	4640      	mov	r0, r8
 8011126:	4639      	mov	r1, r7
 8011128:	f7ef fc18 	bl	800095c <__aeabi_ldivmod>
 801112c:	a31a      	add	r3, pc, #104	@ (adr r3, 8011198 <rcl_wait+0x2e0>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011136:	4640      	mov	r0, r8
 8011138:	4639      	mov	r1, r7
 801113a:	f7ef fc0f 	bl	800095c <__aeabi_ldivmod>
 801113e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011142:	ab08      	add	r3, sp, #32
 8011144:	e73e      	b.n	8010fc4 <rcl_wait+0x10c>
 8011146:	2001      	movs	r0, #1
 8011148:	b00d      	add	sp, #52	@ 0x34
 801114a:	ecbd 8b02 	vpop	{d8}
 801114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011152:	200b      	movs	r0, #11
 8011154:	b00d      	add	sp, #52	@ 0x34
 8011156:	ecbd 8b02 	vpop	{d8}
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	465b      	mov	r3, fp
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1d7      	bne.n	8011114 <rcl_wait+0x25c>
 8011164:	e72e      	b.n	8010fc4 <rcl_wait+0x10c>
 8011166:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801116a:	430b      	orrs	r3, r1
 801116c:	bf08      	it	eq
 801116e:	4691      	moveq	r9, r2
 8011170:	f43f af21 	beq.w	8010fb6 <rcl_wait+0xfe>
 8011174:	9b04      	ldr	r3, [sp, #16]
 8011176:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801117a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801117e:	2b01      	cmp	r3, #1
 8011180:	9b05      	ldr	r3, [sp, #20]
 8011182:	f173 0300 	sbcs.w	r3, r3, #0
 8011186:	f04f 0300 	mov.w	r3, #0
 801118a:	4699      	mov	r9, r3
 801118c:	dac2      	bge.n	8011114 <rcl_wait+0x25c>
 801118e:	e719      	b.n	8010fc4 <rcl_wait+0x10c>
 8011190:	ffffffff 	.word	0xffffffff
 8011194:	7fffffff 	.word	0x7fffffff
 8011198:	3b9aca00 	.word	0x3b9aca00
 801119c:	00000000 	.word	0x00000000

080111a0 <rcl_action_take_goal_response>:
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d039      	beq.n	8011218 <rcl_action_take_goal_response+0x78>
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	4604      	mov	r4, r0
 80111a8:	6800      	ldr	r0, [r0, #0]
 80111aa:	b380      	cbz	r0, 801120e <rcl_action_take_goal_response+0x6e>
 80111ac:	460d      	mov	r5, r1
 80111ae:	4616      	mov	r6, r2
 80111b0:	f7fe f9ee 	bl	800f590 <rcl_client_is_valid>
 80111b4:	b330      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111b6:	6820      	ldr	r0, [r4, #0]
 80111b8:	3004      	adds	r0, #4
 80111ba:	f7fe f9e9 	bl	800f590 <rcl_client_is_valid>
 80111be:	b308      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111c0:	6820      	ldr	r0, [r4, #0]
 80111c2:	3008      	adds	r0, #8
 80111c4:	f7fe f9e4 	bl	800f590 <rcl_client_is_valid>
 80111c8:	b1e0      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111ca:	6820      	ldr	r0, [r4, #0]
 80111cc:	300c      	adds	r0, #12
 80111ce:	f7ff f869 	bl	80102a4 <rcl_subscription_is_valid>
 80111d2:	b1b8      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111d4:	6820      	ldr	r0, [r4, #0]
 80111d6:	3010      	adds	r0, #16
 80111d8:	f7ff f864 	bl	80102a4 <rcl_subscription_is_valid>
 80111dc:	b190      	cbz	r0, 8011204 <rcl_action_take_goal_response+0x64>
 80111de:	b1cd      	cbz	r5, 8011214 <rcl_action_take_goal_response+0x74>
 80111e0:	b1c6      	cbz	r6, 8011214 <rcl_action_take_goal_response+0x74>
 80111e2:	6820      	ldr	r0, [r4, #0]
 80111e4:	4632      	mov	r2, r6
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7fe f98a 	bl	800f500 <rcl_take_response>
 80111ec:	b148      	cbz	r0, 8011202 <rcl_action_take_goal_response+0x62>
 80111ee:	280a      	cmp	r0, #10
 80111f0:	d007      	beq.n	8011202 <rcl_action_take_goal_response+0x62>
 80111f2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80111f6:	f640 0337 	movw	r3, #2103	@ 0x837
 80111fa:	4290      	cmp	r0, r2
 80111fc:	bf0c      	ite	eq
 80111fe:	4618      	moveq	r0, r3
 8011200:	2001      	movne	r0, #1
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	f7f9 fa58 	bl	800a6b8 <rcutils_reset_error>
 8011208:	f640 0036 	movw	r0, #2102	@ 0x836
 801120c:	bd70      	pop	{r4, r5, r6, pc}
 801120e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011212:	bd70      	pop	{r4, r5, r6, pc}
 8011214:	200b      	movs	r0, #11
 8011216:	bd70      	pop	{r4, r5, r6, pc}
 8011218:	f640 0036 	movw	r0, #2102	@ 0x836
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop

08011220 <rcl_action_send_result_request>:
 8011220:	b390      	cbz	r0, 8011288 <rcl_action_send_result_request+0x68>
 8011222:	b570      	push	{r4, r5, r6, lr}
 8011224:	4604      	mov	r4, r0
 8011226:	6800      	ldr	r0, [r0, #0]
 8011228:	b348      	cbz	r0, 801127e <rcl_action_send_result_request+0x5e>
 801122a:	460d      	mov	r5, r1
 801122c:	4616      	mov	r6, r2
 801122e:	f7fe f9af 	bl	800f590 <rcl_client_is_valid>
 8011232:	b1f8      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011234:	6820      	ldr	r0, [r4, #0]
 8011236:	3004      	adds	r0, #4
 8011238:	f7fe f9aa 	bl	800f590 <rcl_client_is_valid>
 801123c:	b1d0      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	3008      	adds	r0, #8
 8011242:	f7fe f9a5 	bl	800f590 <rcl_client_is_valid>
 8011246:	b1a8      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011248:	6820      	ldr	r0, [r4, #0]
 801124a:	300c      	adds	r0, #12
 801124c:	f7ff f82a 	bl	80102a4 <rcl_subscription_is_valid>
 8011250:	b180      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 8011252:	6820      	ldr	r0, [r4, #0]
 8011254:	3010      	adds	r0, #16
 8011256:	f7ff f825 	bl	80102a4 <rcl_subscription_is_valid>
 801125a:	b158      	cbz	r0, 8011274 <rcl_action_send_result_request+0x54>
 801125c:	b195      	cbz	r5, 8011284 <rcl_action_send_result_request+0x64>
 801125e:	b18e      	cbz	r6, 8011284 <rcl_action_send_result_request+0x64>
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	4632      	mov	r2, r6
 8011264:	4629      	mov	r1, r5
 8011266:	3008      	adds	r0, #8
 8011268:	f7fe f914 	bl	800f494 <rcl_send_request>
 801126c:	3800      	subs	r0, #0
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	bd70      	pop	{r4, r5, r6, pc}
 8011274:	f7f9 fa20 	bl	800a6b8 <rcutils_reset_error>
 8011278:	f640 0036 	movw	r0, #2102	@ 0x836
 801127c:	bd70      	pop	{r4, r5, r6, pc}
 801127e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011282:	bd70      	pop	{r4, r5, r6, pc}
 8011284:	200b      	movs	r0, #11
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	f640 0036 	movw	r0, #2102	@ 0x836
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <rcl_action_take_result_response>:
 8011290:	2800      	cmp	r0, #0
 8011292:	d03a      	beq.n	801130a <rcl_action_take_result_response+0x7a>
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	4604      	mov	r4, r0
 8011298:	6800      	ldr	r0, [r0, #0]
 801129a:	b388      	cbz	r0, 8011300 <rcl_action_take_result_response+0x70>
 801129c:	460d      	mov	r5, r1
 801129e:	4616      	mov	r6, r2
 80112a0:	f7fe f976 	bl	800f590 <rcl_client_is_valid>
 80112a4:	b338      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112a6:	6820      	ldr	r0, [r4, #0]
 80112a8:	3004      	adds	r0, #4
 80112aa:	f7fe f971 	bl	800f590 <rcl_client_is_valid>
 80112ae:	b310      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	3008      	adds	r0, #8
 80112b4:	f7fe f96c 	bl	800f590 <rcl_client_is_valid>
 80112b8:	b1e8      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	300c      	adds	r0, #12
 80112be:	f7fe fff1 	bl	80102a4 <rcl_subscription_is_valid>
 80112c2:	b1c0      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	3010      	adds	r0, #16
 80112c8:	f7fe ffec 	bl	80102a4 <rcl_subscription_is_valid>
 80112cc:	b198      	cbz	r0, 80112f6 <rcl_action_take_result_response+0x66>
 80112ce:	b1d5      	cbz	r5, 8011306 <rcl_action_take_result_response+0x76>
 80112d0:	b1ce      	cbz	r6, 8011306 <rcl_action_take_result_response+0x76>
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	4632      	mov	r2, r6
 80112d6:	4629      	mov	r1, r5
 80112d8:	3008      	adds	r0, #8
 80112da:	f7fe f911 	bl	800f500 <rcl_take_response>
 80112de:	b148      	cbz	r0, 80112f4 <rcl_action_take_result_response+0x64>
 80112e0:	280a      	cmp	r0, #10
 80112e2:	d007      	beq.n	80112f4 <rcl_action_take_result_response+0x64>
 80112e4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80112e8:	f640 0337 	movw	r3, #2103	@ 0x837
 80112ec:	4290      	cmp	r0, r2
 80112ee:	bf0c      	ite	eq
 80112f0:	4618      	moveq	r0, r3
 80112f2:	2001      	movne	r0, #1
 80112f4:	bd70      	pop	{r4, r5, r6, pc}
 80112f6:	f7f9 f9df 	bl	800a6b8 <rcutils_reset_error>
 80112fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80112fe:	bd70      	pop	{r4, r5, r6, pc}
 8011300:	f640 0036 	movw	r0, #2102	@ 0x836
 8011304:	bd70      	pop	{r4, r5, r6, pc}
 8011306:	200b      	movs	r0, #11
 8011308:	bd70      	pop	{r4, r5, r6, pc}
 801130a:	f640 0036 	movw	r0, #2102	@ 0x836
 801130e:	4770      	bx	lr

08011310 <rcl_action_take_cancel_response>:
 8011310:	2800      	cmp	r0, #0
 8011312:	d03a      	beq.n	801138a <rcl_action_take_cancel_response+0x7a>
 8011314:	b570      	push	{r4, r5, r6, lr}
 8011316:	4604      	mov	r4, r0
 8011318:	6800      	ldr	r0, [r0, #0]
 801131a:	b388      	cbz	r0, 8011380 <rcl_action_take_cancel_response+0x70>
 801131c:	460d      	mov	r5, r1
 801131e:	4616      	mov	r6, r2
 8011320:	f7fe f936 	bl	800f590 <rcl_client_is_valid>
 8011324:	b338      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011326:	6820      	ldr	r0, [r4, #0]
 8011328:	3004      	adds	r0, #4
 801132a:	f7fe f931 	bl	800f590 <rcl_client_is_valid>
 801132e:	b310      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011330:	6820      	ldr	r0, [r4, #0]
 8011332:	3008      	adds	r0, #8
 8011334:	f7fe f92c 	bl	800f590 <rcl_client_is_valid>
 8011338:	b1e8      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 801133a:	6820      	ldr	r0, [r4, #0]
 801133c:	300c      	adds	r0, #12
 801133e:	f7fe ffb1 	bl	80102a4 <rcl_subscription_is_valid>
 8011342:	b1c0      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 8011344:	6820      	ldr	r0, [r4, #0]
 8011346:	3010      	adds	r0, #16
 8011348:	f7fe ffac 	bl	80102a4 <rcl_subscription_is_valid>
 801134c:	b198      	cbz	r0, 8011376 <rcl_action_take_cancel_response+0x66>
 801134e:	b1d5      	cbz	r5, 8011386 <rcl_action_take_cancel_response+0x76>
 8011350:	b1ce      	cbz	r6, 8011386 <rcl_action_take_cancel_response+0x76>
 8011352:	6820      	ldr	r0, [r4, #0]
 8011354:	4632      	mov	r2, r6
 8011356:	4629      	mov	r1, r5
 8011358:	3004      	adds	r0, #4
 801135a:	f7fe f8d1 	bl	800f500 <rcl_take_response>
 801135e:	b148      	cbz	r0, 8011374 <rcl_action_take_cancel_response+0x64>
 8011360:	280a      	cmp	r0, #10
 8011362:	d007      	beq.n	8011374 <rcl_action_take_cancel_response+0x64>
 8011364:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011368:	f640 0337 	movw	r3, #2103	@ 0x837
 801136c:	4290      	cmp	r0, r2
 801136e:	bf0c      	ite	eq
 8011370:	4618      	moveq	r0, r3
 8011372:	2001      	movne	r0, #1
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	f7f9 f99f 	bl	800a6b8 <rcutils_reset_error>
 801137a:	f640 0036 	movw	r0, #2102	@ 0x836
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	f640 0036 	movw	r0, #2102	@ 0x836
 8011384:	bd70      	pop	{r4, r5, r6, pc}
 8011386:	200b      	movs	r0, #11
 8011388:	bd70      	pop	{r4, r5, r6, pc}
 801138a:	f640 0036 	movw	r0, #2102	@ 0x836
 801138e:	4770      	bx	lr

08011390 <rcl_action_take_feedback>:
 8011390:	2800      	cmp	r0, #0
 8011392:	d038      	beq.n	8011406 <rcl_action_take_feedback+0x76>
 8011394:	b530      	push	{r4, r5, lr}
 8011396:	4604      	mov	r4, r0
 8011398:	6800      	ldr	r0, [r0, #0]
 801139a:	b091      	sub	sp, #68	@ 0x44
 801139c:	b378      	cbz	r0, 80113fe <rcl_action_take_feedback+0x6e>
 801139e:	460d      	mov	r5, r1
 80113a0:	f7fe f8f6 	bl	800f590 <rcl_client_is_valid>
 80113a4:	b328      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113a6:	6820      	ldr	r0, [r4, #0]
 80113a8:	3004      	adds	r0, #4
 80113aa:	f7fe f8f1 	bl	800f590 <rcl_client_is_valid>
 80113ae:	b300      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113b0:	6820      	ldr	r0, [r4, #0]
 80113b2:	3008      	adds	r0, #8
 80113b4:	f7fe f8ec 	bl	800f590 <rcl_client_is_valid>
 80113b8:	b1d8      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	300c      	adds	r0, #12
 80113be:	f7fe ff71 	bl	80102a4 <rcl_subscription_is_valid>
 80113c2:	b1b0      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113c4:	6820      	ldr	r0, [r4, #0]
 80113c6:	3010      	adds	r0, #16
 80113c8:	f7fe ff6c 	bl	80102a4 <rcl_subscription_is_valid>
 80113cc:	b188      	cbz	r0, 80113f2 <rcl_action_take_feedback+0x62>
 80113ce:	b1ed      	cbz	r5, 801140c <rcl_action_take_feedback+0x7c>
 80113d0:	6820      	ldr	r0, [r4, #0]
 80113d2:	2300      	movs	r3, #0
 80113d4:	466a      	mov	r2, sp
 80113d6:	4629      	mov	r1, r5
 80113d8:	300c      	adds	r0, #12
 80113da:	f7fe ff05 	bl	80101e8 <rcl_take>
 80113de:	b160      	cbz	r0, 80113fa <rcl_action_take_feedback+0x6a>
 80113e0:	f240 1391 	movw	r3, #401	@ 0x191
 80113e4:	4298      	cmp	r0, r3
 80113e6:	d014      	beq.n	8011412 <rcl_action_take_feedback+0x82>
 80113e8:	280a      	cmp	r0, #10
 80113ea:	bf18      	it	ne
 80113ec:	2001      	movne	r0, #1
 80113ee:	b011      	add	sp, #68	@ 0x44
 80113f0:	bd30      	pop	{r4, r5, pc}
 80113f2:	f7f9 f961 	bl	800a6b8 <rcutils_reset_error>
 80113f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80113fa:	b011      	add	sp, #68	@ 0x44
 80113fc:	bd30      	pop	{r4, r5, pc}
 80113fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8011402:	b011      	add	sp, #68	@ 0x44
 8011404:	bd30      	pop	{r4, r5, pc}
 8011406:	f640 0036 	movw	r0, #2102	@ 0x836
 801140a:	4770      	bx	lr
 801140c:	200b      	movs	r0, #11
 801140e:	b011      	add	sp, #68	@ 0x44
 8011410:	bd30      	pop	{r4, r5, pc}
 8011412:	f640 0037 	movw	r0, #2103	@ 0x837
 8011416:	e7f0      	b.n	80113fa <rcl_action_take_feedback+0x6a>

08011418 <rcl_action_wait_set_add_action_client>:
 8011418:	2800      	cmp	r0, #0
 801141a:	d048      	beq.n	80114ae <rcl_action_wait_set_add_action_client+0x96>
 801141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141e:	460c      	mov	r4, r1
 8011420:	2900      	cmp	r1, #0
 8011422:	d03c      	beq.n	801149e <rcl_action_wait_set_add_action_client+0x86>
 8011424:	4605      	mov	r5, r0
 8011426:	6808      	ldr	r0, [r1, #0]
 8011428:	2800      	cmp	r0, #0
 801142a:	d038      	beq.n	801149e <rcl_action_wait_set_add_action_client+0x86>
 801142c:	4617      	mov	r7, r2
 801142e:	461e      	mov	r6, r3
 8011430:	f7fe f8ae 	bl	800f590 <rcl_client_is_valid>
 8011434:	b3b0      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011436:	6820      	ldr	r0, [r4, #0]
 8011438:	3004      	adds	r0, #4
 801143a:	f7fe f8a9 	bl	800f590 <rcl_client_is_valid>
 801143e:	b388      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011440:	6820      	ldr	r0, [r4, #0]
 8011442:	3008      	adds	r0, #8
 8011444:	f7fe f8a4 	bl	800f590 <rcl_client_is_valid>
 8011448:	b360      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 801144a:	6820      	ldr	r0, [r4, #0]
 801144c:	300c      	adds	r0, #12
 801144e:	f7fe ff29 	bl	80102a4 <rcl_subscription_is_valid>
 8011452:	b338      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 8011454:	6820      	ldr	r0, [r4, #0]
 8011456:	3010      	adds	r0, #16
 8011458:	f7fe ff24 	bl	80102a4 <rcl_subscription_is_valid>
 801145c:	b310      	cbz	r0, 80114a4 <rcl_action_wait_set_add_action_client+0x8c>
 801145e:	6821      	ldr	r1, [r4, #0]
 8011460:	4628      	mov	r0, r5
 8011462:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011466:	f7ff fccd 	bl	8010e04 <rcl_wait_set_add_client>
 801146a:	b9b8      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801146c:	6821      	ldr	r1, [r4, #0]
 801146e:	4628      	mov	r0, r5
 8011470:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011474:	3104      	adds	r1, #4
 8011476:	f7ff fcc5 	bl	8010e04 <rcl_wait_set_add_client>
 801147a:	b978      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801147c:	6821      	ldr	r1, [r4, #0]
 801147e:	4628      	mov	r0, r5
 8011480:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011484:	3108      	adds	r1, #8
 8011486:	f7ff fcbd 	bl	8010e04 <rcl_wait_set_add_client>
 801148a:	b938      	cbnz	r0, 801149c <rcl_action_wait_set_add_action_client+0x84>
 801148c:	6821      	ldr	r1, [r4, #0]
 801148e:	4628      	mov	r0, r5
 8011490:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011494:	310c      	adds	r1, #12
 8011496:	f7ff f96d 	bl	8010774 <rcl_wait_set_add_subscription>
 801149a:	b158      	cbz	r0, 80114b4 <rcl_action_wait_set_add_action_client+0x9c>
 801149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801149e:	f640 0036 	movw	r0, #2102	@ 0x836
 80114a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114a4:	f7f9 f908 	bl	800a6b8 <rcutils_reset_error>
 80114a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80114ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80114b2:	4770      	bx	lr
 80114b4:	6821      	ldr	r1, [r4, #0]
 80114b6:	4628      	mov	r0, r5
 80114b8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80114bc:	3110      	adds	r1, #16
 80114be:	f7ff f959 	bl	8010774 <rcl_wait_set_add_subscription>
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d1ea      	bne.n	801149c <rcl_action_wait_set_add_action_client+0x84>
 80114c6:	b11f      	cbz	r7, 80114d0 <rcl_action_wait_set_add_action_client+0xb8>
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80114ce:	603b      	str	r3, [r7, #0]
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	d0e3      	beq.n	801149c <rcl_action_wait_set_add_action_client+0x84>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80114da:	6033      	str	r3, [r6, #0]
 80114dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114de:	bf00      	nop

080114e0 <rcl_action_client_wait_set_get_entities_ready>:
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f000 808d 	beq.w	8011600 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80114e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ea:	460c      	mov	r4, r1
 80114ec:	2900      	cmp	r1, #0
 80114ee:	d077      	beq.n	80115e0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80114f0:	4605      	mov	r5, r0
 80114f2:	6808      	ldr	r0, [r1, #0]
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d073      	beq.n	80115e0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80114f8:	4616      	mov	r6, r2
 80114fa:	461f      	mov	r7, r3
 80114fc:	f7fe f848 	bl	800f590 <rcl_client_is_valid>
 8011500:	2800      	cmp	r0, #0
 8011502:	d071      	beq.n	80115e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011504:	6820      	ldr	r0, [r4, #0]
 8011506:	3004      	adds	r0, #4
 8011508:	f7fe f842 	bl	800f590 <rcl_client_is_valid>
 801150c:	2800      	cmp	r0, #0
 801150e:	d06b      	beq.n	80115e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011510:	6820      	ldr	r0, [r4, #0]
 8011512:	3008      	adds	r0, #8
 8011514:	f7fe f83c 	bl	800f590 <rcl_client_is_valid>
 8011518:	2800      	cmp	r0, #0
 801151a:	d065      	beq.n	80115e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801151c:	6820      	ldr	r0, [r4, #0]
 801151e:	300c      	adds	r0, #12
 8011520:	f7fe fec0 	bl	80102a4 <rcl_subscription_is_valid>
 8011524:	2800      	cmp	r0, #0
 8011526:	d05f      	beq.n	80115e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011528:	6820      	ldr	r0, [r4, #0]
 801152a:	3010      	adds	r0, #16
 801152c:	f7fe feba 	bl	80102a4 <rcl_subscription_is_valid>
 8011530:	2800      	cmp	r0, #0
 8011532:	d059      	beq.n	80115e8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011534:	2e00      	cmp	r6, #0
 8011536:	d060      	beq.n	80115fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011538:	2f00      	cmp	r7, #0
 801153a:	d05e      	beq.n	80115fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801153c:	9b06      	ldr	r3, [sp, #24]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d05b      	beq.n	80115fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011542:	9b07      	ldr	r3, [sp, #28]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d058      	beq.n	80115fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011548:	9b08      	ldr	r3, [sp, #32]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d055      	beq.n	80115fa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801154e:	6823      	ldr	r3, [r4, #0]
 8011550:	686a      	ldr	r2, [r5, #4]
 8011552:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011556:	428a      	cmp	r2, r1
 8011558:	d94c      	bls.n	80115f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801155a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801155e:	4282      	cmp	r2, r0
 8011560:	d948      	bls.n	80115f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011562:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011566:	69ea      	ldr	r2, [r5, #28]
 8011568:	42a2      	cmp	r2, r4
 801156a:	d943      	bls.n	80115f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801156c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011570:	4562      	cmp	r2, ip
 8011572:	d93f      	bls.n	80115f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011574:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011578:	4572      	cmp	r2, lr
 801157a:	d93b      	bls.n	80115f4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801157c:	69aa      	ldr	r2, [r5, #24]
 801157e:	682d      	ldr	r5, [r5, #0]
 8011580:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011584:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011588:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801158c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011590:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011594:	f103 0c0c 	add.w	ip, r3, #12
 8011598:	eba5 050c 	sub.w	r5, r5, ip
 801159c:	fab5 f585 	clz	r5, r5
 80115a0:	096d      	lsrs	r5, r5, #5
 80115a2:	7035      	strb	r5, [r6, #0]
 80115a4:	f103 0510 	add.w	r5, r3, #16
 80115a8:	1b64      	subs	r4, r4, r5
 80115aa:	fab4 f484 	clz	r4, r4
 80115ae:	0964      	lsrs	r4, r4, #5
 80115b0:	703c      	strb	r4, [r7, #0]
 80115b2:	eba3 0008 	sub.w	r0, r3, r8
 80115b6:	1d1c      	adds	r4, r3, #4
 80115b8:	3308      	adds	r3, #8
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	fab0 f080 	clz	r0, r0
 80115c0:	9a06      	ldr	r2, [sp, #24]
 80115c2:	0940      	lsrs	r0, r0, #5
 80115c4:	1b09      	subs	r1, r1, r4
 80115c6:	7010      	strb	r0, [r2, #0]
 80115c8:	fab1 f181 	clz	r1, r1
 80115cc:	9a07      	ldr	r2, [sp, #28]
 80115ce:	0949      	lsrs	r1, r1, #5
 80115d0:	7011      	strb	r1, [r2, #0]
 80115d2:	fab3 f383 	clz	r3, r3
 80115d6:	9a08      	ldr	r2, [sp, #32]
 80115d8:	095b      	lsrs	r3, r3, #5
 80115da:	2000      	movs	r0, #0
 80115dc:	7013      	strb	r3, [r2, #0]
 80115de:	e001      	b.n	80115e4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80115e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e8:	f7f9 f866 	bl	800a6b8 <rcutils_reset_error>
 80115ec:	f640 0036 	movw	r0, #2102	@ 0x836
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f4:	2001      	movs	r0, #1
 80115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115fa:	200b      	movs	r0, #11
 80115fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011600:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop

08011608 <rcl_action_take_goal_request>:
 8011608:	2800      	cmp	r0, #0
 801160a:	d039      	beq.n	8011680 <rcl_action_take_goal_request+0x78>
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	4604      	mov	r4, r0
 8011610:	6800      	ldr	r0, [r0, #0]
 8011612:	b380      	cbz	r0, 8011676 <rcl_action_take_goal_request+0x6e>
 8011614:	460d      	mov	r5, r1
 8011616:	4616      	mov	r6, r2
 8011618:	f7fe fd00 	bl	801001c <rcl_service_is_valid>
 801161c:	b330      	cbz	r0, 801166c <rcl_action_take_goal_request+0x64>
 801161e:	6820      	ldr	r0, [r4, #0]
 8011620:	3004      	adds	r0, #4
 8011622:	f7fe fcfb 	bl	801001c <rcl_service_is_valid>
 8011626:	b308      	cbz	r0, 801166c <rcl_action_take_goal_request+0x64>
 8011628:	6820      	ldr	r0, [r4, #0]
 801162a:	3008      	adds	r0, #8
 801162c:	f7fe fcf6 	bl	801001c <rcl_service_is_valid>
 8011630:	b1e0      	cbz	r0, 801166c <rcl_action_take_goal_request+0x64>
 8011632:	6820      	ldr	r0, [r4, #0]
 8011634:	300c      	adds	r0, #12
 8011636:	f7f8 f8d5 	bl	80097e4 <rcl_publisher_is_valid>
 801163a:	b1b8      	cbz	r0, 801166c <rcl_action_take_goal_request+0x64>
 801163c:	6820      	ldr	r0, [r4, #0]
 801163e:	3010      	adds	r0, #16
 8011640:	f7f8 f8d0 	bl	80097e4 <rcl_publisher_is_valid>
 8011644:	b190      	cbz	r0, 801166c <rcl_action_take_goal_request+0x64>
 8011646:	b1cd      	cbz	r5, 801167c <rcl_action_take_goal_request+0x74>
 8011648:	b1c6      	cbz	r6, 801167c <rcl_action_take_goal_request+0x74>
 801164a:	6820      	ldr	r0, [r4, #0]
 801164c:	4632      	mov	r2, r6
 801164e:	4629      	mov	r1, r5
 8011650:	f7fe fc8c 	bl	800ff6c <rcl_take_request>
 8011654:	b148      	cbz	r0, 801166a <rcl_action_take_goal_request+0x62>
 8011656:	280a      	cmp	r0, #10
 8011658:	d007      	beq.n	801166a <rcl_action_take_goal_request+0x62>
 801165a:	f240 2259 	movw	r2, #601	@ 0x259
 801165e:	f640 0399 	movw	r3, #2201	@ 0x899
 8011662:	4290      	cmp	r0, r2
 8011664:	bf0c      	ite	eq
 8011666:	4618      	moveq	r0, r3
 8011668:	2001      	movne	r0, #1
 801166a:	bd70      	pop	{r4, r5, r6, pc}
 801166c:	f7f9 f824 	bl	800a6b8 <rcutils_reset_error>
 8011670:	f640 0098 	movw	r0, #2200	@ 0x898
 8011674:	bd70      	pop	{r4, r5, r6, pc}
 8011676:	f640 0098 	movw	r0, #2200	@ 0x898
 801167a:	bd70      	pop	{r4, r5, r6, pc}
 801167c:	200b      	movs	r0, #11
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	f640 0098 	movw	r0, #2200	@ 0x898
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <rcl_action_send_goal_response>:
 8011688:	b390      	cbz	r0, 80116f0 <rcl_action_send_goal_response+0x68>
 801168a:	b570      	push	{r4, r5, r6, lr}
 801168c:	4604      	mov	r4, r0
 801168e:	6800      	ldr	r0, [r0, #0]
 8011690:	b348      	cbz	r0, 80116e6 <rcl_action_send_goal_response+0x5e>
 8011692:	460d      	mov	r5, r1
 8011694:	4616      	mov	r6, r2
 8011696:	f7fe fcc1 	bl	801001c <rcl_service_is_valid>
 801169a:	b1f8      	cbz	r0, 80116dc <rcl_action_send_goal_response+0x54>
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	3004      	adds	r0, #4
 80116a0:	f7fe fcbc 	bl	801001c <rcl_service_is_valid>
 80116a4:	b1d0      	cbz	r0, 80116dc <rcl_action_send_goal_response+0x54>
 80116a6:	6820      	ldr	r0, [r4, #0]
 80116a8:	3008      	adds	r0, #8
 80116aa:	f7fe fcb7 	bl	801001c <rcl_service_is_valid>
 80116ae:	b1a8      	cbz	r0, 80116dc <rcl_action_send_goal_response+0x54>
 80116b0:	6820      	ldr	r0, [r4, #0]
 80116b2:	300c      	adds	r0, #12
 80116b4:	f7f8 f896 	bl	80097e4 <rcl_publisher_is_valid>
 80116b8:	b180      	cbz	r0, 80116dc <rcl_action_send_goal_response+0x54>
 80116ba:	6820      	ldr	r0, [r4, #0]
 80116bc:	3010      	adds	r0, #16
 80116be:	f7f8 f891 	bl	80097e4 <rcl_publisher_is_valid>
 80116c2:	b158      	cbz	r0, 80116dc <rcl_action_send_goal_response+0x54>
 80116c4:	b195      	cbz	r5, 80116ec <rcl_action_send_goal_response+0x64>
 80116c6:	b18e      	cbz	r6, 80116ec <rcl_action_send_goal_response+0x64>
 80116c8:	6820      	ldr	r0, [r4, #0]
 80116ca:	4632      	mov	r2, r6
 80116cc:	4629      	mov	r1, r5
 80116ce:	f7fe fc8d 	bl	800ffec <rcl_send_response>
 80116d2:	b110      	cbz	r0, 80116da <rcl_action_send_goal_response+0x52>
 80116d4:	2802      	cmp	r0, #2
 80116d6:	bf18      	it	ne
 80116d8:	2001      	movne	r0, #1
 80116da:	bd70      	pop	{r4, r5, r6, pc}
 80116dc:	f7f8 ffec 	bl	800a6b8 <rcutils_reset_error>
 80116e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80116e4:	bd70      	pop	{r4, r5, r6, pc}
 80116e6:	f640 0098 	movw	r0, #2200	@ 0x898
 80116ea:	bd70      	pop	{r4, r5, r6, pc}
 80116ec:	200b      	movs	r0, #11
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <rcl_action_take_result_request>:
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d03a      	beq.n	8011772 <rcl_action_take_result_request+0x7a>
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4604      	mov	r4, r0
 8011700:	6800      	ldr	r0, [r0, #0]
 8011702:	b388      	cbz	r0, 8011768 <rcl_action_take_result_request+0x70>
 8011704:	460d      	mov	r5, r1
 8011706:	4616      	mov	r6, r2
 8011708:	f7fe fc88 	bl	801001c <rcl_service_is_valid>
 801170c:	b338      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 801170e:	6820      	ldr	r0, [r4, #0]
 8011710:	3004      	adds	r0, #4
 8011712:	f7fe fc83 	bl	801001c <rcl_service_is_valid>
 8011716:	b310      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	3008      	adds	r0, #8
 801171c:	f7fe fc7e 	bl	801001c <rcl_service_is_valid>
 8011720:	b1e8      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	300c      	adds	r0, #12
 8011726:	f7f8 f85d 	bl	80097e4 <rcl_publisher_is_valid>
 801172a:	b1c0      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 801172c:	6820      	ldr	r0, [r4, #0]
 801172e:	3010      	adds	r0, #16
 8011730:	f7f8 f858 	bl	80097e4 <rcl_publisher_is_valid>
 8011734:	b198      	cbz	r0, 801175e <rcl_action_take_result_request+0x66>
 8011736:	b1d5      	cbz	r5, 801176e <rcl_action_take_result_request+0x76>
 8011738:	b1ce      	cbz	r6, 801176e <rcl_action_take_result_request+0x76>
 801173a:	6820      	ldr	r0, [r4, #0]
 801173c:	4632      	mov	r2, r6
 801173e:	4629      	mov	r1, r5
 8011740:	3008      	adds	r0, #8
 8011742:	f7fe fc13 	bl	800ff6c <rcl_take_request>
 8011746:	b148      	cbz	r0, 801175c <rcl_action_take_result_request+0x64>
 8011748:	280a      	cmp	r0, #10
 801174a:	d007      	beq.n	801175c <rcl_action_take_result_request+0x64>
 801174c:	f240 2259 	movw	r2, #601	@ 0x259
 8011750:	f640 0399 	movw	r3, #2201	@ 0x899
 8011754:	4290      	cmp	r0, r2
 8011756:	bf0c      	ite	eq
 8011758:	4618      	moveq	r0, r3
 801175a:	2001      	movne	r0, #1
 801175c:	bd70      	pop	{r4, r5, r6, pc}
 801175e:	f7f8 ffab 	bl	800a6b8 <rcutils_reset_error>
 8011762:	f640 0098 	movw	r0, #2200	@ 0x898
 8011766:	bd70      	pop	{r4, r5, r6, pc}
 8011768:	f640 0098 	movw	r0, #2200	@ 0x898
 801176c:	bd70      	pop	{r4, r5, r6, pc}
 801176e:	200b      	movs	r0, #11
 8011770:	bd70      	pop	{r4, r5, r6, pc}
 8011772:	f640 0098 	movw	r0, #2200	@ 0x898
 8011776:	4770      	bx	lr

08011778 <rcl_action_take_cancel_request>:
 8011778:	2800      	cmp	r0, #0
 801177a:	d03a      	beq.n	80117f2 <rcl_action_take_cancel_request+0x7a>
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	4604      	mov	r4, r0
 8011780:	6800      	ldr	r0, [r0, #0]
 8011782:	b388      	cbz	r0, 80117e8 <rcl_action_take_cancel_request+0x70>
 8011784:	460d      	mov	r5, r1
 8011786:	4616      	mov	r6, r2
 8011788:	f7fe fc48 	bl	801001c <rcl_service_is_valid>
 801178c:	b338      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 801178e:	6820      	ldr	r0, [r4, #0]
 8011790:	3004      	adds	r0, #4
 8011792:	f7fe fc43 	bl	801001c <rcl_service_is_valid>
 8011796:	b310      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 8011798:	6820      	ldr	r0, [r4, #0]
 801179a:	3008      	adds	r0, #8
 801179c:	f7fe fc3e 	bl	801001c <rcl_service_is_valid>
 80117a0:	b1e8      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	300c      	adds	r0, #12
 80117a6:	f7f8 f81d 	bl	80097e4 <rcl_publisher_is_valid>
 80117aa:	b1c0      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117ac:	6820      	ldr	r0, [r4, #0]
 80117ae:	3010      	adds	r0, #16
 80117b0:	f7f8 f818 	bl	80097e4 <rcl_publisher_is_valid>
 80117b4:	b198      	cbz	r0, 80117de <rcl_action_take_cancel_request+0x66>
 80117b6:	b1d5      	cbz	r5, 80117ee <rcl_action_take_cancel_request+0x76>
 80117b8:	b1ce      	cbz	r6, 80117ee <rcl_action_take_cancel_request+0x76>
 80117ba:	6820      	ldr	r0, [r4, #0]
 80117bc:	4632      	mov	r2, r6
 80117be:	4629      	mov	r1, r5
 80117c0:	3004      	adds	r0, #4
 80117c2:	f7fe fbd3 	bl	800ff6c <rcl_take_request>
 80117c6:	b148      	cbz	r0, 80117dc <rcl_action_take_cancel_request+0x64>
 80117c8:	280a      	cmp	r0, #10
 80117ca:	d007      	beq.n	80117dc <rcl_action_take_cancel_request+0x64>
 80117cc:	f240 2259 	movw	r2, #601	@ 0x259
 80117d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80117d4:	4290      	cmp	r0, r2
 80117d6:	bf0c      	ite	eq
 80117d8:	4618      	moveq	r0, r3
 80117da:	2001      	movne	r0, #1
 80117dc:	bd70      	pop	{r4, r5, r6, pc}
 80117de:	f7f8 ff6b 	bl	800a6b8 <rcutils_reset_error>
 80117e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	200b      	movs	r0, #11
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80117f6:	4770      	bx	lr

080117f8 <rcl_action_send_cancel_response>:
 80117f8:	b398      	cbz	r0, 8011862 <rcl_action_send_cancel_response+0x6a>
 80117fa:	b570      	push	{r4, r5, r6, lr}
 80117fc:	4604      	mov	r4, r0
 80117fe:	6800      	ldr	r0, [r0, #0]
 8011800:	b350      	cbz	r0, 8011858 <rcl_action_send_cancel_response+0x60>
 8011802:	460d      	mov	r5, r1
 8011804:	4616      	mov	r6, r2
 8011806:	f7fe fc09 	bl	801001c <rcl_service_is_valid>
 801180a:	b300      	cbz	r0, 801184e <rcl_action_send_cancel_response+0x56>
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	3004      	adds	r0, #4
 8011810:	f7fe fc04 	bl	801001c <rcl_service_is_valid>
 8011814:	b1d8      	cbz	r0, 801184e <rcl_action_send_cancel_response+0x56>
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	3008      	adds	r0, #8
 801181a:	f7fe fbff 	bl	801001c <rcl_service_is_valid>
 801181e:	b1b0      	cbz	r0, 801184e <rcl_action_send_cancel_response+0x56>
 8011820:	6820      	ldr	r0, [r4, #0]
 8011822:	300c      	adds	r0, #12
 8011824:	f7f7 ffde 	bl	80097e4 <rcl_publisher_is_valid>
 8011828:	b188      	cbz	r0, 801184e <rcl_action_send_cancel_response+0x56>
 801182a:	6820      	ldr	r0, [r4, #0]
 801182c:	3010      	adds	r0, #16
 801182e:	f7f7 ffd9 	bl	80097e4 <rcl_publisher_is_valid>
 8011832:	b160      	cbz	r0, 801184e <rcl_action_send_cancel_response+0x56>
 8011834:	b19d      	cbz	r5, 801185e <rcl_action_send_cancel_response+0x66>
 8011836:	b196      	cbz	r6, 801185e <rcl_action_send_cancel_response+0x66>
 8011838:	6820      	ldr	r0, [r4, #0]
 801183a:	4632      	mov	r2, r6
 801183c:	4629      	mov	r1, r5
 801183e:	3004      	adds	r0, #4
 8011840:	f7fe fbd4 	bl	800ffec <rcl_send_response>
 8011844:	b110      	cbz	r0, 801184c <rcl_action_send_cancel_response+0x54>
 8011846:	2802      	cmp	r0, #2
 8011848:	bf18      	it	ne
 801184a:	2001      	movne	r0, #1
 801184c:	bd70      	pop	{r4, r5, r6, pc}
 801184e:	f7f8 ff33 	bl	800a6b8 <rcutils_reset_error>
 8011852:	f640 0098 	movw	r0, #2200	@ 0x898
 8011856:	bd70      	pop	{r4, r5, r6, pc}
 8011858:	f640 0098 	movw	r0, #2200	@ 0x898
 801185c:	bd70      	pop	{r4, r5, r6, pc}
 801185e:	200b      	movs	r0, #11
 8011860:	bd70      	pop	{r4, r5, r6, pc}
 8011862:	f640 0098 	movw	r0, #2200	@ 0x898
 8011866:	4770      	bx	lr

08011868 <rcl_action_wait_set_add_action_server>:
 8011868:	2800      	cmp	r0, #0
 801186a:	d04d      	beq.n	8011908 <rcl_action_wait_set_add_action_server+0xa0>
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	460c      	mov	r4, r1
 8011870:	b159      	cbz	r1, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011872:	4605      	mov	r5, r0
 8011874:	6808      	ldr	r0, [r1, #0]
 8011876:	b140      	cbz	r0, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011878:	4616      	mov	r6, r2
 801187a:	f7fe fbcf 	bl	801001c <rcl_service_is_valid>
 801187e:	b120      	cbz	r0, 801188a <rcl_action_wait_set_add_action_server+0x22>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	3004      	adds	r0, #4
 8011884:	f7fe fbca 	bl	801001c <rcl_service_is_valid>
 8011888:	b910      	cbnz	r0, 8011890 <rcl_action_wait_set_add_action_server+0x28>
 801188a:	f640 0098 	movw	r0, #2200	@ 0x898
 801188e:	bd70      	pop	{r4, r5, r6, pc}
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	3008      	adds	r0, #8
 8011894:	f7fe fbc2 	bl	801001c <rcl_service_is_valid>
 8011898:	2800      	cmp	r0, #0
 801189a:	d0f6      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 801189c:	6820      	ldr	r0, [r4, #0]
 801189e:	300c      	adds	r0, #12
 80118a0:	f7f7 ffb8 	bl	8009814 <rcl_publisher_is_valid_except_context>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d0f0      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 80118a8:	6820      	ldr	r0, [r4, #0]
 80118aa:	3010      	adds	r0, #16
 80118ac:	f7f7 ffb2 	bl	8009814 <rcl_publisher_is_valid_except_context>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d0ea      	beq.n	801188a <rcl_action_wait_set_add_action_server+0x22>
 80118b4:	6821      	ldr	r1, [r4, #0]
 80118b6:	4628      	mov	r0, r5
 80118b8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80118bc:	f7ff face 	bl	8010e5c <rcl_wait_set_add_service>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d1e4      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118c4:	6821      	ldr	r1, [r4, #0]
 80118c6:	4628      	mov	r0, r5
 80118c8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80118cc:	3104      	adds	r1, #4
 80118ce:	f7ff fac5 	bl	8010e5c <rcl_wait_set_add_service>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d1db      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118d6:	6821      	ldr	r1, [r4, #0]
 80118d8:	4628      	mov	r0, r5
 80118da:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80118de:	3108      	adds	r1, #8
 80118e0:	f7ff fabc 	bl	8010e5c <rcl_wait_set_add_service>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d1d2      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118e8:	6821      	ldr	r1, [r4, #0]
 80118ea:	4628      	mov	r0, r5
 80118ec:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80118f0:	3114      	adds	r1, #20
 80118f2:	f7ff fa57 	bl	8010da4 <rcl_wait_set_add_timer>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d1c9      	bne.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d0c7      	beq.n	801188e <rcl_action_wait_set_add_action_server+0x26>
 80118fe:	6823      	ldr	r3, [r4, #0]
 8011900:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8011904:	6033      	str	r3, [r6, #0]
 8011906:	bd70      	pop	{r4, r5, r6, pc}
 8011908:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop

08011910 <rcl_action_server_wait_set_get_entities_ready>:
 8011910:	2800      	cmp	r0, #0
 8011912:	d05a      	beq.n	80119ca <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011916:	460c      	mov	r4, r1
 8011918:	b161      	cbz	r1, 8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801191a:	4605      	mov	r5, r0
 801191c:	6808      	ldr	r0, [r1, #0]
 801191e:	b148      	cbz	r0, 8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011920:	4616      	mov	r6, r2
 8011922:	461f      	mov	r7, r3
 8011924:	f7fe fb7a 	bl	801001c <rcl_service_is_valid>
 8011928:	b120      	cbz	r0, 8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801192a:	6820      	ldr	r0, [r4, #0]
 801192c:	3004      	adds	r0, #4
 801192e:	f7fe fb75 	bl	801001c <rcl_service_is_valid>
 8011932:	b910      	cbnz	r0, 801193a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011934:	f640 0098 	movw	r0, #2200	@ 0x898
 8011938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801193a:	6820      	ldr	r0, [r4, #0]
 801193c:	3008      	adds	r0, #8
 801193e:	f7fe fb6d 	bl	801001c <rcl_service_is_valid>
 8011942:	2800      	cmp	r0, #0
 8011944:	d0f6      	beq.n	8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011946:	6820      	ldr	r0, [r4, #0]
 8011948:	300c      	adds	r0, #12
 801194a:	f7f7 ff63 	bl	8009814 <rcl_publisher_is_valid_except_context>
 801194e:	2800      	cmp	r0, #0
 8011950:	d0f0      	beq.n	8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011952:	6820      	ldr	r0, [r4, #0]
 8011954:	3010      	adds	r0, #16
 8011956:	f7f7 ff5d 	bl	8009814 <rcl_publisher_is_valid_except_context>
 801195a:	2800      	cmp	r0, #0
 801195c:	d0ea      	beq.n	8011934 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801195e:	b3be      	cbz	r6, 80119d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011960:	b3b7      	cbz	r7, 80119d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011962:	9b06      	ldr	r3, [sp, #24]
 8011964:	b3a3      	cbz	r3, 80119d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011966:	9b07      	ldr	r3, [sp, #28]
 8011968:	b393      	cbz	r3, 80119d0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801196a:	6821      	ldr	r1, [r4, #0]
 801196c:	692a      	ldr	r2, [r5, #16]
 801196e:	6a2c      	ldr	r4, [r5, #32]
 8011970:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8011974:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8011978:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801197c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8011980:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8011984:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011988:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801198c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011990:	1a64      	subs	r4, r4, r1
 8011992:	fab4 f484 	clz	r4, r4
 8011996:	0964      	lsrs	r4, r4, #5
 8011998:	7034      	strb	r4, [r6, #0]
 801199a:	1d0c      	adds	r4, r1, #4
 801199c:	1b1b      	subs	r3, r3, r4
 801199e:	fab3 f383 	clz	r3, r3
 80119a2:	095b      	lsrs	r3, r3, #5
 80119a4:	f101 0408 	add.w	r4, r1, #8
 80119a8:	703b      	strb	r3, [r7, #0]
 80119aa:	f101 0314 	add.w	r3, r1, #20
 80119ae:	1b01      	subs	r1, r0, r4
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	fab1 f181 	clz	r1, r1
 80119b6:	9a06      	ldr	r2, [sp, #24]
 80119b8:	0949      	lsrs	r1, r1, #5
 80119ba:	7011      	strb	r1, [r2, #0]
 80119bc:	fab3 f383 	clz	r3, r3
 80119c0:	9a07      	ldr	r2, [sp, #28]
 80119c2:	095b      	lsrs	r3, r3, #5
 80119c4:	2000      	movs	r0, #0
 80119c6:	7013      	strb	r3, [r2, #0]
 80119c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119ce:	4770      	bx	lr
 80119d0:	200b      	movs	r0, #11
 80119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119d4 <_execute_event_handler>:
 80119d4:	2002      	movs	r0, #2
 80119d6:	4770      	bx	lr

080119d8 <_cancel_goal_event_handler>:
 80119d8:	2003      	movs	r0, #3
 80119da:	4770      	bx	lr

080119dc <_succeed_event_handler>:
 80119dc:	2004      	movs	r0, #4
 80119de:	4770      	bx	lr

080119e0 <_abort_event_handler>:
 80119e0:	2006      	movs	r0, #6
 80119e2:	4770      	bx	lr

080119e4 <_canceled_event_handler>:
 80119e4:	2005      	movs	r0, #5
 80119e6:	4770      	bx	lr

080119e8 <rcl_action_transition_goal_state>:
 80119e8:	b2c2      	uxtb	r2, r0
 80119ea:	2a06      	cmp	r2, #6
 80119ec:	d80c      	bhi.n	8011a08 <rcl_action_transition_goal_state+0x20>
 80119ee:	2904      	cmp	r1, #4
 80119f0:	d80a      	bhi.n	8011a08 <rcl_action_transition_goal_state+0x20>
 80119f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80119f6:	b410      	push	{r4}
 80119f8:	1853      	adds	r3, r2, r1
 80119fa:	4c06      	ldr	r4, [pc, #24]	@ (8011a14 <rcl_action_transition_goal_state+0x2c>)
 80119fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011a00:	b123      	cbz	r3, 8011a0c <rcl_action_transition_goal_state+0x24>
 8011a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a06:	4718      	bx	r3
 8011a08:	2000      	movs	r0, #0
 8011a0a:	4770      	bx	lr
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	08017b64 	.word	0x08017b64

08011a18 <rcl_action_get_zero_initialized_cancel_response>:
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	4c07      	ldr	r4, [pc, #28]	@ (8011a38 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011a1c:	4686      	mov	lr, r0
 8011a1e:	4684      	mov	ip, r0
 8011a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	f8cc 3000 	str.w	r3, [ip]
 8011a32:	4670      	mov	r0, lr
 8011a34:	bd10      	pop	{r4, pc}
 8011a36:	bf00      	nop
 8011a38:	08017bf0 	.word	0x08017bf0

08011a3c <rclc_action_send_result_request>:
 8011a3c:	b1d0      	cbz	r0, 8011a74 <rclc_action_send_result_request+0x38>
 8011a3e:	b500      	push	{lr}
 8011a40:	4684      	mov	ip, r0
 8011a42:	b087      	sub	sp, #28
 8011a44:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a48:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a4c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a50:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a54:	f10d 0e08 	add.w	lr, sp, #8
 8011a58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a5c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a60:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011a64:	a902      	add	r1, sp, #8
 8011a66:	3010      	adds	r0, #16
 8011a68:	f7ff fbda 	bl	8011220 <rcl_action_send_result_request>
 8011a6c:	b920      	cbnz	r0, 8011a78 <rclc_action_send_result_request+0x3c>
 8011a6e:	b007      	add	sp, #28
 8011a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a74:	200b      	movs	r0, #11
 8011a76:	4770      	bx	lr
 8011a78:	9001      	str	r0, [sp, #4]
 8011a7a:	f7f8 fe1d 	bl	800a6b8 <rcutils_reset_error>
 8011a7e:	9801      	ldr	r0, [sp, #4]
 8011a80:	b007      	add	sp, #28
 8011a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a86:	bf00      	nop

08011a88 <rclc_action_take_goal_handle>:
 8011a88:	b160      	cbz	r0, 8011aa4 <rclc_action_take_goal_handle+0x1c>
 8011a8a:	6883      	ldr	r3, [r0, #8]
 8011a8c:	b143      	cbz	r3, 8011aa0 <rclc_action_take_goal_handle+0x18>
 8011a8e:	6819      	ldr	r1, [r3, #0]
 8011a90:	6081      	str	r1, [r0, #8]
 8011a92:	2200      	movs	r2, #0
 8011a94:	721a      	strb	r2, [r3, #8]
 8011a96:	68c1      	ldr	r1, [r0, #12]
 8011a98:	6019      	str	r1, [r3, #0]
 8011a9a:	621a      	str	r2, [r3, #32]
 8011a9c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8011a9e:	60c3      	str	r3, [r0, #12]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	4770      	bx	lr
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	e7fb      	b.n	8011aa0 <rclc_action_take_goal_handle+0x18>

08011aa8 <rclc_action_remove_used_goal_handle>:
 8011aa8:	b180      	cbz	r0, 8011acc <rclc_action_remove_used_goal_handle+0x24>
 8011aaa:	b179      	cbz	r1, 8011acc <rclc_action_remove_used_goal_handle+0x24>
 8011aac:	68c3      	ldr	r3, [r0, #12]
 8011aae:	4299      	cmp	r1, r3
 8011ab0:	d00d      	beq.n	8011ace <rclc_action_remove_used_goal_handle+0x26>
 8011ab2:	b12b      	cbz	r3, 8011ac0 <rclc_action_remove_used_goal_handle+0x18>
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	4291      	cmp	r1, r2
 8011ab8:	d003      	beq.n	8011ac2 <rclc_action_remove_used_goal_handle+0x1a>
 8011aba:	4613      	mov	r3, r2
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1f9      	bne.n	8011ab4 <rclc_action_remove_used_goal_handle+0xc>
 8011ac0:	4770      	bx	lr
 8011ac2:	680a      	ldr	r2, [r1, #0]
 8011ac4:	601a      	str	r2, [r3, #0]
 8011ac6:	6883      	ldr	r3, [r0, #8]
 8011ac8:	600b      	str	r3, [r1, #0]
 8011aca:	6081      	str	r1, [r0, #8]
 8011acc:	4770      	bx	lr
 8011ace:	680b      	ldr	r3, [r1, #0]
 8011ad0:	60c3      	str	r3, [r0, #12]
 8011ad2:	e7f8      	b.n	8011ac6 <rclc_action_remove_used_goal_handle+0x1e>

08011ad4 <rclc_action_find_goal_handle_by_uuid>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	b180      	cbz	r0, 8011afa <rclc_action_find_goal_handle_by_uuid+0x26>
 8011ad8:	460d      	mov	r5, r1
 8011ada:	b181      	cbz	r1, 8011afe <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011adc:	68c4      	ldr	r4, [r0, #12]
 8011ade:	b914      	cbnz	r4, 8011ae6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011ae0:	e009      	b.n	8011af6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ae2:	6824      	ldr	r4, [r4, #0]
 8011ae4:	b13c      	cbz	r4, 8011af6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ae6:	f104 0009 	add.w	r0, r4, #9
 8011aea:	2210      	movs	r2, #16
 8011aec:	4629      	mov	r1, r5
 8011aee:	f004 fd65 	bl	80165bc <memcmp>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d1f5      	bne.n	8011ae2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8011af6:	4620      	mov	r0, r4
 8011af8:	bd38      	pop	{r3, r4, r5, pc}
 8011afa:	4604      	mov	r4, r0
 8011afc:	e7fb      	b.n	8011af6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011afe:	460c      	mov	r4, r1
 8011b00:	e7f9      	b.n	8011af6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011b02:	bf00      	nop

08011b04 <rclc_action_find_first_handle_by_status>:
 8011b04:	b140      	cbz	r0, 8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b06:	68c0      	ldr	r0, [r0, #12]
 8011b08:	b910      	cbnz	r0, 8011b10 <rclc_action_find_first_handle_by_status+0xc>
 8011b0a:	e005      	b.n	8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b0c:	6800      	ldr	r0, [r0, #0]
 8011b0e:	b118      	cbz	r0, 8011b18 <rclc_action_find_first_handle_by_status+0x14>
 8011b10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b14:	428b      	cmp	r3, r1
 8011b16:	d1f9      	bne.n	8011b0c <rclc_action_find_first_handle_by_status+0x8>
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop

08011b1c <rclc_action_find_first_terminated_handle>:
 8011b1c:	b140      	cbz	r0, 8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b1e:	68c0      	ldr	r0, [r0, #12]
 8011b20:	b910      	cbnz	r0, 8011b28 <rclc_action_find_first_terminated_handle+0xc>
 8011b22:	e005      	b.n	8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	b118      	cbz	r0, 8011b30 <rclc_action_find_first_terminated_handle+0x14>
 8011b28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b2c:	2b03      	cmp	r3, #3
 8011b2e:	ddf9      	ble.n	8011b24 <rclc_action_find_first_terminated_handle+0x8>
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b34:	b170      	cbz	r0, 8011b54 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b36:	68c0      	ldr	r0, [r0, #12]
 8011b38:	b160      	cbz	r0, 8011b54 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b3a:	b410      	push	{r4}
 8011b3c:	e001      	b.n	8011b42 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011b3e:	6800      	ldr	r0, [r0, #0]
 8011b40:	b128      	cbz	r0, 8011b4e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011b42:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8011b46:	4299      	cmp	r1, r3
 8011b48:	bf08      	it	eq
 8011b4a:	4294      	cmpeq	r4, r2
 8011b4c:	d1f7      	bne.n	8011b3e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b58:	b170      	cbz	r0, 8011b78 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b5a:	68c0      	ldr	r0, [r0, #12]
 8011b5c:	b160      	cbz	r0, 8011b78 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b5e:	b410      	push	{r4}
 8011b60:	e001      	b.n	8011b66 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	b128      	cbz	r0, 8011b72 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b66:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8011b6a:	4299      	cmp	r1, r3
 8011b6c:	bf08      	it	eq
 8011b6e:	4294      	cmpeq	r4, r2
 8011b70:	d1f7      	bne.n	8011b62 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop

08011b7c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b7c:	b170      	cbz	r0, 8011b9c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b7e:	68c0      	ldr	r0, [r0, #12]
 8011b80:	b160      	cbz	r0, 8011b9c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b82:	b410      	push	{r4}
 8011b84:	e001      	b.n	8011b8a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b86:	6800      	ldr	r0, [r0, #0]
 8011b88:	b128      	cbz	r0, 8011b96 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011b8a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8011b8e:	4299      	cmp	r1, r3
 8011b90:	bf08      	it	eq
 8011b92:	4294      	cmpeq	r4, r2
 8011b94:	d1f7      	bne.n	8011b86 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <rclc_action_find_first_handle_with_goal_response>:
 8011ba0:	b140      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011ba2:	68c0      	ldr	r0, [r0, #12]
 8011ba4:	b910      	cbnz	r0, 8011bac <rclc_action_find_first_handle_with_goal_response+0xc>
 8011ba6:	e005      	b.n	8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011ba8:	6800      	ldr	r0, [r0, #0]
 8011baa:	b118      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011bac:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d0f9      	beq.n	8011ba8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop

08011bb8 <rclc_action_find_first_handle_with_result_response>:
 8011bb8:	b140      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bba:	68c0      	ldr	r0, [r0, #12]
 8011bbc:	b910      	cbnz	r0, 8011bc4 <rclc_action_find_first_handle_with_result_response+0xc>
 8011bbe:	e005      	b.n	8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bc0:	6800      	ldr	r0, [r0, #0]
 8011bc2:	b118      	cbz	r0, 8011bcc <rclc_action_find_first_handle_with_result_response+0x14>
 8011bc4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0f9      	beq.n	8011bc0 <rclc_action_find_first_handle_with_result_response+0x8>
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop

08011bd0 <rclc_action_server_response_goal_request>:
 8011bd0:	b198      	cbz	r0, 8011bfa <rclc_action_server_response_goal_request+0x2a>
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	6844      	ldr	r4, [r0, #4]
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	2200      	movs	r2, #0
 8011bda:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011bde:	460b      	mov	r3, r1
 8011be0:	9205      	str	r2, [sp, #20]
 8011be2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8011be6:	aa03      	add	r2, sp, #12
 8011be8:	f104 0010 	add.w	r0, r4, #16
 8011bec:	f88d 300c 	strb.w	r3, [sp, #12]
 8011bf0:	f7ff fd4a 	bl	8011688 <rcl_action_send_goal_response>
 8011bf4:	b918      	cbnz	r0, 8011bfe <rclc_action_server_response_goal_request+0x2e>
 8011bf6:	b006      	add	sp, #24
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	200b      	movs	r0, #11
 8011bfc:	4770      	bx	lr
 8011bfe:	9001      	str	r0, [sp, #4]
 8011c00:	f7f8 fd5a 	bl	800a6b8 <rcutils_reset_error>
 8011c04:	9801      	ldr	r0, [sp, #4]
 8011c06:	b006      	add	sp, #24
 8011c08:	bd10      	pop	{r4, pc}
 8011c0a:	bf00      	nop
 8011c0c:	0000      	movs	r0, r0
	...

08011c10 <rclc_action_server_goal_cancel_accept>:
 8011c10:	b310      	cbz	r0, 8011c58 <rclc_action_server_goal_cancel_accept+0x48>
 8011c12:	b510      	push	{r4, lr}
 8011c14:	b090      	sub	sp, #64	@ 0x40
 8011c16:	4604      	mov	r4, r0
 8011c18:	a806      	add	r0, sp, #24
 8011c1a:	f7ff fefd 	bl	8011a18 <rcl_action_get_zero_initialized_cancel_response>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c24:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c28:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c2c:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c30:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c34:	f8cd d01c 	str.w	sp, [sp, #28]
 8011c38:	46ec      	mov	ip, sp
 8011c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c3e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011c60 <rclc_action_server_goal_cancel_accept+0x50>
 8011c42:	6860      	ldr	r0, [r4, #4]
 8011c44:	aa06      	add	r2, sp, #24
 8011c46:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8011c4a:	3010      	adds	r0, #16
 8011c4c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c50:	f7ff fdd2 	bl	80117f8 <rcl_action_send_cancel_response>
 8011c54:	b010      	add	sp, #64	@ 0x40
 8011c56:	bd10      	pop	{r4, pc}
 8011c58:	200b      	movs	r0, #11
 8011c5a:	4770      	bx	lr
 8011c5c:	f3af 8000 	nop.w
 8011c60:	00000001 	.word	0x00000001
 8011c64:	00000001 	.word	0x00000001

08011c68 <rclc_action_server_goal_cancel_reject>:
 8011c68:	b082      	sub	sp, #8
 8011c6a:	b530      	push	{r4, r5, lr}
 8011c6c:	b08b      	sub	sp, #44	@ 0x2c
 8011c6e:	ac0e      	add	r4, sp, #56	@ 0x38
 8011c70:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c74:	b188      	cbz	r0, 8011c9a <rclc_action_server_goal_cancel_reject+0x32>
 8011c76:	4604      	mov	r4, r0
 8011c78:	a801      	add	r0, sp, #4
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	f7ff fecc 	bl	8011a18 <rcl_action_get_zero_initialized_cancel_response>
 8011c80:	aa01      	add	r2, sp, #4
 8011c82:	a90e      	add	r1, sp, #56	@ 0x38
 8011c84:	f104 0010 	add.w	r0, r4, #16
 8011c88:	f88d 5004 	strb.w	r5, [sp, #4]
 8011c8c:	f7ff fdb4 	bl	80117f8 <rcl_action_send_cancel_response>
 8011c90:	b00b      	add	sp, #44	@ 0x2c
 8011c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c96:	b002      	add	sp, #8
 8011c98:	4770      	bx	lr
 8011c9a:	200b      	movs	r0, #11
 8011c9c:	b00b      	add	sp, #44	@ 0x2c
 8011c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ca2:	b002      	add	sp, #8
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop

08011ca8 <__atomic_load_8>:
 8011ca8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011cac:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011cb0:	4a15      	ldr	r2, [pc, #84]	@ (8011d08 <__atomic_load_8+0x60>)
 8011cb2:	4b16      	ldr	r3, [pc, #88]	@ (8011d0c <__atomic_load_8+0x64>)
 8011cb4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011cb8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011cbc:	fb02 f101 	mul.w	r1, r2, r1
 8011cc0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011cc4:	fba3 2301 	umull	r2, r3, r3, r1
 8011cc8:	091b      	lsrs	r3, r3, #4
 8011cca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cce:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011cd2:	b4d0      	push	{r4, r6, r7}
 8011cd4:	4c0e      	ldr	r4, [pc, #56]	@ (8011d10 <__atomic_load_8+0x68>)
 8011cd6:	1ac9      	subs	r1, r1, r3
 8011cd8:	1862      	adds	r2, r4, r1
 8011cda:	f04f 0c01 	mov.w	ip, #1
 8011cde:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011ce2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011ce6:	2e00      	cmp	r6, #0
 8011ce8:	d1f9      	bne.n	8011cde <__atomic_load_8+0x36>
 8011cea:	f3bf 8f5b 	dmb	ish
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1f4      	bne.n	8011cde <__atomic_load_8+0x36>
 8011cf4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011cf8:	f3bf 8f5b 	dmb	ish
 8011cfc:	5463      	strb	r3, [r4, r1]
 8011cfe:	4630      	mov	r0, r6
 8011d00:	4639      	mov	r1, r7
 8011d02:	bcd0      	pop	{r4, r6, r7}
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	27d4eb2d 	.word	0x27d4eb2d
 8011d0c:	b21642c9 	.word	0xb21642c9
 8011d10:	2000dd80 	.word	0x2000dd80

08011d14 <__atomic_store_8>:
 8011d14:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011d18:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011d22:	4c14      	ldr	r4, [pc, #80]	@ (8011d74 <__atomic_store_8+0x60>)
 8011d24:	4d14      	ldr	r5, [pc, #80]	@ (8011d78 <__atomic_store_8+0x64>)
 8011d26:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011d2a:	fb04 f101 	mul.w	r1, r4, r1
 8011d2e:	4c13      	ldr	r4, [pc, #76]	@ (8011d7c <__atomic_store_8+0x68>)
 8011d30:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011d34:	fba4 4e01 	umull	r4, lr, r4, r1
 8011d38:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011d3c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011d40:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011d44:	eba1 0e0e 	sub.w	lr, r1, lr
 8011d48:	eb05 0c0e 	add.w	ip, r5, lr
 8011d4c:	f04f 0401 	mov.w	r4, #1
 8011d50:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d54:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011d58:	2e00      	cmp	r6, #0
 8011d5a:	d1f9      	bne.n	8011d50 <__atomic_store_8+0x3c>
 8011d5c:	f3bf 8f5b 	dmb	ish
 8011d60:	b2c9      	uxtb	r1, r1
 8011d62:	2900      	cmp	r1, #0
 8011d64:	d1f4      	bne.n	8011d50 <__atomic_store_8+0x3c>
 8011d66:	e9c0 2300 	strd	r2, r3, [r0]
 8011d6a:	f3bf 8f5b 	dmb	ish
 8011d6e:	f805 100e 	strb.w	r1, [r5, lr]
 8011d72:	bd70      	pop	{r4, r5, r6, pc}
 8011d74:	27d4eb2d 	.word	0x27d4eb2d
 8011d78:	2000dd80 	.word	0x2000dd80
 8011d7c:	b21642c9 	.word	0xb21642c9

08011d80 <__atomic_exchange_8>:
 8011d80:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d84:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011d88:	4916      	ldr	r1, [pc, #88]	@ (8011de4 <__atomic_exchange_8+0x64>)
 8011d8a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011d8e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011d92:	fb01 fc0c 	mul.w	ip, r1, ip
 8011d96:	4914      	ldr	r1, [pc, #80]	@ (8011de8 <__atomic_exchange_8+0x68>)
 8011d98:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	4605      	mov	r5, r0
 8011da0:	fba1 010c 	umull	r0, r1, r1, ip
 8011da4:	0909      	lsrs	r1, r1, #4
 8011da6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011daa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011dae:	4e0f      	ldr	r6, [pc, #60]	@ (8011dec <__atomic_exchange_8+0x6c>)
 8011db0:	ebac 0c01 	sub.w	ip, ip, r1
 8011db4:	eb06 010c 	add.w	r1, r6, ip
 8011db8:	f04f 0e01 	mov.w	lr, #1
 8011dbc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011dc0:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d1f9      	bne.n	8011dbc <__atomic_exchange_8+0x3c>
 8011dc8:	f3bf 8f5b 	dmb	ish
 8011dcc:	b2e4      	uxtb	r4, r4
 8011dce:	2c00      	cmp	r4, #0
 8011dd0:	d1f4      	bne.n	8011dbc <__atomic_exchange_8+0x3c>
 8011dd2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011dd6:	e9c5 2300 	strd	r2, r3, [r5]
 8011dda:	f3bf 8f5b 	dmb	ish
 8011dde:	f806 400c 	strb.w	r4, [r6, ip]
 8011de2:	bd70      	pop	{r4, r5, r6, pc}
 8011de4:	27d4eb2d 	.word	0x27d4eb2d
 8011de8:	b21642c9 	.word	0xb21642c9
 8011dec:	2000dd80 	.word	0x2000dd80

08011df0 <rcutils_get_env>:
 8011df0:	b168      	cbz	r0, 8011e0e <rcutils_get_env+0x1e>
 8011df2:	b510      	push	{r4, lr}
 8011df4:	460c      	mov	r4, r1
 8011df6:	b129      	cbz	r1, 8011e04 <rcutils_get_env+0x14>
 8011df8:	f004 f84e 	bl	8015e98 <getenv>
 8011dfc:	b120      	cbz	r0, 8011e08 <rcutils_get_env+0x18>
 8011dfe:	6020      	str	r0, [r4, #0]
 8011e00:	2000      	movs	r0, #0
 8011e02:	bd10      	pop	{r4, pc}
 8011e04:	4803      	ldr	r0, [pc, #12]	@ (8011e14 <rcutils_get_env+0x24>)
 8011e06:	bd10      	pop	{r4, pc}
 8011e08:	4b03      	ldr	r3, [pc, #12]	@ (8011e18 <rcutils_get_env+0x28>)
 8011e0a:	6023      	str	r3, [r4, #0]
 8011e0c:	bd10      	pop	{r4, pc}
 8011e0e:	4803      	ldr	r0, [pc, #12]	@ (8011e1c <rcutils_get_env+0x2c>)
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	08017c30 	.word	0x08017c30
 8011e18:	08017d54 	.word	0x08017d54
 8011e1c:	08017c14 	.word	0x08017c14

08011e20 <rcutils_format_string_limit>:
 8011e20:	b40f      	push	{r0, r1, r2, r3}
 8011e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e24:	b083      	sub	sp, #12
 8011e26:	ac08      	add	r4, sp, #32
 8011e28:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e2e:	b34e      	cbz	r6, 8011e84 <rcutils_format_string_limit+0x64>
 8011e30:	a808      	add	r0, sp, #32
 8011e32:	f7f8 fc1b 	bl	800a66c <rcutils_allocator_is_valid>
 8011e36:	b328      	cbz	r0, 8011e84 <rcutils_format_string_limit+0x64>
 8011e38:	2100      	movs	r1, #0
 8011e3a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011e3c:	4632      	mov	r2, r6
 8011e3e:	4608      	mov	r0, r1
 8011e40:	e9cd 3300 	strd	r3, r3, [sp]
 8011e44:	f000 f8f4 	bl	8012030 <rcutils_vsnprintf>
 8011e48:	1c43      	adds	r3, r0, #1
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	d01a      	beq.n	8011e84 <rcutils_format_string_limit+0x64>
 8011e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e52:	1c47      	adds	r7, r0, #1
 8011e54:	429f      	cmp	r7, r3
 8011e56:	bf84      	itt	hi
 8011e58:	461f      	movhi	r7, r3
 8011e5a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8011e5e:	4638      	mov	r0, r7
 8011e60:	9b08      	ldr	r3, [sp, #32]
 8011e62:	4798      	blx	r3
 8011e64:	4604      	mov	r4, r0
 8011e66:	b168      	cbz	r0, 8011e84 <rcutils_format_string_limit+0x64>
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	4632      	mov	r2, r6
 8011e6c:	4639      	mov	r1, r7
 8011e6e:	f000 f8df 	bl	8012030 <rcutils_vsnprintf>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	db02      	blt.n	8011e7c <rcutils_format_string_limit+0x5c>
 8011e76:	2300      	movs	r3, #0
 8011e78:	5563      	strb	r3, [r4, r5]
 8011e7a:	e004      	b.n	8011e86 <rcutils_format_string_limit+0x66>
 8011e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e7e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e80:	4620      	mov	r0, r4
 8011e82:	4798      	blx	r3
 8011e84:	2400      	movs	r4, #0
 8011e86:	4620      	mov	r0, r4
 8011e88:	b003      	add	sp, #12
 8011e8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e8e:	b004      	add	sp, #16
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop

08011e94 <rcutils_repl_str>:
 8011e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	ed2d 8b02 	vpush	{d8}
 8011e9c:	b087      	sub	sp, #28
 8011e9e:	4680      	mov	r8, r0
 8011ea0:	4608      	mov	r0, r1
 8011ea2:	f8cd 8004 	str.w	r8, [sp, #4]
 8011ea6:	ee08 2a10 	vmov	s16, r2
 8011eaa:	468a      	mov	sl, r1
 8011eac:	4699      	mov	r9, r3
 8011eae:	f7ee f9a1 	bl	80001f4 <strlen>
 8011eb2:	2600      	movs	r6, #0
 8011eb4:	4647      	mov	r7, r8
 8011eb6:	9002      	str	r0, [sp, #8]
 8011eb8:	46b3      	mov	fp, r6
 8011eba:	2510      	movs	r5, #16
 8011ebc:	46b0      	mov	r8, r6
 8011ebe:	e01d      	b.n	8011efc <rcutils_repl_str+0x68>
 8011ec0:	f10b 0b01 	add.w	fp, fp, #1
 8011ec4:	455e      	cmp	r6, fp
 8011ec6:	d211      	bcs.n	8011eec <rcutils_repl_str+0x58>
 8011ec8:	442e      	add	r6, r5
 8011eca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011ece:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011ed2:	00b1      	lsls	r1, r6, #2
 8011ed4:	4798      	blx	r3
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	f000 8088 	beq.w	8011fec <rcutils_repl_str+0x158>
 8011edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ee0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8011ee4:	4680      	mov	r8, r0
 8011ee6:	bf28      	it	cs
 8011ee8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8011eec:	9a01      	ldr	r2, [sp, #4]
 8011eee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8011ef2:	1aa2      	subs	r2, r4, r2
 8011ef4:	f843 2c04 	str.w	r2, [r3, #-4]
 8011ef8:	9b02      	ldr	r3, [sp, #8]
 8011efa:	18e7      	adds	r7, r4, r3
 8011efc:	4651      	mov	r1, sl
 8011efe:	4638      	mov	r0, r7
 8011f00:	f004 fbad 	bl	801665e <strstr>
 8011f04:	4604      	mov	r4, r0
 8011f06:	4640      	mov	r0, r8
 8011f08:	2c00      	cmp	r4, #0
 8011f0a:	d1d9      	bne.n	8011ec0 <rcutils_repl_str+0x2c>
 8011f0c:	46b8      	mov	r8, r7
 8011f0e:	4607      	mov	r7, r0
 8011f10:	4640      	mov	r0, r8
 8011f12:	f7ee f96f 	bl	80001f4 <strlen>
 8011f16:	9b01      	ldr	r3, [sp, #4]
 8011f18:	eba8 0303 	sub.w	r3, r8, r3
 8011f1c:	181c      	adds	r4, r3, r0
 8011f1e:	9404      	str	r4, [sp, #16]
 8011f20:	f1bb 0f00 	cmp.w	fp, #0
 8011f24:	d04a      	beq.n	8011fbc <rcutils_repl_str+0x128>
 8011f26:	ee18 0a10 	vmov	r0, s16
 8011f2a:	f7ee f963 	bl	80001f4 <strlen>
 8011f2e:	9b02      	ldr	r3, [sp, #8]
 8011f30:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f34:	1ac3      	subs	r3, r0, r3
 8011f36:	fb0b 4303 	mla	r3, fp, r3, r4
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	4606      	mov	r6, r0
 8011f40:	f8d9 3000 	ldr.w	r3, [r9]
 8011f44:	1c50      	adds	r0, r2, #1
 8011f46:	4798      	blx	r3
 8011f48:	9003      	str	r0, [sp, #12]
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d04f      	beq.n	8011fee <rcutils_repl_str+0x15a>
 8011f4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f52:	683a      	ldr	r2, [r7, #0]
 8011f54:	4641      	mov	r1, r8
 8011f56:	f004 fc24 	bl	80167a2 <memcpy>
 8011f5a:	683d      	ldr	r5, [r7, #0]
 8011f5c:	9b03      	ldr	r3, [sp, #12]
 8011f5e:	9701      	str	r7, [sp, #4]
 8011f60:	46ba      	mov	sl, r7
 8011f62:	441d      	add	r5, r3
 8011f64:	9f02      	ldr	r7, [sp, #8]
 8011f66:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f6a:	2401      	movs	r4, #1
 8011f6c:	46d1      	mov	r9, sl
 8011f6e:	ee18 aa10 	vmov	sl, s16
 8011f72:	e00a      	b.n	8011f8a <rcutils_repl_str+0xf6>
 8011f74:	f8d9 5000 	ldr.w	r5, [r9]
 8011f78:	1aaa      	subs	r2, r5, r2
 8011f7a:	1885      	adds	r5, r0, r2
 8011f7c:	f004 fc11 	bl	80167a2 <memcpy>
 8011f80:	45a3      	cmp	fp, r4
 8011f82:	f104 0201 	add.w	r2, r4, #1
 8011f86:	d935      	bls.n	8011ff4 <rcutils_repl_str+0x160>
 8011f88:	4614      	mov	r4, r2
 8011f8a:	4632      	mov	r2, r6
 8011f8c:	4651      	mov	r1, sl
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f004 fc07 	bl	80167a2 <memcpy>
 8011f94:	f859 2b04 	ldr.w	r2, [r9], #4
 8011f98:	45a3      	cmp	fp, r4
 8011f9a:	443a      	add	r2, r7
 8011f9c:	eb05 0006 	add.w	r0, r5, r6
 8011fa0:	eb08 0102 	add.w	r1, r8, r2
 8011fa4:	d1e6      	bne.n	8011f74 <rcutils_repl_str+0xe0>
 8011fa6:	9b04      	ldr	r3, [sp, #16]
 8011fa8:	1a9a      	subs	r2, r3, r2
 8011faa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011fae:	f004 fbf8 	bl	80167a2 <memcpy>
 8011fb2:	9a03      	ldr	r2, [sp, #12]
 8011fb4:	9905      	ldr	r1, [sp, #20]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	5453      	strb	r3, [r2, r1]
 8011fba:	e00b      	b.n	8011fd4 <rcutils_repl_str+0x140>
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f8d9 3000 	ldr.w	r3, [r9]
 8011fc2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fc6:	3001      	adds	r0, #1
 8011fc8:	4798      	blx	r3
 8011fca:	9003      	str	r0, [sp, #12]
 8011fcc:	b110      	cbz	r0, 8011fd4 <rcutils_repl_str+0x140>
 8011fce:	9901      	ldr	r1, [sp, #4]
 8011fd0:	f004 fbdf 	bl	8016792 <strcpy>
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011fda:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fde:	4798      	blx	r3
 8011fe0:	9803      	ldr	r0, [sp, #12]
 8011fe2:	b007      	add	sp, #28
 8011fe4:	ecbd 8b02 	vpop	{d8}
 8011fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fec:	4647      	mov	r7, r8
 8011fee:	2300      	movs	r3, #0
 8011ff0:	9303      	str	r3, [sp, #12]
 8011ff2:	e7ef      	b.n	8011fd4 <rcutils_repl_str+0x140>
 8011ff4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011ff8:	e7db      	b.n	8011fb2 <rcutils_repl_str+0x11e>
 8011ffa:	bf00      	nop

08011ffc <rcutils_snprintf>:
 8011ffc:	b40c      	push	{r2, r3}
 8011ffe:	b530      	push	{r4, r5, lr}
 8012000:	b083      	sub	sp, #12
 8012002:	ab06      	add	r3, sp, #24
 8012004:	f853 2b04 	ldr.w	r2, [r3], #4
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	b152      	cbz	r2, 8012022 <rcutils_snprintf+0x26>
 801200c:	b138      	cbz	r0, 801201e <rcutils_snprintf+0x22>
 801200e:	b141      	cbz	r1, 8012022 <rcutils_snprintf+0x26>
 8012010:	f004 fac6 	bl	80165a0 <vsniprintf>
 8012014:	b003      	add	sp, #12
 8012016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801201a:	b002      	add	sp, #8
 801201c:	4770      	bx	lr
 801201e:	2900      	cmp	r1, #0
 8012020:	d0f6      	beq.n	8012010 <rcutils_snprintf+0x14>
 8012022:	f004 fb89 	bl	8016738 <__errno>
 8012026:	2316      	movs	r3, #22
 8012028:	6003      	str	r3, [r0, #0]
 801202a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801202e:	e7f1      	b.n	8012014 <rcutils_snprintf+0x18>

08012030 <rcutils_vsnprintf>:
 8012030:	b570      	push	{r4, r5, r6, lr}
 8012032:	b13a      	cbz	r2, 8012044 <rcutils_vsnprintf+0x14>
 8012034:	b120      	cbz	r0, 8012040 <rcutils_vsnprintf+0x10>
 8012036:	b129      	cbz	r1, 8012044 <rcutils_vsnprintf+0x14>
 8012038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801203c:	f004 bab0 	b.w	80165a0 <vsniprintf>
 8012040:	2900      	cmp	r1, #0
 8012042:	d0f9      	beq.n	8012038 <rcutils_vsnprintf+0x8>
 8012044:	f004 fb78 	bl	8016738 <__errno>
 8012048:	2316      	movs	r3, #22
 801204a:	6003      	str	r3, [r0, #0]
 801204c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012050:	bd70      	pop	{r4, r5, r6, pc}
 8012052:	bf00      	nop

08012054 <rcutils_strdup>:
 8012054:	b084      	sub	sp, #16
 8012056:	b570      	push	{r4, r5, r6, lr}
 8012058:	b082      	sub	sp, #8
 801205a:	ac07      	add	r4, sp, #28
 801205c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012060:	4605      	mov	r5, r0
 8012062:	b1b0      	cbz	r0, 8012092 <rcutils_strdup+0x3e>
 8012064:	f7ee f8c6 	bl	80001f4 <strlen>
 8012068:	1c42      	adds	r2, r0, #1
 801206a:	9b07      	ldr	r3, [sp, #28]
 801206c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801206e:	9201      	str	r2, [sp, #4]
 8012070:	4606      	mov	r6, r0
 8012072:	4610      	mov	r0, r2
 8012074:	4798      	blx	r3
 8012076:	4604      	mov	r4, r0
 8012078:	b128      	cbz	r0, 8012086 <rcutils_strdup+0x32>
 801207a:	9a01      	ldr	r2, [sp, #4]
 801207c:	4629      	mov	r1, r5
 801207e:	f004 fb90 	bl	80167a2 <memcpy>
 8012082:	2300      	movs	r3, #0
 8012084:	55a3      	strb	r3, [r4, r6]
 8012086:	4620      	mov	r0, r4
 8012088:	b002      	add	sp, #8
 801208a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801208e:	b004      	add	sp, #16
 8012090:	4770      	bx	lr
 8012092:	4604      	mov	r4, r0
 8012094:	e7f7      	b.n	8012086 <rcutils_strdup+0x32>
 8012096:	bf00      	nop

08012098 <rcutils_strndup>:
 8012098:	b082      	sub	sp, #8
 801209a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801209c:	ac06      	add	r4, sp, #24
 801209e:	e884 000c 	stmia.w	r4, {r2, r3}
 80120a2:	4605      	mov	r5, r0
 80120a4:	b188      	cbz	r0, 80120ca <rcutils_strndup+0x32>
 80120a6:	1c4f      	adds	r7, r1, #1
 80120a8:	460e      	mov	r6, r1
 80120aa:	4638      	mov	r0, r7
 80120ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80120ae:	4790      	blx	r2
 80120b0:	4604      	mov	r4, r0
 80120b2:	b128      	cbz	r0, 80120c0 <rcutils_strndup+0x28>
 80120b4:	463a      	mov	r2, r7
 80120b6:	4629      	mov	r1, r5
 80120b8:	f004 fb73 	bl	80167a2 <memcpy>
 80120bc:	2300      	movs	r3, #0
 80120be:	55a3      	strb	r3, [r4, r6]
 80120c0:	4620      	mov	r0, r4
 80120c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120c6:	b002      	add	sp, #8
 80120c8:	4770      	bx	lr
 80120ca:	4604      	mov	r4, r0
 80120cc:	e7f8      	b.n	80120c0 <rcutils_strndup+0x28>
 80120ce:	bf00      	nop

080120d0 <rcutils_get_zero_initialized_string_map>:
 80120d0:	4b01      	ldr	r3, [pc, #4]	@ (80120d8 <rcutils_get_zero_initialized_string_map+0x8>)
 80120d2:	2000      	movs	r0, #0
 80120d4:	6018      	str	r0, [r3, #0]
 80120d6:	4770      	bx	lr
 80120d8:	2000dd98 	.word	0x2000dd98

080120dc <rcutils_string_map_reserve>:
 80120dc:	2800      	cmp	r0, #0
 80120de:	d05f      	beq.n	80121a0 <rcutils_string_map_reserve+0xc4>
 80120e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e4:	460c      	mov	r4, r1
 80120e6:	6801      	ldr	r1, [r0, #0]
 80120e8:	b082      	sub	sp, #8
 80120ea:	4605      	mov	r5, r0
 80120ec:	b129      	cbz	r1, 80120fa <rcutils_string_map_reserve+0x1e>
 80120ee:	68cb      	ldr	r3, [r1, #12]
 80120f0:	42a3      	cmp	r3, r4
 80120f2:	d906      	bls.n	8012102 <rcutils_string_map_reserve+0x26>
 80120f4:	461c      	mov	r4, r3
 80120f6:	2900      	cmp	r1, #0
 80120f8:	d1f9      	bne.n	80120ee <rcutils_string_map_reserve+0x12>
 80120fa:	201f      	movs	r0, #31
 80120fc:	b002      	add	sp, #8
 80120fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012102:	688b      	ldr	r3, [r1, #8]
 8012104:	42a3      	cmp	r3, r4
 8012106:	d047      	beq.n	8012198 <rcutils_string_map_reserve+0xbc>
 8012108:	6a0e      	ldr	r6, [r1, #32]
 801210a:	2c00      	cmp	r4, #0
 801210c:	d034      	beq.n	8012178 <rcutils_string_map_reserve+0x9c>
 801210e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012112:	d243      	bcs.n	801219c <rcutils_string_map_reserve+0xc0>
 8012114:	00a7      	lsls	r7, r4, #2
 8012116:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801211a:	6808      	ldr	r0, [r1, #0]
 801211c:	4632      	mov	r2, r6
 801211e:	4639      	mov	r1, r7
 8012120:	47c0      	blx	r8
 8012122:	2800      	cmp	r0, #0
 8012124:	d03a      	beq.n	801219c <rcutils_string_map_reserve+0xc0>
 8012126:	682b      	ldr	r3, [r5, #0]
 8012128:	4632      	mov	r2, r6
 801212a:	6018      	str	r0, [r3, #0]
 801212c:	4639      	mov	r1, r7
 801212e:	6858      	ldr	r0, [r3, #4]
 8012130:	47c0      	blx	r8
 8012132:	2800      	cmp	r0, #0
 8012134:	d032      	beq.n	801219c <rcutils_string_map_reserve+0xc0>
 8012136:	682d      	ldr	r5, [r5, #0]
 8012138:	68ab      	ldr	r3, [r5, #8]
 801213a:	6068      	str	r0, [r5, #4]
 801213c:	42a3      	cmp	r3, r4
 801213e:	d226      	bcs.n	801218e <rcutils_string_map_reserve+0xb2>
 8012140:	682a      	ldr	r2, [r5, #0]
 8012142:	eb00 0c07 	add.w	ip, r0, r7
 8012146:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801214a:	45e6      	cmp	lr, ip
 801214c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012150:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012154:	d203      	bcs.n	801215e <rcutils_string_map_reserve+0x82>
 8012156:	eb02 0c07 	add.w	ip, r2, r7
 801215a:	4566      	cmp	r6, ip
 801215c:	d322      	bcc.n	80121a4 <rcutils_string_map_reserve+0xc8>
 801215e:	1ae3      	subs	r3, r4, r3
 8012160:	009a      	lsls	r2, r3, #2
 8012162:	4670      	mov	r0, lr
 8012164:	2100      	movs	r1, #0
 8012166:	9201      	str	r2, [sp, #4]
 8012168:	f004 fa52 	bl	8016610 <memset>
 801216c:	9a01      	ldr	r2, [sp, #4]
 801216e:	2100      	movs	r1, #0
 8012170:	4630      	mov	r0, r6
 8012172:	f004 fa4d 	bl	8016610 <memset>
 8012176:	e00a      	b.n	801218e <rcutils_string_map_reserve+0xb2>
 8012178:	694f      	ldr	r7, [r1, #20]
 801217a:	6808      	ldr	r0, [r1, #0]
 801217c:	4631      	mov	r1, r6
 801217e:	47b8      	blx	r7
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	4631      	mov	r1, r6
 8012184:	6858      	ldr	r0, [r3, #4]
 8012186:	601c      	str	r4, [r3, #0]
 8012188:	47b8      	blx	r7
 801218a:	682d      	ldr	r5, [r5, #0]
 801218c:	606c      	str	r4, [r5, #4]
 801218e:	2000      	movs	r0, #0
 8012190:	60ac      	str	r4, [r5, #8]
 8012192:	b002      	add	sp, #8
 8012194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012198:	2000      	movs	r0, #0
 801219a:	e7af      	b.n	80120fc <rcutils_string_map_reserve+0x20>
 801219c:	200a      	movs	r0, #10
 801219e:	e7ad      	b.n	80120fc <rcutils_string_map_reserve+0x20>
 80121a0:	200b      	movs	r0, #11
 80121a2:	4770      	bx	lr
 80121a4:	1f0b      	subs	r3, r1, #4
 80121a6:	4418      	add	r0, r3
 80121a8:	4413      	add	r3, r2
 80121aa:	3a04      	subs	r2, #4
 80121ac:	4417      	add	r7, r2
 80121ae:	2200      	movs	r2, #0
 80121b0:	f843 2f04 	str.w	r2, [r3, #4]!
 80121b4:	42bb      	cmp	r3, r7
 80121b6:	f840 2f04 	str.w	r2, [r0, #4]!
 80121ba:	d1f9      	bne.n	80121b0 <rcutils_string_map_reserve+0xd4>
 80121bc:	e7e7      	b.n	801218e <rcutils_string_map_reserve+0xb2>
 80121be:	bf00      	nop

080121c0 <rcutils_string_map_init>:
 80121c0:	b082      	sub	sp, #8
 80121c2:	b570      	push	{r4, r5, r6, lr}
 80121c4:	ac04      	add	r4, sp, #16
 80121c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80121ca:	b380      	cbz	r0, 801222e <rcutils_string_map_init+0x6e>
 80121cc:	6806      	ldr	r6, [r0, #0]
 80121ce:	4604      	mov	r4, r0
 80121d0:	b12e      	cbz	r6, 80121de <rcutils_string_map_init+0x1e>
 80121d2:	251e      	movs	r5, #30
 80121d4:	4628      	mov	r0, r5
 80121d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121da:	b002      	add	sp, #8
 80121dc:	4770      	bx	lr
 80121de:	a804      	add	r0, sp, #16
 80121e0:	460d      	mov	r5, r1
 80121e2:	f7f8 fa43 	bl	800a66c <rcutils_allocator_is_valid>
 80121e6:	b310      	cbz	r0, 801222e <rcutils_string_map_init+0x6e>
 80121e8:	9b04      	ldr	r3, [sp, #16]
 80121ea:	9908      	ldr	r1, [sp, #32]
 80121ec:	2024      	movs	r0, #36	@ 0x24
 80121ee:	4798      	blx	r3
 80121f0:	6020      	str	r0, [r4, #0]
 80121f2:	b310      	cbz	r0, 801223a <rcutils_string_map_init+0x7a>
 80121f4:	f10d 0e10 	add.w	lr, sp, #16
 80121f8:	e9c0 6600 	strd	r6, r6, [r0]
 80121fc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012200:	f100 0c10 	add.w	ip, r0, #16
 8012204:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801220c:	f8de 3000 	ldr.w	r3, [lr]
 8012210:	f8cc 3000 	str.w	r3, [ip]
 8012214:	4629      	mov	r1, r5
 8012216:	4620      	mov	r0, r4
 8012218:	f7ff ff60 	bl	80120dc <rcutils_string_map_reserve>
 801221c:	4605      	mov	r5, r0
 801221e:	2800      	cmp	r0, #0
 8012220:	d0d8      	beq.n	80121d4 <rcutils_string_map_init+0x14>
 8012222:	9b05      	ldr	r3, [sp, #20]
 8012224:	9908      	ldr	r1, [sp, #32]
 8012226:	6820      	ldr	r0, [r4, #0]
 8012228:	4798      	blx	r3
 801222a:	6026      	str	r6, [r4, #0]
 801222c:	e7d2      	b.n	80121d4 <rcutils_string_map_init+0x14>
 801222e:	250b      	movs	r5, #11
 8012230:	4628      	mov	r0, r5
 8012232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012236:	b002      	add	sp, #8
 8012238:	4770      	bx	lr
 801223a:	250a      	movs	r5, #10
 801223c:	e7ca      	b.n	80121d4 <rcutils_string_map_init+0x14>
 801223e:	bf00      	nop

08012240 <rcutils_string_map_fini>:
 8012240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012244:	b082      	sub	sp, #8
 8012246:	2800      	cmp	r0, #0
 8012248:	d03a      	beq.n	80122c0 <rcutils_string_map_fini+0x80>
 801224a:	6804      	ldr	r4, [r0, #0]
 801224c:	4606      	mov	r6, r0
 801224e:	2c00      	cmp	r4, #0
 8012250:	d032      	beq.n	80122b8 <rcutils_string_map_fini+0x78>
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	b32b      	cbz	r3, 80122a2 <rcutils_string_map_fini+0x62>
 8012256:	2500      	movs	r5, #0
 8012258:	6822      	ldr	r2, [r4, #0]
 801225a:	462f      	mov	r7, r5
 801225c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012260:	b1e0      	cbz	r0, 801229c <rcutils_string_map_fini+0x5c>
 8012262:	6a21      	ldr	r1, [r4, #32]
 8012264:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012268:	9101      	str	r1, [sp, #4]
 801226a:	47c0      	blx	r8
 801226c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012270:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012274:	9901      	ldr	r1, [sp, #4]
 8012276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801227a:	47c0      	blx	r8
 801227c:	68e3      	ldr	r3, [r4, #12]
 801227e:	6862      	ldr	r2, [r4, #4]
 8012280:	3b01      	subs	r3, #1
 8012282:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012286:	60e3      	str	r3, [r4, #12]
 8012288:	6834      	ldr	r4, [r6, #0]
 801228a:	68a3      	ldr	r3, [r4, #8]
 801228c:	3501      	adds	r5, #1
 801228e:	429d      	cmp	r5, r3
 8012290:	d207      	bcs.n	80122a2 <rcutils_string_map_fini+0x62>
 8012292:	6822      	ldr	r2, [r4, #0]
 8012294:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012298:	2800      	cmp	r0, #0
 801229a:	d1e2      	bne.n	8012262 <rcutils_string_map_fini+0x22>
 801229c:	3501      	adds	r5, #1
 801229e:	429d      	cmp	r5, r3
 80122a0:	d3dc      	bcc.n	801225c <rcutils_string_map_fini+0x1c>
 80122a2:	2100      	movs	r1, #0
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7ff ff19 	bl	80120dc <rcutils_string_map_reserve>
 80122aa:	4604      	mov	r4, r0
 80122ac:	b920      	cbnz	r0, 80122b8 <rcutils_string_map_fini+0x78>
 80122ae:	6830      	ldr	r0, [r6, #0]
 80122b0:	6943      	ldr	r3, [r0, #20]
 80122b2:	6a01      	ldr	r1, [r0, #32]
 80122b4:	4798      	blx	r3
 80122b6:	6034      	str	r4, [r6, #0]
 80122b8:	4620      	mov	r0, r4
 80122ba:	b002      	add	sp, #8
 80122bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122c0:	240b      	movs	r4, #11
 80122c2:	4620      	mov	r0, r4
 80122c4:	b002      	add	sp, #8
 80122c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ca:	bf00      	nop

080122cc <rcutils_string_map_getn>:
 80122cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d0:	b300      	cbz	r0, 8012314 <rcutils_string_map_getn+0x48>
 80122d2:	6807      	ldr	r7, [r0, #0]
 80122d4:	b1ff      	cbz	r7, 8012316 <rcutils_string_map_getn+0x4a>
 80122d6:	4688      	mov	r8, r1
 80122d8:	b1e1      	cbz	r1, 8012314 <rcutils_string_map_getn+0x48>
 80122da:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80122de:	683e      	ldr	r6, [r7, #0]
 80122e0:	f1ba 0f00 	cmp.w	sl, #0
 80122e4:	d016      	beq.n	8012314 <rcutils_string_map_getn+0x48>
 80122e6:	4691      	mov	r9, r2
 80122e8:	3e04      	subs	r6, #4
 80122ea:	2400      	movs	r4, #0
 80122ec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80122f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80122f4:	4628      	mov	r0, r5
 80122f6:	3401      	adds	r4, #1
 80122f8:	b155      	cbz	r5, 8012310 <rcutils_string_map_getn+0x44>
 80122fa:	f7ed ff7b 	bl	80001f4 <strlen>
 80122fe:	4548      	cmp	r0, r9
 8012300:	4602      	mov	r2, r0
 8012302:	4629      	mov	r1, r5
 8012304:	bf38      	it	cc
 8012306:	464a      	movcc	r2, r9
 8012308:	4640      	mov	r0, r8
 801230a:	f004 f996 	bl	801663a <strncmp>
 801230e:	b128      	cbz	r0, 801231c <rcutils_string_map_getn+0x50>
 8012310:	45a2      	cmp	sl, r4
 8012312:	d1eb      	bne.n	80122ec <rcutils_string_map_getn+0x20>
 8012314:	2700      	movs	r7, #0
 8012316:	4638      	mov	r0, r7
 8012318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f853 700b 	ldr.w	r7, [r3, fp]
 8012322:	4638      	mov	r0, r7
 8012324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012328 <rmw_get_zero_initialized_context>:
 8012328:	b510      	push	{r4, lr}
 801232a:	4604      	mov	r4, r0
 801232c:	3010      	adds	r0, #16
 801232e:	f000 f80b 	bl	8012348 <rmw_get_zero_initialized_init_options>
 8012332:	2300      	movs	r3, #0
 8012334:	2000      	movs	r0, #0
 8012336:	2100      	movs	r1, #0
 8012338:	e9c4 0100 	strd	r0, r1, [r4]
 801233c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012340:	60a3      	str	r3, [r4, #8]
 8012342:	4620      	mov	r0, r4
 8012344:	bd10      	pop	{r4, pc}
 8012346:	bf00      	nop

08012348 <rmw_get_zero_initialized_init_options>:
 8012348:	b510      	push	{r4, lr}
 801234a:	2238      	movs	r2, #56	@ 0x38
 801234c:	4604      	mov	r4, r0
 801234e:	2100      	movs	r1, #0
 8012350:	f004 f95e 	bl	8016610 <memset>
 8012354:	f104 0010 	add.w	r0, r4, #16
 8012358:	f000 f806 	bl	8012368 <rmw_get_default_security_options>
 801235c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012360:	60e3      	str	r3, [r4, #12]
 8012362:	4620      	mov	r0, r4
 8012364:	bd10      	pop	{r4, pc}
 8012366:	bf00      	nop

08012368 <rmw_get_default_security_options>:
 8012368:	2200      	movs	r2, #0
 801236a:	7002      	strb	r2, [r0, #0]
 801236c:	6042      	str	r2, [r0, #4]
 801236e:	4770      	bx	lr

08012370 <rmw_subscription_content_filter_options_fini>:
 8012370:	b1b0      	cbz	r0, 80123a0 <rmw_subscription_content_filter_options_fini+0x30>
 8012372:	b538      	push	{r3, r4, r5, lr}
 8012374:	4604      	mov	r4, r0
 8012376:	4608      	mov	r0, r1
 8012378:	460d      	mov	r5, r1
 801237a:	f7f8 f977 	bl	800a66c <rcutils_allocator_is_valid>
 801237e:	b168      	cbz	r0, 801239c <rmw_subscription_content_filter_options_fini+0x2c>
 8012380:	6820      	ldr	r0, [r4, #0]
 8012382:	b120      	cbz	r0, 801238e <rmw_subscription_content_filter_options_fini+0x1e>
 8012384:	686b      	ldr	r3, [r5, #4]
 8012386:	6929      	ldr	r1, [r5, #16]
 8012388:	4798      	blx	r3
 801238a:	2300      	movs	r3, #0
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	1d20      	adds	r0, r4, #4
 8012390:	f003 fc2e 	bl	8015bf0 <rcutils_string_array_fini>
 8012394:	3800      	subs	r0, #0
 8012396:	bf18      	it	ne
 8012398:	2001      	movne	r0, #1
 801239a:	bd38      	pop	{r3, r4, r5, pc}
 801239c:	200b      	movs	r0, #11
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	200b      	movs	r0, #11
 80123a2:	4770      	bx	lr

080123a4 <rmw_get_default_subscription_options>:
 80123a4:	2200      	movs	r2, #0
 80123a6:	e9c0 2200 	strd	r2, r2, [r0]
 80123aa:	6082      	str	r2, [r0, #8]
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop

080123b0 <rmw_time_equal>:
 80123b0:	b4f0      	push	{r4, r5, r6, r7}
 80123b2:	b084      	sub	sp, #16
 80123b4:	ac04      	add	r4, sp, #16
 80123b6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80123ba:	4603      	mov	r3, r0
 80123bc:	4924      	ldr	r1, [pc, #144]	@ (8012450 <rmw_time_equal+0xa0>)
 80123be:	9e03      	ldr	r6, [sp, #12]
 80123c0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80123c4:	2202      	movs	r2, #2
 80123c6:	4299      	cmp	r1, r3
 80123c8:	41aa      	sbcs	r2, r5
 80123ca:	d330      	bcc.n	801242e <rmw_time_equal+0x7e>
 80123cc:	4c21      	ldr	r4, [pc, #132]	@ (8012454 <rmw_time_equal+0xa4>)
 80123ce:	fba3 3204 	umull	r3, r2, r3, r4
 80123d2:	fb04 2205 	mla	r2, r4, r5, r2
 80123d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80123da:	43dd      	mvns	r5, r3
 80123dc:	1a8c      	subs	r4, r1, r2
 80123de:	4285      	cmp	r5, r0
 80123e0:	41b4      	sbcs	r4, r6
 80123e2:	d332      	bcc.n	801244a <rmw_time_equal+0x9a>
 80123e4:	eb10 0c03 	adds.w	ip, r0, r3
 80123e8:	eb42 0106 	adc.w	r1, r2, r6
 80123ec:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80123f0:	4817      	ldr	r0, [pc, #92]	@ (8012450 <rmw_time_equal+0xa0>)
 80123f2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80123f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80123f6:	2202      	movs	r2, #2
 80123f8:	4298      	cmp	r0, r3
 80123fa:	41b2      	sbcs	r2, r6
 80123fc:	d31c      	bcc.n	8012438 <rmw_time_equal+0x88>
 80123fe:	4c15      	ldr	r4, [pc, #84]	@ (8012454 <rmw_time_equal+0xa4>)
 8012400:	fba3 3204 	umull	r3, r2, r3, r4
 8012404:	fb04 2206 	mla	r2, r4, r6, r2
 8012408:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801240c:	43de      	mvns	r6, r3
 801240e:	1a84      	subs	r4, r0, r2
 8012410:	42ae      	cmp	r6, r5
 8012412:	41bc      	sbcs	r4, r7
 8012414:	d315      	bcc.n	8012442 <rmw_time_equal+0x92>
 8012416:	195b      	adds	r3, r3, r5
 8012418:	eb42 0207 	adc.w	r2, r2, r7
 801241c:	428a      	cmp	r2, r1
 801241e:	bf08      	it	eq
 8012420:	4563      	cmpeq	r3, ip
 8012422:	bf0c      	ite	eq
 8012424:	2001      	moveq	r0, #1
 8012426:	2000      	movne	r0, #0
 8012428:	b004      	add	sp, #16
 801242a:	bcf0      	pop	{r4, r5, r6, r7}
 801242c:	4770      	bx	lr
 801242e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012432:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012436:	e7d9      	b.n	80123ec <rmw_time_equal+0x3c>
 8012438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801243c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012440:	e7ec      	b.n	801241c <rmw_time_equal+0x6c>
 8012442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012446:	4602      	mov	r2, r0
 8012448:	e7e8      	b.n	801241c <rmw_time_equal+0x6c>
 801244a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801244e:	e7cd      	b.n	80123ec <rmw_time_equal+0x3c>
 8012450:	25c17d04 	.word	0x25c17d04
 8012454:	3b9aca00 	.word	0x3b9aca00

08012458 <rmw_time_total_nsec>:
 8012458:	b470      	push	{r4, r5, r6}
 801245a:	b085      	sub	sp, #20
 801245c:	ac04      	add	r4, sp, #16
 801245e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012462:	4603      	mov	r3, r0
 8012464:	4912      	ldr	r1, [pc, #72]	@ (80124b0 <rmw_time_total_nsec+0x58>)
 8012466:	9e03      	ldr	r6, [sp, #12]
 8012468:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801246c:	2202      	movs	r2, #2
 801246e:	4299      	cmp	r1, r3
 8012470:	41aa      	sbcs	r2, r5
 8012472:	d311      	bcc.n	8012498 <rmw_time_total_nsec+0x40>
 8012474:	4c0f      	ldr	r4, [pc, #60]	@ (80124b4 <rmw_time_total_nsec+0x5c>)
 8012476:	fba3 3204 	umull	r3, r2, r3, r4
 801247a:	fb04 2205 	mla	r2, r4, r5, r2
 801247e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012482:	43dd      	mvns	r5, r3
 8012484:	1a8c      	subs	r4, r1, r2
 8012486:	4285      	cmp	r5, r0
 8012488:	41b4      	sbcs	r4, r6
 801248a:	d30c      	bcc.n	80124a6 <rmw_time_total_nsec+0x4e>
 801248c:	1818      	adds	r0, r3, r0
 801248e:	eb42 0106 	adc.w	r1, r2, r6
 8012492:	b005      	add	sp, #20
 8012494:	bc70      	pop	{r4, r5, r6}
 8012496:	4770      	bx	lr
 8012498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801249c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80124a0:	b005      	add	sp, #20
 80124a2:	bc70      	pop	{r4, r5, r6}
 80124a4:	4770      	bx	lr
 80124a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124aa:	b005      	add	sp, #20
 80124ac:	bc70      	pop	{r4, r5, r6}
 80124ae:	4770      	bx	lr
 80124b0:	25c17d04 	.word	0x25c17d04
 80124b4:	3b9aca00 	.word	0x3b9aca00

080124b8 <rmw_get_zero_initialized_message_info>:
 80124b8:	b510      	push	{r4, lr}
 80124ba:	2240      	movs	r2, #64	@ 0x40
 80124bc:	4604      	mov	r4, r0
 80124be:	2100      	movs	r1, #0
 80124c0:	f004 f8a6 	bl	8016610 <memset>
 80124c4:	4620      	mov	r0, r4
 80124c6:	bd10      	pop	{r4, pc}

080124c8 <rmw_validate_full_topic_name>:
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d057      	beq.n	801257c <rmw_validate_full_topic_name+0xb4>
 80124cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	460d      	mov	r5, r1
 80124d2:	2900      	cmp	r1, #0
 80124d4:	d054      	beq.n	8012580 <rmw_validate_full_topic_name+0xb8>
 80124d6:	4616      	mov	r6, r2
 80124d8:	4604      	mov	r4, r0
 80124da:	f7ed fe8b 	bl	80001f4 <strlen>
 80124de:	b148      	cbz	r0, 80124f4 <rmw_validate_full_topic_name+0x2c>
 80124e0:	7823      	ldrb	r3, [r4, #0]
 80124e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80124e4:	d00d      	beq.n	8012502 <rmw_validate_full_topic_name+0x3a>
 80124e6:	2302      	movs	r3, #2
 80124e8:	602b      	str	r3, [r5, #0]
 80124ea:	b13e      	cbz	r6, 80124fc <rmw_validate_full_topic_name+0x34>
 80124ec:	2000      	movs	r0, #0
 80124ee:	6030      	str	r0, [r6, #0]
 80124f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f4:	2301      	movs	r3, #1
 80124f6:	602b      	str	r3, [r5, #0]
 80124f8:	2e00      	cmp	r6, #0
 80124fa:	d1f7      	bne.n	80124ec <rmw_validate_full_topic_name+0x24>
 80124fc:	2000      	movs	r0, #0
 80124fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012502:	1e43      	subs	r3, r0, #1
 8012504:	5ce2      	ldrb	r2, [r4, r3]
 8012506:	2a2f      	cmp	r2, #47	@ 0x2f
 8012508:	d03c      	beq.n	8012584 <rmw_validate_full_topic_name+0xbc>
 801250a:	1e63      	subs	r3, r4, #1
 801250c:	eb03 0800 	add.w	r8, r3, r0
 8012510:	f1c4 0e01 	rsb	lr, r4, #1
 8012514:	eb0e 0703 	add.w	r7, lr, r3
 8012518:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801251c:	f021 0220 	bic.w	r2, r1, #32
 8012520:	3a41      	subs	r2, #65	@ 0x41
 8012522:	2a19      	cmp	r2, #25
 8012524:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012528:	d90b      	bls.n	8012542 <rmw_validate_full_topic_name+0x7a>
 801252a:	295f      	cmp	r1, #95	@ 0x5f
 801252c:	d009      	beq.n	8012542 <rmw_validate_full_topic_name+0x7a>
 801252e:	f1bc 0f0a 	cmp.w	ip, #10
 8012532:	d906      	bls.n	8012542 <rmw_validate_full_topic_name+0x7a>
 8012534:	2304      	movs	r3, #4
 8012536:	602b      	str	r3, [r5, #0]
 8012538:	2e00      	cmp	r6, #0
 801253a:	d0df      	beq.n	80124fc <rmw_validate_full_topic_name+0x34>
 801253c:	6037      	str	r7, [r6, #0]
 801253e:	2000      	movs	r0, #0
 8012540:	e7d6      	b.n	80124f0 <rmw_validate_full_topic_name+0x28>
 8012542:	4543      	cmp	r3, r8
 8012544:	d1e6      	bne.n	8012514 <rmw_validate_full_topic_name+0x4c>
 8012546:	4f1a      	ldr	r7, [pc, #104]	@ (80125b0 <rmw_validate_full_topic_name+0xe8>)
 8012548:	2301      	movs	r3, #1
 801254a:	e004      	b.n	8012556 <rmw_validate_full_topic_name+0x8e>
 801254c:	4298      	cmp	r0, r3
 801254e:	f104 0401 	add.w	r4, r4, #1
 8012552:	d91c      	bls.n	801258e <rmw_validate_full_topic_name+0xc6>
 8012554:	4613      	mov	r3, r2
 8012556:	4298      	cmp	r0, r3
 8012558:	f103 0201 	add.w	r2, r3, #1
 801255c:	d0f6      	beq.n	801254c <rmw_validate_full_topic_name+0x84>
 801255e:	7821      	ldrb	r1, [r4, #0]
 8012560:	292f      	cmp	r1, #47	@ 0x2f
 8012562:	d1f3      	bne.n	801254c <rmw_validate_full_topic_name+0x84>
 8012564:	7861      	ldrb	r1, [r4, #1]
 8012566:	292f      	cmp	r1, #47	@ 0x2f
 8012568:	d01c      	beq.n	80125a4 <rmw_validate_full_topic_name+0xdc>
 801256a:	5dc9      	ldrb	r1, [r1, r7]
 801256c:	0749      	lsls	r1, r1, #29
 801256e:	d5ed      	bpl.n	801254c <rmw_validate_full_topic_name+0x84>
 8012570:	2206      	movs	r2, #6
 8012572:	602a      	str	r2, [r5, #0]
 8012574:	2e00      	cmp	r6, #0
 8012576:	d0c1      	beq.n	80124fc <rmw_validate_full_topic_name+0x34>
 8012578:	6033      	str	r3, [r6, #0]
 801257a:	e7bf      	b.n	80124fc <rmw_validate_full_topic_name+0x34>
 801257c:	200b      	movs	r0, #11
 801257e:	4770      	bx	lr
 8012580:	200b      	movs	r0, #11
 8012582:	e7b5      	b.n	80124f0 <rmw_validate_full_topic_name+0x28>
 8012584:	2203      	movs	r2, #3
 8012586:	602a      	str	r2, [r5, #0]
 8012588:	2e00      	cmp	r6, #0
 801258a:	d1f5      	bne.n	8012578 <rmw_validate_full_topic_name+0xb0>
 801258c:	e7b6      	b.n	80124fc <rmw_validate_full_topic_name+0x34>
 801258e:	28f7      	cmp	r0, #247	@ 0xf7
 8012590:	d802      	bhi.n	8012598 <rmw_validate_full_topic_name+0xd0>
 8012592:	2000      	movs	r0, #0
 8012594:	6028      	str	r0, [r5, #0]
 8012596:	e7ab      	b.n	80124f0 <rmw_validate_full_topic_name+0x28>
 8012598:	2307      	movs	r3, #7
 801259a:	602b      	str	r3, [r5, #0]
 801259c:	2e00      	cmp	r6, #0
 801259e:	d0ad      	beq.n	80124fc <rmw_validate_full_topic_name+0x34>
 80125a0:	23f6      	movs	r3, #246	@ 0xf6
 80125a2:	e7e9      	b.n	8012578 <rmw_validate_full_topic_name+0xb0>
 80125a4:	2205      	movs	r2, #5
 80125a6:	602a      	str	r2, [r5, #0]
 80125a8:	2e00      	cmp	r6, #0
 80125aa:	d1e5      	bne.n	8012578 <rmw_validate_full_topic_name+0xb0>
 80125ac:	e7a6      	b.n	80124fc <rmw_validate_full_topic_name+0x34>
 80125ae:	bf00      	nop
 80125b0:	08018244 	.word	0x08018244

080125b4 <rmw_validate_namespace_with_size>:
 80125b4:	b340      	cbz	r0, 8012608 <rmw_validate_namespace_with_size+0x54>
 80125b6:	b570      	push	{r4, r5, r6, lr}
 80125b8:	4614      	mov	r4, r2
 80125ba:	b0c2      	sub	sp, #264	@ 0x108
 80125bc:	b332      	cbz	r2, 801260c <rmw_validate_namespace_with_size+0x58>
 80125be:	2901      	cmp	r1, #1
 80125c0:	460d      	mov	r5, r1
 80125c2:	461e      	mov	r6, r3
 80125c4:	d102      	bne.n	80125cc <rmw_validate_namespace_with_size+0x18>
 80125c6:	7803      	ldrb	r3, [r0, #0]
 80125c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80125ca:	d012      	beq.n	80125f2 <rmw_validate_namespace_with_size+0x3e>
 80125cc:	aa01      	add	r2, sp, #4
 80125ce:	4669      	mov	r1, sp
 80125d0:	f7ff ff7a 	bl	80124c8 <rmw_validate_full_topic_name>
 80125d4:	b978      	cbnz	r0, 80125f6 <rmw_validate_namespace_with_size+0x42>
 80125d6:	9b00      	ldr	r3, [sp, #0]
 80125d8:	b14b      	cbz	r3, 80125ee <rmw_validate_namespace_with_size+0x3a>
 80125da:	2b07      	cmp	r3, #7
 80125dc:	d007      	beq.n	80125ee <rmw_validate_namespace_with_size+0x3a>
 80125de:	1e5a      	subs	r2, r3, #1
 80125e0:	2a05      	cmp	r2, #5
 80125e2:	d82b      	bhi.n	801263c <rmw_validate_namespace_with_size+0x88>
 80125e4:	e8df f002 	tbb	[pc, r2]
 80125e8:	1e212427 	.word	0x1e212427
 80125ec:	141b      	.short	0x141b
 80125ee:	2df5      	cmp	r5, #245	@ 0xf5
 80125f0:	d803      	bhi.n	80125fa <rmw_validate_namespace_with_size+0x46>
 80125f2:	2000      	movs	r0, #0
 80125f4:	6020      	str	r0, [r4, #0]
 80125f6:	b042      	add	sp, #264	@ 0x108
 80125f8:	bd70      	pop	{r4, r5, r6, pc}
 80125fa:	2307      	movs	r3, #7
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	2e00      	cmp	r6, #0
 8012600:	d0f9      	beq.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 8012602:	23f4      	movs	r3, #244	@ 0xf4
 8012604:	6033      	str	r3, [r6, #0]
 8012606:	e7f6      	b.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 8012608:	200b      	movs	r0, #11
 801260a:	4770      	bx	lr
 801260c:	200b      	movs	r0, #11
 801260e:	e7f2      	b.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 8012610:	2306      	movs	r3, #6
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	2e00      	cmp	r6, #0
 8012616:	d0ee      	beq.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 8012618:	9b01      	ldr	r3, [sp, #4]
 801261a:	6033      	str	r3, [r6, #0]
 801261c:	e7eb      	b.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 801261e:	2305      	movs	r3, #5
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	e7f7      	b.n	8012614 <rmw_validate_namespace_with_size+0x60>
 8012624:	2304      	movs	r3, #4
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	e7f4      	b.n	8012614 <rmw_validate_namespace_with_size+0x60>
 801262a:	2303      	movs	r3, #3
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	e7f1      	b.n	8012614 <rmw_validate_namespace_with_size+0x60>
 8012630:	2302      	movs	r3, #2
 8012632:	6023      	str	r3, [r4, #0]
 8012634:	e7ee      	b.n	8012614 <rmw_validate_namespace_with_size+0x60>
 8012636:	2301      	movs	r3, #1
 8012638:	6023      	str	r3, [r4, #0]
 801263a:	e7eb      	b.n	8012614 <rmw_validate_namespace_with_size+0x60>
 801263c:	4a03      	ldr	r2, [pc, #12]	@ (801264c <rmw_validate_namespace_with_size+0x98>)
 801263e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012642:	a802      	add	r0, sp, #8
 8012644:	f7ff fcda 	bl	8011ffc <rcutils_snprintf>
 8012648:	2001      	movs	r0, #1
 801264a:	e7d4      	b.n	80125f6 <rmw_validate_namespace_with_size+0x42>
 801264c:	08017c4c 	.word	0x08017c4c

08012650 <rmw_validate_namespace>:
 8012650:	b168      	cbz	r0, 801266e <rmw_validate_namespace+0x1e>
 8012652:	b570      	push	{r4, r5, r6, lr}
 8012654:	460d      	mov	r5, r1
 8012656:	4616      	mov	r6, r2
 8012658:	4604      	mov	r4, r0
 801265a:	f7ed fdcb 	bl	80001f4 <strlen>
 801265e:	4633      	mov	r3, r6
 8012660:	4601      	mov	r1, r0
 8012662:	462a      	mov	r2, r5
 8012664:	4620      	mov	r0, r4
 8012666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801266a:	f7ff bfa3 	b.w	80125b4 <rmw_validate_namespace_with_size>
 801266e:	200b      	movs	r0, #11
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop

08012674 <rmw_namespace_validation_result_string>:
 8012674:	2807      	cmp	r0, #7
 8012676:	bf9a      	itte	ls
 8012678:	4b02      	ldrls	r3, [pc, #8]	@ (8012684 <rmw_namespace_validation_result_string+0x10>)
 801267a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801267e:	4802      	ldrhi	r0, [pc, #8]	@ (8012688 <rmw_namespace_validation_result_string+0x14>)
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	08017e44 	.word	0x08017e44
 8012688:	08017c9c 	.word	0x08017c9c

0801268c <rmw_validate_node_name>:
 801268c:	2800      	cmp	r0, #0
 801268e:	d03b      	beq.n	8012708 <rmw_validate_node_name+0x7c>
 8012690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012694:	460d      	mov	r5, r1
 8012696:	2900      	cmp	r1, #0
 8012698:	d038      	beq.n	801270c <rmw_validate_node_name+0x80>
 801269a:	4616      	mov	r6, r2
 801269c:	4604      	mov	r4, r0
 801269e:	f7ed fda9 	bl	80001f4 <strlen>
 80126a2:	b1e0      	cbz	r0, 80126de <rmw_validate_node_name+0x52>
 80126a4:	1e63      	subs	r3, r4, #1
 80126a6:	eb03 0800 	add.w	r8, r3, r0
 80126aa:	f1c4 0101 	rsb	r1, r4, #1
 80126ae:	18cf      	adds	r7, r1, r3
 80126b0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80126b4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80126b8:	f02e 0c20 	bic.w	ip, lr, #32
 80126bc:	2a09      	cmp	r2, #9
 80126be:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80126c2:	d914      	bls.n	80126ee <rmw_validate_node_name+0x62>
 80126c4:	f1bc 0f19 	cmp.w	ip, #25
 80126c8:	d911      	bls.n	80126ee <rmw_validate_node_name+0x62>
 80126ca:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80126ce:	d00e      	beq.n	80126ee <rmw_validate_node_name+0x62>
 80126d0:	2302      	movs	r3, #2
 80126d2:	602b      	str	r3, [r5, #0]
 80126d4:	b106      	cbz	r6, 80126d8 <rmw_validate_node_name+0x4c>
 80126d6:	6037      	str	r7, [r6, #0]
 80126d8:	2000      	movs	r0, #0
 80126da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126de:	2301      	movs	r3, #1
 80126e0:	602b      	str	r3, [r5, #0]
 80126e2:	2e00      	cmp	r6, #0
 80126e4:	d0f8      	beq.n	80126d8 <rmw_validate_node_name+0x4c>
 80126e6:	2000      	movs	r0, #0
 80126e8:	6030      	str	r0, [r6, #0]
 80126ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ee:	4543      	cmp	r3, r8
 80126f0:	d1dd      	bne.n	80126ae <rmw_validate_node_name+0x22>
 80126f2:	7822      	ldrb	r2, [r4, #0]
 80126f4:	4b0d      	ldr	r3, [pc, #52]	@ (801272c <rmw_validate_node_name+0xa0>)
 80126f6:	5cd3      	ldrb	r3, [r2, r3]
 80126f8:	f013 0304 	ands.w	r3, r3, #4
 80126fc:	d110      	bne.n	8012720 <rmw_validate_node_name+0x94>
 80126fe:	28ff      	cmp	r0, #255	@ 0xff
 8012700:	d806      	bhi.n	8012710 <rmw_validate_node_name+0x84>
 8012702:	602b      	str	r3, [r5, #0]
 8012704:	4618      	mov	r0, r3
 8012706:	e7e8      	b.n	80126da <rmw_validate_node_name+0x4e>
 8012708:	200b      	movs	r0, #11
 801270a:	4770      	bx	lr
 801270c:	200b      	movs	r0, #11
 801270e:	e7e4      	b.n	80126da <rmw_validate_node_name+0x4e>
 8012710:	2204      	movs	r2, #4
 8012712:	602a      	str	r2, [r5, #0]
 8012714:	2e00      	cmp	r6, #0
 8012716:	d0df      	beq.n	80126d8 <rmw_validate_node_name+0x4c>
 8012718:	22fe      	movs	r2, #254	@ 0xfe
 801271a:	6032      	str	r2, [r6, #0]
 801271c:	4618      	mov	r0, r3
 801271e:	e7dc      	b.n	80126da <rmw_validate_node_name+0x4e>
 8012720:	2303      	movs	r3, #3
 8012722:	602b      	str	r3, [r5, #0]
 8012724:	2e00      	cmp	r6, #0
 8012726:	d1de      	bne.n	80126e6 <rmw_validate_node_name+0x5a>
 8012728:	e7d6      	b.n	80126d8 <rmw_validate_node_name+0x4c>
 801272a:	bf00      	nop
 801272c:	08018244 	.word	0x08018244

08012730 <rmw_node_name_validation_result_string>:
 8012730:	2804      	cmp	r0, #4
 8012732:	bf9a      	itte	ls
 8012734:	4b02      	ldrls	r3, [pc, #8]	@ (8012740 <rmw_node_name_validation_result_string+0x10>)
 8012736:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801273a:	4802      	ldrhi	r0, [pc, #8]	@ (8012744 <rmw_node_name_validation_result_string+0x14>)
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	08017f50 	.word	0x08017f50
 8012744:	08017e64 	.word	0x08017e64

08012748 <get_memory>:
 8012748:	4603      	mov	r3, r0
 801274a:	6840      	ldr	r0, [r0, #4]
 801274c:	b158      	cbz	r0, 8012766 <get_memory+0x1e>
 801274e:	6842      	ldr	r2, [r0, #4]
 8012750:	605a      	str	r2, [r3, #4]
 8012752:	b10a      	cbz	r2, 8012758 <get_memory+0x10>
 8012754:	2100      	movs	r1, #0
 8012756:	6011      	str	r1, [r2, #0]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	6042      	str	r2, [r0, #4]
 801275c:	b102      	cbz	r2, 8012760 <get_memory+0x18>
 801275e:	6010      	str	r0, [r2, #0]
 8012760:	2200      	movs	r2, #0
 8012762:	6002      	str	r2, [r0, #0]
 8012764:	6018      	str	r0, [r3, #0]
 8012766:	4770      	bx	lr

08012768 <put_memory>:
 8012768:	680b      	ldr	r3, [r1, #0]
 801276a:	b10b      	cbz	r3, 8012770 <put_memory+0x8>
 801276c:	684a      	ldr	r2, [r1, #4]
 801276e:	605a      	str	r2, [r3, #4]
 8012770:	684a      	ldr	r2, [r1, #4]
 8012772:	b102      	cbz	r2, 8012776 <put_memory+0xe>
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	6803      	ldr	r3, [r0, #0]
 8012778:	428b      	cmp	r3, r1
 801277a:	6843      	ldr	r3, [r0, #4]
 801277c:	bf08      	it	eq
 801277e:	6002      	streq	r2, [r0, #0]
 8012780:	604b      	str	r3, [r1, #4]
 8012782:	b103      	cbz	r3, 8012786 <put_memory+0x1e>
 8012784:	6019      	str	r1, [r3, #0]
 8012786:	2300      	movs	r3, #0
 8012788:	600b      	str	r3, [r1, #0]
 801278a:	6041      	str	r1, [r0, #4]
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop

08012790 <rmw_destroy_client>:
 8012790:	b570      	push	{r4, r5, r6, lr}
 8012792:	b128      	cbz	r0, 80127a0 <rmw_destroy_client+0x10>
 8012794:	4604      	mov	r4, r0
 8012796:	6800      	ldr	r0, [r0, #0]
 8012798:	460d      	mov	r5, r1
 801279a:	f7f8 fd0f 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 801279e:	b910      	cbnz	r0, 80127a6 <rmw_destroy_client+0x16>
 80127a0:	2401      	movs	r4, #1
 80127a2:	4620      	mov	r0, r4
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	6863      	ldr	r3, [r4, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d0f9      	beq.n	80127a0 <rmw_destroy_client+0x10>
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	d0f7      	beq.n	80127a0 <rmw_destroy_client+0x10>
 80127b0:	6828      	ldr	r0, [r5, #0]
 80127b2:	f7f8 fd03 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d0f2      	beq.n	80127a0 <rmw_destroy_client+0x10>
 80127ba:	686e      	ldr	r6, [r5, #4]
 80127bc:	2e00      	cmp	r6, #0
 80127be:	d0ef      	beq.n	80127a0 <rmw_destroy_client+0x10>
 80127c0:	6864      	ldr	r4, [r4, #4]
 80127c2:	6932      	ldr	r2, [r6, #16]
 80127c4:	6920      	ldr	r0, [r4, #16]
 80127c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80127ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127ce:	6819      	ldr	r1, [r3, #0]
 80127d0:	f002 f94a 	bl	8014a68 <uxr_buffer_cancel_data>
 80127d4:	4602      	mov	r2, r0
 80127d6:	6920      	ldr	r0, [r4, #16]
 80127d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80127dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80127e0:	f7f8 fc6c 	bl	800b0bc <run_xrce_session>
 80127e4:	6920      	ldr	r0, [r4, #16]
 80127e6:	6932      	ldr	r2, [r6, #16]
 80127e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80127ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127f0:	6819      	ldr	r1, [r3, #0]
 80127f2:	f7f9 ffc3 	bl	800c77c <uxr_buffer_delete_entity>
 80127f6:	4602      	mov	r2, r0
 80127f8:	6920      	ldr	r0, [r4, #16]
 80127fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80127fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012802:	f7f8 fc5b 	bl	800b0bc <run_xrce_session>
 8012806:	2800      	cmp	r0, #0
 8012808:	4628      	mov	r0, r5
 801280a:	bf14      	ite	ne
 801280c:	2400      	movne	r4, #0
 801280e:	2402      	moveq	r4, #2
 8012810:	f7f8 fb3c 	bl	800ae8c <rmw_uxrce_fini_client_memory>
 8012814:	e7c5      	b.n	80127a2 <rmw_destroy_client+0x12>
 8012816:	bf00      	nop

08012818 <rmw_get_implementation_identifier>:
 8012818:	4b01      	ldr	r3, [pc, #4]	@ (8012820 <rmw_get_implementation_identifier+0x8>)
 801281a:	6818      	ldr	r0, [r3, #0]
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	08017f7c 	.word	0x08017f7c

08012824 <rmw_init_options_init>:
 8012824:	b084      	sub	sp, #16
 8012826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012828:	b083      	sub	sp, #12
 801282a:	ad09      	add	r5, sp, #36	@ 0x24
 801282c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012830:	b130      	cbz	r0, 8012840 <rmw_init_options_init+0x1c>
 8012832:	4604      	mov	r4, r0
 8012834:	4628      	mov	r0, r5
 8012836:	f7f7 ff19 	bl	800a66c <rcutils_allocator_is_valid>
 801283a:	b108      	cbz	r0, 8012840 <rmw_init_options_init+0x1c>
 801283c:	68a6      	ldr	r6, [r4, #8]
 801283e:	b12e      	cbz	r6, 801284c <rmw_init_options_init+0x28>
 8012840:	200b      	movs	r0, #11
 8012842:	b003      	add	sp, #12
 8012844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012848:	b004      	add	sp, #16
 801284a:	4770      	bx	lr
 801284c:	2200      	movs	r2, #0
 801284e:	2300      	movs	r3, #0
 8012850:	e9c4 2300 	strd	r2, r3, [r4]
 8012854:	4b20      	ldr	r3, [pc, #128]	@ (80128d8 <rmw_init_options_init+0xb4>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	60a3      	str	r3, [r4, #8]
 801285a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801285c:	f104 0c20 	add.w	ip, r4, #32
 8012860:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012864:	466f      	mov	r7, sp
 8012866:	682b      	ldr	r3, [r5, #0]
 8012868:	f8cc 3000 	str.w	r3, [ip]
 801286c:	4638      	mov	r0, r7
 801286e:	61e6      	str	r6, [r4, #28]
 8012870:	60e6      	str	r6, [r4, #12]
 8012872:	f7ff fd79 	bl	8012368 <rmw_get_default_security_options>
 8012876:	e897 0003 	ldmia.w	r7, {r0, r1}
 801287a:	f104 0310 	add.w	r3, r4, #16
 801287e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012882:	2203      	movs	r2, #3
 8012884:	4815      	ldr	r0, [pc, #84]	@ (80128dc <rmw_init_options_init+0xb8>)
 8012886:	4916      	ldr	r1, [pc, #88]	@ (80128e0 <rmw_init_options_init+0xbc>)
 8012888:	7626      	strb	r6, [r4, #24]
 801288a:	f7f8 fa3f 	bl	800ad0c <rmw_uxrce_init_init_options_impl_memory>
 801288e:	4813      	ldr	r0, [pc, #76]	@ (80128dc <rmw_init_options_init+0xb8>)
 8012890:	f7ff ff5a 	bl	8012748 <get_memory>
 8012894:	b1f0      	cbz	r0, 80128d4 <rmw_init_options_init+0xb0>
 8012896:	4a13      	ldr	r2, [pc, #76]	@ (80128e4 <rmw_init_options_init+0xc0>)
 8012898:	6883      	ldr	r3, [r0, #8]
 801289a:	6851      	ldr	r1, [r2, #4]
 801289c:	7810      	ldrb	r0, [r2, #0]
 801289e:	6363      	str	r3, [r4, #52]	@ 0x34
 80128a0:	7418      	strb	r0, [r3, #16]
 80128a2:	6159      	str	r1, [r3, #20]
 80128a4:	68d1      	ldr	r1, [r2, #12]
 80128a6:	61d9      	str	r1, [r3, #28]
 80128a8:	6911      	ldr	r1, [r2, #16]
 80128aa:	6219      	str	r1, [r3, #32]
 80128ac:	6951      	ldr	r1, [r2, #20]
 80128ae:	6892      	ldr	r2, [r2, #8]
 80128b0:	619a      	str	r2, [r3, #24]
 80128b2:	6259      	str	r1, [r3, #36]	@ 0x24
 80128b4:	f7fb fbc0 	bl	800e038 <uxr_nanos>
 80128b8:	f003 fbf4 	bl	80160a4 <srand>
 80128bc:	f003 fc20 	bl	8016100 <rand>
 80128c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80128c2:	6298      	str	r0, [r3, #40]	@ 0x28
 80128c4:	2800      	cmp	r0, #0
 80128c6:	d0f9      	beq.n	80128bc <rmw_init_options_init+0x98>
 80128c8:	2000      	movs	r0, #0
 80128ca:	b003      	add	sp, #12
 80128cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128d0:	b004      	add	sp, #16
 80128d2:	4770      	bx	lr
 80128d4:	2001      	movs	r0, #1
 80128d6:	e7b4      	b.n	8012842 <rmw_init_options_init+0x1e>
 80128d8:	08017f7c 	.word	0x08017f7c
 80128dc:	2000dc7c 	.word	0x2000dc7c
 80128e0:	20009518 	.word	0x20009518
 80128e4:	200093a4 	.word	0x200093a4

080128e8 <rmw_init_options_copy>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	b088      	sub	sp, #32
 80128ec:	b160      	cbz	r0, 8012908 <rmw_init_options_copy+0x20>
 80128ee:	460d      	mov	r5, r1
 80128f0:	b151      	cbz	r1, 8012908 <rmw_init_options_copy+0x20>
 80128f2:	4604      	mov	r4, r0
 80128f4:	6880      	ldr	r0, [r0, #8]
 80128f6:	b128      	cbz	r0, 8012904 <rmw_init_options_copy+0x1c>
 80128f8:	4b33      	ldr	r3, [pc, #204]	@ (80129c8 <rmw_init_options_copy+0xe0>)
 80128fa:	6819      	ldr	r1, [r3, #0]
 80128fc:	f7ed fc70 	bl	80001e0 <strcmp>
 8012900:	2800      	cmp	r0, #0
 8012902:	d154      	bne.n	80129ae <rmw_init_options_copy+0xc6>
 8012904:	68ab      	ldr	r3, [r5, #8]
 8012906:	b11b      	cbz	r3, 8012910 <rmw_init_options_copy+0x28>
 8012908:	240b      	movs	r4, #11
 801290a:	4620      	mov	r0, r4
 801290c:	b008      	add	sp, #32
 801290e:	bd70      	pop	{r4, r5, r6, pc}
 8012910:	4623      	mov	r3, r4
 8012912:	462a      	mov	r2, r5
 8012914:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8012918:	f8d3 c000 	ldr.w	ip, [r3]
 801291c:	6858      	ldr	r0, [r3, #4]
 801291e:	6899      	ldr	r1, [r3, #8]
 8012920:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012924:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012928:	3310      	adds	r3, #16
 801292a:	42b3      	cmp	r3, r6
 801292c:	f8c2 c000 	str.w	ip, [r2]
 8012930:	6050      	str	r0, [r2, #4]
 8012932:	6091      	str	r1, [r2, #8]
 8012934:	f102 0210 	add.w	r2, r2, #16
 8012938:	d1ee      	bne.n	8012918 <rmw_init_options_copy+0x30>
 801293a:	6819      	ldr	r1, [r3, #0]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	6053      	str	r3, [r2, #4]
 8012940:	6011      	str	r1, [r2, #0]
 8012942:	f104 0e20 	add.w	lr, r4, #32
 8012946:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801294a:	f10d 0c0c 	add.w	ip, sp, #12
 801294e:	4666      	mov	r6, ip
 8012950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012954:	f8de 3000 	ldr.w	r3, [lr]
 8012958:	f8cc 3000 	str.w	r3, [ip]
 801295c:	4630      	mov	r0, r6
 801295e:	f7f7 fe85 	bl	800a66c <rcutils_allocator_is_valid>
 8012962:	2800      	cmp	r0, #0
 8012964:	d0d0      	beq.n	8012908 <rmw_init_options_copy+0x20>
 8012966:	ab08      	add	r3, sp, #32
 8012968:	e913 0003 	ldmdb	r3, {r0, r1}
 801296c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012970:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012974:	69e0      	ldr	r0, [r4, #28]
 8012976:	f7ff fb6d 	bl	8012054 <rcutils_strdup>
 801297a:	61e8      	str	r0, [r5, #28]
 801297c:	69e3      	ldr	r3, [r4, #28]
 801297e:	b103      	cbz	r3, 8012982 <rmw_init_options_copy+0x9a>
 8012980:	b1f8      	cbz	r0, 80129c2 <rmw_init_options_copy+0xda>
 8012982:	4812      	ldr	r0, [pc, #72]	@ (80129cc <rmw_init_options_copy+0xe4>)
 8012984:	f7ff fee0 	bl	8012748 <get_memory>
 8012988:	b1a8      	cbz	r0, 80129b6 <rmw_init_options_copy+0xce>
 801298a:	6883      	ldr	r3, [r0, #8]
 801298c:	636b      	str	r3, [r5, #52]	@ 0x34
 801298e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012990:	f102 0c10 	add.w	ip, r2, #16
 8012994:	f103 0510 	add.w	r5, r3, #16
 8012998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801299e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80129a2:	2400      	movs	r4, #0
 80129a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80129a8:	4620      	mov	r0, r4
 80129aa:	b008      	add	sp, #32
 80129ac:	bd70      	pop	{r4, r5, r6, pc}
 80129ae:	240c      	movs	r4, #12
 80129b0:	4620      	mov	r0, r4
 80129b2:	b008      	add	sp, #32
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
 80129b6:	9b04      	ldr	r3, [sp, #16]
 80129b8:	9907      	ldr	r1, [sp, #28]
 80129ba:	69e8      	ldr	r0, [r5, #28]
 80129bc:	4798      	blx	r3
 80129be:	2401      	movs	r4, #1
 80129c0:	e7a3      	b.n	801290a <rmw_init_options_copy+0x22>
 80129c2:	240a      	movs	r4, #10
 80129c4:	e7a1      	b.n	801290a <rmw_init_options_copy+0x22>
 80129c6:	bf00      	nop
 80129c8:	08017f7c 	.word	0x08017f7c
 80129cc:	2000dc7c 	.word	0x2000dc7c

080129d0 <rmw_init_options_fini>:
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d041      	beq.n	8012a58 <rmw_init_options_fini+0x88>
 80129d4:	b510      	push	{r4, lr}
 80129d6:	4604      	mov	r4, r0
 80129d8:	b08e      	sub	sp, #56	@ 0x38
 80129da:	3020      	adds	r0, #32
 80129dc:	f7f7 fe46 	bl	800a66c <rcutils_allocator_is_valid>
 80129e0:	b380      	cbz	r0, 8012a44 <rmw_init_options_fini+0x74>
 80129e2:	68a0      	ldr	r0, [r4, #8]
 80129e4:	b120      	cbz	r0, 80129f0 <rmw_init_options_fini+0x20>
 80129e6:	4b1e      	ldr	r3, [pc, #120]	@ (8012a60 <rmw_init_options_fini+0x90>)
 80129e8:	6819      	ldr	r1, [r3, #0]
 80129ea:	f7ed fbf9 	bl	80001e0 <strcmp>
 80129ee:	bb88      	cbnz	r0, 8012a54 <rmw_init_options_fini+0x84>
 80129f0:	4b1c      	ldr	r3, [pc, #112]	@ (8012a64 <rmw_init_options_fini+0x94>)
 80129f2:	6819      	ldr	r1, [r3, #0]
 80129f4:	b351      	cbz	r1, 8012a4c <rmw_init_options_fini+0x7c>
 80129f6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80129f8:	e001      	b.n	80129fe <rmw_init_options_fini+0x2e>
 80129fa:	6849      	ldr	r1, [r1, #4]
 80129fc:	b331      	cbz	r1, 8012a4c <rmw_init_options_fini+0x7c>
 80129fe:	688b      	ldr	r3, [r1, #8]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d1fa      	bne.n	80129fa <rmw_init_options_fini+0x2a>
 8012a04:	4817      	ldr	r0, [pc, #92]	@ (8012a64 <rmw_init_options_fini+0x94>)
 8012a06:	f7ff feaf 	bl	8012768 <put_memory>
 8012a0a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012a0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012a0e:	69e0      	ldr	r0, [r4, #28]
 8012a10:	4798      	blx	r3
 8012a12:	4668      	mov	r0, sp
 8012a14:	f7ff fc98 	bl	8012348 <rmw_get_zero_initialized_init_options>
 8012a18:	46ee      	mov	lr, sp
 8012a1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a1e:	46a4      	mov	ip, r4
 8012a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a34:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a38:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	4618      	mov	r0, r3
 8012a40:	b00e      	add	sp, #56	@ 0x38
 8012a42:	bd10      	pop	{r4, pc}
 8012a44:	230b      	movs	r3, #11
 8012a46:	4618      	mov	r0, r3
 8012a48:	b00e      	add	sp, #56	@ 0x38
 8012a4a:	bd10      	pop	{r4, pc}
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	4618      	mov	r0, r3
 8012a50:	b00e      	add	sp, #56	@ 0x38
 8012a52:	bd10      	pop	{r4, pc}
 8012a54:	230c      	movs	r3, #12
 8012a56:	e7f2      	b.n	8012a3e <rmw_init_options_fini+0x6e>
 8012a58:	230b      	movs	r3, #11
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	08017f7c 	.word	0x08017f7c
 8012a64:	2000dc7c 	.word	0x2000dc7c

08012a68 <rmw_init>:
 8012a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f000 80d3 	beq.w	8012c1a <rmw_init+0x1b2>
 8012a74:	460e      	mov	r6, r1
 8012a76:	2900      	cmp	r1, #0
 8012a78:	f000 80cf 	beq.w	8012c1a <rmw_init+0x1b2>
 8012a7c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012a7e:	4605      	mov	r5, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 80ca 	beq.w	8012c1a <rmw_init+0x1b2>
 8012a86:	4b78      	ldr	r3, [pc, #480]	@ (8012c68 <rmw_init+0x200>)
 8012a88:	6880      	ldr	r0, [r0, #8]
 8012a8a:	681f      	ldr	r7, [r3, #0]
 8012a8c:	b128      	cbz	r0, 8012a9a <rmw_init+0x32>
 8012a8e:	4639      	mov	r1, r7
 8012a90:	f7ed fba6 	bl	80001e0 <strcmp>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	f040 80ca 	bne.w	8012c2e <rmw_init+0x1c6>
 8012a9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a9e:	4c73      	ldr	r4, [pc, #460]	@ (8012c6c <rmw_init+0x204>)
 8012aa0:	4973      	ldr	r1, [pc, #460]	@ (8012c70 <rmw_init+0x208>)
 8012aa2:	4874      	ldr	r0, [pc, #464]	@ (8012c74 <rmw_init+0x20c>)
 8012aa4:	60b7      	str	r7, [r6, #8]
 8012aa6:	e9c6 2300 	strd	r2, r3, [r6]
 8012aaa:	68eb      	ldr	r3, [r5, #12]
 8012aac:	64b3      	str	r3, [r6, #72]	@ 0x48
 8012aae:	2201      	movs	r2, #1
 8012ab0:	f7f8 f8cc 	bl	800ac4c <rmw_uxrce_init_session_memory>
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	4970      	ldr	r1, [pc, #448]	@ (8012c78 <rmw_init+0x210>)
 8012ab8:	2204      	movs	r2, #4
 8012aba:	f7f8 f907 	bl	800accc <rmw_uxrce_init_static_input_buffer_memory>
 8012abe:	f04f 0800 	mov.w	r8, #0
 8012ac2:	486c      	ldr	r0, [pc, #432]	@ (8012c74 <rmw_init+0x20c>)
 8012ac4:	f884 800d 	strb.w	r8, [r4, #13]
 8012ac8:	f7ff fe3e 	bl	8012748 <get_memory>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	f000 80a9 	beq.w	8012c24 <rmw_init+0x1bc>
 8012ad2:	6884      	ldr	r4, [r0, #8]
 8012ad4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8012ad6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012ad8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012adc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012ae0:	9101      	str	r1, [sp, #4]
 8012ae2:	6a00      	ldr	r0, [r0, #32]
 8012ae4:	9000      	str	r0, [sp, #0]
 8012ae6:	f104 0910 	add.w	r9, r4, #16
 8012aea:	4661      	mov	r1, ip
 8012aec:	4648      	mov	r0, r9
 8012aee:	f001 f9f3 	bl	8013ed8 <uxr_set_custom_transport_callbacks>
 8012af2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8012af6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012afa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8012afe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8012b02:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8012b06:	495d      	ldr	r1, [pc, #372]	@ (8012c7c <rmw_init+0x214>)
 8012b08:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012b0c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012b10:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8012b14:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012b18:	4859      	ldr	r0, [pc, #356]	@ (8012c80 <rmw_init+0x218>)
 8012b1a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012b1e:	2201      	movs	r2, #1
 8012b20:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8012b22:	f7f8 f873 	bl	800ac0c <rmw_uxrce_init_node_memory>
 8012b26:	4957      	ldr	r1, [pc, #348]	@ (8012c84 <rmw_init+0x21c>)
 8012b28:	4857      	ldr	r0, [pc, #348]	@ (8012c88 <rmw_init+0x220>)
 8012b2a:	2205      	movs	r2, #5
 8012b2c:	f7f8 f84e 	bl	800abcc <rmw_uxrce_init_subscription_memory>
 8012b30:	4956      	ldr	r1, [pc, #344]	@ (8012c8c <rmw_init+0x224>)
 8012b32:	4857      	ldr	r0, [pc, #348]	@ (8012c90 <rmw_init+0x228>)
 8012b34:	220a      	movs	r2, #10
 8012b36:	f7f8 f829 	bl	800ab8c <rmw_uxrce_init_publisher_memory>
 8012b3a:	4956      	ldr	r1, [pc, #344]	@ (8012c94 <rmw_init+0x22c>)
 8012b3c:	4856      	ldr	r0, [pc, #344]	@ (8012c98 <rmw_init+0x230>)
 8012b3e:	2201      	movs	r2, #1
 8012b40:	f7f7 ffe4 	bl	800ab0c <rmw_uxrce_init_service_memory>
 8012b44:	4955      	ldr	r1, [pc, #340]	@ (8012c9c <rmw_init+0x234>)
 8012b46:	4856      	ldr	r0, [pc, #344]	@ (8012ca0 <rmw_init+0x238>)
 8012b48:	2201      	movs	r2, #1
 8012b4a:	f7f7 ffff 	bl	800ab4c <rmw_uxrce_init_client_memory>
 8012b4e:	4955      	ldr	r1, [pc, #340]	@ (8012ca4 <rmw_init+0x23c>)
 8012b50:	4855      	ldr	r0, [pc, #340]	@ (8012ca8 <rmw_init+0x240>)
 8012b52:	220f      	movs	r2, #15
 8012b54:	f7f8 f89a 	bl	800ac8c <rmw_uxrce_init_topic_memory>
 8012b58:	4954      	ldr	r1, [pc, #336]	@ (8012cac <rmw_init+0x244>)
 8012b5a:	4855      	ldr	r0, [pc, #340]	@ (8012cb0 <rmw_init+0x248>)
 8012b5c:	2203      	movs	r2, #3
 8012b5e:	f7f8 f8d5 	bl	800ad0c <rmw_uxrce_init_init_options_impl_memory>
 8012b62:	4954      	ldr	r1, [pc, #336]	@ (8012cb4 <rmw_init+0x24c>)
 8012b64:	4854      	ldr	r0, [pc, #336]	@ (8012cb8 <rmw_init+0x250>)
 8012b66:	2204      	movs	r2, #4
 8012b68:	f7f8 f8f0 	bl	800ad4c <rmw_uxrce_init_wait_set_memory>
 8012b6c:	4953      	ldr	r1, [pc, #332]	@ (8012cbc <rmw_init+0x254>)
 8012b6e:	4854      	ldr	r0, [pc, #336]	@ (8012cc0 <rmw_init+0x258>)
 8012b70:	2204      	movs	r2, #4
 8012b72:	f7f8 f90b 	bl	800ad8c <rmw_uxrce_init_guard_condition_memory>
 8012b76:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8012b78:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8012b7a:	4642      	mov	r2, r8
 8012b7c:	f000 fd9e 	bl	80136bc <rmw_uxrce_transport_init>
 8012b80:	4607      	mov	r7, r0
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d158      	bne.n	8012c38 <rmw_init+0x1d0>
 8012b86:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012b88:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b8e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012b92:	4628      	mov	r0, r5
 8012b94:	f7fa f8b4 	bl	800cd00 <uxr_init_session>
 8012b98:	494a      	ldr	r1, [pc, #296]	@ (8012cc4 <rmw_init+0x25c>)
 8012b9a:	4622      	mov	r2, r4
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f7fa f8d3 	bl	800cd48 <uxr_set_topic_callback>
 8012ba2:	4949      	ldr	r1, [pc, #292]	@ (8012cc8 <rmw_init+0x260>)
 8012ba4:	463a      	mov	r2, r7
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	f7fa f8ca 	bl	800cd40 <uxr_set_status_callback>
 8012bac:	4947      	ldr	r1, [pc, #284]	@ (8012ccc <rmw_init+0x264>)
 8012bae:	463a      	mov	r2, r7
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	f7fa f8cd 	bl	800cd50 <uxr_set_request_callback>
 8012bb6:	4946      	ldr	r1, [pc, #280]	@ (8012cd0 <rmw_init+0x268>)
 8012bb8:	463a      	mov	r2, r7
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f7fa f8cc 	bl	800cd58 <uxr_set_reply_callback>
 8012bc0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bc4:	2304      	movs	r3, #4
 8012bc6:	0092      	lsls	r2, r2, #2
 8012bc8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7fa f901 	bl	800cdd4 <uxr_create_input_reliable_stream>
 8012bd2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bd6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012bda:	0092      	lsls	r2, r2, #2
 8012bdc:	2304      	movs	r3, #4
 8012bde:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7fa f8ce 	bl	800cd84 <uxr_create_output_reliable_stream>
 8012be8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012bec:	4628      	mov	r0, r5
 8012bee:	f7fa f8eb 	bl	800cdc8 <uxr_create_input_best_effort_stream>
 8012bf2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8012bf6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012bfa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bfe:	3114      	adds	r1, #20
 8012c00:	4628      	mov	r0, r5
 8012c02:	f7fa f8ad 	bl	800cd60 <uxr_create_output_best_effort_stream>
 8012c06:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f7fa fe38 	bl	800d880 <uxr_create_session>
 8012c10:	b1f8      	cbz	r0, 8012c52 <rmw_init+0x1ea>
 8012c12:	4638      	mov	r0, r7
 8012c14:	b003      	add	sp, #12
 8012c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c1a:	270b      	movs	r7, #11
 8012c1c:	4638      	mov	r0, r7
 8012c1e:	b003      	add	sp, #12
 8012c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c24:	2701      	movs	r7, #1
 8012c26:	4638      	mov	r0, r7
 8012c28:	b003      	add	sp, #12
 8012c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c2e:	270c      	movs	r7, #12
 8012c30:	4638      	mov	r0, r7
 8012c32:	b003      	add	sp, #12
 8012c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c38:	4648      	mov	r0, r9
 8012c3a:	f001 f98f 	bl	8013f5c <uxr_close_custom_transport>
 8012c3e:	480d      	ldr	r0, [pc, #52]	@ (8012c74 <rmw_init+0x20c>)
 8012c40:	4621      	mov	r1, r4
 8012c42:	f7ff fd91 	bl	8012768 <put_memory>
 8012c46:	4638      	mov	r0, r7
 8012c48:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012c4c:	b003      	add	sp, #12
 8012c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c52:	4648      	mov	r0, r9
 8012c54:	f001 f982 	bl	8013f5c <uxr_close_custom_transport>
 8012c58:	4806      	ldr	r0, [pc, #24]	@ (8012c74 <rmw_init+0x20c>)
 8012c5a:	4621      	mov	r1, r4
 8012c5c:	f7ff fd84 	bl	8012768 <put_memory>
 8012c60:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8012c62:	2701      	movs	r7, #1
 8012c64:	e7d5      	b.n	8012c12 <rmw_init+0x1aa>
 8012c66:	bf00      	nop
 8012c68:	08017f7c 	.word	0x08017f7c
 8012c6c:	2000dccc 	.word	0x2000dccc
 8012c70:	20009f78 	.word	0x20009f78
 8012c74:	2000dcbc 	.word	0x2000dcbc
 8012c78:	2000b520 	.word	0x2000b520
 8012c7c:	2000959c 	.word	0x2000959c
 8012c80:	2000dc8c 	.word	0x2000dc8c
 8012c84:	2000d620 	.word	0x2000d620
 8012c88:	2000dcdc 	.word	0x2000dcdc
 8012c8c:	20009640 	.word	0x20009640
 8012c90:	2000dc9c 	.word	0x2000dc9c
 8012c94:	20009eb0 	.word	0x20009eb0
 8012c98:	2000dcac 	.word	0x2000dcac
 8012c9c:	200093d0 	.word	0x200093d0
 8012ca0:	200093c0 	.word	0x200093c0
 8012ca4:	2000da58 	.word	0x2000da58
 8012ca8:	2000dcec 	.word	0x2000dcec
 8012cac:	20009518 	.word	0x20009518
 8012cb0:	2000dc7c 	.word	0x2000dc7c
 8012cb4:	2000dbfc 	.word	0x2000dbfc
 8012cb8:	2000dcfc 	.word	0x2000dcfc
 8012cbc:	20009498 	.word	0x20009498
 8012cc0:	2000dc6c 	.word	0x2000dc6c
 8012cc4:	08015c49 	.word	0x08015c49
 8012cc8:	08015c41 	.word	0x08015c41
 8012ccc:	08015ce1 	.word	0x08015ce1
 8012cd0:	08015d7d 	.word	0x08015d7d

08012cd4 <rmw_context_fini>:
 8012cd4:	4b17      	ldr	r3, [pc, #92]	@ (8012d34 <rmw_context_fini+0x60>)
 8012cd6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012cd8:	b570      	push	{r4, r5, r6, lr}
 8012cda:	681c      	ldr	r4, [r3, #0]
 8012cdc:	4605      	mov	r5, r0
 8012cde:	b334      	cbz	r4, 8012d2e <rmw_context_fini+0x5a>
 8012ce0:	2600      	movs	r6, #0
 8012ce2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012ce6:	6902      	ldr	r2, [r0, #16]
 8012ce8:	428a      	cmp	r2, r1
 8012cea:	d018      	beq.n	8012d1e <rmw_context_fini+0x4a>
 8012cec:	2c00      	cmp	r4, #0
 8012cee:	d1f8      	bne.n	8012ce2 <rmw_context_fini+0xe>
 8012cf0:	b189      	cbz	r1, 8012d16 <rmw_context_fini+0x42>
 8012cf2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8012cf6:	789b      	ldrb	r3, [r3, #2]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8012cfe:	bf14      	ite	ne
 8012d00:	210a      	movne	r1, #10
 8012d02:	2100      	moveq	r1, #0
 8012d04:	f7fa fd94 	bl	800d830 <uxr_delete_session_retries>
 8012d08:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012d0a:	f7f8 f85f 	bl	800adcc <rmw_uxrce_fini_session_memory>
 8012d0e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012d10:	3010      	adds	r0, #16
 8012d12:	f001 f923 	bl	8013f5c <uxr_close_custom_transport>
 8012d16:	2300      	movs	r3, #0
 8012d18:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	bd70      	pop	{r4, r5, r6, pc}
 8012d1e:	3018      	adds	r0, #24
 8012d20:	f000 f90e 	bl	8012f40 <rmw_destroy_node>
 8012d24:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012d26:	4606      	mov	r6, r0
 8012d28:	2c00      	cmp	r4, #0
 8012d2a:	d1da      	bne.n	8012ce2 <rmw_context_fini+0xe>
 8012d2c:	e7e0      	b.n	8012cf0 <rmw_context_fini+0x1c>
 8012d2e:	4626      	mov	r6, r4
 8012d30:	e7de      	b.n	8012cf0 <rmw_context_fini+0x1c>
 8012d32:	bf00      	nop
 8012d34:	2000dc8c 	.word	0x2000dc8c

08012d38 <create_topic>:
 8012d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	b084      	sub	sp, #16
 8012d40:	4822      	ldr	r0, [pc, #136]	@ (8012dcc <create_topic+0x94>)
 8012d42:	460f      	mov	r7, r1
 8012d44:	4616      	mov	r6, r2
 8012d46:	f7ff fcff 	bl	8012748 <get_memory>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d039      	beq.n	8012dc4 <create_topic+0x8c>
 8012d50:	692b      	ldr	r3, [r5, #16]
 8012d52:	6884      	ldr	r4, [r0, #8]
 8012d54:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8012dd4 <create_topic+0x9c>
 8012d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012d5c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012d60:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8012d64:	1c42      	adds	r2, r0, #1
 8012d66:	2102      	movs	r1, #2
 8012d68:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012d6c:	f7f9 ff08 	bl	800cb80 <uxr_object_id>
 8012d70:	223c      	movs	r2, #60	@ 0x3c
 8012d72:	6120      	str	r0, [r4, #16]
 8012d74:	4641      	mov	r1, r8
 8012d76:	4638      	mov	r0, r7
 8012d78:	f7f8 fa06 	bl	800b188 <generate_topic_name>
 8012d7c:	b1f0      	cbz	r0, 8012dbc <create_topic+0x84>
 8012d7e:	4f14      	ldr	r7, [pc, #80]	@ (8012dd0 <create_topic+0x98>)
 8012d80:	4630      	mov	r0, r6
 8012d82:	2264      	movs	r2, #100	@ 0x64
 8012d84:	4639      	mov	r1, r7
 8012d86:	f7f8 f9cf 	bl	800b128 <generate_type_name>
 8012d8a:	b1b8      	cbz	r0, 8012dbc <create_topic+0x84>
 8012d8c:	6928      	ldr	r0, [r5, #16]
 8012d8e:	2306      	movs	r3, #6
 8012d90:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012d94:	f8cd 8000 	str.w	r8, [sp]
 8012d98:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012d9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012da0:	6811      	ldr	r1, [r2, #0]
 8012da2:	696b      	ldr	r3, [r5, #20]
 8012da4:	6922      	ldr	r2, [r4, #16]
 8012da6:	f7f9 fd67 	bl	800c878 <uxr_buffer_create_topic_bin>
 8012daa:	4602      	mov	r2, r0
 8012dac:	6928      	ldr	r0, [r5, #16]
 8012dae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012db2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012db6:	f7f8 f981 	bl	800b0bc <run_xrce_session>
 8012dba:	b918      	cbnz	r0, 8012dc4 <create_topic+0x8c>
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f7f8 f87b 	bl	800aeb8 <rmw_uxrce_fini_topic_memory>
 8012dc2:	2400      	movs	r4, #0
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	b004      	add	sp, #16
 8012dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dcc:	2000dcec 	.word	0x2000dcec
 8012dd0:	2000ddd8 	.word	0x2000ddd8
 8012dd4:	2000dd9c 	.word	0x2000dd9c

08012dd8 <destroy_topic>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	6985      	ldr	r5, [r0, #24]
 8012ddc:	b1d5      	cbz	r5, 8012e14 <destroy_topic+0x3c>
 8012dde:	4604      	mov	r4, r0
 8012de0:	6928      	ldr	r0, [r5, #16]
 8012de2:	6922      	ldr	r2, [r4, #16]
 8012de4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012de8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012dec:	6819      	ldr	r1, [r3, #0]
 8012dee:	f7f9 fcc5 	bl	800c77c <uxr_buffer_delete_entity>
 8012df2:	4602      	mov	r2, r0
 8012df4:	6928      	ldr	r0, [r5, #16]
 8012df6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012dfa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012dfe:	f7f8 f95d 	bl	800b0bc <run_xrce_session>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	4620      	mov	r0, r4
 8012e06:	bf14      	ite	ne
 8012e08:	2400      	movne	r4, #0
 8012e0a:	2402      	moveq	r4, #2
 8012e0c:	f7f8 f854 	bl	800aeb8 <rmw_uxrce_fini_topic_memory>
 8012e10:	4620      	mov	r0, r4
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	2401      	movs	r4, #1
 8012e16:	4620      	mov	r0, r4
 8012e18:	bd38      	pop	{r3, r4, r5, pc}
 8012e1a:	bf00      	nop

08012e1c <create_node>:
 8012e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e20:	b083      	sub	sp, #12
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d05f      	beq.n	8012ee6 <create_node+0xca>
 8012e26:	4606      	mov	r6, r0
 8012e28:	4835      	ldr	r0, [pc, #212]	@ (8012f00 <create_node+0xe4>)
 8012e2a:	460f      	mov	r7, r1
 8012e2c:	4690      	mov	r8, r2
 8012e2e:	461d      	mov	r5, r3
 8012e30:	f7ff fc8a 	bl	8012748 <get_memory>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d056      	beq.n	8012ee6 <create_node+0xca>
 8012e38:	6884      	ldr	r4, [r0, #8]
 8012e3a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012e3c:	6123      	str	r3, [r4, #16]
 8012e3e:	f7ff fceb 	bl	8012818 <rmw_get_implementation_identifier>
 8012e42:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8012e46:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012e4a:	f8c4 9020 	str.w	r9, [r4, #32]
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ed f9d0 	bl	80001f4 <strlen>
 8012e54:	1c42      	adds	r2, r0, #1
 8012e56:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e58:	f104 0518 	add.w	r5, r4, #24
 8012e5c:	d840      	bhi.n	8012ee0 <create_node+0xc4>
 8012e5e:	4648      	mov	r0, r9
 8012e60:	4631      	mov	r1, r6
 8012e62:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8012e66:	f003 fc9c 	bl	80167a2 <memcpy>
 8012e6a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8012e6e:	4638      	mov	r0, r7
 8012e70:	f7ed f9c0 	bl	80001f4 <strlen>
 8012e74:	1c42      	adds	r2, r0, #1
 8012e76:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e78:	d832      	bhi.n	8012ee0 <create_node+0xc4>
 8012e7a:	4639      	mov	r1, r7
 8012e7c:	4648      	mov	r0, r9
 8012e7e:	f003 fc90 	bl	80167a2 <memcpy>
 8012e82:	6923      	ldr	r3, [r4, #16]
 8012e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012e88:	2101      	movs	r1, #1
 8012e8a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8012e8e:	1842      	adds	r2, r0, r1
 8012e90:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012e94:	f7f9 fe74 	bl	800cb80 <uxr_object_id>
 8012e98:	6160      	str	r0, [r4, #20]
 8012e9a:	783b      	ldrb	r3, [r7, #0]
 8012e9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e9e:	d127      	bne.n	8012ef0 <create_node+0xd4>
 8012ea0:	787b      	ldrb	r3, [r7, #1]
 8012ea2:	bb2b      	cbnz	r3, 8012ef0 <create_node+0xd4>
 8012ea4:	4a17      	ldr	r2, [pc, #92]	@ (8012f04 <create_node+0xe8>)
 8012ea6:	4818      	ldr	r0, [pc, #96]	@ (8012f08 <create_node+0xec>)
 8012ea8:	4633      	mov	r3, r6
 8012eaa:	213c      	movs	r1, #60	@ 0x3c
 8012eac:	f003 fad6 	bl	801645c <sniprintf>
 8012eb0:	6920      	ldr	r0, [r4, #16]
 8012eb2:	4915      	ldr	r1, [pc, #84]	@ (8012f08 <create_node+0xec>)
 8012eb4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012eb8:	9100      	str	r1, [sp, #0]
 8012eba:	2106      	movs	r1, #6
 8012ebc:	9101      	str	r1, [sp, #4]
 8012ebe:	6811      	ldr	r1, [r2, #0]
 8012ec0:	6962      	ldr	r2, [r4, #20]
 8012ec2:	fa1f f388 	uxth.w	r3, r8
 8012ec6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012eca:	f7f9 fca3 	bl	800c814 <uxr_buffer_create_participant_bin>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	6920      	ldr	r0, [r4, #16]
 8012ed2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012ed6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012eda:	f7f8 f8ef 	bl	800b0bc <run_xrce_session>
 8012ede:	b918      	cbnz	r0, 8012ee8 <create_node+0xcc>
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f7f7 ff79 	bl	800add8 <rmw_uxrce_fini_node_memory>
 8012ee6:	2500      	movs	r5, #0
 8012ee8:	4628      	mov	r0, r5
 8012eea:	b003      	add	sp, #12
 8012eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef0:	4a06      	ldr	r2, [pc, #24]	@ (8012f0c <create_node+0xf0>)
 8012ef2:	9600      	str	r6, [sp, #0]
 8012ef4:	463b      	mov	r3, r7
 8012ef6:	213c      	movs	r1, #60	@ 0x3c
 8012ef8:	4803      	ldr	r0, [pc, #12]	@ (8012f08 <create_node+0xec>)
 8012efa:	f003 faaf 	bl	801645c <sniprintf>
 8012efe:	e7d7      	b.n	8012eb0 <create_node+0x94>
 8012f00:	2000dc8c 	.word	0x2000dc8c
 8012f04:	080177dc 	.word	0x080177dc
 8012f08:	2000de3c 	.word	0x2000de3c
 8012f0c:	08017acc 	.word	0x08017acc

08012f10 <rmw_create_node>:
 8012f10:	b199      	cbz	r1, 8012f3a <rmw_create_node+0x2a>
 8012f12:	780b      	ldrb	r3, [r1, #0]
 8012f14:	468c      	mov	ip, r1
 8012f16:	b183      	cbz	r3, 8012f3a <rmw_create_node+0x2a>
 8012f18:	b410      	push	{r4}
 8012f1a:	4614      	mov	r4, r2
 8012f1c:	b14a      	cbz	r2, 8012f32 <rmw_create_node+0x22>
 8012f1e:	7813      	ldrb	r3, [r2, #0]
 8012f20:	b13b      	cbz	r3, 8012f32 <rmw_create_node+0x22>
 8012f22:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8012f24:	4603      	mov	r3, r0
 8012f26:	4621      	mov	r1, r4
 8012f28:	4660      	mov	r0, ip
 8012f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f2e:	f7ff bf75 	b.w	8012e1c <create_node>
 8012f32:	2000      	movs	r0, #0
 8012f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f38:	4770      	bx	lr
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop

08012f40 <rmw_destroy_node>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	b328      	cbz	r0, 8012f90 <rmw_destroy_node+0x50>
 8012f44:	4607      	mov	r7, r0
 8012f46:	6800      	ldr	r0, [r0, #0]
 8012f48:	b120      	cbz	r0, 8012f54 <rmw_destroy_node+0x14>
 8012f4a:	4b36      	ldr	r3, [pc, #216]	@ (8013024 <rmw_destroy_node+0xe4>)
 8012f4c:	6819      	ldr	r1, [r3, #0]
 8012f4e:	f7ed f947 	bl	80001e0 <strcmp>
 8012f52:	b9e8      	cbnz	r0, 8012f90 <rmw_destroy_node+0x50>
 8012f54:	687d      	ldr	r5, [r7, #4]
 8012f56:	b1dd      	cbz	r5, 8012f90 <rmw_destroy_node+0x50>
 8012f58:	4b33      	ldr	r3, [pc, #204]	@ (8013028 <rmw_destroy_node+0xe8>)
 8012f5a:	681c      	ldr	r4, [r3, #0]
 8012f5c:	2c00      	cmp	r4, #0
 8012f5e:	d05f      	beq.n	8013020 <rmw_destroy_node+0xe0>
 8012f60:	2600      	movs	r6, #0
 8012f62:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f66:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8012f6a:	429d      	cmp	r5, r3
 8012f6c:	d013      	beq.n	8012f96 <rmw_destroy_node+0x56>
 8012f6e:	2c00      	cmp	r4, #0
 8012f70:	d1f7      	bne.n	8012f62 <rmw_destroy_node+0x22>
 8012f72:	4b2e      	ldr	r3, [pc, #184]	@ (801302c <rmw_destroy_node+0xec>)
 8012f74:	681c      	ldr	r4, [r3, #0]
 8012f76:	b1c4      	cbz	r4, 8012faa <rmw_destroy_node+0x6a>
 8012f78:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f7c:	6a0b      	ldr	r3, [r1, #32]
 8012f7e:	429d      	cmp	r5, r3
 8012f80:	d1f9      	bne.n	8012f76 <rmw_destroy_node+0x36>
 8012f82:	317c      	adds	r1, #124	@ 0x7c
 8012f84:	4638      	mov	r0, r7
 8012f86:	f000 fae5 	bl	8013554 <rmw_destroy_subscription>
 8012f8a:	2801      	cmp	r0, #1
 8012f8c:	4606      	mov	r6, r0
 8012f8e:	d1f2      	bne.n	8012f76 <rmw_destroy_node+0x36>
 8012f90:	2601      	movs	r6, #1
 8012f92:	4630      	mov	r0, r6
 8012f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f96:	3184      	adds	r1, #132	@ 0x84
 8012f98:	4638      	mov	r0, r7
 8012f9a:	f7f7 fd65 	bl	800aa68 <rmw_destroy_publisher>
 8012f9e:	2801      	cmp	r0, #1
 8012fa0:	4606      	mov	r6, r0
 8012fa2:	d0f5      	beq.n	8012f90 <rmw_destroy_node+0x50>
 8012fa4:	2c00      	cmp	r4, #0
 8012fa6:	d1dc      	bne.n	8012f62 <rmw_destroy_node+0x22>
 8012fa8:	e7e3      	b.n	8012f72 <rmw_destroy_node+0x32>
 8012faa:	4b21      	ldr	r3, [pc, #132]	@ (8013030 <rmw_destroy_node+0xf0>)
 8012fac:	681c      	ldr	r4, [r3, #0]
 8012fae:	b16c      	cbz	r4, 8012fcc <rmw_destroy_node+0x8c>
 8012fb0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012fb4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012fb6:	429d      	cmp	r5, r3
 8012fb8:	d1f9      	bne.n	8012fae <rmw_destroy_node+0x6e>
 8012fba:	317c      	adds	r1, #124	@ 0x7c
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	f000 f993 	bl	80132e8 <rmw_destroy_service>
 8012fc2:	2801      	cmp	r0, #1
 8012fc4:	4606      	mov	r6, r0
 8012fc6:	d0e3      	beq.n	8012f90 <rmw_destroy_node+0x50>
 8012fc8:	2c00      	cmp	r4, #0
 8012fca:	d1f1      	bne.n	8012fb0 <rmw_destroy_node+0x70>
 8012fcc:	4b19      	ldr	r3, [pc, #100]	@ (8013034 <rmw_destroy_node+0xf4>)
 8012fce:	681c      	ldr	r4, [r3, #0]
 8012fd0:	b16c      	cbz	r4, 8012fee <rmw_destroy_node+0xae>
 8012fd2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012fd6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012fd8:	429d      	cmp	r5, r3
 8012fda:	d1f9      	bne.n	8012fd0 <rmw_destroy_node+0x90>
 8012fdc:	317c      	adds	r1, #124	@ 0x7c
 8012fde:	4638      	mov	r0, r7
 8012fe0:	f7ff fbd6 	bl	8012790 <rmw_destroy_client>
 8012fe4:	2801      	cmp	r0, #1
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	d0d2      	beq.n	8012f90 <rmw_destroy_node+0x50>
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	d1f1      	bne.n	8012fd2 <rmw_destroy_node+0x92>
 8012fee:	6928      	ldr	r0, [r5, #16]
 8012ff0:	696a      	ldr	r2, [r5, #20]
 8012ff2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012ff6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012ffa:	6819      	ldr	r1, [r3, #0]
 8012ffc:	f7f9 fbbe 	bl	800c77c <uxr_buffer_delete_entity>
 8013000:	4602      	mov	r2, r0
 8013002:	6928      	ldr	r0, [r5, #16]
 8013004:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013008:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801300c:	f7f8 f856 	bl	800b0bc <run_xrce_session>
 8013010:	2800      	cmp	r0, #0
 8013012:	bf08      	it	eq
 8013014:	2602      	moveq	r6, #2
 8013016:	4638      	mov	r0, r7
 8013018:	f7f7 fede 	bl	800add8 <rmw_uxrce_fini_node_memory>
 801301c:	4630      	mov	r0, r6
 801301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013020:	4626      	mov	r6, r4
 8013022:	e7a6      	b.n	8012f72 <rmw_destroy_node+0x32>
 8013024:	08017f7c 	.word	0x08017f7c
 8013028:	2000dc9c 	.word	0x2000dc9c
 801302c:	2000dcdc 	.word	0x2000dcdc
 8013030:	2000dcac 	.word	0x2000dcac
 8013034:	200093c0 	.word	0x200093c0

08013038 <rmw_node_get_graph_guard_condition>:
 8013038:	6843      	ldr	r3, [r0, #4]
 801303a:	6918      	ldr	r0, [r3, #16]
 801303c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013040:	4770      	bx	lr
 8013042:	bf00      	nop

08013044 <rmw_send_request>:
 8013044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013048:	4604      	mov	r4, r0
 801304a:	6800      	ldr	r0, [r0, #0]
 801304c:	b08b      	sub	sp, #44	@ 0x2c
 801304e:	460e      	mov	r6, r1
 8013050:	4615      	mov	r5, r2
 8013052:	b128      	cbz	r0, 8013060 <rmw_send_request+0x1c>
 8013054:	4b21      	ldr	r3, [pc, #132]	@ (80130dc <rmw_send_request+0x98>)
 8013056:	6819      	ldr	r1, [r3, #0]
 8013058:	f7ed f8c2 	bl	80001e0 <strcmp>
 801305c:	2800      	cmp	r0, #0
 801305e:	d139      	bne.n	80130d4 <rmw_send_request+0x90>
 8013060:	6864      	ldr	r4, [r4, #4]
 8013062:	6963      	ldr	r3, [r4, #20]
 8013064:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013068:	689b      	ldr	r3, [r3, #8]
 801306a:	4798      	blx	r3
 801306c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013070:	4630      	mov	r0, r6
 8013072:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013076:	4798      	blx	r3
 8013078:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801307c:	9000      	str	r0, [sp, #0]
 801307e:	6922      	ldr	r2, [r4, #16]
 8013080:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013082:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013086:	ab02      	add	r3, sp, #8
 8013088:	f7fb f876 	bl	800e178 <uxr_prepare_output_stream>
 801308c:	2700      	movs	r7, #0
 801308e:	6028      	str	r0, [r5, #0]
 8013090:	606f      	str	r7, [r5, #4]
 8013092:	b198      	cbz	r0, 80130bc <rmw_send_request+0x78>
 8013094:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013098:	a902      	add	r1, sp, #8
 801309a:	4630      	mov	r0, r6
 801309c:	4798      	blx	r3
 801309e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80130a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d00c      	beq.n	80130c4 <rmw_send_request+0x80>
 80130aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80130ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130b0:	f7fa fa76 	bl	800d5a0 <uxr_run_session_until_confirm_delivery>
 80130b4:	4638      	mov	r0, r7
 80130b6:	b00b      	add	sp, #44	@ 0x2c
 80130b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130bc:	2001      	movs	r0, #1
 80130be:	b00b      	add	sp, #44	@ 0x2c
 80130c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130c8:	f7f9 feaa 	bl	800ce20 <uxr_flash_output_streams>
 80130cc:	4638      	mov	r0, r7
 80130ce:	b00b      	add	sp, #44	@ 0x2c
 80130d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130d4:	200c      	movs	r0, #12
 80130d6:	b00b      	add	sp, #44	@ 0x2c
 80130d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130dc:	08017f7c 	.word	0x08017f7c

080130e0 <rmw_take_request>:
 80130e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130e4:	4605      	mov	r5, r0
 80130e6:	6800      	ldr	r0, [r0, #0]
 80130e8:	b089      	sub	sp, #36	@ 0x24
 80130ea:	460c      	mov	r4, r1
 80130ec:	4690      	mov	r8, r2
 80130ee:	461e      	mov	r6, r3
 80130f0:	b128      	cbz	r0, 80130fe <rmw_take_request+0x1e>
 80130f2:	4b28      	ldr	r3, [pc, #160]	@ (8013194 <rmw_take_request+0xb4>)
 80130f4:	6819      	ldr	r1, [r3, #0]
 80130f6:	f7ed f873 	bl	80001e0 <strcmp>
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d146      	bne.n	801318c <rmw_take_request+0xac>
 80130fe:	b10e      	cbz	r6, 8013104 <rmw_take_request+0x24>
 8013100:	2300      	movs	r3, #0
 8013102:	7033      	strb	r3, [r6, #0]
 8013104:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013108:	f7f7 ff5a 	bl	800afc0 <rmw_uxrce_clean_expired_static_input_buffer>
 801310c:	4648      	mov	r0, r9
 801310e:	f7f7 ff2f 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013112:	4607      	mov	r7, r0
 8013114:	b3b0      	cbz	r0, 8013184 <rmw_take_request+0xa4>
 8013116:	6885      	ldr	r5, [r0, #8]
 8013118:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801311c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013120:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013124:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013128:	7423      	strb	r3, [r4, #16]
 801312a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801312e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013132:	74e2      	strb	r2, [r4, #19]
 8013134:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013138:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801313c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013140:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013144:	61e1      	str	r1, [r4, #28]
 8013146:	6162      	str	r2, [r4, #20]
 8013148:	61a3      	str	r3, [r4, #24]
 801314a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	4798      	blx	r3
 8013152:	6844      	ldr	r4, [r0, #4]
 8013154:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013158:	f105 0110 	add.w	r1, r5, #16
 801315c:	4668      	mov	r0, sp
 801315e:	f7f9 fa9d 	bl	800c69c <ucdr_init_buffer>
 8013162:	68e3      	ldr	r3, [r4, #12]
 8013164:	4641      	mov	r1, r8
 8013166:	4668      	mov	r0, sp
 8013168:	4798      	blx	r3
 801316a:	4639      	mov	r1, r7
 801316c:	4604      	mov	r4, r0
 801316e:	480a      	ldr	r0, [pc, #40]	@ (8013198 <rmw_take_request+0xb8>)
 8013170:	f7ff fafa 	bl	8012768 <put_memory>
 8013174:	b106      	cbz	r6, 8013178 <rmw_take_request+0x98>
 8013176:	7034      	strb	r4, [r6, #0]
 8013178:	f084 0001 	eor.w	r0, r4, #1
 801317c:	b2c0      	uxtb	r0, r0
 801317e:	b009      	add	sp, #36	@ 0x24
 8013180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013184:	2001      	movs	r0, #1
 8013186:	b009      	add	sp, #36	@ 0x24
 8013188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801318c:	200c      	movs	r0, #12
 801318e:	b009      	add	sp, #36	@ 0x24
 8013190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013194:	08017f7c 	.word	0x08017f7c
 8013198:	2000dccc 	.word	0x2000dccc

0801319c <rmw_send_response>:
 801319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801319e:	4605      	mov	r5, r0
 80131a0:	6800      	ldr	r0, [r0, #0]
 80131a2:	b091      	sub	sp, #68	@ 0x44
 80131a4:	460c      	mov	r4, r1
 80131a6:	4616      	mov	r6, r2
 80131a8:	b128      	cbz	r0, 80131b6 <rmw_send_response+0x1a>
 80131aa:	4b29      	ldr	r3, [pc, #164]	@ (8013250 <rmw_send_response+0xb4>)
 80131ac:	6819      	ldr	r1, [r3, #0]
 80131ae:	f7ed f817 	bl	80001e0 <strcmp>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d141      	bne.n	801323a <rmw_send_response+0x9e>
 80131b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80131ba:	9306      	str	r3, [sp, #24]
 80131bc:	4623      	mov	r3, r4
 80131be:	9207      	str	r2, [sp, #28]
 80131c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131c4:	686d      	ldr	r5, [r5, #4]
 80131c6:	789b      	ldrb	r3, [r3, #2]
 80131c8:	68a1      	ldr	r1, [r4, #8]
 80131ca:	f88d 2017 	strb.w	r2, [sp, #23]
 80131ce:	f88d 3016 	strb.w	r3, [sp, #22]
 80131d2:	68e2      	ldr	r2, [r4, #12]
 80131d4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80131d8:	6860      	ldr	r0, [r4, #4]
 80131da:	f8ad 3014 	strh.w	r3, [sp, #20]
 80131de:	ab02      	add	r3, sp, #8
 80131e0:	c307      	stmia	r3!, {r0, r1, r2}
 80131e2:	696b      	ldr	r3, [r5, #20]
 80131e4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	4798      	blx	r3
 80131ea:	6844      	ldr	r4, [r0, #4]
 80131ec:	4630      	mov	r0, r6
 80131ee:	6923      	ldr	r3, [r4, #16]
 80131f0:	4798      	blx	r3
 80131f2:	f100 0318 	add.w	r3, r0, #24
 80131f6:	6938      	ldr	r0, [r7, #16]
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	692a      	ldr	r2, [r5, #16]
 80131fc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80131fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013202:	ab08      	add	r3, sp, #32
 8013204:	f7fa ffb8 	bl	800e178 <uxr_prepare_output_stream>
 8013208:	b910      	cbnz	r0, 8013210 <rmw_send_response+0x74>
 801320a:	2001      	movs	r0, #1
 801320c:	b011      	add	sp, #68	@ 0x44
 801320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013210:	a902      	add	r1, sp, #8
 8013212:	a808      	add	r0, sp, #32
 8013214:	f7fc f8e8 	bl	800f3e8 <uxr_serialize_SampleIdentity>
 8013218:	68a3      	ldr	r3, [r4, #8]
 801321a:	a908      	add	r1, sp, #32
 801321c:	4630      	mov	r0, r6
 801321e:	4798      	blx	r3
 8013220:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013224:	6938      	ldr	r0, [r7, #16]
 8013226:	2b01      	cmp	r3, #1
 8013228:	d00a      	beq.n	8013240 <rmw_send_response+0xa4>
 801322a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801322c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013230:	f7fa f9b6 	bl	800d5a0 <uxr_run_session_until_confirm_delivery>
 8013234:	2000      	movs	r0, #0
 8013236:	b011      	add	sp, #68	@ 0x44
 8013238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801323a:	200c      	movs	r0, #12
 801323c:	b011      	add	sp, #68	@ 0x44
 801323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013240:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013244:	f7f9 fdec 	bl	800ce20 <uxr_flash_output_streams>
 8013248:	2000      	movs	r0, #0
 801324a:	b011      	add	sp, #68	@ 0x44
 801324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801324e:	bf00      	nop
 8013250:	08017f7c 	.word	0x08017f7c

08013254 <rmw_take_response>:
 8013254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013258:	4604      	mov	r4, r0
 801325a:	6800      	ldr	r0, [r0, #0]
 801325c:	b088      	sub	sp, #32
 801325e:	4688      	mov	r8, r1
 8013260:	4617      	mov	r7, r2
 8013262:	461d      	mov	r5, r3
 8013264:	b120      	cbz	r0, 8013270 <rmw_take_response+0x1c>
 8013266:	4b1e      	ldr	r3, [pc, #120]	@ (80132e0 <rmw_take_response+0x8c>)
 8013268:	6819      	ldr	r1, [r3, #0]
 801326a:	f7ec ffb9 	bl	80001e0 <strcmp>
 801326e:	bb78      	cbnz	r0, 80132d0 <rmw_take_response+0x7c>
 8013270:	b10d      	cbz	r5, 8013276 <rmw_take_response+0x22>
 8013272:	2300      	movs	r3, #0
 8013274:	702b      	strb	r3, [r5, #0]
 8013276:	6864      	ldr	r4, [r4, #4]
 8013278:	f7f7 fea2 	bl	800afc0 <rmw_uxrce_clean_expired_static_input_buffer>
 801327c:	4620      	mov	r0, r4
 801327e:	f7f7 fe77 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013282:	4606      	mov	r6, r0
 8013284:	b340      	cbz	r0, 80132d8 <rmw_take_response+0x84>
 8013286:	6963      	ldr	r3, [r4, #20]
 8013288:	6884      	ldr	r4, [r0, #8]
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013290:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013294:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013298:	4798      	blx	r3
 801329a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801329e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80132a2:	f104 0110 	add.w	r1, r4, #16
 80132a6:	4668      	mov	r0, sp
 80132a8:	f7f9 f9f8 	bl	800c69c <ucdr_init_buffer>
 80132ac:	4639      	mov	r1, r7
 80132ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132b2:	4668      	mov	r0, sp
 80132b4:	4798      	blx	r3
 80132b6:	4631      	mov	r1, r6
 80132b8:	4604      	mov	r4, r0
 80132ba:	480a      	ldr	r0, [pc, #40]	@ (80132e4 <rmw_take_response+0x90>)
 80132bc:	f7ff fa54 	bl	8012768 <put_memory>
 80132c0:	b105      	cbz	r5, 80132c4 <rmw_take_response+0x70>
 80132c2:	702c      	strb	r4, [r5, #0]
 80132c4:	f084 0001 	eor.w	r0, r4, #1
 80132c8:	b2c0      	uxtb	r0, r0
 80132ca:	b008      	add	sp, #32
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d0:	200c      	movs	r0, #12
 80132d2:	b008      	add	sp, #32
 80132d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d8:	2001      	movs	r0, #1
 80132da:	b008      	add	sp, #32
 80132dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132e0:	08017f7c 	.word	0x08017f7c
 80132e4:	2000dccc 	.word	0x2000dccc

080132e8 <rmw_destroy_service>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	b128      	cbz	r0, 80132f8 <rmw_destroy_service+0x10>
 80132ec:	4604      	mov	r4, r0
 80132ee:	6800      	ldr	r0, [r0, #0]
 80132f0:	460d      	mov	r5, r1
 80132f2:	f7f7 ff63 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 80132f6:	b910      	cbnz	r0, 80132fe <rmw_destroy_service+0x16>
 80132f8:	2401      	movs	r4, #1
 80132fa:	4620      	mov	r0, r4
 80132fc:	bd70      	pop	{r4, r5, r6, pc}
 80132fe:	6863      	ldr	r3, [r4, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d0f9      	beq.n	80132f8 <rmw_destroy_service+0x10>
 8013304:	2d00      	cmp	r5, #0
 8013306:	d0f7      	beq.n	80132f8 <rmw_destroy_service+0x10>
 8013308:	6828      	ldr	r0, [r5, #0]
 801330a:	f7f7 ff57 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 801330e:	2800      	cmp	r0, #0
 8013310:	d0f2      	beq.n	80132f8 <rmw_destroy_service+0x10>
 8013312:	686e      	ldr	r6, [r5, #4]
 8013314:	2e00      	cmp	r6, #0
 8013316:	d0ef      	beq.n	80132f8 <rmw_destroy_service+0x10>
 8013318:	6864      	ldr	r4, [r4, #4]
 801331a:	6932      	ldr	r2, [r6, #16]
 801331c:	6920      	ldr	r0, [r4, #16]
 801331e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013322:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013326:	6819      	ldr	r1, [r3, #0]
 8013328:	f001 fb9e 	bl	8014a68 <uxr_buffer_cancel_data>
 801332c:	4602      	mov	r2, r0
 801332e:	6920      	ldr	r0, [r4, #16]
 8013330:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013334:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013338:	f7f7 fec0 	bl	800b0bc <run_xrce_session>
 801333c:	6920      	ldr	r0, [r4, #16]
 801333e:	6932      	ldr	r2, [r6, #16]
 8013340:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013344:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013348:	6819      	ldr	r1, [r3, #0]
 801334a:	f7f9 fa17 	bl	800c77c <uxr_buffer_delete_entity>
 801334e:	4602      	mov	r2, r0
 8013350:	6920      	ldr	r0, [r4, #16]
 8013352:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013356:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801335a:	f7f7 feaf 	bl	800b0bc <run_xrce_session>
 801335e:	2800      	cmp	r0, #0
 8013360:	4628      	mov	r0, r5
 8013362:	bf14      	ite	ne
 8013364:	2400      	movne	r4, #0
 8013366:	2402      	moveq	r4, #2
 8013368:	f7f7 fd7a 	bl	800ae60 <rmw_uxrce_fini_service_memory>
 801336c:	e7c5      	b.n	80132fa <rmw_destroy_service+0x12>
 801336e:	bf00      	nop

08013370 <rmw_create_subscription>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	b08d      	sub	sp, #52	@ 0x34
 8013376:	2800      	cmp	r0, #0
 8013378:	f000 80d1 	beq.w	801351e <rmw_create_subscription+0x1ae>
 801337c:	460e      	mov	r6, r1
 801337e:	2900      	cmp	r1, #0
 8013380:	f000 80cd 	beq.w	801351e <rmw_create_subscription+0x1ae>
 8013384:	4604      	mov	r4, r0
 8013386:	6800      	ldr	r0, [r0, #0]
 8013388:	4615      	mov	r5, r2
 801338a:	4698      	mov	r8, r3
 801338c:	f7f7 ff16 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 8013390:	2800      	cmp	r0, #0
 8013392:	f000 80c4 	beq.w	801351e <rmw_create_subscription+0x1ae>
 8013396:	2d00      	cmp	r5, #0
 8013398:	f000 80c1 	beq.w	801351e <rmw_create_subscription+0x1ae>
 801339c:	782b      	ldrb	r3, [r5, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f000 80bd 	beq.w	801351e <rmw_create_subscription+0x1ae>
 80133a4:	f1b8 0f00 	cmp.w	r8, #0
 80133a8:	f000 80b9 	beq.w	801351e <rmw_create_subscription+0x1ae>
 80133ac:	485e      	ldr	r0, [pc, #376]	@ (8013528 <rmw_create_subscription+0x1b8>)
 80133ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80133b2:	f7ff f9c9 	bl	8012748 <get_memory>
 80133b6:	4604      	mov	r4, r0
 80133b8:	2800      	cmp	r0, #0
 80133ba:	f000 80b1 	beq.w	8013520 <rmw_create_subscription+0x1b0>
 80133be:	6887      	ldr	r7, [r0, #8]
 80133c0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80133c4:	f7ff fa28 	bl	8012818 <rmw_get_implementation_identifier>
 80133c8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80133cc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80133ce:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80133d2:	4628      	mov	r0, r5
 80133d4:	f7ec ff0e 	bl	80001f4 <strlen>
 80133d8:	3001      	adds	r0, #1
 80133da:	283c      	cmp	r0, #60	@ 0x3c
 80133dc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80133e0:	f200 8096 	bhi.w	8013510 <rmw_create_subscription+0x1a0>
 80133e4:	4a51      	ldr	r2, [pc, #324]	@ (801352c <rmw_create_subscription+0x1bc>)
 80133e6:	462b      	mov	r3, r5
 80133e8:	213c      	movs	r1, #60	@ 0x3c
 80133ea:	4650      	mov	r0, sl
 80133ec:	f003 f836 	bl	801645c <sniprintf>
 80133f0:	4641      	mov	r1, r8
 80133f2:	f8c7 9020 	str.w	r9, [r7, #32]
 80133f6:	2250      	movs	r2, #80	@ 0x50
 80133f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80133fc:	f003 f9d1 	bl	80167a2 <memcpy>
 8013400:	494b      	ldr	r1, [pc, #300]	@ (8013530 <rmw_create_subscription+0x1c0>)
 8013402:	4630      	mov	r0, r6
 8013404:	f7f7 fee8 	bl	800b1d8 <get_message_typesupport_handle>
 8013408:	2800      	cmp	r0, #0
 801340a:	f000 8081 	beq.w	8013510 <rmw_create_subscription+0x1a0>
 801340e:	6842      	ldr	r2, [r0, #4]
 8013410:	61ba      	str	r2, [r7, #24]
 8013412:	2a00      	cmp	r2, #0
 8013414:	d07c      	beq.n	8013510 <rmw_create_subscription+0x1a0>
 8013416:	4629      	mov	r1, r5
 8013418:	4643      	mov	r3, r8
 801341a:	4648      	mov	r0, r9
 801341c:	f7ff fc8c 	bl	8012d38 <create_topic>
 8013420:	61f8      	str	r0, [r7, #28]
 8013422:	2800      	cmp	r0, #0
 8013424:	d078      	beq.n	8013518 <rmw_create_subscription+0x1a8>
 8013426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801342a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801342e:	2104      	movs	r1, #4
 8013430:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013434:	1c42      	adds	r2, r0, #1
 8013436:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801343a:	f7f9 fba1 	bl	800cb80 <uxr_object_id>
 801343e:	6138      	str	r0, [r7, #16]
 8013440:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013444:	2506      	movs	r5, #6
 8013446:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801344a:	9500      	str	r5, [sp, #0]
 801344c:	6819      	ldr	r1, [r3, #0]
 801344e:	693a      	ldr	r2, [r7, #16]
 8013450:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013454:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013458:	f7f9 fa74 	bl	800c944 <uxr_buffer_create_subscriber_bin>
 801345c:	4602      	mov	r2, r0
 801345e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013462:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013466:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801346a:	f7f7 fe27 	bl	800b0bc <run_xrce_session>
 801346e:	2800      	cmp	r0, #0
 8013470:	d04e      	beq.n	8013510 <rmw_create_subscription+0x1a0>
 8013472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801347a:	4629      	mov	r1, r5
 801347c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8013480:	1c42      	adds	r2, r0, #1
 8013482:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8013486:	f7f9 fb7b 	bl	800cb80 <uxr_object_id>
 801348a:	ae08      	add	r6, sp, #32
 801348c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013490:	69fb      	ldr	r3, [r7, #28]
 8013492:	6178      	str	r0, [r7, #20]
 8013494:	4641      	mov	r1, r8
 8013496:	4630      	mov	r0, r6
 8013498:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801349c:	9305      	str	r3, [sp, #20]
 801349e:	f7f7 fe29 	bl	800b0f4 <convert_qos_profile>
 80134a2:	9503      	str	r5, [sp, #12]
 80134a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80134a8:	9b05      	ldr	r3, [sp, #20]
 80134aa:	9001      	str	r0, [sp, #4]
 80134ac:	f8ad 1008 	strh.w	r1, [sp, #8]
 80134b0:	691b      	ldr	r3, [r3, #16]
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80134b8:	f8db 1000 	ldr.w	r1, [fp]
 80134bc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80134c0:	f7f9 fae6 	bl	800ca90 <uxr_buffer_create_datareader_bin>
 80134c4:	4602      	mov	r2, r0
 80134c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80134ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134d2:	f7f7 fdf3 	bl	800b0bc <run_xrce_session>
 80134d6:	b1d8      	cbz	r0, 8013510 <rmw_create_subscription+0x1a0>
 80134d8:	f898 3008 	ldrb.w	r3, [r8, #8]
 80134dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	bf0c      	ite	eq
 80134e4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80134e8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80134ec:	9307      	str	r3, [sp, #28]
 80134ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80134f2:	2200      	movs	r2, #0
 80134f4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80134f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80134fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	9b07      	ldr	r3, [sp, #28]
 8013504:	6809      	ldr	r1, [r1, #0]
 8013506:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801350a:	f001 fa73 	bl	80149f4 <uxr_buffer_request_data>
 801350e:	e007      	b.n	8013520 <rmw_create_subscription+0x1b0>
 8013510:	69f8      	ldr	r0, [r7, #28]
 8013512:	b108      	cbz	r0, 8013518 <rmw_create_subscription+0x1a8>
 8013514:	f7f7 fcd0 	bl	800aeb8 <rmw_uxrce_fini_topic_memory>
 8013518:	4620      	mov	r0, r4
 801351a:	f7f7 fc8b 	bl	800ae34 <rmw_uxrce_fini_subscription_memory>
 801351e:	2400      	movs	r4, #0
 8013520:	4620      	mov	r0, r4
 8013522:	b00d      	add	sp, #52	@ 0x34
 8013524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013528:	2000dcdc 	.word	0x2000dcdc
 801352c:	080177dc 	.word	0x080177dc
 8013530:	080177a8 	.word	0x080177a8

08013534 <rmw_subscription_get_actual_qos>:
 8013534:	b150      	cbz	r0, 801354c <rmw_subscription_get_actual_qos+0x18>
 8013536:	b508      	push	{r3, lr}
 8013538:	460b      	mov	r3, r1
 801353a:	b149      	cbz	r1, 8013550 <rmw_subscription_get_actual_qos+0x1c>
 801353c:	6841      	ldr	r1, [r0, #4]
 801353e:	2250      	movs	r2, #80	@ 0x50
 8013540:	3128      	adds	r1, #40	@ 0x28
 8013542:	4618      	mov	r0, r3
 8013544:	f003 f92d 	bl	80167a2 <memcpy>
 8013548:	2000      	movs	r0, #0
 801354a:	bd08      	pop	{r3, pc}
 801354c:	200b      	movs	r0, #11
 801354e:	4770      	bx	lr
 8013550:	200b      	movs	r0, #11
 8013552:	bd08      	pop	{r3, pc}

08013554 <rmw_destroy_subscription>:
 8013554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013556:	b128      	cbz	r0, 8013564 <rmw_destroy_subscription+0x10>
 8013558:	4604      	mov	r4, r0
 801355a:	6800      	ldr	r0, [r0, #0]
 801355c:	460d      	mov	r5, r1
 801355e:	f7f7 fe2d 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 8013562:	b910      	cbnz	r0, 801356a <rmw_destroy_subscription+0x16>
 8013564:	2401      	movs	r4, #1
 8013566:	4620      	mov	r0, r4
 8013568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801356a:	6863      	ldr	r3, [r4, #4]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d0f9      	beq.n	8013564 <rmw_destroy_subscription+0x10>
 8013570:	2d00      	cmp	r5, #0
 8013572:	d0f7      	beq.n	8013564 <rmw_destroy_subscription+0x10>
 8013574:	6828      	ldr	r0, [r5, #0]
 8013576:	f7f7 fe21 	bl	800b1bc <is_uxrce_rmw_identifier_valid>
 801357a:	2800      	cmp	r0, #0
 801357c:	d0f2      	beq.n	8013564 <rmw_destroy_subscription+0x10>
 801357e:	686c      	ldr	r4, [r5, #4]
 8013580:	2c00      	cmp	r4, #0
 8013582:	d0ef      	beq.n	8013564 <rmw_destroy_subscription+0x10>
 8013584:	6a26      	ldr	r6, [r4, #32]
 8013586:	6962      	ldr	r2, [r4, #20]
 8013588:	6930      	ldr	r0, [r6, #16]
 801358a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801358e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013592:	6819      	ldr	r1, [r3, #0]
 8013594:	f001 fa68 	bl	8014a68 <uxr_buffer_cancel_data>
 8013598:	4602      	mov	r2, r0
 801359a:	6930      	ldr	r0, [r6, #16]
 801359c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135a4:	f7f7 fd8a 	bl	800b0bc <run_xrce_session>
 80135a8:	69e0      	ldr	r0, [r4, #28]
 80135aa:	f7ff fc15 	bl	8012dd8 <destroy_topic>
 80135ae:	6a23      	ldr	r3, [r4, #32]
 80135b0:	6962      	ldr	r2, [r4, #20]
 80135b2:	6918      	ldr	r0, [r3, #16]
 80135b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135bc:	6819      	ldr	r1, [r3, #0]
 80135be:	f7f9 f8dd 	bl	800c77c <uxr_buffer_delete_entity>
 80135c2:	6a23      	ldr	r3, [r4, #32]
 80135c4:	6922      	ldr	r2, [r4, #16]
 80135c6:	691b      	ldr	r3, [r3, #16]
 80135c8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80135cc:	4604      	mov	r4, r0
 80135ce:	6809      	ldr	r1, [r1, #0]
 80135d0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80135d4:	f7f9 f8d2 	bl	800c77c <uxr_buffer_delete_entity>
 80135d8:	6937      	ldr	r7, [r6, #16]
 80135da:	4622      	mov	r2, r4
 80135dc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80135e0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80135e4:	4604      	mov	r4, r0
 80135e6:	4638      	mov	r0, r7
 80135e8:	f7f7 fd68 	bl	800b0bc <run_xrce_session>
 80135ec:	6936      	ldr	r6, [r6, #16]
 80135ee:	4622      	mov	r2, r4
 80135f0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80135f4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80135f8:	4604      	mov	r4, r0
 80135fa:	4630      	mov	r0, r6
 80135fc:	f7f7 fd5e 	bl	800b0bc <run_xrce_session>
 8013600:	b12c      	cbz	r4, 801360e <rmw_destroy_subscription+0xba>
 8013602:	b120      	cbz	r0, 801360e <rmw_destroy_subscription+0xba>
 8013604:	2400      	movs	r4, #0
 8013606:	4628      	mov	r0, r5
 8013608:	f7f7 fc14 	bl	800ae34 <rmw_uxrce_fini_subscription_memory>
 801360c:	e7ab      	b.n	8013566 <rmw_destroy_subscription+0x12>
 801360e:	2402      	movs	r4, #2
 8013610:	e7f9      	b.n	8013606 <rmw_destroy_subscription+0xb2>
 8013612:	bf00      	nop

08013614 <rmw_take_with_info>:
 8013614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013616:	4604      	mov	r4, r0
 8013618:	6800      	ldr	r0, [r0, #0]
 801361a:	b089      	sub	sp, #36	@ 0x24
 801361c:	460f      	mov	r7, r1
 801361e:	4615      	mov	r5, r2
 8013620:	b128      	cbz	r0, 801362e <rmw_take_with_info+0x1a>
 8013622:	4b24      	ldr	r3, [pc, #144]	@ (80136b4 <rmw_take_with_info+0xa0>)
 8013624:	6819      	ldr	r1, [r3, #0]
 8013626:	f7ec fddb 	bl	80001e0 <strcmp>
 801362a:	2800      	cmp	r0, #0
 801362c:	d13e      	bne.n	80136ac <rmw_take_with_info+0x98>
 801362e:	b305      	cbz	r5, 8013672 <rmw_take_with_info+0x5e>
 8013630:	6864      	ldr	r4, [r4, #4]
 8013632:	2300      	movs	r3, #0
 8013634:	702b      	strb	r3, [r5, #0]
 8013636:	f7f7 fcc3 	bl	800afc0 <rmw_uxrce_clean_expired_static_input_buffer>
 801363a:	4620      	mov	r0, r4
 801363c:	f7f7 fc98 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013640:	4606      	mov	r6, r0
 8013642:	b1f0      	cbz	r0, 8013682 <rmw_take_with_info+0x6e>
 8013644:	6881      	ldr	r1, [r0, #8]
 8013646:	4668      	mov	r0, sp
 8013648:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801364c:	3110      	adds	r1, #16
 801364e:	f7f9 f825 	bl	800c69c <ucdr_init_buffer>
 8013652:	69a3      	ldr	r3, [r4, #24]
 8013654:	4639      	mov	r1, r7
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	4668      	mov	r0, sp
 801365a:	4798      	blx	r3
 801365c:	4631      	mov	r1, r6
 801365e:	4604      	mov	r4, r0
 8013660:	4815      	ldr	r0, [pc, #84]	@ (80136b8 <rmw_take_with_info+0xa4>)
 8013662:	f7ff f881 	bl	8012768 <put_memory>
 8013666:	702c      	strb	r4, [r5, #0]
 8013668:	f084 0001 	eor.w	r0, r4, #1
 801366c:	b2c0      	uxtb	r0, r0
 801366e:	b009      	add	sp, #36	@ 0x24
 8013670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013672:	6864      	ldr	r4, [r4, #4]
 8013674:	f7f7 fca4 	bl	800afc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013678:	4620      	mov	r0, r4
 801367a:	f7f7 fc79 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 801367e:	4605      	mov	r5, r0
 8013680:	b910      	cbnz	r0, 8013688 <rmw_take_with_info+0x74>
 8013682:	2001      	movs	r0, #1
 8013684:	b009      	add	sp, #36	@ 0x24
 8013686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013688:	68a9      	ldr	r1, [r5, #8]
 801368a:	4668      	mov	r0, sp
 801368c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013690:	3110      	adds	r1, #16
 8013692:	f7f9 f803 	bl	800c69c <ucdr_init_buffer>
 8013696:	69a3      	ldr	r3, [r4, #24]
 8013698:	4639      	mov	r1, r7
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	4668      	mov	r0, sp
 801369e:	4798      	blx	r3
 80136a0:	4629      	mov	r1, r5
 80136a2:	4604      	mov	r4, r0
 80136a4:	4804      	ldr	r0, [pc, #16]	@ (80136b8 <rmw_take_with_info+0xa4>)
 80136a6:	f7ff f85f 	bl	8012768 <put_memory>
 80136aa:	e7dd      	b.n	8013668 <rmw_take_with_info+0x54>
 80136ac:	200c      	movs	r0, #12
 80136ae:	b009      	add	sp, #36	@ 0x24
 80136b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b2:	bf00      	nop
 80136b4:	08017f7c 	.word	0x08017f7c
 80136b8:	2000dccc 	.word	0x2000dccc

080136bc <rmw_uxrce_transport_init>:
 80136bc:	b508      	push	{r3, lr}
 80136be:	b108      	cbz	r0, 80136c4 <rmw_uxrce_transport_init+0x8>
 80136c0:	f100 0210 	add.w	r2, r0, #16
 80136c4:	b139      	cbz	r1, 80136d6 <rmw_uxrce_transport_init+0x1a>
 80136c6:	6949      	ldr	r1, [r1, #20]
 80136c8:	4610      	mov	r0, r2
 80136ca:	f000 fc13 	bl	8013ef4 <uxr_init_custom_transport>
 80136ce:	f080 0001 	eor.w	r0, r0, #1
 80136d2:	b2c0      	uxtb	r0, r0
 80136d4:	bd08      	pop	{r3, pc}
 80136d6:	4b04      	ldr	r3, [pc, #16]	@ (80136e8 <rmw_uxrce_transport_init+0x2c>)
 80136d8:	4610      	mov	r0, r2
 80136da:	6859      	ldr	r1, [r3, #4]
 80136dc:	f000 fc0a 	bl	8013ef4 <uxr_init_custom_transport>
 80136e0:	f080 0001 	eor.w	r0, r0, #1
 80136e4:	b2c0      	uxtb	r0, r0
 80136e6:	bd08      	pop	{r3, pc}
 80136e8:	200093a4 	.word	0x200093a4

080136ec <rmw_wait>:
 80136ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136f0:	b089      	sub	sp, #36	@ 0x24
 80136f2:	4605      	mov	r5, r0
 80136f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80136f6:	460e      	mov	r6, r1
 80136f8:	4698      	mov	r8, r3
 80136fa:	4691      	mov	r9, r2
 80136fc:	2a00      	cmp	r2, #0
 80136fe:	f000 810a 	beq.w	8013916 <rmw_wait+0x22a>
 8013702:	b16c      	cbz	r4, 8013720 <rmw_wait+0x34>
 8013704:	4bae      	ldr	r3, [pc, #696]	@ (80139c0 <rmw_wait+0x2d4>)
 8013706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013708:	af04      	add	r7, sp, #16
 801370a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801370e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013716:	f7fe fe4b 	bl	80123b0 <rmw_time_equal>
 801371a:	2800      	cmp	r0, #0
 801371c:	f000 8127 	beq.w	801396e <rmw_wait+0x282>
 8013720:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013724:	f7f7 fc4c 	bl	800afc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013728:	4ba6      	ldr	r3, [pc, #664]	@ (80139c4 <rmw_wait+0x2d8>)
 801372a:	681c      	ldr	r4, [r3, #0]
 801372c:	b14c      	cbz	r4, 8013742 <rmw_wait+0x56>
 801372e:	4623      	mov	r3, r4
 8013730:	2100      	movs	r1, #0
 8013732:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013736:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801373a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1f7      	bne.n	8013732 <rmw_wait+0x46>
 8013742:	f1b9 0f00 	cmp.w	r9, #0
 8013746:	d011      	beq.n	801376c <rmw_wait+0x80>
 8013748:	f8d9 1000 	ldr.w	r1, [r9]
 801374c:	b171      	cbz	r1, 801376c <rmw_wait+0x80>
 801374e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013752:	2300      	movs	r3, #0
 8013754:	2001      	movs	r0, #1
 8013756:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801375a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801375c:	6912      	ldr	r2, [r2, #16]
 801375e:	3301      	adds	r3, #1
 8013760:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013764:	4299      	cmp	r1, r3
 8013766:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801376a:	d1f4      	bne.n	8013756 <rmw_wait+0x6a>
 801376c:	f1b8 0f00 	cmp.w	r8, #0
 8013770:	d011      	beq.n	8013796 <rmw_wait+0xaa>
 8013772:	f8d8 1000 	ldr.w	r1, [r8]
 8013776:	b171      	cbz	r1, 8013796 <rmw_wait+0xaa>
 8013778:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801377c:	2300      	movs	r3, #0
 801377e:	2001      	movs	r0, #1
 8013780:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013784:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013786:	6912      	ldr	r2, [r2, #16]
 8013788:	3301      	adds	r3, #1
 801378a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801378e:	4299      	cmp	r1, r3
 8013790:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013794:	d1f4      	bne.n	8013780 <rmw_wait+0x94>
 8013796:	b185      	cbz	r5, 80137ba <rmw_wait+0xce>
 8013798:	6829      	ldr	r1, [r5, #0]
 801379a:	b171      	cbz	r1, 80137ba <rmw_wait+0xce>
 801379c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80137a0:	2300      	movs	r3, #0
 80137a2:	2001      	movs	r0, #1
 80137a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80137a8:	6a12      	ldr	r2, [r2, #32]
 80137aa:	6912      	ldr	r2, [r2, #16]
 80137ac:	3301      	adds	r3, #1
 80137ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80137b2:	4299      	cmp	r1, r3
 80137b4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80137b8:	d1f4      	bne.n	80137a4 <rmw_wait+0xb8>
 80137ba:	b34c      	cbz	r4, 8013810 <rmw_wait+0x124>
 80137bc:	4622      	mov	r2, r4
 80137be:	2300      	movs	r3, #0
 80137c0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80137c4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80137c8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80137cc:	440b      	add	r3, r1
 80137ce:	b2db      	uxtb	r3, r3
 80137d0:	2a00      	cmp	r2, #0
 80137d2:	d1f5      	bne.n	80137c0 <rmw_wait+0xd4>
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 8084 	beq.w	80138e2 <rmw_wait+0x1f6>
 80137da:	1c7a      	adds	r2, r7, #1
 80137dc:	d00d      	beq.n	80137fa <rmw_wait+0x10e>
 80137de:	ee07 7a90 	vmov	s15, r7
 80137e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80137e6:	ee07 3a90 	vmov	s15, r3
 80137ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80137f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80137f6:	ee17 7a90 	vmov	r7, s15
 80137fa:	68a0      	ldr	r0, [r4, #8]
 80137fc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013800:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013804:	2b00      	cmp	r3, #0
 8013806:	f040 8090 	bne.w	801392a <rmw_wait+0x23e>
 801380a:	6864      	ldr	r4, [r4, #4]
 801380c:	2c00      	cmp	r4, #0
 801380e:	d1f4      	bne.n	80137fa <rmw_wait+0x10e>
 8013810:	f1b9 0f00 	cmp.w	r9, #0
 8013814:	f000 80bc 	beq.w	8013990 <rmw_wait+0x2a4>
 8013818:	f8d9 7000 	ldr.w	r7, [r9]
 801381c:	2f00      	cmp	r7, #0
 801381e:	f000 808e 	beq.w	801393e <rmw_wait+0x252>
 8013822:	2400      	movs	r4, #0
 8013824:	4627      	mov	r7, r4
 8013826:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801382a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801382e:	f7f7 fb9f 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013832:	2800      	cmp	r0, #0
 8013834:	d05f      	beq.n	80138f6 <rmw_wait+0x20a>
 8013836:	f8d9 3000 	ldr.w	r3, [r9]
 801383a:	3401      	adds	r4, #1
 801383c:	42a3      	cmp	r3, r4
 801383e:	f04f 0701 	mov.w	r7, #1
 8013842:	d8f0      	bhi.n	8013826 <rmw_wait+0x13a>
 8013844:	f1b8 0f00 	cmp.w	r8, #0
 8013848:	d012      	beq.n	8013870 <rmw_wait+0x184>
 801384a:	f8d8 3000 	ldr.w	r3, [r8]
 801384e:	b17b      	cbz	r3, 8013870 <rmw_wait+0x184>
 8013850:	2400      	movs	r4, #0
 8013852:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013856:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801385a:	f7f7 fb89 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 801385e:	2800      	cmp	r0, #0
 8013860:	d051      	beq.n	8013906 <rmw_wait+0x21a>
 8013862:	f8d8 3000 	ldr.w	r3, [r8]
 8013866:	3401      	adds	r4, #1
 8013868:	42a3      	cmp	r3, r4
 801386a:	f04f 0701 	mov.w	r7, #1
 801386e:	d8f0      	bhi.n	8013852 <rmw_wait+0x166>
 8013870:	b1dd      	cbz	r5, 80138aa <rmw_wait+0x1be>
 8013872:	682b      	ldr	r3, [r5, #0]
 8013874:	b1cb      	cbz	r3, 80138aa <rmw_wait+0x1be>
 8013876:	2400      	movs	r4, #0
 8013878:	686b      	ldr	r3, [r5, #4]
 801387a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801387e:	f7f7 fb77 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013882:	b158      	cbz	r0, 801389c <rmw_wait+0x1b0>
 8013884:	682b      	ldr	r3, [r5, #0]
 8013886:	3401      	adds	r4, #1
 8013888:	42a3      	cmp	r3, r4
 801388a:	d969      	bls.n	8013960 <rmw_wait+0x274>
 801388c:	686b      	ldr	r3, [r5, #4]
 801388e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013892:	2701      	movs	r7, #1
 8013894:	f7f7 fb6c 	bl	800af70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013898:	2800      	cmp	r0, #0
 801389a:	d1f3      	bne.n	8013884 <rmw_wait+0x198>
 801389c:	e9d5 3200 	ldrd	r3, r2, [r5]
 80138a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138a4:	3401      	adds	r4, #1
 80138a6:	42a3      	cmp	r3, r4
 80138a8:	d8e6      	bhi.n	8013878 <rmw_wait+0x18c>
 80138aa:	b1a6      	cbz	r6, 80138d6 <rmw_wait+0x1ea>
 80138ac:	6834      	ldr	r4, [r6, #0]
 80138ae:	b194      	cbz	r4, 80138d6 <rmw_wait+0x1ea>
 80138b0:	2300      	movs	r3, #0
 80138b2:	461d      	mov	r5, r3
 80138b4:	e004      	b.n	80138c0 <rmw_wait+0x1d4>
 80138b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80138ba:	3301      	adds	r3, #1
 80138bc:	42a3      	cmp	r3, r4
 80138be:	d00a      	beq.n	80138d6 <rmw_wait+0x1ea>
 80138c0:	6870      	ldr	r0, [r6, #4]
 80138c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80138c6:	7c0a      	ldrb	r2, [r1, #16]
 80138c8:	2a00      	cmp	r2, #0
 80138ca:	d0f4      	beq.n	80138b6 <rmw_wait+0x1ca>
 80138cc:	3301      	adds	r3, #1
 80138ce:	42a3      	cmp	r3, r4
 80138d0:	740d      	strb	r5, [r1, #16]
 80138d2:	4617      	mov	r7, r2
 80138d4:	d1f4      	bne.n	80138c0 <rmw_wait+0x1d4>
 80138d6:	2f00      	cmp	r7, #0
 80138d8:	d03e      	beq.n	8013958 <rmw_wait+0x26c>
 80138da:	2000      	movs	r0, #0
 80138dc:	b009      	add	sp, #36	@ 0x24
 80138de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e2:	68a0      	ldr	r0, [r4, #8]
 80138e4:	2100      	movs	r1, #0
 80138e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138ea:	f7f9 fe1f 	bl	800d52c <uxr_run_session_timeout>
 80138ee:	6864      	ldr	r4, [r4, #4]
 80138f0:	2c00      	cmp	r4, #0
 80138f2:	d1f6      	bne.n	80138e2 <rmw_wait+0x1f6>
 80138f4:	e78c      	b.n	8013810 <rmw_wait+0x124>
 80138f6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80138fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138fe:	3401      	adds	r4, #1
 8013900:	42a3      	cmp	r3, r4
 8013902:	d890      	bhi.n	8013826 <rmw_wait+0x13a>
 8013904:	e79e      	b.n	8013844 <rmw_wait+0x158>
 8013906:	e9d8 3200 	ldrd	r3, r2, [r8]
 801390a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801390e:	3401      	adds	r4, #1
 8013910:	429c      	cmp	r4, r3
 8013912:	d39e      	bcc.n	8013852 <rmw_wait+0x166>
 8013914:	e7ac      	b.n	8013870 <rmw_wait+0x184>
 8013916:	2b00      	cmp	r3, #0
 8013918:	f47f aef3 	bne.w	8013702 <rmw_wait+0x16>
 801391c:	2800      	cmp	r0, #0
 801391e:	f47f aef0 	bne.w	8013702 <rmw_wait+0x16>
 8013922:	2900      	cmp	r1, #0
 8013924:	f47f aeed 	bne.w	8013702 <rmw_wait+0x16>
 8013928:	e7d7      	b.n	80138da <rmw_wait+0x1ee>
 801392a:	4639      	mov	r1, r7
 801392c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013930:	f7f9 fe16 	bl	800d560 <uxr_run_session_until_data>
 8013934:	6864      	ldr	r4, [r4, #4]
 8013936:	2c00      	cmp	r4, #0
 8013938:	f47f af5f 	bne.w	80137fa <rmw_wait+0x10e>
 801393c:	e768      	b.n	8013810 <rmw_wait+0x124>
 801393e:	f1b8 0f00 	cmp.w	r8, #0
 8013942:	d032      	beq.n	80139aa <rmw_wait+0x2be>
 8013944:	f8d8 3000 	ldr.w	r3, [r8]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d181      	bne.n	8013850 <rmw_wait+0x164>
 801394c:	461f      	mov	r7, r3
 801394e:	2d00      	cmp	r5, #0
 8013950:	d18f      	bne.n	8013872 <rmw_wait+0x186>
 8013952:	462f      	mov	r7, r5
 8013954:	2e00      	cmp	r6, #0
 8013956:	d1a9      	bne.n	80138ac <rmw_wait+0x1c0>
 8013958:	2002      	movs	r0, #2
 801395a:	b009      	add	sp, #36	@ 0x24
 801395c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013960:	2e00      	cmp	r6, #0
 8013962:	d0ba      	beq.n	80138da <rmw_wait+0x1ee>
 8013964:	6834      	ldr	r4, [r6, #0]
 8013966:	2701      	movs	r7, #1
 8013968:	2c00      	cmp	r4, #0
 801396a:	d1a1      	bne.n	80138b0 <rmw_wait+0x1c4>
 801396c:	e7b5      	b.n	80138da <rmw_wait+0x1ee>
 801396e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013972:	f7fe fd71 	bl	8012458 <rmw_time_total_nsec>
 8013976:	2300      	movs	r3, #0
 8013978:	4a13      	ldr	r2, [pc, #76]	@ (80139c8 <rmw_wait+0x2dc>)
 801397a:	f7ed f83f 	bl	80009fc <__aeabi_uldivmod>
 801397e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013982:	f171 0300 	sbcs.w	r3, r1, #0
 8013986:	4607      	mov	r7, r0
 8013988:	bfa8      	it	ge
 801398a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801398e:	e6c9      	b.n	8013724 <rmw_wait+0x38>
 8013990:	f1b8 0f00 	cmp.w	r8, #0
 8013994:	d009      	beq.n	80139aa <rmw_wait+0x2be>
 8013996:	f8d8 3000 	ldr.w	r3, [r8]
 801399a:	464f      	mov	r7, r9
 801399c:	2b00      	cmp	r3, #0
 801399e:	f47f af57 	bne.w	8013850 <rmw_wait+0x164>
 80139a2:	2d00      	cmp	r5, #0
 80139a4:	f47f af65 	bne.w	8013872 <rmw_wait+0x186>
 80139a8:	e7d3      	b.n	8013952 <rmw_wait+0x266>
 80139aa:	b17d      	cbz	r5, 80139cc <rmw_wait+0x2e0>
 80139ac:	682b      	ldr	r3, [r5, #0]
 80139ae:	4647      	mov	r7, r8
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f47f af60 	bne.w	8013876 <rmw_wait+0x18a>
 80139b6:	2e00      	cmp	r6, #0
 80139b8:	f47f af78 	bne.w	80138ac <rmw_wait+0x1c0>
 80139bc:	e7cc      	b.n	8013958 <rmw_wait+0x26c>
 80139be:	bf00      	nop
 80139c0:	080175c0 	.word	0x080175c0
 80139c4:	2000dcbc 	.word	0x2000dcbc
 80139c8:	000f4240 	.word	0x000f4240
 80139cc:	2e00      	cmp	r6, #0
 80139ce:	d0c3      	beq.n	8013958 <rmw_wait+0x26c>
 80139d0:	6834      	ldr	r4, [r6, #0]
 80139d2:	462f      	mov	r7, r5
 80139d4:	2c00      	cmp	r4, #0
 80139d6:	f47f af6b 	bne.w	80138b0 <rmw_wait+0x1c4>
 80139da:	e7bd      	b.n	8013958 <rmw_wait+0x26c>

080139dc <rmw_create_wait_set>:
 80139dc:	b508      	push	{r3, lr}
 80139de:	4803      	ldr	r0, [pc, #12]	@ (80139ec <rmw_create_wait_set+0x10>)
 80139e0:	f7fe feb2 	bl	8012748 <get_memory>
 80139e4:	b108      	cbz	r0, 80139ea <rmw_create_wait_set+0xe>
 80139e6:	6880      	ldr	r0, [r0, #8]
 80139e8:	3010      	adds	r0, #16
 80139ea:	bd08      	pop	{r3, pc}
 80139ec:	2000dcfc 	.word	0x2000dcfc

080139f0 <rmw_destroy_wait_set>:
 80139f0:	b508      	push	{r3, lr}
 80139f2:	4b08      	ldr	r3, [pc, #32]	@ (8013a14 <rmw_destroy_wait_set+0x24>)
 80139f4:	6819      	ldr	r1, [r3, #0]
 80139f6:	b911      	cbnz	r1, 80139fe <rmw_destroy_wait_set+0xe>
 80139f8:	e00a      	b.n	8013a10 <rmw_destroy_wait_set+0x20>
 80139fa:	6849      	ldr	r1, [r1, #4]
 80139fc:	b141      	cbz	r1, 8013a10 <rmw_destroy_wait_set+0x20>
 80139fe:	688b      	ldr	r3, [r1, #8]
 8013a00:	3310      	adds	r3, #16
 8013a02:	4298      	cmp	r0, r3
 8013a04:	d1f9      	bne.n	80139fa <rmw_destroy_wait_set+0xa>
 8013a06:	4803      	ldr	r0, [pc, #12]	@ (8013a14 <rmw_destroy_wait_set+0x24>)
 8013a08:	f7fe feae 	bl	8012768 <put_memory>
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	bd08      	pop	{r3, pc}
 8013a10:	2001      	movs	r0, #1
 8013a12:	bd08      	pop	{r3, pc}
 8013a14:	2000dcfc 	.word	0x2000dcfc

08013a18 <rmw_uros_epoch_nanos>:
 8013a18:	4b05      	ldr	r3, [pc, #20]	@ (8013a30 <rmw_uros_epoch_nanos+0x18>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	b123      	cbz	r3, 8013a28 <rmw_uros_epoch_nanos+0x10>
 8013a1e:	6898      	ldr	r0, [r3, #8]
 8013a20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a24:	f7f9 b9f2 	b.w	800ce0c <uxr_epoch_nanos>
 8013a28:	2000      	movs	r0, #0
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	2000dcbc 	.word	0x2000dcbc

08013a34 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a38:	6805      	ldr	r5, [r0, #0]
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	460e      	mov	r6, r1
 8013a40:	f7ec fbce 	bl	80001e0 <strcmp>
 8013a44:	b1c8      	cbz	r0, 8013a7a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013a46:	4b11      	ldr	r3, [pc, #68]	@ (8013a8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	429d      	cmp	r5, r3
 8013a4c:	d112      	bne.n	8013a74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013a52:	f8d8 4000 	ldr.w	r4, [r8]
 8013a56:	b16c      	cbz	r4, 8013a74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a58:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013a5c:	2700      	movs	r7, #0
 8013a5e:	3d04      	subs	r5, #4
 8013a60:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013a64:	4631      	mov	r1, r6
 8013a66:	f7ec fbbb 	bl	80001e0 <strcmp>
 8013a6a:	00bb      	lsls	r3, r7, #2
 8013a6c:	b140      	cbz	r0, 8013a80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013a6e:	3701      	adds	r7, #1
 8013a70:	42bc      	cmp	r4, r7
 8013a72:	d1f5      	bne.n	8013a60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013a74:	2000      	movs	r0, #0
 8013a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a88:	58d3      	ldr	r3, [r2, r3]
 8013a8a:	4718      	bx	r3
 8013a8c:	200002a0 	.word	0x200002a0

08013a90 <rover_msgs__msg__ControllerMsg__init>:
 8013a90:	3800      	subs	r0, #0
 8013a92:	bf18      	it	ne
 8013a94:	2001      	movne	r0, #1
 8013a96:	4770      	bx	lr

08013a98 <rover_msgs__msg__ControllerMsg__fini>:
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop

08013a9c <rover_msgs__msg__EncoderMsg__init>:
 8013a9c:	3800      	subs	r0, #0
 8013a9e:	bf18      	it	ne
 8013aa0:	2001      	movne	r0, #1
 8013aa2:	4770      	bx	lr

08013aa4 <rover_msgs__msg__EncoderMsg__fini>:
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop

08013aa8 <ucdr_serialize_endian_array_char>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	4619      	mov	r1, r3
 8013aae:	461f      	mov	r7, r3
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	4690      	mov	r8, r2
 8013ab4:	f7f8 fd9e 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013ab8:	b9e0      	cbnz	r0, 8013af4 <ucdr_serialize_endian_array_char+0x4c>
 8013aba:	463e      	mov	r6, r7
 8013abc:	e009      	b.n	8013ad2 <ucdr_serialize_endian_array_char+0x2a>
 8013abe:	68a8      	ldr	r0, [r5, #8]
 8013ac0:	f002 fe6f 	bl	80167a2 <memcpy>
 8013ac4:	68ab      	ldr	r3, [r5, #8]
 8013ac6:	6928      	ldr	r0, [r5, #16]
 8013ac8:	4423      	add	r3, r4
 8013aca:	4420      	add	r0, r4
 8013acc:	1b36      	subs	r6, r6, r4
 8013ace:	60ab      	str	r3, [r5, #8]
 8013ad0:	6128      	str	r0, [r5, #16]
 8013ad2:	4631      	mov	r1, r6
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f7f8 fe14 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013adc:	1bb9      	subs	r1, r7, r6
 8013ade:	4441      	add	r1, r8
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d1ea      	bne.n	8013abe <ucdr_serialize_endian_array_char+0x16>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	7da8      	ldrb	r0, [r5, #22]
 8013aec:	756b      	strb	r3, [r5, #21]
 8013aee:	4058      	eors	r0, r3
 8013af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af4:	463a      	mov	r2, r7
 8013af6:	68a8      	ldr	r0, [r5, #8]
 8013af8:	4641      	mov	r1, r8
 8013afa:	f002 fe52 	bl	80167a2 <memcpy>
 8013afe:	68aa      	ldr	r2, [r5, #8]
 8013b00:	692b      	ldr	r3, [r5, #16]
 8013b02:	443a      	add	r2, r7
 8013b04:	443b      	add	r3, r7
 8013b06:	60aa      	str	r2, [r5, #8]
 8013b08:	612b      	str	r3, [r5, #16]
 8013b0a:	e7ed      	b.n	8013ae8 <ucdr_serialize_endian_array_char+0x40>

08013b0c <ucdr_deserialize_endian_array_char>:
 8013b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b10:	4619      	mov	r1, r3
 8013b12:	461f      	mov	r7, r3
 8013b14:	4605      	mov	r5, r0
 8013b16:	4690      	mov	r8, r2
 8013b18:	f7f8 fd6c 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013b1c:	b9e0      	cbnz	r0, 8013b58 <ucdr_deserialize_endian_array_char+0x4c>
 8013b1e:	463e      	mov	r6, r7
 8013b20:	e009      	b.n	8013b36 <ucdr_deserialize_endian_array_char+0x2a>
 8013b22:	68a9      	ldr	r1, [r5, #8]
 8013b24:	f002 fe3d 	bl	80167a2 <memcpy>
 8013b28:	68ab      	ldr	r3, [r5, #8]
 8013b2a:	6928      	ldr	r0, [r5, #16]
 8013b2c:	4423      	add	r3, r4
 8013b2e:	4420      	add	r0, r4
 8013b30:	1b36      	subs	r6, r6, r4
 8013b32:	60ab      	str	r3, [r5, #8]
 8013b34:	6128      	str	r0, [r5, #16]
 8013b36:	2201      	movs	r2, #1
 8013b38:	4631      	mov	r1, r6
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f7f8 fde2 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013b40:	4604      	mov	r4, r0
 8013b42:	1bb8      	subs	r0, r7, r6
 8013b44:	4440      	add	r0, r8
 8013b46:	4622      	mov	r2, r4
 8013b48:	2c00      	cmp	r4, #0
 8013b4a:	d1ea      	bne.n	8013b22 <ucdr_deserialize_endian_array_char+0x16>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	7da8      	ldrb	r0, [r5, #22]
 8013b50:	756b      	strb	r3, [r5, #21]
 8013b52:	4058      	eors	r0, r3
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	463a      	mov	r2, r7
 8013b5a:	68a9      	ldr	r1, [r5, #8]
 8013b5c:	4640      	mov	r0, r8
 8013b5e:	f002 fe20 	bl	80167a2 <memcpy>
 8013b62:	68aa      	ldr	r2, [r5, #8]
 8013b64:	692b      	ldr	r3, [r5, #16]
 8013b66:	443a      	add	r2, r7
 8013b68:	443b      	add	r3, r7
 8013b6a:	60aa      	str	r2, [r5, #8]
 8013b6c:	612b      	str	r3, [r5, #16]
 8013b6e:	e7ed      	b.n	8013b4c <ucdr_deserialize_endian_array_char+0x40>

08013b70 <ucdr_serialize_array_uint8_t>:
 8013b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b74:	4688      	mov	r8, r1
 8013b76:	4611      	mov	r1, r2
 8013b78:	4617      	mov	r7, r2
 8013b7a:	4605      	mov	r5, r0
 8013b7c:	f7f8 fd3a 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013b80:	b9e0      	cbnz	r0, 8013bbc <ucdr_serialize_array_uint8_t+0x4c>
 8013b82:	463e      	mov	r6, r7
 8013b84:	e009      	b.n	8013b9a <ucdr_serialize_array_uint8_t+0x2a>
 8013b86:	68a8      	ldr	r0, [r5, #8]
 8013b88:	f002 fe0b 	bl	80167a2 <memcpy>
 8013b8c:	68aa      	ldr	r2, [r5, #8]
 8013b8e:	692b      	ldr	r3, [r5, #16]
 8013b90:	4422      	add	r2, r4
 8013b92:	4423      	add	r3, r4
 8013b94:	1b36      	subs	r6, r6, r4
 8013b96:	60aa      	str	r2, [r5, #8]
 8013b98:	612b      	str	r3, [r5, #16]
 8013b9a:	4631      	mov	r1, r6
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f7f8 fdb0 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013ba4:	1bb9      	subs	r1, r7, r6
 8013ba6:	4441      	add	r1, r8
 8013ba8:	4604      	mov	r4, r0
 8013baa:	4602      	mov	r2, r0
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d1ea      	bne.n	8013b86 <ucdr_serialize_array_uint8_t+0x16>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	7da8      	ldrb	r0, [r5, #22]
 8013bb4:	756b      	strb	r3, [r5, #21]
 8013bb6:	4058      	eors	r0, r3
 8013bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bbc:	463a      	mov	r2, r7
 8013bbe:	68a8      	ldr	r0, [r5, #8]
 8013bc0:	4641      	mov	r1, r8
 8013bc2:	f002 fdee 	bl	80167a2 <memcpy>
 8013bc6:	68aa      	ldr	r2, [r5, #8]
 8013bc8:	692b      	ldr	r3, [r5, #16]
 8013bca:	443a      	add	r2, r7
 8013bcc:	443b      	add	r3, r7
 8013bce:	60aa      	str	r2, [r5, #8]
 8013bd0:	612b      	str	r3, [r5, #16]
 8013bd2:	e7ed      	b.n	8013bb0 <ucdr_serialize_array_uint8_t+0x40>

08013bd4 <ucdr_serialize_endian_array_uint8_t>:
 8013bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	4619      	mov	r1, r3
 8013bda:	461f      	mov	r7, r3
 8013bdc:	4605      	mov	r5, r0
 8013bde:	4690      	mov	r8, r2
 8013be0:	f7f8 fd08 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013be4:	b9e0      	cbnz	r0, 8013c20 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013be6:	463e      	mov	r6, r7
 8013be8:	e009      	b.n	8013bfe <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013bea:	68a8      	ldr	r0, [r5, #8]
 8013bec:	f002 fdd9 	bl	80167a2 <memcpy>
 8013bf0:	68ab      	ldr	r3, [r5, #8]
 8013bf2:	6928      	ldr	r0, [r5, #16]
 8013bf4:	4423      	add	r3, r4
 8013bf6:	4420      	add	r0, r4
 8013bf8:	1b36      	subs	r6, r6, r4
 8013bfa:	60ab      	str	r3, [r5, #8]
 8013bfc:	6128      	str	r0, [r5, #16]
 8013bfe:	4631      	mov	r1, r6
 8013c00:	2201      	movs	r2, #1
 8013c02:	4628      	mov	r0, r5
 8013c04:	f7f8 fd7e 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013c08:	1bb9      	subs	r1, r7, r6
 8013c0a:	4441      	add	r1, r8
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	4602      	mov	r2, r0
 8013c10:	2800      	cmp	r0, #0
 8013c12:	d1ea      	bne.n	8013bea <ucdr_serialize_endian_array_uint8_t+0x16>
 8013c14:	2301      	movs	r3, #1
 8013c16:	7da8      	ldrb	r0, [r5, #22]
 8013c18:	756b      	strb	r3, [r5, #21]
 8013c1a:	4058      	eors	r0, r3
 8013c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c20:	463a      	mov	r2, r7
 8013c22:	68a8      	ldr	r0, [r5, #8]
 8013c24:	4641      	mov	r1, r8
 8013c26:	f002 fdbc 	bl	80167a2 <memcpy>
 8013c2a:	68aa      	ldr	r2, [r5, #8]
 8013c2c:	692b      	ldr	r3, [r5, #16]
 8013c2e:	443a      	add	r2, r7
 8013c30:	443b      	add	r3, r7
 8013c32:	60aa      	str	r2, [r5, #8]
 8013c34:	612b      	str	r3, [r5, #16]
 8013c36:	e7ed      	b.n	8013c14 <ucdr_serialize_endian_array_uint8_t+0x40>

08013c38 <ucdr_deserialize_array_uint8_t>:
 8013c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3c:	4688      	mov	r8, r1
 8013c3e:	4611      	mov	r1, r2
 8013c40:	4617      	mov	r7, r2
 8013c42:	4605      	mov	r5, r0
 8013c44:	f7f8 fcd6 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013c48:	b9e0      	cbnz	r0, 8013c84 <ucdr_deserialize_array_uint8_t+0x4c>
 8013c4a:	463e      	mov	r6, r7
 8013c4c:	e009      	b.n	8013c62 <ucdr_deserialize_array_uint8_t+0x2a>
 8013c4e:	68a9      	ldr	r1, [r5, #8]
 8013c50:	f002 fda7 	bl	80167a2 <memcpy>
 8013c54:	68aa      	ldr	r2, [r5, #8]
 8013c56:	692b      	ldr	r3, [r5, #16]
 8013c58:	4422      	add	r2, r4
 8013c5a:	4423      	add	r3, r4
 8013c5c:	1b36      	subs	r6, r6, r4
 8013c5e:	60aa      	str	r2, [r5, #8]
 8013c60:	612b      	str	r3, [r5, #16]
 8013c62:	2201      	movs	r2, #1
 8013c64:	4631      	mov	r1, r6
 8013c66:	4628      	mov	r0, r5
 8013c68:	f7f8 fd4c 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	1bb8      	subs	r0, r7, r6
 8013c70:	4440      	add	r0, r8
 8013c72:	4622      	mov	r2, r4
 8013c74:	2c00      	cmp	r4, #0
 8013c76:	d1ea      	bne.n	8013c4e <ucdr_deserialize_array_uint8_t+0x16>
 8013c78:	2301      	movs	r3, #1
 8013c7a:	7da8      	ldrb	r0, [r5, #22]
 8013c7c:	756b      	strb	r3, [r5, #21]
 8013c7e:	4058      	eors	r0, r3
 8013c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c84:	463a      	mov	r2, r7
 8013c86:	68a9      	ldr	r1, [r5, #8]
 8013c88:	4640      	mov	r0, r8
 8013c8a:	f002 fd8a 	bl	80167a2 <memcpy>
 8013c8e:	68aa      	ldr	r2, [r5, #8]
 8013c90:	692b      	ldr	r3, [r5, #16]
 8013c92:	443a      	add	r2, r7
 8013c94:	443b      	add	r3, r7
 8013c96:	60aa      	str	r2, [r5, #8]
 8013c98:	612b      	str	r3, [r5, #16]
 8013c9a:	e7ed      	b.n	8013c78 <ucdr_deserialize_array_uint8_t+0x40>

08013c9c <ucdr_deserialize_endian_array_uint8_t>:
 8013c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	461f      	mov	r7, r3
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	4690      	mov	r8, r2
 8013ca8:	f7f8 fca4 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013cac:	b9e0      	cbnz	r0, 8013ce8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013cae:	463e      	mov	r6, r7
 8013cb0:	e009      	b.n	8013cc6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013cb2:	68a9      	ldr	r1, [r5, #8]
 8013cb4:	f002 fd75 	bl	80167a2 <memcpy>
 8013cb8:	68ab      	ldr	r3, [r5, #8]
 8013cba:	6928      	ldr	r0, [r5, #16]
 8013cbc:	4423      	add	r3, r4
 8013cbe:	4420      	add	r0, r4
 8013cc0:	1b36      	subs	r6, r6, r4
 8013cc2:	60ab      	str	r3, [r5, #8]
 8013cc4:	6128      	str	r0, [r5, #16]
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	4631      	mov	r1, r6
 8013cca:	4628      	mov	r0, r5
 8013ccc:	f7f8 fd1a 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	1bb8      	subs	r0, r7, r6
 8013cd4:	4440      	add	r0, r8
 8013cd6:	4622      	mov	r2, r4
 8013cd8:	2c00      	cmp	r4, #0
 8013cda:	d1ea      	bne.n	8013cb2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	7da8      	ldrb	r0, [r5, #22]
 8013ce0:	756b      	strb	r3, [r5, #21]
 8013ce2:	4058      	eors	r0, r3
 8013ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce8:	463a      	mov	r2, r7
 8013cea:	68a9      	ldr	r1, [r5, #8]
 8013cec:	4640      	mov	r0, r8
 8013cee:	f002 fd58 	bl	80167a2 <memcpy>
 8013cf2:	68aa      	ldr	r2, [r5, #8]
 8013cf4:	692b      	ldr	r3, [r5, #16]
 8013cf6:	443a      	add	r2, r7
 8013cf8:	443b      	add	r3, r7
 8013cfa:	60aa      	str	r2, [r5, #8]
 8013cfc:	612b      	str	r3, [r5, #16]
 8013cfe:	e7ed      	b.n	8013cdc <ucdr_deserialize_endian_array_uint8_t+0x40>

08013d00 <ucdr_serialize_sequence_char>:
 8013d00:	b570      	push	{r4, r5, r6, lr}
 8013d02:	4615      	mov	r5, r2
 8013d04:	460e      	mov	r6, r1
 8013d06:	7d01      	ldrb	r1, [r0, #20]
 8013d08:	4604      	mov	r4, r0
 8013d0a:	f7f7 fea1 	bl	800ba50 <ucdr_serialize_endian_uint32_t>
 8013d0e:	b90d      	cbnz	r5, 8013d14 <ucdr_serialize_sequence_char+0x14>
 8013d10:	2001      	movs	r0, #1
 8013d12:	bd70      	pop	{r4, r5, r6, pc}
 8013d14:	7d21      	ldrb	r1, [r4, #20]
 8013d16:	462b      	mov	r3, r5
 8013d18:	4632      	mov	r2, r6
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d20:	f7ff bec2 	b.w	8013aa8 <ucdr_serialize_endian_array_char>

08013d24 <ucdr_deserialize_sequence_char>:
 8013d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d28:	461d      	mov	r5, r3
 8013d2a:	4616      	mov	r6, r2
 8013d2c:	460f      	mov	r7, r1
 8013d2e:	461a      	mov	r2, r3
 8013d30:	7d01      	ldrb	r1, [r0, #20]
 8013d32:	4604      	mov	r4, r0
 8013d34:	f7f7 ffb4 	bl	800bca0 <ucdr_deserialize_endian_uint32_t>
 8013d38:	682b      	ldr	r3, [r5, #0]
 8013d3a:	429e      	cmp	r6, r3
 8013d3c:	bf3c      	itt	cc
 8013d3e:	2201      	movcc	r2, #1
 8013d40:	75a2      	strbcc	r2, [r4, #22]
 8013d42:	b913      	cbnz	r3, 8013d4a <ucdr_deserialize_sequence_char+0x26>
 8013d44:	2001      	movs	r0, #1
 8013d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d4a:	7d21      	ldrb	r1, [r4, #20]
 8013d4c:	463a      	mov	r2, r7
 8013d4e:	4620      	mov	r0, r4
 8013d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	f7ff beda 	b.w	8013b0c <ucdr_deserialize_endian_array_char>

08013d58 <ucdr_serialize_sequence_uint8_t>:
 8013d58:	b570      	push	{r4, r5, r6, lr}
 8013d5a:	4615      	mov	r5, r2
 8013d5c:	460e      	mov	r6, r1
 8013d5e:	7d01      	ldrb	r1, [r0, #20]
 8013d60:	4604      	mov	r4, r0
 8013d62:	f7f7 fe75 	bl	800ba50 <ucdr_serialize_endian_uint32_t>
 8013d66:	b90d      	cbnz	r5, 8013d6c <ucdr_serialize_sequence_uint8_t+0x14>
 8013d68:	2001      	movs	r0, #1
 8013d6a:	bd70      	pop	{r4, r5, r6, pc}
 8013d6c:	7d21      	ldrb	r1, [r4, #20]
 8013d6e:	462b      	mov	r3, r5
 8013d70:	4632      	mov	r2, r6
 8013d72:	4620      	mov	r0, r4
 8013d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d78:	f7ff bf2c 	b.w	8013bd4 <ucdr_serialize_endian_array_uint8_t>

08013d7c <ucdr_deserialize_sequence_uint8_t>:
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	461d      	mov	r5, r3
 8013d82:	4616      	mov	r6, r2
 8013d84:	460f      	mov	r7, r1
 8013d86:	461a      	mov	r2, r3
 8013d88:	7d01      	ldrb	r1, [r0, #20]
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	f7f7 ff88 	bl	800bca0 <ucdr_deserialize_endian_uint32_t>
 8013d90:	682b      	ldr	r3, [r5, #0]
 8013d92:	429e      	cmp	r6, r3
 8013d94:	bf3c      	itt	cc
 8013d96:	2201      	movcc	r2, #1
 8013d98:	75a2      	strbcc	r2, [r4, #22]
 8013d9a:	b913      	cbnz	r3, 8013da2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da2:	7d21      	ldrb	r1, [r4, #20]
 8013da4:	463a      	mov	r2, r7
 8013da6:	4620      	mov	r0, r4
 8013da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dac:	f7ff bf76 	b.w	8013c9c <ucdr_deserialize_endian_array_uint8_t>

08013db0 <ucdr_serialize_string>:
 8013db0:	b510      	push	{r4, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	4604      	mov	r4, r0
 8013db6:	4608      	mov	r0, r1
 8013db8:	9101      	str	r1, [sp, #4]
 8013dba:	f7ec fa1b 	bl	80001f4 <strlen>
 8013dbe:	9901      	ldr	r1, [sp, #4]
 8013dc0:	1c42      	adds	r2, r0, #1
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	b002      	add	sp, #8
 8013dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dca:	f7ff bf99 	b.w	8013d00 <ucdr_serialize_sequence_char>
 8013dce:	bf00      	nop

08013dd0 <ucdr_deserialize_string>:
 8013dd0:	b500      	push	{lr}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	ab01      	add	r3, sp, #4
 8013dd6:	f7ff ffa5 	bl	8013d24 <ucdr_deserialize_sequence_char>
 8013dda:	b003      	add	sp, #12
 8013ddc:	f85d fb04 	ldr.w	pc, [sp], #4

08013de0 <get_custom_error>:
 8013de0:	4b01      	ldr	r3, [pc, #4]	@ (8013de8 <get_custom_error+0x8>)
 8013de2:	7818      	ldrb	r0, [r3, #0]
 8013de4:	4770      	bx	lr
 8013de6:	bf00      	nop
 8013de8:	2000de78 	.word	0x2000de78

08013dec <recv_custom_msg>:
 8013dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df0:	4693      	mov	fp, r2
 8013df2:	b089      	sub	sp, #36	@ 0x24
 8013df4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013df8:	9305      	str	r3, [sp, #20]
 8013dfa:	468a      	mov	sl, r1
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4604      	mov	r4, r0
 8013e00:	f88d 101e 	strb.w	r1, [sp, #30]
 8013e04:	b322      	cbz	r2, 8013e50 <recv_custom_msg+0x64>
 8013e06:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013e0a:	f10d 081f 	add.w	r8, sp, #31
 8013e0e:	af05      	add	r7, sp, #20
 8013e10:	f10d 061e 	add.w	r6, sp, #30
 8013e14:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013e18:	e002      	b.n	8013e20 <recv_custom_msg+0x34>
 8013e1a:	9b05      	ldr	r3, [sp, #20]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	dd0f      	ble.n	8013e40 <recv_custom_msg+0x54>
 8013e20:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013e24:	4623      	mov	r3, r4
 8013e26:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013e2a:	e9cd 5600 	strd	r5, r6, [sp]
 8013e2e:	4622      	mov	r2, r4
 8013e30:	4648      	mov	r0, r9
 8013e32:	f001 f92d 	bl	8015090 <uxr_read_framed_msg>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d0ef      	beq.n	8013e1a <recv_custom_msg+0x2e>
 8013e3a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e3e:	b1b3      	cbz	r3, 8013e6e <recv_custom_msg+0x82>
 8013e40:	4b0f      	ldr	r3, [pc, #60]	@ (8013e80 <recv_custom_msg+0x94>)
 8013e42:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013e46:	701a      	strb	r2, [r3, #0]
 8013e48:	2000      	movs	r0, #0
 8013e4a:	b009      	add	sp, #36	@ 0x24
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	f10d 021f 	add.w	r2, sp, #31
 8013e54:	9200      	str	r2, [sp, #0]
 8013e56:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e5e:	4601      	mov	r1, r0
 8013e60:	47a8      	blx	r5
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d0ec      	beq.n	8013e40 <recv_custom_msg+0x54>
 8013e66:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1e8      	bne.n	8013e40 <recv_custom_msg+0x54>
 8013e6e:	f8cb 0000 	str.w	r0, [fp]
 8013e72:	2001      	movs	r0, #1
 8013e74:	f8ca 4000 	str.w	r4, [sl]
 8013e78:	b009      	add	sp, #36	@ 0x24
 8013e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e7e:	bf00      	nop
 8013e80:	2000de78 	.word	0x2000de78

08013e84 <send_custom_msg>:
 8013e84:	b530      	push	{r4, r5, lr}
 8013e86:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8013e8a:	b087      	sub	sp, #28
 8013e8c:	4615      	mov	r5, r2
 8013e8e:	b974      	cbnz	r4, 8013eae <send_custom_msg+0x2a>
 8013e90:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013e94:	f10d 0317 	add.w	r3, sp, #23
 8013e98:	47a0      	blx	r4
 8013e9a:	b108      	cbz	r0, 8013ea0 <send_custom_msg+0x1c>
 8013e9c:	42a8      	cmp	r0, r5
 8013e9e:	d015      	beq.n	8013ecc <send_custom_msg+0x48>
 8013ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8013ed4 <send_custom_msg+0x50>)
 8013ea2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013ea6:	701a      	strb	r2, [r3, #0]
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	b007      	add	sp, #28
 8013eac:	bd30      	pop	{r4, r5, pc}
 8013eae:	460b      	mov	r3, r1
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	f10d 0117 	add.w	r1, sp, #23
 8013eb6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013eba:	4602      	mov	r2, r0
 8013ebc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013ec0:	9500      	str	r5, [sp, #0]
 8013ec2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013ec6:	f000 feeb 	bl	8014ca0 <uxr_write_framed_msg>
 8013eca:	e7e6      	b.n	8013e9a <send_custom_msg+0x16>
 8013ecc:	2001      	movs	r0, #1
 8013ece:	b007      	add	sp, #28
 8013ed0:	bd30      	pop	{r4, r5, pc}
 8013ed2:	bf00      	nop
 8013ed4:	2000de78 	.word	0x2000de78

08013ed8 <uxr_set_custom_transport_callbacks>:
 8013ed8:	b410      	push	{r4}
 8013eda:	9c01      	ldr	r4, [sp, #4]
 8013edc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013ee0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013ee4:	9b02      	ldr	r3, [sp, #8]
 8013ee6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eee:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013ef2:	4770      	bx	lr

08013ef4 <uxr_init_custom_transport>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013efa:	b303      	cbz	r3, 8013f3e <uxr_init_custom_transport+0x4a>
 8013efc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013f00:	4604      	mov	r4, r0
 8013f02:	b1e2      	cbz	r2, 8013f3e <uxr_init_custom_transport+0x4a>
 8013f04:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013f08:	b1ca      	cbz	r2, 8013f3e <uxr_init_custom_transport+0x4a>
 8013f0a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013f0e:	b1b2      	cbz	r2, 8013f3e <uxr_init_custom_transport+0x4a>
 8013f10:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013f14:	4798      	blx	r3
 8013f16:	4605      	mov	r5, r0
 8013f18:	b188      	cbz	r0, 8013f3e <uxr_init_custom_transport+0x4a>
 8013f1a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013f1e:	b98b      	cbnz	r3, 8013f44 <uxr_init_custom_transport+0x50>
 8013f20:	490b      	ldr	r1, [pc, #44]	@ (8013f50 <uxr_init_custom_transport+0x5c>)
 8013f22:	4b0c      	ldr	r3, [pc, #48]	@ (8013f54 <uxr_init_custom_transport+0x60>)
 8013f24:	4a0c      	ldr	r2, [pc, #48]	@ (8013f58 <uxr_init_custom_transport+0x64>)
 8013f26:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013f2e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013f32:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013f36:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	bd38      	pop	{r3, r4, r5, pc}
 8013f3e:	2500      	movs	r5, #0
 8013f40:	4628      	mov	r0, r5
 8013f42:	bd38      	pop	{r3, r4, r5, pc}
 8013f44:	2100      	movs	r1, #0
 8013f46:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013f4a:	f000 fea3 	bl	8014c94 <uxr_init_framing_io>
 8013f4e:	e7e7      	b.n	8013f20 <uxr_init_custom_transport+0x2c>
 8013f50:	08013e85 	.word	0x08013e85
 8013f54:	08013ded 	.word	0x08013ded
 8013f58:	08013de1 	.word	0x08013de1

08013f5c <uxr_close_custom_transport>:
 8013f5c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013f60:	4718      	bx	r3
 8013f62:	bf00      	nop

08013f64 <uxr_init_input_best_effort_stream>:
 8013f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f68:	8003      	strh	r3, [r0, #0]
 8013f6a:	4770      	bx	lr

08013f6c <uxr_reset_input_best_effort_stream>:
 8013f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f70:	8003      	strh	r3, [r0, #0]
 8013f72:	4770      	bx	lr

08013f74 <uxr_receive_best_effort_message>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4604      	mov	r4, r0
 8013f78:	8800      	ldrh	r0, [r0, #0]
 8013f7a:	460d      	mov	r5, r1
 8013f7c:	f000 fe72 	bl	8014c64 <uxr_seq_num_cmp>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013f88:	bfb8      	it	lt
 8013f8a:	8025      	strhlt	r5, [r4, #0]
 8013f8c:	bd38      	pop	{r3, r4, r5, pc}
 8013f8e:	bf00      	nop

08013f90 <on_full_input_buffer>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	4605      	mov	r5, r0
 8013f94:	460c      	mov	r4, r1
 8013f96:	682b      	ldr	r3, [r5, #0]
 8013f98:	6809      	ldr	r1, [r1, #0]
 8013f9a:	8920      	ldrh	r0, [r4, #8]
 8013f9c:	6862      	ldr	r2, [r4, #4]
 8013f9e:	fbb2 f2f0 	udiv	r2, r2, r0
 8013fa2:	eba3 0c01 	sub.w	ip, r3, r1
 8013fa6:	fbbc fcf2 	udiv	ip, ip, r2
 8013faa:	f10c 0c01 	add.w	ip, ip, #1
 8013fae:	fa1f f38c 	uxth.w	r3, ip
 8013fb2:	fbb3 f6f0 	udiv	r6, r3, r0
 8013fb6:	fb00 3316 	mls	r3, r0, r6, r3
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	fb02 f303 	mul.w	r3, r2, r3
 8013fc0:	1d18      	adds	r0, r3, #4
 8013fc2:	4408      	add	r0, r1
 8013fc4:	7d26      	ldrb	r6, [r4, #20]
 8013fc6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013fca:	b116      	cbz	r6, 8013fd2 <on_full_input_buffer+0x42>
 8013fcc:	2600      	movs	r6, #0
 8013fce:	f840 6c04 	str.w	r6, [r0, #-4]
 8013fd2:	2a03      	cmp	r2, #3
 8013fd4:	d801      	bhi.n	8013fda <on_full_input_buffer+0x4a>
 8013fd6:	2001      	movs	r0, #1
 8013fd8:	bd70      	pop	{r4, r5, r6, pc}
 8013fda:	3308      	adds	r3, #8
 8013fdc:	4419      	add	r1, r3
 8013fde:	4628      	mov	r0, r5
 8013fe0:	692b      	ldr	r3, [r5, #16]
 8013fe2:	3a04      	subs	r2, #4
 8013fe4:	f7f8 fb52 	bl	800c68c <ucdr_init_buffer_origin>
 8013fe8:	4628      	mov	r0, r5
 8013fea:	4903      	ldr	r1, [pc, #12]	@ (8013ff8 <on_full_input_buffer+0x68>)
 8013fec:	4622      	mov	r2, r4
 8013fee:	f7f8 fb29 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	bf00      	nop
 8013ff8:	08013f91 	.word	0x08013f91

08013ffc <uxr_init_input_reliable_stream>:
 8013ffc:	b500      	push	{lr}
 8013ffe:	e9c0 1200 	strd	r1, r2, [r0]
 8014002:	f04f 0e00 	mov.w	lr, #0
 8014006:	9a01      	ldr	r2, [sp, #4]
 8014008:	8103      	strh	r3, [r0, #8]
 801400a:	6102      	str	r2, [r0, #16]
 801400c:	f880 e014 	strb.w	lr, [r0, #20]
 8014010:	b1d3      	cbz	r3, 8014048 <uxr_init_input_reliable_stream+0x4c>
 8014012:	f8c1 e000 	str.w	lr, [r1]
 8014016:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801401a:	f1bc 0f01 	cmp.w	ip, #1
 801401e:	d913      	bls.n	8014048 <uxr_init_input_reliable_stream+0x4c>
 8014020:	2301      	movs	r3, #1
 8014022:	fbb3 f1fc 	udiv	r1, r3, ip
 8014026:	fb0c 3111 	mls	r1, ip, r1, r3
 801402a:	b289      	uxth	r1, r1
 801402c:	6842      	ldr	r2, [r0, #4]
 801402e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014032:	fb01 f202 	mul.w	r2, r1, r2
 8014036:	6801      	ldr	r1, [r0, #0]
 8014038:	f841 e002 	str.w	lr, [r1, r2]
 801403c:	3301      	adds	r3, #1
 801403e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014042:	b29b      	uxth	r3, r3
 8014044:	459c      	cmp	ip, r3
 8014046:	d8ec      	bhi.n	8014022 <uxr_init_input_reliable_stream+0x26>
 8014048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801404c:	60c3      	str	r3, [r0, #12]
 801404e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014052:	bf00      	nop

08014054 <uxr_reset_input_reliable_stream>:
 8014054:	8901      	ldrh	r1, [r0, #8]
 8014056:	b1e9      	cbz	r1, 8014094 <uxr_reset_input_reliable_stream+0x40>
 8014058:	f04f 0c00 	mov.w	ip, #0
 801405c:	b500      	push	{lr}
 801405e:	4663      	mov	r3, ip
 8014060:	46e6      	mov	lr, ip
 8014062:	fbb3 f2f1 	udiv	r2, r3, r1
 8014066:	fb01 3312 	mls	r3, r1, r2, r3
 801406a:	b29b      	uxth	r3, r3
 801406c:	6842      	ldr	r2, [r0, #4]
 801406e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014072:	fb02 f303 	mul.w	r3, r2, r3
 8014076:	6802      	ldr	r2, [r0, #0]
 8014078:	f842 e003 	str.w	lr, [r2, r3]
 801407c:	f10c 0c01 	add.w	ip, ip, #1
 8014080:	8901      	ldrh	r1, [r0, #8]
 8014082:	fa1f f38c 	uxth.w	r3, ip
 8014086:	4299      	cmp	r1, r3
 8014088:	d8eb      	bhi.n	8014062 <uxr_reset_input_reliable_stream+0xe>
 801408a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801408e:	60c3      	str	r3, [r0, #12]
 8014090:	f85d fb04 	ldr.w	pc, [sp], #4
 8014094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014098:	60c3      	str	r3, [r0, #12]
 801409a:	4770      	bx	lr

0801409c <uxr_receive_reliable_message>:
 801409c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140a0:	4604      	mov	r4, r0
 80140a2:	460d      	mov	r5, r1
 80140a4:	8901      	ldrh	r1, [r0, #8]
 80140a6:	8980      	ldrh	r0, [r0, #12]
 80140a8:	4690      	mov	r8, r2
 80140aa:	461f      	mov	r7, r3
 80140ac:	f000 fdd2 	bl	8014c54 <uxr_seq_num_add>
 80140b0:	4629      	mov	r1, r5
 80140b2:	4606      	mov	r6, r0
 80140b4:	89a0      	ldrh	r0, [r4, #12]
 80140b6:	f000 fdd5 	bl	8014c64 <uxr_seq_num_cmp>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	db0a      	blt.n	80140d4 <uxr_receive_reliable_message+0x38>
 80140be:	2600      	movs	r6, #0
 80140c0:	89e0      	ldrh	r0, [r4, #14]
 80140c2:	4629      	mov	r1, r5
 80140c4:	f000 fdce 	bl	8014c64 <uxr_seq_num_cmp>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	da00      	bge.n	80140ce <uxr_receive_reliable_message+0x32>
 80140cc:	81e5      	strh	r5, [r4, #14]
 80140ce:	4630      	mov	r0, r6
 80140d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140d4:	4630      	mov	r0, r6
 80140d6:	4629      	mov	r1, r5
 80140d8:	f000 fdc4 	bl	8014c64 <uxr_seq_num_cmp>
 80140dc:	2800      	cmp	r0, #0
 80140de:	dbee      	blt.n	80140be <uxr_receive_reliable_message+0x22>
 80140e0:	6923      	ldr	r3, [r4, #16]
 80140e2:	4640      	mov	r0, r8
 80140e4:	4798      	blx	r3
 80140e6:	2101      	movs	r1, #1
 80140e8:	4681      	mov	r9, r0
 80140ea:	89a0      	ldrh	r0, [r4, #12]
 80140ec:	f000 fdb2 	bl	8014c54 <uxr_seq_num_add>
 80140f0:	f1b9 0f00 	cmp.w	r9, #0
 80140f4:	d101      	bne.n	80140fa <uxr_receive_reliable_message+0x5e>
 80140f6:	4285      	cmp	r5, r0
 80140f8:	d047      	beq.n	801418a <uxr_receive_reliable_message+0xee>
 80140fa:	8922      	ldrh	r2, [r4, #8]
 80140fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8014100:	fb02 5010 	mls	r0, r2, r0, r5
 8014104:	b280      	uxth	r0, r0
 8014106:	6863      	ldr	r3, [r4, #4]
 8014108:	fbb3 f3f2 	udiv	r3, r3, r2
 801410c:	fb00 f303 	mul.w	r3, r0, r3
 8014110:	6820      	ldr	r0, [r4, #0]
 8014112:	3304      	adds	r3, #4
 8014114:	4418      	add	r0, r3
 8014116:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d1cf      	bne.n	80140be <uxr_receive_reliable_message+0x22>
 801411e:	4641      	mov	r1, r8
 8014120:	463a      	mov	r2, r7
 8014122:	f002 fb3e 	bl	80167a2 <memcpy>
 8014126:	8921      	ldrh	r1, [r4, #8]
 8014128:	fbb5 f2f1 	udiv	r2, r5, r1
 801412c:	fb01 5212 	mls	r2, r1, r2, r5
 8014130:	b292      	uxth	r2, r2
 8014132:	6863      	ldr	r3, [r4, #4]
 8014134:	fbb3 f3f1 	udiv	r3, r3, r1
 8014138:	fb02 f303 	mul.w	r3, r2, r3
 801413c:	6822      	ldr	r2, [r4, #0]
 801413e:	50d7      	str	r7, [r2, r3]
 8014140:	9a08      	ldr	r2, [sp, #32]
 8014142:	2301      	movs	r3, #1
 8014144:	7013      	strb	r3, [r2, #0]
 8014146:	f1b9 0f00 	cmp.w	r9, #0
 801414a:	d0b8      	beq.n	80140be <uxr_receive_reliable_message+0x22>
 801414c:	89a6      	ldrh	r6, [r4, #12]
 801414e:	4630      	mov	r0, r6
 8014150:	2101      	movs	r1, #1
 8014152:	f000 fd7f 	bl	8014c54 <uxr_seq_num_add>
 8014156:	8922      	ldrh	r2, [r4, #8]
 8014158:	6863      	ldr	r3, [r4, #4]
 801415a:	fbb3 f3f2 	udiv	r3, r3, r2
 801415e:	4606      	mov	r6, r0
 8014160:	fbb0 f0f2 	udiv	r0, r0, r2
 8014164:	fb02 6010 	mls	r0, r2, r0, r6
 8014168:	b280      	uxth	r0, r0
 801416a:	fb00 f303 	mul.w	r3, r0, r3
 801416e:	6820      	ldr	r0, [r4, #0]
 8014170:	3304      	adds	r3, #4
 8014172:	4418      	add	r0, r3
 8014174:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d0a0      	beq.n	80140be <uxr_receive_reliable_message+0x22>
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	4798      	blx	r3
 8014180:	2802      	cmp	r0, #2
 8014182:	d008      	beq.n	8014196 <uxr_receive_reliable_message+0xfa>
 8014184:	2801      	cmp	r0, #1
 8014186:	d0e2      	beq.n	801414e <uxr_receive_reliable_message+0xb2>
 8014188:	e799      	b.n	80140be <uxr_receive_reliable_message+0x22>
 801418a:	9b08      	ldr	r3, [sp, #32]
 801418c:	81a5      	strh	r5, [r4, #12]
 801418e:	2601      	movs	r6, #1
 8014190:	f883 9000 	strb.w	r9, [r3]
 8014194:	e794      	b.n	80140c0 <uxr_receive_reliable_message+0x24>
 8014196:	2601      	movs	r6, #1
 8014198:	e792      	b.n	80140c0 <uxr_receive_reliable_message+0x24>
 801419a:	bf00      	nop

0801419c <uxr_next_input_reliable_buffer_available>:
 801419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141a0:	4604      	mov	r4, r0
 80141a2:	460f      	mov	r7, r1
 80141a4:	8980      	ldrh	r0, [r0, #12]
 80141a6:	2101      	movs	r1, #1
 80141a8:	4690      	mov	r8, r2
 80141aa:	f000 fd53 	bl	8014c54 <uxr_seq_num_add>
 80141ae:	8922      	ldrh	r2, [r4, #8]
 80141b0:	fbb0 f6f2 	udiv	r6, r0, r2
 80141b4:	fb02 0616 	mls	r6, r2, r6, r0
 80141b8:	b2b6      	uxth	r6, r6
 80141ba:	6863      	ldr	r3, [r4, #4]
 80141bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c0:	fb06 f303 	mul.w	r3, r6, r3
 80141c4:	6826      	ldr	r6, [r4, #0]
 80141c6:	3304      	adds	r3, #4
 80141c8:	441e      	add	r6, r3
 80141ca:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80141ce:	f1b9 0f00 	cmp.w	r9, #0
 80141d2:	d023      	beq.n	801421c <uxr_next_input_reliable_buffer_available+0x80>
 80141d4:	6923      	ldr	r3, [r4, #16]
 80141d6:	4605      	mov	r5, r0
 80141d8:	4630      	mov	r0, r6
 80141da:	4798      	blx	r3
 80141dc:	4682      	mov	sl, r0
 80141de:	b300      	cbz	r0, 8014222 <uxr_next_input_reliable_buffer_available+0x86>
 80141e0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80141e4:	2101      	movs	r1, #1
 80141e6:	4650      	mov	r0, sl
 80141e8:	f000 fd34 	bl	8014c54 <uxr_seq_num_add>
 80141ec:	8921      	ldrh	r1, [r4, #8]
 80141ee:	fbb0 f2f1 	udiv	r2, r0, r1
 80141f2:	4682      	mov	sl, r0
 80141f4:	fb01 0212 	mls	r2, r1, r2, r0
 80141f8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80141fc:	b292      	uxth	r2, r2
 80141fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8014202:	fb02 f303 	mul.w	r3, r2, r3
 8014206:	3304      	adds	r3, #4
 8014208:	4418      	add	r0, r3
 801420a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801420e:	b12b      	cbz	r3, 801421c <uxr_next_input_reliable_buffer_available+0x80>
 8014210:	6923      	ldr	r3, [r4, #16]
 8014212:	4798      	blx	r3
 8014214:	2802      	cmp	r0, #2
 8014216:	d01b      	beq.n	8014250 <uxr_next_input_reliable_buffer_available+0xb4>
 8014218:	2801      	cmp	r0, #1
 801421a:	d0e3      	beq.n	80141e4 <uxr_next_input_reliable_buffer_available+0x48>
 801421c:	2000      	movs	r0, #0
 801421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014222:	464a      	mov	r2, r9
 8014224:	4631      	mov	r1, r6
 8014226:	4638      	mov	r0, r7
 8014228:	f7f8 fa38 	bl	800c69c <ucdr_init_buffer>
 801422c:	8921      	ldrh	r1, [r4, #8]
 801422e:	fbb5 f2f1 	udiv	r2, r5, r1
 8014232:	fb01 5212 	mls	r2, r1, r2, r5
 8014236:	b292      	uxth	r2, r2
 8014238:	6863      	ldr	r3, [r4, #4]
 801423a:	fbb3 f3f1 	udiv	r3, r3, r1
 801423e:	fb02 f303 	mul.w	r3, r2, r3
 8014242:	6822      	ldr	r2, [r4, #0]
 8014244:	f842 a003 	str.w	sl, [r2, r3]
 8014248:	2001      	movs	r0, #1
 801424a:	81a5      	strh	r5, [r4, #12]
 801424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014250:	8920      	ldrh	r0, [r4, #8]
 8014252:	fbb5 f3f0 	udiv	r3, r5, r0
 8014256:	fb00 5513 	mls	r5, r0, r3, r5
 801425a:	b2ad      	uxth	r5, r5
 801425c:	6863      	ldr	r3, [r4, #4]
 801425e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014262:	fb03 f505 	mul.w	r5, r3, r5
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	2000      	movs	r0, #0
 801426a:	5158      	str	r0, [r3, r5]
 801426c:	eb06 0108 	add.w	r1, r6, r8
 8014270:	eba9 0208 	sub.w	r2, r9, r8
 8014274:	4638      	mov	r0, r7
 8014276:	f7f8 fa11 	bl	800c69c <ucdr_init_buffer>
 801427a:	4638      	mov	r0, r7
 801427c:	4903      	ldr	r1, [pc, #12]	@ (801428c <uxr_next_input_reliable_buffer_available+0xf0>)
 801427e:	4622      	mov	r2, r4
 8014280:	f7f8 f9e0 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014284:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014288:	2001      	movs	r0, #1
 801428a:	e7c8      	b.n	801421e <uxr_next_input_reliable_buffer_available+0x82>
 801428c:	08013f91 	.word	0x08013f91

08014290 <uxr_process_heartbeat>:
 8014290:	b538      	push	{r3, r4, r5, lr}
 8014292:	4611      	mov	r1, r2
 8014294:	4604      	mov	r4, r0
 8014296:	89c0      	ldrh	r0, [r0, #14]
 8014298:	4615      	mov	r5, r2
 801429a:	f000 fce3 	bl	8014c64 <uxr_seq_num_cmp>
 801429e:	2800      	cmp	r0, #0
 80142a0:	bfb8      	it	lt
 80142a2:	81e5      	strhlt	r5, [r4, #14]
 80142a4:	bd38      	pop	{r3, r4, r5, pc}
 80142a6:	bf00      	nop

080142a8 <uxr_compute_acknack>:
 80142a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142ac:	8903      	ldrh	r3, [r0, #8]
 80142ae:	8985      	ldrh	r5, [r0, #12]
 80142b0:	4604      	mov	r4, r0
 80142b2:	460e      	mov	r6, r1
 80142b4:	b1d3      	cbz	r3, 80142ec <uxr_compute_acknack+0x44>
 80142b6:	4628      	mov	r0, r5
 80142b8:	2701      	movs	r7, #1
 80142ba:	e003      	b.n	80142c4 <uxr_compute_acknack+0x1c>
 80142bc:	4567      	cmp	r7, ip
 80142be:	d215      	bcs.n	80142ec <uxr_compute_acknack+0x44>
 80142c0:	89a0      	ldrh	r0, [r4, #12]
 80142c2:	3701      	adds	r7, #1
 80142c4:	b2b9      	uxth	r1, r7
 80142c6:	f000 fcc5 	bl	8014c54 <uxr_seq_num_add>
 80142ca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142ce:	fbb0 f3fc 	udiv	r3, r0, ip
 80142d2:	fb0c 0313 	mls	r3, ip, r3, r0
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80142dc:	fbb3 f3fc 	udiv	r3, r3, ip
 80142e0:	fb02 f303 	mul.w	r3, r2, r3
 80142e4:	58cb      	ldr	r3, [r1, r3]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1e8      	bne.n	80142bc <uxr_compute_acknack+0x14>
 80142ea:	4605      	mov	r5, r0
 80142ec:	8035      	strh	r5, [r6, #0]
 80142ee:	2101      	movs	r1, #1
 80142f0:	4628      	mov	r0, r5
 80142f2:	89e7      	ldrh	r7, [r4, #14]
 80142f4:	f000 fcb2 	bl	8014c5c <uxr_seq_num_sub>
 80142f8:	4601      	mov	r1, r0
 80142fa:	4638      	mov	r0, r7
 80142fc:	f000 fcae 	bl	8014c5c <uxr_seq_num_sub>
 8014300:	4605      	mov	r5, r0
 8014302:	b318      	cbz	r0, 801434c <uxr_compute_acknack+0xa4>
 8014304:	f04f 0900 	mov.w	r9, #0
 8014308:	464f      	mov	r7, r9
 801430a:	f04f 0801 	mov.w	r8, #1
 801430e:	fa1f f189 	uxth.w	r1, r9
 8014312:	8830      	ldrh	r0, [r6, #0]
 8014314:	f000 fc9e 	bl	8014c54 <uxr_seq_num_add>
 8014318:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801431c:	fbb0 f3fc 	udiv	r3, r0, ip
 8014320:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014324:	fb03 001c 	mls	r0, r3, ip, r0
 8014328:	b283      	uxth	r3, r0
 801432a:	fbb2 f2fc 	udiv	r2, r2, ip
 801432e:	fb02 f303 	mul.w	r3, r2, r3
 8014332:	fa08 f209 	lsl.w	r2, r8, r9
 8014336:	58cb      	ldr	r3, [r1, r3]
 8014338:	f109 0901 	add.w	r9, r9, #1
 801433c:	b90b      	cbnz	r3, 8014342 <uxr_compute_acknack+0x9a>
 801433e:	4317      	orrs	r7, r2
 8014340:	b2bf      	uxth	r7, r7
 8014342:	454d      	cmp	r5, r9
 8014344:	d1e3      	bne.n	801430e <uxr_compute_acknack+0x66>
 8014346:	4638      	mov	r0, r7
 8014348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801434c:	4607      	mov	r7, r0
 801434e:	4638      	mov	r0, r7
 8014350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014354 <uxr_init_output_best_effort_stream>:
 8014354:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014358:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801435c:	6001      	str	r1, [r0, #0]
 801435e:	7303      	strb	r3, [r0, #12]
 8014360:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014364:	4770      	bx	lr
 8014366:	bf00      	nop

08014368 <uxr_reset_output_best_effort_stream>:
 8014368:	7b02      	ldrb	r2, [r0, #12]
 801436a:	6042      	str	r2, [r0, #4]
 801436c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014370:	81c3      	strh	r3, [r0, #14]
 8014372:	4770      	bx	lr

08014374 <uxr_prepare_best_effort_buffer_to_write>:
 8014374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014376:	4604      	mov	r4, r0
 8014378:	b083      	sub	sp, #12
 801437a:	6840      	ldr	r0, [r0, #4]
 801437c:	460d      	mov	r5, r1
 801437e:	4616      	mov	r6, r2
 8014380:	f7f9 fe3a 	bl	800dff8 <uxr_submessage_padding>
 8014384:	6863      	ldr	r3, [r4, #4]
 8014386:	4418      	add	r0, r3
 8014388:	68a3      	ldr	r3, [r4, #8]
 801438a:	1942      	adds	r2, r0, r5
 801438c:	4293      	cmp	r3, r2
 801438e:	bf2c      	ite	cs
 8014390:	2701      	movcs	r7, #1
 8014392:	2700      	movcc	r7, #0
 8014394:	d202      	bcs.n	801439c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014396:	4638      	mov	r0, r7
 8014398:	b003      	add	sp, #12
 801439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801439c:	9000      	str	r0, [sp, #0]
 801439e:	6821      	ldr	r1, [r4, #0]
 80143a0:	4630      	mov	r0, r6
 80143a2:	2300      	movs	r3, #0
 80143a4:	f7f8 f968 	bl	800c678 <ucdr_init_buffer_origin_offset>
 80143a8:	6861      	ldr	r1, [r4, #4]
 80143aa:	4638      	mov	r0, r7
 80143ac:	4429      	add	r1, r5
 80143ae:	6061      	str	r1, [r4, #4]
 80143b0:	b003      	add	sp, #12
 80143b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143b4 <uxr_prepare_best_effort_buffer_to_send>:
 80143b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b8:	4604      	mov	r4, r0
 80143ba:	461d      	mov	r5, r3
 80143bc:	6840      	ldr	r0, [r0, #4]
 80143be:	7b23      	ldrb	r3, [r4, #12]
 80143c0:	4298      	cmp	r0, r3
 80143c2:	bf8c      	ite	hi
 80143c4:	2601      	movhi	r6, #1
 80143c6:	2600      	movls	r6, #0
 80143c8:	d802      	bhi.n	80143d0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80143ca:	4630      	mov	r0, r6
 80143cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d0:	4688      	mov	r8, r1
 80143d2:	89e0      	ldrh	r0, [r4, #14]
 80143d4:	2101      	movs	r1, #1
 80143d6:	4617      	mov	r7, r2
 80143d8:	f000 fc3c 	bl	8014c54 <uxr_seq_num_add>
 80143dc:	6823      	ldr	r3, [r4, #0]
 80143de:	81e0      	strh	r0, [r4, #14]
 80143e0:	8028      	strh	r0, [r5, #0]
 80143e2:	f8c8 3000 	str.w	r3, [r8]
 80143e6:	6863      	ldr	r3, [r4, #4]
 80143e8:	603b      	str	r3, [r7, #0]
 80143ea:	7b23      	ldrb	r3, [r4, #12]
 80143ec:	6063      	str	r3, [r4, #4]
 80143ee:	4630      	mov	r0, r6
 80143f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143f4 <on_full_output_buffer>:
 80143f4:	b538      	push	{r3, r4, r5, lr}
 80143f6:	6802      	ldr	r2, [r0, #0]
 80143f8:	460c      	mov	r4, r1
 80143fa:	6809      	ldr	r1, [r1, #0]
 80143fc:	8923      	ldrh	r3, [r4, #8]
 80143fe:	eba2 0c01 	sub.w	ip, r2, r1
 8014402:	6862      	ldr	r2, [r4, #4]
 8014404:	fbb2 f2f3 	udiv	r2, r2, r3
 8014408:	fbbc fcf2 	udiv	ip, ip, r2
 801440c:	f10c 0c01 	add.w	ip, ip, #1
 8014410:	fa1f fc8c 	uxth.w	ip, ip
 8014414:	fbbc fef3 	udiv	lr, ip, r3
 8014418:	fb03 c31e 	mls	r3, r3, lr, ip
 801441c:	b29b      	uxth	r3, r3
 801441e:	fb02 f303 	mul.w	r3, r2, r3
 8014422:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014426:	58ca      	ldr	r2, [r1, r3]
 8014428:	4463      	add	r3, ip
 801442a:	eba2 020c 	sub.w	r2, r2, ip
 801442e:	3308      	adds	r3, #8
 8014430:	4605      	mov	r5, r0
 8014432:	4419      	add	r1, r3
 8014434:	3a04      	subs	r2, #4
 8014436:	6903      	ldr	r3, [r0, #16]
 8014438:	f7f8 f928 	bl	800c68c <ucdr_init_buffer_origin>
 801443c:	4628      	mov	r0, r5
 801443e:	4903      	ldr	r1, [pc, #12]	@ (801444c <on_full_output_buffer+0x58>)
 8014440:	4622      	mov	r2, r4
 8014442:	f7f8 f8ff 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014446:	2000      	movs	r0, #0
 8014448:	bd38      	pop	{r3, r4, r5, pc}
 801444a:	bf00      	nop
 801444c:	080143f5 	.word	0x080143f5

08014450 <uxr_init_output_reliable_stream>:
 8014450:	b410      	push	{r4}
 8014452:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014456:	8103      	strh	r3, [r0, #8]
 8014458:	e9c0 1200 	strd	r1, r2, [r0]
 801445c:	f880 c00c 	strb.w	ip, [r0, #12]
 8014460:	b1d3      	cbz	r3, 8014498 <uxr_init_output_reliable_stream+0x48>
 8014462:	f8c1 c000 	str.w	ip, [r1]
 8014466:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801446a:	f1bc 0f01 	cmp.w	ip, #1
 801446e:	d913      	bls.n	8014498 <uxr_init_output_reliable_stream+0x48>
 8014470:	2301      	movs	r3, #1
 8014472:	fbb3 f1fc 	udiv	r1, r3, ip
 8014476:	fb0c 3111 	mls	r1, ip, r1, r3
 801447a:	b289      	uxth	r1, r1
 801447c:	6842      	ldr	r2, [r0, #4]
 801447e:	6804      	ldr	r4, [r0, #0]
 8014480:	fbb2 f2fc 	udiv	r2, r2, ip
 8014484:	fb01 f202 	mul.w	r2, r1, r2
 8014488:	7b01      	ldrb	r1, [r0, #12]
 801448a:	50a1      	str	r1, [r4, r2]
 801448c:	3301      	adds	r3, #1
 801448e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014492:	b29b      	uxth	r3, r3
 8014494:	459c      	cmp	ip, r3
 8014496:	d8ec      	bhi.n	8014472 <uxr_init_output_reliable_stream+0x22>
 8014498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801449c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144a0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80144a4:	4905      	ldr	r1, [pc, #20]	@ (80144bc <uxr_init_output_reliable_stream+0x6c>)
 80144a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144aa:	f8c0 100e 	str.w	r1, [r0, #14]
 80144ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144b2:	2300      	movs	r3, #0
 80144b4:	8242      	strh	r2, [r0, #18]
 80144b6:	8403      	strh	r3, [r0, #32]
 80144b8:	4770      	bx	lr
 80144ba:	bf00      	nop
 80144bc:	ffff0000 	.word	0xffff0000

080144c0 <uxr_reset_output_reliable_stream>:
 80144c0:	8901      	ldrh	r1, [r0, #8]
 80144c2:	b1b1      	cbz	r1, 80144f2 <uxr_reset_output_reliable_stream+0x32>
 80144c4:	f04f 0c00 	mov.w	ip, #0
 80144c8:	4663      	mov	r3, ip
 80144ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80144ce:	fb01 3312 	mls	r3, r1, r2, r3
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	6842      	ldr	r2, [r0, #4]
 80144d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80144da:	6801      	ldr	r1, [r0, #0]
 80144dc:	fb02 f303 	mul.w	r3, r2, r3
 80144e0:	7b02      	ldrb	r2, [r0, #12]
 80144e2:	50ca      	str	r2, [r1, r3]
 80144e4:	f10c 0c01 	add.w	ip, ip, #1
 80144e8:	8901      	ldrh	r1, [r0, #8]
 80144ea:	fa1f f38c 	uxth.w	r3, ip
 80144ee:	4299      	cmp	r1, r3
 80144f0:	d8eb      	bhi.n	80144ca <uxr_reset_output_reliable_stream+0xa>
 80144f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80144fe:	4904      	ldr	r1, [pc, #16]	@ (8014510 <uxr_reset_output_reliable_stream+0x50>)
 8014500:	f8c0 100e 	str.w	r1, [r0, #14]
 8014504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014508:	2300      	movs	r3, #0
 801450a:	8242      	strh	r2, [r0, #18]
 801450c:	8403      	strh	r3, [r0, #32]
 801450e:	4770      	bx	lr
 8014510:	ffff0000 	.word	0xffff0000

08014514 <uxr_prepare_reliable_buffer_to_write>:
 8014514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014518:	4604      	mov	r4, r0
 801451a:	b091      	sub	sp, #68	@ 0x44
 801451c:	8900      	ldrh	r0, [r0, #8]
 801451e:	89e6      	ldrh	r6, [r4, #14]
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	9204      	str	r2, [sp, #16]
 8014524:	fbb6 f2f0 	udiv	r2, r6, r0
 8014528:	fb00 6212 	mls	r2, r0, r2, r6
 801452c:	b292      	uxth	r2, r2
 801452e:	6865      	ldr	r5, [r4, #4]
 8014530:	fbb5 f5f0 	udiv	r5, r5, r0
 8014534:	fb05 3202 	mla	r2, r5, r2, r3
 8014538:	3204      	adds	r2, #4
 801453a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801453e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014542:	9203      	str	r2, [sp, #12]
 8014544:	468b      	mov	fp, r1
 8014546:	1f2f      	subs	r7, r5, #4
 8014548:	2800      	cmp	r0, #0
 801454a:	f000 814c 	beq.w	80147e6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801454e:	f04f 0c00 	mov.w	ip, #0
 8014552:	46e2      	mov	sl, ip
 8014554:	4661      	mov	r1, ip
 8014556:	fbb1 f2f0 	udiv	r2, r1, r0
 801455a:	fb00 1212 	mls	r2, r0, r2, r1
 801455e:	b292      	uxth	r2, r2
 8014560:	fb05 f202 	mul.w	r2, r5, r2
 8014564:	f10c 0c01 	add.w	ip, ip, #1
 8014568:	589a      	ldr	r2, [r3, r2]
 801456a:	454a      	cmp	r2, r9
 801456c:	bf08      	it	eq
 801456e:	f10a 0a01 	addeq.w	sl, sl, #1
 8014572:	fa1f f18c 	uxth.w	r1, ip
 8014576:	bf08      	it	eq
 8014578:	fa1f fa8a 	uxtheq.w	sl, sl
 801457c:	4281      	cmp	r1, r0
 801457e:	d3ea      	bcc.n	8014556 <uxr_prepare_reliable_buffer_to_write+0x42>
 8014580:	4640      	mov	r0, r8
 8014582:	2104      	movs	r1, #4
 8014584:	f8cd a014 	str.w	sl, [sp, #20]
 8014588:	f7f8 f88c 	bl	800c6a4 <ucdr_alignment>
 801458c:	4480      	add	r8, r0
 801458e:	eb08 020b 	add.w	r2, r8, fp
 8014592:	42ba      	cmp	r2, r7
 8014594:	f240 80cd 	bls.w	8014732 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014598:	7b22      	ldrb	r2, [r4, #12]
 801459a:	445a      	add	r2, fp
 801459c:	42ba      	cmp	r2, r7
 801459e:	f240 80b5 	bls.w	801470c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80145a2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80145a6:	33fc      	adds	r3, #252	@ 0xfc
 80145a8:	b2ba      	uxth	r2, r7
 80145aa:	4413      	add	r3, r2
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	fb0a f903 	mul.w	r9, sl, r3
 80145b2:	45d9      	cmp	r9, fp
 80145b4:	9305      	str	r3, [sp, #20]
 80145b6:	9306      	str	r3, [sp, #24]
 80145b8:	f0c0 80b7 	bcc.w	801472a <uxr_prepare_reliable_buffer_to_write+0x216>
 80145bc:	f108 0304 	add.w	r3, r8, #4
 80145c0:	42bb      	cmp	r3, r7
 80145c2:	f080 80db 	bcs.w	801477c <uxr_prepare_reliable_buffer_to_write+0x268>
 80145c6:	f1a2 0904 	sub.w	r9, r2, #4
 80145ca:	eba9 0908 	sub.w	r9, r9, r8
 80145ce:	9b05      	ldr	r3, [sp, #20]
 80145d0:	fa1f f989 	uxth.w	r9, r9
 80145d4:	ebab 0b09 	sub.w	fp, fp, r9
 80145d8:	fbbb f2f3 	udiv	r2, fp, r3
 80145dc:	fb03 b312 	mls	r3, r3, r2, fp
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	f000 80c8 	beq.w	8014776 <uxr_prepare_reliable_buffer_to_write+0x262>
 80145e6:	3201      	adds	r2, #1
 80145e8:	b292      	uxth	r2, r2
 80145ea:	9306      	str	r3, [sp, #24]
 80145ec:	4552      	cmp	r2, sl
 80145ee:	f200 809c 	bhi.w	801472a <uxr_prepare_reliable_buffer_to_write+0x216>
 80145f2:	f10d 0b20 	add.w	fp, sp, #32
 80145f6:	2a00      	cmp	r2, #0
 80145f8:	d042      	beq.n	8014680 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80145fa:	f8cd 801c 	str.w	r8, [sp, #28]
 80145fe:	f04f 0a00 	mov.w	sl, #0
 8014602:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014606:	9505      	str	r5, [sp, #20]
 8014608:	f10d 0b20 	add.w	fp, sp, #32
 801460c:	4615      	mov	r5, r2
 801460e:	e000      	b.n	8014612 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014610:	46c1      	mov	r9, r8
 8014612:	8920      	ldrh	r0, [r4, #8]
 8014614:	fbb6 f2f0 	udiv	r2, r6, r0
 8014618:	fb00 6112 	mls	r1, r0, r2, r6
 801461c:	b28a      	uxth	r2, r1
 801461e:	6863      	ldr	r3, [r4, #4]
 8014620:	fbb3 f1f0 	udiv	r1, r3, r0
 8014624:	6823      	ldr	r3, [r4, #0]
 8014626:	fb02 f101 	mul.w	r1, r2, r1
 801462a:	3104      	adds	r1, #4
 801462c:	4419      	add	r1, r3
 801462e:	4658      	mov	r0, fp
 8014630:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014634:	9200      	str	r2, [sp, #0]
 8014636:	2300      	movs	r3, #0
 8014638:	463a      	mov	r2, r7
 801463a:	f7f8 f81d 	bl	800c678 <ucdr_init_buffer_origin_offset>
 801463e:	464a      	mov	r2, r9
 8014640:	2300      	movs	r3, #0
 8014642:	210d      	movs	r1, #13
 8014644:	4658      	mov	r0, fp
 8014646:	f7f9 fc97 	bl	800df78 <uxr_buffer_submessage_header>
 801464a:	8921      	ldrh	r1, [r4, #8]
 801464c:	fbb6 f2f1 	udiv	r2, r6, r1
 8014650:	fb01 6212 	mls	r2, r1, r2, r6
 8014654:	b292      	uxth	r2, r2
 8014656:	6863      	ldr	r3, [r4, #4]
 8014658:	fbb3 f3f1 	udiv	r3, r3, r1
 801465c:	fb02 f303 	mul.w	r3, r2, r3
 8014660:	6822      	ldr	r2, [r4, #0]
 8014662:	4630      	mov	r0, r6
 8014664:	50d7      	str	r7, [r2, r3]
 8014666:	2101      	movs	r1, #1
 8014668:	f000 faf4 	bl	8014c54 <uxr_seq_num_add>
 801466c:	f10a 0a01 	add.w	sl, sl, #1
 8014670:	fa1f f38a 	uxth.w	r3, sl
 8014674:	429d      	cmp	r5, r3
 8014676:	4606      	mov	r6, r0
 8014678:	d8ca      	bhi.n	8014610 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801467a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801467e:	9d05      	ldr	r5, [sp, #20]
 8014680:	8920      	ldrh	r0, [r4, #8]
 8014682:	fbb6 f3f0 	udiv	r3, r6, r0
 8014686:	fb00 6313 	mls	r3, r0, r3, r6
 801468a:	b299      	uxth	r1, r3
 801468c:	6863      	ldr	r3, [r4, #4]
 801468e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014692:	fb01 f303 	mul.w	r3, r1, r3
 8014696:	6821      	ldr	r1, [r4, #0]
 8014698:	3304      	adds	r3, #4
 801469a:	4419      	add	r1, r3
 801469c:	463a      	mov	r2, r7
 801469e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80146a2:	9000      	str	r0, [sp, #0]
 80146a4:	2300      	movs	r3, #0
 80146a6:	4658      	mov	r0, fp
 80146a8:	f7f7 ffe6 	bl	800c678 <ucdr_init_buffer_origin_offset>
 80146ac:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80146b0:	4658      	mov	r0, fp
 80146b2:	fa1f f289 	uxth.w	r2, r9
 80146b6:	2302      	movs	r3, #2
 80146b8:	210d      	movs	r1, #13
 80146ba:	f7f9 fc5d 	bl	800df78 <uxr_buffer_submessage_header>
 80146be:	9b03      	ldr	r3, [sp, #12]
 80146c0:	8927      	ldrh	r7, [r4, #8]
 80146c2:	7b20      	ldrb	r0, [r4, #12]
 80146c4:	f108 0104 	add.w	r1, r8, #4
 80146c8:	440b      	add	r3, r1
 80146ca:	4619      	mov	r1, r3
 80146cc:	fbb6 f3f7 	udiv	r3, r6, r7
 80146d0:	fb07 6313 	mls	r3, r7, r3, r6
 80146d4:	f1a5 0208 	sub.w	r2, r5, #8
 80146d8:	b29d      	uxth	r5, r3
 80146da:	3004      	adds	r0, #4
 80146dc:	6863      	ldr	r3, [r4, #4]
 80146de:	fbb3 f3f7 	udiv	r3, r3, r7
 80146e2:	fb05 f303 	mul.w	r3, r5, r3
 80146e6:	6825      	ldr	r5, [r4, #0]
 80146e8:	4448      	add	r0, r9
 80146ea:	50e8      	str	r0, [r5, r3]
 80146ec:	9d04      	ldr	r5, [sp, #16]
 80146ee:	eba2 0208 	sub.w	r2, r2, r8
 80146f2:	4628      	mov	r0, r5
 80146f4:	f7f7 ffd2 	bl	800c69c <ucdr_init_buffer>
 80146f8:	4628      	mov	r0, r5
 80146fa:	493c      	ldr	r1, [pc, #240]	@ (80147ec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80146fc:	4622      	mov	r2, r4
 80146fe:	f7f7 ffa1 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014702:	2001      	movs	r0, #1
 8014704:	81e6      	strh	r6, [r4, #14]
 8014706:	b011      	add	sp, #68	@ 0x44
 8014708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801470c:	2101      	movs	r1, #1
 801470e:	89e0      	ldrh	r0, [r4, #14]
 8014710:	f000 faa0 	bl	8014c54 <uxr_seq_num_add>
 8014714:	8921      	ldrh	r1, [r4, #8]
 8014716:	4605      	mov	r5, r0
 8014718:	8a60      	ldrh	r0, [r4, #18]
 801471a:	f000 fa9b 	bl	8014c54 <uxr_seq_num_add>
 801471e:	4601      	mov	r1, r0
 8014720:	4628      	mov	r0, r5
 8014722:	f000 fa9f 	bl	8014c64 <uxr_seq_num_cmp>
 8014726:	2800      	cmp	r0, #0
 8014728:	dd42      	ble.n	80147b0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801472a:	2000      	movs	r0, #0
 801472c:	b011      	add	sp, #68	@ 0x44
 801472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014732:	8921      	ldrh	r1, [r4, #8]
 8014734:	8a60      	ldrh	r0, [r4, #18]
 8014736:	9205      	str	r2, [sp, #20]
 8014738:	f000 fa8c 	bl	8014c54 <uxr_seq_num_add>
 801473c:	4601      	mov	r1, r0
 801473e:	4630      	mov	r0, r6
 8014740:	f000 fa90 	bl	8014c64 <uxr_seq_num_cmp>
 8014744:	2800      	cmp	r0, #0
 8014746:	9a05      	ldr	r2, [sp, #20]
 8014748:	dcef      	bgt.n	801472a <uxr_prepare_reliable_buffer_to_write+0x216>
 801474a:	8927      	ldrh	r7, [r4, #8]
 801474c:	fbb6 f3f7 	udiv	r3, r6, r7
 8014750:	fb07 6313 	mls	r3, r7, r3, r6
 8014754:	b29d      	uxth	r5, r3
 8014756:	6863      	ldr	r3, [r4, #4]
 8014758:	6824      	ldr	r4, [r4, #0]
 801475a:	fbb3 f3f7 	udiv	r3, r3, r7
 801475e:	fb05 f303 	mul.w	r3, r5, r3
 8014762:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014766:	50e2      	str	r2, [r4, r3]
 8014768:	2300      	movs	r3, #0
 801476a:	f8cd 8000 	str.w	r8, [sp]
 801476e:	f7f7 ff83 	bl	800c678 <ucdr_init_buffer_origin_offset>
 8014772:	2001      	movs	r0, #1
 8014774:	e7da      	b.n	801472c <uxr_prepare_reliable_buffer_to_write+0x218>
 8014776:	b293      	uxth	r3, r2
 8014778:	461a      	mov	r2, r3
 801477a:	e737      	b.n	80145ec <uxr_prepare_reliable_buffer_to_write+0xd8>
 801477c:	4630      	mov	r0, r6
 801477e:	2101      	movs	r1, #1
 8014780:	9207      	str	r2, [sp, #28]
 8014782:	f000 fa67 	bl	8014c54 <uxr_seq_num_add>
 8014786:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801478a:	fbb0 f1fc 	udiv	r1, r0, ip
 801478e:	fb0c 0111 	mls	r1, ip, r1, r0
 8014792:	4606      	mov	r6, r0
 8014794:	b288      	uxth	r0, r1
 8014796:	6863      	ldr	r3, [r4, #4]
 8014798:	fbb3 f1fc 	udiv	r1, r3, ip
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	9a07      	ldr	r2, [sp, #28]
 80147a0:	fb00 f101 	mul.w	r1, r0, r1
 80147a4:	3104      	adds	r1, #4
 80147a6:	440b      	add	r3, r1
 80147a8:	9303      	str	r3, [sp, #12]
 80147aa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80147ae:	e70a      	b.n	80145c6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80147b0:	8921      	ldrh	r1, [r4, #8]
 80147b2:	fbb5 f3f1 	udiv	r3, r5, r1
 80147b6:	fb01 5313 	mls	r3, r1, r3, r5
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	6863      	ldr	r3, [r4, #4]
 80147be:	fbb3 f3f1 	udiv	r3, r3, r1
 80147c2:	6821      	ldr	r1, [r4, #0]
 80147c4:	9804      	ldr	r0, [sp, #16]
 80147c6:	fb02 f303 	mul.w	r3, r2, r3
 80147ca:	3304      	adds	r3, #4
 80147cc:	7b22      	ldrb	r2, [r4, #12]
 80147ce:	4419      	add	r1, r3
 80147d0:	445a      	add	r2, fp
 80147d2:	f841 2c04 	str.w	r2, [r1, #-4]
 80147d6:	7b23      	ldrb	r3, [r4, #12]
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	2300      	movs	r3, #0
 80147dc:	f7f7 ff4c 	bl	800c678 <ucdr_init_buffer_origin_offset>
 80147e0:	81e5      	strh	r5, [r4, #14]
 80147e2:	2001      	movs	r0, #1
 80147e4:	e7a2      	b.n	801472c <uxr_prepare_reliable_buffer_to_write+0x218>
 80147e6:	4682      	mov	sl, r0
 80147e8:	e6ca      	b.n	8014580 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80147ea:	bf00      	nop
 80147ec:	080143f5 	.word	0x080143f5

080147f0 <uxr_prepare_next_reliable_buffer_to_send>:
 80147f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f2:	4604      	mov	r4, r0
 80147f4:	460f      	mov	r7, r1
 80147f6:	8a00      	ldrh	r0, [r0, #16]
 80147f8:	2101      	movs	r1, #1
 80147fa:	4616      	mov	r6, r2
 80147fc:	461d      	mov	r5, r3
 80147fe:	f000 fa29 	bl	8014c54 <uxr_seq_num_add>
 8014802:	8028      	strh	r0, [r5, #0]
 8014804:	8922      	ldrh	r2, [r4, #8]
 8014806:	fbb0 f3f2 	udiv	r3, r0, r2
 801480a:	fb02 0c13 	mls	ip, r2, r3, r0
 801480e:	fa1f fc8c 	uxth.w	ip, ip
 8014812:	6863      	ldr	r3, [r4, #4]
 8014814:	fbb3 f3f2 	udiv	r3, r3, r2
 8014818:	fb0c fc03 	mul.w	ip, ip, r3
 801481c:	6823      	ldr	r3, [r4, #0]
 801481e:	89e1      	ldrh	r1, [r4, #14]
 8014820:	f10c 0c04 	add.w	ip, ip, #4
 8014824:	4463      	add	r3, ip
 8014826:	603b      	str	r3, [r7, #0]
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	449c      	add	ip, r3
 801482c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014830:	6033      	str	r3, [r6, #0]
 8014832:	f000 fa17 	bl	8014c64 <uxr_seq_num_cmp>
 8014836:	2800      	cmp	r0, #0
 8014838:	dd01      	ble.n	801483e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801483a:	2000      	movs	r0, #0
 801483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801483e:	7b23      	ldrb	r3, [r4, #12]
 8014840:	6832      	ldr	r2, [r6, #0]
 8014842:	429a      	cmp	r2, r3
 8014844:	d9f9      	bls.n	801483a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014846:	8a61      	ldrh	r1, [r4, #18]
 8014848:	8a20      	ldrh	r0, [r4, #16]
 801484a:	f000 fa07 	bl	8014c5c <uxr_seq_num_sub>
 801484e:	8923      	ldrh	r3, [r4, #8]
 8014850:	4283      	cmp	r3, r0
 8014852:	d0f2      	beq.n	801483a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014854:	8828      	ldrh	r0, [r5, #0]
 8014856:	89e3      	ldrh	r3, [r4, #14]
 8014858:	8220      	strh	r0, [r4, #16]
 801485a:	4298      	cmp	r0, r3
 801485c:	d001      	beq.n	8014862 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801485e:	2001      	movs	r0, #1
 8014860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014862:	2101      	movs	r1, #1
 8014864:	f000 f9f6 	bl	8014c54 <uxr_seq_num_add>
 8014868:	81e0      	strh	r0, [r4, #14]
 801486a:	2001      	movs	r0, #1
 801486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801486e:	bf00      	nop

08014870 <uxr_update_output_stream_heartbeat_timestamp>:
 8014870:	b570      	push	{r4, r5, r6, lr}
 8014872:	8a01      	ldrh	r1, [r0, #16]
 8014874:	4604      	mov	r4, r0
 8014876:	8a40      	ldrh	r0, [r0, #18]
 8014878:	4615      	mov	r5, r2
 801487a:	461e      	mov	r6, r3
 801487c:	f000 f9f2 	bl	8014c64 <uxr_seq_num_cmp>
 8014880:	2800      	cmp	r0, #0
 8014882:	db07      	blt.n	8014894 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014888:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801488c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014890:	2000      	movs	r0, #0
 8014892:	bd70      	pop	{r4, r5, r6, pc}
 8014894:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014898:	b940      	cbnz	r0, 80148ac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801489a:	2301      	movs	r3, #1
 801489c:	f884 3020 	strb.w	r3, [r4, #32]
 80148a0:	3564      	adds	r5, #100	@ 0x64
 80148a2:	f146 0600 	adc.w	r6, r6, #0
 80148a6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80148aa:	bd70      	pop	{r4, r5, r6, pc}
 80148ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80148b0:	4295      	cmp	r5, r2
 80148b2:	eb76 0303 	sbcs.w	r3, r6, r3
 80148b6:	bfa5      	ittet	ge
 80148b8:	3001      	addge	r0, #1
 80148ba:	f884 0020 	strbge.w	r0, [r4, #32]
 80148be:	2000      	movlt	r0, #0
 80148c0:	2001      	movge	r0, #1
 80148c2:	e7ed      	b.n	80148a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080148c4 <uxr_begin_output_nack_buffer_it>:
 80148c4:	8a40      	ldrh	r0, [r0, #18]
 80148c6:	4770      	bx	lr

080148c8 <uxr_next_reliable_nack_buffer_to_send>:
 80148c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148cc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80148d0:	b082      	sub	sp, #8
 80148d2:	f1b8 0f00 	cmp.w	r8, #0
 80148d6:	d011      	beq.n	80148fc <uxr_next_reliable_nack_buffer_to_send+0x34>
 80148d8:	4604      	mov	r4, r0
 80148da:	8818      	ldrh	r0, [r3, #0]
 80148dc:	460e      	mov	r6, r1
 80148de:	4617      	mov	r7, r2
 80148e0:	461d      	mov	r5, r3
 80148e2:	2101      	movs	r1, #1
 80148e4:	f000 f9b6 	bl	8014c54 <uxr_seq_num_add>
 80148e8:	8028      	strh	r0, [r5, #0]
 80148ea:	8a21      	ldrh	r1, [r4, #16]
 80148ec:	f000 f9ba 	bl	8014c64 <uxr_seq_num_cmp>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	dd07      	ble.n	8014904 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80148f4:	f04f 0800 	mov.w	r8, #0
 80148f8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80148fc:	4640      	mov	r0, r8
 80148fe:	b002      	add	sp, #8
 8014900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014904:	8921      	ldrh	r1, [r4, #8]
 8014906:	8828      	ldrh	r0, [r5, #0]
 8014908:	6823      	ldr	r3, [r4, #0]
 801490a:	fbb0 f2f1 	udiv	r2, r0, r1
 801490e:	fb01 0c12 	mls	ip, r1, r2, r0
 8014912:	fa1f f28c 	uxth.w	r2, ip
 8014916:	9301      	str	r3, [sp, #4]
 8014918:	6863      	ldr	r3, [r4, #4]
 801491a:	fbb3 fcf1 	udiv	ip, r3, r1
 801491e:	9b01      	ldr	r3, [sp, #4]
 8014920:	fb02 fc0c 	mul.w	ip, r2, ip
 8014924:	f10c 0c04 	add.w	ip, ip, #4
 8014928:	4463      	add	r3, ip
 801492a:	6033      	str	r3, [r6, #0]
 801492c:	6823      	ldr	r3, [r4, #0]
 801492e:	4463      	add	r3, ip
 8014930:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014934:	603b      	str	r3, [r7, #0]
 8014936:	7b22      	ldrb	r2, [r4, #12]
 8014938:	429a      	cmp	r2, r3
 801493a:	d0d2      	beq.n	80148e2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801493c:	4640      	mov	r0, r8
 801493e:	b002      	add	sp, #8
 8014940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014944 <uxr_process_acknack>:
 8014944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014946:	4604      	mov	r4, r0
 8014948:	460e      	mov	r6, r1
 801494a:	4610      	mov	r0, r2
 801494c:	2101      	movs	r1, #1
 801494e:	f000 f985 	bl	8014c5c <uxr_seq_num_sub>
 8014952:	8a61      	ldrh	r1, [r4, #18]
 8014954:	f000 f982 	bl	8014c5c <uxr_seq_num_sub>
 8014958:	b1c0      	cbz	r0, 801498c <uxr_process_acknack+0x48>
 801495a:	4605      	mov	r5, r0
 801495c:	2700      	movs	r7, #0
 801495e:	2101      	movs	r1, #1
 8014960:	8a60      	ldrh	r0, [r4, #18]
 8014962:	f000 f977 	bl	8014c54 <uxr_seq_num_add>
 8014966:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801496a:	fbb0 f1fc 	udiv	r1, r0, ip
 801496e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014972:	fb0c 0111 	mls	r1, ip, r1, r0
 8014976:	b289      	uxth	r1, r1
 8014978:	3701      	adds	r7, #1
 801497a:	fbb3 f3fc 	udiv	r3, r3, ip
 801497e:	fb01 f303 	mul.w	r3, r1, r3
 8014982:	42bd      	cmp	r5, r7
 8014984:	7b21      	ldrb	r1, [r4, #12]
 8014986:	8260      	strh	r0, [r4, #18]
 8014988:	50d1      	str	r1, [r2, r3]
 801498a:	d1e8      	bne.n	801495e <uxr_process_acknack+0x1a>
 801498c:	3e00      	subs	r6, #0
 801498e:	f04f 0300 	mov.w	r3, #0
 8014992:	bf18      	it	ne
 8014994:	2601      	movne	r6, #1
 8014996:	f884 3020 	strb.w	r3, [r4, #32]
 801499a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149a0 <uxr_is_output_up_to_date>:
 80149a0:	8a01      	ldrh	r1, [r0, #16]
 80149a2:	8a40      	ldrh	r0, [r0, #18]
 80149a4:	b508      	push	{r3, lr}
 80149a6:	f000 f95d 	bl	8014c64 <uxr_seq_num_cmp>
 80149aa:	fab0 f080 	clz	r0, r0
 80149ae:	0940      	lsrs	r0, r0, #5
 80149b0:	bd08      	pop	{r3, pc}
 80149b2:	bf00      	nop

080149b4 <get_available_free_slots>:
 80149b4:	8902      	ldrh	r2, [r0, #8]
 80149b6:	b1da      	cbz	r2, 80149f0 <get_available_free_slots+0x3c>
 80149b8:	b530      	push	{r4, r5, lr}
 80149ba:	2100      	movs	r1, #0
 80149bc:	6843      	ldr	r3, [r0, #4]
 80149be:	6805      	ldr	r5, [r0, #0]
 80149c0:	7b04      	ldrb	r4, [r0, #12]
 80149c2:	fbb3 fef2 	udiv	lr, r3, r2
 80149c6:	4608      	mov	r0, r1
 80149c8:	460b      	mov	r3, r1
 80149ca:	fbb3 fcf2 	udiv	ip, r3, r2
 80149ce:	fb02 331c 	mls	r3, r2, ip, r3
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	fb0e f303 	mul.w	r3, lr, r3
 80149d8:	3101      	adds	r1, #1
 80149da:	f855 c003 	ldr.w	ip, [r5, r3]
 80149de:	4564      	cmp	r4, ip
 80149e0:	bf08      	it	eq
 80149e2:	3001      	addeq	r0, #1
 80149e4:	b28b      	uxth	r3, r1
 80149e6:	bf08      	it	eq
 80149e8:	b280      	uxtheq	r0, r0
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d3ed      	bcc.n	80149ca <get_available_free_slots+0x16>
 80149ee:	bd30      	pop	{r4, r5, pc}
 80149f0:	4610      	mov	r0, r2
 80149f2:	4770      	bx	lr

080149f4 <uxr_buffer_request_data>:
 80149f4:	b530      	push	{r4, r5, lr}
 80149f6:	b095      	sub	sp, #84	@ 0x54
 80149f8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80149fc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80149fe:	9303      	str	r3, [sp, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	2d00      	cmp	r5, #0
 8014a04:	bf14      	ite	ne
 8014a06:	2101      	movne	r1, #1
 8014a08:	4611      	moveq	r1, r2
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014a10:	f88d 201d 	strb.w	r2, [sp, #29]
 8014a14:	f88d 201e 	strb.w	r2, [sp, #30]
 8014a18:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8014a1c:	d021      	beq.n	8014a62 <uxr_buffer_request_data+0x6e>
 8014a1e:	682a      	ldr	r2, [r5, #0]
 8014a20:	686b      	ldr	r3, [r5, #4]
 8014a22:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8014a26:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014a2a:	2210      	movs	r2, #16
 8014a2c:	2308      	movs	r3, #8
 8014a2e:	2100      	movs	r1, #0
 8014a30:	e9cd 3100 	strd	r3, r1, [sp]
 8014a34:	4620      	mov	r0, r4
 8014a36:	9905      	ldr	r1, [sp, #20]
 8014a38:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a3a:	f7f8 ffff 	bl	800da3c <uxr_prepare_stream_to_write_submessage>
 8014a3e:	b918      	cbnz	r0, 8014a48 <uxr_buffer_request_data+0x54>
 8014a40:	4604      	mov	r4, r0
 8014a42:	4620      	mov	r0, r4
 8014a44:	b015      	add	sp, #84	@ 0x54
 8014a46:	bd30      	pop	{r4, r5, pc}
 8014a48:	9904      	ldr	r1, [sp, #16]
 8014a4a:	aa06      	add	r2, sp, #24
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	f7f9 f92b 	bl	800dca8 <uxr_init_base_object_request>
 8014a52:	a906      	add	r1, sp, #24
 8014a54:	4604      	mov	r4, r0
 8014a56:	a80c      	add	r0, sp, #48	@ 0x30
 8014a58:	f7fa fc26 	bl	800f2a8 <uxr_serialize_READ_DATA_Payload>
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	b015      	add	sp, #84	@ 0x54
 8014a60:	bd30      	pop	{r4, r5, pc}
 8014a62:	2208      	movs	r2, #8
 8014a64:	e7e2      	b.n	8014a2c <uxr_buffer_request_data+0x38>
 8014a66:	bf00      	nop

08014a68 <uxr_buffer_cancel_data>:
 8014a68:	b510      	push	{r4, lr}
 8014a6a:	b094      	sub	sp, #80	@ 0x50
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	9202      	str	r2, [sp, #8]
 8014a70:	9205      	str	r2, [sp, #20]
 8014a72:	9301      	str	r3, [sp, #4]
 8014a74:	2201      	movs	r2, #1
 8014a76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a7a:	f88d 301e 	strb.w	r3, [sp, #30]
 8014a7e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014a82:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014a86:	2308      	movs	r3, #8
 8014a88:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014a8c:	9300      	str	r3, [sp, #0]
 8014a8e:	2210      	movs	r2, #16
 8014a90:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a92:	4604      	mov	r4, r0
 8014a94:	9103      	str	r1, [sp, #12]
 8014a96:	f7f8 ffd1 	bl	800da3c <uxr_prepare_stream_to_write_submessage>
 8014a9a:	b918      	cbnz	r0, 8014aa4 <uxr_buffer_cancel_data+0x3c>
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	b014      	add	sp, #80	@ 0x50
 8014aa2:	bd10      	pop	{r4, pc}
 8014aa4:	9905      	ldr	r1, [sp, #20]
 8014aa6:	aa06      	add	r2, sp, #24
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	f7f9 f8fd 	bl	800dca8 <uxr_init_base_object_request>
 8014aae:	a906      	add	r1, sp, #24
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	a80c      	add	r0, sp, #48	@ 0x30
 8014ab4:	f7fa fbf8 	bl	800f2a8 <uxr_serialize_READ_DATA_Payload>
 8014ab8:	4620      	mov	r0, r4
 8014aba:	b014      	add	sp, #80	@ 0x50
 8014abc:	bd10      	pop	{r4, pc}
 8014abe:	bf00      	nop

08014ac0 <read_submessage_format>:
 8014ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ac4:	b095      	sub	sp, #84	@ 0x54
 8014ac6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8014aca:	b113      	cbz	r3, 8014ad2 <read_submessage_format+0x12>
 8014acc:	b015      	add	sp, #84	@ 0x54
 8014ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	4615      	mov	r5, r2
 8014ad6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014ada:	4607      	mov	r7, r0
 8014adc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014ade:	9004      	str	r0, [sp, #16]
 8014ae0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014ae2:	9005      	str	r0, [sp, #20]
 8014ae4:	1a52      	subs	r2, r2, r1
 8014ae6:	a80c      	add	r0, sp, #48	@ 0x30
 8014ae8:	4699      	mov	r9, r3
 8014aea:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8014aee:	f7f7 fdd5 	bl	800c69c <ucdr_init_buffer>
 8014af2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014af6:	a80c      	add	r0, sp, #48	@ 0x30
 8014af8:	f7f7 fda4 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014afc:	69e2      	ldr	r2, [r4, #28]
 8014afe:	b19a      	cbz	r2, 8014b28 <read_submessage_format+0x68>
 8014b00:	f1b8 0f07 	cmp.w	r8, #7
 8014b04:	f882 9014 	strb.w	r9, [r2, #20]
 8014b08:	d040      	beq.n	8014b8c <read_submessage_format+0xcc>
 8014b0a:	f1b8 0f08 	cmp.w	r8, #8
 8014b0e:	d02e      	beq.n	8014b6e <read_submessage_format+0xae>
 8014b10:	f1b8 0f06 	cmp.w	r8, #6
 8014b14:	d011      	beq.n	8014b3a <read_submessage_format+0x7a>
 8014b16:	2301      	movs	r3, #1
 8014b18:	7513      	strb	r3, [r2, #20]
 8014b1a:	4629      	mov	r1, r5
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f7f7 fe0d 	bl	800c73c <ucdr_advance_buffer>
 8014b22:	b015      	add	sp, #84	@ 0x54
 8014b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b28:	f1b8 0f07 	cmp.w	r8, #7
 8014b2c:	d02e      	beq.n	8014b8c <read_submessage_format+0xcc>
 8014b2e:	f1b8 0f08 	cmp.w	r8, #8
 8014b32:	d01c      	beq.n	8014b6e <read_submessage_format+0xae>
 8014b34:	f1b8 0f06 	cmp.w	r8, #6
 8014b38:	d1ef      	bne.n	8014b1a <read_submessage_format+0x5a>
 8014b3a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8014b3e:	f1b8 0f00 	cmp.w	r8, #0
 8014b42:	d011      	beq.n	8014b68 <read_submessage_format+0xa8>
 8014b44:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b46:	e9cd 3500 	strd	r3, r5, [sp]
 8014b4a:	2306      	movs	r3, #6
 8014b4c:	f88d 3016 	strb.w	r3, [sp, #22]
 8014b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b54:	9302      	str	r3, [sp, #8]
 8014b56:	4632      	mov	r2, r6
 8014b58:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	47c0      	blx	r8
 8014b60:	2301      	movs	r3, #1
 8014b62:	69e2      	ldr	r2, [r4, #28]
 8014b64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014b68:	2a00      	cmp	r2, #0
 8014b6a:	d1d4      	bne.n	8014b16 <read_submessage_format+0x56>
 8014b6c:	e7d5      	b.n	8014b1a <read_submessage_format+0x5a>
 8014b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d0f8      	beq.n	8014b68 <read_submessage_format+0xa8>
 8014b76:	a906      	add	r1, sp, #24
 8014b78:	a80c      	add	r0, sp, #48	@ 0x30
 8014b7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b7e:	f7fa fc59 	bl	800f434 <uxr_deserialize_SampleIdentity>
 8014b82:	b9a0      	cbnz	r0, 8014bae <read_submessage_format+0xee>
 8014b84:	69e2      	ldr	r2, [r4, #28]
 8014b86:	2a00      	cmp	r2, #0
 8014b88:	d1c5      	bne.n	8014b16 <read_submessage_format+0x56>
 8014b8a:	e7c6      	b.n	8014b1a <read_submessage_format+0x5a>
 8014b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b90:	b13b      	cbz	r3, 8014ba2 <read_submessage_format+0xe2>
 8014b92:	a906      	add	r1, sp, #24
 8014b94:	a80c      	add	r0, sp, #48	@ 0x30
 8014b96:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b9a:	f7fa f91f 	bl	800eddc <uxr_deserialize_BaseObjectRequest>
 8014b9e:	bb60      	cbnz	r0, 8014bfa <read_submessage_format+0x13a>
 8014ba0:	69e2      	ldr	r2, [r4, #28]
 8014ba2:	68a3      	ldr	r3, [r4, #8]
 8014ba4:	442b      	add	r3, r5
 8014ba6:	60a3      	str	r3, [r4, #8]
 8014ba8:	2a00      	cmp	r2, #0
 8014baa:	d1b4      	bne.n	8014b16 <read_submessage_format+0x56>
 8014bac:	e7b5      	b.n	8014b1a <read_submessage_format+0x5a>
 8014bae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014bb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014bb4:	1a52      	subs	r2, r2, r1
 8014bb6:	eba8 0803 	sub.w	r8, r8, r3
 8014bba:	a80c      	add	r0, sp, #48	@ 0x30
 8014bbc:	f7f7 fd6e 	bl	800c69c <ucdr_init_buffer>
 8014bc0:	44a8      	add	r8, r5
 8014bc2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014bc6:	a80c      	add	r0, sp, #48	@ 0x30
 8014bc8:	f7f7 fd3c 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014bcc:	fa1f f888 	uxth.w	r8, r8
 8014bd0:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	f8cd 8004 	str.w	r8, [sp, #4]
 8014bd8:	2108      	movs	r1, #8
 8014bda:	f88d 1016 	strb.w	r1, [sp, #22]
 8014bde:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8014be2:	9102      	str	r1, [sp, #8]
 8014be4:	ab06      	add	r3, sp, #24
 8014be6:	4632      	mov	r2, r6
 8014be8:	9905      	ldr	r1, [sp, #20]
 8014bea:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8014bee:	4638      	mov	r0, r7
 8014bf0:	47b0      	blx	r6
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014bf8:	e7c4      	b.n	8014b84 <read_submessage_format+0xc4>
 8014bfa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014bfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c00:	1a52      	subs	r2, r2, r1
 8014c02:	a80c      	add	r0, sp, #48	@ 0x30
 8014c04:	eba8 0803 	sub.w	r8, r8, r3
 8014c08:	f7f7 fd48 	bl	800c69c <ucdr_init_buffer>
 8014c0c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014c10:	a80c      	add	r0, sp, #48	@ 0x30
 8014c12:	f7f7 fd17 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8014c16:	ab0c      	add	r3, sp, #48	@ 0x30
 8014c18:	9300      	str	r3, [sp, #0]
 8014c1a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014c1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c22:	44a8      	add	r8, r5
 8014c24:	fa1f f888 	uxth.w	r8, r8
 8014c28:	f8cd 8004 	str.w	r8, [sp, #4]
 8014c2c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014c30:	2107      	movs	r1, #7
 8014c32:	f88d 1016 	strb.w	r1, [sp, #22]
 8014c36:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8014c3a:	9102      	str	r1, [sp, #8]
 8014c3c:	4632      	mov	r2, r6
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8014c44:	9905      	ldr	r1, [sp, #20]
 8014c46:	4638      	mov	r0, r7
 8014c48:	47b0      	blx	r6
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014c50:	e7a6      	b.n	8014ba0 <read_submessage_format+0xe0>
 8014c52:	bf00      	nop

08014c54 <uxr_seq_num_add>:
 8014c54:	4408      	add	r0, r1
 8014c56:	b280      	uxth	r0, r0
 8014c58:	4770      	bx	lr
 8014c5a:	bf00      	nop

08014c5c <uxr_seq_num_sub>:
 8014c5c:	1a40      	subs	r0, r0, r1
 8014c5e:	b280      	uxth	r0, r0
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop

08014c64 <uxr_seq_num_cmp>:
 8014c64:	4288      	cmp	r0, r1
 8014c66:	d011      	beq.n	8014c8c <uxr_seq_num_cmp+0x28>
 8014c68:	d309      	bcc.n	8014c7e <uxr_seq_num_cmp+0x1a>
 8014c6a:	4288      	cmp	r0, r1
 8014c6c:	d910      	bls.n	8014c90 <uxr_seq_num_cmp+0x2c>
 8014c6e:	1a40      	subs	r0, r0, r1
 8014c70:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014c74:	bfd4      	ite	le
 8014c76:	2001      	movle	r0, #1
 8014c78:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014c7c:	4770      	bx	lr
 8014c7e:	1a0b      	subs	r3, r1, r0
 8014c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014c84:	daf1      	bge.n	8014c6a <uxr_seq_num_cmp+0x6>
 8014c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c8a:	4770      	bx	lr
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	4770      	bx	lr
 8014c90:	2001      	movs	r0, #1
 8014c92:	4770      	bx	lr

08014c94 <uxr_init_framing_io>:
 8014c94:	2300      	movs	r3, #0
 8014c96:	7041      	strb	r1, [r0, #1]
 8014c98:	7003      	strb	r3, [r0, #0]
 8014c9a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop

08014ca0 <uxr_write_framed_msg>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	4617      	mov	r7, r2
 8014ca6:	7842      	ldrb	r2, [r0, #1]
 8014ca8:	b083      	sub	sp, #12
 8014caa:	460e      	mov	r6, r1
 8014cac:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014cb0:	469a      	mov	sl, r3
 8014cb2:	2901      	cmp	r1, #1
 8014cb4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014cb8:	4604      	mov	r4, r0
 8014cba:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014cbe:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014cc2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014cc6:	f240 8137 	bls.w	8014f38 <uxr_write_framed_msg+0x298>
 8014cca:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014cce:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014cd2:	2901      	cmp	r1, #1
 8014cd4:	f04f 0202 	mov.w	r2, #2
 8014cd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cdc:	f240 808f 	bls.w	8014dfe <uxr_write_framed_msg+0x15e>
 8014ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ce2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014ce6:	b2dd      	uxtb	r5, r3
 8014ce8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014cec:	2203      	movs	r2, #3
 8014cee:	2901      	cmp	r1, #1
 8014cf0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cf4:	f240 809a 	bls.w	8014e2c <uxr_write_framed_msg+0x18c>
 8014cf8:	18a1      	adds	r1, r4, r2
 8014cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cfc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014d00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014d04:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014d08:	3201      	adds	r2, #1
 8014d0a:	2801      	cmp	r0, #1
 8014d0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d10:	f240 80a0 	bls.w	8014e54 <uxr_write_framed_msg+0x1b4>
 8014d14:	18a0      	adds	r0, r4, r2
 8014d16:	3201      	adds	r2, #1
 8014d18:	b2d2      	uxtb	r2, r2
 8014d1a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014d1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	f000 80a9 	beq.w	8014e7a <uxr_write_framed_msg+0x1da>
 8014d28:	f04f 0900 	mov.w	r9, #0
 8014d2c:	46c8      	mov	r8, r9
 8014d2e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014d32:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014d36:	2901      	cmp	r1, #1
 8014d38:	f240 80c3 	bls.w	8014ec2 <uxr_write_framed_msg+0x222>
 8014d3c:	2a29      	cmp	r2, #41	@ 0x29
 8014d3e:	f200 809f 	bhi.w	8014e80 <uxr_write_framed_msg+0x1e0>
 8014d42:	18a1      	adds	r1, r4, r2
 8014d44:	3201      	adds	r2, #1
 8014d46:	b2d2      	uxtb	r2, r2
 8014d48:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014d4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d50:	ea89 0303 	eor.w	r3, r9, r3
 8014d54:	498c      	ldr	r1, [pc, #560]	@ (8014f88 <uxr_write_framed_msg+0x2e8>)
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	f108 0801 	add.w	r8, r8, #1
 8014d5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d60:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d66:	4543      	cmp	r3, r8
 8014d68:	d8e1      	bhi.n	8014d2e <uxr_write_framed_msg+0x8e>
 8014d6a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014d6e:	fa5f f889 	uxtb.w	r8, r9
 8014d72:	9301      	str	r3, [sp, #4]
 8014d74:	f04f 0900 	mov.w	r9, #0
 8014d78:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014d7c:	fa5f f18a 	uxtb.w	r1, sl
 8014d80:	2901      	cmp	r1, #1
 8014d82:	d921      	bls.n	8014dc8 <uxr_write_framed_msg+0x128>
 8014d84:	2a29      	cmp	r2, #41	@ 0x29
 8014d86:	f240 80af 	bls.w	8014ee8 <uxr_write_framed_msg+0x248>
 8014d8a:	2500      	movs	r5, #0
 8014d8c:	e000      	b.n	8014d90 <uxr_write_framed_msg+0xf0>
 8014d8e:	b160      	cbz	r0, 8014daa <uxr_write_framed_msg+0x10a>
 8014d90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d94:	1b52      	subs	r2, r2, r5
 8014d96:	465b      	mov	r3, fp
 8014d98:	4421      	add	r1, r4
 8014d9a:	4638      	mov	r0, r7
 8014d9c:	47b0      	blx	r6
 8014d9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014da2:	4405      	add	r5, r0
 8014da4:	4295      	cmp	r5, r2
 8014da6:	d3f2      	bcc.n	8014d8e <uxr_write_framed_msg+0xee>
 8014da8:	d003      	beq.n	8014db2 <uxr_write_framed_msg+0x112>
 8014daa:	2000      	movs	r0, #0
 8014dac:	b003      	add	sp, #12
 8014dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db2:	fa5f f18a 	uxtb.w	r1, sl
 8014db6:	f04f 0300 	mov.w	r3, #0
 8014dba:	2901      	cmp	r1, #1
 8014dbc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014dc0:	f04f 0200 	mov.w	r2, #0
 8014dc4:	f200 8090 	bhi.w	8014ee8 <uxr_write_framed_msg+0x248>
 8014dc8:	1c51      	adds	r1, r2, #1
 8014dca:	b2c9      	uxtb	r1, r1
 8014dcc:	2929      	cmp	r1, #41	@ 0x29
 8014dce:	d8dc      	bhi.n	8014d8a <uxr_write_framed_msg+0xea>
 8014dd0:	18a5      	adds	r5, r4, r2
 8014dd2:	4421      	add	r1, r4
 8014dd4:	3202      	adds	r2, #2
 8014dd6:	f088 0820 	eor.w	r8, r8, #32
 8014dda:	4648      	mov	r0, r9
 8014ddc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014de0:	b2d2      	uxtb	r2, r2
 8014de2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014de6:	f04f 0901 	mov.w	r9, #1
 8014dea:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014dee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014df2:	2800      	cmp	r0, #0
 8014df4:	f040 8085 	bne.w	8014f02 <uxr_write_framed_msg+0x262>
 8014df8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014dfc:	e7bc      	b.n	8014d78 <uxr_write_framed_msg+0xd8>
 8014dfe:	4611      	mov	r1, r2
 8014e00:	f04f 0c03 	mov.w	ip, #3
 8014e04:	2204      	movs	r2, #4
 8014e06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e08:	4421      	add	r1, r4
 8014e0a:	b2dd      	uxtb	r5, r3
 8014e0c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014e10:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014e14:	44a4      	add	ip, r4
 8014e16:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014e1a:	f080 0020 	eor.w	r0, r0, #32
 8014e1e:	2901      	cmp	r1, #1
 8014e20:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014e24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e28:	f63f af66 	bhi.w	8014cf8 <uxr_write_framed_msg+0x58>
 8014e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e2e:	18a0      	adds	r0, r4, r2
 8014e30:	f085 0520 	eor.w	r5, r5, #32
 8014e34:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e3c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014e40:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014e44:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014e48:	3202      	adds	r2, #2
 8014e4a:	2801      	cmp	r0, #1
 8014e4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e50:	f63f af60 	bhi.w	8014d14 <uxr_write_framed_msg+0x74>
 8014e54:	1c50      	adds	r0, r2, #1
 8014e56:	18a5      	adds	r5, r4, r2
 8014e58:	fa54 f080 	uxtab	r0, r4, r0
 8014e5c:	3202      	adds	r2, #2
 8014e5e:	f081 0120 	eor.w	r1, r1, #32
 8014e62:	b2d2      	uxtb	r2, r2
 8014e64:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e68:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014e6c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014e70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f47f af57 	bne.w	8014d28 <uxr_write_framed_msg+0x88>
 8014e7a:	9301      	str	r3, [sp, #4]
 8014e7c:	4698      	mov	r8, r3
 8014e7e:	e779      	b.n	8014d74 <uxr_write_framed_msg+0xd4>
 8014e80:	2500      	movs	r5, #0
 8014e82:	e001      	b.n	8014e88 <uxr_write_framed_msg+0x1e8>
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d090      	beq.n	8014daa <uxr_write_framed_msg+0x10a>
 8014e88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014e8c:	1b52      	subs	r2, r2, r5
 8014e8e:	465b      	mov	r3, fp
 8014e90:	4421      	add	r1, r4
 8014e92:	4638      	mov	r0, r7
 8014e94:	47b0      	blx	r6
 8014e96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014e9a:	4405      	add	r5, r0
 8014e9c:	4295      	cmp	r5, r2
 8014e9e:	d3f1      	bcc.n	8014e84 <uxr_write_framed_msg+0x1e4>
 8014ea0:	d183      	bne.n	8014daa <uxr_write_framed_msg+0x10a>
 8014ea2:	f04f 0300 	mov.w	r3, #0
 8014ea6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014eac:	4543      	cmp	r3, r8
 8014eae:	d964      	bls.n	8014f7a <uxr_write_framed_msg+0x2da>
 8014eb0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014eb4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014eb8:	2901      	cmp	r1, #1
 8014eba:	f04f 0200 	mov.w	r2, #0
 8014ebe:	f63f af3d 	bhi.w	8014d3c <uxr_write_framed_msg+0x9c>
 8014ec2:	1c51      	adds	r1, r2, #1
 8014ec4:	b2c9      	uxtb	r1, r1
 8014ec6:	2929      	cmp	r1, #41	@ 0x29
 8014ec8:	d8da      	bhi.n	8014e80 <uxr_write_framed_msg+0x1e0>
 8014eca:	18a0      	adds	r0, r4, r2
 8014ecc:	4421      	add	r1, r4
 8014ece:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014ed2:	3202      	adds	r2, #2
 8014ed4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014ed8:	b2d2      	uxtb	r2, r2
 8014eda:	f083 0020 	eor.w	r0, r3, #32
 8014ede:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014ee2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ee6:	e733      	b.n	8014d50 <uxr_write_framed_msg+0xb0>
 8014ee8:	18a1      	adds	r1, r4, r2
 8014eea:	3201      	adds	r2, #1
 8014eec:	4648      	mov	r0, r9
 8014eee:	b2d2      	uxtb	r2, r2
 8014ef0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014ef4:	f04f 0901 	mov.w	r9, #1
 8014ef8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014efc:	2800      	cmp	r0, #0
 8014efe:	f43f af7b 	beq.w	8014df8 <uxr_write_framed_msg+0x158>
 8014f02:	2500      	movs	r5, #0
 8014f04:	e002      	b.n	8014f0c <uxr_write_framed_msg+0x26c>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f43f af4f 	beq.w	8014daa <uxr_write_framed_msg+0x10a>
 8014f0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014f10:	1b52      	subs	r2, r2, r5
 8014f12:	465b      	mov	r3, fp
 8014f14:	4421      	add	r1, r4
 8014f16:	4638      	mov	r0, r7
 8014f18:	47b0      	blx	r6
 8014f1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014f1e:	4405      	add	r5, r0
 8014f20:	4295      	cmp	r5, r2
 8014f22:	d3f0      	bcc.n	8014f06 <uxr_write_framed_msg+0x266>
 8014f24:	f47f af41 	bne.w	8014daa <uxr_write_framed_msg+0x10a>
 8014f28:	2300      	movs	r3, #0
 8014f2a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f30:	b298      	uxth	r0, r3
 8014f32:	b003      	add	sp, #12
 8014f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f38:	217d      	movs	r1, #125	@ 0x7d
 8014f3a:	f082 0220 	eor.w	r2, r2, #32
 8014f3e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014f42:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014f46:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014f4a:	2901      	cmp	r1, #1
 8014f4c:	f04f 0203 	mov.w	r2, #3
 8014f50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f54:	d804      	bhi.n	8014f60 <uxr_write_framed_msg+0x2c0>
 8014f56:	4611      	mov	r1, r2
 8014f58:	f04f 0c04 	mov.w	ip, #4
 8014f5c:	2205      	movs	r2, #5
 8014f5e:	e752      	b.n	8014e06 <uxr_write_framed_msg+0x166>
 8014f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f62:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014f66:	b2dd      	uxtb	r5, r3
 8014f68:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014f6c:	2204      	movs	r2, #4
 8014f6e:	2901      	cmp	r1, #1
 8014f70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f74:	f63f aec0 	bhi.w	8014cf8 <uxr_write_framed_msg+0x58>
 8014f78:	e758      	b.n	8014e2c <uxr_write_framed_msg+0x18c>
 8014f7a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014f7e:	fa5f f889 	uxtb.w	r8, r9
 8014f82:	9301      	str	r3, [sp, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	e6f5      	b.n	8014d74 <uxr_write_framed_msg+0xd4>
 8014f88:	08017f98 	.word	0x08017f98

08014f8c <uxr_framing_read_transport>:
 8014f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f90:	4604      	mov	r4, r0
 8014f92:	b083      	sub	sp, #12
 8014f94:	461f      	mov	r7, r3
 8014f96:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014f9a:	4689      	mov	r9, r1
 8014f9c:	4692      	mov	sl, r2
 8014f9e:	f7f9 f831 	bl	800e004 <uxr_millis>
 8014fa2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fa6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014faa:	42b3      	cmp	r3, r6
 8014fac:	4680      	mov	r8, r0
 8014fae:	d061      	beq.n	8015074 <uxr_framing_read_transport+0xe8>
 8014fb0:	d81c      	bhi.n	8014fec <uxr_framing_read_transport+0x60>
 8014fb2:	1e75      	subs	r5, r6, #1
 8014fb4:	1aed      	subs	r5, r5, r3
 8014fb6:	b2ed      	uxtb	r5, r5
 8014fb8:	2600      	movs	r6, #0
 8014fba:	455d      	cmp	r5, fp
 8014fbc:	d81f      	bhi.n	8014ffe <uxr_framing_read_transport+0x72>
 8014fbe:	19ab      	adds	r3, r5, r6
 8014fc0:	455b      	cmp	r3, fp
 8014fc2:	bf84      	itt	hi
 8014fc4:	ebab 0605 	subhi.w	r6, fp, r5
 8014fc8:	b2f6      	uxtbhi	r6, r6
 8014fca:	b9ed      	cbnz	r5, 8015008 <uxr_framing_read_transport+0x7c>
 8014fcc:	f04f 0b00 	mov.w	fp, #0
 8014fd0:	f7f9 f818 	bl	800e004 <uxr_millis>
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	eba0 0808 	sub.w	r8, r0, r8
 8014fda:	eba3 0308 	sub.w	r3, r3, r8
 8014fde:	4658      	mov	r0, fp
 8014fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014fe4:	603b      	str	r3, [r7, #0]
 8014fe6:	b003      	add	sp, #12
 8014fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fec:	2e00      	cmp	r6, #0
 8014fee:	d049      	beq.n	8015084 <uxr_framing_read_transport+0xf8>
 8014ff0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014ff4:	b2ed      	uxtb	r5, r5
 8014ff6:	3e01      	subs	r6, #1
 8014ff8:	455d      	cmp	r5, fp
 8014ffa:	b2f6      	uxtb	r6, r6
 8014ffc:	d9df      	bls.n	8014fbe <uxr_framing_read_transport+0x32>
 8014ffe:	fa5f f58b 	uxtb.w	r5, fp
 8015002:	2600      	movs	r6, #0
 8015004:	2d00      	cmp	r5, #0
 8015006:	d0e1      	beq.n	8014fcc <uxr_framing_read_transport+0x40>
 8015008:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801500c:	3102      	adds	r1, #2
 801500e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015010:	9300      	str	r3, [sp, #0]
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	4421      	add	r1, r4
 8015016:	462a      	mov	r2, r5
 8015018:	4650      	mov	r0, sl
 801501a:	47c8      	blx	r9
 801501c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015020:	4a1a      	ldr	r2, [pc, #104]	@ (801508c <uxr_framing_read_transport+0x100>)
 8015022:	4403      	add	r3, r0
 8015024:	0859      	lsrs	r1, r3, #1
 8015026:	fba2 2101 	umull	r2, r1, r2, r1
 801502a:	0889      	lsrs	r1, r1, #2
 801502c:	222a      	movs	r2, #42	@ 0x2a
 801502e:	fb02 3111 	mls	r1, r2, r1, r3
 8015032:	4683      	mov	fp, r0
 8015034:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015038:	2800      	cmp	r0, #0
 801503a:	d0c7      	beq.n	8014fcc <uxr_framing_read_transport+0x40>
 801503c:	42a8      	cmp	r0, r5
 801503e:	d1c7      	bne.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015040:	2e00      	cmp	r6, #0
 8015042:	d0c5      	beq.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015046:	9300      	str	r3, [sp, #0]
 8015048:	3102      	adds	r1, #2
 801504a:	4632      	mov	r2, r6
 801504c:	4421      	add	r1, r4
 801504e:	2300      	movs	r3, #0
 8015050:	4650      	mov	r0, sl
 8015052:	47c8      	blx	r9
 8015054:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015058:	4a0c      	ldr	r2, [pc, #48]	@ (801508c <uxr_framing_read_transport+0x100>)
 801505a:	180b      	adds	r3, r1, r0
 801505c:	0859      	lsrs	r1, r3, #1
 801505e:	fba2 1201 	umull	r1, r2, r2, r1
 8015062:	0892      	lsrs	r2, r2, #2
 8015064:	212a      	movs	r1, #42	@ 0x2a
 8015066:	fb01 3312 	mls	r3, r1, r2, r3
 801506a:	eb00 0b05 	add.w	fp, r0, r5
 801506e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015072:	e7ad      	b.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015074:	2600      	movs	r6, #0
 8015076:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801507a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801507c:	d9bf      	bls.n	8014ffe <uxr_framing_read_transport+0x72>
 801507e:	2102      	movs	r1, #2
 8015080:	2529      	movs	r5, #41	@ 0x29
 8015082:	e7c4      	b.n	801500e <uxr_framing_read_transport+0x82>
 8015084:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015088:	b2ed      	uxtb	r5, r5
 801508a:	e796      	b.n	8014fba <uxr_framing_read_transport+0x2e>
 801508c:	30c30c31 	.word	0x30c30c31

08015090 <uxr_read_framed_msg>:
 8015090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015094:	461e      	mov	r6, r3
 8015096:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801509a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801509e:	429d      	cmp	r5, r3
 80150a0:	b083      	sub	sp, #12
 80150a2:	4604      	mov	r4, r0
 80150a4:	4688      	mov	r8, r1
 80150a6:	4691      	mov	r9, r2
 80150a8:	f000 8188 	beq.w	80153bc <uxr_read_framed_msg+0x32c>
 80150ac:	7823      	ldrb	r3, [r4, #0]
 80150ae:	4dc1      	ldr	r5, [pc, #772]	@ (80153b4 <uxr_read_framed_msg+0x324>)
 80150b0:	4fc1      	ldr	r7, [pc, #772]	@ (80153b8 <uxr_read_framed_msg+0x328>)
 80150b2:	2b07      	cmp	r3, #7
 80150b4:	d8fd      	bhi.n	80150b2 <uxr_read_framed_msg+0x22>
 80150b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80150ba:	0115      	.short	0x0115
 80150bc:	00d600f6 	.word	0x00d600f6
 80150c0:	009000b9 	.word	0x009000b9
 80150c4:	0030004d 	.word	0x0030004d
 80150c8:	0008      	.short	0x0008
 80150ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80150ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80150d2:	4299      	cmp	r1, r3
 80150d4:	f000 814a 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80150d8:	18e2      	adds	r2, r4, r3
 80150da:	7892      	ldrb	r2, [r2, #2]
 80150dc:	2a7d      	cmp	r2, #125	@ 0x7d
 80150de:	f000 8199 	beq.w	8015414 <uxr_read_framed_msg+0x384>
 80150e2:	3301      	adds	r3, #1
 80150e4:	0858      	lsrs	r0, r3, #1
 80150e6:	fba5 1000 	umull	r1, r0, r5, r0
 80150ea:	0880      	lsrs	r0, r0, #2
 80150ec:	212a      	movs	r1, #42	@ 0x2a
 80150ee:	fb01 3310 	mls	r3, r1, r0, r3
 80150f2:	2a7e      	cmp	r2, #126	@ 0x7e
 80150f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150f8:	f000 8252 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 80150fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80150fe:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015100:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015104:	b29b      	uxth	r3, r3
 8015106:	2200      	movs	r2, #0
 8015108:	4299      	cmp	r1, r3
 801510a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801510c:	7022      	strb	r2, [r4, #0]
 801510e:	f000 8179 	beq.w	8015404 <uxr_read_framed_msg+0x374>
 8015112:	2000      	movs	r0, #0
 8015114:	b003      	add	sp, #12
 8015116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801511a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801511e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015122:	4299      	cmp	r1, r3
 8015124:	f000 8131 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 8015128:	18e2      	adds	r2, r4, r3
 801512a:	7890      	ldrb	r0, [r2, #2]
 801512c:	287d      	cmp	r0, #125	@ 0x7d
 801512e:	f000 8190 	beq.w	8015452 <uxr_read_framed_msg+0x3c2>
 8015132:	3301      	adds	r3, #1
 8015134:	085a      	lsrs	r2, r3, #1
 8015136:	fba5 1202 	umull	r1, r2, r5, r2
 801513a:	0892      	lsrs	r2, r2, #2
 801513c:	212a      	movs	r1, #42	@ 0x2a
 801513e:	fb01 3312 	mls	r3, r1, r2, r3
 8015142:	287e      	cmp	r0, #126	@ 0x7e
 8015144:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015148:	f000 821a 	beq.w	8015580 <uxr_read_framed_msg+0x4f0>
 801514c:	2307      	movs	r3, #7
 801514e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015150:	7023      	strb	r3, [r4, #0]
 8015152:	e7ae      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 8015154:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015156:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801515a:	459e      	cmp	lr, r3
 801515c:	d938      	bls.n	80151d0 <uxr_read_framed_msg+0x140>
 801515e:	ee07 8a90 	vmov	s15, r8
 8015162:	212a      	movs	r1, #42	@ 0x2a
 8015164:	e020      	b.n	80151a8 <uxr_read_framed_msg+0x118>
 8015166:	f89b c002 	ldrb.w	ip, [fp, #2]
 801516a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801516e:	f000 80d4 	beq.w	801531a <uxr_read_framed_msg+0x28a>
 8015172:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015176:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801517a:	f000 8219 	beq.w	80155b0 <uxr_read_framed_msg+0x520>
 801517e:	f806 c003 	strb.w	ip, [r6, r3]
 8015182:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015186:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015188:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801518c:	ea8a 000c 	eor.w	r0, sl, ip
 8015190:	b2c0      	uxtb	r0, r0
 8015192:	3301      	adds	r3, #1
 8015194:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015198:	b29b      	uxth	r3, r3
 801519a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801519e:	4573      	cmp	r3, lr
 80151a0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80151a2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80151a4:	f080 8120 	bcs.w	80153e8 <uxr_read_framed_msg+0x358>
 80151a8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80151ac:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80151b0:	f100 0c01 	add.w	ip, r0, #1
 80151b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80151b8:	fba5 8202 	umull	r8, r2, r5, r2
 80151bc:	0892      	lsrs	r2, r2, #2
 80151be:	4582      	cmp	sl, r0
 80151c0:	eb04 0b00 	add.w	fp, r4, r0
 80151c4:	fb01 c212 	mls	r2, r1, r2, ip
 80151c8:	d1cd      	bne.n	8015166 <uxr_read_framed_msg+0xd6>
 80151ca:	ee17 8a90 	vmov	r8, s15
 80151ce:	459e      	cmp	lr, r3
 80151d0:	f040 8111 	bne.w	80153f6 <uxr_read_framed_msg+0x366>
 80151d4:	2306      	movs	r3, #6
 80151d6:	7023      	strb	r3, [r4, #0]
 80151d8:	e76b      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80151da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80151de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80151e2:	4298      	cmp	r0, r3
 80151e4:	f000 80c2 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80151e8:	18e2      	adds	r2, r4, r3
 80151ea:	7891      	ldrb	r1, [r2, #2]
 80151ec:	297d      	cmp	r1, #125	@ 0x7d
 80151ee:	f000 814c 	beq.w	801548a <uxr_read_framed_msg+0x3fa>
 80151f2:	3301      	adds	r3, #1
 80151f4:	085a      	lsrs	r2, r3, #1
 80151f6:	fba5 0202 	umull	r0, r2, r5, r2
 80151fa:	0892      	lsrs	r2, r2, #2
 80151fc:	202a      	movs	r0, #42	@ 0x2a
 80151fe:	fb00 3312 	mls	r3, r0, r2, r3
 8015202:	297e      	cmp	r1, #126	@ 0x7e
 8015204:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015208:	f000 81ca 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 801520c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801520e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015212:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015214:	b29b      	uxth	r3, r3
 8015216:	2000      	movs	r0, #0
 8015218:	428b      	cmp	r3, r1
 801521a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801521c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801521e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015220:	f240 80df 	bls.w	80153e2 <uxr_read_framed_msg+0x352>
 8015224:	7020      	strb	r0, [r4, #0]
 8015226:	b003      	add	sp, #12
 8015228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015230:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015234:	4299      	cmp	r1, r3
 8015236:	f000 80a8 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 801523a:	18e2      	adds	r2, r4, r3
 801523c:	7890      	ldrb	r0, [r2, #2]
 801523e:	287d      	cmp	r0, #125	@ 0x7d
 8015240:	f000 8164 	beq.w	801550c <uxr_read_framed_msg+0x47c>
 8015244:	3301      	adds	r3, #1
 8015246:	085a      	lsrs	r2, r3, #1
 8015248:	fba5 1202 	umull	r1, r2, r5, r2
 801524c:	0892      	lsrs	r2, r2, #2
 801524e:	212a      	movs	r1, #42	@ 0x2a
 8015250:	fb01 3312 	mls	r3, r1, r2, r3
 8015254:	287e      	cmp	r0, #126	@ 0x7e
 8015256:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801525a:	f000 8191 	beq.w	8015580 <uxr_read_framed_msg+0x4f0>
 801525e:	2304      	movs	r3, #4
 8015260:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015262:	7023      	strb	r3, [r4, #0]
 8015264:	e725      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 8015266:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801526a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801526e:	4290      	cmp	r0, r2
 8015270:	f000 80b3 	beq.w	80153da <uxr_read_framed_msg+0x34a>
 8015274:	18a3      	adds	r3, r4, r2
 8015276:	7899      	ldrb	r1, [r3, #2]
 8015278:	297d      	cmp	r1, #125	@ 0x7d
 801527a:	f000 8164 	beq.w	8015546 <uxr_read_framed_msg+0x4b6>
 801527e:	3201      	adds	r2, #1
 8015280:	0850      	lsrs	r0, r2, #1
 8015282:	fba5 3000 	umull	r3, r0, r5, r0
 8015286:	0880      	lsrs	r0, r0, #2
 8015288:	232a      	movs	r3, #42	@ 0x2a
 801528a:	fb03 2210 	mls	r2, r3, r0, r2
 801528e:	297e      	cmp	r1, #126	@ 0x7e
 8015290:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015294:	f000 8188 	beq.w	80155a8 <uxr_read_framed_msg+0x518>
 8015298:	7863      	ldrb	r3, [r4, #1]
 801529a:	428b      	cmp	r3, r1
 801529c:	bf0c      	ite	eq
 801529e:	2303      	moveq	r3, #3
 80152a0:	2300      	movne	r3, #0
 80152a2:	7023      	strb	r3, [r4, #0]
 80152a4:	e705      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80152a6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80152ae:	2200      	movs	r2, #0
 80152b0:	4299      	cmp	r1, r3
 80152b2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80152b6:	d06c      	beq.n	8015392 <uxr_read_framed_msg+0x302>
 80152b8:	18e2      	adds	r2, r4, r3
 80152ba:	7890      	ldrb	r0, [r2, #2]
 80152bc:	287d      	cmp	r0, #125	@ 0x7d
 80152be:	f000 8101 	beq.w	80154c4 <uxr_read_framed_msg+0x434>
 80152c2:	3301      	adds	r3, #1
 80152c4:	085a      	lsrs	r2, r3, #1
 80152c6:	fba5 1202 	umull	r1, r2, r5, r2
 80152ca:	0892      	lsrs	r2, r2, #2
 80152cc:	212a      	movs	r1, #42	@ 0x2a
 80152ce:	fb01 3312 	mls	r3, r1, r2, r3
 80152d2:	287e      	cmp	r0, #126	@ 0x7e
 80152d4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80152d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152dc:	d059      	beq.n	8015392 <uxr_read_framed_msg+0x302>
 80152de:	2302      	movs	r3, #2
 80152e0:	7023      	strb	r3, [r4, #0]
 80152e2:	e6e6      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80152e4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80152e8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80152ec:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80152f0:	1c51      	adds	r1, r2, #1
 80152f2:	084b      	lsrs	r3, r1, #1
 80152f4:	fba5 c303 	umull	ip, r3, r5, r3
 80152f8:	089b      	lsrs	r3, r3, #2
 80152fa:	fb0e 1313 	mls	r3, lr, r3, r1
 80152fe:	4592      	cmp	sl, r2
 8015300:	eb04 0002 	add.w	r0, r4, r2
 8015304:	b2da      	uxtb	r2, r3
 8015306:	f43f af04 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 801530a:	7883      	ldrb	r3, [r0, #2]
 801530c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015310:	2b7e      	cmp	r3, #126	@ 0x7e
 8015312:	d1ed      	bne.n	80152f0 <uxr_read_framed_msg+0x260>
 8015314:	2301      	movs	r3, #1
 8015316:	7023      	strb	r3, [r4, #0]
 8015318:	e6cb      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801531a:	f100 0c01 	add.w	ip, r0, #1
 801531e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015322:	fba5 8202 	umull	r8, r2, r5, r2
 8015326:	0892      	lsrs	r2, r2, #2
 8015328:	fb01 c212 	mls	r2, r1, r2, ip
 801532c:	eb04 0c02 	add.w	ip, r4, r2
 8015330:	b2d2      	uxtb	r2, r2
 8015332:	4592      	cmp	sl, r2
 8015334:	f100 0002 	add.w	r0, r0, #2
 8015338:	f43f af47 	beq.w	80151ca <uxr_read_framed_msg+0x13a>
 801533c:	0842      	lsrs	r2, r0, #1
 801533e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015342:	fba5 8202 	umull	r8, r2, r5, r2
 8015346:	0892      	lsrs	r2, r2, #2
 8015348:	fb01 0012 	mls	r0, r1, r2, r0
 801534c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8015350:	f08a 0c20 	eor.w	ip, sl, #32
 8015354:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015358:	f47f af11 	bne.w	801517e <uxr_read_framed_msg+0xee>
 801535c:	459e      	cmp	lr, r3
 801535e:	ee17 8a90 	vmov	r8, s15
 8015362:	f43f af37 	beq.w	80151d4 <uxr_read_framed_msg+0x144>
 8015366:	2301      	movs	r3, #1
 8015368:	7023      	strb	r3, [r4, #0]
 801536a:	e6a2      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801536c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	2301      	movs	r3, #1
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015376:	464a      	mov	r2, r9
 8015378:	4641      	mov	r1, r8
 801537a:	4620      	mov	r0, r4
 801537c:	f7ff fe06 	bl	8014f8c <uxr_framing_read_transport>
 8015380:	2800      	cmp	r0, #0
 8015382:	f43f aec6 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 8015386:	7823      	ldrb	r3, [r4, #0]
 8015388:	e693      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801538a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	2302      	movs	r3, #2
 8015390:	e7ef      	b.n	8015372 <uxr_read_framed_msg+0x2e2>
 8015392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	2304      	movs	r3, #4
 8015398:	9301      	str	r3, [sp, #4]
 801539a:	464a      	mov	r2, r9
 801539c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801539e:	4641      	mov	r1, r8
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7ff fdf3 	bl	8014f8c <uxr_framing_read_transport>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d1ed      	bne.n	8015386 <uxr_read_framed_msg+0x2f6>
 80153aa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80153ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80153b0:	d0e9      	beq.n	8015386 <uxr_read_framed_msg+0x2f6>
 80153b2:	e6ae      	b.n	8015112 <uxr_read_framed_msg+0x82>
 80153b4:	30c30c31 	.word	0x30c30c31
 80153b8:	08017f98 	.word	0x08017f98
 80153bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	2305      	movs	r3, #5
 80153c2:	9301      	str	r3, [sp, #4]
 80153c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153c6:	f7ff fde1 	bl	8014f8c <uxr_framing_read_transport>
 80153ca:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80153ce:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80153d2:	429a      	cmp	r2, r3
 80153d4:	f43f ae9d 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 80153d8:	e668      	b.n	80150ac <uxr_read_framed_msg+0x1c>
 80153da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153dc:	9300      	str	r3, [sp, #0]
 80153de:	2303      	movs	r3, #3
 80153e0:	e7c7      	b.n	8015372 <uxr_read_framed_msg+0x2e2>
 80153e2:	2305      	movs	r3, #5
 80153e4:	7023      	strb	r3, [r4, #0]
 80153e6:	e664      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80153e8:	ee17 8a90 	vmov	r8, s15
 80153ec:	f43f aef2 	beq.w	80151d4 <uxr_read_framed_msg+0x144>
 80153f0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80153f4:	d08e      	beq.n	8015314 <uxr_read_framed_msg+0x284>
 80153f6:	ebae 0303 	sub.w	r3, lr, r3
 80153fa:	3302      	adds	r3, #2
 80153fc:	9301      	str	r3, [sp, #4]
 80153fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015400:	9300      	str	r3, [sp, #0]
 8015402:	e7b7      	b.n	8015374 <uxr_read_framed_msg+0x2e4>
 8015404:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015406:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801540a:	7013      	strb	r3, [r2, #0]
 801540c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801540e:	b003      	add	sp, #12
 8015410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015414:	f103 0c01 	add.w	ip, r3, #1
 8015418:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801541c:	fba5 0202 	umull	r0, r2, r5, r2
 8015420:	0892      	lsrs	r2, r2, #2
 8015422:	202a      	movs	r0, #42	@ 0x2a
 8015424:	fb00 c212 	mls	r2, r0, r2, ip
 8015428:	fa5f fc82 	uxtb.w	ip, r2
 801542c:	4561      	cmp	r1, ip
 801542e:	d09d      	beq.n	801536c <uxr_read_framed_msg+0x2dc>
 8015430:	3302      	adds	r3, #2
 8015432:	4422      	add	r2, r4
 8015434:	0859      	lsrs	r1, r3, #1
 8015436:	7892      	ldrb	r2, [r2, #2]
 8015438:	fba5 c101 	umull	ip, r1, r5, r1
 801543c:	0889      	lsrs	r1, r1, #2
 801543e:	fb00 3311 	mls	r3, r0, r1, r3
 8015442:	2a7e      	cmp	r2, #126	@ 0x7e
 8015444:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015448:	f000 80aa 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 801544c:	f082 0220 	eor.w	r2, r2, #32
 8015450:	e654      	b.n	80150fc <uxr_read_framed_msg+0x6c>
 8015452:	1c58      	adds	r0, r3, #1
 8015454:	0842      	lsrs	r2, r0, #1
 8015456:	fba5 c202 	umull	ip, r2, r5, r2
 801545a:	0892      	lsrs	r2, r2, #2
 801545c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015460:	fb0c 0212 	mls	r2, ip, r2, r0
 8015464:	b2d0      	uxtb	r0, r2
 8015466:	4281      	cmp	r1, r0
 8015468:	d08f      	beq.n	801538a <uxr_read_framed_msg+0x2fa>
 801546a:	4422      	add	r2, r4
 801546c:	3302      	adds	r3, #2
 801546e:	7890      	ldrb	r0, [r2, #2]
 8015470:	085a      	lsrs	r2, r3, #1
 8015472:	fba5 1202 	umull	r1, r2, r5, r2
 8015476:	0892      	lsrs	r2, r2, #2
 8015478:	fb0c 3312 	mls	r3, ip, r2, r3
 801547c:	287e      	cmp	r0, #126	@ 0x7e
 801547e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015482:	d07d      	beq.n	8015580 <uxr_read_framed_msg+0x4f0>
 8015484:	f080 0020 	eor.w	r0, r0, #32
 8015488:	e660      	b.n	801514c <uxr_read_framed_msg+0xbc>
 801548a:	1c59      	adds	r1, r3, #1
 801548c:	084a      	lsrs	r2, r1, #1
 801548e:	fba5 c202 	umull	ip, r2, r5, r2
 8015492:	0892      	lsrs	r2, r2, #2
 8015494:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015498:	fb0c 1212 	mls	r2, ip, r2, r1
 801549c:	b2d1      	uxtb	r1, r2
 801549e:	4288      	cmp	r0, r1
 80154a0:	f43f af64 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80154a4:	4422      	add	r2, r4
 80154a6:	3302      	adds	r3, #2
 80154a8:	7891      	ldrb	r1, [r2, #2]
 80154aa:	085a      	lsrs	r2, r3, #1
 80154ac:	fba5 0202 	umull	r0, r2, r5, r2
 80154b0:	0892      	lsrs	r2, r2, #2
 80154b2:	fb0c 3312 	mls	r3, ip, r2, r3
 80154b6:	297e      	cmp	r1, #126	@ 0x7e
 80154b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154bc:	d070      	beq.n	80155a0 <uxr_read_framed_msg+0x510>
 80154be:	f081 0120 	eor.w	r1, r1, #32
 80154c2:	e6a3      	b.n	801520c <uxr_read_framed_msg+0x17c>
 80154c4:	f103 0c01 	add.w	ip, r3, #1
 80154c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80154cc:	fba5 0202 	umull	r0, r2, r5, r2
 80154d0:	0892      	lsrs	r2, r2, #2
 80154d2:	202a      	movs	r0, #42	@ 0x2a
 80154d4:	fb00 c212 	mls	r2, r0, r2, ip
 80154d8:	fa5f fc82 	uxtb.w	ip, r2
 80154dc:	4561      	cmp	r1, ip
 80154de:	f43f af58 	beq.w	8015392 <uxr_read_framed_msg+0x302>
 80154e2:	4422      	add	r2, r4
 80154e4:	3302      	adds	r3, #2
 80154e6:	7891      	ldrb	r1, [r2, #2]
 80154e8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154ec:	085a      	lsrs	r2, r3, #1
 80154ee:	fba5 c202 	umull	ip, r2, r5, r2
 80154f2:	0892      	lsrs	r2, r2, #2
 80154f4:	fb00 3312 	mls	r3, r0, r2, r3
 80154f8:	297e      	cmp	r1, #126	@ 0x7e
 80154fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154fe:	f43f af48 	beq.w	8015392 <uxr_read_framed_msg+0x302>
 8015502:	f081 0120 	eor.w	r1, r1, #32
 8015506:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801550a:	e6e8      	b.n	80152de <uxr_read_framed_msg+0x24e>
 801550c:	1c58      	adds	r0, r3, #1
 801550e:	0842      	lsrs	r2, r0, #1
 8015510:	fba5 c202 	umull	ip, r2, r5, r2
 8015514:	0892      	lsrs	r2, r2, #2
 8015516:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801551a:	fb0c 0212 	mls	r2, ip, r2, r0
 801551e:	b2d0      	uxtb	r0, r2
 8015520:	4281      	cmp	r1, r0
 8015522:	f43f af32 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 8015526:	4422      	add	r2, r4
 8015528:	3302      	adds	r3, #2
 801552a:	7890      	ldrb	r0, [r2, #2]
 801552c:	085a      	lsrs	r2, r3, #1
 801552e:	fba5 1202 	umull	r1, r2, r5, r2
 8015532:	0892      	lsrs	r2, r2, #2
 8015534:	fb0c 3312 	mls	r3, ip, r2, r3
 8015538:	287e      	cmp	r0, #126	@ 0x7e
 801553a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801553e:	d01f      	beq.n	8015580 <uxr_read_framed_msg+0x4f0>
 8015540:	f080 0020 	eor.w	r0, r0, #32
 8015544:	e68b      	b.n	801525e <uxr_read_framed_msg+0x1ce>
 8015546:	1c51      	adds	r1, r2, #1
 8015548:	084b      	lsrs	r3, r1, #1
 801554a:	fba5 c303 	umull	ip, r3, r5, r3
 801554e:	089b      	lsrs	r3, r3, #2
 8015550:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015554:	fb0c 1313 	mls	r3, ip, r3, r1
 8015558:	b2d9      	uxtb	r1, r3
 801555a:	4288      	cmp	r0, r1
 801555c:	f43f af3d 	beq.w	80153da <uxr_read_framed_msg+0x34a>
 8015560:	3202      	adds	r2, #2
 8015562:	4423      	add	r3, r4
 8015564:	0850      	lsrs	r0, r2, #1
 8015566:	789b      	ldrb	r3, [r3, #2]
 8015568:	fba5 1000 	umull	r1, r0, r5, r0
 801556c:	0880      	lsrs	r0, r0, #2
 801556e:	fb0c 2210 	mls	r2, ip, r0, r2
 8015572:	2b7e      	cmp	r3, #126	@ 0x7e
 8015574:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015578:	d016      	beq.n	80155a8 <uxr_read_framed_msg+0x518>
 801557a:	f083 0120 	eor.w	r1, r3, #32
 801557e:	e68b      	b.n	8015298 <uxr_read_framed_msg+0x208>
 8015580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	2302      	movs	r3, #2
 8015586:	9301      	str	r3, [sp, #4]
 8015588:	464a      	mov	r2, r9
 801558a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801558c:	4641      	mov	r1, r8
 801558e:	4620      	mov	r0, r4
 8015590:	f7ff fcfc 	bl	8014f8c <uxr_framing_read_transport>
 8015594:	2800      	cmp	r0, #0
 8015596:	f47f aef6 	bne.w	8015386 <uxr_read_framed_msg+0x2f6>
 801559a:	2301      	movs	r3, #1
 801559c:	7023      	strb	r3, [r4, #0]
 801559e:	e588      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80155a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2301      	movs	r3, #1
 80155a6:	e7ee      	b.n	8015586 <uxr_read_framed_msg+0x4f6>
 80155a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155aa:	9300      	str	r3, [sp, #0]
 80155ac:	2303      	movs	r3, #3
 80155ae:	e7ea      	b.n	8015586 <uxr_read_framed_msg+0x4f6>
 80155b0:	ee17 8a90 	vmov	r8, s15
 80155b4:	e6ae      	b.n	8015314 <uxr_read_framed_msg+0x284>
 80155b6:	bf00      	nop

080155b8 <rcl_get_default_domain_id>:
 80155b8:	b530      	push	{r4, r5, lr}
 80155ba:	b083      	sub	sp, #12
 80155bc:	2300      	movs	r3, #0
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	b1d0      	cbz	r0, 80155f8 <rcl_get_default_domain_id+0x40>
 80155c2:	4604      	mov	r4, r0
 80155c4:	4669      	mov	r1, sp
 80155c6:	4815      	ldr	r0, [pc, #84]	@ (801561c <rcl_get_default_domain_id+0x64>)
 80155c8:	f7fc fc12 	bl	8011df0 <rcutils_get_env>
 80155cc:	4602      	mov	r2, r0
 80155ce:	b110      	cbz	r0, 80155d6 <rcl_get_default_domain_id+0x1e>
 80155d0:	2001      	movs	r0, #1
 80155d2:	b003      	add	sp, #12
 80155d4:	bd30      	pop	{r4, r5, pc}
 80155d6:	9b00      	ldr	r3, [sp, #0]
 80155d8:	b18b      	cbz	r3, 80155fe <rcl_get_default_domain_id+0x46>
 80155da:	7818      	ldrb	r0, [r3, #0]
 80155dc:	2800      	cmp	r0, #0
 80155de:	d0f8      	beq.n	80155d2 <rcl_get_default_domain_id+0x1a>
 80155e0:	a901      	add	r1, sp, #4
 80155e2:	4618      	mov	r0, r3
 80155e4:	9201      	str	r2, [sp, #4]
 80155e6:	f000 fe6d 	bl	80162c4 <strtoul>
 80155ea:	4605      	mov	r5, r0
 80155ec:	b150      	cbz	r0, 8015604 <rcl_get_default_domain_id+0x4c>
 80155ee:	1c43      	adds	r3, r0, #1
 80155f0:	d00d      	beq.n	801560e <rcl_get_default_domain_id+0x56>
 80155f2:	6025      	str	r5, [r4, #0]
 80155f4:	2000      	movs	r0, #0
 80155f6:	e7ec      	b.n	80155d2 <rcl_get_default_domain_id+0x1a>
 80155f8:	200b      	movs	r0, #11
 80155fa:	b003      	add	sp, #12
 80155fc:	bd30      	pop	{r4, r5, pc}
 80155fe:	4618      	mov	r0, r3
 8015600:	b003      	add	sp, #12
 8015602:	bd30      	pop	{r4, r5, pc}
 8015604:	9b01      	ldr	r3, [sp, #4]
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d0f2      	beq.n	80155f2 <rcl_get_default_domain_id+0x3a>
 801560c:	e7e0      	b.n	80155d0 <rcl_get_default_domain_id+0x18>
 801560e:	f001 f893 	bl	8016738 <__errno>
 8015612:	6803      	ldr	r3, [r0, #0]
 8015614:	2b22      	cmp	r3, #34	@ 0x22
 8015616:	d1ec      	bne.n	80155f2 <rcl_get_default_domain_id+0x3a>
 8015618:	e7da      	b.n	80155d0 <rcl_get_default_domain_id+0x18>
 801561a:	bf00      	nop
 801561c:	08018198 	.word	0x08018198

08015620 <rcl_expand_topic_name>:
 8015620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015624:	b08b      	sub	sp, #44	@ 0x2c
 8015626:	9306      	str	r3, [sp, #24]
 8015628:	2800      	cmp	r0, #0
 801562a:	f000 80ad 	beq.w	8015788 <rcl_expand_topic_name+0x168>
 801562e:	460e      	mov	r6, r1
 8015630:	2900      	cmp	r1, #0
 8015632:	f000 80a9 	beq.w	8015788 <rcl_expand_topic_name+0x168>
 8015636:	4617      	mov	r7, r2
 8015638:	2a00      	cmp	r2, #0
 801563a:	f000 80a5 	beq.w	8015788 <rcl_expand_topic_name+0x168>
 801563e:	2b00      	cmp	r3, #0
 8015640:	f000 80a2 	beq.w	8015788 <rcl_expand_topic_name+0x168>
 8015644:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015646:	2b00      	cmp	r3, #0
 8015648:	f000 809e 	beq.w	8015788 <rcl_expand_topic_name+0x168>
 801564c:	2200      	movs	r2, #0
 801564e:	a909      	add	r1, sp, #36	@ 0x24
 8015650:	4680      	mov	r8, r0
 8015652:	f000 f9fb 	bl	8015a4c <rcl_validate_topic_name>
 8015656:	4604      	mov	r4, r0
 8015658:	2800      	cmp	r0, #0
 801565a:	f040 8096 	bne.w	801578a <rcl_expand_topic_name+0x16a>
 801565e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015660:	2b00      	cmp	r3, #0
 8015662:	f040 809a 	bne.w	801579a <rcl_expand_topic_name+0x17a>
 8015666:	4602      	mov	r2, r0
 8015668:	a909      	add	r1, sp, #36	@ 0x24
 801566a:	4630      	mov	r0, r6
 801566c:	f7fd f80e 	bl	801268c <rmw_validate_node_name>
 8015670:	2800      	cmp	r0, #0
 8015672:	f040 808e 	bne.w	8015792 <rcl_expand_topic_name+0x172>
 8015676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015678:	2a00      	cmp	r2, #0
 801567a:	f040 8093 	bne.w	80157a4 <rcl_expand_topic_name+0x184>
 801567e:	a909      	add	r1, sp, #36	@ 0x24
 8015680:	4638      	mov	r0, r7
 8015682:	f7fc ffe5 	bl	8012650 <rmw_validate_namespace>
 8015686:	2800      	cmp	r0, #0
 8015688:	f040 8083 	bne.w	8015792 <rcl_expand_topic_name+0x172>
 801568c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801568e:	2c00      	cmp	r4, #0
 8015690:	f040 80ed 	bne.w	801586e <rcl_expand_topic_name+0x24e>
 8015694:	217b      	movs	r1, #123	@ 0x7b
 8015696:	4640      	mov	r0, r8
 8015698:	f000 ffc2 	bl	8016620 <strchr>
 801569c:	f898 3000 	ldrb.w	r3, [r8]
 80156a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80156a2:	4605      	mov	r5, r0
 80156a4:	f000 809e 	beq.w	80157e4 <rcl_expand_topic_name+0x1c4>
 80156a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80156aa:	f040 80a2 	bne.w	80157f2 <rcl_expand_topic_name+0x1d2>
 80156ae:	4638      	mov	r0, r7
 80156b0:	f7ea fda0 	bl	80001f4 <strlen>
 80156b4:	4a82      	ldr	r2, [pc, #520]	@ (80158c0 <rcl_expand_topic_name+0x2a0>)
 80156b6:	4b83      	ldr	r3, [pc, #524]	@ (80158c4 <rcl_expand_topic_name+0x2a4>)
 80156b8:	2801      	cmp	r0, #1
 80156ba:	bf18      	it	ne
 80156bc:	4613      	movne	r3, r2
 80156be:	9302      	str	r3, [sp, #8]
 80156c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80156c8:	f108 0301 	add.w	r3, r8, #1
 80156cc:	9305      	str	r3, [sp, #20]
 80156ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156d2:	9301      	str	r3, [sp, #4]
 80156d4:	ab14      	add	r3, sp, #80	@ 0x50
 80156d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156d8:	f7fc fba2 	bl	8011e20 <rcutils_format_string_limit>
 80156dc:	4682      	mov	sl, r0
 80156de:	2800      	cmp	r0, #0
 80156e0:	f000 80c7 	beq.w	8015872 <rcl_expand_topic_name+0x252>
 80156e4:	2d00      	cmp	r5, #0
 80156e6:	f000 80a2 	beq.w	801582e <rcl_expand_topic_name+0x20e>
 80156ea:	217b      	movs	r1, #123	@ 0x7b
 80156ec:	f000 ff98 	bl	8016620 <strchr>
 80156f0:	46d1      	mov	r9, sl
 80156f2:	4605      	mov	r5, r0
 80156f4:	9407      	str	r4, [sp, #28]
 80156f6:	46d3      	mov	fp, sl
 80156f8:	464c      	mov	r4, r9
 80156fa:	2d00      	cmp	r5, #0
 80156fc:	f000 80be 	beq.w	801587c <rcl_expand_topic_name+0x25c>
 8015700:	217d      	movs	r1, #125	@ 0x7d
 8015702:	4620      	mov	r0, r4
 8015704:	f000 ff8c 	bl	8016620 <strchr>
 8015708:	eba0 0905 	sub.w	r9, r0, r5
 801570c:	f109 0a01 	add.w	sl, r9, #1
 8015710:	486d      	ldr	r0, [pc, #436]	@ (80158c8 <rcl_expand_topic_name+0x2a8>)
 8015712:	4652      	mov	r2, sl
 8015714:	4629      	mov	r1, r5
 8015716:	f000 ff90 	bl	801663a <strncmp>
 801571a:	2800      	cmp	r0, #0
 801571c:	d067      	beq.n	80157ee <rcl_expand_topic_name+0x1ce>
 801571e:	486b      	ldr	r0, [pc, #428]	@ (80158cc <rcl_expand_topic_name+0x2ac>)
 8015720:	4652      	mov	r2, sl
 8015722:	4629      	mov	r1, r5
 8015724:	f000 ff89 	bl	801663a <strncmp>
 8015728:	b130      	cbz	r0, 8015738 <rcl_expand_topic_name+0x118>
 801572a:	4869      	ldr	r0, [pc, #420]	@ (80158d0 <rcl_expand_topic_name+0x2b0>)
 801572c:	4652      	mov	r2, sl
 801572e:	4629      	mov	r1, r5
 8015730:	f000 ff83 	bl	801663a <strncmp>
 8015734:	2800      	cmp	r0, #0
 8015736:	d137      	bne.n	80157a8 <rcl_expand_topic_name+0x188>
 8015738:	46b9      	mov	r9, r7
 801573a:	ab16      	add	r3, sp, #88	@ 0x58
 801573c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015740:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015744:	ab14      	add	r3, sp, #80	@ 0x50
 8015746:	4628      	mov	r0, r5
 8015748:	cb0c      	ldmia	r3, {r2, r3}
 801574a:	4651      	mov	r1, sl
 801574c:	f7fc fca4 	bl	8012098 <rcutils_strndup>
 8015750:	4605      	mov	r5, r0
 8015752:	2800      	cmp	r0, #0
 8015754:	f000 809c 	beq.w	8015890 <rcl_expand_topic_name+0x270>
 8015758:	464a      	mov	r2, r9
 801575a:	4620      	mov	r0, r4
 801575c:	ab14      	add	r3, sp, #80	@ 0x50
 801575e:	4629      	mov	r1, r5
 8015760:	f7fc fb98 	bl	8011e94 <rcutils_repl_str>
 8015764:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015766:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015768:	4604      	mov	r4, r0
 801576a:	4628      	mov	r0, r5
 801576c:	4798      	blx	r3
 801576e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015770:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015772:	4658      	mov	r0, fp
 8015774:	4798      	blx	r3
 8015776:	2c00      	cmp	r4, #0
 8015778:	d07b      	beq.n	8015872 <rcl_expand_topic_name+0x252>
 801577a:	217b      	movs	r1, #123	@ 0x7b
 801577c:	4620      	mov	r0, r4
 801577e:	f000 ff4f 	bl	8016620 <strchr>
 8015782:	46a3      	mov	fp, r4
 8015784:	4605      	mov	r5, r0
 8015786:	e7b8      	b.n	80156fa <rcl_expand_topic_name+0xda>
 8015788:	240b      	movs	r4, #11
 801578a:	4620      	mov	r0, r4
 801578c:	b00b      	add	sp, #44	@ 0x2c
 801578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015792:	f7f9 ff07 	bl	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015796:	4604      	mov	r4, r0
 8015798:	e7f7      	b.n	801578a <rcl_expand_topic_name+0x16a>
 801579a:	2467      	movs	r4, #103	@ 0x67
 801579c:	4620      	mov	r0, r4
 801579e:	b00b      	add	sp, #44	@ 0x2c
 80157a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a4:	24c9      	movs	r4, #201	@ 0xc9
 80157a6:	e7f0      	b.n	801578a <rcl_expand_topic_name+0x16a>
 80157a8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80157ac:	9806      	ldr	r0, [sp, #24]
 80157ae:	1c69      	adds	r1, r5, #1
 80157b0:	f7fc fd8c 	bl	80122cc <rcutils_string_map_getn>
 80157b4:	4681      	mov	r9, r0
 80157b6:	2800      	cmp	r0, #0
 80157b8:	d1bf      	bne.n	801573a <rcl_expand_topic_name+0x11a>
 80157ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80157bc:	aa16      	add	r2, sp, #88	@ 0x58
 80157be:	6018      	str	r0, [r3, #0]
 80157c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80157c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80157c6:	ab14      	add	r3, sp, #80	@ 0x50
 80157c8:	cb0c      	ldmia	r3, {r2, r3}
 80157ca:	4651      	mov	r1, sl
 80157cc:	4628      	mov	r0, r5
 80157ce:	f7fc fc63 	bl	8012098 <rcutils_strndup>
 80157d2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157d6:	4798      	blx	r3
 80157d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157dc:	4658      	mov	r0, fp
 80157de:	2469      	movs	r4, #105	@ 0x69
 80157e0:	4798      	blx	r3
 80157e2:	e7d2      	b.n	801578a <rcl_expand_topic_name+0x16a>
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d05b      	beq.n	80158a0 <rcl_expand_topic_name+0x280>
 80157e8:	46c1      	mov	r9, r8
 80157ea:	46a2      	mov	sl, r4
 80157ec:	e782      	b.n	80156f4 <rcl_expand_topic_name+0xd4>
 80157ee:	46b1      	mov	r9, r6
 80157f0:	e7a3      	b.n	801573a <rcl_expand_topic_name+0x11a>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d1f8      	bne.n	80157e8 <rcl_expand_topic_name+0x1c8>
 80157f6:	4638      	mov	r0, r7
 80157f8:	f7ea fcfc 	bl	80001f4 <strlen>
 80157fc:	4a35      	ldr	r2, [pc, #212]	@ (80158d4 <rcl_expand_topic_name+0x2b4>)
 80157fe:	4b36      	ldr	r3, [pc, #216]	@ (80158d8 <rcl_expand_topic_name+0x2b8>)
 8015800:	f8cd 8010 	str.w	r8, [sp, #16]
 8015804:	2801      	cmp	r0, #1
 8015806:	bf18      	it	ne
 8015808:	4613      	movne	r3, r2
 801580a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801580e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015812:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015814:	9703      	str	r7, [sp, #12]
 8015816:	9200      	str	r2, [sp, #0]
 8015818:	ab14      	add	r3, sp, #80	@ 0x50
 801581a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801581c:	f7fc fb00 	bl	8011e20 <rcutils_format_string_limit>
 8015820:	4682      	mov	sl, r0
 8015822:	4653      	mov	r3, sl
 8015824:	b32b      	cbz	r3, 8015872 <rcl_expand_topic_name+0x252>
 8015826:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015828:	f8c3 a000 	str.w	sl, [r3]
 801582c:	e7ad      	b.n	801578a <rcl_expand_topic_name+0x16a>
 801582e:	f89a 3000 	ldrb.w	r3, [sl]
 8015832:	2b2f      	cmp	r3, #47	@ 0x2f
 8015834:	d0f7      	beq.n	8015826 <rcl_expand_topic_name+0x206>
 8015836:	4638      	mov	r0, r7
 8015838:	f7ea fcdc 	bl	80001f4 <strlen>
 801583c:	4a25      	ldr	r2, [pc, #148]	@ (80158d4 <rcl_expand_topic_name+0x2b4>)
 801583e:	4b26      	ldr	r3, [pc, #152]	@ (80158d8 <rcl_expand_topic_name+0x2b8>)
 8015840:	f8cd a010 	str.w	sl, [sp, #16]
 8015844:	2801      	cmp	r0, #1
 8015846:	bf18      	it	ne
 8015848:	4613      	movne	r3, r2
 801584a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801584e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015852:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015854:	9703      	str	r7, [sp, #12]
 8015856:	9200      	str	r2, [sp, #0]
 8015858:	ab14      	add	r3, sp, #80	@ 0x50
 801585a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801585c:	f7fc fae0 	bl	8011e20 <rcutils_format_string_limit>
 8015860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015862:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015864:	4605      	mov	r5, r0
 8015866:	4650      	mov	r0, sl
 8015868:	4798      	blx	r3
 801586a:	46aa      	mov	sl, r5
 801586c:	e7d9      	b.n	8015822 <rcl_expand_topic_name+0x202>
 801586e:	24ca      	movs	r4, #202	@ 0xca
 8015870:	e78b      	b.n	801578a <rcl_expand_topic_name+0x16a>
 8015872:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015874:	2300      	movs	r3, #0
 8015876:	6013      	str	r3, [r2, #0]
 8015878:	240a      	movs	r4, #10
 801587a:	e786      	b.n	801578a <rcl_expand_topic_name+0x16a>
 801587c:	465b      	mov	r3, fp
 801587e:	9c07      	ldr	r4, [sp, #28]
 8015880:	46da      	mov	sl, fp
 8015882:	2b00      	cmp	r3, #0
 8015884:	d1d3      	bne.n	801582e <rcl_expand_topic_name+0x20e>
 8015886:	f898 3000 	ldrb.w	r3, [r8]
 801588a:	2b2f      	cmp	r3, #47	@ 0x2f
 801588c:	d0cb      	beq.n	8015826 <rcl_expand_topic_name+0x206>
 801588e:	e7b2      	b.n	80157f6 <rcl_expand_topic_name+0x1d6>
 8015890:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015894:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015896:	6015      	str	r5, [r2, #0]
 8015898:	4658      	mov	r0, fp
 801589a:	4798      	blx	r3
 801589c:	240a      	movs	r4, #10
 801589e:	e774      	b.n	801578a <rcl_expand_topic_name+0x16a>
 80158a0:	ab17      	add	r3, sp, #92	@ 0x5c
 80158a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80158aa:	ab14      	add	r3, sp, #80	@ 0x50
 80158ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80158ae:	4640      	mov	r0, r8
 80158b0:	f7fc fbd0 	bl	8012054 <rcutils_strdup>
 80158b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80158b6:	2800      	cmp	r0, #0
 80158b8:	6018      	str	r0, [r3, #0]
 80158ba:	bf08      	it	eq
 80158bc:	240a      	moveq	r4, #10
 80158be:	e764      	b.n	801578a <rcl_expand_topic_name+0x16a>
 80158c0:	080181a8 	.word	0x080181a8
 80158c4:	080177d8 	.word	0x080177d8
 80158c8:	080181b0 	.word	0x080181b0
 80158cc:	080181b8 	.word	0x080181b8
 80158d0:	080181c0 	.word	0x080181c0
 80158d4:	08017acc 	.word	0x08017acc
 80158d8:	080177e8 	.word	0x080177e8

080158dc <rcl_get_default_topic_name_substitutions>:
 80158dc:	2800      	cmp	r0, #0
 80158de:	bf0c      	ite	eq
 80158e0:	200b      	moveq	r0, #11
 80158e2:	2000      	movne	r0, #0
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop

080158e8 <rcl_get_zero_initialized_guard_condition>:
 80158e8:	4a03      	ldr	r2, [pc, #12]	@ (80158f8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80158ea:	4603      	mov	r3, r0
 80158ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80158f4:	4618      	mov	r0, r3
 80158f6:	4770      	bx	lr
 80158f8:	080181cc 	.word	0x080181cc

080158fc <rcl_guard_condition_init_from_rmw>:
 80158fc:	b082      	sub	sp, #8
 80158fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015902:	b086      	sub	sp, #24
 8015904:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015908:	4604      	mov	r4, r0
 801590a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801590e:	460e      	mov	r6, r1
 8015910:	4617      	mov	r7, r2
 8015912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015916:	f10d 0e04 	add.w	lr, sp, #4
 801591a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801591e:	f8dc 3000 	ldr.w	r3, [ip]
 8015922:	f8ce 3000 	str.w	r3, [lr]
 8015926:	a801      	add	r0, sp, #4
 8015928:	f7f4 fea0 	bl	800a66c <rcutils_allocator_is_valid>
 801592c:	b350      	cbz	r0, 8015984 <rcl_guard_condition_init_from_rmw+0x88>
 801592e:	b34c      	cbz	r4, 8015984 <rcl_guard_condition_init_from_rmw+0x88>
 8015930:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015934:	f1b8 0f00 	cmp.w	r8, #0
 8015938:	d11e      	bne.n	8015978 <rcl_guard_condition_init_from_rmw+0x7c>
 801593a:	b31f      	cbz	r7, 8015984 <rcl_guard_condition_init_from_rmw+0x88>
 801593c:	4638      	mov	r0, r7
 801593e:	f7f9 fe4f 	bl	800f5e0 <rcl_context_is_valid>
 8015942:	b328      	cbz	r0, 8015990 <rcl_guard_condition_init_from_rmw+0x94>
 8015944:	9b01      	ldr	r3, [sp, #4]
 8015946:	9905      	ldr	r1, [sp, #20]
 8015948:	201c      	movs	r0, #28
 801594a:	4798      	blx	r3
 801594c:	4605      	mov	r5, r0
 801594e:	6060      	str	r0, [r4, #4]
 8015950:	b358      	cbz	r0, 80159aa <rcl_guard_condition_init_from_rmw+0xae>
 8015952:	b1fe      	cbz	r6, 8015994 <rcl_guard_condition_init_from_rmw+0x98>
 8015954:	6006      	str	r6, [r0, #0]
 8015956:	f880 8004 	strb.w	r8, [r0, #4]
 801595a:	ac01      	add	r4, sp, #4
 801595c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801595e:	f105 0c08 	add.w	ip, r5, #8
 8015962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015966:	6823      	ldr	r3, [r4, #0]
 8015968:	f8cc 3000 	str.w	r3, [ip]
 801596c:	2000      	movs	r0, #0
 801596e:	b006      	add	sp, #24
 8015970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015974:	b002      	add	sp, #8
 8015976:	4770      	bx	lr
 8015978:	2064      	movs	r0, #100	@ 0x64
 801597a:	b006      	add	sp, #24
 801597c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015980:	b002      	add	sp, #8
 8015982:	4770      	bx	lr
 8015984:	200b      	movs	r0, #11
 8015986:	b006      	add	sp, #24
 8015988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801598c:	b002      	add	sp, #8
 801598e:	4770      	bx	lr
 8015990:	2065      	movs	r0, #101	@ 0x65
 8015992:	e7f2      	b.n	801597a <rcl_guard_condition_init_from_rmw+0x7e>
 8015994:	6838      	ldr	r0, [r7, #0]
 8015996:	3028      	adds	r0, #40	@ 0x28
 8015998:	f000 fa3a 	bl	8015e10 <rmw_create_guard_condition>
 801599c:	6028      	str	r0, [r5, #0]
 801599e:	6865      	ldr	r5, [r4, #4]
 80159a0:	682e      	ldr	r6, [r5, #0]
 80159a2:	b126      	cbz	r6, 80159ae <rcl_guard_condition_init_from_rmw+0xb2>
 80159a4:	2301      	movs	r3, #1
 80159a6:	712b      	strb	r3, [r5, #4]
 80159a8:	e7d7      	b.n	801595a <rcl_guard_condition_init_from_rmw+0x5e>
 80159aa:	200a      	movs	r0, #10
 80159ac:	e7e5      	b.n	801597a <rcl_guard_condition_init_from_rmw+0x7e>
 80159ae:	4628      	mov	r0, r5
 80159b0:	9b02      	ldr	r3, [sp, #8]
 80159b2:	9905      	ldr	r1, [sp, #20]
 80159b4:	4798      	blx	r3
 80159b6:	6066      	str	r6, [r4, #4]
 80159b8:	2001      	movs	r0, #1
 80159ba:	e7de      	b.n	801597a <rcl_guard_condition_init_from_rmw+0x7e>

080159bc <rcl_guard_condition_fini>:
 80159bc:	b570      	push	{r4, r5, r6, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	b1f0      	cbz	r0, 8015a00 <rcl_guard_condition_fini+0x44>
 80159c2:	6843      	ldr	r3, [r0, #4]
 80159c4:	4604      	mov	r4, r0
 80159c6:	b163      	cbz	r3, 80159e2 <rcl_guard_condition_fini+0x26>
 80159c8:	6818      	ldr	r0, [r3, #0]
 80159ca:	68de      	ldr	r6, [r3, #12]
 80159cc:	6999      	ldr	r1, [r3, #24]
 80159ce:	b160      	cbz	r0, 80159ea <rcl_guard_condition_fini+0x2e>
 80159d0:	791d      	ldrb	r5, [r3, #4]
 80159d2:	b965      	cbnz	r5, 80159ee <rcl_guard_condition_fini+0x32>
 80159d4:	4618      	mov	r0, r3
 80159d6:	47b0      	blx	r6
 80159d8:	2300      	movs	r3, #0
 80159da:	4628      	mov	r0, r5
 80159dc:	6063      	str	r3, [r4, #4]
 80159de:	b002      	add	sp, #8
 80159e0:	bd70      	pop	{r4, r5, r6, pc}
 80159e2:	461d      	mov	r5, r3
 80159e4:	4628      	mov	r0, r5
 80159e6:	b002      	add	sp, #8
 80159e8:	bd70      	pop	{r4, r5, r6, pc}
 80159ea:	4605      	mov	r5, r0
 80159ec:	e7f2      	b.n	80159d4 <rcl_guard_condition_fini+0x18>
 80159ee:	9101      	str	r1, [sp, #4]
 80159f0:	f000 fa22 	bl	8015e38 <rmw_destroy_guard_condition>
 80159f4:	1e05      	subs	r5, r0, #0
 80159f6:	6863      	ldr	r3, [r4, #4]
 80159f8:	9901      	ldr	r1, [sp, #4]
 80159fa:	bf18      	it	ne
 80159fc:	2501      	movne	r5, #1
 80159fe:	e7e9      	b.n	80159d4 <rcl_guard_condition_fini+0x18>
 8015a00:	250b      	movs	r5, #11
 8015a02:	4628      	mov	r0, r5
 8015a04:	b002      	add	sp, #8
 8015a06:	bd70      	pop	{r4, r5, r6, pc}

08015a08 <rcl_guard_condition_get_default_options>:
 8015a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a0a:	b087      	sub	sp, #28
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	4668      	mov	r0, sp
 8015a10:	f7f4 fe1e 	bl	800a650 <rcutils_get_default_allocator>
 8015a14:	4b09      	ldr	r3, [pc, #36]	@ (8015a3c <rcl_guard_condition_get_default_options+0x34>)
 8015a16:	46ee      	mov	lr, sp
 8015a18:	469c      	mov	ip, r3
 8015a1a:	461d      	mov	r5, r3
 8015a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a26:	4634      	mov	r4, r6
 8015a28:	f8de 7000 	ldr.w	r7, [lr]
 8015a2c:	f8cc 7000 	str.w	r7, [ip]
 8015a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a32:	4630      	mov	r0, r6
 8015a34:	6027      	str	r7, [r4, #0]
 8015a36:	b007      	add	sp, #28
 8015a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	2000de7c 	.word	0x2000de7c

08015a40 <rcl_guard_condition_get_rmw_handle>:
 8015a40:	b110      	cbz	r0, 8015a48 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a42:	6840      	ldr	r0, [r0, #4]
 8015a44:	b100      	cbz	r0, 8015a48 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a46:	6800      	ldr	r0, [r0, #0]
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop

08015a4c <rcl_validate_topic_name>:
 8015a4c:	2800      	cmp	r0, #0
 8015a4e:	d07a      	beq.n	8015b46 <rcl_validate_topic_name+0xfa>
 8015a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a54:	460e      	mov	r6, r1
 8015a56:	2900      	cmp	r1, #0
 8015a58:	d07c      	beq.n	8015b54 <rcl_validate_topic_name+0x108>
 8015a5a:	4617      	mov	r7, r2
 8015a5c:	4605      	mov	r5, r0
 8015a5e:	f7ea fbc9 	bl	80001f4 <strlen>
 8015a62:	b1b0      	cbz	r0, 8015a92 <rcl_validate_topic_name+0x46>
 8015a64:	f895 9000 	ldrb.w	r9, [r5]
 8015a68:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015bec <rcl_validate_topic_name+0x1a0>
 8015a6c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015a70:	f013 0304 	ands.w	r3, r3, #4
 8015a74:	d169      	bne.n	8015b4a <rcl_validate_topic_name+0xfe>
 8015a76:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015a7a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015a7e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015a80:	d10e      	bne.n	8015aa0 <rcl_validate_topic_name+0x54>
 8015a82:	2202      	movs	r2, #2
 8015a84:	6032      	str	r2, [r6, #0]
 8015a86:	b36f      	cbz	r7, 8015ae4 <rcl_validate_topic_name+0x98>
 8015a88:	f8c7 8000 	str.w	r8, [r7]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a92:	2301      	movs	r3, #1
 8015a94:	6033      	str	r3, [r6, #0]
 8015a96:	b32f      	cbz	r7, 8015ae4 <rcl_validate_topic_name+0x98>
 8015a98:	2000      	movs	r0, #0
 8015a9a:	6038      	str	r0, [r7, #0]
 8015a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aa0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015aa4:	461c      	mov	r4, r3
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015aac:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015ab0:	f1be 0f09 	cmp.w	lr, #9
 8015ab4:	d919      	bls.n	8015aea <rcl_validate_topic_name+0x9e>
 8015ab6:	f022 0e20 	bic.w	lr, r2, #32
 8015aba:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015abe:	f1be 0f19 	cmp.w	lr, #25
 8015ac2:	d912      	bls.n	8015aea <rcl_validate_topic_name+0x9e>
 8015ac4:	2a5f      	cmp	r2, #95	@ 0x5f
 8015ac6:	d019      	beq.n	8015afc <rcl_validate_topic_name+0xb0>
 8015ac8:	2a2f      	cmp	r2, #47	@ 0x2f
 8015aca:	d051      	beq.n	8015b70 <rcl_validate_topic_name+0x124>
 8015acc:	2a7e      	cmp	r2, #126	@ 0x7e
 8015ace:	d048      	beq.n	8015b62 <rcl_validate_topic_name+0x116>
 8015ad0:	2a7b      	cmp	r2, #123	@ 0x7b
 8015ad2:	d054      	beq.n	8015b7e <rcl_validate_topic_name+0x132>
 8015ad4:	2a7d      	cmp	r2, #125	@ 0x7d
 8015ad6:	d161      	bne.n	8015b9c <rcl_validate_topic_name+0x150>
 8015ad8:	2c00      	cmp	r4, #0
 8015ada:	d155      	bne.n	8015b88 <rcl_validate_topic_name+0x13c>
 8015adc:	2305      	movs	r3, #5
 8015ade:	6033      	str	r3, [r6, #0]
 8015ae0:	b107      	cbz	r7, 8015ae4 <rcl_validate_topic_name+0x98>
 8015ae2:	6039      	str	r1, [r7, #0]
 8015ae4:	2000      	movs	r0, #0
 8015ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015aee:	0752      	lsls	r2, r2, #29
 8015af0:	d504      	bpl.n	8015afc <rcl_validate_topic_name+0xb0>
 8015af2:	b11c      	cbz	r4, 8015afc <rcl_validate_topic_name+0xb0>
 8015af4:	b111      	cbz	r1, 8015afc <rcl_validate_topic_name+0xb0>
 8015af6:	1e4a      	subs	r2, r1, #1
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d02d      	beq.n	8015b58 <rcl_validate_topic_name+0x10c>
 8015afc:	3101      	adds	r1, #1
 8015afe:	4288      	cmp	r0, r1
 8015b00:	d1d2      	bne.n	8015aa8 <rcl_validate_topic_name+0x5c>
 8015b02:	2c00      	cmp	r4, #0
 8015b04:	d145      	bne.n	8015b92 <rcl_validate_topic_name+0x146>
 8015b06:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015b0a:	d04f      	beq.n	8015bac <rcl_validate_topic_name+0x160>
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e006      	b.n	8015b20 <rcl_validate_topic_name+0xd4>
 8015b12:	428b      	cmp	r3, r1
 8015b14:	f105 0501 	add.w	r5, r5, #1
 8015b18:	f103 0201 	add.w	r2, r3, #1
 8015b1c:	d236      	bcs.n	8015b8c <rcl_validate_topic_name+0x140>
 8015b1e:	4613      	mov	r3, r2
 8015b20:	4580      	cmp	r8, r0
 8015b22:	f100 0001 	add.w	r0, r0, #1
 8015b26:	d0f4      	beq.n	8015b12 <rcl_validate_topic_name+0xc6>
 8015b28:	782a      	ldrb	r2, [r5, #0]
 8015b2a:	2a2f      	cmp	r2, #47	@ 0x2f
 8015b2c:	d1f1      	bne.n	8015b12 <rcl_validate_topic_name+0xc6>
 8015b2e:	786a      	ldrb	r2, [r5, #1]
 8015b30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015b34:	0754      	lsls	r4, r2, #29
 8015b36:	d5ec      	bpl.n	8015b12 <rcl_validate_topic_name+0xc6>
 8015b38:	2204      	movs	r2, #4
 8015b3a:	6032      	str	r2, [r6, #0]
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	d0d1      	beq.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b40:	603b      	str	r3, [r7, #0]
 8015b42:	2000      	movs	r0, #0
 8015b44:	e7aa      	b.n	8015a9c <rcl_validate_topic_name+0x50>
 8015b46:	200b      	movs	r0, #11
 8015b48:	4770      	bx	lr
 8015b4a:	2304      	movs	r3, #4
 8015b4c:	6033      	str	r3, [r6, #0]
 8015b4e:	2f00      	cmp	r7, #0
 8015b50:	d1a2      	bne.n	8015a98 <rcl_validate_topic_name+0x4c>
 8015b52:	e7c7      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b54:	200b      	movs	r0, #11
 8015b56:	e7a1      	b.n	8015a9c <rcl_validate_topic_name+0x50>
 8015b58:	2309      	movs	r3, #9
 8015b5a:	6033      	str	r3, [r6, #0]
 8015b5c:	2f00      	cmp	r7, #0
 8015b5e:	d1c0      	bne.n	8015ae2 <rcl_validate_topic_name+0x96>
 8015b60:	e7c0      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b62:	2900      	cmp	r1, #0
 8015b64:	d0ca      	beq.n	8015afc <rcl_validate_topic_name+0xb0>
 8015b66:	2306      	movs	r3, #6
 8015b68:	6033      	str	r3, [r6, #0]
 8015b6a:	2f00      	cmp	r7, #0
 8015b6c:	d1b9      	bne.n	8015ae2 <rcl_validate_topic_name+0x96>
 8015b6e:	e7b9      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b70:	2c00      	cmp	r4, #0
 8015b72:	d0c3      	beq.n	8015afc <rcl_validate_topic_name+0xb0>
 8015b74:	2308      	movs	r3, #8
 8015b76:	6033      	str	r3, [r6, #0]
 8015b78:	2f00      	cmp	r7, #0
 8015b7a:	d1b2      	bne.n	8015ae2 <rcl_validate_topic_name+0x96>
 8015b7c:	e7b2      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b7e:	2c00      	cmp	r4, #0
 8015b80:	d1f8      	bne.n	8015b74 <rcl_validate_topic_name+0x128>
 8015b82:	460b      	mov	r3, r1
 8015b84:	2401      	movs	r4, #1
 8015b86:	e7b9      	b.n	8015afc <rcl_validate_topic_name+0xb0>
 8015b88:	2400      	movs	r4, #0
 8015b8a:	e7b7      	b.n	8015afc <rcl_validate_topic_name+0xb0>
 8015b8c:	2000      	movs	r0, #0
 8015b8e:	6030      	str	r0, [r6, #0]
 8015b90:	e784      	b.n	8015a9c <rcl_validate_topic_name+0x50>
 8015b92:	2205      	movs	r2, #5
 8015b94:	6032      	str	r2, [r6, #0]
 8015b96:	2f00      	cmp	r7, #0
 8015b98:	d1d2      	bne.n	8015b40 <rcl_validate_topic_name+0xf4>
 8015b9a:	e7a3      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015b9c:	2c00      	cmp	r4, #0
 8015b9e:	bf14      	ite	ne
 8015ba0:	2308      	movne	r3, #8
 8015ba2:	2303      	moveq	r3, #3
 8015ba4:	6033      	str	r3, [r6, #0]
 8015ba6:	2f00      	cmp	r7, #0
 8015ba8:	d19b      	bne.n	8015ae2 <rcl_validate_topic_name+0x96>
 8015baa:	e79b      	b.n	8015ae4 <rcl_validate_topic_name+0x98>
 8015bac:	2301      	movs	r3, #1
 8015bae:	e00a      	b.n	8015bc6 <rcl_validate_topic_name+0x17a>
 8015bb0:	2c01      	cmp	r4, #1
 8015bb2:	d013      	beq.n	8015bdc <rcl_validate_topic_name+0x190>
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	f104 0401 	add.w	r4, r4, #1
 8015bba:	f105 0501 	add.w	r5, r5, #1
 8015bbe:	f103 0201 	add.w	r2, r3, #1
 8015bc2:	d9e3      	bls.n	8015b8c <rcl_validate_topic_name+0x140>
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	45a0      	cmp	r8, r4
 8015bc8:	d0f4      	beq.n	8015bb4 <rcl_validate_topic_name+0x168>
 8015bca:	782a      	ldrb	r2, [r5, #0]
 8015bcc:	2a2f      	cmp	r2, #47	@ 0x2f
 8015bce:	d1ef      	bne.n	8015bb0 <rcl_validate_topic_name+0x164>
 8015bd0:	786a      	ldrb	r2, [r5, #1]
 8015bd2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015bd6:	0752      	lsls	r2, r2, #29
 8015bd8:	d5ec      	bpl.n	8015bb4 <rcl_validate_topic_name+0x168>
 8015bda:	e7ad      	b.n	8015b38 <rcl_validate_topic_name+0xec>
 8015bdc:	2307      	movs	r3, #7
 8015bde:	6033      	str	r3, [r6, #0]
 8015be0:	2f00      	cmp	r7, #0
 8015be2:	f43f af7f 	beq.w	8015ae4 <rcl_validate_topic_name+0x98>
 8015be6:	603c      	str	r4, [r7, #0]
 8015be8:	2000      	movs	r0, #0
 8015bea:	e757      	b.n	8015a9c <rcl_validate_topic_name+0x50>
 8015bec:	08018244 	.word	0x08018244

08015bf0 <rcutils_string_array_fini>:
 8015bf0:	b320      	cbz	r0, 8015c3c <rcutils_string_array_fini+0x4c>
 8015bf2:	b570      	push	{r4, r5, r6, lr}
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	6840      	ldr	r0, [r0, #4]
 8015bf8:	b1d8      	cbz	r0, 8015c32 <rcutils_string_array_fini+0x42>
 8015bfa:	f104 0008 	add.w	r0, r4, #8
 8015bfe:	f7f4 fd35 	bl	800a66c <rcutils_allocator_is_valid>
 8015c02:	b1b8      	cbz	r0, 8015c34 <rcutils_string_array_fini+0x44>
 8015c04:	6823      	ldr	r3, [r4, #0]
 8015c06:	b1bb      	cbz	r3, 8015c38 <rcutils_string_array_fini+0x48>
 8015c08:	2500      	movs	r5, #0
 8015c0a:	6860      	ldr	r0, [r4, #4]
 8015c0c:	462e      	mov	r6, r5
 8015c0e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015c12:	68e3      	ldr	r3, [r4, #12]
 8015c14:	69a1      	ldr	r1, [r4, #24]
 8015c16:	4798      	blx	r3
 8015c18:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015c1c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015c20:	3501      	adds	r5, #1
 8015c22:	429d      	cmp	r5, r3
 8015c24:	d3f3      	bcc.n	8015c0e <rcutils_string_array_fini+0x1e>
 8015c26:	68e3      	ldr	r3, [r4, #12]
 8015c28:	69a1      	ldr	r1, [r4, #24]
 8015c2a:	4798      	blx	r3
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	e9c4 0000 	strd	r0, r0, [r4]
 8015c32:	bd70      	pop	{r4, r5, r6, pc}
 8015c34:	200b      	movs	r0, #11
 8015c36:	bd70      	pop	{r4, r5, r6, pc}
 8015c38:	6860      	ldr	r0, [r4, #4]
 8015c3a:	e7f4      	b.n	8015c26 <rcutils_string_array_fini+0x36>
 8015c3c:	200b      	movs	r0, #11
 8015c3e:	4770      	bx	lr

08015c40 <on_status>:
 8015c40:	b082      	sub	sp, #8
 8015c42:	b002      	add	sp, #8
 8015c44:	4770      	bx	lr
 8015c46:	bf00      	nop

08015c48 <on_topic>:
 8015c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c4c:	4a22      	ldr	r2, [pc, #136]	@ (8015cd8 <on_topic+0x90>)
 8015c4e:	b094      	sub	sp, #80	@ 0x50
 8015c50:	6812      	ldr	r2, [r2, #0]
 8015c52:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015c54:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015c58:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015c5c:	b3c2      	cbz	r2, 8015cd0 <on_topic+0x88>
 8015c5e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015c62:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015c66:	e001      	b.n	8015c6c <on_topic+0x24>
 8015c68:	6852      	ldr	r2, [r2, #4]
 8015c6a:	b38a      	cbz	r2, 8015cd0 <on_topic+0x88>
 8015c6c:	6894      	ldr	r4, [r2, #8]
 8015c6e:	8aa3      	ldrh	r3, [r4, #20]
 8015c70:	428b      	cmp	r3, r1
 8015c72:	d1f9      	bne.n	8015c68 <on_topic+0x20>
 8015c74:	7da3      	ldrb	r3, [r4, #22]
 8015c76:	4283      	cmp	r3, r0
 8015c78:	d1f6      	bne.n	8015c68 <on_topic+0x20>
 8015c7a:	2248      	movs	r2, #72	@ 0x48
 8015c7c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015c80:	4668      	mov	r0, sp
 8015c82:	f000 fd8e 	bl	80167a2 <memcpy>
 8015c86:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015c8a:	cb0c      	ldmia	r3, {r2, r3}
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	f7f5 f91f 	bl	800aed0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c92:	4607      	mov	r7, r0
 8015c94:	b1e0      	cbz	r0, 8015cd0 <on_topic+0x88>
 8015c96:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015c9a:	4632      	mov	r2, r6
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	f108 0110 	add.w	r1, r8, #16
 8015ca2:	f7fd ffc9 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 8015ca6:	b930      	cbnz	r0, 8015cb6 <on_topic+0x6e>
 8015ca8:	480c      	ldr	r0, [pc, #48]	@ (8015cdc <on_topic+0x94>)
 8015caa:	4639      	mov	r1, r7
 8015cac:	b014      	add	sp, #80	@ 0x50
 8015cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb2:	f7fc bd59 	b.w	8012768 <put_memory>
 8015cb6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015cba:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015cbe:	f7fd feab 	bl	8013a18 <rmw_uros_epoch_nanos>
 8015cc2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015cc6:	2305      	movs	r3, #5
 8015cc8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ccc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015cd0:	b014      	add	sp, #80	@ 0x50
 8015cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd6:	bf00      	nop
 8015cd8:	2000dcdc 	.word	0x2000dcdc
 8015cdc:	2000dccc 	.word	0x2000dccc

08015ce0 <on_request>:
 8015ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce4:	4823      	ldr	r0, [pc, #140]	@ (8015d74 <on_request+0x94>)
 8015ce6:	b094      	sub	sp, #80	@ 0x50
 8015ce8:	6800      	ldr	r0, [r0, #0]
 8015cea:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015cec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015cf0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d03b      	beq.n	8015d6e <on_request+0x8e>
 8015cf6:	461d      	mov	r5, r3
 8015cf8:	e001      	b.n	8015cfe <on_request+0x1e>
 8015cfa:	6840      	ldr	r0, [r0, #4]
 8015cfc:	b3b8      	cbz	r0, 8015d6e <on_request+0x8e>
 8015cfe:	6884      	ldr	r4, [r0, #8]
 8015d00:	8b21      	ldrh	r1, [r4, #24]
 8015d02:	4291      	cmp	r1, r2
 8015d04:	d1f9      	bne.n	8015cfa <on_request+0x1a>
 8015d06:	2248      	movs	r2, #72	@ 0x48
 8015d08:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015d0c:	4668      	mov	r0, sp
 8015d0e:	f000 fd48 	bl	80167a2 <memcpy>
 8015d12:	f104 0320 	add.w	r3, r4, #32
 8015d16:	cb0c      	ldmia	r3, {r2, r3}
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f7f5 f8d9 	bl	800aed0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015d1e:	4680      	mov	r8, r0
 8015d20:	b328      	cbz	r0, 8015d6e <on_request+0x8e>
 8015d22:	4638      	mov	r0, r7
 8015d24:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015d28:	4632      	mov	r2, r6
 8015d2a:	f107 0110 	add.w	r1, r7, #16
 8015d2e:	f7fd ff83 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 8015d32:	b930      	cbnz	r0, 8015d42 <on_request+0x62>
 8015d34:	4810      	ldr	r0, [pc, #64]	@ (8015d78 <on_request+0x98>)
 8015d36:	4641      	mov	r1, r8
 8015d38:	b014      	add	sp, #80	@ 0x50
 8015d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d3e:	f7fc bd13 	b.w	8012768 <put_memory>
 8015d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d44:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015d48:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015d4c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015d50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015d58:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015d5c:	f7fd fe5c 	bl	8013a18 <rmw_uros_epoch_nanos>
 8015d60:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015d64:	2303      	movs	r3, #3
 8015d66:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015d6a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015d6e:	b014      	add	sp, #80	@ 0x50
 8015d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d74:	2000dcac 	.word	0x2000dcac
 8015d78:	2000dccc 	.word	0x2000dccc

08015d7c <on_reply>:
 8015d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d80:	4821      	ldr	r0, [pc, #132]	@ (8015e08 <on_reply+0x8c>)
 8015d82:	b094      	sub	sp, #80	@ 0x50
 8015d84:	6800      	ldr	r0, [r0, #0]
 8015d86:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015d88:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015d8c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015d8e:	b3b8      	cbz	r0, 8015e00 <on_reply+0x84>
 8015d90:	461d      	mov	r5, r3
 8015d92:	e001      	b.n	8015d98 <on_reply+0x1c>
 8015d94:	6840      	ldr	r0, [r0, #4]
 8015d96:	b398      	cbz	r0, 8015e00 <on_reply+0x84>
 8015d98:	6884      	ldr	r4, [r0, #8]
 8015d9a:	8b21      	ldrh	r1, [r4, #24]
 8015d9c:	4291      	cmp	r1, r2
 8015d9e:	d1f9      	bne.n	8015d94 <on_reply+0x18>
 8015da0:	2248      	movs	r2, #72	@ 0x48
 8015da2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015da6:	4668      	mov	r0, sp
 8015da8:	f000 fcfb 	bl	80167a2 <memcpy>
 8015dac:	f104 0320 	add.w	r3, r4, #32
 8015db0:	cb0c      	ldmia	r3, {r2, r3}
 8015db2:	4620      	mov	r0, r4
 8015db4:	f7f5 f88c 	bl	800aed0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015db8:	4680      	mov	r8, r0
 8015dba:	b308      	cbz	r0, 8015e00 <on_reply+0x84>
 8015dbc:	4638      	mov	r0, r7
 8015dbe:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015dc2:	4632      	mov	r2, r6
 8015dc4:	f107 0110 	add.w	r1, r7, #16
 8015dc8:	f7fd ff36 	bl	8013c38 <ucdr_deserialize_array_uint8_t>
 8015dcc:	b930      	cbnz	r0, 8015ddc <on_reply+0x60>
 8015dce:	480f      	ldr	r0, [pc, #60]	@ (8015e0c <on_reply+0x90>)
 8015dd0:	4641      	mov	r1, r8
 8015dd2:	b014      	add	sp, #80	@ 0x50
 8015dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd8:	f7fc bcc6 	b.w	8012768 <put_memory>
 8015ddc:	2200      	movs	r2, #0
 8015dde:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015de2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015de6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015dea:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015dee:	f7fd fe13 	bl	8013a18 <rmw_uros_epoch_nanos>
 8015df2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015df6:	2304      	movs	r3, #4
 8015df8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015dfc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015e00:	b014      	add	sp, #80	@ 0x50
 8015e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e06:	bf00      	nop
 8015e08:	200093c0 	.word	0x200093c0
 8015e0c:	2000dccc 	.word	0x2000dccc

08015e10 <rmw_create_guard_condition>:
 8015e10:	b538      	push	{r3, r4, r5, lr}
 8015e12:	4605      	mov	r5, r0
 8015e14:	4807      	ldr	r0, [pc, #28]	@ (8015e34 <rmw_create_guard_condition+0x24>)
 8015e16:	f7fc fc97 	bl	8012748 <get_memory>
 8015e1a:	b148      	cbz	r0, 8015e30 <rmw_create_guard_condition+0x20>
 8015e1c:	6884      	ldr	r4, [r0, #8]
 8015e1e:	2300      	movs	r3, #0
 8015e20:	7423      	strb	r3, [r4, #16]
 8015e22:	61e5      	str	r5, [r4, #28]
 8015e24:	f7fc fcf8 	bl	8012818 <rmw_get_implementation_identifier>
 8015e28:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015e2c:	f104 0014 	add.w	r0, r4, #20
 8015e30:	bd38      	pop	{r3, r4, r5, pc}
 8015e32:	bf00      	nop
 8015e34:	2000dc6c 	.word	0x2000dc6c

08015e38 <rmw_destroy_guard_condition>:
 8015e38:	b508      	push	{r3, lr}
 8015e3a:	4b08      	ldr	r3, [pc, #32]	@ (8015e5c <rmw_destroy_guard_condition+0x24>)
 8015e3c:	6819      	ldr	r1, [r3, #0]
 8015e3e:	b911      	cbnz	r1, 8015e46 <rmw_destroy_guard_condition+0xe>
 8015e40:	e00a      	b.n	8015e58 <rmw_destroy_guard_condition+0x20>
 8015e42:	6849      	ldr	r1, [r1, #4]
 8015e44:	b141      	cbz	r1, 8015e58 <rmw_destroy_guard_condition+0x20>
 8015e46:	688b      	ldr	r3, [r1, #8]
 8015e48:	3314      	adds	r3, #20
 8015e4a:	4298      	cmp	r0, r3
 8015e4c:	d1f9      	bne.n	8015e42 <rmw_destroy_guard_condition+0xa>
 8015e4e:	4803      	ldr	r0, [pc, #12]	@ (8015e5c <rmw_destroy_guard_condition+0x24>)
 8015e50:	f7fc fc8a 	bl	8012768 <put_memory>
 8015e54:	2000      	movs	r0, #0
 8015e56:	bd08      	pop	{r3, pc}
 8015e58:	2001      	movs	r0, #1
 8015e5a:	bd08      	pop	{r3, pc}
 8015e5c:	2000dc6c 	.word	0x2000dc6c

08015e60 <calloc>:
 8015e60:	4b02      	ldr	r3, [pc, #8]	@ (8015e6c <calloc+0xc>)
 8015e62:	460a      	mov	r2, r1
 8015e64:	4601      	mov	r1, r0
 8015e66:	6818      	ldr	r0, [r3, #0]
 8015e68:	f000 b802 	b.w	8015e70 <_calloc_r>
 8015e6c:	200002b4 	.word	0x200002b4

08015e70 <_calloc_r>:
 8015e70:	b570      	push	{r4, r5, r6, lr}
 8015e72:	fba1 5402 	umull	r5, r4, r1, r2
 8015e76:	b93c      	cbnz	r4, 8015e88 <_calloc_r+0x18>
 8015e78:	4629      	mov	r1, r5
 8015e7a:	f000 f887 	bl	8015f8c <_malloc_r>
 8015e7e:	4606      	mov	r6, r0
 8015e80:	b928      	cbnz	r0, 8015e8e <_calloc_r+0x1e>
 8015e82:	2600      	movs	r6, #0
 8015e84:	4630      	mov	r0, r6
 8015e86:	bd70      	pop	{r4, r5, r6, pc}
 8015e88:	220c      	movs	r2, #12
 8015e8a:	6002      	str	r2, [r0, #0]
 8015e8c:	e7f9      	b.n	8015e82 <_calloc_r+0x12>
 8015e8e:	462a      	mov	r2, r5
 8015e90:	4621      	mov	r1, r4
 8015e92:	f000 fbbd 	bl	8016610 <memset>
 8015e96:	e7f5      	b.n	8015e84 <_calloc_r+0x14>

08015e98 <getenv>:
 8015e98:	b507      	push	{r0, r1, r2, lr}
 8015e9a:	4b04      	ldr	r3, [pc, #16]	@ (8015eac <getenv+0x14>)
 8015e9c:	4601      	mov	r1, r0
 8015e9e:	aa01      	add	r2, sp, #4
 8015ea0:	6818      	ldr	r0, [r3, #0]
 8015ea2:	f000 f805 	bl	8015eb0 <_findenv_r>
 8015ea6:	b003      	add	sp, #12
 8015ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015eac:	200002b4 	.word	0x200002b4

08015eb0 <_findenv_r>:
 8015eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015f24 <_findenv_r+0x74>
 8015eb8:	4606      	mov	r6, r0
 8015eba:	4689      	mov	r9, r1
 8015ebc:	4617      	mov	r7, r2
 8015ebe:	f000 fc9d 	bl	80167fc <__env_lock>
 8015ec2:	f8da 4000 	ldr.w	r4, [sl]
 8015ec6:	b134      	cbz	r4, 8015ed6 <_findenv_r+0x26>
 8015ec8:	464b      	mov	r3, r9
 8015eca:	4698      	mov	r8, r3
 8015ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ed0:	b13a      	cbz	r2, 8015ee2 <_findenv_r+0x32>
 8015ed2:	2a3d      	cmp	r2, #61	@ 0x3d
 8015ed4:	d1f9      	bne.n	8015eca <_findenv_r+0x1a>
 8015ed6:	4630      	mov	r0, r6
 8015ed8:	f000 fc96 	bl	8016808 <__env_unlock>
 8015edc:	2000      	movs	r0, #0
 8015ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee2:	eba8 0809 	sub.w	r8, r8, r9
 8015ee6:	46a3      	mov	fp, r4
 8015ee8:	f854 0b04 	ldr.w	r0, [r4], #4
 8015eec:	2800      	cmp	r0, #0
 8015eee:	d0f2      	beq.n	8015ed6 <_findenv_r+0x26>
 8015ef0:	4642      	mov	r2, r8
 8015ef2:	4649      	mov	r1, r9
 8015ef4:	f000 fba1 	bl	801663a <strncmp>
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d1f4      	bne.n	8015ee6 <_findenv_r+0x36>
 8015efc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015f00:	eb03 0508 	add.w	r5, r3, r8
 8015f04:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015f08:	2b3d      	cmp	r3, #61	@ 0x3d
 8015f0a:	d1ec      	bne.n	8015ee6 <_findenv_r+0x36>
 8015f0c:	f8da 3000 	ldr.w	r3, [sl]
 8015f10:	ebab 0303 	sub.w	r3, fp, r3
 8015f14:	109b      	asrs	r3, r3, #2
 8015f16:	4630      	mov	r0, r6
 8015f18:	603b      	str	r3, [r7, #0]
 8015f1a:	f000 fc75 	bl	8016808 <__env_unlock>
 8015f1e:	1c68      	adds	r0, r5, #1
 8015f20:	e7dd      	b.n	8015ede <_findenv_r+0x2e>
 8015f22:	bf00      	nop
 8015f24:	20000044 	.word	0x20000044

08015f28 <malloc>:
 8015f28:	4b02      	ldr	r3, [pc, #8]	@ (8015f34 <malloc+0xc>)
 8015f2a:	4601      	mov	r1, r0
 8015f2c:	6818      	ldr	r0, [r3, #0]
 8015f2e:	f000 b82d 	b.w	8015f8c <_malloc_r>
 8015f32:	bf00      	nop
 8015f34:	200002b4 	.word	0x200002b4

08015f38 <free>:
 8015f38:	4b02      	ldr	r3, [pc, #8]	@ (8015f44 <free+0xc>)
 8015f3a:	4601      	mov	r1, r0
 8015f3c:	6818      	ldr	r0, [r3, #0]
 8015f3e:	f000 bc69 	b.w	8016814 <_free_r>
 8015f42:	bf00      	nop
 8015f44:	200002b4 	.word	0x200002b4

08015f48 <sbrk_aligned>:
 8015f48:	b570      	push	{r4, r5, r6, lr}
 8015f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8015f88 <sbrk_aligned+0x40>)
 8015f4c:	460c      	mov	r4, r1
 8015f4e:	6831      	ldr	r1, [r6, #0]
 8015f50:	4605      	mov	r5, r0
 8015f52:	b911      	cbnz	r1, 8015f5a <sbrk_aligned+0x12>
 8015f54:	f000 fbce 	bl	80166f4 <_sbrk_r>
 8015f58:	6030      	str	r0, [r6, #0]
 8015f5a:	4621      	mov	r1, r4
 8015f5c:	4628      	mov	r0, r5
 8015f5e:	f000 fbc9 	bl	80166f4 <_sbrk_r>
 8015f62:	1c43      	adds	r3, r0, #1
 8015f64:	d103      	bne.n	8015f6e <sbrk_aligned+0x26>
 8015f66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	1cc4      	adds	r4, r0, #3
 8015f70:	f024 0403 	bic.w	r4, r4, #3
 8015f74:	42a0      	cmp	r0, r4
 8015f76:	d0f8      	beq.n	8015f6a <sbrk_aligned+0x22>
 8015f78:	1a21      	subs	r1, r4, r0
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	f000 fbba 	bl	80166f4 <_sbrk_r>
 8015f80:	3001      	adds	r0, #1
 8015f82:	d1f2      	bne.n	8015f6a <sbrk_aligned+0x22>
 8015f84:	e7ef      	b.n	8015f66 <sbrk_aligned+0x1e>
 8015f86:	bf00      	nop
 8015f88:	2000de90 	.word	0x2000de90

08015f8c <_malloc_r>:
 8015f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f90:	1ccd      	adds	r5, r1, #3
 8015f92:	f025 0503 	bic.w	r5, r5, #3
 8015f96:	3508      	adds	r5, #8
 8015f98:	2d0c      	cmp	r5, #12
 8015f9a:	bf38      	it	cc
 8015f9c:	250c      	movcc	r5, #12
 8015f9e:	2d00      	cmp	r5, #0
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	db01      	blt.n	8015fa8 <_malloc_r+0x1c>
 8015fa4:	42a9      	cmp	r1, r5
 8015fa6:	d904      	bls.n	8015fb2 <_malloc_r+0x26>
 8015fa8:	230c      	movs	r3, #12
 8015faa:	6033      	str	r3, [r6, #0]
 8015fac:	2000      	movs	r0, #0
 8015fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016088 <_malloc_r+0xfc>
 8015fb6:	f000 f869 	bl	801608c <__malloc_lock>
 8015fba:	f8d8 3000 	ldr.w	r3, [r8]
 8015fbe:	461c      	mov	r4, r3
 8015fc0:	bb44      	cbnz	r4, 8016014 <_malloc_r+0x88>
 8015fc2:	4629      	mov	r1, r5
 8015fc4:	4630      	mov	r0, r6
 8015fc6:	f7ff ffbf 	bl	8015f48 <sbrk_aligned>
 8015fca:	1c43      	adds	r3, r0, #1
 8015fcc:	4604      	mov	r4, r0
 8015fce:	d158      	bne.n	8016082 <_malloc_r+0xf6>
 8015fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8015fd4:	4627      	mov	r7, r4
 8015fd6:	2f00      	cmp	r7, #0
 8015fd8:	d143      	bne.n	8016062 <_malloc_r+0xd6>
 8015fda:	2c00      	cmp	r4, #0
 8015fdc:	d04b      	beq.n	8016076 <_malloc_r+0xea>
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	4639      	mov	r1, r7
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	eb04 0903 	add.w	r9, r4, r3
 8015fe8:	f000 fb84 	bl	80166f4 <_sbrk_r>
 8015fec:	4581      	cmp	r9, r0
 8015fee:	d142      	bne.n	8016076 <_malloc_r+0xea>
 8015ff0:	6821      	ldr	r1, [r4, #0]
 8015ff2:	1a6d      	subs	r5, r5, r1
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	4630      	mov	r0, r6
 8015ff8:	f7ff ffa6 	bl	8015f48 <sbrk_aligned>
 8015ffc:	3001      	adds	r0, #1
 8015ffe:	d03a      	beq.n	8016076 <_malloc_r+0xea>
 8016000:	6823      	ldr	r3, [r4, #0]
 8016002:	442b      	add	r3, r5
 8016004:	6023      	str	r3, [r4, #0]
 8016006:	f8d8 3000 	ldr.w	r3, [r8]
 801600a:	685a      	ldr	r2, [r3, #4]
 801600c:	bb62      	cbnz	r2, 8016068 <_malloc_r+0xdc>
 801600e:	f8c8 7000 	str.w	r7, [r8]
 8016012:	e00f      	b.n	8016034 <_malloc_r+0xa8>
 8016014:	6822      	ldr	r2, [r4, #0]
 8016016:	1b52      	subs	r2, r2, r5
 8016018:	d420      	bmi.n	801605c <_malloc_r+0xd0>
 801601a:	2a0b      	cmp	r2, #11
 801601c:	d917      	bls.n	801604e <_malloc_r+0xc2>
 801601e:	1961      	adds	r1, r4, r5
 8016020:	42a3      	cmp	r3, r4
 8016022:	6025      	str	r5, [r4, #0]
 8016024:	bf18      	it	ne
 8016026:	6059      	strne	r1, [r3, #4]
 8016028:	6863      	ldr	r3, [r4, #4]
 801602a:	bf08      	it	eq
 801602c:	f8c8 1000 	streq.w	r1, [r8]
 8016030:	5162      	str	r2, [r4, r5]
 8016032:	604b      	str	r3, [r1, #4]
 8016034:	4630      	mov	r0, r6
 8016036:	f000 f82f 	bl	8016098 <__malloc_unlock>
 801603a:	f104 000b 	add.w	r0, r4, #11
 801603e:	1d23      	adds	r3, r4, #4
 8016040:	f020 0007 	bic.w	r0, r0, #7
 8016044:	1ac2      	subs	r2, r0, r3
 8016046:	bf1c      	itt	ne
 8016048:	1a1b      	subne	r3, r3, r0
 801604a:	50a3      	strne	r3, [r4, r2]
 801604c:	e7af      	b.n	8015fae <_malloc_r+0x22>
 801604e:	6862      	ldr	r2, [r4, #4]
 8016050:	42a3      	cmp	r3, r4
 8016052:	bf0c      	ite	eq
 8016054:	f8c8 2000 	streq.w	r2, [r8]
 8016058:	605a      	strne	r2, [r3, #4]
 801605a:	e7eb      	b.n	8016034 <_malloc_r+0xa8>
 801605c:	4623      	mov	r3, r4
 801605e:	6864      	ldr	r4, [r4, #4]
 8016060:	e7ae      	b.n	8015fc0 <_malloc_r+0x34>
 8016062:	463c      	mov	r4, r7
 8016064:	687f      	ldr	r7, [r7, #4]
 8016066:	e7b6      	b.n	8015fd6 <_malloc_r+0x4a>
 8016068:	461a      	mov	r2, r3
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	42a3      	cmp	r3, r4
 801606e:	d1fb      	bne.n	8016068 <_malloc_r+0xdc>
 8016070:	2300      	movs	r3, #0
 8016072:	6053      	str	r3, [r2, #4]
 8016074:	e7de      	b.n	8016034 <_malloc_r+0xa8>
 8016076:	230c      	movs	r3, #12
 8016078:	6033      	str	r3, [r6, #0]
 801607a:	4630      	mov	r0, r6
 801607c:	f000 f80c 	bl	8016098 <__malloc_unlock>
 8016080:	e794      	b.n	8015fac <_malloc_r+0x20>
 8016082:	6005      	str	r5, [r0, #0]
 8016084:	e7d6      	b.n	8016034 <_malloc_r+0xa8>
 8016086:	bf00      	nop
 8016088:	2000de94 	.word	0x2000de94

0801608c <__malloc_lock>:
 801608c:	4801      	ldr	r0, [pc, #4]	@ (8016094 <__malloc_lock+0x8>)
 801608e:	f000 bb7e 	b.w	801678e <__retarget_lock_acquire_recursive>
 8016092:	bf00      	nop
 8016094:	2000dfd9 	.word	0x2000dfd9

08016098 <__malloc_unlock>:
 8016098:	4801      	ldr	r0, [pc, #4]	@ (80160a0 <__malloc_unlock+0x8>)
 801609a:	f000 bb79 	b.w	8016790 <__retarget_lock_release_recursive>
 801609e:	bf00      	nop
 80160a0:	2000dfd9 	.word	0x2000dfd9

080160a4 <srand>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	4b10      	ldr	r3, [pc, #64]	@ (80160e8 <srand+0x44>)
 80160a8:	681d      	ldr	r5, [r3, #0]
 80160aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80160ac:	4604      	mov	r4, r0
 80160ae:	b9b3      	cbnz	r3, 80160de <srand+0x3a>
 80160b0:	2018      	movs	r0, #24
 80160b2:	f7ff ff39 	bl	8015f28 <malloc>
 80160b6:	4602      	mov	r2, r0
 80160b8:	6328      	str	r0, [r5, #48]	@ 0x30
 80160ba:	b920      	cbnz	r0, 80160c6 <srand+0x22>
 80160bc:	4b0b      	ldr	r3, [pc, #44]	@ (80160ec <srand+0x48>)
 80160be:	480c      	ldr	r0, [pc, #48]	@ (80160f0 <srand+0x4c>)
 80160c0:	2146      	movs	r1, #70	@ 0x46
 80160c2:	f000 fb7d 	bl	80167c0 <__assert_func>
 80160c6:	490b      	ldr	r1, [pc, #44]	@ (80160f4 <srand+0x50>)
 80160c8:	4b0b      	ldr	r3, [pc, #44]	@ (80160f8 <srand+0x54>)
 80160ca:	e9c0 1300 	strd	r1, r3, [r0]
 80160ce:	4b0b      	ldr	r3, [pc, #44]	@ (80160fc <srand+0x58>)
 80160d0:	6083      	str	r3, [r0, #8]
 80160d2:	230b      	movs	r3, #11
 80160d4:	8183      	strh	r3, [r0, #12]
 80160d6:	2100      	movs	r1, #0
 80160d8:	2001      	movs	r0, #1
 80160da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80160de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80160e0:	2200      	movs	r2, #0
 80160e2:	611c      	str	r4, [r3, #16]
 80160e4:	615a      	str	r2, [r3, #20]
 80160e6:	bd38      	pop	{r3, r4, r5, pc}
 80160e8:	200002b4 	.word	0x200002b4
 80160ec:	080181d4 	.word	0x080181d4
 80160f0:	080181eb 	.word	0x080181eb
 80160f4:	abcd330e 	.word	0xabcd330e
 80160f8:	e66d1234 	.word	0xe66d1234
 80160fc:	0005deec 	.word	0x0005deec

08016100 <rand>:
 8016100:	4b16      	ldr	r3, [pc, #88]	@ (801615c <rand+0x5c>)
 8016102:	b510      	push	{r4, lr}
 8016104:	681c      	ldr	r4, [r3, #0]
 8016106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016108:	b9b3      	cbnz	r3, 8016138 <rand+0x38>
 801610a:	2018      	movs	r0, #24
 801610c:	f7ff ff0c 	bl	8015f28 <malloc>
 8016110:	4602      	mov	r2, r0
 8016112:	6320      	str	r0, [r4, #48]	@ 0x30
 8016114:	b920      	cbnz	r0, 8016120 <rand+0x20>
 8016116:	4b12      	ldr	r3, [pc, #72]	@ (8016160 <rand+0x60>)
 8016118:	4812      	ldr	r0, [pc, #72]	@ (8016164 <rand+0x64>)
 801611a:	2152      	movs	r1, #82	@ 0x52
 801611c:	f000 fb50 	bl	80167c0 <__assert_func>
 8016120:	4911      	ldr	r1, [pc, #68]	@ (8016168 <rand+0x68>)
 8016122:	4b12      	ldr	r3, [pc, #72]	@ (801616c <rand+0x6c>)
 8016124:	e9c0 1300 	strd	r1, r3, [r0]
 8016128:	4b11      	ldr	r3, [pc, #68]	@ (8016170 <rand+0x70>)
 801612a:	6083      	str	r3, [r0, #8]
 801612c:	230b      	movs	r3, #11
 801612e:	8183      	strh	r3, [r0, #12]
 8016130:	2100      	movs	r1, #0
 8016132:	2001      	movs	r0, #1
 8016134:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801613a:	480e      	ldr	r0, [pc, #56]	@ (8016174 <rand+0x74>)
 801613c:	690b      	ldr	r3, [r1, #16]
 801613e:	694c      	ldr	r4, [r1, #20]
 8016140:	4a0d      	ldr	r2, [pc, #52]	@ (8016178 <rand+0x78>)
 8016142:	4358      	muls	r0, r3
 8016144:	fb02 0004 	mla	r0, r2, r4, r0
 8016148:	fba3 3202 	umull	r3, r2, r3, r2
 801614c:	3301      	adds	r3, #1
 801614e:	eb40 0002 	adc.w	r0, r0, r2
 8016152:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016156:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801615a:	bd10      	pop	{r4, pc}
 801615c:	200002b4 	.word	0x200002b4
 8016160:	080181d4 	.word	0x080181d4
 8016164:	080181eb 	.word	0x080181eb
 8016168:	abcd330e 	.word	0xabcd330e
 801616c:	e66d1234 	.word	0xe66d1234
 8016170:	0005deec 	.word	0x0005deec
 8016174:	5851f42d 	.word	0x5851f42d
 8016178:	4c957f2d 	.word	0x4c957f2d

0801617c <realloc>:
 801617c:	4b02      	ldr	r3, [pc, #8]	@ (8016188 <realloc+0xc>)
 801617e:	460a      	mov	r2, r1
 8016180:	4601      	mov	r1, r0
 8016182:	6818      	ldr	r0, [r3, #0]
 8016184:	f000 b802 	b.w	801618c <_realloc_r>
 8016188:	200002b4 	.word	0x200002b4

0801618c <_realloc_r>:
 801618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016190:	4680      	mov	r8, r0
 8016192:	4615      	mov	r5, r2
 8016194:	460c      	mov	r4, r1
 8016196:	b921      	cbnz	r1, 80161a2 <_realloc_r+0x16>
 8016198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801619c:	4611      	mov	r1, r2
 801619e:	f7ff bef5 	b.w	8015f8c <_malloc_r>
 80161a2:	b92a      	cbnz	r2, 80161b0 <_realloc_r+0x24>
 80161a4:	f000 fb36 	bl	8016814 <_free_r>
 80161a8:	2400      	movs	r4, #0
 80161aa:	4620      	mov	r0, r4
 80161ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b0:	f000 fb7a 	bl	80168a8 <_malloc_usable_size_r>
 80161b4:	4285      	cmp	r5, r0
 80161b6:	4606      	mov	r6, r0
 80161b8:	d802      	bhi.n	80161c0 <_realloc_r+0x34>
 80161ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80161be:	d8f4      	bhi.n	80161aa <_realloc_r+0x1e>
 80161c0:	4629      	mov	r1, r5
 80161c2:	4640      	mov	r0, r8
 80161c4:	f7ff fee2 	bl	8015f8c <_malloc_r>
 80161c8:	4607      	mov	r7, r0
 80161ca:	2800      	cmp	r0, #0
 80161cc:	d0ec      	beq.n	80161a8 <_realloc_r+0x1c>
 80161ce:	42b5      	cmp	r5, r6
 80161d0:	462a      	mov	r2, r5
 80161d2:	4621      	mov	r1, r4
 80161d4:	bf28      	it	cs
 80161d6:	4632      	movcs	r2, r6
 80161d8:	f000 fae3 	bl	80167a2 <memcpy>
 80161dc:	4621      	mov	r1, r4
 80161de:	4640      	mov	r0, r8
 80161e0:	f000 fb18 	bl	8016814 <_free_r>
 80161e4:	463c      	mov	r4, r7
 80161e6:	e7e0      	b.n	80161aa <_realloc_r+0x1e>

080161e8 <_strtoul_l.constprop.0>:
 80161e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161ec:	4e34      	ldr	r6, [pc, #208]	@ (80162c0 <_strtoul_l.constprop.0+0xd8>)
 80161ee:	4686      	mov	lr, r0
 80161f0:	460d      	mov	r5, r1
 80161f2:	4628      	mov	r0, r5
 80161f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161f8:	5d37      	ldrb	r7, [r6, r4]
 80161fa:	f017 0708 	ands.w	r7, r7, #8
 80161fe:	d1f8      	bne.n	80161f2 <_strtoul_l.constprop.0+0xa>
 8016200:	2c2d      	cmp	r4, #45	@ 0x2d
 8016202:	d12f      	bne.n	8016264 <_strtoul_l.constprop.0+0x7c>
 8016204:	782c      	ldrb	r4, [r5, #0]
 8016206:	2701      	movs	r7, #1
 8016208:	1c85      	adds	r5, r0, #2
 801620a:	f033 0010 	bics.w	r0, r3, #16
 801620e:	d109      	bne.n	8016224 <_strtoul_l.constprop.0+0x3c>
 8016210:	2c30      	cmp	r4, #48	@ 0x30
 8016212:	d12c      	bne.n	801626e <_strtoul_l.constprop.0+0x86>
 8016214:	7828      	ldrb	r0, [r5, #0]
 8016216:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801621a:	2858      	cmp	r0, #88	@ 0x58
 801621c:	d127      	bne.n	801626e <_strtoul_l.constprop.0+0x86>
 801621e:	786c      	ldrb	r4, [r5, #1]
 8016220:	2310      	movs	r3, #16
 8016222:	3502      	adds	r5, #2
 8016224:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016228:	2600      	movs	r6, #0
 801622a:	fbb8 f8f3 	udiv	r8, r8, r3
 801622e:	fb03 f908 	mul.w	r9, r3, r8
 8016232:	ea6f 0909 	mvn.w	r9, r9
 8016236:	4630      	mov	r0, r6
 8016238:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801623c:	f1bc 0f09 	cmp.w	ip, #9
 8016240:	d81c      	bhi.n	801627c <_strtoul_l.constprop.0+0x94>
 8016242:	4664      	mov	r4, ip
 8016244:	42a3      	cmp	r3, r4
 8016246:	dd2a      	ble.n	801629e <_strtoul_l.constprop.0+0xb6>
 8016248:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801624c:	d007      	beq.n	801625e <_strtoul_l.constprop.0+0x76>
 801624e:	4580      	cmp	r8, r0
 8016250:	d322      	bcc.n	8016298 <_strtoul_l.constprop.0+0xb0>
 8016252:	d101      	bne.n	8016258 <_strtoul_l.constprop.0+0x70>
 8016254:	45a1      	cmp	r9, r4
 8016256:	db1f      	blt.n	8016298 <_strtoul_l.constprop.0+0xb0>
 8016258:	fb00 4003 	mla	r0, r0, r3, r4
 801625c:	2601      	movs	r6, #1
 801625e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016262:	e7e9      	b.n	8016238 <_strtoul_l.constprop.0+0x50>
 8016264:	2c2b      	cmp	r4, #43	@ 0x2b
 8016266:	bf04      	itt	eq
 8016268:	782c      	ldrbeq	r4, [r5, #0]
 801626a:	1c85      	addeq	r5, r0, #2
 801626c:	e7cd      	b.n	801620a <_strtoul_l.constprop.0+0x22>
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1d8      	bne.n	8016224 <_strtoul_l.constprop.0+0x3c>
 8016272:	2c30      	cmp	r4, #48	@ 0x30
 8016274:	bf0c      	ite	eq
 8016276:	2308      	moveq	r3, #8
 8016278:	230a      	movne	r3, #10
 801627a:	e7d3      	b.n	8016224 <_strtoul_l.constprop.0+0x3c>
 801627c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016280:	f1bc 0f19 	cmp.w	ip, #25
 8016284:	d801      	bhi.n	801628a <_strtoul_l.constprop.0+0xa2>
 8016286:	3c37      	subs	r4, #55	@ 0x37
 8016288:	e7dc      	b.n	8016244 <_strtoul_l.constprop.0+0x5c>
 801628a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801628e:	f1bc 0f19 	cmp.w	ip, #25
 8016292:	d804      	bhi.n	801629e <_strtoul_l.constprop.0+0xb6>
 8016294:	3c57      	subs	r4, #87	@ 0x57
 8016296:	e7d5      	b.n	8016244 <_strtoul_l.constprop.0+0x5c>
 8016298:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801629c:	e7df      	b.n	801625e <_strtoul_l.constprop.0+0x76>
 801629e:	1c73      	adds	r3, r6, #1
 80162a0:	d106      	bne.n	80162b0 <_strtoul_l.constprop.0+0xc8>
 80162a2:	2322      	movs	r3, #34	@ 0x22
 80162a4:	f8ce 3000 	str.w	r3, [lr]
 80162a8:	4630      	mov	r0, r6
 80162aa:	b932      	cbnz	r2, 80162ba <_strtoul_l.constprop.0+0xd2>
 80162ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162b0:	b107      	cbz	r7, 80162b4 <_strtoul_l.constprop.0+0xcc>
 80162b2:	4240      	negs	r0, r0
 80162b4:	2a00      	cmp	r2, #0
 80162b6:	d0f9      	beq.n	80162ac <_strtoul_l.constprop.0+0xc4>
 80162b8:	b106      	cbz	r6, 80162bc <_strtoul_l.constprop.0+0xd4>
 80162ba:	1e69      	subs	r1, r5, #1
 80162bc:	6011      	str	r1, [r2, #0]
 80162be:	e7f5      	b.n	80162ac <_strtoul_l.constprop.0+0xc4>
 80162c0:	08018244 	.word	0x08018244

080162c4 <strtoul>:
 80162c4:	4613      	mov	r3, r2
 80162c6:	460a      	mov	r2, r1
 80162c8:	4601      	mov	r1, r0
 80162ca:	4802      	ldr	r0, [pc, #8]	@ (80162d4 <strtoul+0x10>)
 80162cc:	6800      	ldr	r0, [r0, #0]
 80162ce:	f7ff bf8b 	b.w	80161e8 <_strtoul_l.constprop.0>
 80162d2:	bf00      	nop
 80162d4:	200002b4 	.word	0x200002b4

080162d8 <std>:
 80162d8:	2300      	movs	r3, #0
 80162da:	b510      	push	{r4, lr}
 80162dc:	4604      	mov	r4, r0
 80162de:	e9c0 3300 	strd	r3, r3, [r0]
 80162e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162e6:	6083      	str	r3, [r0, #8]
 80162e8:	8181      	strh	r1, [r0, #12]
 80162ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80162ec:	81c2      	strh	r2, [r0, #14]
 80162ee:	6183      	str	r3, [r0, #24]
 80162f0:	4619      	mov	r1, r3
 80162f2:	2208      	movs	r2, #8
 80162f4:	305c      	adds	r0, #92	@ 0x5c
 80162f6:	f000 f98b 	bl	8016610 <memset>
 80162fa:	4b0d      	ldr	r3, [pc, #52]	@ (8016330 <std+0x58>)
 80162fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80162fe:	4b0d      	ldr	r3, [pc, #52]	@ (8016334 <std+0x5c>)
 8016300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016302:	4b0d      	ldr	r3, [pc, #52]	@ (8016338 <std+0x60>)
 8016304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016306:	4b0d      	ldr	r3, [pc, #52]	@ (801633c <std+0x64>)
 8016308:	6323      	str	r3, [r4, #48]	@ 0x30
 801630a:	4b0d      	ldr	r3, [pc, #52]	@ (8016340 <std+0x68>)
 801630c:	6224      	str	r4, [r4, #32]
 801630e:	429c      	cmp	r4, r3
 8016310:	d006      	beq.n	8016320 <std+0x48>
 8016312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016316:	4294      	cmp	r4, r2
 8016318:	d002      	beq.n	8016320 <std+0x48>
 801631a:	33d0      	adds	r3, #208	@ 0xd0
 801631c:	429c      	cmp	r4, r3
 801631e:	d105      	bne.n	801632c <std+0x54>
 8016320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016328:	f000 ba30 	b.w	801678c <__retarget_lock_init_recursive>
 801632c:	bd10      	pop	{r4, pc}
 801632e:	bf00      	nop
 8016330:	080164c5 	.word	0x080164c5
 8016334:	080164e7 	.word	0x080164e7
 8016338:	0801651f 	.word	0x0801651f
 801633c:	08016543 	.word	0x08016543
 8016340:	2000de98 	.word	0x2000de98

08016344 <stdio_exit_handler>:
 8016344:	4a02      	ldr	r2, [pc, #8]	@ (8016350 <stdio_exit_handler+0xc>)
 8016346:	4903      	ldr	r1, [pc, #12]	@ (8016354 <stdio_exit_handler+0x10>)
 8016348:	4803      	ldr	r0, [pc, #12]	@ (8016358 <stdio_exit_handler+0x14>)
 801634a:	f000 b869 	b.w	8016420 <_fwalk_sglue>
 801634e:	bf00      	nop
 8016350:	200002a8 	.word	0x200002a8
 8016354:	08016f8d 	.word	0x08016f8d
 8016358:	200002b8 	.word	0x200002b8

0801635c <cleanup_stdio>:
 801635c:	6841      	ldr	r1, [r0, #4]
 801635e:	4b0c      	ldr	r3, [pc, #48]	@ (8016390 <cleanup_stdio+0x34>)
 8016360:	4299      	cmp	r1, r3
 8016362:	b510      	push	{r4, lr}
 8016364:	4604      	mov	r4, r0
 8016366:	d001      	beq.n	801636c <cleanup_stdio+0x10>
 8016368:	f000 fe10 	bl	8016f8c <_fflush_r>
 801636c:	68a1      	ldr	r1, [r4, #8]
 801636e:	4b09      	ldr	r3, [pc, #36]	@ (8016394 <cleanup_stdio+0x38>)
 8016370:	4299      	cmp	r1, r3
 8016372:	d002      	beq.n	801637a <cleanup_stdio+0x1e>
 8016374:	4620      	mov	r0, r4
 8016376:	f000 fe09 	bl	8016f8c <_fflush_r>
 801637a:	68e1      	ldr	r1, [r4, #12]
 801637c:	4b06      	ldr	r3, [pc, #24]	@ (8016398 <cleanup_stdio+0x3c>)
 801637e:	4299      	cmp	r1, r3
 8016380:	d004      	beq.n	801638c <cleanup_stdio+0x30>
 8016382:	4620      	mov	r0, r4
 8016384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016388:	f000 be00 	b.w	8016f8c <_fflush_r>
 801638c:	bd10      	pop	{r4, pc}
 801638e:	bf00      	nop
 8016390:	2000de98 	.word	0x2000de98
 8016394:	2000df00 	.word	0x2000df00
 8016398:	2000df68 	.word	0x2000df68

0801639c <global_stdio_init.part.0>:
 801639c:	b510      	push	{r4, lr}
 801639e:	4b0b      	ldr	r3, [pc, #44]	@ (80163cc <global_stdio_init.part.0+0x30>)
 80163a0:	4c0b      	ldr	r4, [pc, #44]	@ (80163d0 <global_stdio_init.part.0+0x34>)
 80163a2:	4a0c      	ldr	r2, [pc, #48]	@ (80163d4 <global_stdio_init.part.0+0x38>)
 80163a4:	601a      	str	r2, [r3, #0]
 80163a6:	4620      	mov	r0, r4
 80163a8:	2200      	movs	r2, #0
 80163aa:	2104      	movs	r1, #4
 80163ac:	f7ff ff94 	bl	80162d8 <std>
 80163b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80163b4:	2201      	movs	r2, #1
 80163b6:	2109      	movs	r1, #9
 80163b8:	f7ff ff8e 	bl	80162d8 <std>
 80163bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80163c0:	2202      	movs	r2, #2
 80163c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c6:	2112      	movs	r1, #18
 80163c8:	f7ff bf86 	b.w	80162d8 <std>
 80163cc:	2000dfd0 	.word	0x2000dfd0
 80163d0:	2000de98 	.word	0x2000de98
 80163d4:	08016345 	.word	0x08016345

080163d8 <__sfp_lock_acquire>:
 80163d8:	4801      	ldr	r0, [pc, #4]	@ (80163e0 <__sfp_lock_acquire+0x8>)
 80163da:	f000 b9d8 	b.w	801678e <__retarget_lock_acquire_recursive>
 80163de:	bf00      	nop
 80163e0:	2000dfda 	.word	0x2000dfda

080163e4 <__sfp_lock_release>:
 80163e4:	4801      	ldr	r0, [pc, #4]	@ (80163ec <__sfp_lock_release+0x8>)
 80163e6:	f000 b9d3 	b.w	8016790 <__retarget_lock_release_recursive>
 80163ea:	bf00      	nop
 80163ec:	2000dfda 	.word	0x2000dfda

080163f0 <__sinit>:
 80163f0:	b510      	push	{r4, lr}
 80163f2:	4604      	mov	r4, r0
 80163f4:	f7ff fff0 	bl	80163d8 <__sfp_lock_acquire>
 80163f8:	6a23      	ldr	r3, [r4, #32]
 80163fa:	b11b      	cbz	r3, 8016404 <__sinit+0x14>
 80163fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016400:	f7ff bff0 	b.w	80163e4 <__sfp_lock_release>
 8016404:	4b04      	ldr	r3, [pc, #16]	@ (8016418 <__sinit+0x28>)
 8016406:	6223      	str	r3, [r4, #32]
 8016408:	4b04      	ldr	r3, [pc, #16]	@ (801641c <__sinit+0x2c>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d1f5      	bne.n	80163fc <__sinit+0xc>
 8016410:	f7ff ffc4 	bl	801639c <global_stdio_init.part.0>
 8016414:	e7f2      	b.n	80163fc <__sinit+0xc>
 8016416:	bf00      	nop
 8016418:	0801635d 	.word	0x0801635d
 801641c:	2000dfd0 	.word	0x2000dfd0

08016420 <_fwalk_sglue>:
 8016420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016424:	4607      	mov	r7, r0
 8016426:	4688      	mov	r8, r1
 8016428:	4614      	mov	r4, r2
 801642a:	2600      	movs	r6, #0
 801642c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016430:	f1b9 0901 	subs.w	r9, r9, #1
 8016434:	d505      	bpl.n	8016442 <_fwalk_sglue+0x22>
 8016436:	6824      	ldr	r4, [r4, #0]
 8016438:	2c00      	cmp	r4, #0
 801643a:	d1f7      	bne.n	801642c <_fwalk_sglue+0xc>
 801643c:	4630      	mov	r0, r6
 801643e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016442:	89ab      	ldrh	r3, [r5, #12]
 8016444:	2b01      	cmp	r3, #1
 8016446:	d907      	bls.n	8016458 <_fwalk_sglue+0x38>
 8016448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801644c:	3301      	adds	r3, #1
 801644e:	d003      	beq.n	8016458 <_fwalk_sglue+0x38>
 8016450:	4629      	mov	r1, r5
 8016452:	4638      	mov	r0, r7
 8016454:	47c0      	blx	r8
 8016456:	4306      	orrs	r6, r0
 8016458:	3568      	adds	r5, #104	@ 0x68
 801645a:	e7e9      	b.n	8016430 <_fwalk_sglue+0x10>

0801645c <sniprintf>:
 801645c:	b40c      	push	{r2, r3}
 801645e:	b530      	push	{r4, r5, lr}
 8016460:	4b17      	ldr	r3, [pc, #92]	@ (80164c0 <sniprintf+0x64>)
 8016462:	1e0c      	subs	r4, r1, #0
 8016464:	681d      	ldr	r5, [r3, #0]
 8016466:	b09d      	sub	sp, #116	@ 0x74
 8016468:	da08      	bge.n	801647c <sniprintf+0x20>
 801646a:	238b      	movs	r3, #139	@ 0x8b
 801646c:	602b      	str	r3, [r5, #0]
 801646e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016472:	b01d      	add	sp, #116	@ 0x74
 8016474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016478:	b002      	add	sp, #8
 801647a:	4770      	bx	lr
 801647c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016480:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016484:	bf14      	ite	ne
 8016486:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801648a:	4623      	moveq	r3, r4
 801648c:	9304      	str	r3, [sp, #16]
 801648e:	9307      	str	r3, [sp, #28]
 8016490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016494:	9002      	str	r0, [sp, #8]
 8016496:	9006      	str	r0, [sp, #24]
 8016498:	f8ad 3016 	strh.w	r3, [sp, #22]
 801649c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801649e:	ab21      	add	r3, sp, #132	@ 0x84
 80164a0:	a902      	add	r1, sp, #8
 80164a2:	4628      	mov	r0, r5
 80164a4:	9301      	str	r3, [sp, #4]
 80164a6:	f000 fa63 	bl	8016970 <_svfiprintf_r>
 80164aa:	1c43      	adds	r3, r0, #1
 80164ac:	bfbc      	itt	lt
 80164ae:	238b      	movlt	r3, #139	@ 0x8b
 80164b0:	602b      	strlt	r3, [r5, #0]
 80164b2:	2c00      	cmp	r4, #0
 80164b4:	d0dd      	beq.n	8016472 <sniprintf+0x16>
 80164b6:	9b02      	ldr	r3, [sp, #8]
 80164b8:	2200      	movs	r2, #0
 80164ba:	701a      	strb	r2, [r3, #0]
 80164bc:	e7d9      	b.n	8016472 <sniprintf+0x16>
 80164be:	bf00      	nop
 80164c0:	200002b4 	.word	0x200002b4

080164c4 <__sread>:
 80164c4:	b510      	push	{r4, lr}
 80164c6:	460c      	mov	r4, r1
 80164c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164cc:	f000 f900 	bl	80166d0 <_read_r>
 80164d0:	2800      	cmp	r0, #0
 80164d2:	bfab      	itete	ge
 80164d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80164d6:	89a3      	ldrhlt	r3, [r4, #12]
 80164d8:	181b      	addge	r3, r3, r0
 80164da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80164de:	bfac      	ite	ge
 80164e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80164e2:	81a3      	strhlt	r3, [r4, #12]
 80164e4:	bd10      	pop	{r4, pc}

080164e6 <__swrite>:
 80164e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164ea:	461f      	mov	r7, r3
 80164ec:	898b      	ldrh	r3, [r1, #12]
 80164ee:	05db      	lsls	r3, r3, #23
 80164f0:	4605      	mov	r5, r0
 80164f2:	460c      	mov	r4, r1
 80164f4:	4616      	mov	r6, r2
 80164f6:	d505      	bpl.n	8016504 <__swrite+0x1e>
 80164f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164fc:	2302      	movs	r3, #2
 80164fe:	2200      	movs	r2, #0
 8016500:	f000 f8d4 	bl	80166ac <_lseek_r>
 8016504:	89a3      	ldrh	r3, [r4, #12]
 8016506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801650a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801650e:	81a3      	strh	r3, [r4, #12]
 8016510:	4632      	mov	r2, r6
 8016512:	463b      	mov	r3, r7
 8016514:	4628      	mov	r0, r5
 8016516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801651a:	f000 b8fb 	b.w	8016714 <_write_r>

0801651e <__sseek>:
 801651e:	b510      	push	{r4, lr}
 8016520:	460c      	mov	r4, r1
 8016522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016526:	f000 f8c1 	bl	80166ac <_lseek_r>
 801652a:	1c43      	adds	r3, r0, #1
 801652c:	89a3      	ldrh	r3, [r4, #12]
 801652e:	bf15      	itete	ne
 8016530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801653a:	81a3      	strheq	r3, [r4, #12]
 801653c:	bf18      	it	ne
 801653e:	81a3      	strhne	r3, [r4, #12]
 8016540:	bd10      	pop	{r4, pc}

08016542 <__sclose>:
 8016542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016546:	f000 b8a1 	b.w	801668c <_close_r>

0801654a <_vsniprintf_r>:
 801654a:	b530      	push	{r4, r5, lr}
 801654c:	4614      	mov	r4, r2
 801654e:	2c00      	cmp	r4, #0
 8016550:	b09b      	sub	sp, #108	@ 0x6c
 8016552:	4605      	mov	r5, r0
 8016554:	461a      	mov	r2, r3
 8016556:	da05      	bge.n	8016564 <_vsniprintf_r+0x1a>
 8016558:	238b      	movs	r3, #139	@ 0x8b
 801655a:	6003      	str	r3, [r0, #0]
 801655c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016560:	b01b      	add	sp, #108	@ 0x6c
 8016562:	bd30      	pop	{r4, r5, pc}
 8016564:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016568:	f8ad 300c 	strh.w	r3, [sp, #12]
 801656c:	bf14      	ite	ne
 801656e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016572:	4623      	moveq	r3, r4
 8016574:	9302      	str	r3, [sp, #8]
 8016576:	9305      	str	r3, [sp, #20]
 8016578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801657c:	9100      	str	r1, [sp, #0]
 801657e:	9104      	str	r1, [sp, #16]
 8016580:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016584:	4669      	mov	r1, sp
 8016586:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016588:	f000 f9f2 	bl	8016970 <_svfiprintf_r>
 801658c:	1c43      	adds	r3, r0, #1
 801658e:	bfbc      	itt	lt
 8016590:	238b      	movlt	r3, #139	@ 0x8b
 8016592:	602b      	strlt	r3, [r5, #0]
 8016594:	2c00      	cmp	r4, #0
 8016596:	d0e3      	beq.n	8016560 <_vsniprintf_r+0x16>
 8016598:	9b00      	ldr	r3, [sp, #0]
 801659a:	2200      	movs	r2, #0
 801659c:	701a      	strb	r2, [r3, #0]
 801659e:	e7df      	b.n	8016560 <_vsniprintf_r+0x16>

080165a0 <vsniprintf>:
 80165a0:	b507      	push	{r0, r1, r2, lr}
 80165a2:	9300      	str	r3, [sp, #0]
 80165a4:	4613      	mov	r3, r2
 80165a6:	460a      	mov	r2, r1
 80165a8:	4601      	mov	r1, r0
 80165aa:	4803      	ldr	r0, [pc, #12]	@ (80165b8 <vsniprintf+0x18>)
 80165ac:	6800      	ldr	r0, [r0, #0]
 80165ae:	f7ff ffcc 	bl	801654a <_vsniprintf_r>
 80165b2:	b003      	add	sp, #12
 80165b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80165b8:	200002b4 	.word	0x200002b4

080165bc <memcmp>:
 80165bc:	b510      	push	{r4, lr}
 80165be:	3901      	subs	r1, #1
 80165c0:	4402      	add	r2, r0
 80165c2:	4290      	cmp	r0, r2
 80165c4:	d101      	bne.n	80165ca <memcmp+0xe>
 80165c6:	2000      	movs	r0, #0
 80165c8:	e005      	b.n	80165d6 <memcmp+0x1a>
 80165ca:	7803      	ldrb	r3, [r0, #0]
 80165cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80165d0:	42a3      	cmp	r3, r4
 80165d2:	d001      	beq.n	80165d8 <memcmp+0x1c>
 80165d4:	1b18      	subs	r0, r3, r4
 80165d6:	bd10      	pop	{r4, pc}
 80165d8:	3001      	adds	r0, #1
 80165da:	e7f2      	b.n	80165c2 <memcmp+0x6>

080165dc <memmove>:
 80165dc:	4288      	cmp	r0, r1
 80165de:	b510      	push	{r4, lr}
 80165e0:	eb01 0402 	add.w	r4, r1, r2
 80165e4:	d902      	bls.n	80165ec <memmove+0x10>
 80165e6:	4284      	cmp	r4, r0
 80165e8:	4623      	mov	r3, r4
 80165ea:	d807      	bhi.n	80165fc <memmove+0x20>
 80165ec:	1e43      	subs	r3, r0, #1
 80165ee:	42a1      	cmp	r1, r4
 80165f0:	d008      	beq.n	8016604 <memmove+0x28>
 80165f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165fa:	e7f8      	b.n	80165ee <memmove+0x12>
 80165fc:	4402      	add	r2, r0
 80165fe:	4601      	mov	r1, r0
 8016600:	428a      	cmp	r2, r1
 8016602:	d100      	bne.n	8016606 <memmove+0x2a>
 8016604:	bd10      	pop	{r4, pc}
 8016606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801660a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801660e:	e7f7      	b.n	8016600 <memmove+0x24>

08016610 <memset>:
 8016610:	4402      	add	r2, r0
 8016612:	4603      	mov	r3, r0
 8016614:	4293      	cmp	r3, r2
 8016616:	d100      	bne.n	801661a <memset+0xa>
 8016618:	4770      	bx	lr
 801661a:	f803 1b01 	strb.w	r1, [r3], #1
 801661e:	e7f9      	b.n	8016614 <memset+0x4>

08016620 <strchr>:
 8016620:	b2c9      	uxtb	r1, r1
 8016622:	4603      	mov	r3, r0
 8016624:	4618      	mov	r0, r3
 8016626:	f813 2b01 	ldrb.w	r2, [r3], #1
 801662a:	b112      	cbz	r2, 8016632 <strchr+0x12>
 801662c:	428a      	cmp	r2, r1
 801662e:	d1f9      	bne.n	8016624 <strchr+0x4>
 8016630:	4770      	bx	lr
 8016632:	2900      	cmp	r1, #0
 8016634:	bf18      	it	ne
 8016636:	2000      	movne	r0, #0
 8016638:	4770      	bx	lr

0801663a <strncmp>:
 801663a:	b510      	push	{r4, lr}
 801663c:	b16a      	cbz	r2, 801665a <strncmp+0x20>
 801663e:	3901      	subs	r1, #1
 8016640:	1884      	adds	r4, r0, r2
 8016642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016646:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801664a:	429a      	cmp	r2, r3
 801664c:	d103      	bne.n	8016656 <strncmp+0x1c>
 801664e:	42a0      	cmp	r0, r4
 8016650:	d001      	beq.n	8016656 <strncmp+0x1c>
 8016652:	2a00      	cmp	r2, #0
 8016654:	d1f5      	bne.n	8016642 <strncmp+0x8>
 8016656:	1ad0      	subs	r0, r2, r3
 8016658:	bd10      	pop	{r4, pc}
 801665a:	4610      	mov	r0, r2
 801665c:	e7fc      	b.n	8016658 <strncmp+0x1e>

0801665e <strstr>:
 801665e:	780a      	ldrb	r2, [r1, #0]
 8016660:	b570      	push	{r4, r5, r6, lr}
 8016662:	b96a      	cbnz	r2, 8016680 <strstr+0x22>
 8016664:	bd70      	pop	{r4, r5, r6, pc}
 8016666:	429a      	cmp	r2, r3
 8016668:	d109      	bne.n	801667e <strstr+0x20>
 801666a:	460c      	mov	r4, r1
 801666c:	4605      	mov	r5, r0
 801666e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016672:	2b00      	cmp	r3, #0
 8016674:	d0f6      	beq.n	8016664 <strstr+0x6>
 8016676:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801667a:	429e      	cmp	r6, r3
 801667c:	d0f7      	beq.n	801666e <strstr+0x10>
 801667e:	3001      	adds	r0, #1
 8016680:	7803      	ldrb	r3, [r0, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d1ef      	bne.n	8016666 <strstr+0x8>
 8016686:	4618      	mov	r0, r3
 8016688:	e7ec      	b.n	8016664 <strstr+0x6>
	...

0801668c <_close_r>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4d06      	ldr	r5, [pc, #24]	@ (80166a8 <_close_r+0x1c>)
 8016690:	2300      	movs	r3, #0
 8016692:	4604      	mov	r4, r0
 8016694:	4608      	mov	r0, r1
 8016696:	602b      	str	r3, [r5, #0]
 8016698:	f7ec f928 	bl	80028ec <_close>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d102      	bne.n	80166a6 <_close_r+0x1a>
 80166a0:	682b      	ldr	r3, [r5, #0]
 80166a2:	b103      	cbz	r3, 80166a6 <_close_r+0x1a>
 80166a4:	6023      	str	r3, [r4, #0]
 80166a6:	bd38      	pop	{r3, r4, r5, pc}
 80166a8:	2000dfd4 	.word	0x2000dfd4

080166ac <_lseek_r>:
 80166ac:	b538      	push	{r3, r4, r5, lr}
 80166ae:	4d07      	ldr	r5, [pc, #28]	@ (80166cc <_lseek_r+0x20>)
 80166b0:	4604      	mov	r4, r0
 80166b2:	4608      	mov	r0, r1
 80166b4:	4611      	mov	r1, r2
 80166b6:	2200      	movs	r2, #0
 80166b8:	602a      	str	r2, [r5, #0]
 80166ba:	461a      	mov	r2, r3
 80166bc:	f7ec f93d 	bl	800293a <_lseek>
 80166c0:	1c43      	adds	r3, r0, #1
 80166c2:	d102      	bne.n	80166ca <_lseek_r+0x1e>
 80166c4:	682b      	ldr	r3, [r5, #0]
 80166c6:	b103      	cbz	r3, 80166ca <_lseek_r+0x1e>
 80166c8:	6023      	str	r3, [r4, #0]
 80166ca:	bd38      	pop	{r3, r4, r5, pc}
 80166cc:	2000dfd4 	.word	0x2000dfd4

080166d0 <_read_r>:
 80166d0:	b538      	push	{r3, r4, r5, lr}
 80166d2:	4d07      	ldr	r5, [pc, #28]	@ (80166f0 <_read_r+0x20>)
 80166d4:	4604      	mov	r4, r0
 80166d6:	4608      	mov	r0, r1
 80166d8:	4611      	mov	r1, r2
 80166da:	2200      	movs	r2, #0
 80166dc:	602a      	str	r2, [r5, #0]
 80166de:	461a      	mov	r2, r3
 80166e0:	f7ec f8cb 	bl	800287a <_read>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d102      	bne.n	80166ee <_read_r+0x1e>
 80166e8:	682b      	ldr	r3, [r5, #0]
 80166ea:	b103      	cbz	r3, 80166ee <_read_r+0x1e>
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	2000dfd4 	.word	0x2000dfd4

080166f4 <_sbrk_r>:
 80166f4:	b538      	push	{r3, r4, r5, lr}
 80166f6:	4d06      	ldr	r5, [pc, #24]	@ (8016710 <_sbrk_r+0x1c>)
 80166f8:	2300      	movs	r3, #0
 80166fa:	4604      	mov	r4, r0
 80166fc:	4608      	mov	r0, r1
 80166fe:	602b      	str	r3, [r5, #0]
 8016700:	f7ec f928 	bl	8002954 <_sbrk>
 8016704:	1c43      	adds	r3, r0, #1
 8016706:	d102      	bne.n	801670e <_sbrk_r+0x1a>
 8016708:	682b      	ldr	r3, [r5, #0]
 801670a:	b103      	cbz	r3, 801670e <_sbrk_r+0x1a>
 801670c:	6023      	str	r3, [r4, #0]
 801670e:	bd38      	pop	{r3, r4, r5, pc}
 8016710:	2000dfd4 	.word	0x2000dfd4

08016714 <_write_r>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4d07      	ldr	r5, [pc, #28]	@ (8016734 <_write_r+0x20>)
 8016718:	4604      	mov	r4, r0
 801671a:	4608      	mov	r0, r1
 801671c:	4611      	mov	r1, r2
 801671e:	2200      	movs	r2, #0
 8016720:	602a      	str	r2, [r5, #0]
 8016722:	461a      	mov	r2, r3
 8016724:	f7ec f8c6 	bl	80028b4 <_write>
 8016728:	1c43      	adds	r3, r0, #1
 801672a:	d102      	bne.n	8016732 <_write_r+0x1e>
 801672c:	682b      	ldr	r3, [r5, #0]
 801672e:	b103      	cbz	r3, 8016732 <_write_r+0x1e>
 8016730:	6023      	str	r3, [r4, #0]
 8016732:	bd38      	pop	{r3, r4, r5, pc}
 8016734:	2000dfd4 	.word	0x2000dfd4

08016738 <__errno>:
 8016738:	4b01      	ldr	r3, [pc, #4]	@ (8016740 <__errno+0x8>)
 801673a:	6818      	ldr	r0, [r3, #0]
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop
 8016740:	200002b4 	.word	0x200002b4

08016744 <__libc_init_array>:
 8016744:	b570      	push	{r4, r5, r6, lr}
 8016746:	4d0d      	ldr	r5, [pc, #52]	@ (801677c <__libc_init_array+0x38>)
 8016748:	4c0d      	ldr	r4, [pc, #52]	@ (8016780 <__libc_init_array+0x3c>)
 801674a:	1b64      	subs	r4, r4, r5
 801674c:	10a4      	asrs	r4, r4, #2
 801674e:	2600      	movs	r6, #0
 8016750:	42a6      	cmp	r6, r4
 8016752:	d109      	bne.n	8016768 <__libc_init_array+0x24>
 8016754:	4d0b      	ldr	r5, [pc, #44]	@ (8016784 <__libc_init_array+0x40>)
 8016756:	4c0c      	ldr	r4, [pc, #48]	@ (8016788 <__libc_init_array+0x44>)
 8016758:	f000 fef6 	bl	8017548 <_init>
 801675c:	1b64      	subs	r4, r4, r5
 801675e:	10a4      	asrs	r4, r4, #2
 8016760:	2600      	movs	r6, #0
 8016762:	42a6      	cmp	r6, r4
 8016764:	d105      	bne.n	8016772 <__libc_init_array+0x2e>
 8016766:	bd70      	pop	{r4, r5, r6, pc}
 8016768:	f855 3b04 	ldr.w	r3, [r5], #4
 801676c:	4798      	blx	r3
 801676e:	3601      	adds	r6, #1
 8016770:	e7ee      	b.n	8016750 <__libc_init_array+0xc>
 8016772:	f855 3b04 	ldr.w	r3, [r5], #4
 8016776:	4798      	blx	r3
 8016778:	3601      	adds	r6, #1
 801677a:	e7f2      	b.n	8016762 <__libc_init_array+0x1e>
 801677c:	080183bc 	.word	0x080183bc
 8016780:	080183bc 	.word	0x080183bc
 8016784:	080183bc 	.word	0x080183bc
 8016788:	080183c8 	.word	0x080183c8

0801678c <__retarget_lock_init_recursive>:
 801678c:	4770      	bx	lr

0801678e <__retarget_lock_acquire_recursive>:
 801678e:	4770      	bx	lr

08016790 <__retarget_lock_release_recursive>:
 8016790:	4770      	bx	lr

08016792 <strcpy>:
 8016792:	4603      	mov	r3, r0
 8016794:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016798:	f803 2b01 	strb.w	r2, [r3], #1
 801679c:	2a00      	cmp	r2, #0
 801679e:	d1f9      	bne.n	8016794 <strcpy+0x2>
 80167a0:	4770      	bx	lr

080167a2 <memcpy>:
 80167a2:	440a      	add	r2, r1
 80167a4:	4291      	cmp	r1, r2
 80167a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80167aa:	d100      	bne.n	80167ae <memcpy+0xc>
 80167ac:	4770      	bx	lr
 80167ae:	b510      	push	{r4, lr}
 80167b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167b8:	4291      	cmp	r1, r2
 80167ba:	d1f9      	bne.n	80167b0 <memcpy+0xe>
 80167bc:	bd10      	pop	{r4, pc}
	...

080167c0 <__assert_func>:
 80167c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167c2:	4614      	mov	r4, r2
 80167c4:	461a      	mov	r2, r3
 80167c6:	4b09      	ldr	r3, [pc, #36]	@ (80167ec <__assert_func+0x2c>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4605      	mov	r5, r0
 80167cc:	68d8      	ldr	r0, [r3, #12]
 80167ce:	b954      	cbnz	r4, 80167e6 <__assert_func+0x26>
 80167d0:	4b07      	ldr	r3, [pc, #28]	@ (80167f0 <__assert_func+0x30>)
 80167d2:	461c      	mov	r4, r3
 80167d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167d8:	9100      	str	r1, [sp, #0]
 80167da:	462b      	mov	r3, r5
 80167dc:	4905      	ldr	r1, [pc, #20]	@ (80167f4 <__assert_func+0x34>)
 80167de:	f000 fbfd 	bl	8016fdc <fiprintf>
 80167e2:	f000 fc0d 	bl	8017000 <abort>
 80167e6:	4b04      	ldr	r3, [pc, #16]	@ (80167f8 <__assert_func+0x38>)
 80167e8:	e7f4      	b.n	80167d4 <__assert_func+0x14>
 80167ea:	bf00      	nop
 80167ec:	200002b4 	.word	0x200002b4
 80167f0:	0801837f 	.word	0x0801837f
 80167f4:	08018351 	.word	0x08018351
 80167f8:	08018344 	.word	0x08018344

080167fc <__env_lock>:
 80167fc:	4801      	ldr	r0, [pc, #4]	@ (8016804 <__env_lock+0x8>)
 80167fe:	f7ff bfc6 	b.w	801678e <__retarget_lock_acquire_recursive>
 8016802:	bf00      	nop
 8016804:	2000dfd8 	.word	0x2000dfd8

08016808 <__env_unlock>:
 8016808:	4801      	ldr	r0, [pc, #4]	@ (8016810 <__env_unlock+0x8>)
 801680a:	f7ff bfc1 	b.w	8016790 <__retarget_lock_release_recursive>
 801680e:	bf00      	nop
 8016810:	2000dfd8 	.word	0x2000dfd8

08016814 <_free_r>:
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4605      	mov	r5, r0
 8016818:	2900      	cmp	r1, #0
 801681a:	d041      	beq.n	80168a0 <_free_r+0x8c>
 801681c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016820:	1f0c      	subs	r4, r1, #4
 8016822:	2b00      	cmp	r3, #0
 8016824:	bfb8      	it	lt
 8016826:	18e4      	addlt	r4, r4, r3
 8016828:	f7ff fc30 	bl	801608c <__malloc_lock>
 801682c:	4a1d      	ldr	r2, [pc, #116]	@ (80168a4 <_free_r+0x90>)
 801682e:	6813      	ldr	r3, [r2, #0]
 8016830:	b933      	cbnz	r3, 8016840 <_free_r+0x2c>
 8016832:	6063      	str	r3, [r4, #4]
 8016834:	6014      	str	r4, [r2, #0]
 8016836:	4628      	mov	r0, r5
 8016838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801683c:	f7ff bc2c 	b.w	8016098 <__malloc_unlock>
 8016840:	42a3      	cmp	r3, r4
 8016842:	d908      	bls.n	8016856 <_free_r+0x42>
 8016844:	6820      	ldr	r0, [r4, #0]
 8016846:	1821      	adds	r1, r4, r0
 8016848:	428b      	cmp	r3, r1
 801684a:	bf01      	itttt	eq
 801684c:	6819      	ldreq	r1, [r3, #0]
 801684e:	685b      	ldreq	r3, [r3, #4]
 8016850:	1809      	addeq	r1, r1, r0
 8016852:	6021      	streq	r1, [r4, #0]
 8016854:	e7ed      	b.n	8016832 <_free_r+0x1e>
 8016856:	461a      	mov	r2, r3
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	b10b      	cbz	r3, 8016860 <_free_r+0x4c>
 801685c:	42a3      	cmp	r3, r4
 801685e:	d9fa      	bls.n	8016856 <_free_r+0x42>
 8016860:	6811      	ldr	r1, [r2, #0]
 8016862:	1850      	adds	r0, r2, r1
 8016864:	42a0      	cmp	r0, r4
 8016866:	d10b      	bne.n	8016880 <_free_r+0x6c>
 8016868:	6820      	ldr	r0, [r4, #0]
 801686a:	4401      	add	r1, r0
 801686c:	1850      	adds	r0, r2, r1
 801686e:	4283      	cmp	r3, r0
 8016870:	6011      	str	r1, [r2, #0]
 8016872:	d1e0      	bne.n	8016836 <_free_r+0x22>
 8016874:	6818      	ldr	r0, [r3, #0]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	6053      	str	r3, [r2, #4]
 801687a:	4408      	add	r0, r1
 801687c:	6010      	str	r0, [r2, #0]
 801687e:	e7da      	b.n	8016836 <_free_r+0x22>
 8016880:	d902      	bls.n	8016888 <_free_r+0x74>
 8016882:	230c      	movs	r3, #12
 8016884:	602b      	str	r3, [r5, #0]
 8016886:	e7d6      	b.n	8016836 <_free_r+0x22>
 8016888:	6820      	ldr	r0, [r4, #0]
 801688a:	1821      	adds	r1, r4, r0
 801688c:	428b      	cmp	r3, r1
 801688e:	bf04      	itt	eq
 8016890:	6819      	ldreq	r1, [r3, #0]
 8016892:	685b      	ldreq	r3, [r3, #4]
 8016894:	6063      	str	r3, [r4, #4]
 8016896:	bf04      	itt	eq
 8016898:	1809      	addeq	r1, r1, r0
 801689a:	6021      	streq	r1, [r4, #0]
 801689c:	6054      	str	r4, [r2, #4]
 801689e:	e7ca      	b.n	8016836 <_free_r+0x22>
 80168a0:	bd38      	pop	{r3, r4, r5, pc}
 80168a2:	bf00      	nop
 80168a4:	2000de94 	.word	0x2000de94

080168a8 <_malloc_usable_size_r>:
 80168a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168ac:	1f18      	subs	r0, r3, #4
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	bfbc      	itt	lt
 80168b2:	580b      	ldrlt	r3, [r1, r0]
 80168b4:	18c0      	addlt	r0, r0, r3
 80168b6:	4770      	bx	lr

080168b8 <__ssputs_r>:
 80168b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168bc:	688e      	ldr	r6, [r1, #8]
 80168be:	461f      	mov	r7, r3
 80168c0:	42be      	cmp	r6, r7
 80168c2:	680b      	ldr	r3, [r1, #0]
 80168c4:	4682      	mov	sl, r0
 80168c6:	460c      	mov	r4, r1
 80168c8:	4690      	mov	r8, r2
 80168ca:	d82d      	bhi.n	8016928 <__ssputs_r+0x70>
 80168cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80168d4:	d026      	beq.n	8016924 <__ssputs_r+0x6c>
 80168d6:	6965      	ldr	r5, [r4, #20]
 80168d8:	6909      	ldr	r1, [r1, #16]
 80168da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168de:	eba3 0901 	sub.w	r9, r3, r1
 80168e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80168e6:	1c7b      	adds	r3, r7, #1
 80168e8:	444b      	add	r3, r9
 80168ea:	106d      	asrs	r5, r5, #1
 80168ec:	429d      	cmp	r5, r3
 80168ee:	bf38      	it	cc
 80168f0:	461d      	movcc	r5, r3
 80168f2:	0553      	lsls	r3, r2, #21
 80168f4:	d527      	bpl.n	8016946 <__ssputs_r+0x8e>
 80168f6:	4629      	mov	r1, r5
 80168f8:	f7ff fb48 	bl	8015f8c <_malloc_r>
 80168fc:	4606      	mov	r6, r0
 80168fe:	b360      	cbz	r0, 801695a <__ssputs_r+0xa2>
 8016900:	6921      	ldr	r1, [r4, #16]
 8016902:	464a      	mov	r2, r9
 8016904:	f7ff ff4d 	bl	80167a2 <memcpy>
 8016908:	89a3      	ldrh	r3, [r4, #12]
 801690a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801690e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016912:	81a3      	strh	r3, [r4, #12]
 8016914:	6126      	str	r6, [r4, #16]
 8016916:	6165      	str	r5, [r4, #20]
 8016918:	444e      	add	r6, r9
 801691a:	eba5 0509 	sub.w	r5, r5, r9
 801691e:	6026      	str	r6, [r4, #0]
 8016920:	60a5      	str	r5, [r4, #8]
 8016922:	463e      	mov	r6, r7
 8016924:	42be      	cmp	r6, r7
 8016926:	d900      	bls.n	801692a <__ssputs_r+0x72>
 8016928:	463e      	mov	r6, r7
 801692a:	6820      	ldr	r0, [r4, #0]
 801692c:	4632      	mov	r2, r6
 801692e:	4641      	mov	r1, r8
 8016930:	f7ff fe54 	bl	80165dc <memmove>
 8016934:	68a3      	ldr	r3, [r4, #8]
 8016936:	1b9b      	subs	r3, r3, r6
 8016938:	60a3      	str	r3, [r4, #8]
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	4433      	add	r3, r6
 801693e:	6023      	str	r3, [r4, #0]
 8016940:	2000      	movs	r0, #0
 8016942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016946:	462a      	mov	r2, r5
 8016948:	f7ff fc20 	bl	801618c <_realloc_r>
 801694c:	4606      	mov	r6, r0
 801694e:	2800      	cmp	r0, #0
 8016950:	d1e0      	bne.n	8016914 <__ssputs_r+0x5c>
 8016952:	6921      	ldr	r1, [r4, #16]
 8016954:	4650      	mov	r0, sl
 8016956:	f7ff ff5d 	bl	8016814 <_free_r>
 801695a:	230c      	movs	r3, #12
 801695c:	f8ca 3000 	str.w	r3, [sl]
 8016960:	89a3      	ldrh	r3, [r4, #12]
 8016962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801696c:	e7e9      	b.n	8016942 <__ssputs_r+0x8a>
	...

08016970 <_svfiprintf_r>:
 8016970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016974:	4698      	mov	r8, r3
 8016976:	898b      	ldrh	r3, [r1, #12]
 8016978:	061b      	lsls	r3, r3, #24
 801697a:	b09d      	sub	sp, #116	@ 0x74
 801697c:	4607      	mov	r7, r0
 801697e:	460d      	mov	r5, r1
 8016980:	4614      	mov	r4, r2
 8016982:	d510      	bpl.n	80169a6 <_svfiprintf_r+0x36>
 8016984:	690b      	ldr	r3, [r1, #16]
 8016986:	b973      	cbnz	r3, 80169a6 <_svfiprintf_r+0x36>
 8016988:	2140      	movs	r1, #64	@ 0x40
 801698a:	f7ff faff 	bl	8015f8c <_malloc_r>
 801698e:	6028      	str	r0, [r5, #0]
 8016990:	6128      	str	r0, [r5, #16]
 8016992:	b930      	cbnz	r0, 80169a2 <_svfiprintf_r+0x32>
 8016994:	230c      	movs	r3, #12
 8016996:	603b      	str	r3, [r7, #0]
 8016998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801699c:	b01d      	add	sp, #116	@ 0x74
 801699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a2:	2340      	movs	r3, #64	@ 0x40
 80169a4:	616b      	str	r3, [r5, #20]
 80169a6:	2300      	movs	r3, #0
 80169a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80169aa:	2320      	movs	r3, #32
 80169ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80169b4:	2330      	movs	r3, #48	@ 0x30
 80169b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016b54 <_svfiprintf_r+0x1e4>
 80169ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80169be:	f04f 0901 	mov.w	r9, #1
 80169c2:	4623      	mov	r3, r4
 80169c4:	469a      	mov	sl, r3
 80169c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169ca:	b10a      	cbz	r2, 80169d0 <_svfiprintf_r+0x60>
 80169cc:	2a25      	cmp	r2, #37	@ 0x25
 80169ce:	d1f9      	bne.n	80169c4 <_svfiprintf_r+0x54>
 80169d0:	ebba 0b04 	subs.w	fp, sl, r4
 80169d4:	d00b      	beq.n	80169ee <_svfiprintf_r+0x7e>
 80169d6:	465b      	mov	r3, fp
 80169d8:	4622      	mov	r2, r4
 80169da:	4629      	mov	r1, r5
 80169dc:	4638      	mov	r0, r7
 80169de:	f7ff ff6b 	bl	80168b8 <__ssputs_r>
 80169e2:	3001      	adds	r0, #1
 80169e4:	f000 80a7 	beq.w	8016b36 <_svfiprintf_r+0x1c6>
 80169e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169ea:	445a      	add	r2, fp
 80169ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80169ee:	f89a 3000 	ldrb.w	r3, [sl]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	f000 809f 	beq.w	8016b36 <_svfiprintf_r+0x1c6>
 80169f8:	2300      	movs	r3, #0
 80169fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a02:	f10a 0a01 	add.w	sl, sl, #1
 8016a06:	9304      	str	r3, [sp, #16]
 8016a08:	9307      	str	r3, [sp, #28]
 8016a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a10:	4654      	mov	r4, sl
 8016a12:	2205      	movs	r2, #5
 8016a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a18:	484e      	ldr	r0, [pc, #312]	@ (8016b54 <_svfiprintf_r+0x1e4>)
 8016a1a:	f7e9 fbf9 	bl	8000210 <memchr>
 8016a1e:	9a04      	ldr	r2, [sp, #16]
 8016a20:	b9d8      	cbnz	r0, 8016a5a <_svfiprintf_r+0xea>
 8016a22:	06d0      	lsls	r0, r2, #27
 8016a24:	bf44      	itt	mi
 8016a26:	2320      	movmi	r3, #32
 8016a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a2c:	0711      	lsls	r1, r2, #28
 8016a2e:	bf44      	itt	mi
 8016a30:	232b      	movmi	r3, #43	@ 0x2b
 8016a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a36:	f89a 3000 	ldrb.w	r3, [sl]
 8016a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a3c:	d015      	beq.n	8016a6a <_svfiprintf_r+0xfa>
 8016a3e:	9a07      	ldr	r2, [sp, #28]
 8016a40:	4654      	mov	r4, sl
 8016a42:	2000      	movs	r0, #0
 8016a44:	f04f 0c0a 	mov.w	ip, #10
 8016a48:	4621      	mov	r1, r4
 8016a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a4e:	3b30      	subs	r3, #48	@ 0x30
 8016a50:	2b09      	cmp	r3, #9
 8016a52:	d94b      	bls.n	8016aec <_svfiprintf_r+0x17c>
 8016a54:	b1b0      	cbz	r0, 8016a84 <_svfiprintf_r+0x114>
 8016a56:	9207      	str	r2, [sp, #28]
 8016a58:	e014      	b.n	8016a84 <_svfiprintf_r+0x114>
 8016a5a:	eba0 0308 	sub.w	r3, r0, r8
 8016a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8016a62:	4313      	orrs	r3, r2
 8016a64:	9304      	str	r3, [sp, #16]
 8016a66:	46a2      	mov	sl, r4
 8016a68:	e7d2      	b.n	8016a10 <_svfiprintf_r+0xa0>
 8016a6a:	9b03      	ldr	r3, [sp, #12]
 8016a6c:	1d19      	adds	r1, r3, #4
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	9103      	str	r1, [sp, #12]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	bfbb      	ittet	lt
 8016a76:	425b      	neglt	r3, r3
 8016a78:	f042 0202 	orrlt.w	r2, r2, #2
 8016a7c:	9307      	strge	r3, [sp, #28]
 8016a7e:	9307      	strlt	r3, [sp, #28]
 8016a80:	bfb8      	it	lt
 8016a82:	9204      	strlt	r2, [sp, #16]
 8016a84:	7823      	ldrb	r3, [r4, #0]
 8016a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a88:	d10a      	bne.n	8016aa0 <_svfiprintf_r+0x130>
 8016a8a:	7863      	ldrb	r3, [r4, #1]
 8016a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a8e:	d132      	bne.n	8016af6 <_svfiprintf_r+0x186>
 8016a90:	9b03      	ldr	r3, [sp, #12]
 8016a92:	1d1a      	adds	r2, r3, #4
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	9203      	str	r2, [sp, #12]
 8016a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a9c:	3402      	adds	r4, #2
 8016a9e:	9305      	str	r3, [sp, #20]
 8016aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016b64 <_svfiprintf_r+0x1f4>
 8016aa4:	7821      	ldrb	r1, [r4, #0]
 8016aa6:	2203      	movs	r2, #3
 8016aa8:	4650      	mov	r0, sl
 8016aaa:	f7e9 fbb1 	bl	8000210 <memchr>
 8016aae:	b138      	cbz	r0, 8016ac0 <_svfiprintf_r+0x150>
 8016ab0:	9b04      	ldr	r3, [sp, #16]
 8016ab2:	eba0 000a 	sub.w	r0, r0, sl
 8016ab6:	2240      	movs	r2, #64	@ 0x40
 8016ab8:	4082      	lsls	r2, r0
 8016aba:	4313      	orrs	r3, r2
 8016abc:	3401      	adds	r4, #1
 8016abe:	9304      	str	r3, [sp, #16]
 8016ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ac4:	4824      	ldr	r0, [pc, #144]	@ (8016b58 <_svfiprintf_r+0x1e8>)
 8016ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016aca:	2206      	movs	r2, #6
 8016acc:	f7e9 fba0 	bl	8000210 <memchr>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d036      	beq.n	8016b42 <_svfiprintf_r+0x1d2>
 8016ad4:	4b21      	ldr	r3, [pc, #132]	@ (8016b5c <_svfiprintf_r+0x1ec>)
 8016ad6:	bb1b      	cbnz	r3, 8016b20 <_svfiprintf_r+0x1b0>
 8016ad8:	9b03      	ldr	r3, [sp, #12]
 8016ada:	3307      	adds	r3, #7
 8016adc:	f023 0307 	bic.w	r3, r3, #7
 8016ae0:	3308      	adds	r3, #8
 8016ae2:	9303      	str	r3, [sp, #12]
 8016ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ae6:	4433      	add	r3, r6
 8016ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016aea:	e76a      	b.n	80169c2 <_svfiprintf_r+0x52>
 8016aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8016af0:	460c      	mov	r4, r1
 8016af2:	2001      	movs	r0, #1
 8016af4:	e7a8      	b.n	8016a48 <_svfiprintf_r+0xd8>
 8016af6:	2300      	movs	r3, #0
 8016af8:	3401      	adds	r4, #1
 8016afa:	9305      	str	r3, [sp, #20]
 8016afc:	4619      	mov	r1, r3
 8016afe:	f04f 0c0a 	mov.w	ip, #10
 8016b02:	4620      	mov	r0, r4
 8016b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b08:	3a30      	subs	r2, #48	@ 0x30
 8016b0a:	2a09      	cmp	r2, #9
 8016b0c:	d903      	bls.n	8016b16 <_svfiprintf_r+0x1a6>
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d0c6      	beq.n	8016aa0 <_svfiprintf_r+0x130>
 8016b12:	9105      	str	r1, [sp, #20]
 8016b14:	e7c4      	b.n	8016aa0 <_svfiprintf_r+0x130>
 8016b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	e7f0      	b.n	8016b02 <_svfiprintf_r+0x192>
 8016b20:	ab03      	add	r3, sp, #12
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	462a      	mov	r2, r5
 8016b26:	4b0e      	ldr	r3, [pc, #56]	@ (8016b60 <_svfiprintf_r+0x1f0>)
 8016b28:	a904      	add	r1, sp, #16
 8016b2a:	4638      	mov	r0, r7
 8016b2c:	f3af 8000 	nop.w
 8016b30:	1c42      	adds	r2, r0, #1
 8016b32:	4606      	mov	r6, r0
 8016b34:	d1d6      	bne.n	8016ae4 <_svfiprintf_r+0x174>
 8016b36:	89ab      	ldrh	r3, [r5, #12]
 8016b38:	065b      	lsls	r3, r3, #25
 8016b3a:	f53f af2d 	bmi.w	8016998 <_svfiprintf_r+0x28>
 8016b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b40:	e72c      	b.n	801699c <_svfiprintf_r+0x2c>
 8016b42:	ab03      	add	r3, sp, #12
 8016b44:	9300      	str	r3, [sp, #0]
 8016b46:	462a      	mov	r2, r5
 8016b48:	4b05      	ldr	r3, [pc, #20]	@ (8016b60 <_svfiprintf_r+0x1f0>)
 8016b4a:	a904      	add	r1, sp, #16
 8016b4c:	4638      	mov	r0, r7
 8016b4e:	f000 f879 	bl	8016c44 <_printf_i>
 8016b52:	e7ed      	b.n	8016b30 <_svfiprintf_r+0x1c0>
 8016b54:	08018380 	.word	0x08018380
 8016b58:	0801838a 	.word	0x0801838a
 8016b5c:	00000000 	.word	0x00000000
 8016b60:	080168b9 	.word	0x080168b9
 8016b64:	08018386 	.word	0x08018386

08016b68 <_printf_common>:
 8016b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b6c:	4616      	mov	r6, r2
 8016b6e:	4698      	mov	r8, r3
 8016b70:	688a      	ldr	r2, [r1, #8]
 8016b72:	690b      	ldr	r3, [r1, #16]
 8016b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	bfb8      	it	lt
 8016b7c:	4613      	movlt	r3, r2
 8016b7e:	6033      	str	r3, [r6, #0]
 8016b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016b84:	4607      	mov	r7, r0
 8016b86:	460c      	mov	r4, r1
 8016b88:	b10a      	cbz	r2, 8016b8e <_printf_common+0x26>
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	6033      	str	r3, [r6, #0]
 8016b8e:	6823      	ldr	r3, [r4, #0]
 8016b90:	0699      	lsls	r1, r3, #26
 8016b92:	bf42      	ittt	mi
 8016b94:	6833      	ldrmi	r3, [r6, #0]
 8016b96:	3302      	addmi	r3, #2
 8016b98:	6033      	strmi	r3, [r6, #0]
 8016b9a:	6825      	ldr	r5, [r4, #0]
 8016b9c:	f015 0506 	ands.w	r5, r5, #6
 8016ba0:	d106      	bne.n	8016bb0 <_printf_common+0x48>
 8016ba2:	f104 0a19 	add.w	sl, r4, #25
 8016ba6:	68e3      	ldr	r3, [r4, #12]
 8016ba8:	6832      	ldr	r2, [r6, #0]
 8016baa:	1a9b      	subs	r3, r3, r2
 8016bac:	42ab      	cmp	r3, r5
 8016bae:	dc26      	bgt.n	8016bfe <_printf_common+0x96>
 8016bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016bb4:	6822      	ldr	r2, [r4, #0]
 8016bb6:	3b00      	subs	r3, #0
 8016bb8:	bf18      	it	ne
 8016bba:	2301      	movne	r3, #1
 8016bbc:	0692      	lsls	r2, r2, #26
 8016bbe:	d42b      	bmi.n	8016c18 <_printf_common+0xb0>
 8016bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016bc4:	4641      	mov	r1, r8
 8016bc6:	4638      	mov	r0, r7
 8016bc8:	47c8      	blx	r9
 8016bca:	3001      	adds	r0, #1
 8016bcc:	d01e      	beq.n	8016c0c <_printf_common+0xa4>
 8016bce:	6823      	ldr	r3, [r4, #0]
 8016bd0:	6922      	ldr	r2, [r4, #16]
 8016bd2:	f003 0306 	and.w	r3, r3, #6
 8016bd6:	2b04      	cmp	r3, #4
 8016bd8:	bf02      	ittt	eq
 8016bda:	68e5      	ldreq	r5, [r4, #12]
 8016bdc:	6833      	ldreq	r3, [r6, #0]
 8016bde:	1aed      	subeq	r5, r5, r3
 8016be0:	68a3      	ldr	r3, [r4, #8]
 8016be2:	bf0c      	ite	eq
 8016be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016be8:	2500      	movne	r5, #0
 8016bea:	4293      	cmp	r3, r2
 8016bec:	bfc4      	itt	gt
 8016bee:	1a9b      	subgt	r3, r3, r2
 8016bf0:	18ed      	addgt	r5, r5, r3
 8016bf2:	2600      	movs	r6, #0
 8016bf4:	341a      	adds	r4, #26
 8016bf6:	42b5      	cmp	r5, r6
 8016bf8:	d11a      	bne.n	8016c30 <_printf_common+0xc8>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	e008      	b.n	8016c10 <_printf_common+0xa8>
 8016bfe:	2301      	movs	r3, #1
 8016c00:	4652      	mov	r2, sl
 8016c02:	4641      	mov	r1, r8
 8016c04:	4638      	mov	r0, r7
 8016c06:	47c8      	blx	r9
 8016c08:	3001      	adds	r0, #1
 8016c0a:	d103      	bne.n	8016c14 <_printf_common+0xac>
 8016c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c14:	3501      	adds	r5, #1
 8016c16:	e7c6      	b.n	8016ba6 <_printf_common+0x3e>
 8016c18:	18e1      	adds	r1, r4, r3
 8016c1a:	1c5a      	adds	r2, r3, #1
 8016c1c:	2030      	movs	r0, #48	@ 0x30
 8016c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016c22:	4422      	add	r2, r4
 8016c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016c2c:	3302      	adds	r3, #2
 8016c2e:	e7c7      	b.n	8016bc0 <_printf_common+0x58>
 8016c30:	2301      	movs	r3, #1
 8016c32:	4622      	mov	r2, r4
 8016c34:	4641      	mov	r1, r8
 8016c36:	4638      	mov	r0, r7
 8016c38:	47c8      	blx	r9
 8016c3a:	3001      	adds	r0, #1
 8016c3c:	d0e6      	beq.n	8016c0c <_printf_common+0xa4>
 8016c3e:	3601      	adds	r6, #1
 8016c40:	e7d9      	b.n	8016bf6 <_printf_common+0x8e>
	...

08016c44 <_printf_i>:
 8016c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c48:	7e0f      	ldrb	r7, [r1, #24]
 8016c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016c4c:	2f78      	cmp	r7, #120	@ 0x78
 8016c4e:	4691      	mov	r9, r2
 8016c50:	4680      	mov	r8, r0
 8016c52:	460c      	mov	r4, r1
 8016c54:	469a      	mov	sl, r3
 8016c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016c5a:	d807      	bhi.n	8016c6c <_printf_i+0x28>
 8016c5c:	2f62      	cmp	r7, #98	@ 0x62
 8016c5e:	d80a      	bhi.n	8016c76 <_printf_i+0x32>
 8016c60:	2f00      	cmp	r7, #0
 8016c62:	f000 80d2 	beq.w	8016e0a <_printf_i+0x1c6>
 8016c66:	2f58      	cmp	r7, #88	@ 0x58
 8016c68:	f000 80b9 	beq.w	8016dde <_printf_i+0x19a>
 8016c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016c74:	e03a      	b.n	8016cec <_printf_i+0xa8>
 8016c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016c7a:	2b15      	cmp	r3, #21
 8016c7c:	d8f6      	bhi.n	8016c6c <_printf_i+0x28>
 8016c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8016c84 <_printf_i+0x40>)
 8016c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c84:	08016cdd 	.word	0x08016cdd
 8016c88:	08016cf1 	.word	0x08016cf1
 8016c8c:	08016c6d 	.word	0x08016c6d
 8016c90:	08016c6d 	.word	0x08016c6d
 8016c94:	08016c6d 	.word	0x08016c6d
 8016c98:	08016c6d 	.word	0x08016c6d
 8016c9c:	08016cf1 	.word	0x08016cf1
 8016ca0:	08016c6d 	.word	0x08016c6d
 8016ca4:	08016c6d 	.word	0x08016c6d
 8016ca8:	08016c6d 	.word	0x08016c6d
 8016cac:	08016c6d 	.word	0x08016c6d
 8016cb0:	08016df1 	.word	0x08016df1
 8016cb4:	08016d1b 	.word	0x08016d1b
 8016cb8:	08016dab 	.word	0x08016dab
 8016cbc:	08016c6d 	.word	0x08016c6d
 8016cc0:	08016c6d 	.word	0x08016c6d
 8016cc4:	08016e13 	.word	0x08016e13
 8016cc8:	08016c6d 	.word	0x08016c6d
 8016ccc:	08016d1b 	.word	0x08016d1b
 8016cd0:	08016c6d 	.word	0x08016c6d
 8016cd4:	08016c6d 	.word	0x08016c6d
 8016cd8:	08016db3 	.word	0x08016db3
 8016cdc:	6833      	ldr	r3, [r6, #0]
 8016cde:	1d1a      	adds	r2, r3, #4
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	6032      	str	r2, [r6, #0]
 8016ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016cec:	2301      	movs	r3, #1
 8016cee:	e09d      	b.n	8016e2c <_printf_i+0x1e8>
 8016cf0:	6833      	ldr	r3, [r6, #0]
 8016cf2:	6820      	ldr	r0, [r4, #0]
 8016cf4:	1d19      	adds	r1, r3, #4
 8016cf6:	6031      	str	r1, [r6, #0]
 8016cf8:	0606      	lsls	r6, r0, #24
 8016cfa:	d501      	bpl.n	8016d00 <_printf_i+0xbc>
 8016cfc:	681d      	ldr	r5, [r3, #0]
 8016cfe:	e003      	b.n	8016d08 <_printf_i+0xc4>
 8016d00:	0645      	lsls	r5, r0, #25
 8016d02:	d5fb      	bpl.n	8016cfc <_printf_i+0xb8>
 8016d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016d08:	2d00      	cmp	r5, #0
 8016d0a:	da03      	bge.n	8016d14 <_printf_i+0xd0>
 8016d0c:	232d      	movs	r3, #45	@ 0x2d
 8016d0e:	426d      	negs	r5, r5
 8016d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016d14:	4859      	ldr	r0, [pc, #356]	@ (8016e7c <_printf_i+0x238>)
 8016d16:	230a      	movs	r3, #10
 8016d18:	e011      	b.n	8016d3e <_printf_i+0xfa>
 8016d1a:	6821      	ldr	r1, [r4, #0]
 8016d1c:	6833      	ldr	r3, [r6, #0]
 8016d1e:	0608      	lsls	r0, r1, #24
 8016d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8016d24:	d402      	bmi.n	8016d2c <_printf_i+0xe8>
 8016d26:	0649      	lsls	r1, r1, #25
 8016d28:	bf48      	it	mi
 8016d2a:	b2ad      	uxthmi	r5, r5
 8016d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8016d2e:	4853      	ldr	r0, [pc, #332]	@ (8016e7c <_printf_i+0x238>)
 8016d30:	6033      	str	r3, [r6, #0]
 8016d32:	bf14      	ite	ne
 8016d34:	230a      	movne	r3, #10
 8016d36:	2308      	moveq	r3, #8
 8016d38:	2100      	movs	r1, #0
 8016d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016d3e:	6866      	ldr	r6, [r4, #4]
 8016d40:	60a6      	str	r6, [r4, #8]
 8016d42:	2e00      	cmp	r6, #0
 8016d44:	bfa2      	ittt	ge
 8016d46:	6821      	ldrge	r1, [r4, #0]
 8016d48:	f021 0104 	bicge.w	r1, r1, #4
 8016d4c:	6021      	strge	r1, [r4, #0]
 8016d4e:	b90d      	cbnz	r5, 8016d54 <_printf_i+0x110>
 8016d50:	2e00      	cmp	r6, #0
 8016d52:	d04b      	beq.n	8016dec <_printf_i+0x1a8>
 8016d54:	4616      	mov	r6, r2
 8016d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8016d5e:	5dc7      	ldrb	r7, [r0, r7]
 8016d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d64:	462f      	mov	r7, r5
 8016d66:	42bb      	cmp	r3, r7
 8016d68:	460d      	mov	r5, r1
 8016d6a:	d9f4      	bls.n	8016d56 <_printf_i+0x112>
 8016d6c:	2b08      	cmp	r3, #8
 8016d6e:	d10b      	bne.n	8016d88 <_printf_i+0x144>
 8016d70:	6823      	ldr	r3, [r4, #0]
 8016d72:	07df      	lsls	r7, r3, #31
 8016d74:	d508      	bpl.n	8016d88 <_printf_i+0x144>
 8016d76:	6923      	ldr	r3, [r4, #16]
 8016d78:	6861      	ldr	r1, [r4, #4]
 8016d7a:	4299      	cmp	r1, r3
 8016d7c:	bfde      	ittt	le
 8016d7e:	2330      	movle	r3, #48	@ 0x30
 8016d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d84:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016d88:	1b92      	subs	r2, r2, r6
 8016d8a:	6122      	str	r2, [r4, #16]
 8016d8c:	f8cd a000 	str.w	sl, [sp]
 8016d90:	464b      	mov	r3, r9
 8016d92:	aa03      	add	r2, sp, #12
 8016d94:	4621      	mov	r1, r4
 8016d96:	4640      	mov	r0, r8
 8016d98:	f7ff fee6 	bl	8016b68 <_printf_common>
 8016d9c:	3001      	adds	r0, #1
 8016d9e:	d14a      	bne.n	8016e36 <_printf_i+0x1f2>
 8016da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016da4:	b004      	add	sp, #16
 8016da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016daa:	6823      	ldr	r3, [r4, #0]
 8016dac:	f043 0320 	orr.w	r3, r3, #32
 8016db0:	6023      	str	r3, [r4, #0]
 8016db2:	4833      	ldr	r0, [pc, #204]	@ (8016e80 <_printf_i+0x23c>)
 8016db4:	2778      	movs	r7, #120	@ 0x78
 8016db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	6831      	ldr	r1, [r6, #0]
 8016dbe:	061f      	lsls	r7, r3, #24
 8016dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8016dc4:	d402      	bmi.n	8016dcc <_printf_i+0x188>
 8016dc6:	065f      	lsls	r7, r3, #25
 8016dc8:	bf48      	it	mi
 8016dca:	b2ad      	uxthmi	r5, r5
 8016dcc:	6031      	str	r1, [r6, #0]
 8016dce:	07d9      	lsls	r1, r3, #31
 8016dd0:	bf44      	itt	mi
 8016dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8016dd6:	6023      	strmi	r3, [r4, #0]
 8016dd8:	b11d      	cbz	r5, 8016de2 <_printf_i+0x19e>
 8016dda:	2310      	movs	r3, #16
 8016ddc:	e7ac      	b.n	8016d38 <_printf_i+0xf4>
 8016dde:	4827      	ldr	r0, [pc, #156]	@ (8016e7c <_printf_i+0x238>)
 8016de0:	e7e9      	b.n	8016db6 <_printf_i+0x172>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	f023 0320 	bic.w	r3, r3, #32
 8016de8:	6023      	str	r3, [r4, #0]
 8016dea:	e7f6      	b.n	8016dda <_printf_i+0x196>
 8016dec:	4616      	mov	r6, r2
 8016dee:	e7bd      	b.n	8016d6c <_printf_i+0x128>
 8016df0:	6833      	ldr	r3, [r6, #0]
 8016df2:	6825      	ldr	r5, [r4, #0]
 8016df4:	6961      	ldr	r1, [r4, #20]
 8016df6:	1d18      	adds	r0, r3, #4
 8016df8:	6030      	str	r0, [r6, #0]
 8016dfa:	062e      	lsls	r6, r5, #24
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	d501      	bpl.n	8016e04 <_printf_i+0x1c0>
 8016e00:	6019      	str	r1, [r3, #0]
 8016e02:	e002      	b.n	8016e0a <_printf_i+0x1c6>
 8016e04:	0668      	lsls	r0, r5, #25
 8016e06:	d5fb      	bpl.n	8016e00 <_printf_i+0x1bc>
 8016e08:	8019      	strh	r1, [r3, #0]
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	6123      	str	r3, [r4, #16]
 8016e0e:	4616      	mov	r6, r2
 8016e10:	e7bc      	b.n	8016d8c <_printf_i+0x148>
 8016e12:	6833      	ldr	r3, [r6, #0]
 8016e14:	1d1a      	adds	r2, r3, #4
 8016e16:	6032      	str	r2, [r6, #0]
 8016e18:	681e      	ldr	r6, [r3, #0]
 8016e1a:	6862      	ldr	r2, [r4, #4]
 8016e1c:	2100      	movs	r1, #0
 8016e1e:	4630      	mov	r0, r6
 8016e20:	f7e9 f9f6 	bl	8000210 <memchr>
 8016e24:	b108      	cbz	r0, 8016e2a <_printf_i+0x1e6>
 8016e26:	1b80      	subs	r0, r0, r6
 8016e28:	6060      	str	r0, [r4, #4]
 8016e2a:	6863      	ldr	r3, [r4, #4]
 8016e2c:	6123      	str	r3, [r4, #16]
 8016e2e:	2300      	movs	r3, #0
 8016e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016e34:	e7aa      	b.n	8016d8c <_printf_i+0x148>
 8016e36:	6923      	ldr	r3, [r4, #16]
 8016e38:	4632      	mov	r2, r6
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	4640      	mov	r0, r8
 8016e3e:	47d0      	blx	sl
 8016e40:	3001      	adds	r0, #1
 8016e42:	d0ad      	beq.n	8016da0 <_printf_i+0x15c>
 8016e44:	6823      	ldr	r3, [r4, #0]
 8016e46:	079b      	lsls	r3, r3, #30
 8016e48:	d413      	bmi.n	8016e72 <_printf_i+0x22e>
 8016e4a:	68e0      	ldr	r0, [r4, #12]
 8016e4c:	9b03      	ldr	r3, [sp, #12]
 8016e4e:	4298      	cmp	r0, r3
 8016e50:	bfb8      	it	lt
 8016e52:	4618      	movlt	r0, r3
 8016e54:	e7a6      	b.n	8016da4 <_printf_i+0x160>
 8016e56:	2301      	movs	r3, #1
 8016e58:	4632      	mov	r2, r6
 8016e5a:	4649      	mov	r1, r9
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	47d0      	blx	sl
 8016e60:	3001      	adds	r0, #1
 8016e62:	d09d      	beq.n	8016da0 <_printf_i+0x15c>
 8016e64:	3501      	adds	r5, #1
 8016e66:	68e3      	ldr	r3, [r4, #12]
 8016e68:	9903      	ldr	r1, [sp, #12]
 8016e6a:	1a5b      	subs	r3, r3, r1
 8016e6c:	42ab      	cmp	r3, r5
 8016e6e:	dcf2      	bgt.n	8016e56 <_printf_i+0x212>
 8016e70:	e7eb      	b.n	8016e4a <_printf_i+0x206>
 8016e72:	2500      	movs	r5, #0
 8016e74:	f104 0619 	add.w	r6, r4, #25
 8016e78:	e7f5      	b.n	8016e66 <_printf_i+0x222>
 8016e7a:	bf00      	nop
 8016e7c:	08018391 	.word	0x08018391
 8016e80:	080183a2 	.word	0x080183a2

08016e84 <__sflush_r>:
 8016e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8c:	0716      	lsls	r6, r2, #28
 8016e8e:	4605      	mov	r5, r0
 8016e90:	460c      	mov	r4, r1
 8016e92:	d454      	bmi.n	8016f3e <__sflush_r+0xba>
 8016e94:	684b      	ldr	r3, [r1, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	dc02      	bgt.n	8016ea0 <__sflush_r+0x1c>
 8016e9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	dd48      	ble.n	8016f32 <__sflush_r+0xae>
 8016ea0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016ea2:	2e00      	cmp	r6, #0
 8016ea4:	d045      	beq.n	8016f32 <__sflush_r+0xae>
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016eac:	682f      	ldr	r7, [r5, #0]
 8016eae:	6a21      	ldr	r1, [r4, #32]
 8016eb0:	602b      	str	r3, [r5, #0]
 8016eb2:	d030      	beq.n	8016f16 <__sflush_r+0x92>
 8016eb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016eb6:	89a3      	ldrh	r3, [r4, #12]
 8016eb8:	0759      	lsls	r1, r3, #29
 8016eba:	d505      	bpl.n	8016ec8 <__sflush_r+0x44>
 8016ebc:	6863      	ldr	r3, [r4, #4]
 8016ebe:	1ad2      	subs	r2, r2, r3
 8016ec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016ec2:	b10b      	cbz	r3, 8016ec8 <__sflush_r+0x44>
 8016ec4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ec6:	1ad2      	subs	r2, r2, r3
 8016ec8:	2300      	movs	r3, #0
 8016eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016ecc:	6a21      	ldr	r1, [r4, #32]
 8016ece:	4628      	mov	r0, r5
 8016ed0:	47b0      	blx	r6
 8016ed2:	1c43      	adds	r3, r0, #1
 8016ed4:	89a3      	ldrh	r3, [r4, #12]
 8016ed6:	d106      	bne.n	8016ee6 <__sflush_r+0x62>
 8016ed8:	6829      	ldr	r1, [r5, #0]
 8016eda:	291d      	cmp	r1, #29
 8016edc:	d82b      	bhi.n	8016f36 <__sflush_r+0xb2>
 8016ede:	4a2a      	ldr	r2, [pc, #168]	@ (8016f88 <__sflush_r+0x104>)
 8016ee0:	410a      	asrs	r2, r1
 8016ee2:	07d6      	lsls	r6, r2, #31
 8016ee4:	d427      	bmi.n	8016f36 <__sflush_r+0xb2>
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	6062      	str	r2, [r4, #4]
 8016eea:	04d9      	lsls	r1, r3, #19
 8016eec:	6922      	ldr	r2, [r4, #16]
 8016eee:	6022      	str	r2, [r4, #0]
 8016ef0:	d504      	bpl.n	8016efc <__sflush_r+0x78>
 8016ef2:	1c42      	adds	r2, r0, #1
 8016ef4:	d101      	bne.n	8016efa <__sflush_r+0x76>
 8016ef6:	682b      	ldr	r3, [r5, #0]
 8016ef8:	b903      	cbnz	r3, 8016efc <__sflush_r+0x78>
 8016efa:	6560      	str	r0, [r4, #84]	@ 0x54
 8016efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016efe:	602f      	str	r7, [r5, #0]
 8016f00:	b1b9      	cbz	r1, 8016f32 <__sflush_r+0xae>
 8016f02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f06:	4299      	cmp	r1, r3
 8016f08:	d002      	beq.n	8016f10 <__sflush_r+0x8c>
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f7ff fc82 	bl	8016814 <_free_r>
 8016f10:	2300      	movs	r3, #0
 8016f12:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f14:	e00d      	b.n	8016f32 <__sflush_r+0xae>
 8016f16:	2301      	movs	r3, #1
 8016f18:	4628      	mov	r0, r5
 8016f1a:	47b0      	blx	r6
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	1c50      	adds	r0, r2, #1
 8016f20:	d1c9      	bne.n	8016eb6 <__sflush_r+0x32>
 8016f22:	682b      	ldr	r3, [r5, #0]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d0c6      	beq.n	8016eb6 <__sflush_r+0x32>
 8016f28:	2b1d      	cmp	r3, #29
 8016f2a:	d001      	beq.n	8016f30 <__sflush_r+0xac>
 8016f2c:	2b16      	cmp	r3, #22
 8016f2e:	d11e      	bne.n	8016f6e <__sflush_r+0xea>
 8016f30:	602f      	str	r7, [r5, #0]
 8016f32:	2000      	movs	r0, #0
 8016f34:	e022      	b.n	8016f7c <__sflush_r+0xf8>
 8016f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f3a:	b21b      	sxth	r3, r3
 8016f3c:	e01b      	b.n	8016f76 <__sflush_r+0xf2>
 8016f3e:	690f      	ldr	r7, [r1, #16]
 8016f40:	2f00      	cmp	r7, #0
 8016f42:	d0f6      	beq.n	8016f32 <__sflush_r+0xae>
 8016f44:	0793      	lsls	r3, r2, #30
 8016f46:	680e      	ldr	r6, [r1, #0]
 8016f48:	bf08      	it	eq
 8016f4a:	694b      	ldreq	r3, [r1, #20]
 8016f4c:	600f      	str	r7, [r1, #0]
 8016f4e:	bf18      	it	ne
 8016f50:	2300      	movne	r3, #0
 8016f52:	eba6 0807 	sub.w	r8, r6, r7
 8016f56:	608b      	str	r3, [r1, #8]
 8016f58:	f1b8 0f00 	cmp.w	r8, #0
 8016f5c:	dde9      	ble.n	8016f32 <__sflush_r+0xae>
 8016f5e:	6a21      	ldr	r1, [r4, #32]
 8016f60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016f62:	4643      	mov	r3, r8
 8016f64:	463a      	mov	r2, r7
 8016f66:	4628      	mov	r0, r5
 8016f68:	47b0      	blx	r6
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	dc08      	bgt.n	8016f80 <__sflush_r+0xfc>
 8016f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f76:	81a3      	strh	r3, [r4, #12]
 8016f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f80:	4407      	add	r7, r0
 8016f82:	eba8 0800 	sub.w	r8, r8, r0
 8016f86:	e7e7      	b.n	8016f58 <__sflush_r+0xd4>
 8016f88:	dfbffffe 	.word	0xdfbffffe

08016f8c <_fflush_r>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	690b      	ldr	r3, [r1, #16]
 8016f90:	4605      	mov	r5, r0
 8016f92:	460c      	mov	r4, r1
 8016f94:	b913      	cbnz	r3, 8016f9c <_fflush_r+0x10>
 8016f96:	2500      	movs	r5, #0
 8016f98:	4628      	mov	r0, r5
 8016f9a:	bd38      	pop	{r3, r4, r5, pc}
 8016f9c:	b118      	cbz	r0, 8016fa6 <_fflush_r+0x1a>
 8016f9e:	6a03      	ldr	r3, [r0, #32]
 8016fa0:	b90b      	cbnz	r3, 8016fa6 <_fflush_r+0x1a>
 8016fa2:	f7ff fa25 	bl	80163f0 <__sinit>
 8016fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d0f3      	beq.n	8016f96 <_fflush_r+0xa>
 8016fae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016fb0:	07d0      	lsls	r0, r2, #31
 8016fb2:	d404      	bmi.n	8016fbe <_fflush_r+0x32>
 8016fb4:	0599      	lsls	r1, r3, #22
 8016fb6:	d402      	bmi.n	8016fbe <_fflush_r+0x32>
 8016fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016fba:	f7ff fbe8 	bl	801678e <__retarget_lock_acquire_recursive>
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	4621      	mov	r1, r4
 8016fc2:	f7ff ff5f 	bl	8016e84 <__sflush_r>
 8016fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016fc8:	07da      	lsls	r2, r3, #31
 8016fca:	4605      	mov	r5, r0
 8016fcc:	d4e4      	bmi.n	8016f98 <_fflush_r+0xc>
 8016fce:	89a3      	ldrh	r3, [r4, #12]
 8016fd0:	059b      	lsls	r3, r3, #22
 8016fd2:	d4e1      	bmi.n	8016f98 <_fflush_r+0xc>
 8016fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016fd6:	f7ff fbdb 	bl	8016790 <__retarget_lock_release_recursive>
 8016fda:	e7dd      	b.n	8016f98 <_fflush_r+0xc>

08016fdc <fiprintf>:
 8016fdc:	b40e      	push	{r1, r2, r3}
 8016fde:	b503      	push	{r0, r1, lr}
 8016fe0:	4601      	mov	r1, r0
 8016fe2:	ab03      	add	r3, sp, #12
 8016fe4:	4805      	ldr	r0, [pc, #20]	@ (8016ffc <fiprintf+0x20>)
 8016fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fea:	6800      	ldr	r0, [r0, #0]
 8016fec:	9301      	str	r3, [sp, #4]
 8016fee:	f000 f837 	bl	8017060 <_vfiprintf_r>
 8016ff2:	b002      	add	sp, #8
 8016ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ff8:	b003      	add	sp, #12
 8016ffa:	4770      	bx	lr
 8016ffc:	200002b4 	.word	0x200002b4

08017000 <abort>:
 8017000:	b508      	push	{r3, lr}
 8017002:	2006      	movs	r0, #6
 8017004:	f000 fa00 	bl	8017408 <raise>
 8017008:	2001      	movs	r0, #1
 801700a:	f7eb fc2b 	bl	8002864 <_exit>

0801700e <__sfputc_r>:
 801700e:	6893      	ldr	r3, [r2, #8]
 8017010:	3b01      	subs	r3, #1
 8017012:	2b00      	cmp	r3, #0
 8017014:	b410      	push	{r4}
 8017016:	6093      	str	r3, [r2, #8]
 8017018:	da08      	bge.n	801702c <__sfputc_r+0x1e>
 801701a:	6994      	ldr	r4, [r2, #24]
 801701c:	42a3      	cmp	r3, r4
 801701e:	db01      	blt.n	8017024 <__sfputc_r+0x16>
 8017020:	290a      	cmp	r1, #10
 8017022:	d103      	bne.n	801702c <__sfputc_r+0x1e>
 8017024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017028:	f000 b932 	b.w	8017290 <__swbuf_r>
 801702c:	6813      	ldr	r3, [r2, #0]
 801702e:	1c58      	adds	r0, r3, #1
 8017030:	6010      	str	r0, [r2, #0]
 8017032:	7019      	strb	r1, [r3, #0]
 8017034:	4608      	mov	r0, r1
 8017036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801703a:	4770      	bx	lr

0801703c <__sfputs_r>:
 801703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801703e:	4606      	mov	r6, r0
 8017040:	460f      	mov	r7, r1
 8017042:	4614      	mov	r4, r2
 8017044:	18d5      	adds	r5, r2, r3
 8017046:	42ac      	cmp	r4, r5
 8017048:	d101      	bne.n	801704e <__sfputs_r+0x12>
 801704a:	2000      	movs	r0, #0
 801704c:	e007      	b.n	801705e <__sfputs_r+0x22>
 801704e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017052:	463a      	mov	r2, r7
 8017054:	4630      	mov	r0, r6
 8017056:	f7ff ffda 	bl	801700e <__sfputc_r>
 801705a:	1c43      	adds	r3, r0, #1
 801705c:	d1f3      	bne.n	8017046 <__sfputs_r+0xa>
 801705e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017060 <_vfiprintf_r>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	460d      	mov	r5, r1
 8017066:	b09d      	sub	sp, #116	@ 0x74
 8017068:	4614      	mov	r4, r2
 801706a:	4698      	mov	r8, r3
 801706c:	4606      	mov	r6, r0
 801706e:	b118      	cbz	r0, 8017078 <_vfiprintf_r+0x18>
 8017070:	6a03      	ldr	r3, [r0, #32]
 8017072:	b90b      	cbnz	r3, 8017078 <_vfiprintf_r+0x18>
 8017074:	f7ff f9bc 	bl	80163f0 <__sinit>
 8017078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801707a:	07d9      	lsls	r1, r3, #31
 801707c:	d405      	bmi.n	801708a <_vfiprintf_r+0x2a>
 801707e:	89ab      	ldrh	r3, [r5, #12]
 8017080:	059a      	lsls	r2, r3, #22
 8017082:	d402      	bmi.n	801708a <_vfiprintf_r+0x2a>
 8017084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017086:	f7ff fb82 	bl	801678e <__retarget_lock_acquire_recursive>
 801708a:	89ab      	ldrh	r3, [r5, #12]
 801708c:	071b      	lsls	r3, r3, #28
 801708e:	d501      	bpl.n	8017094 <_vfiprintf_r+0x34>
 8017090:	692b      	ldr	r3, [r5, #16]
 8017092:	b99b      	cbnz	r3, 80170bc <_vfiprintf_r+0x5c>
 8017094:	4629      	mov	r1, r5
 8017096:	4630      	mov	r0, r6
 8017098:	f000 f938 	bl	801730c <__swsetup_r>
 801709c:	b170      	cbz	r0, 80170bc <_vfiprintf_r+0x5c>
 801709e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170a0:	07dc      	lsls	r4, r3, #31
 80170a2:	d504      	bpl.n	80170ae <_vfiprintf_r+0x4e>
 80170a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170a8:	b01d      	add	sp, #116	@ 0x74
 80170aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ae:	89ab      	ldrh	r3, [r5, #12]
 80170b0:	0598      	lsls	r0, r3, #22
 80170b2:	d4f7      	bmi.n	80170a4 <_vfiprintf_r+0x44>
 80170b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80170b6:	f7ff fb6b 	bl	8016790 <__retarget_lock_release_recursive>
 80170ba:	e7f3      	b.n	80170a4 <_vfiprintf_r+0x44>
 80170bc:	2300      	movs	r3, #0
 80170be:	9309      	str	r3, [sp, #36]	@ 0x24
 80170c0:	2320      	movs	r3, #32
 80170c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80170ca:	2330      	movs	r3, #48	@ 0x30
 80170cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801727c <_vfiprintf_r+0x21c>
 80170d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170d4:	f04f 0901 	mov.w	r9, #1
 80170d8:	4623      	mov	r3, r4
 80170da:	469a      	mov	sl, r3
 80170dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170e0:	b10a      	cbz	r2, 80170e6 <_vfiprintf_r+0x86>
 80170e2:	2a25      	cmp	r2, #37	@ 0x25
 80170e4:	d1f9      	bne.n	80170da <_vfiprintf_r+0x7a>
 80170e6:	ebba 0b04 	subs.w	fp, sl, r4
 80170ea:	d00b      	beq.n	8017104 <_vfiprintf_r+0xa4>
 80170ec:	465b      	mov	r3, fp
 80170ee:	4622      	mov	r2, r4
 80170f0:	4629      	mov	r1, r5
 80170f2:	4630      	mov	r0, r6
 80170f4:	f7ff ffa2 	bl	801703c <__sfputs_r>
 80170f8:	3001      	adds	r0, #1
 80170fa:	f000 80a7 	beq.w	801724c <_vfiprintf_r+0x1ec>
 80170fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017100:	445a      	add	r2, fp
 8017102:	9209      	str	r2, [sp, #36]	@ 0x24
 8017104:	f89a 3000 	ldrb.w	r3, [sl]
 8017108:	2b00      	cmp	r3, #0
 801710a:	f000 809f 	beq.w	801724c <_vfiprintf_r+0x1ec>
 801710e:	2300      	movs	r3, #0
 8017110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017118:	f10a 0a01 	add.w	sl, sl, #1
 801711c:	9304      	str	r3, [sp, #16]
 801711e:	9307      	str	r3, [sp, #28]
 8017120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017124:	931a      	str	r3, [sp, #104]	@ 0x68
 8017126:	4654      	mov	r4, sl
 8017128:	2205      	movs	r2, #5
 801712a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801712e:	4853      	ldr	r0, [pc, #332]	@ (801727c <_vfiprintf_r+0x21c>)
 8017130:	f7e9 f86e 	bl	8000210 <memchr>
 8017134:	9a04      	ldr	r2, [sp, #16]
 8017136:	b9d8      	cbnz	r0, 8017170 <_vfiprintf_r+0x110>
 8017138:	06d1      	lsls	r1, r2, #27
 801713a:	bf44      	itt	mi
 801713c:	2320      	movmi	r3, #32
 801713e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017142:	0713      	lsls	r3, r2, #28
 8017144:	bf44      	itt	mi
 8017146:	232b      	movmi	r3, #43	@ 0x2b
 8017148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801714c:	f89a 3000 	ldrb.w	r3, [sl]
 8017150:	2b2a      	cmp	r3, #42	@ 0x2a
 8017152:	d015      	beq.n	8017180 <_vfiprintf_r+0x120>
 8017154:	9a07      	ldr	r2, [sp, #28]
 8017156:	4654      	mov	r4, sl
 8017158:	2000      	movs	r0, #0
 801715a:	f04f 0c0a 	mov.w	ip, #10
 801715e:	4621      	mov	r1, r4
 8017160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017164:	3b30      	subs	r3, #48	@ 0x30
 8017166:	2b09      	cmp	r3, #9
 8017168:	d94b      	bls.n	8017202 <_vfiprintf_r+0x1a2>
 801716a:	b1b0      	cbz	r0, 801719a <_vfiprintf_r+0x13a>
 801716c:	9207      	str	r2, [sp, #28]
 801716e:	e014      	b.n	801719a <_vfiprintf_r+0x13a>
 8017170:	eba0 0308 	sub.w	r3, r0, r8
 8017174:	fa09 f303 	lsl.w	r3, r9, r3
 8017178:	4313      	orrs	r3, r2
 801717a:	9304      	str	r3, [sp, #16]
 801717c:	46a2      	mov	sl, r4
 801717e:	e7d2      	b.n	8017126 <_vfiprintf_r+0xc6>
 8017180:	9b03      	ldr	r3, [sp, #12]
 8017182:	1d19      	adds	r1, r3, #4
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	9103      	str	r1, [sp, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	bfbb      	ittet	lt
 801718c:	425b      	neglt	r3, r3
 801718e:	f042 0202 	orrlt.w	r2, r2, #2
 8017192:	9307      	strge	r3, [sp, #28]
 8017194:	9307      	strlt	r3, [sp, #28]
 8017196:	bfb8      	it	lt
 8017198:	9204      	strlt	r2, [sp, #16]
 801719a:	7823      	ldrb	r3, [r4, #0]
 801719c:	2b2e      	cmp	r3, #46	@ 0x2e
 801719e:	d10a      	bne.n	80171b6 <_vfiprintf_r+0x156>
 80171a0:	7863      	ldrb	r3, [r4, #1]
 80171a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80171a4:	d132      	bne.n	801720c <_vfiprintf_r+0x1ac>
 80171a6:	9b03      	ldr	r3, [sp, #12]
 80171a8:	1d1a      	adds	r2, r3, #4
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	9203      	str	r2, [sp, #12]
 80171ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171b2:	3402      	adds	r4, #2
 80171b4:	9305      	str	r3, [sp, #20]
 80171b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801728c <_vfiprintf_r+0x22c>
 80171ba:	7821      	ldrb	r1, [r4, #0]
 80171bc:	2203      	movs	r2, #3
 80171be:	4650      	mov	r0, sl
 80171c0:	f7e9 f826 	bl	8000210 <memchr>
 80171c4:	b138      	cbz	r0, 80171d6 <_vfiprintf_r+0x176>
 80171c6:	9b04      	ldr	r3, [sp, #16]
 80171c8:	eba0 000a 	sub.w	r0, r0, sl
 80171cc:	2240      	movs	r2, #64	@ 0x40
 80171ce:	4082      	lsls	r2, r0
 80171d0:	4313      	orrs	r3, r2
 80171d2:	3401      	adds	r4, #1
 80171d4:	9304      	str	r3, [sp, #16]
 80171d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171da:	4829      	ldr	r0, [pc, #164]	@ (8017280 <_vfiprintf_r+0x220>)
 80171dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171e0:	2206      	movs	r2, #6
 80171e2:	f7e9 f815 	bl	8000210 <memchr>
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d03f      	beq.n	801726a <_vfiprintf_r+0x20a>
 80171ea:	4b26      	ldr	r3, [pc, #152]	@ (8017284 <_vfiprintf_r+0x224>)
 80171ec:	bb1b      	cbnz	r3, 8017236 <_vfiprintf_r+0x1d6>
 80171ee:	9b03      	ldr	r3, [sp, #12]
 80171f0:	3307      	adds	r3, #7
 80171f2:	f023 0307 	bic.w	r3, r3, #7
 80171f6:	3308      	adds	r3, #8
 80171f8:	9303      	str	r3, [sp, #12]
 80171fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171fc:	443b      	add	r3, r7
 80171fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8017200:	e76a      	b.n	80170d8 <_vfiprintf_r+0x78>
 8017202:	fb0c 3202 	mla	r2, ip, r2, r3
 8017206:	460c      	mov	r4, r1
 8017208:	2001      	movs	r0, #1
 801720a:	e7a8      	b.n	801715e <_vfiprintf_r+0xfe>
 801720c:	2300      	movs	r3, #0
 801720e:	3401      	adds	r4, #1
 8017210:	9305      	str	r3, [sp, #20]
 8017212:	4619      	mov	r1, r3
 8017214:	f04f 0c0a 	mov.w	ip, #10
 8017218:	4620      	mov	r0, r4
 801721a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801721e:	3a30      	subs	r2, #48	@ 0x30
 8017220:	2a09      	cmp	r2, #9
 8017222:	d903      	bls.n	801722c <_vfiprintf_r+0x1cc>
 8017224:	2b00      	cmp	r3, #0
 8017226:	d0c6      	beq.n	80171b6 <_vfiprintf_r+0x156>
 8017228:	9105      	str	r1, [sp, #20]
 801722a:	e7c4      	b.n	80171b6 <_vfiprintf_r+0x156>
 801722c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017230:	4604      	mov	r4, r0
 8017232:	2301      	movs	r3, #1
 8017234:	e7f0      	b.n	8017218 <_vfiprintf_r+0x1b8>
 8017236:	ab03      	add	r3, sp, #12
 8017238:	9300      	str	r3, [sp, #0]
 801723a:	462a      	mov	r2, r5
 801723c:	4b12      	ldr	r3, [pc, #72]	@ (8017288 <_vfiprintf_r+0x228>)
 801723e:	a904      	add	r1, sp, #16
 8017240:	4630      	mov	r0, r6
 8017242:	f3af 8000 	nop.w
 8017246:	4607      	mov	r7, r0
 8017248:	1c78      	adds	r0, r7, #1
 801724a:	d1d6      	bne.n	80171fa <_vfiprintf_r+0x19a>
 801724c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801724e:	07d9      	lsls	r1, r3, #31
 8017250:	d405      	bmi.n	801725e <_vfiprintf_r+0x1fe>
 8017252:	89ab      	ldrh	r3, [r5, #12]
 8017254:	059a      	lsls	r2, r3, #22
 8017256:	d402      	bmi.n	801725e <_vfiprintf_r+0x1fe>
 8017258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801725a:	f7ff fa99 	bl	8016790 <__retarget_lock_release_recursive>
 801725e:	89ab      	ldrh	r3, [r5, #12]
 8017260:	065b      	lsls	r3, r3, #25
 8017262:	f53f af1f 	bmi.w	80170a4 <_vfiprintf_r+0x44>
 8017266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017268:	e71e      	b.n	80170a8 <_vfiprintf_r+0x48>
 801726a:	ab03      	add	r3, sp, #12
 801726c:	9300      	str	r3, [sp, #0]
 801726e:	462a      	mov	r2, r5
 8017270:	4b05      	ldr	r3, [pc, #20]	@ (8017288 <_vfiprintf_r+0x228>)
 8017272:	a904      	add	r1, sp, #16
 8017274:	4630      	mov	r0, r6
 8017276:	f7ff fce5 	bl	8016c44 <_printf_i>
 801727a:	e7e4      	b.n	8017246 <_vfiprintf_r+0x1e6>
 801727c:	08018380 	.word	0x08018380
 8017280:	0801838a 	.word	0x0801838a
 8017284:	00000000 	.word	0x00000000
 8017288:	0801703d 	.word	0x0801703d
 801728c:	08018386 	.word	0x08018386

08017290 <__swbuf_r>:
 8017290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017292:	460e      	mov	r6, r1
 8017294:	4614      	mov	r4, r2
 8017296:	4605      	mov	r5, r0
 8017298:	b118      	cbz	r0, 80172a2 <__swbuf_r+0x12>
 801729a:	6a03      	ldr	r3, [r0, #32]
 801729c:	b90b      	cbnz	r3, 80172a2 <__swbuf_r+0x12>
 801729e:	f7ff f8a7 	bl	80163f0 <__sinit>
 80172a2:	69a3      	ldr	r3, [r4, #24]
 80172a4:	60a3      	str	r3, [r4, #8]
 80172a6:	89a3      	ldrh	r3, [r4, #12]
 80172a8:	071a      	lsls	r2, r3, #28
 80172aa:	d501      	bpl.n	80172b0 <__swbuf_r+0x20>
 80172ac:	6923      	ldr	r3, [r4, #16]
 80172ae:	b943      	cbnz	r3, 80172c2 <__swbuf_r+0x32>
 80172b0:	4621      	mov	r1, r4
 80172b2:	4628      	mov	r0, r5
 80172b4:	f000 f82a 	bl	801730c <__swsetup_r>
 80172b8:	b118      	cbz	r0, 80172c2 <__swbuf_r+0x32>
 80172ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80172be:	4638      	mov	r0, r7
 80172c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	6922      	ldr	r2, [r4, #16]
 80172c6:	1a98      	subs	r0, r3, r2
 80172c8:	6963      	ldr	r3, [r4, #20]
 80172ca:	b2f6      	uxtb	r6, r6
 80172cc:	4283      	cmp	r3, r0
 80172ce:	4637      	mov	r7, r6
 80172d0:	dc05      	bgt.n	80172de <__swbuf_r+0x4e>
 80172d2:	4621      	mov	r1, r4
 80172d4:	4628      	mov	r0, r5
 80172d6:	f7ff fe59 	bl	8016f8c <_fflush_r>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d1ed      	bne.n	80172ba <__swbuf_r+0x2a>
 80172de:	68a3      	ldr	r3, [r4, #8]
 80172e0:	3b01      	subs	r3, #1
 80172e2:	60a3      	str	r3, [r4, #8]
 80172e4:	6823      	ldr	r3, [r4, #0]
 80172e6:	1c5a      	adds	r2, r3, #1
 80172e8:	6022      	str	r2, [r4, #0]
 80172ea:	701e      	strb	r6, [r3, #0]
 80172ec:	6962      	ldr	r2, [r4, #20]
 80172ee:	1c43      	adds	r3, r0, #1
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d004      	beq.n	80172fe <__swbuf_r+0x6e>
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	07db      	lsls	r3, r3, #31
 80172f8:	d5e1      	bpl.n	80172be <__swbuf_r+0x2e>
 80172fa:	2e0a      	cmp	r6, #10
 80172fc:	d1df      	bne.n	80172be <__swbuf_r+0x2e>
 80172fe:	4621      	mov	r1, r4
 8017300:	4628      	mov	r0, r5
 8017302:	f7ff fe43 	bl	8016f8c <_fflush_r>
 8017306:	2800      	cmp	r0, #0
 8017308:	d0d9      	beq.n	80172be <__swbuf_r+0x2e>
 801730a:	e7d6      	b.n	80172ba <__swbuf_r+0x2a>

0801730c <__swsetup_r>:
 801730c:	b538      	push	{r3, r4, r5, lr}
 801730e:	4b29      	ldr	r3, [pc, #164]	@ (80173b4 <__swsetup_r+0xa8>)
 8017310:	4605      	mov	r5, r0
 8017312:	6818      	ldr	r0, [r3, #0]
 8017314:	460c      	mov	r4, r1
 8017316:	b118      	cbz	r0, 8017320 <__swsetup_r+0x14>
 8017318:	6a03      	ldr	r3, [r0, #32]
 801731a:	b90b      	cbnz	r3, 8017320 <__swsetup_r+0x14>
 801731c:	f7ff f868 	bl	80163f0 <__sinit>
 8017320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017324:	0719      	lsls	r1, r3, #28
 8017326:	d422      	bmi.n	801736e <__swsetup_r+0x62>
 8017328:	06da      	lsls	r2, r3, #27
 801732a:	d407      	bmi.n	801733c <__swsetup_r+0x30>
 801732c:	2209      	movs	r2, #9
 801732e:	602a      	str	r2, [r5, #0]
 8017330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017334:	81a3      	strh	r3, [r4, #12]
 8017336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801733a:	e033      	b.n	80173a4 <__swsetup_r+0x98>
 801733c:	0758      	lsls	r0, r3, #29
 801733e:	d512      	bpl.n	8017366 <__swsetup_r+0x5a>
 8017340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017342:	b141      	cbz	r1, 8017356 <__swsetup_r+0x4a>
 8017344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017348:	4299      	cmp	r1, r3
 801734a:	d002      	beq.n	8017352 <__swsetup_r+0x46>
 801734c:	4628      	mov	r0, r5
 801734e:	f7ff fa61 	bl	8016814 <_free_r>
 8017352:	2300      	movs	r3, #0
 8017354:	6363      	str	r3, [r4, #52]	@ 0x34
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801735c:	81a3      	strh	r3, [r4, #12]
 801735e:	2300      	movs	r3, #0
 8017360:	6063      	str	r3, [r4, #4]
 8017362:	6923      	ldr	r3, [r4, #16]
 8017364:	6023      	str	r3, [r4, #0]
 8017366:	89a3      	ldrh	r3, [r4, #12]
 8017368:	f043 0308 	orr.w	r3, r3, #8
 801736c:	81a3      	strh	r3, [r4, #12]
 801736e:	6923      	ldr	r3, [r4, #16]
 8017370:	b94b      	cbnz	r3, 8017386 <__swsetup_r+0x7a>
 8017372:	89a3      	ldrh	r3, [r4, #12]
 8017374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801737c:	d003      	beq.n	8017386 <__swsetup_r+0x7a>
 801737e:	4621      	mov	r1, r4
 8017380:	4628      	mov	r0, r5
 8017382:	f000 f883 	bl	801748c <__smakebuf_r>
 8017386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738a:	f013 0201 	ands.w	r2, r3, #1
 801738e:	d00a      	beq.n	80173a6 <__swsetup_r+0x9a>
 8017390:	2200      	movs	r2, #0
 8017392:	60a2      	str	r2, [r4, #8]
 8017394:	6962      	ldr	r2, [r4, #20]
 8017396:	4252      	negs	r2, r2
 8017398:	61a2      	str	r2, [r4, #24]
 801739a:	6922      	ldr	r2, [r4, #16]
 801739c:	b942      	cbnz	r2, 80173b0 <__swsetup_r+0xa4>
 801739e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80173a2:	d1c5      	bne.n	8017330 <__swsetup_r+0x24>
 80173a4:	bd38      	pop	{r3, r4, r5, pc}
 80173a6:	0799      	lsls	r1, r3, #30
 80173a8:	bf58      	it	pl
 80173aa:	6962      	ldrpl	r2, [r4, #20]
 80173ac:	60a2      	str	r2, [r4, #8]
 80173ae:	e7f4      	b.n	801739a <__swsetup_r+0x8e>
 80173b0:	2000      	movs	r0, #0
 80173b2:	e7f7      	b.n	80173a4 <__swsetup_r+0x98>
 80173b4:	200002b4 	.word	0x200002b4

080173b8 <_raise_r>:
 80173b8:	291f      	cmp	r1, #31
 80173ba:	b538      	push	{r3, r4, r5, lr}
 80173bc:	4605      	mov	r5, r0
 80173be:	460c      	mov	r4, r1
 80173c0:	d904      	bls.n	80173cc <_raise_r+0x14>
 80173c2:	2316      	movs	r3, #22
 80173c4:	6003      	str	r3, [r0, #0]
 80173c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173ca:	bd38      	pop	{r3, r4, r5, pc}
 80173cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80173ce:	b112      	cbz	r2, 80173d6 <_raise_r+0x1e>
 80173d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173d4:	b94b      	cbnz	r3, 80173ea <_raise_r+0x32>
 80173d6:	4628      	mov	r0, r5
 80173d8:	f000 f830 	bl	801743c <_getpid_r>
 80173dc:	4622      	mov	r2, r4
 80173de:	4601      	mov	r1, r0
 80173e0:	4628      	mov	r0, r5
 80173e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173e6:	f000 b817 	b.w	8017418 <_kill_r>
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d00a      	beq.n	8017404 <_raise_r+0x4c>
 80173ee:	1c59      	adds	r1, r3, #1
 80173f0:	d103      	bne.n	80173fa <_raise_r+0x42>
 80173f2:	2316      	movs	r3, #22
 80173f4:	6003      	str	r3, [r0, #0]
 80173f6:	2001      	movs	r0, #1
 80173f8:	e7e7      	b.n	80173ca <_raise_r+0x12>
 80173fa:	2100      	movs	r1, #0
 80173fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017400:	4620      	mov	r0, r4
 8017402:	4798      	blx	r3
 8017404:	2000      	movs	r0, #0
 8017406:	e7e0      	b.n	80173ca <_raise_r+0x12>

08017408 <raise>:
 8017408:	4b02      	ldr	r3, [pc, #8]	@ (8017414 <raise+0xc>)
 801740a:	4601      	mov	r1, r0
 801740c:	6818      	ldr	r0, [r3, #0]
 801740e:	f7ff bfd3 	b.w	80173b8 <_raise_r>
 8017412:	bf00      	nop
 8017414:	200002b4 	.word	0x200002b4

08017418 <_kill_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	4d07      	ldr	r5, [pc, #28]	@ (8017438 <_kill_r+0x20>)
 801741c:	2300      	movs	r3, #0
 801741e:	4604      	mov	r4, r0
 8017420:	4608      	mov	r0, r1
 8017422:	4611      	mov	r1, r2
 8017424:	602b      	str	r3, [r5, #0]
 8017426:	f7eb fa0d 	bl	8002844 <_kill>
 801742a:	1c43      	adds	r3, r0, #1
 801742c:	d102      	bne.n	8017434 <_kill_r+0x1c>
 801742e:	682b      	ldr	r3, [r5, #0]
 8017430:	b103      	cbz	r3, 8017434 <_kill_r+0x1c>
 8017432:	6023      	str	r3, [r4, #0]
 8017434:	bd38      	pop	{r3, r4, r5, pc}
 8017436:	bf00      	nop
 8017438:	2000dfd4 	.word	0x2000dfd4

0801743c <_getpid_r>:
 801743c:	f7eb b9fa 	b.w	8002834 <_getpid>

08017440 <__swhatbuf_r>:
 8017440:	b570      	push	{r4, r5, r6, lr}
 8017442:	460c      	mov	r4, r1
 8017444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017448:	2900      	cmp	r1, #0
 801744a:	b096      	sub	sp, #88	@ 0x58
 801744c:	4615      	mov	r5, r2
 801744e:	461e      	mov	r6, r3
 8017450:	da0d      	bge.n	801746e <__swhatbuf_r+0x2e>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017458:	f04f 0100 	mov.w	r1, #0
 801745c:	bf14      	ite	ne
 801745e:	2340      	movne	r3, #64	@ 0x40
 8017460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017464:	2000      	movs	r0, #0
 8017466:	6031      	str	r1, [r6, #0]
 8017468:	602b      	str	r3, [r5, #0]
 801746a:	b016      	add	sp, #88	@ 0x58
 801746c:	bd70      	pop	{r4, r5, r6, pc}
 801746e:	466a      	mov	r2, sp
 8017470:	f000 f848 	bl	8017504 <_fstat_r>
 8017474:	2800      	cmp	r0, #0
 8017476:	dbec      	blt.n	8017452 <__swhatbuf_r+0x12>
 8017478:	9901      	ldr	r1, [sp, #4]
 801747a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801747e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017482:	4259      	negs	r1, r3
 8017484:	4159      	adcs	r1, r3
 8017486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801748a:	e7eb      	b.n	8017464 <__swhatbuf_r+0x24>

0801748c <__smakebuf_r>:
 801748c:	898b      	ldrh	r3, [r1, #12]
 801748e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017490:	079d      	lsls	r5, r3, #30
 8017492:	4606      	mov	r6, r0
 8017494:	460c      	mov	r4, r1
 8017496:	d507      	bpl.n	80174a8 <__smakebuf_r+0x1c>
 8017498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801749c:	6023      	str	r3, [r4, #0]
 801749e:	6123      	str	r3, [r4, #16]
 80174a0:	2301      	movs	r3, #1
 80174a2:	6163      	str	r3, [r4, #20]
 80174a4:	b003      	add	sp, #12
 80174a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174a8:	ab01      	add	r3, sp, #4
 80174aa:	466a      	mov	r2, sp
 80174ac:	f7ff ffc8 	bl	8017440 <__swhatbuf_r>
 80174b0:	9f00      	ldr	r7, [sp, #0]
 80174b2:	4605      	mov	r5, r0
 80174b4:	4639      	mov	r1, r7
 80174b6:	4630      	mov	r0, r6
 80174b8:	f7fe fd68 	bl	8015f8c <_malloc_r>
 80174bc:	b948      	cbnz	r0, 80174d2 <__smakebuf_r+0x46>
 80174be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174c2:	059a      	lsls	r2, r3, #22
 80174c4:	d4ee      	bmi.n	80174a4 <__smakebuf_r+0x18>
 80174c6:	f023 0303 	bic.w	r3, r3, #3
 80174ca:	f043 0302 	orr.w	r3, r3, #2
 80174ce:	81a3      	strh	r3, [r4, #12]
 80174d0:	e7e2      	b.n	8017498 <__smakebuf_r+0xc>
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	6020      	str	r0, [r4, #0]
 80174d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174da:	81a3      	strh	r3, [r4, #12]
 80174dc:	9b01      	ldr	r3, [sp, #4]
 80174de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80174e2:	b15b      	cbz	r3, 80174fc <__smakebuf_r+0x70>
 80174e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174e8:	4630      	mov	r0, r6
 80174ea:	f000 f81d 	bl	8017528 <_isatty_r>
 80174ee:	b128      	cbz	r0, 80174fc <__smakebuf_r+0x70>
 80174f0:	89a3      	ldrh	r3, [r4, #12]
 80174f2:	f023 0303 	bic.w	r3, r3, #3
 80174f6:	f043 0301 	orr.w	r3, r3, #1
 80174fa:	81a3      	strh	r3, [r4, #12]
 80174fc:	89a3      	ldrh	r3, [r4, #12]
 80174fe:	431d      	orrs	r5, r3
 8017500:	81a5      	strh	r5, [r4, #12]
 8017502:	e7cf      	b.n	80174a4 <__smakebuf_r+0x18>

08017504 <_fstat_r>:
 8017504:	b538      	push	{r3, r4, r5, lr}
 8017506:	4d07      	ldr	r5, [pc, #28]	@ (8017524 <_fstat_r+0x20>)
 8017508:	2300      	movs	r3, #0
 801750a:	4604      	mov	r4, r0
 801750c:	4608      	mov	r0, r1
 801750e:	4611      	mov	r1, r2
 8017510:	602b      	str	r3, [r5, #0]
 8017512:	f7eb f9f7 	bl	8002904 <_fstat>
 8017516:	1c43      	adds	r3, r0, #1
 8017518:	d102      	bne.n	8017520 <_fstat_r+0x1c>
 801751a:	682b      	ldr	r3, [r5, #0]
 801751c:	b103      	cbz	r3, 8017520 <_fstat_r+0x1c>
 801751e:	6023      	str	r3, [r4, #0]
 8017520:	bd38      	pop	{r3, r4, r5, pc}
 8017522:	bf00      	nop
 8017524:	2000dfd4 	.word	0x2000dfd4

08017528 <_isatty_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d06      	ldr	r5, [pc, #24]	@ (8017544 <_isatty_r+0x1c>)
 801752c:	2300      	movs	r3, #0
 801752e:	4604      	mov	r4, r0
 8017530:	4608      	mov	r0, r1
 8017532:	602b      	str	r3, [r5, #0]
 8017534:	f7eb f9f6 	bl	8002924 <_isatty>
 8017538:	1c43      	adds	r3, r0, #1
 801753a:	d102      	bne.n	8017542 <_isatty_r+0x1a>
 801753c:	682b      	ldr	r3, [r5, #0]
 801753e:	b103      	cbz	r3, 8017542 <_isatty_r+0x1a>
 8017540:	6023      	str	r3, [r4, #0]
 8017542:	bd38      	pop	{r3, r4, r5, pc}
 8017544:	2000dfd4 	.word	0x2000dfd4

08017548 <_init>:
 8017548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754a:	bf00      	nop
 801754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801754e:	bc08      	pop	{r3}
 8017550:	469e      	mov	lr, r3
 8017552:	4770      	bx	lr

08017554 <_fini>:
 8017554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017556:	bf00      	nop
 8017558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801755a:	bc08      	pop	{r3}
 801755c:	469e      	mov	lr, r3
 801755e:	4770      	bx	lr
