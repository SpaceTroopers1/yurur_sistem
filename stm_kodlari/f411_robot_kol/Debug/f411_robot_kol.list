
f411_robot_kol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08008558  08008558  00009558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  0000a108  2**0
                  CONTENTS
  4 .ARM          00000008  08008620  08008620  00009620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008628  08008628  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00009628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800862c  0800862c  0000962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08008630  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000108  08008738  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08008738  0000a4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5dc  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002157  00000000  00000000  00019714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0001b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  0001c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a5c  00000000  00000000  0001d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010956  00000000  00000000  00034c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab7a  00000000  00000000  000455aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c4  00000000  00000000  000e0168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e472c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008540 	.word	0x08008540

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	08008540 	.word	0x08008540

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b96a 	b.w	8000ecc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	460c      	mov	r4, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14e      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	458c      	cmp	ip, r1
 8000c20:	4686      	mov	lr, r0
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	d962      	bls.n	8000cee <__udivmoddi4+0xde>
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f f68c 	uxth.w	r6, ip
 8000c46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb04 f106 	mul.w	r1, r4, r6
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c66:	f080 8112 	bcs.w	8000e8e <__udivmoddi4+0x27e>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 810f 	bls.w	8000e8e <__udivmoddi4+0x27e>
 8000c70:	3c02      	subs	r4, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x94>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c96:	f080 80fc 	bcs.w	8000e92 <__udivmoddi4+0x282>
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	f240 80f9 	bls.w	8000e92 <__udivmoddi4+0x282>
 8000ca0:	4463      	add	r3, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11d      	cbz	r5, 8000cb6 <__udivmoddi4+0xa6>
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d905      	bls.n	8000cca <__udivmoddi4+0xba>
 8000cbe:	b10d      	cbz	r5, 8000cc4 <__udivmoddi4+0xb4>
 8000cc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e7f5      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cca:	fab3 f183 	clz	r1, r3
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d146      	bne.n	8000d60 <__udivmoddi4+0x150>
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xcc>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f0c0 80f0 	bcc.w	8000ebc <__udivmoddi4+0x2ac>
 8000cdc:	1a86      	subs	r6, r0, r2
 8000cde:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d0e6      	beq.n	8000cb6 <__udivmoddi4+0xa6>
 8000ce8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cec:	e7e3      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	f040 8090 	bne.w	8000e14 <__udivmoddi4+0x204>
 8000cf4:	eba1 040c 	sub.w	r4, r1, ip
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x11c>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x11a>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	1a1c      	subs	r4, r3, r0
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d36:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	429f      	cmp	r7, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x148>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x146>
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f200 80b0 	bhi.w	8000eb6 <__udivmoddi4+0x2a6>
 8000d56:	4620      	mov	r0, r4
 8000d58:	1bdb      	subs	r3, r3, r7
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0x9c>
 8000d60:	f1c1 0620 	rsb	r6, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d70:	fa04 f301 	lsl.w	r3, r4, r1
 8000d74:	ea43 030c 	orr.w	r3, r3, ip
 8000d78:	40f4      	lsrs	r4, r6
 8000d7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7e:	0c38      	lsrs	r0, r7, #16
 8000d80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d84:	fbb4 fef0 	udiv	lr, r4, r0
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d94:	fb0e f90c 	mul.w	r9, lr, ip
 8000d98:	45a1      	cmp	r9, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x1a6>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	f080 8084 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	f240 8081 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000db0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	eba4 0409 	sub.w	r4, r4, r9
 8000dba:	fa1f f983 	uxth.w	r9, r3
 8000dbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x1d2>
 8000dd2:	193c      	adds	r4, r7, r4
 8000dd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd8:	d267      	bcs.n	8000eaa <__udivmoddi4+0x29a>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d965      	bls.n	8000eaa <__udivmoddi4+0x29a>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	429c      	cmp	r4, r3
 8000df0:	46ce      	mov	lr, r9
 8000df2:	469c      	mov	ip, r3
 8000df4:	d351      	bcc.n	8000e9a <__udivmoddi4+0x28a>
 8000df6:	d04e      	beq.n	8000e96 <__udivmoddi4+0x286>
 8000df8:	b155      	cbz	r5, 8000e10 <__udivmoddi4+0x200>
 8000dfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000e02:	fa04 f606 	lsl.w	r6, r4, r6
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	431e      	orrs	r6, r3
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e750      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000e14:	f1c2 0320 	rsb	r3, r2, #32
 8000e18:	fa20 f103 	lsr.w	r1, r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa24 f303 	lsr.w	r3, r4, r3
 8000e24:	4094      	lsls	r4, r2
 8000e26:	430c      	orrs	r4, r1
 8000e28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3110 	mls	r1, r8, r0, r3
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e42:	fb00 f107 	mul.w	r1, r0, r7
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x24c>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e52:	d22c      	bcs.n	8000eae <__udivmoddi4+0x29e>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d92a      	bls.n	8000eae <__udivmoddi4+0x29e>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e64:	fb08 3311 	mls	r3, r8, r1, r3
 8000e68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e6c:	fb01 f307 	mul.w	r3, r1, r7
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x276>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e7c:	d213      	bcs.n	8000ea6 <__udivmoddi4+0x296>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d911      	bls.n	8000ea6 <__udivmoddi4+0x296>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	1ae4      	subs	r4, r4, r3
 8000e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e8c:	e739      	b.n	8000d02 <__udivmoddi4+0xf2>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	e6f0      	b.n	8000c74 <__udivmoddi4+0x64>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e706      	b.n	8000ca4 <__udivmoddi4+0x94>
 8000e96:	45c8      	cmp	r8, r9
 8000e98:	d2ae      	bcs.n	8000df8 <__udivmoddi4+0x1e8>
 8000e9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	e7ed      	b.n	8000e86 <__udivmoddi4+0x276>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e799      	b.n	8000de2 <__udivmoddi4+0x1d2>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e7d4      	b.n	8000e5c <__udivmoddi4+0x24c>
 8000eb2:	46d6      	mov	lr, sl
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1a6>
 8000eb6:	4463      	add	r3, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e74d      	b.n	8000d58 <__udivmoddi4+0x148>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e70f      	b.n	8000ce4 <__udivmoddi4+0xd4>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	e730      	b.n	8000d2c <__udivmoddi4+0x11c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_TIM_IC_CaptureCallback>:
float z=30;




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {// -250 ile 250 arasında veriyo olması lazım
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {  // For forward and backwards
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a4d      	ldr	r2, [pc, #308]	@ (8001014 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12d      	bne.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x6e>
		        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7f1b      	ldrb	r3, [r3, #28]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d129      	bne.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x6e>
		            capture_value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f004 fb7f 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b48      	ldr	r3, [pc, #288]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000ef8:	601a      	str	r2, [r3, #0]
		            if (capture_value1) {
 8000efa:	4b47      	ldr	r3, [pc, #284]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01d      	beq.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x6e>
		                frequency1 = SystemCoreClock / capture_value1;
 8000f02:	4b46      	ldr	r3, [pc, #280]	@ (800101c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a44      	ldr	r2, [pc, #272]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000f12:	601a      	str	r2, [r3, #0]
		                duty_cycle1 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value1)/25 -30;
 8000f14:	2104      	movs	r1, #4
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f004 fb6a 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	4a3c      	ldr	r2, [pc, #240]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	3b1e      	subs	r3, #30
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000f3c:	601a      	str	r2, [r3, #0]
		            }
		        }
		    }
	if (htim->Instance == TIM2) {  // For left and right
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f46:	d12d      	bne.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0xd4>
		        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7f1b      	ldrb	r3, [r3, #28]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d129      	bne.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0xd4>
		            capture_value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f004 fb4c 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000f5e:	601a      	str	r2, [r3, #0]
		            if (capture_value2) {
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01d      	beq.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0xd4>
		                frequency2 = SystemCoreClock / capture_value2;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800102c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000f78:	601a      	str	r2, [r3, #0]
		                duty_cycle2 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value2)/25 -30;
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f004 fb37 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	4a27      	ldr	r2, [pc, #156]	@ (800102c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f94:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	3b1e      	subs	r3, #30
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000fa2:	601a      	str	r2, [r3, #0]
		            }
		        }
		    }
	if (htim->Instance == TIM3) {  // For left and right
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12d      	bne.n	800100a <HAL_TIM_IC_CaptureCallback+0x13a>
			        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7f1b      	ldrb	r3, [r3, #28]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d129      	bne.n	800100a <HAL_TIM_IC_CaptureCallback+0x13a>
			            capture_value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f004 fb19 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fc4:	601a      	str	r2, [r3, #0]
			            if (capture_value3) {
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d01d      	beq.n	800100a <HAL_TIM_IC_CaptureCallback+0x13a>
			                frequency3 = SystemCoreClock / capture_value3;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fde:	601a      	str	r2, [r3, #0]
			                duty_cycle3 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value3)/25 - 30;
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f004 fb04 	bl	80055f0 <HAL_TIM_ReadCapturedValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	3b1e      	subs	r3, #30
 8001004:	461a      	mov	r2, r3
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001008:	601a      	str	r2, [r3, #0]
			            }
			        }
			    }
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010000 	.word	0x40010000
 8001018:	2000039c 	.word	0x2000039c
 800101c:	20000098 	.word	0x20000098
 8001020:	20000390 	.word	0x20000390
 8001024:	51eb851f 	.word	0x51eb851f
 8001028:	20000394 	.word	0x20000394
 800102c:	20000398 	.word	0x20000398
 8001030:	200003a0 	.word	0x200003a0
 8001034:	200003a4 	.word	0x200003a4
 8001038:	40000400 	.word	0x40000400
 800103c:	200003ac 	.word	0x200003ac
 8001040:	200003b0 	.word	0x200003b0
 8001044:	200003a8 	.word	0x200003a8

08001048 <Kinematik_Hesapla>:



void Kinematik_Hesapla(float x, float y, float z)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b08e      	sub	sp, #56	@ 0x38
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001052:	edc7 0a02 	vstr	s1, [r7, #8]
 8001056:	ed87 1a01 	vstr	s2, [r7, #4]

    // Bilek pozisyonunun hesaplanması
    //float hipotenus_xy = sqrt(x * x + y * y);

    // Toplam uzunluk hesaplanıyor
    float c = sqrt(x * x + y * y + z * z);
 800105a:	edd7 7a03 	vldr	s15, [r7, #12]
 800105e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001062:	edd7 7a02 	vldr	s15, [r7, #8]
 8001066:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800106a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa0f 	bl	80004a0 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b10 	vmov	d0, r2, r3
 800108a:	f005 fbf7 	bl	800687c <sqrt>
 800108e:	ec53 2b10 	vmov	r2, r3, d0
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fd53 	bl	8000b40 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
    float R = UST_KOL_UZUNLUK + ON_KOL_UZUNLUK;
 800109e:	4bd4      	ldr	r3, [pc, #848]	@ (80013f0 <Kinematik_Hesapla+0x3a8>)
 80010a0:	633b      	str	r3, [r7, #48]	@ 0x30
    float r = fabs(UST_KOL_UZUNLUK - ON_KOL_UZUNLUK);
 80010a2:	4bd4      	ldr	r3, [pc, #848]	@ (80013f4 <Kinematik_Hesapla+0x3ac>)
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Kinematik tanım alanı kontrolü
    if (c > R || c < r) {
 80010a6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	f300 81b2 	bgt.w	800141e <Kinematik_Hesapla+0x3d6>
 80010ba:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010be:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	f100 81a8 	bmi.w	800141e <Kinematik_Hesapla+0x3d6>
        //printf("Hata: C noktası kinematik tanım alanı dışında!\n");
        return;
    }
    // Z eksenine bağlı olarak Teta açısının hesaplanması
    float Teta = (z == 0) ? 0 : asin(z / c) * RAD_TO_DEG;
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d01e      	beq.n	800111a <Kinematik_Hesapla+0xd2>
 80010dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80010e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010e8:	ee16 0a90 	vmov	r0, s13
 80010ec:	f7ff f9d8 	bl	80004a0 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	ec43 2b10 	vmov	d0, r2, r3
 80010f8:	f005 fb1a 	bl	8006730 <asin>
 80010fc:	ec51 0b10 	vmov	r0, r1, d0
 8001100:	a3ab      	add	r3, pc, #684	@ (adr r3, 80013b0 <Kinematik_Hesapla+0x368>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa23 	bl	8000550 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd15 	bl	8000b40 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	e001      	b.n	800111e <Kinematik_Hesapla+0xd6>
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Yörünge açısını hesapla
    int control_base = atan2(y, x) * RAD_TO_DEG;
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	f7ff f9bd 	bl	80004a0 <__aeabi_f2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff f9b8 	bl	80004a0 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b11 	vmov	d1, r2, r3
 8001138:	ec45 4b10 	vmov	d0, r4, r5
 800113c:	f005 fb2c 	bl	8006798 <atan2>
 8001140:	ec51 0b10 	vmov	r0, r1, d0
 8001144:	a39a      	add	r3, pc, #616	@ (adr r3, 80013b0 <Kinematik_Hesapla+0x368>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa01 	bl	8000550 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcab 	bl	8000ab0 <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    if(control_base >260){
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001164:	dd04      	ble.n	8001170 <Kinematik_Hesapla+0x128>
    BaseJoint.target_angle = 260;
 8001166:	4ba4      	ldr	r3, [pc, #656]	@ (80013f8 <Kinematik_Hesapla+0x3b0>)
 8001168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e026      	b.n	80011be <Kinematik_Hesapla+0x176>
    }
    else if(control_base < 10){
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	2b09      	cmp	r3, #9
 8001174:	dc03      	bgt.n	800117e <Kinematik_Hesapla+0x136>
    	BaseJoint.target_angle = 10;
 8001176:	4ba0      	ldr	r3, [pc, #640]	@ (80013f8 <Kinematik_Hesapla+0x3b0>)
 8001178:	220a      	movs	r2, #10
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e01f      	b.n	80011be <Kinematik_Hesapla+0x176>
    }
    else {
    	BaseJoint.target_angle = atan2(y, x) * RAD_TO_DEG;
 800117e:	68b8      	ldr	r0, [r7, #8]
 8001180:	f7ff f98e 	bl	80004a0 <__aeabi_f2d>
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff f989 	bl	80004a0 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	ec43 2b11 	vmov	d1, r2, r3
 8001196:	ec45 4b10 	vmov	d0, r4, r5
 800119a:	f005 fafd 	bl	8006798 <atan2>
 800119e:	ec51 0b10 	vmov	r0, r1, d0
 80011a2:	a383      	add	r3, pc, #524	@ (adr r3, 80013b0 <Kinematik_Hesapla+0x368>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f9d2 	bl	8000550 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fc7c 	bl	8000ab0 <__aeabi_d2iz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a8f      	ldr	r2, [pc, #572]	@ (80013f8 <Kinematik_Hesapla+0x3b0>)
 80011bc:	6013      	str	r3, [r2, #0]
    }

    // Dirsek ve Omuz açılarının hesaplanması
    float cos_Dirsek = fmax(-1.0f, fmin(1.0f, (pow(UST_KOL_UZUNLUK, 2) + pow(ON_KOL_UZUNLUK, 2) - pow(c, 2)) / (2 * UST_KOL_UZUNLUK * ON_KOL_UZUNLUK)));
 80011be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80011c0:	f7ff f96e 	bl	80004a0 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ed9f 1b7b 	vldr	d1, [pc, #492]	@ 80013b8 <Kinematik_Hesapla+0x370>
 80011cc:	ec43 2b10 	vmov	d0, r2, r3
 80011d0:	f005 fae4 	bl	800679c <pow>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	a179      	add	r1, pc, #484	@ (adr r1, 80013c0 <Kinematik_Hesapla+0x378>)
 80011da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011de:	f7fe ffff 	bl	80001e0 <__aeabi_dsub>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a377      	add	r3, pc, #476	@ (adr r3, 80013c8 <Kinematik_Hesapla+0x380>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fad8 	bl	80007a4 <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ec43 2b17 	vmov	d7, r2, r3
 80011fc:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 80013d0 <Kinematik_Hesapla+0x388>
 8001200:	eeb0 0a47 	vmov.f32	s0, s14
 8001204:	eef0 0a67 	vmov.f32	s1, s15
 8001208:	f005 fbac 	bl	8006964 <fmin>
 800120c:	eeb0 7a40 	vmov.f32	s14, s0
 8001210:	eef0 7a60 	vmov.f32	s15, s1
 8001214:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 80013d8 <Kinematik_Hesapla+0x390>
 8001218:	eeb0 0a47 	vmov.f32	s0, s14
 800121c:	eef0 0a67 	vmov.f32	s1, s15
 8001220:	f005 fb76 	bl	8006910 <fmax>
 8001224:	ec53 2b10 	vmov	r2, r3, d0
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fc88 	bl	8000b40 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	623b      	str	r3, [r7, #32]
    float cos_Beta = fmax(-1.0f, fmin(1.0f, (pow(UST_KOL_UZUNLUK, 2) + pow(c, 2) - pow(ON_KOL_UZUNLUK, 2)) / (2 * UST_KOL_UZUNLUK * c)));
 8001234:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001236:	f7ff f933 	bl	80004a0 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80013b8 <Kinematik_Hesapla+0x370>
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f005 faa9 	bl	800679c <pow>
 800124a:	ec51 0b10 	vmov	r0, r1, d0
 800124e:	a364      	add	r3, pc, #400	@ (adr r3, 80013e0 <Kinematik_Hesapla+0x398>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7fe ffc6 	bl	80001e4 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a361      	add	r3, pc, #388	@ (adr r3, 80013e8 <Kinematik_Hesapla+0x3a0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7fe ffbb 	bl	80001e0 <__aeabi_dsub>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001276:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80013fc <Kinematik_Hesapla+0x3b4>
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	ee17 0a90 	vmov	r0, s15
 8001282:	f7ff f90d 	bl	80004a0 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7ff fa89 	bl	80007a4 <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec43 2b17 	vmov	d7, r2, r3
 800129a:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 80013d0 <Kinematik_Hesapla+0x388>
 800129e:	eeb0 0a47 	vmov.f32	s0, s14
 80012a2:	eef0 0a67 	vmov.f32	s1, s15
 80012a6:	f005 fb5d 	bl	8006964 <fmin>
 80012aa:	eeb0 7a40 	vmov.f32	s14, s0
 80012ae:	eef0 7a60 	vmov.f32	s15, s1
 80012b2:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 80013d8 <Kinematik_Hesapla+0x390>
 80012b6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ba:	eef0 0a67 	vmov.f32	s1, s15
 80012be:	f005 fb27 	bl	8006910 <fmax>
 80012c2:	ec53 2b10 	vmov	r2, r3, d0
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc39 	bl	8000b40 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	61fb      	str	r3, [r7, #28]


    if (fabs(cos_Dirsek) > 1 || fabs(cos_Beta) > 1) {
 80012d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d6:	eef0 7ae7 	vabs.f32	s15, s15
 80012da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	f300 809c 	bgt.w	8001422 <Kinematik_Hesapla+0x3da>
 80012ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ee:	eef0 7ae7 	vabs.f32	s15, s15
 80012f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	f300 8090 	bgt.w	8001422 <Kinematik_Hesapla+0x3da>
    	return;
    }

    int control_elbow = acos(cos_Dirsek) * RAD_TO_DEG;
 8001302:	6a38      	ldr	r0, [r7, #32]
 8001304:	f7ff f8cc 	bl	80004a0 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b10 	vmov	d0, r2, r3
 8001310:	f005 f9da 	bl	80066c8 <acos>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	a325      	add	r3, pc, #148	@ (adr r3, 80013b0 <Kinematik_Hesapla+0x368>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f917 	bl	8000550 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbc1 	bl	8000ab0 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
    if(control_elbow > 260){
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001338:	dd04      	ble.n	8001344 <Kinematik_Hesapla+0x2fc>
    	ElbowJoint.target_angle = 260;
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <Kinematik_Hesapla+0x3b8>)
 800133c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e009      	b.n	8001358 <Kinematik_Hesapla+0x310>
    }
    else if(control_elbow <10){
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b09      	cmp	r3, #9
 8001348:	dc03      	bgt.n	8001352 <Kinematik_Hesapla+0x30a>
    	ElbowJoint.target_angle = 10;
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <Kinematik_Hesapla+0x3b8>)
 800134c:	220a      	movs	r2, #10
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e002      	b.n	8001358 <Kinematik_Hesapla+0x310>
    }
    else{
    	ElbowJoint.target_angle = control_elbow;
 8001352:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <Kinematik_Hesapla+0x3b8>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6013      	str	r3, [r2, #0]
    }
    float Beta = acos(cos_Beta) * RAD_TO_DEG;
 8001358:	69f8      	ldr	r0, [r7, #28]
 800135a:	f7ff f8a1 	bl	80004a0 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f005 f9af 	bl	80066c8 <acos>
 800136a:	ec51 0b10 	vmov	r0, r1, d0
 800136e:	a310      	add	r3, pc, #64	@ (adr r3, 80013b0 <Kinematik_Hesapla+0x368>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f8ec 	bl	8000550 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fbde 	bl	8000b40 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	617b      	str	r3, [r7, #20]
    // Mode kontrolü

    		int control_shoulder = Teta + Beta;
 8001388:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001398:	ee17 3a90 	vmov	r3, s15
 800139c:	613b      	str	r3, [r7, #16]
    		if(control_shoulder >260){
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80013a4:	dd30      	ble.n	8001408 <Kinematik_Hesapla+0x3c0>
    			ShoulderJoint.target_angle = 260;
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <Kinematik_Hesapla+0x3bc>)
 80013a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e039      	b.n	8001424 <Kinematik_Hesapla+0x3dc>
 80013b0:	1a63c1f8 	.word	0x1a63c1f8
 80013b4:	404ca5dc 	.word	0x404ca5dc
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40000000 	.word	0x40000000
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40af4e80 	.word	0x40af4e80
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40ade200 	.word	0x40ade200
 80013d0:	00000000 	.word	0x00000000
 80013d4:	3ff00000 	.word	0x3ff00000
 80013d8:	00000000 	.word	0x00000000
 80013dc:	bff00000 	.word	0xbff00000
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4095f900 	.word	0x4095f900
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40a45200 	.word	0x40a45200
 80013f0:	42b10000 	.word	0x42b10000
 80013f4:	41580000 	.word	0x41580000
 80013f8:	20000000 	.word	0x20000000
 80013fc:	42960000 	.word	0x42960000
 8001400:	20000060 	.word	0x20000060
 8001404:	20000030 	.word	0x20000030
    		}
    		else if(control_shoulder <10){
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b09      	cmp	r3, #9
 800140c:	dc03      	bgt.n	8001416 <Kinematik_Hesapla+0x3ce>
    			ShoulderJoint.target_angle = 10;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <Kinematik_Hesapla+0x3e4>)
 8001410:	220a      	movs	r2, #10
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e006      	b.n	8001424 <Kinematik_Hesapla+0x3dc>
    		}
    		else{
    		ShoulderJoint.target_angle = control_shoulder;
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <Kinematik_Hesapla+0x3e4>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e002      	b.n	8001424 <Kinematik_Hesapla+0x3dc>
        return;
 800141e:	bf00      	nop
 8001420:	e000      	b.n	8001424 <Kinematik_Hesapla+0x3dc>
    	return;
 8001422:	bf00      	nop
    		}
}
 8001424:	3738      	adds	r7, #56	@ 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000030 	.word	0x20000030

08001430 <setPWM>:

/* --- PWM Ayarı --- */
void setPWM(TIM_HandleTypeDef *htim, uint32_t channel_1, uint32_t channel_2, int16_t pwmvalue) {
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	b08f      	sub	sp, #60	@ 0x3c
 8001436:	af00      	add	r7, sp, #0
 8001438:	6378      	str	r0, [r7, #52]	@ 0x34
 800143a:	6339      	str	r1, [r7, #48]	@ 0x30
 800143c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800143e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (pwmvalue > 0) {
 8001440:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd74      	ble.n	8001532 <setPWM+0x102>

         // Motor ileri yönde
        __HAL_TIM_SET_COMPARE(htim, channel_1, fabs(pwmvalue));
 8001448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144a:	2b00      	cmp	r3, #0
 800144c:	d113      	bne.n	8001476 <setPWM+0x46>
 800144e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f812 	bl	800047c <__aeabi_i2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	623a      	str	r2, [r7, #32]
 800145e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
 8001464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001466:	681c      	ldr	r4, [r3, #0]
 8001468:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800146c:	f7ff fb48 	bl	8000b00 <__aeabi_d2uiz>
 8001470:	4603      	mov	r3, r0
 8001472:	6363      	str	r3, [r4, #52]	@ 0x34
 8001474:	e040      	b.n	80014f8 <setPWM+0xc8>
 8001476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001478:	2b04      	cmp	r3, #4
 800147a:	d113      	bne.n	80014a4 <setPWM+0x74>
 800147c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fffb 	bl	800047c <__aeabi_i2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	61ba      	str	r2, [r7, #24]
 800148c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001494:	681c      	ldr	r4, [r3, #0]
 8001496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800149a:	f7ff fb31 	bl	8000b00 <__aeabi_d2uiz>
 800149e:	4603      	mov	r3, r0
 80014a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80014a2:	e029      	b.n	80014f8 <setPWM+0xc8>
 80014a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d113      	bne.n	80014d2 <setPWM+0xa2>
 80014aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffe4 	bl	800047c <__aeabi_i2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	613a      	str	r2, [r7, #16]
 80014ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c2:	681c      	ldr	r4, [r3, #0]
 80014c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014c8:	f7ff fb1a 	bl	8000b00 <__aeabi_d2uiz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80014d0:	e012      	b.n	80014f8 <setPWM+0xc8>
 80014d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffd0 	bl	800047c <__aeabi_i2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ea:	681c      	ldr	r4, [r3, #0]
 80014ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f0:	f7ff fb06 	bl	8000b00 <__aeabi_d2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 80014f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d104      	bne.n	8001508 <setPWM+0xd8>
 80014fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
        __HAL_TIM_SET_COMPARE(htim, channel_1, 0);
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
    }
}
 8001506:	e0c3      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 8001508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150a:	2b04      	cmp	r3, #4
 800150c:	d104      	bne.n	8001518 <setPWM+0xe8>
 800150e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	6393      	str	r3, [r2, #56]	@ 0x38
 8001516:	e0bb      	b.n	8001690 <setPWM+0x260>
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	2b08      	cmp	r3, #8
 800151c:	d104      	bne.n	8001528 <setPWM+0xf8>
 800151e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001526:	e0b3      	b.n	8001690 <setPWM+0x260>
 8001528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2300      	movs	r3, #0
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001530:	e0ae      	b.n	8001690 <setPWM+0x260>
    else if (pwmvalue < 0) {
 8001532:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001536:	2b00      	cmp	r3, #0
 8001538:	da71      	bge.n	800161e <setPWM+0x1ee>
        __HAL_TIM_SET_COMPARE(htim, channel_1, 0);
 800153a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <setPWM+0x11a>
 8001540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34
 8001548:	e013      	b.n	8001572 <setPWM+0x142>
 800154a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154c:	2b04      	cmp	r3, #4
 800154e:	d104      	bne.n	800155a <setPWM+0x12a>
 8001550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
 8001558:	e00b      	b.n	8001572 <setPWM+0x142>
 800155a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800155c:	2b08      	cmp	r3, #8
 800155e:	d104      	bne.n	800156a <setPWM+0x13a>
 8001560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001568:	e003      	b.n	8001572 <setPWM+0x142>
 800156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim,channel_2,fabs(pwmvalue));
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d113      	bne.n	80015a0 <setPWM+0x170>
 8001578:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff7d 	bl	800047c <__aeabi_i2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	603a      	str	r2, [r7, #0]
 8001588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001590:	681c      	ldr	r4, [r3, #0]
 8001592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001596:	f7ff fab3 	bl	8000b00 <__aeabi_d2uiz>
 800159a:	4603      	mov	r3, r0
 800159c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800159e:	e077      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim,channel_2,fabs(pwmvalue));
 80015a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d112      	bne.n	80015cc <setPWM+0x19c>
 80015a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff66 	bl	800047c <__aeabi_i2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4615      	mov	r5, r2
 80015b6:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80015ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	4628      	mov	r0, r5
 80015c0:	4631      	mov	r1, r6
 80015c2:	f7ff fa9d 	bl	8000b00 <__aeabi_d2uiz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80015ca:	e061      	b.n	8001690 <setPWM+0x260>
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <setPWM+0x1c8>
 80015d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff50 	bl	800047c <__aeabi_i2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4692      	mov	sl, r2
 80015e2:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80015e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e8:	681c      	ldr	r4, [r3, #0]
 80015ea:	4650      	mov	r0, sl
 80015ec:	4659      	mov	r1, fp
 80015ee:	f7ff fa87 	bl	8000b00 <__aeabi_d2uiz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80015f6:	e04b      	b.n	8001690 <setPWM+0x260>
 80015f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff3d 	bl	800047c <__aeabi_i2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4690      	mov	r8, r2
 8001608:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800160c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160e:	681c      	ldr	r4, [r3, #0]
 8001610:	4640      	mov	r0, r8
 8001612:	4649      	mov	r1, r9
 8001614:	f7ff fa74 	bl	8000b00 <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800161c:	e038      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim, channel_1, 0);
 800161e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <setPWM+0x1fe>
 8001624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	@ 0x34
 800162c:	e013      	b.n	8001656 <setPWM+0x226>
 800162e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001630:	2b04      	cmp	r3, #4
 8001632:	d104      	bne.n	800163e <setPWM+0x20e>
 8001634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	6393      	str	r3, [r2, #56]	@ 0x38
 800163c:	e00b      	b.n	8001656 <setPWM+0x226>
 800163e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001640:	2b08      	cmp	r3, #8
 8001642:	d104      	bne.n	800164e <setPWM+0x21e>
 8001644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800164c:	e003      	b.n	8001656 <setPWM+0x226>
 800164e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <setPWM+0x236>
 800165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001664:	e014      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	2b04      	cmp	r3, #4
 800166a:	d104      	bne.n	8001676 <setPWM+0x246>
 800166c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001674:	e00c      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 8001676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001678:	2b08      	cmp	r3, #8
 800167a:	d104      	bne.n	8001686 <setPWM+0x256>
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2300      	movs	r3, #0
 8001682:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001684:	e004      	b.n	8001690 <setPWM+0x260>
        __HAL_TIM_SET_COMPARE(htim,channel_2,0);
 8001686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2300      	movs	r3, #0
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800168e:	e7ff      	b.n	8001690 <setPWM+0x260>
 8001690:	bf00      	nop
 8001692:	373c      	adds	r7, #60	@ 0x3c
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800169c <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Joint *joint, int dt) {
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    float error = joint->target_angle - joint->current_angle;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b8:	edc7 7a03 	vstr	s15, [r7, #12]
    joint->integral += error /dt;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80016d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e2:	ee17 2a90 	vmov	r2, s15
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60da      	str	r2, [r3, #12]
    float derivative = (error - joint->previous_error) * dt;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a02 	vstr	s15, [r7, #8]
    joint->previous_error = error;
 8001710:	edd7 7a03 	vldr	s15, [r7, #12]
 8001714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001718:	ee17 2a90 	vmov	r2, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]

    joint->output = joint->Kp * error + joint->Ki * joint->integral + joint->Kd * derivative;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	ed93 7a08 	vldr	s14, [r3, #32]
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800174e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175e:	ee17 2a90 	vmov	r2, s15
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]

    if (joint->output > MAX_PWM) joint->output = MAX_PWM;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800176e:	dd03      	ble.n	8001778 <calculatePID+0xdc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001776:	611a      	str	r2, [r3, #16]
    if (joint->output < MIN_PWM) joint->output = MIN_PWM;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001780:	da02      	bge.n	8001788 <calculatePID+0xec>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <calculatePID+0x108>)
 8001786:	611a      	str	r2, [r3, #16]

    return joint->output;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	fffffc18 	.word	0xfffffc18

080017a8 <Motor_Kontrol>:

void Motor_Kontrol(Joint *joint, uint32_t adc_value)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
    joint->current_angle = adc_value;
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
    //joint->current_angle = 270.0f * joint->current_angle / 4096.0f;  // 0-270 arası açıya dönüştür

	        // PID kontrolünü çağırarak motor hızını hesapla
    		dt = HAL_GetTick() - dt;
 80017b8:	f001 f920 	bl	80029fc <HAL_GetTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a13      	ldr	r2, [pc, #76]	@ (800180c <Motor_Kontrol+0x64>)
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <Motor_Kontrol+0x64>)
 80017c8:	601a      	str	r2, [r3, #0]
	        int16_t pwmvalue = calculatePID(joint,dt);
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <Motor_Kontrol+0x64>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff63 	bl	800169c <calculatePID>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	81fb      	strh	r3, [r7, #14]
	        dt = HAL_GetTick();
 80017e4:	f001 f90a 	bl	80029fc <HAL_GetTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <Motor_Kontrol+0x64>)
 80017ee:	601a      	str	r2, [r3, #0]

	        setPWM(joint->htim, joint->channel_1, joint->channel_2, pwmvalue);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6958      	ldr	r0, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6999      	ldr	r1, [r3, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001800:	f7ff fe16 	bl	8001430 <setPWM>
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000038c 	.word	0x2000038c

08001810 <HAL_ADC_ConvCpltCallback>:

/******************ÖNEMLİ*****************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	base_joint_degree = 270.0f *adcValues[0]/4095.0f;// adcden gelen veri dereceye çevirilecek
 8001818:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <HAL_ADC_ConvCpltCallback+0x140>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001954 <HAL_ADC_ConvCpltCallback+0x144>
 8001828:	ee27 7a87 	vmul.f32	s14, s15, s14
 800182c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001958 <HAL_ADC_ConvCpltCallback+0x148>
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001838:	ee17 3a90 	vmov	r3, s15
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <HAL_ADC_ConvCpltCallback+0x14c>)
 8001840:	801a      	strh	r2, [r3, #0]
	shoulder_joint_degree = 270.0f * adcValues[1]/4095.0f;
 8001842:	4b43      	ldr	r3, [pc, #268]	@ (8001950 <HAL_ADC_ConvCpltCallback+0x140>)
 8001844:	885b      	ldrh	r3, [r3, #2]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001954 <HAL_ADC_ConvCpltCallback+0x144>
 8001852:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001856:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001958 <HAL_ADC_ConvCpltCallback+0x148>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001862:	ee17 3a90 	vmov	r3, s15
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_ADC_ConvCpltCallback+0x150>)
 800186a:	801a      	strh	r2, [r3, #0]
	elbow_joint_degree = 270.0f * adcValues[2]/4095.0f;
 800186c:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <HAL_ADC_ConvCpltCallback+0x140>)
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001878:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001954 <HAL_ADC_ConvCpltCallback+0x144>
 800187c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001880:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001958 <HAL_ADC_ConvCpltCallback+0x148>
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 3a90 	vmov	r3, s15
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_ADC_ConvCpltCallback+0x154>)
 8001894:	801a      	strh	r2, [r3, #0]
	x += (float)duty_cycle1 /10000;
 8001896:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_ADC_ConvCpltCallback+0x158>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800196c <HAL_ADC_ConvCpltCallback+0x15c>
 80018a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018aa:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <HAL_ADC_ConvCpltCallback+0x160>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <HAL_ADC_ConvCpltCallback+0x160>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]
		  y += (float)duty_cycle3 / 10000;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <HAL_ADC_ConvCpltCallback+0x164>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800196c <HAL_ADC_ConvCpltCallback+0x15c>
 80018ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_ADC_ConvCpltCallback+0x168>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_ADC_ConvCpltCallback+0x168>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
		  z += (float)duty_cycle2 / 10000;
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <HAL_ADC_ConvCpltCallback+0x16c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800196c <HAL_ADC_ConvCpltCallback+0x15c>
 80018ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_ADC_ConvCpltCallback+0x170>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_ADC_ConvCpltCallback+0x170>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
		  Kinematik_Hesapla(x, y, z); //gripperı paralel olarak hedefe götürür
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_ADC_ConvCpltCallback+0x160>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_ADC_ConvCpltCallback+0x168>)
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <HAL_ADC_ConvCpltCallback+0x170>)
 8001910:	edd3 6a00 	vldr	s13, [r3]
 8001914:	eeb0 1a66 	vmov.f32	s2, s13
 8001918:	eef0 0a47 	vmov.f32	s1, s14
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	f7ff fb92 	bl	8001048 <Kinematik_Hesapla>
		  	 Motor_Kontrol(&BaseJoint, base_joint_degree);
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_ADC_ConvCpltCallback+0x14c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4816      	ldr	r0, [pc, #88]	@ (8001984 <HAL_ADC_ConvCpltCallback+0x174>)
 800192c:	f7ff ff3c 	bl	80017a8 <Motor_Kontrol>
		  	 Motor_Kontrol(&ShoulderJoint, shoulder_joint_degree);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_ADC_ConvCpltCallback+0x150>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <HAL_ADC_ConvCpltCallback+0x178>)
 8001938:	f7ff ff36 	bl	80017a8 <Motor_Kontrol>
		  	 Motor_Kontrol(&ElbowJoint, elbow_joint_degree);
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_ADC_ConvCpltCallback+0x154>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	4812      	ldr	r0, [pc, #72]	@ (800198c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001944:	f7ff ff30 	bl	80017a8 <Motor_Kontrol>
// HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  // Process the data
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000384 	.word	0x20000384
 8001954:	43870000 	.word	0x43870000
 8001958:	457ff000 	.word	0x457ff000
 800195c:	2000037c 	.word	0x2000037c
 8001960:	2000037e 	.word	0x2000037e
 8001964:	20000380 	.word	0x20000380
 8001968:	20000394 	.word	0x20000394
 800196c:	461c4000 	.word	0x461c4000
 8001970:	200003b4 	.word	0x200003b4
 8001974:	200003a8 	.word	0x200003a8
 8001978:	20000090 	.word	0x20000090
 800197c:	200003a4 	.word	0x200003a4
 8001980:	20000094 	.word	0x20000094
 8001984:	20000000 	.word	0x20000000
 8001988:	20000030 	.word	0x20000030
 800198c:	20000060 	.word	0x20000060

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001994:	f000 ffcc 	bl	8002930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001998:	f000 f83a 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f000 fc10 	bl	80021c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a0:	f000 fbee 	bl	8002180 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019a4:	f000 fbc2 	bl	800212c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80019a8:	f000 f90a 	bl	8001bc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019ac:	f000 f994 	bl	8001cd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019b0:	f000 fa1a 	bl	8001de8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019b4:	f000 faa0 	bl	8001ef8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80019b8:	f000 fb36 	bl	8002028 <MX_TIM5_Init>
  MX_ADC1_Init();
 80019bc:	f000 f892 	bl	8001ae4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019c0:	2100      	movs	r1, #0
 80019c2:	480f      	ldr	r0, [pc, #60]	@ (8001a00 <main+0x70>)
 80019c4:	f003 f8a2 	bl	8004b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019c8:	2104      	movs	r1, #4
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <main+0x70>)
 80019cc:	f003 f89e 	bl	8004b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019d0:	2108      	movs	r1, #8
 80019d2:	480b      	ldr	r0, [pc, #44]	@ (8001a00 <main+0x70>)
 80019d4:	f003 f89a 	bl	8004b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019d8:	210c      	movs	r1, #12
 80019da:	4809      	ldr	r0, [pc, #36]	@ (8001a00 <main+0x70>)
 80019dc:	f003 f896 	bl	8004b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <main+0x74>)
 80019e4:	f003 f892 	bl	8004b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 80019e8:	2104      	movs	r1, #4
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <main+0x74>)
 80019ec:	f003 f88e 	bl	8004b0c <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, adcValues, 3);
 80019f0:	2203      	movs	r2, #3
 80019f2:	4905      	ldr	r1, [pc, #20]	@ (8001a08 <main+0x78>)
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <main+0x7c>)
 80019f6:	f001 f961 	bl	8002cbc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019fa:	bf00      	nop
 80019fc:	e7fd      	b.n	80019fa <main+0x6a>
 80019fe:	bf00      	nop
 8001a00:	200002a4 	.word	0x200002a4
 8001a04:	200002ec 	.word	0x200002ec
 8001a08:	20000384 	.word	0x20000384
 8001a0c:	20000124 	.word	0x20000124

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	@ 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	@ 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fe20 	bl	8006664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a74:	2310      	movs	r3, #16
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a80:	2310      	movs	r3, #16
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 faf8 	bl	800408c <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aa2:	f000 fbfb 	bl	800229c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fd5a 	bl	800457c <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ace:	f000 fbe5 	bl	800229c <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3750      	adds	r7, #80	@ 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001af8:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb8 <MX_ADC1_Init+0xd4>)
 8001afa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001afe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b16:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b26:	4a25      	ldr	r2, [pc, #148]	@ (8001bbc <MX_ADC1_Init+0xd8>)
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001b30:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b32:	2203      	movs	r2, #3
 8001b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b44:	481b      	ldr	r0, [pc, #108]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b46:	f000 ff65 	bl	8002a14 <HAL_ADC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 fba4 	bl	800229c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b54:	2306      	movs	r3, #6
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4813      	ldr	r0, [pc, #76]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b66:	f001 f9b7 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b70:	f000 fb94 	bl	800229c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b74:	2307      	movs	r3, #7
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b82:	f001 f9a9 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b8c:	f000 fb86 	bl	800229c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b90:	230b      	movs	r3, #11
 8001b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b94:	2303      	movs	r3, #3
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_ADC1_Init+0xd0>)
 8001b9e:	f001 f99b 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ba8:	f000 fb78 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000124 	.word	0x20000124
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	0f000001 	.word	0x0f000001

08001bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bec:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001bee:	4a39      	ldr	r2, [pc, #228]	@ (8001cd4 <MX_TIM1_Init+0x114>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001bf2:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001bf4:	2231      	movs	r2, #49	@ 0x31
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c18:	482d      	ldr	r0, [pc, #180]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c1a:	f003 f827 	bl	8004c6c <HAL_TIM_IC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001c24:	f000 fb3a 	bl	800229c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c2c:	2350      	movs	r3, #80	@ 0x50
 8001c2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4823      	ldr	r0, [pc, #140]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c44:	f003 fc91 	bl	800556a <HAL_TIM_SlaveConfigSynchro>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c4e:	f000 fb25 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4819      	ldr	r0, [pc, #100]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c6c:	f003 fa58 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001c76:	f000 fb11 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4811      	ldr	r0, [pc, #68]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001c8c:	f003 fa48 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001c96:	f000 fb01 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480a      	ldr	r0, [pc, #40]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001ca8:	f004 f996 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001cb2:	f000 faf3 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001cba:	f003 f827 	bl	8004d0c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <MX_TIM1_Init+0x110>)
 8001cc2:	f003 f823 	bl	8004d0c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	@ 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001cc 	.word	0x200001cc
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	@ 0x30
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d04:	4b37      	ldr	r3, [pc, #220]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d0c:	4b35      	ldr	r3, [pc, #212]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b34      	ldr	r3, [pc, #208]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d18:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d26:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d2c:	482d      	ldr	r0, [pc, #180]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d2e:	f002 ff9d 	bl	8004c6c <HAL_TIM_IC_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d38:	f000 fab0 	bl	800229c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d40:	2350      	movs	r3, #80	@ 0x50
 8001d42:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4823      	ldr	r0, [pc, #140]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d58:	f003 fc07 	bl	800556a <HAL_TIM_SlaveConfigSynchro>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d62:	f000 fa9b 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4819      	ldr	r0, [pc, #100]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001d80:	f003 f9ce 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d8a:	f000 fa87 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d92:	2302      	movs	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4811      	ldr	r0, [pc, #68]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001da0:	f003 f9be 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001daa:	f000 fa77 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001dbc:	f004 f90c 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001dc6:	f000 fa69 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001dce:	f002 ff9d 	bl	8004d0c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <MX_TIM2_Init+0x10c>)
 8001dd6:	f002 ff99 	bl	8004d0c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	@ 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000214 	.word	0x20000214

08001de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	@ 0x30
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e16:	4a37      	ldr	r2, [pc, #220]	@ (8001ef4 <MX_TIM3_Init+0x10c>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e1c:	2231      	movs	r2, #49	@ 0x31
 8001e1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e26:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e3a:	482d      	ldr	r0, [pc, #180]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e3c:	f002 ff16 	bl	8004c6c <HAL_TIM_IC_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001e46:	f000 fa29 	bl	800229c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e4e:	2350      	movs	r3, #80	@ 0x50
 8001e50:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4822      	ldr	r0, [pc, #136]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e66:	f003 fb80 	bl	800556a <HAL_TIM_SlaveConfigSynchro>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e70:	f000 fa14 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4818      	ldr	r0, [pc, #96]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001e8e:	f003 f947 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e98:	f000 fa00 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001eae:	f003 f937 	bl	8005120 <HAL_TIM_IC_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001eb8:	f000 f9f0 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4809      	ldr	r0, [pc, #36]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001eca:	f004 f885 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001ed4:	f000 f9e2 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001edc:	f002 ff16 	bl	8004d0c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <MX_TIM3_Init+0x108>)
 8001ee4:	f002 ff12 	bl	8004d0c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3730      	adds	r7, #48	@ 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000025c 	.word	0x2000025c
 8001ef4:	40000400 	.word	0x40000400

08001ef8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	@ 0x38
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	615a      	str	r2, [r3, #20]
 8001f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002024 <MX_TIM4_Init+0x12c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f30:	2227      	movs	r2, #39	@ 0x27
 8001f32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001f3a:	4b39      	ldr	r3, [pc, #228]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b37      	ldr	r3, [pc, #220]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f4e:	4834      	ldr	r0, [pc, #208]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f50:	f002 fd34 	bl	80049bc <HAL_TIM_Base_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f5a:	f000 f99f 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	482d      	ldr	r0, [pc, #180]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f6c:	f003 fa36 	bl	80053dc <HAL_TIM_ConfigClockSource>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f76:	f000 f991 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f7a:	4829      	ldr	r0, [pc, #164]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f7c:	f002 fd6d 	bl	8004a5a <HAL_TIM_PWM_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f86:	f000 f989 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4619      	mov	r1, r3
 8001f98:	4821      	ldr	r0, [pc, #132]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001f9a:	f004 f81d 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001fa4:	f000 f97a 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa8:	2360      	movs	r3, #96	@ 0x60
 8001faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4818      	ldr	r0, [pc, #96]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001fc0:	f003 f94a 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001fca:	f000 f967 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4812      	ldr	r0, [pc, #72]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001fd6:	f003 f93f 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001fe0:	f000 f95c 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	@ (8002020 <MX_TIM4_Init+0x128>)
 8001fec:	f003 f934 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001ff6:	f000 f951 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	4619      	mov	r1, r3
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <MX_TIM4_Init+0x128>)
 8002002:	f003 f929 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800200c:	f000 f946 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002010:	4803      	ldr	r0, [pc, #12]	@ (8002020 <MX_TIM4_Init+0x128>)
 8002012:	f000 fb27 	bl	8002664 <HAL_TIM_MspPostInit>

}
 8002016:	bf00      	nop
 8002018:	3738      	adds	r7, #56	@ 0x38
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200002a4 	.word	0x200002a4
 8002024:	40000800 	.word	0x40000800

08002028 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	@ 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <MX_TIM5_Init+0xfc>)
 800205a:	4a33      	ldr	r2, [pc, #204]	@ (8002128 <MX_TIM5_Init+0x100>)
 800205c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 800205e:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002060:	2227      	movs	r2, #39	@ 0x27
 8002062:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800206a:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <MX_TIM5_Init+0xfc>)
 800206c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002070:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <MX_TIM5_Init+0xfc>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800207e:	4829      	ldr	r0, [pc, #164]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002080:	f002 fc9c 	bl	80049bc <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800208a:	f000 f907 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002098:	4619      	mov	r1, r3
 800209a:	4822      	ldr	r0, [pc, #136]	@ (8002124 <MX_TIM5_Init+0xfc>)
 800209c:	f003 f99e 	bl	80053dc <HAL_TIM_ConfigClockSource>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80020a6:	f000 f8f9 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020aa:	481e      	ldr	r0, [pc, #120]	@ (8002124 <MX_TIM5_Init+0xfc>)
 80020ac:	f002 fcd5 	bl	8004a5a <HAL_TIM_PWM_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020b6:	f000 f8f1 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4619      	mov	r1, r3
 80020c8:	4816      	ldr	r0, [pc, #88]	@ (8002124 <MX_TIM5_Init+0xfc>)
 80020ca:	f003 ff85 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020d4:	f000 f8e2 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d8:	2360      	movs	r3, #96	@ 0x60
 80020da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	480d      	ldr	r0, [pc, #52]	@ (8002124 <MX_TIM5_Init+0xfc>)
 80020f0:	f003 f8b2 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020fa:	f000 f8cf 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2204      	movs	r2, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4807      	ldr	r0, [pc, #28]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002106:	f003 f8a7 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002110:	f000 f8c4 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <MX_TIM5_Init+0xfc>)
 8002116:	f000 faa5 	bl	8002664 <HAL_TIM_MspPostInit>

}
 800211a:	bf00      	nop
 800211c:	3738      	adds	r7, #56	@ 0x38
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200002ec 	.word	0x200002ec
 8002128:	40000c00 	.word	0x40000c00

0800212c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <MX_USART2_UART_Init+0x50>)
 8002134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800213c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002164:	f003 ffba 	bl	80060dc <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216e:	f000 f895 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000334 	.word	0x20000334
 800217c:	40004400 	.word	0x40004400

08002180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <MX_DMA_Init+0x3c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <MX_DMA_Init+0x3c>)
 8002190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <MX_DMA_Init+0x3c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2038      	movs	r0, #56	@ 0x38
 80021a8:	f001 fa2b 	bl	8003602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021ac:	2038      	movs	r0, #56	@ 0x38
 80021ae:	f001 fa44 	bl	800363a <HAL_NVIC_EnableIRQ>

}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	@ 0x28
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <MX_GPIO_Init+0xd0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <MX_GPIO_Init+0xd0>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <MX_GPIO_Init+0xd0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <MX_GPIO_Init+0xd0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a25      	ldr	r2, [pc, #148]	@ (8002290 <MX_GPIO_Init+0xd0>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <MX_GPIO_Init+0xd0>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_GPIO_Init+0xd0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2120      	movs	r1, #32
 800224a:	4812      	ldr	r0, [pc, #72]	@ (8002294 <MX_GPIO_Init+0xd4>)
 800224c:	f001 ff04 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002256:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480c      	ldr	r0, [pc, #48]	@ (8002298 <MX_GPIO_Init+0xd8>)
 8002268:	f001 fd72 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800226c:	2320      	movs	r3, #32
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4804      	ldr	r0, [pc, #16]	@ (8002294 <MX_GPIO_Init+0xd4>)
 8002284:	f001 fd64 	bl	8003d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	@ 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020800 	.word	0x40020800

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <Error_Handler+0x8>

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022e6:	2007      	movs	r0, #7
 80022e8:	f001 f980 	bl	80035ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a40      	ldr	r2, [pc, #256]	@ (8002418 <HAL_ADC_MspInit+0x120>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d179      	bne.n	800240e <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a3e      	ldr	r2, [pc, #248]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_ADC_MspInit+0x124>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b38      	ldr	r3, [pc, #224]	@ (800241c <HAL_ADC_MspInit+0x124>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a37      	ldr	r2, [pc, #220]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b35      	ldr	r3, [pc, #212]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a30      	ldr	r2, [pc, #192]	@ (800241c <HAL_ADC_MspInit+0x124>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b2e      	ldr	r3, [pc, #184]	@ (800241c <HAL_ADC_MspInit+0x124>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = elbow_joint_Pin;
 800236e:	2302      	movs	r3, #2
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002372:	2303      	movs	r3, #3
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(elbow_joint_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4827      	ldr	r0, [pc, #156]	@ (8002420 <HAL_ADC_MspInit+0x128>)
 8002382:	f001 fce5 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = base_joint_Pin|shoulder_joint_Pin;
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4822      	ldr	r0, [pc, #136]	@ (8002424 <HAL_ADC_MspInit+0x12c>)
 800239a:	f001 fcd9 	bl	8003d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_ADC_MspInit+0x134>)
 80023a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023e2:	4811      	ldr	r0, [pc, #68]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023e4:	f001 f944 	bl	8003670 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80023ee:	f7ff ff55 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80023f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <HAL_ADC_MspInit+0x130>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2012      	movs	r0, #18
 8002404:	f001 f8fd 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002408:	2012      	movs	r0, #18
 800240a:	f001 f916 	bl	800363a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	@ 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40012000 	.word	0x40012000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020800 	.word	0x40020800
 8002424:	40020000 	.word	0x40020000
 8002428:	2000016c 	.word	0x2000016c
 800242c:	40026410 	.word	0x40026410

08002430 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a64      	ldr	r2, [pc, #400]	@ (80025e0 <HAL_TIM_IC_MspInit+0x1b0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d14d      	bne.n	80024ee <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	4a62      	ldr	r2, [pc, #392]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6453      	str	r3, [r2, #68]	@ 0x44
 8002462:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	4b5c      	ldr	r3, [pc, #368]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b59      	ldr	r3, [pc, #356]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800248a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800249c:	2301      	movs	r3, #1
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a4:	4619      	mov	r1, r3
 80024a6:	4850      	ldr	r0, [pc, #320]	@ (80025e8 <HAL_TIM_IC_MspInit+0x1b8>)
 80024a8:	f001 fc52 	bl	8003d50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2018      	movs	r0, #24
 80024b2:	f001 f8a6 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024b6:	2018      	movs	r0, #24
 80024b8:	f001 f8bf 	bl	800363a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2019      	movs	r0, #25
 80024c2:	f001 f89e 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024c6:	2019      	movs	r0, #25
 80024c8:	f001 f8b7 	bl	800363a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	201a      	movs	r0, #26
 80024d2:	f001 f896 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024d6:	201a      	movs	r0, #26
 80024d8:	f001 f8af 	bl	800363a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	201b      	movs	r0, #27
 80024e2:	f001 f88e 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024e6:	201b      	movs	r0, #27
 80024e8:	f001 f8a7 	bl	800363a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ec:	e073      	b.n	80025d6 <HAL_TIM_IC_MspInit+0x1a6>
  else if(htim_ic->Instance==TIM2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f6:	d135      	bne.n	8002564 <HAL_TIM_IC_MspInit+0x134>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	4a38      	ldr	r2, [pc, #224]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6413      	str	r3, [r2, #64]	@ 0x40
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	@ 0x30
 8002524:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002542:	2301      	movs	r3, #1
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	4826      	ldr	r0, [pc, #152]	@ (80025e8 <HAL_TIM_IC_MspInit+0x1b8>)
 800254e:	f001 fbff 	bl	8003d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	201c      	movs	r0, #28
 8002558:	f001 f853 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800255c:	201c      	movs	r0, #28
 800255e:	f001 f86c 	bl	800363a <HAL_NVIC_EnableIRQ>
}
 8002562:	e038      	b.n	80025d6 <HAL_TIM_IC_MspInit+0x1a6>
  else if(htim_ic->Instance==TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a20      	ldr	r2, [pc, #128]	@ (80025ec <HAL_TIM_IC_MspInit+0x1bc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d133      	bne.n	80025d6 <HAL_TIM_IC_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b1c      	ldr	r3, [pc, #112]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a1b      	ldr	r2, [pc, #108]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <HAL_TIM_IC_MspInit+0x1b4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025a6:	2340      	movs	r3, #64	@ 0x40
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025b6:	2302      	movs	r3, #2
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	480b      	ldr	r0, [pc, #44]	@ (80025f0 <HAL_TIM_IC_MspInit+0x1c0>)
 80025c2:	f001 fbc5 	bl	8003d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	201d      	movs	r0, #29
 80025cc:	f001 f819 	bl	8003602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025d0:	201d      	movs	r0, #29
 80025d2:	f001 f832 	bl	800363a <HAL_NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3738      	adds	r7, #56	@ 0x38
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40020800 	.word	0x40020800

080025f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <HAL_TIM_Base_MspInit+0x64>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a13      	ldr	r2, [pc, #76]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002622:	e012      	b.n	800264a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10d      	bne.n	800264a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6413      	str	r3, [r2, #64]	@ 0x40
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40000800 	.word	0x40000800
 800265c:	40023800 	.word	0x40023800
 8002660:	40000c00 	.word	0x40000c00

08002664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_TIM_MspPostInit+0xb0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11f      	bne.n	80026c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = base_right_Pin|base_left_Pin|shd_right_Pin|shd_left_Pin;
 80026a2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80026a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026b4:	2302      	movs	r3, #2
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	4817      	ldr	r0, [pc, #92]	@ (800271c <HAL_TIM_MspPostInit+0xb8>)
 80026c0:	f001 fb46 	bl	8003d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80026c4:	e022      	b.n	800270c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <HAL_TIM_MspPostInit+0xbc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d11d      	bne.n	800270c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_TIM_MspPostInit+0xb4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = elbow_right_Pin|elbow_left_Pin;
 80026ec:	2303      	movs	r3, #3
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026fc:	2302      	movs	r3, #2
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4807      	ldr	r0, [pc, #28]	@ (8002724 <HAL_TIM_MspPostInit+0xc0>)
 8002708:	f001 fb22 	bl	8003d50 <HAL_GPIO_Init>
}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	@ 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40000800 	.word	0x40000800
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40020000 	.word	0x40020000

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_UART_MspInit+0x84>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12b      	bne.n	80027a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 8002754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <HAL_UART_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002782:	230c      	movs	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002792:	2307      	movs	r3, #7
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <HAL_UART_MspInit+0x8c>)
 800279e:	f001 fad7 	bl	8003d50 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	@ 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40004400 	.word	0x40004400
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <NMI_Handler+0x4>

080027c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <MemManage_Handler+0x4>

080027d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <UsageFault_Handler+0x4>

080027e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280e:	f000 f8e1 	bl	80029d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <ADC_IRQHandler+0x10>)
 800281e:	f000 f93c 	bl	8002a9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000124 	.word	0x20000124

0800282c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002832:	f002 fb85 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200001cc 	.word	0x200001cc

08002840 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002846:	f002 fb7b 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200001cc 	.word	0x200001cc

08002854 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800285a:	f002 fb71 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200001cc 	.word	0x200001cc

08002868 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM1_CC_IRQHandler+0x10>)
 800286e:	f002 fb67 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200001cc 	.word	0x200001cc

0800287c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <TIM2_IRQHandler+0x10>)
 8002882:	f002 fb5d 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000214 	.word	0x20000214

08002890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002894:	4802      	ldr	r0, [pc, #8]	@ (80028a0 <TIM3_IRQHandler+0x10>)
 8002896:	f002 fb53 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000025c 	.word	0x2000025c

080028a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028a8:	4802      	ldr	r0, [pc, #8]	@ (80028b4 <DMA2_Stream0_IRQHandler+0x10>)
 80028aa:	f000 ffe7 	bl	800387c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000016c 	.word	0x2000016c

080028b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <SystemInit+0x20>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <SystemInit+0x20>)
 80028c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002914 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028e0:	f7ff ffea 	bl	80028b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e6:	490d      	ldr	r1, [pc, #52]	@ (800291c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f003 feb9 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290e:	f7ff f83f 	bl	8001990 <main>
  bx  lr    
 8002912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002920:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 8002924:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002928:	200004f4 	.word	0x200004f4

0800292c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800292c:	e7fe      	b.n	800292c <DMA1_Stream0_IRQHandler>
	...

08002930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <HAL_Init+0x40>)
 800293a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_Init+0x40>)
 8002946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_Init+0x40>)
 8002952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002958:	2003      	movs	r0, #3
 800295a:	f000 fe47 	bl	80035ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f000 f808 	bl	8002974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002964:	f7ff fca0 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00

08002974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_InitTick+0x54>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_InitTick+0x58>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800298a:	fbb3 f3f1 	udiv	r3, r3, r1
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fe5f 	bl	8003656 <HAL_SYSTICK_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00e      	b.n	80029c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d80a      	bhi.n	80029be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a8:	2200      	movs	r2, #0
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f000 fe27 	bl	8003602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b4:	4a06      	ldr	r2, [pc, #24]	@ (80029d0 <HAL_InitTick+0x5c>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000098 	.word	0x20000098
 80029cc:	200000a0 	.word	0x200000a0
 80029d0:	2000009c 	.word	0x2000009c

080029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_IncTick+0x20>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_IncTick+0x24>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_IncTick+0x24>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200000a0 	.word	0x200000a0
 80029f8:	200003b8 	.word	0x200003b8

080029fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002a00:	4b03      	ldr	r3, [pc, #12]	@ (8002a10 <HAL_GetTick+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	200003b8 	.word	0x200003b8

08002a14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e033      	b.n	8002a92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fc60 	bl	80022f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d118      	bne.n	8002a84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a5a:	f023 0302 	bic.w	r3, r3, #2
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fb68 	bl	800313c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a82:	e001      	b.n	8002a88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d049      	beq.n	8002b64 <HAL_ADC_IRQHandler+0xca>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d046      	beq.n	8002b64 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d12b      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d127      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d119      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0220 	bic.w	r2, r2, #32
 8002b2e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fe5b 	bl	8001810 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0212 	mvn.w	r2, #18
 8002b62:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d057      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x190>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d054      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d139      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d12b      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d124      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11d      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d119      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bf4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fc0c 	bl	8003438 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 020c 	mvn.w	r2, #12
 8002c28:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c38:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x1d6>
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d014      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10d      	bne.n	8002c70 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f925 	bl	8002eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0201 	mvn.w	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x218>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0220 	mvn.w	r2, #32
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f90e 	bl	8002ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0220 	mvn.w	r2, #32
 8002cb0:	601a      	str	r2, [r3, #0]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Start_DMA+0x1e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0ce      	b.n	8002e78 <HAL_ADC_Start_DMA+0x1bc>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d018      	beq.n	8002d22 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d00:	4b5f      	ldr	r3, [pc, #380]	@ (8002e80 <HAL_ADC_Start_DMA+0x1c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <HAL_ADC_Start_DMA+0x1c8>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0c9a      	lsrs	r2, r3, #18
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d14:	e002      	b.n	8002d1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d30:	d107      	bne.n	8002d42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 8086 	bne.w	8002e5e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d90:	d106      	bne.n	8002da0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f023 0206 	bic.w	r2, r3, #6
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d9e:	e002      	b.n	8002da6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dae:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_ADC_Start_DMA+0x1cc>)
 8002db0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	4a35      	ldr	r2, [pc, #212]	@ (8002e8c <HAL_ADC_Start_DMA+0x1d0>)
 8002db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	4a34      	ldr	r2, [pc, #208]	@ (8002e90 <HAL_ADC_Start_DMA+0x1d4>)
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	4a33      	ldr	r2, [pc, #204]	@ (8002e94 <HAL_ADC_Start_DMA+0x1d8>)
 8002dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002de2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	334c      	adds	r3, #76	@ 0x4c
 8002dfe:	4619      	mov	r1, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f000 fce2 	bl	80037cc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10f      	bne.n	8002e34 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d129      	bne.n	8002e76 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e020      	b.n	8002e76 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_ADC_Start_DMA+0x1dc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d11b      	bne.n	8002e76 <HAL_ADC_Start_DMA+0x1ba>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d114      	bne.n	8002e76 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e00b      	b.n	8002e76 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f043 0210 	orr.w	r2, r3, #16
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000098 	.word	0x20000098
 8002e84:	431bde83 	.word	0x431bde83
 8002e88:	40012300 	.word	0x40012300
 8002e8c:	08003335 	.word	0x08003335
 8002e90:	080033ef 	.word	0x080033ef
 8002e94:	0800340b 	.word	0x0800340b
 8002e98:	40012000 	.word	0x40012000

08002e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e113      	b.n	800311c <HAL_ADC_ConfigChannel+0x244>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d925      	bls.n	8002f50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43da      	mvns	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	400a      	ands	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4403      	add	r3, r0
 8002f42:	3b1e      	subs	r3, #30
 8002f44:	409a      	lsls	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	e022      	b.n	8002f96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	2207      	movs	r2, #7
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6919      	ldr	r1, [r3, #16]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4618      	mov	r0, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4403      	add	r3, r0
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d824      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b05      	subs	r3, #5
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b05      	subs	r3, #5
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fe6:	e04c      	b.n	8003082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d824      	bhi.n	800303a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b23      	subs	r3, #35	@ 0x23
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b23      	subs	r3, #35	@ 0x23
 800302c:	fa00 f203 	lsl.w	r2, r0, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
 8003038:	e023      	b.n	8003082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b41      	subs	r3, #65	@ 0x41
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b41      	subs	r3, #65	@ 0x41
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <HAL_ADC_ConfigChannel+0x250>)
 8003084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a28      	ldr	r2, [pc, #160]	@ (800312c <HAL_ADC_ConfigChannel+0x254>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10f      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b12      	cmp	r3, #18
 8003096:	d10b      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_ADC_ConfigChannel+0x254>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12b      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <HAL_ADC_ConfigChannel+0x258>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x1f4>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d122      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	@ (8003130 <HAL_ADC_ConfigChannel+0x258>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ee:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_ADC_ConfigChannel+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a11      	ldr	r2, [pc, #68]	@ (8003138 <HAL_ADC_ConfigChannel+0x260>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9a      	lsrs	r2, r3, #18
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40012300 	.word	0x40012300
 800312c:	40012000 	.word	0x40012000
 8003130:	10000012 	.word	0x10000012
 8003134:	20000098 	.word	0x20000098
 8003138:	431bde83 	.word	0x431bde83

0800313c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003144:	4b79      	ldr	r3, [pc, #484]	@ (800332c <ADC_Init+0x1f0>)
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	021a      	lsls	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <ADC_Init+0x1f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e00f      	b.n	800323a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003238:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0202 	bic.w	r2, r2, #2
 8003248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e1b      	ldrb	r3, [r3, #24]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003276:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	035a      	lsls	r2, r3, #13
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	e007      	b.n	80032b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	051a      	lsls	r2, r3, #20
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032f2:	025a      	lsls	r2, r3, #9
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	029a      	lsls	r2, r3, #10
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40012300 	.word	0x40012300
 8003330:	0f000001 	.word	0x0f000001

08003334 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13c      	bne.n	80033c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d12b      	bne.n	80033c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800336c:	2b00      	cmp	r3, #0
 800336e:	d127      	bne.n	80033c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003388:	2b00      	cmp	r3, #0
 800338a:	d119      	bne.n	80033c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0220 	bic.w	r2, r2, #32
 800339a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7fe fa25 	bl	8001810 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033c6:	e00e      	b.n	80033e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff fd75 	bl	8002ec4 <HAL_ADC_ErrorCallback>
}
 80033da:	e004      	b.n	80033e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fd4d 	bl	8002e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	@ 0x40
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff fd4a 	bl	8002ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <__NVIC_SetPriorityGrouping+0x44>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347e:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <__NVIC_SetPriorityGrouping+0x44>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	60d3      	str	r3, [r2, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <__NVIC_GetPriorityGrouping+0x18>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	f003 0307 	and.w	r3, r3, #7
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	db0b      	blt.n	80034da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4907      	ldr	r1, [pc, #28]	@ (80034e8 <__NVIC_EnableIRQ+0x38>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	2001      	movs	r0, #1
 80034d2:	fa00 f202 	lsl.w	r2, r0, r2
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000e100 	.word	0xe000e100

080034ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db0a      	blt.n	8003516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	490c      	ldr	r1, [pc, #48]	@ (8003538 <__NVIC_SetPriority+0x4c>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	440b      	add	r3, r1
 8003510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003514:	e00a      	b.n	800352c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4908      	ldr	r1, [pc, #32]	@ (800353c <__NVIC_SetPriority+0x50>)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	3b04      	subs	r3, #4
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	440b      	add	r3, r1
 800352a:	761a      	strb	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000e100 	.word	0xe000e100
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	@ 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f1c3 0307 	rsb	r3, r3, #7
 800355a:	2b04      	cmp	r3, #4
 800355c:	bf28      	it	cs
 800355e:	2304      	movcs	r3, #4
 8003560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3304      	adds	r3, #4
 8003566:	2b06      	cmp	r3, #6
 8003568:	d902      	bls.n	8003570 <NVIC_EncodePriority+0x30>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3b03      	subs	r3, #3
 800356e:	e000      	b.n	8003572 <NVIC_EncodePriority+0x32>
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	f04f 32ff 	mov.w	r2, #4294967295
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	401a      	ands	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003588:	f04f 31ff 	mov.w	r1, #4294967295
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	43d9      	mvns	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	4313      	orrs	r3, r2
         );
}
 800359a:	4618      	mov	r0, r3
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035b8:	d301      	bcc.n	80035be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00f      	b.n	80035de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035be:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <SysTick_Config+0x40>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035c6:	210f      	movs	r1, #15
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	f7ff ff8e 	bl	80034ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <SysTick_Config+0x40>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035d6:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <SysTick_Config+0x40>)
 80035d8:	2207      	movs	r2, #7
 80035da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	e000e010 	.word	0xe000e010

080035ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ff29 	bl	800344c <__NVIC_SetPriorityGrouping>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003614:	f7ff ff3e 	bl	8003494 <__NVIC_GetPriorityGrouping>
 8003618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f7ff ff8e 	bl	8003540 <NVIC_EncodePriority>
 8003624:	4602      	mov	r2, r0
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff5d 	bl	80034ec <__NVIC_SetPriority>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff31 	bl	80034b0 <__NVIC_EnableIRQ>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ffa2 	bl	80035a8 <SysTick_Config>
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7ff f9be 	bl	80029fc <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e099      	b.n	80037c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ac:	e00f      	b.n	80036ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ae:	f7ff f9a5 	bl	80029fc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	d908      	bls.n	80036ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e078      	b.n	80037c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e8      	bne.n	80036ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <HAL_DMA_Init+0x158>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	2b04      	cmp	r3, #4
 8003726:	d107      	bne.n	8003738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0307 	bic.w	r3, r3, #7
 800374e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	2b04      	cmp	r3, #4
 8003760:	d117      	bne.n	8003792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa6f 	bl	8003c58 <DMA_CheckFifoParam>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2240      	movs	r2, #64	@ 0x40
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800378e:	2301      	movs	r3, #1
 8003790:	e016      	b.n	80037c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa26 	bl	8003bec <DMA_CalcBaseAndBitshift>
 80037a0:	4603      	mov	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a8:	223f      	movs	r2, #63	@ 0x3f
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	f010803f 	.word	0xf010803f

080037cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_Start_IT+0x26>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e040      	b.n	8003874 <HAL_DMA_Start_IT+0xa8>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d12f      	bne.n	8003866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f9b8 	bl	8003b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	223f      	movs	r2, #63	@ 0x3f
 8003826:	409a      	lsls	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0216 	orr.w	r2, r2, #22
 800383a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0208 	orr.w	r2, r2, #8
 8003852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e005      	b.n	8003872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800386e:	2302      	movs	r3, #2
 8003870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003888:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac4 <HAL_DMA_IRQHandler+0x248>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a8e      	ldr	r2, [pc, #568]	@ (8003ac8 <HAL_DMA_IRQHandler+0x24c>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	2208      	movs	r2, #8
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01a      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	2208      	movs	r2, #8
 80038d6:	409a      	lsls	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	2201      	movs	r2, #1
 80038ee:	409a      	lsls	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390a:	2201      	movs	r2, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f043 0202 	orr.w	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	2204      	movs	r2, #4
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	2204      	movs	r2, #4
 8003942:	409a      	lsls	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	2210      	movs	r2, #16
 800395a:	409a      	lsls	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d043      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	2210      	movs	r2, #16
 8003978:	409a      	lsls	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d024      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	e01f      	b.n	80039ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
 80039bc:	e016      	b.n	80039ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	2220      	movs	r2, #32
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808f 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8087 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	2220      	movs	r2, #32
 8003a14:	409a      	lsls	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d136      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0216 	bic.w	r2, r2, #22
 8003a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x1da>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0208 	bic.w	r2, r2, #8
 8003a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	223f      	movs	r2, #63	@ 0x3f
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d07e      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
        }
        return;
 8003a92:	e079      	b.n	8003b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01d      	beq.n	8003ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e02c      	b.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
 8003ac2:	bf00      	nop
 8003ac4:	20000098 	.word	0x20000098
 8003ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e01e      	b.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0210 	bic.w	r2, r2, #16
 8003afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d032      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2205      	movs	r2, #5
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d307      	bcc.n	8003b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f2      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x2cc>
 8003b62:	e000      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b88:	bf00      	nop
    }
  }
}
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d108      	bne.n	8003bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bce:	e007      	b.n	8003be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3b10      	subs	r3, #16
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x64>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c06:	4a13      	ldr	r2, [pc, #76]	@ (8003c54 <DMA_CalcBaseAndBitshift+0x68>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d909      	bls.n	8003c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c2c:	e007      	b.n	8003c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	aaaaaaab 	.word	0xaaaaaaab
 8003c54:	08008570 	.word	0x08008570

08003c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11f      	bne.n	8003cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d856      	bhi.n	8003d26 <DMA_CheckFifoParam+0xce>
 8003c78:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <DMA_CheckFifoParam+0x28>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca3 	.word	0x08003ca3
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003d27 	.word	0x08003d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d046      	beq.n	8003d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e043      	b.n	8003d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003caa:	d140      	bne.n	8003d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb0:	e03d      	b.n	8003d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cba:	d121      	bne.n	8003d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d837      	bhi.n	8003d32 <DMA_CheckFifoParam+0xda>
 8003cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <DMA_CheckFifoParam+0x70>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003cdf 	.word	0x08003cdf
 8003cd0:	08003cd9 	.word	0x08003cd9
 8003cd4:	08003cf1 	.word	0x08003cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e030      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d025      	beq.n	8003d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cee:	e022      	b.n	8003d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cf8:	d11f      	bne.n	8003d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cfe:	e01c      	b.n	8003d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d903      	bls.n	8003d0e <DMA_CheckFifoParam+0xb6>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d003      	beq.n	8003d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d0c:	e018      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      break;
 8003d12:	e015      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      break;
 8003d24:	e00b      	b.n	8003d3e <DMA_CheckFifoParam+0xe6>
      break;
 8003d26:	bf00      	nop
 8003d28:	e00a      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e008      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b089      	sub	sp, #36	@ 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e159      	b.n	8004020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	f040 8148 	bne.w	800401a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d005      	beq.n	8003da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d130      	bne.n	8003e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0201 	and.w	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d017      	beq.n	8003e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d123      	bne.n	8003e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a2 	beq.w	800401a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	4b57      	ldr	r3, [pc, #348]	@ (8004038 <HAL_GPIO_Init+0x2e8>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	4a56      	ldr	r2, [pc, #344]	@ (8004038 <HAL_GPIO_Init+0x2e8>)
 8003ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ee6:	4b54      	ldr	r3, [pc, #336]	@ (8004038 <HAL_GPIO_Init+0x2e8>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ef2:	4a52      	ldr	r2, [pc, #328]	@ (800403c <HAL_GPIO_Init+0x2ec>)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	3302      	adds	r3, #2
 8003efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	220f      	movs	r2, #15
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a49      	ldr	r2, [pc, #292]	@ (8004040 <HAL_GPIO_Init+0x2f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d019      	beq.n	8003f52 <HAL_GPIO_Init+0x202>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a48      	ldr	r2, [pc, #288]	@ (8004044 <HAL_GPIO_Init+0x2f4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0x1fe>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a47      	ldr	r2, [pc, #284]	@ (8004048 <HAL_GPIO_Init+0x2f8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a46      	ldr	r2, [pc, #280]	@ (800404c <HAL_GPIO_Init+0x2fc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x1f6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a45      	ldr	r2, [pc, #276]	@ (8004050 <HAL_GPIO_Init+0x300>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_Init+0x1f2>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	e008      	b.n	8003f54 <HAL_GPIO_Init+0x204>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e006      	b.n	8003f54 <HAL_GPIO_Init+0x204>
 8003f46:	2303      	movs	r3, #3
 8003f48:	e004      	b.n	8003f54 <HAL_GPIO_Init+0x204>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_Init+0x204>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_GPIO_Init+0x204>
 8003f52:	2300      	movs	r3, #0
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	f002 0203 	and.w	r2, r2, #3
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f64:	4935      	ldr	r1, [pc, #212]	@ (800403c <HAL_GPIO_Init+0x2ec>)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f72:	4b38      	ldr	r3, [pc, #224]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f96:	4a2f      	ldr	r2, [pc, #188]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc0:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fc6:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fea:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff0:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004014:	4a0f      	ldr	r2, [pc, #60]	@ (8004054 <HAL_GPIO_Init+0x304>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3301      	adds	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	f67f aea2 	bls.w	8003d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3724      	adds	r7, #36	@ 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	40013800 	.word	0x40013800
 8004040:	40020000 	.word	0x40020000
 8004044:	40020400 	.word	0x40020400
 8004048:	40020800 	.word	0x40020800
 800404c:	40020c00 	.word	0x40020c00
 8004050:	40021000 	.word	0x40021000
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
 8004064:	4613      	mov	r3, r2
 8004066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004068:	787b      	ldrb	r3, [r7, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004074:	e003      	b.n	800407e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004076:	887b      	ldrh	r3, [r7, #2]
 8004078:	041a      	lsls	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	619a      	str	r2, [r3, #24]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e267      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d075      	beq.n	8004196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040aa:	4b88      	ldr	r3, [pc, #544]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b85      	ldr	r3, [pc, #532]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d112      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05b      	beq.n	8004194 <HAL_RCC_OscConfig+0x108>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e242      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x74>
 80040f2:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a75      	ldr	r2, [pc, #468]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x98>
 800410a:	4b70      	ldr	r3, [pc, #448]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6f      	ldr	r2, [pc, #444]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b6d      	ldr	r3, [pc, #436]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6c      	ldr	r2, [pc, #432]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004124:	4b69      	ldr	r3, [pc, #420]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fc5a 	bl	80029fc <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe fc56 	bl	80029fc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	@ 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e207      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b5b      	ldr	r3, [pc, #364]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xc0>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fc46 	bl	80029fc <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe fc42 	bl	80029fc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1f3      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0xe8>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d063      	beq.n	800426a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041a2:	4b4a      	ldr	r3, [pc, #296]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b47      	ldr	r3, [pc, #284]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d11c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ba:	4b44      	ldr	r3, [pc, #272]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d116      	bne.n	80041f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x152>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e1c7      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4937      	ldr	r1, [pc, #220]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f2:	e03a      	b.n	800426a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041fc:	4b34      	ldr	r3, [pc, #208]	@ (80042d0 <HAL_RCC_OscConfig+0x244>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fe fbfb 	bl	80029fc <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420a:	f7fe fbf7 	bl	80029fc <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e1a8      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004228:	4b28      	ldr	r3, [pc, #160]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4925      	ldr	r1, [pc, #148]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	e015      	b.n	800426a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423e:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <HAL_RCC_OscConfig+0x244>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe fbda 	bl	80029fc <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424c:	f7fe fbd6 	bl	80029fc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e187      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d036      	beq.n	80042e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_RCC_OscConfig+0x248>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe fbba 	bl	80029fc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428c:	f7fe fbb6 	bl	80029fc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e167      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <HAL_RCC_OscConfig+0x240>)
 80042a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x200>
 80042aa:	e01b      	b.n	80042e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_OscConfig+0x248>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fba3 	bl	80029fc <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	e00e      	b.n	80042d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ba:	f7fe fb9f 	bl	80029fc <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d907      	bls.n	80042d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e150      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
 80042cc:	40023800 	.word	0x40023800
 80042d0:	42470000 	.word	0x42470000
 80042d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ea      	bne.n	80042ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8097 	beq.w	8004420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f6:	4b81      	ldr	r3, [pc, #516]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	4b7d      	ldr	r3, [pc, #500]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	4a7c      	ldr	r2, [pc, #496]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	@ 0x40
 8004312:	4b7a      	ldr	r3, [pc, #488]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b77      	ldr	r3, [pc, #476]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b74      	ldr	r3, [pc, #464]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a73      	ldr	r2, [pc, #460]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fe fb5f 	bl	80029fc <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fe fb5b 	bl	80029fc <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e10c      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <HAL_RCC_OscConfig+0x474>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x2ea>
 8004368:	4b64      	ldr	r3, [pc, #400]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436c:	4a63      	ldr	r2, [pc, #396]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	@ 0x70
 8004374:	e01c      	b.n	80043b0 <HAL_RCC_OscConfig+0x324>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b05      	cmp	r3, #5
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x30c>
 800437e:	4b5f      	ldr	r3, [pc, #380]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	4a5e      	ldr	r2, [pc, #376]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	6713      	str	r3, [r2, #112]	@ 0x70
 800438a:	4b5c      	ldr	r3, [pc, #368]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	4a5b      	ldr	r2, [pc, #364]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	@ 0x70
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0x324>
 8004398:	4b58      	ldr	r3, [pc, #352]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439c:	4a57      	ldr	r2, [pc, #348]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a4:	4b55      	ldr	r3, [pc, #340]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a54      	ldr	r2, [pc, #336]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d015      	beq.n	80043e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fe fb20 	bl	80029fc <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fe fb1c 	bl	80029fc <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0cb      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	4b49      	ldr	r3, [pc, #292]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ee      	beq.n	80043c0 <HAL_RCC_OscConfig+0x334>
 80043e2:	e014      	b.n	800440e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7fe fb0a 	bl	80029fc <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fe fb06 	bl	80029fc <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0b5      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ee      	bne.n	80043ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	4a38      	ldr	r2, [pc, #224]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800441e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a1 	beq.w	800456c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800442a:	4b34      	ldr	r3, [pc, #208]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b08      	cmp	r3, #8
 8004434:	d05c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d141      	bne.n	80044c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe fada 	bl	80029fc <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fad6 	bl	80029fc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e087      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	491b      	ldr	r1, [pc, #108]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe faaf 	bl	80029fc <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe faab 	bl	80029fc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e05c      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	4b11      	ldr	r3, [pc, #68]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x416>
 80044c0:	e054      	b.n	800456c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_RCC_OscConfig+0x478>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fa98 	bl	80029fc <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fa94 	bl	80029fc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e045      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCC_OscConfig+0x470>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x444>
 80044ee:	e03d      	b.n	800456c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e038      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x4ec>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d028      	beq.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d121      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d11a      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800453e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004540:	4293      	cmp	r3, r2
 8004542:	d111      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	3b01      	subs	r3, #1
 8004552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800

0800457c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0cc      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b68      	ldr	r3, [pc, #416]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90c      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b65      	ldr	r3, [pc, #404]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b63      	ldr	r3, [pc, #396]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b8      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d0:	4b59      	ldr	r3, [pc, #356]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a58      	ldr	r2, [pc, #352]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e8:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a52      	ldr	r2, [pc, #328]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b50      	ldr	r3, [pc, #320]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	494d      	ldr	r1, [pc, #308]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d044      	beq.n	800469c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d119      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e06f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464a:	4b3b      	ldr	r3, [pc, #236]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e067      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b37      	ldr	r3, [pc, #220]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 0203 	bic.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4934      	ldr	r1, [pc, #208]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466c:	f7fe f9c6 	bl	80029fc <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	e00a      	b.n	800468a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fe f9c2 	bl	80029fc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e04f      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 020c 	and.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	429a      	cmp	r2, r3
 800469a:	d1eb      	bne.n	8004674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d20c      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b22      	ldr	r3, [pc, #136]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e032      	b.n	800472a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4916      	ldr	r1, [pc, #88]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	490e      	ldr	r1, [pc, #56]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004702:	f000 f821 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	490a      	ldr	r1, [pc, #40]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	fa22 f303 	lsr.w	r3, r2, r3
 800471a:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f926 	bl	8002974 <HAL_InitTick>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00
 8004738:	40023800 	.word	0x40023800
 800473c:	08008558 	.word	0x08008558
 8004740:	20000098 	.word	0x20000098
 8004744:	2000009c 	.word	0x2000009c

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b094      	sub	sp, #80	@ 0x50
 800474e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004760:	4b79      	ldr	r3, [pc, #484]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d00d      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x40>
 800476c:	2b08      	cmp	r3, #8
 800476e:	f200 80e1 	bhi.w	8004934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x3a>
 800477a:	e0db      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b73      	ldr	r3, [pc, #460]	@ (800494c <HAL_RCC_GetSysClockFreq+0x204>)
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004780:	e0db      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004782:	4b73      	ldr	r3, [pc, #460]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x208>)
 8004784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004786:	e0d8      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4b6f      	ldr	r3, [pc, #444]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004792:	4b6d      	ldr	r3, [pc, #436]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d063      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	2200      	movs	r2, #0
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b2:	2300      	movs	r3, #0
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047ba:	4622      	mov	r2, r4
 80047bc:	462b      	mov	r3, r5
 80047be:	f04f 0000 	mov.w	r0, #0
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047cc:	0150      	lsls	r0, r2, #5
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4621      	mov	r1, r4
 80047d4:	1a51      	subs	r1, r2, r1
 80047d6:	6139      	str	r1, [r7, #16]
 80047d8:	4629      	mov	r1, r5
 80047da:	eb63 0301 	sbc.w	r3, r3, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ec:	4659      	mov	r1, fp
 80047ee:	018b      	lsls	r3, r1, #6
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047f6:	4651      	mov	r1, sl
 80047f8:	018a      	lsls	r2, r1, #6
 80047fa:	4651      	mov	r1, sl
 80047fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004800:	4659      	mov	r1, fp
 8004802:	eb63 0901 	sbc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	462b      	mov	r3, r5
 8004828:	eb49 0303 	adc.w	r3, r9, r3
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800483a:	4629      	mov	r1, r5
 800483c:	024b      	lsls	r3, r1, #9
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004844:	4621      	mov	r1, r4
 8004846:	024a      	lsls	r2, r1, #9
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484e:	2200      	movs	r2, #0
 8004850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004858:	f7fc f9c2 	bl	8000be0 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004864:	e058      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	2200      	movs	r2, #0
 800486e:	4618      	mov	r0, r3
 8004870:	4611      	mov	r1, r2
 8004872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	0159      	lsls	r1, r3, #5
 800488e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004892:	0150      	lsls	r0, r2, #5
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4641      	mov	r1, r8
 800489a:	ebb2 0a01 	subs.w	sl, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048b8:	ebb2 040a 	subs.w	r4, r2, sl
 80048bc:	eb63 050b 	sbc.w	r5, r3, fp
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	00eb      	lsls	r3, r5, #3
 80048ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ce:	00e2      	lsls	r2, r4, #3
 80048d0:	4614      	mov	r4, r2
 80048d2:	461d      	mov	r5, r3
 80048d4:	4643      	mov	r3, r8
 80048d6:	18e3      	adds	r3, r4, r3
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	464b      	mov	r3, r9
 80048dc:	eb45 0303 	adc.w	r3, r5, r3
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ee:	4629      	mov	r1, r5
 80048f0:	028b      	lsls	r3, r1, #10
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f8:	4621      	mov	r1, r4
 80048fa:	028a      	lsls	r2, r1, #10
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004902:	2200      	movs	r2, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490c:	f7fc f968 	bl	8000be0 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4613      	mov	r3, r2
 8004916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x200>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004932:	e002      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCC_GetSysClockFreq+0x204>)
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800493c:	4618      	mov	r0, r3
 800493e:	3750      	adds	r7, #80	@ 0x50
 8004940:	46bd      	mov	sp, r7
 8004942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	00f42400 	.word	0x00f42400
 8004950:	007a1200 	.word	0x007a1200

08004954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <HAL_RCC_GetHCLKFreq+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000098 	.word	0x20000098

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004970:	f7ff fff0 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4903      	ldr	r1, [pc, #12]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	08008568 	.word	0x08008568

08004994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004998:	f7ff ffdc 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	@ (80049b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	08008568 	.word	0x08008568

080049bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e041      	b.n	8004a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd fe06 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fe64 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e041      	b.n	8004af0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f839 	bl	8004af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f000 fe15 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x24>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x3e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x58>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e068      	b.n	8004c50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x82>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x92>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 f9e4 	bl	8005f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <HAL_TIM_PWM_Start+0x14c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <HAL_TIM_PWM_Start+0x14c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf0:	d013      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <HAL_TIM_PWM_Start+0x150>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a17      	ldr	r2, [pc, #92]	@ (8004c60 <HAL_TIM_PWM_Start+0x154>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <HAL_TIM_PWM_Start+0x158>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <HAL_TIM_PWM_Start+0x15c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d111      	bne.n	8004c3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d010      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	e007      	b.n	8004c4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40014000 	.word	0x40014000

08004c6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e041      	b.n	8004d02 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd fbcc 	bl	8002430 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f000 fd0c 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_IC_Start_IT+0x1e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e013      	b.n	8004d52 <HAL_TIM_IC_Start_IT+0x46>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_IC_Start_IT+0x2e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e00b      	b.n	8004d52 <HAL_TIM_IC_Start_IT+0x46>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d104      	bne.n	8004d4a <HAL_TIM_IC_Start_IT+0x3e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e003      	b.n	8004d52 <HAL_TIM_IC_Start_IT+0x46>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_TIM_IC_Start_IT+0x58>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e013      	b.n	8004d8c <HAL_TIM_IC_Start_IT+0x80>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d104      	bne.n	8004d74 <HAL_TIM_IC_Start_IT+0x68>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e00b      	b.n	8004d8c <HAL_TIM_IC_Start_IT+0x80>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d104      	bne.n	8004d84 <HAL_TIM_IC_Start_IT+0x78>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e003      	b.n	8004d8c <HAL_TIM_IC_Start_IT+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d94:	7b7b      	ldrb	r3, [r7, #13]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d001      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0c2      	b.n	8004f24 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_IC_Start_IT+0xa2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_IC_Start_IT+0xca>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_IC_Start_IT+0xb2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dbc:	e00b      	b.n	8004dd6 <HAL_TIM_IC_Start_IT+0xca>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_IC_Start_IT+0xc2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	e003      	b.n	8004dd6 <HAL_TIM_IC_Start_IT+0xca>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_IC_Start_IT+0xda>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0x102>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_IC_Start_IT+0xea>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0x102>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_IC_Start_IT+0xfa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_IC_Start_IT+0x102>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d841      	bhi.n	8004e98 <HAL_TIM_IC_Start_IT+0x18c>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <HAL_TIM_IC_Start_IT+0x110>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e99 	.word	0x08004e99
 8004e24:	08004e99 	.word	0x08004e99
 8004e28:	08004e99 	.word	0x08004e99
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e99 	.word	0x08004e99
 8004e38:	08004e99 	.word	0x08004e99
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e87 	.word	0x08004e87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0202 	orr.w	r2, r2, #2
 8004e5e:	60da      	str	r2, [r3, #12]
      break;
 8004e60:	e01d      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0204 	orr.w	r2, r2, #4
 8004e70:	60da      	str	r2, [r3, #12]
      break;
 8004e72:	e014      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	60da      	str	r2, [r3, #12]
      break;
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0210 	orr.w	r2, r2, #16
 8004e94:	60da      	str	r2, [r3, #12]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d13e      	bne.n	8004f22 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f86d 	bl	8005f8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <HAL_TIM_IC_Start_IT+0x220>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIM_IC_Start_IT+0x1e2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec4:	d013      	beq.n	8004eee <HAL_TIM_IC_Start_IT+0x1e2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a19      	ldr	r2, [pc, #100]	@ (8004f30 <HAL_TIM_IC_Start_IT+0x224>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIM_IC_Start_IT+0x1e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a17      	ldr	r2, [pc, #92]	@ (8004f34 <HAL_TIM_IC_Start_IT+0x228>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIM_IC_Start_IT+0x1e2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <HAL_TIM_IC_Start_IT+0x22c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIM_IC_Start_IT+0x1e2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <HAL_TIM_IC_Start_IT+0x230>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d111      	bne.n	8004f12 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	d010      	beq.n	8004f22 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	e007      	b.n	8004f22 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0202 	mvn.w	r2, #2
 8004f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fb ffa0 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb7a 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fb81 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d020      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0204 	mvn.w	r2, #4
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb ff7a 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fb54 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fb5b 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d020      	beq.n	800503c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0208 	mvn.w	r2, #8
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fb ff54 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fb2e 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fb35 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0210 	mvn.w	r2, #16
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2208      	movs	r2, #8
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb ff2e 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb08 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fb0f 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0201 	mvn.w	r2, #1
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fae6 	bl	8005678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fffc 	bl	80060c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fae0 	bl	80056b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0220 	mvn.w	r2, #32
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 ffce 	bl	80060b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_IC_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e088      	b.n	8005250 <HAL_TIM_IC_ConfigChannel+0x130>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800515c:	f000 fd5e 	bl	8005c1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 020c 	bic.w	r2, r2, #12
 800516e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
 8005182:	e060      	b.n	8005246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b04      	cmp	r3, #4
 8005188:	d11c      	bne.n	80051c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800519a:	f000 fdd6 	bl	8005d4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6999      	ldr	r1, [r3, #24]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	021a      	lsls	r2, r3, #8
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	619a      	str	r2, [r3, #24]
 80051c2:	e040      	b.n	8005246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11b      	bne.n	8005202 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051da:	f000 fe23 	bl	8005e24 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 020c 	bic.w	r2, r2, #12
 80051ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	61da      	str	r2, [r3, #28]
 8005200:	e021      	b.n	8005246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d11c      	bne.n	8005242 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005218:	f000 fe40 	bl	8005e9c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800522a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69d9      	ldr	r1, [r3, #28]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	61da      	str	r2, [r3, #28]
 8005240:	e001      	b.n	8005246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005272:	2302      	movs	r3, #2
 8005274:	e0ae      	b.n	80053d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b0c      	cmp	r3, #12
 8005282:	f200 809f 	bhi.w	80053c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005286:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080053c5 	.word	0x080053c5
 8005294:	080053c5 	.word	0x080053c5
 8005298:	080053c5 	.word	0x080053c5
 800529c:	08005301 	.word	0x08005301
 80052a0:	080053c5 	.word	0x080053c5
 80052a4:	080053c5 	.word	0x080053c5
 80052a8:	080053c5 	.word	0x080053c5
 80052ac:	08005343 	.word	0x08005343
 80052b0:	080053c5 	.word	0x080053c5
 80052b4:	080053c5 	.word	0x080053c5
 80052b8:	080053c5 	.word	0x080053c5
 80052bc:	08005383 	.word	0x08005383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fa8a 	bl	80057e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0208 	orr.w	r2, r2, #8
 80052da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0204 	bic.w	r2, r2, #4
 80052ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6999      	ldr	r1, [r3, #24]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	619a      	str	r2, [r3, #24]
      break;
 80052fe:	e064      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fad0 	bl	80058ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800531a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6999      	ldr	r1, [r3, #24]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	619a      	str	r2, [r3, #24]
      break;
 8005340:	e043      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fb1b 	bl	8005984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0208 	orr.w	r2, r2, #8
 800535c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0204 	bic.w	r2, r2, #4
 800536c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69d9      	ldr	r1, [r3, #28]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	61da      	str	r2, [r3, #28]
      break;
 8005380:	e023      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fb65 	bl	8005a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800539c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	021a      	lsls	r2, r3, #8
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	61da      	str	r2, [r3, #28]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75fb      	strb	r3, [r7, #23]
      break;
 80053c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIM_ConfigClockSource+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0b4      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x186>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005430:	d03e      	beq.n	80054b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005436:	f200 8087 	bhi.w	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543e:	f000 8086 	beq.w	800554e <HAL_TIM_ConfigClockSource+0x172>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005446:	d87f      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b70      	cmp	r3, #112	@ 0x70
 800544a:	d01a      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0xa6>
 800544c:	2b70      	cmp	r3, #112	@ 0x70
 800544e:	d87b      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b60      	cmp	r3, #96	@ 0x60
 8005452:	d050      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005454:	2b60      	cmp	r3, #96	@ 0x60
 8005456:	d877      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b50      	cmp	r3, #80	@ 0x50
 800545a:	d03c      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0xfa>
 800545c:	2b50      	cmp	r3, #80	@ 0x50
 800545e:	d873      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b40      	cmp	r3, #64	@ 0x40
 8005462:	d058      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x13a>
 8005464:	2b40      	cmp	r3, #64	@ 0x40
 8005466:	d86f      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b30      	cmp	r3, #48	@ 0x30
 800546a:	d064      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x15a>
 800546c:	2b30      	cmp	r3, #48	@ 0x30
 800546e:	d86b      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d060      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x15a>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d867      	bhi.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d05c      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b10      	cmp	r3, #16
 800547e:	d05a      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x15a>
 8005480:	e062      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	f000 fd5b 	bl	8005f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	609a      	str	r2, [r3, #8]
      break;
 80054ae:	e04f      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c0:	f000 fd44 	bl	8005f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d2:	609a      	str	r2, [r3, #8]
      break;
 80054d4:	e03c      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 fc02 	bl	8005cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2150      	movs	r1, #80	@ 0x50
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fd11 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 80054f4:	e02c      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005502:	461a      	mov	r2, r3
 8005504:	f000 fc5e 	bl	8005dc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2160      	movs	r1, #96	@ 0x60
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fd01 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005514:	e01c      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	461a      	mov	r2, r3
 8005524:	f000 fbe2 	bl	8005cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2140      	movs	r1, #64	@ 0x40
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fcf1 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005534:	e00c      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f000 fce8 	bl	8005f16 <TIM_ITRx_SetConfig>
      break;
 8005546:	e003      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      break;
 800554c:	e000      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800554e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_TIM_SlaveConfigSynchro+0x18>
 800557e:	2302      	movs	r3, #2
 8005580:	e031      	b.n	80055e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 faaf 	bl	8005af8 <TIM_SlaveTimer_SetConfig>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e018      	b.n	80055e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055d2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d831      	bhi.n	8005668 <HAL_TIM_ReadCapturedValue+0x78>
 8005604:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005641 	.word	0x08005641
 8005610:	08005669 	.word	0x08005669
 8005614:	08005669 	.word	0x08005669
 8005618:	08005669 	.word	0x08005669
 800561c:	0800564b 	.word	0x0800564b
 8005620:	08005669 	.word	0x08005669
 8005624:	08005669 	.word	0x08005669
 8005628:	08005669 	.word	0x08005669
 800562c:	08005655 	.word	0x08005655
 8005630:	08005669 	.word	0x08005669
 8005634:	08005669 	.word	0x08005669
 8005638:	08005669 	.word	0x08005669
 800563c:	0800565f 	.word	0x0800565f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005646:	60fb      	str	r3, [r7, #12]

      break;
 8005648:	e00f      	b.n	800566a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	60fb      	str	r3, [r7, #12]

      break;
 8005652:	e00a      	b.n	800566a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	60fb      	str	r3, [r7, #12]

      break;
 800565c:	e005      	b.n	800566a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	60fb      	str	r3, [r7, #12]

      break;
 8005666:	e000      	b.n	800566a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005668:	bf00      	nop
  }

  return tmpreg;
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3a      	ldr	r2, [pc, #232]	@ (80057c4 <TIM_Base_SetConfig+0xfc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00f      	beq.n	8005700 <TIM_Base_SetConfig+0x38>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e6:	d00b      	beq.n	8005700 <TIM_Base_SetConfig+0x38>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a37      	ldr	r2, [pc, #220]	@ (80057c8 <TIM_Base_SetConfig+0x100>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_Base_SetConfig+0x38>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a36      	ldr	r2, [pc, #216]	@ (80057cc <TIM_Base_SetConfig+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0x38>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a35      	ldr	r2, [pc, #212]	@ (80057d0 <TIM_Base_SetConfig+0x108>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <TIM_Base_SetConfig+0xfc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01b      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005720:	d017      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a28      	ldr	r2, [pc, #160]	@ (80057c8 <TIM_Base_SetConfig+0x100>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a27      	ldr	r2, [pc, #156]	@ (80057cc <TIM_Base_SetConfig+0x104>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a26      	ldr	r2, [pc, #152]	@ (80057d0 <TIM_Base_SetConfig+0x108>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a25      	ldr	r2, [pc, #148]	@ (80057d4 <TIM_Base_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a24      	ldr	r2, [pc, #144]	@ (80057d8 <TIM_Base_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a23      	ldr	r2, [pc, #140]	@ (80057dc <TIM_Base_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a0e      	ldr	r2, [pc, #56]	@ (80057c4 <TIM_Base_SetConfig+0xfc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]
  }
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 0201 	bic.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 0302 	bic.w	r3, r3, #2
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <TIM_OC1_SetConfig+0xc8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0308 	bic.w	r3, r3, #8
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a13      	ldr	r2, [pc, #76]	@ (80058a8 <TIM_OC1_SetConfig+0xc8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40010000 	.word	0x40010000

080058ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f023 0210 	bic.w	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0320 	bic.w	r3, r3, #32
 80058f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1e      	ldr	r2, [pc, #120]	@ (8005980 <TIM_OC2_SetConfig+0xd4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d10d      	bne.n	8005928 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005926:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a15      	ldr	r2, [pc, #84]	@ (8005980 <TIM_OC2_SetConfig+0xd4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d113      	bne.n	8005958 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000

08005984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0303 	bic.w	r3, r3, #3
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a54 <TIM_OC3_SetConfig+0xd0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a14      	ldr	r2, [pc, #80]	@ (8005a54 <TIM_OC3_SetConfig+0xd0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d113      	bne.n	8005a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40010000 	.word	0x40010000

08005a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a10      	ldr	r2, [pc, #64]	@ (8005af4 <TIM_OC4_SetConfig+0x9c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d109      	bne.n	8005acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40010000 	.word	0x40010000

08005af8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f023 0307 	bic.w	r3, r3, #7
 8005b26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b70      	cmp	r3, #112	@ 0x70
 8005b40:	d01a      	beq.n	8005b78 <TIM_SlaveTimer_SetConfig+0x80>
 8005b42:	2b70      	cmp	r3, #112	@ 0x70
 8005b44:	d860      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b46:	2b60      	cmp	r3, #96	@ 0x60
 8005b48:	d054      	beq.n	8005bf4 <TIM_SlaveTimer_SetConfig+0xfc>
 8005b4a:	2b60      	cmp	r3, #96	@ 0x60
 8005b4c:	d85c      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b4e:	2b50      	cmp	r3, #80	@ 0x50
 8005b50:	d046      	beq.n	8005be0 <TIM_SlaveTimer_SetConfig+0xe8>
 8005b52:	2b50      	cmp	r3, #80	@ 0x50
 8005b54:	d858      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b56:	2b40      	cmp	r3, #64	@ 0x40
 8005b58:	d019      	beq.n	8005b8e <TIM_SlaveTimer_SetConfig+0x96>
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d854      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b5e:	2b30      	cmp	r3, #48	@ 0x30
 8005b60:	d055      	beq.n	8005c0e <TIM_SlaveTimer_SetConfig+0x116>
 8005b62:	2b30      	cmp	r3, #48	@ 0x30
 8005b64:	d850      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d051      	beq.n	8005c0e <TIM_SlaveTimer_SetConfig+0x116>
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d84c      	bhi.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04d      	beq.n	8005c0e <TIM_SlaveTimer_SetConfig+0x116>
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d04b      	beq.n	8005c0e <TIM_SlaveTimer_SetConfig+0x116>
 8005b76:	e047      	b.n	8005c08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	f000 f9e0 	bl	8005f4c <TIM_ETR_SetConfig>
      break;
 8005b8c:	e040      	b.n	8005c10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d101      	bne.n	8005b9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e03b      	b.n	8005c12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
      break;
 8005bde:	e017      	b.n	8005c10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bec:	461a      	mov	r2, r3
 8005bee:	f000 f87d 	bl	8005cec <TIM_TI1_ConfigInputStage>
      break;
 8005bf2:	e00d      	b.n	8005c10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c00:	461a      	mov	r2, r3
 8005c02:	f000 f8df 	bl	8005dc4 <TIM_TI2_ConfigInputStage>
      break;
 8005c06:	e003      	b.n	8005c10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e000      	b.n	8005c10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005c0e:	bf00      	nop
  }

  return status;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0201 	bic.w	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <TIM_TI1_SetConfig+0xbc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_TI1_SetConfig+0x56>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c50:	d00f      	beq.n	8005c72 <TIM_TI1_SetConfig+0x56>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <TIM_TI1_SetConfig+0xc0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_TI1_SetConfig+0x56>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a20      	ldr	r2, [pc, #128]	@ (8005ce0 <TIM_TI1_SetConfig+0xc4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_TI1_SetConfig+0x56>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <TIM_TI1_SetConfig+0xc8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_TI1_SetConfig+0x56>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <TIM_TI1_SetConfig+0xcc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <TIM_TI1_SetConfig+0x5a>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <TIM_TI1_SetConfig+0x5c>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e003      	b.n	8005c96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f023 030a 	bic.w	r3, r3, #10
 8005cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f003 030a 	and.w	r3, r3, #10
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40014000 	.word	0x40014000

08005cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 030a 	bic.w	r3, r3, #10
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b087      	sub	sp, #28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	031b      	lsls	r3, r3, #12
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0210 	bic.w	r2, r3, #16
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	031b      	lsls	r3, r3, #12
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	031b      	lsls	r3, r3, #12
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	031b      	lsls	r3, r3, #12
 8005ef4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f043 0307 	orr.w	r3, r3, #7
 8005f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	021a      	lsls	r2, r3, #8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	401a      	ands	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1a      	ldr	r2, [r3, #32]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e050      	b.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603c:	d013      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a15      	ldr	r2, [pc, #84]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a13      	ldr	r2, [pc, #76]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d10c      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4313      	orrs	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e042      	b.n	8006174 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc fb10 	bl	8002728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2224      	movs	r2, #36	@ 0x24
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800611e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f82b 	bl	800617c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800617c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006180:	b0c0      	sub	sp, #256	@ 0x100
 8006182:	af00      	add	r7, sp, #0
 8006184:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006198:	68d9      	ldr	r1, [r3, #12]
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	ea40 0301 	orr.w	r3, r0, r1
 80061a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061d4:	f021 010c 	bic.w	r1, r1, #12
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061e2:	430b      	orrs	r3, r1
 80061e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f6:	6999      	ldr	r1, [r3, #24]
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	ea40 0301 	orr.w	r3, r0, r1
 8006202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b8f      	ldr	r3, [pc, #572]	@ (8006448 <UART_SetConfig+0x2cc>)
 800620c:	429a      	cmp	r2, r3
 800620e:	d005      	beq.n	800621c <UART_SetConfig+0xa0>
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b8d      	ldr	r3, [pc, #564]	@ (800644c <UART_SetConfig+0x2d0>)
 8006218:	429a      	cmp	r2, r3
 800621a:	d104      	bne.n	8006226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800621c:	f7fe fbba 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 8006220:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006224:	e003      	b.n	800622e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006226:	f7fe fba1 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 800622a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006238:	f040 810c 	bne.w	8006454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006246:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800624a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	1891      	adds	r1, r2, r2
 8006254:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006256:	415b      	adcs	r3, r3
 8006258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800625a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800625e:	4621      	mov	r1, r4
 8006260:	eb12 0801 	adds.w	r8, r2, r1
 8006264:	4629      	mov	r1, r5
 8006266:	eb43 0901 	adc.w	r9, r3, r1
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800627a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800627e:	4690      	mov	r8, r2
 8006280:	4699      	mov	r9, r3
 8006282:	4623      	mov	r3, r4
 8006284:	eb18 0303 	adds.w	r3, r8, r3
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800628c:	462b      	mov	r3, r5
 800628e:	eb49 0303 	adc.w	r3, r9, r3
 8006292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062aa:	460b      	mov	r3, r1
 80062ac:	18db      	adds	r3, r3, r3
 80062ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b0:	4613      	mov	r3, r2
 80062b2:	eb42 0303 	adc.w	r3, r2, r3
 80062b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062c0:	f7fa fc8e 	bl	8000be0 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4b61      	ldr	r3, [pc, #388]	@ (8006450 <UART_SetConfig+0x2d4>)
 80062ca:	fba3 2302 	umull	r2, r3, r3, r2
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	011c      	lsls	r4, r3, #4
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	1891      	adds	r1, r2, r2
 80062ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062ec:	415b      	adcs	r3, r3
 80062ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062f4:	4641      	mov	r1, r8
 80062f6:	eb12 0a01 	adds.w	sl, r2, r1
 80062fa:	4649      	mov	r1, r9
 80062fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800630c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006314:	4692      	mov	sl, r2
 8006316:	469b      	mov	fp, r3
 8006318:	4643      	mov	r3, r8
 800631a:	eb1a 0303 	adds.w	r3, sl, r3
 800631e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006322:	464b      	mov	r3, r9
 8006324:	eb4b 0303 	adc.w	r3, fp, r3
 8006328:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006338:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800633c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006340:	460b      	mov	r3, r1
 8006342:	18db      	adds	r3, r3, r3
 8006344:	643b      	str	r3, [r7, #64]	@ 0x40
 8006346:	4613      	mov	r3, r2
 8006348:	eb42 0303 	adc.w	r3, r2, r3
 800634c:	647b      	str	r3, [r7, #68]	@ 0x44
 800634e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006356:	f7fa fc43 	bl	8000be0 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4611      	mov	r1, r2
 8006360:	4b3b      	ldr	r3, [pc, #236]	@ (8006450 <UART_SetConfig+0x2d4>)
 8006362:	fba3 2301 	umull	r2, r3, r3, r1
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	2264      	movs	r2, #100	@ 0x64
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	1acb      	subs	r3, r1, r3
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006376:	4b36      	ldr	r3, [pc, #216]	@ (8006450 <UART_SetConfig+0x2d4>)
 8006378:	fba3 2302 	umull	r2, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006384:	441c      	add	r4, r3
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006390:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	1891      	adds	r1, r2, r2
 800639e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063a0:	415b      	adcs	r3, r3
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063a8:	4641      	mov	r1, r8
 80063aa:	1851      	adds	r1, r2, r1
 80063ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80063ae:	4649      	mov	r1, r9
 80063b0:	414b      	adcs	r3, r1
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063c0:	4659      	mov	r1, fp
 80063c2:	00cb      	lsls	r3, r1, #3
 80063c4:	4651      	mov	r1, sl
 80063c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ca:	4651      	mov	r1, sl
 80063cc:	00ca      	lsls	r2, r1, #3
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	4642      	mov	r2, r8
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063dc:	464b      	mov	r3, r9
 80063de:	460a      	mov	r2, r1
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063fc:	460b      	mov	r3, r1
 80063fe:	18db      	adds	r3, r3, r3
 8006400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006402:	4613      	mov	r3, r2
 8006404:	eb42 0303 	adc.w	r3, r2, r3
 8006408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800640a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800640e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006412:	f7fa fbe5 	bl	8000be0 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <UART_SetConfig+0x2d4>)
 800641c:	fba3 1302 	umull	r1, r3, r3, r2
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	2164      	movs	r1, #100	@ 0x64
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	3332      	adds	r3, #50	@ 0x32
 800642e:	4a08      	ldr	r2, [pc, #32]	@ (8006450 <UART_SetConfig+0x2d4>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f003 0207 	and.w	r2, r3, #7
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4422      	add	r2, r4
 8006442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006444:	e106      	b.n	8006654 <UART_SetConfig+0x4d8>
 8006446:	bf00      	nop
 8006448:	40011000 	.word	0x40011000
 800644c:	40011400 	.word	0x40011400
 8006450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006458:	2200      	movs	r2, #0
 800645a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800645e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006466:	4642      	mov	r2, r8
 8006468:	464b      	mov	r3, r9
 800646a:	1891      	adds	r1, r2, r2
 800646c:	6239      	str	r1, [r7, #32]
 800646e:	415b      	adcs	r3, r3
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
 8006472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006476:	4641      	mov	r1, r8
 8006478:	1854      	adds	r4, r2, r1
 800647a:	4649      	mov	r1, r9
 800647c:	eb43 0501 	adc.w	r5, r3, r1
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	00eb      	lsls	r3, r5, #3
 800648a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800648e:	00e2      	lsls	r2, r4, #3
 8006490:	4614      	mov	r4, r2
 8006492:	461d      	mov	r5, r3
 8006494:	4643      	mov	r3, r8
 8006496:	18e3      	adds	r3, r4, r3
 8006498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800649c:	464b      	mov	r3, r9
 800649e:	eb45 0303 	adc.w	r3, r5, r3
 80064a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064c2:	4629      	mov	r1, r5
 80064c4:	008b      	lsls	r3, r1, #2
 80064c6:	4621      	mov	r1, r4
 80064c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064cc:	4621      	mov	r1, r4
 80064ce:	008a      	lsls	r2, r1, #2
 80064d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064d4:	f7fa fb84 	bl	8000be0 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4b60      	ldr	r3, [pc, #384]	@ (8006660 <UART_SetConfig+0x4e4>)
 80064de:	fba3 2302 	umull	r2, r3, r3, r2
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	011c      	lsls	r4, r3, #4
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	61b9      	str	r1, [r7, #24]
 8006500:	415b      	adcs	r3, r3
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6139      	str	r1, [r7, #16]
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006552:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006560:	4649      	mov	r1, r9
 8006562:	008b      	lsls	r3, r1, #2
 8006564:	4641      	mov	r1, r8
 8006566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800656a:	4641      	mov	r1, r8
 800656c:	008a      	lsls	r2, r1, #2
 800656e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006572:	f7fa fb35 	bl	8000be0 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b38      	ldr	r3, [pc, #224]	@ (8006660 <UART_SetConfig+0x4e4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	@ 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	3332      	adds	r3, #50	@ 0x32
 8006590:	4a33      	ldr	r2, [pc, #204]	@ (8006660 <UART_SetConfig+0x4e4>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800659c:	441c      	add	r4, r3
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80065a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80065a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065ac:	4642      	mov	r2, r8
 80065ae:	464b      	mov	r3, r9
 80065b0:	1891      	adds	r1, r2, r2
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	415b      	adcs	r3, r3
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065bc:	4641      	mov	r1, r8
 80065be:	1851      	adds	r1, r2, r1
 80065c0:	6039      	str	r1, [r7, #0]
 80065c2:	4649      	mov	r1, r9
 80065c4:	414b      	adcs	r3, r1
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065d4:	4659      	mov	r1, fp
 80065d6:	00cb      	lsls	r3, r1, #3
 80065d8:	4651      	mov	r1, sl
 80065da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065de:	4651      	mov	r1, sl
 80065e0:	00ca      	lsls	r2, r1, #3
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	4642      	mov	r2, r8
 80065ea:	189b      	adds	r3, r3, r2
 80065ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ee:	464b      	mov	r3, r9
 80065f0:	460a      	mov	r2, r1
 80065f2:	eb42 0303 	adc.w	r3, r2, r3
 80065f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	663b      	str	r3, [r7, #96]	@ 0x60
 8006602:	667a      	str	r2, [r7, #100]	@ 0x64
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006622:	f7fa fadd 	bl	8000be0 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <UART_SetConfig+0x4e4>)
 800662c:	fba3 1302 	umull	r1, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2164      	movs	r1, #100	@ 0x64
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	3332      	adds	r3, #50	@ 0x32
 800663e:	4a08      	ldr	r2, [pc, #32]	@ (8006660 <UART_SetConfig+0x4e4>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4422      	add	r2, r4
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	bf00      	nop
 8006656:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800665a:	46bd      	mov	sp, r7
 800665c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006660:	51eb851f 	.word	0x51eb851f

08006664 <memset>:
 8006664:	4402      	add	r2, r0
 8006666:	4603      	mov	r3, r0
 8006668:	4293      	cmp	r3, r2
 800666a:	d100      	bne.n	800666e <memset+0xa>
 800666c:	4770      	bx	lr
 800666e:	f803 1b01 	strb.w	r1, [r3], #1
 8006672:	e7f9      	b.n	8006668 <memset+0x4>

08006674 <__errno>:
 8006674:	4b01      	ldr	r3, [pc, #4]	@ (800667c <__errno+0x8>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	200000a4 	.word	0x200000a4

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4d0d      	ldr	r5, [pc, #52]	@ (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	@ (80066bc <__libc_init_array+0x3c>)
 8006686:	1b64      	subs	r4, r4, r5
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2600      	movs	r6, #0
 800668c:	42a6      	cmp	r6, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4d0b      	ldr	r5, [pc, #44]	@ (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	@ (80066c4 <__libc_init_array+0x44>)
 8006694:	f001 ff54 	bl	8008540 <_init>
 8006698:	1b64      	subs	r4, r4, r5
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2600      	movs	r6, #0
 800669e:	42a6      	cmp	r6, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a8:	4798      	blx	r3
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b2:	4798      	blx	r3
 80066b4:	3601      	adds	r6, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	08008628 	.word	0x08008628
 80066bc:	08008628 	.word	0x08008628
 80066c0:	08008628 	.word	0x08008628
 80066c4:	0800862c 	.word	0x0800862c

080066c8 <acos>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	ed2d 8b02 	vpush	{d8}
 80066ce:	ec55 4b10 	vmov	r4, r5, d0
 80066d2:	f000 fa75 	bl	8006bc0 <__ieee754_acos>
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	eeb0 8a40 	vmov.f32	s16, s0
 80066e2:	eef0 8a60 	vmov.f32	s17, s1
 80066e6:	f7fa f9cd 	bl	8000a84 <__aeabi_dcmpun>
 80066ea:	b9a8      	cbnz	r0, 8006718 <acos+0x50>
 80066ec:	ec45 4b10 	vmov	d0, r4, r5
 80066f0:	f000 f8f0 	bl	80068d4 <fabs>
 80066f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <acos+0x60>)
 80066f6:	ec51 0b10 	vmov	r0, r1, d0
 80066fa:	2200      	movs	r2, #0
 80066fc:	f7fa f9b8 	bl	8000a70 <__aeabi_dcmpgt>
 8006700:	b150      	cbz	r0, 8006718 <acos+0x50>
 8006702:	f7ff ffb7 	bl	8006674 <__errno>
 8006706:	ecbd 8b02 	vpop	{d8}
 800670a:	2321      	movs	r3, #33	@ 0x21
 800670c:	6003      	str	r3, [r0, #0]
 800670e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006712:	4806      	ldr	r0, [pc, #24]	@ (800672c <acos+0x64>)
 8006714:	f000 b8f4 	b.w	8006900 <nan>
 8006718:	eeb0 0a48 	vmov.f32	s0, s16
 800671c:	eef0 0a68 	vmov.f32	s1, s17
 8006720:	ecbd 8b02 	vpop	{d8}
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	3ff00000 	.word	0x3ff00000
 800672c:	08008578 	.word	0x08008578

08006730 <asin>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	ed2d 8b02 	vpush	{d8}
 8006736:	ec55 4b10 	vmov	r4, r5, d0
 800673a:	f000 fc9d 	bl	8007078 <__ieee754_asin>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	eeb0 8a40 	vmov.f32	s16, s0
 800674a:	eef0 8a60 	vmov.f32	s17, s1
 800674e:	f7fa f999 	bl	8000a84 <__aeabi_dcmpun>
 8006752:	b9a8      	cbnz	r0, 8006780 <asin+0x50>
 8006754:	ec45 4b10 	vmov	d0, r4, r5
 8006758:	f000 f8bc 	bl	80068d4 <fabs>
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <asin+0x60>)
 800675e:	ec51 0b10 	vmov	r0, r1, d0
 8006762:	2200      	movs	r2, #0
 8006764:	f7fa f984 	bl	8000a70 <__aeabi_dcmpgt>
 8006768:	b150      	cbz	r0, 8006780 <asin+0x50>
 800676a:	f7ff ff83 	bl	8006674 <__errno>
 800676e:	ecbd 8b02 	vpop	{d8}
 8006772:	2321      	movs	r3, #33	@ 0x21
 8006774:	6003      	str	r3, [r0, #0]
 8006776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800677a:	4806      	ldr	r0, [pc, #24]	@ (8006794 <asin+0x64>)
 800677c:	f000 b8c0 	b.w	8006900 <nan>
 8006780:	eeb0 0a48 	vmov.f32	s0, s16
 8006784:	eef0 0a68 	vmov.f32	s1, s17
 8006788:	ecbd 8b02 	vpop	{d8}
 800678c:	bd38      	pop	{r3, r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	3ff00000 	.word	0x3ff00000
 8006794:	08008578 	.word	0x08008578

08006798 <atan2>:
 8006798:	f000 be72 	b.w	8007480 <__ieee754_atan2>

0800679c <pow>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	ed2d 8b02 	vpush	{d8}
 80067a2:	eeb0 8a40 	vmov.f32	s16, s0
 80067a6:	eef0 8a60 	vmov.f32	s17, s1
 80067aa:	ec55 4b11 	vmov	r4, r5, d1
 80067ae:	f000 ff2f 	bl	8007610 <__ieee754_pow>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	4620      	mov	r0, r4
 80067b8:	4629      	mov	r1, r5
 80067ba:	ec57 6b10 	vmov	r6, r7, d0
 80067be:	f7fa f961 	bl	8000a84 <__aeabi_dcmpun>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d13b      	bne.n	800683e <pow+0xa2>
 80067c6:	ec51 0b18 	vmov	r0, r1, d8
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	f7fa f927 	bl	8000a20 <__aeabi_dcmpeq>
 80067d2:	b1b8      	cbz	r0, 8006804 <pow+0x68>
 80067d4:	2200      	movs	r2, #0
 80067d6:	2300      	movs	r3, #0
 80067d8:	4620      	mov	r0, r4
 80067da:	4629      	mov	r1, r5
 80067dc:	f7fa f920 	bl	8000a20 <__aeabi_dcmpeq>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d146      	bne.n	8006872 <pow+0xd6>
 80067e4:	ec45 4b10 	vmov	d0, r4, r5
 80067e8:	f000 f87c 	bl	80068e4 <finite>
 80067ec:	b338      	cbz	r0, 800683e <pow+0xa2>
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7fa f91d 	bl	8000a34 <__aeabi_dcmplt>
 80067fa:	b300      	cbz	r0, 800683e <pow+0xa2>
 80067fc:	f7ff ff3a 	bl	8006674 <__errno>
 8006800:	2322      	movs	r3, #34	@ 0x22
 8006802:	e01b      	b.n	800683c <pow+0xa0>
 8006804:	ec47 6b10 	vmov	d0, r6, r7
 8006808:	f000 f86c 	bl	80068e4 <finite>
 800680c:	b9e0      	cbnz	r0, 8006848 <pow+0xac>
 800680e:	eeb0 0a48 	vmov.f32	s0, s16
 8006812:	eef0 0a68 	vmov.f32	s1, s17
 8006816:	f000 f865 	bl	80068e4 <finite>
 800681a:	b1a8      	cbz	r0, 8006848 <pow+0xac>
 800681c:	ec45 4b10 	vmov	d0, r4, r5
 8006820:	f000 f860 	bl	80068e4 <finite>
 8006824:	b180      	cbz	r0, 8006848 <pow+0xac>
 8006826:	4632      	mov	r2, r6
 8006828:	463b      	mov	r3, r7
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7fa f929 	bl	8000a84 <__aeabi_dcmpun>
 8006832:	2800      	cmp	r0, #0
 8006834:	d0e2      	beq.n	80067fc <pow+0x60>
 8006836:	f7ff ff1d 	bl	8006674 <__errno>
 800683a:	2321      	movs	r3, #33	@ 0x21
 800683c:	6003      	str	r3, [r0, #0]
 800683e:	ecbd 8b02 	vpop	{d8}
 8006842:	ec47 6b10 	vmov	d0, r6, r7
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006848:	2200      	movs	r2, #0
 800684a:	2300      	movs	r3, #0
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f7fa f8e6 	bl	8000a20 <__aeabi_dcmpeq>
 8006854:	2800      	cmp	r0, #0
 8006856:	d0f2      	beq.n	800683e <pow+0xa2>
 8006858:	eeb0 0a48 	vmov.f32	s0, s16
 800685c:	eef0 0a68 	vmov.f32	s1, s17
 8006860:	f000 f840 	bl	80068e4 <finite>
 8006864:	2800      	cmp	r0, #0
 8006866:	d0ea      	beq.n	800683e <pow+0xa2>
 8006868:	ec45 4b10 	vmov	d0, r4, r5
 800686c:	f000 f83a 	bl	80068e4 <finite>
 8006870:	e7c3      	b.n	80067fa <pow+0x5e>
 8006872:	4f01      	ldr	r7, [pc, #4]	@ (8006878 <pow+0xdc>)
 8006874:	2600      	movs	r6, #0
 8006876:	e7e2      	b.n	800683e <pow+0xa2>
 8006878:	3ff00000 	.word	0x3ff00000

0800687c <sqrt>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	ed2d 8b02 	vpush	{d8}
 8006882:	ec55 4b10 	vmov	r4, r5, d0
 8006886:	f000 f8c1 	bl	8006a0c <__ieee754_sqrt>
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	eeb0 8a40 	vmov.f32	s16, s0
 8006896:	eef0 8a60 	vmov.f32	s17, s1
 800689a:	f7fa f8f3 	bl	8000a84 <__aeabi_dcmpun>
 800689e:	b990      	cbnz	r0, 80068c6 <sqrt+0x4a>
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7fa f8c4 	bl	8000a34 <__aeabi_dcmplt>
 80068ac:	b158      	cbz	r0, 80068c6 <sqrt+0x4a>
 80068ae:	f7ff fee1 	bl	8006674 <__errno>
 80068b2:	2321      	movs	r3, #33	@ 0x21
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	2300      	movs	r3, #0
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f7f9 ff71 	bl	80007a4 <__aeabi_ddiv>
 80068c2:	ec41 0b18 	vmov	d8, r0, r1
 80068c6:	eeb0 0a48 	vmov.f32	s0, s16
 80068ca:	eef0 0a68 	vmov.f32	s1, s17
 80068ce:	ecbd 8b02 	vpop	{d8}
 80068d2:	bd38      	pop	{r3, r4, r5, pc}

080068d4 <fabs>:
 80068d4:	ec51 0b10 	vmov	r0, r1, d0
 80068d8:	4602      	mov	r2, r0
 80068da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80068de:	ec43 2b10 	vmov	d0, r2, r3
 80068e2:	4770      	bx	lr

080068e4 <finite>:
 80068e4:	b082      	sub	sp, #8
 80068e6:	ed8d 0b00 	vstr	d0, [sp]
 80068ea:	9801      	ldr	r0, [sp, #4]
 80068ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80068f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80068f4:	0fc0      	lsrs	r0, r0, #31
 80068f6:	b002      	add	sp, #8
 80068f8:	4770      	bx	lr
 80068fa:	0000      	movs	r0, r0
 80068fc:	0000      	movs	r0, r0
	...

08006900 <nan>:
 8006900:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006908 <nan+0x8>
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	00000000 	.word	0x00000000
 800690c:	7ff80000 	.word	0x7ff80000

08006910 <fmax>:
 8006910:	b508      	push	{r3, lr}
 8006912:	ed2d 8b04 	vpush	{d8-d9}
 8006916:	eeb0 8a40 	vmov.f32	s16, s0
 800691a:	eef0 8a60 	vmov.f32	s17, s1
 800691e:	eeb0 9a41 	vmov.f32	s18, s2
 8006922:	eef0 9a61 	vmov.f32	s19, s3
 8006926:	f000 f847 	bl	80069b8 <__fpclassifyd>
 800692a:	b950      	cbnz	r0, 8006942 <fmax+0x32>
 800692c:	eeb0 8a49 	vmov.f32	s16, s18
 8006930:	eef0 8a69 	vmov.f32	s17, s19
 8006934:	eeb0 0a48 	vmov.f32	s0, s16
 8006938:	eef0 0a68 	vmov.f32	s1, s17
 800693c:	ecbd 8b04 	vpop	{d8-d9}
 8006940:	bd08      	pop	{r3, pc}
 8006942:	eeb0 0a49 	vmov.f32	s0, s18
 8006946:	eef0 0a69 	vmov.f32	s1, s19
 800694a:	f000 f835 	bl	80069b8 <__fpclassifyd>
 800694e:	2800      	cmp	r0, #0
 8006950:	d0f0      	beq.n	8006934 <fmax+0x24>
 8006952:	ec53 2b19 	vmov	r2, r3, d9
 8006956:	ec51 0b18 	vmov	r0, r1, d8
 800695a:	f7fa f889 	bl	8000a70 <__aeabi_dcmpgt>
 800695e:	2800      	cmp	r0, #0
 8006960:	d0e4      	beq.n	800692c <fmax+0x1c>
 8006962:	e7e7      	b.n	8006934 <fmax+0x24>

08006964 <fmin>:
 8006964:	b508      	push	{r3, lr}
 8006966:	ed2d 8b04 	vpush	{d8-d9}
 800696a:	eeb0 8a40 	vmov.f32	s16, s0
 800696e:	eef0 8a60 	vmov.f32	s17, s1
 8006972:	eeb0 9a41 	vmov.f32	s18, s2
 8006976:	eef0 9a61 	vmov.f32	s19, s3
 800697a:	f000 f81d 	bl	80069b8 <__fpclassifyd>
 800697e:	b950      	cbnz	r0, 8006996 <fmin+0x32>
 8006980:	eeb0 8a49 	vmov.f32	s16, s18
 8006984:	eef0 8a69 	vmov.f32	s17, s19
 8006988:	eeb0 0a48 	vmov.f32	s0, s16
 800698c:	eef0 0a68 	vmov.f32	s1, s17
 8006990:	ecbd 8b04 	vpop	{d8-d9}
 8006994:	bd08      	pop	{r3, pc}
 8006996:	eeb0 0a49 	vmov.f32	s0, s18
 800699a:	eef0 0a69 	vmov.f32	s1, s19
 800699e:	f000 f80b 	bl	80069b8 <__fpclassifyd>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d0f0      	beq.n	8006988 <fmin+0x24>
 80069a6:	ec53 2b19 	vmov	r2, r3, d9
 80069aa:	ec51 0b18 	vmov	r0, r1, d8
 80069ae:	f7fa f841 	bl	8000a34 <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d0e4      	beq.n	8006980 <fmin+0x1c>
 80069b6:	e7e7      	b.n	8006988 <fmin+0x24>

080069b8 <__fpclassifyd>:
 80069b8:	ec51 0b10 	vmov	r0, r1, d0
 80069bc:	b510      	push	{r4, lr}
 80069be:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80069c2:	460b      	mov	r3, r1
 80069c4:	d019      	beq.n	80069fa <__fpclassifyd+0x42>
 80069c6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80069ca:	490e      	ldr	r1, [pc, #56]	@ (8006a04 <__fpclassifyd+0x4c>)
 80069cc:	428a      	cmp	r2, r1
 80069ce:	d90e      	bls.n	80069ee <__fpclassifyd+0x36>
 80069d0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80069d4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80069d8:	428a      	cmp	r2, r1
 80069da:	d908      	bls.n	80069ee <__fpclassifyd+0x36>
 80069dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006a08 <__fpclassifyd+0x50>)
 80069de:	4213      	tst	r3, r2
 80069e0:	d007      	beq.n	80069f2 <__fpclassifyd+0x3a>
 80069e2:	4294      	cmp	r4, r2
 80069e4:	d107      	bne.n	80069f6 <__fpclassifyd+0x3e>
 80069e6:	fab0 f080 	clz	r0, r0
 80069ea:	0940      	lsrs	r0, r0, #5
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	2004      	movs	r0, #4
 80069f0:	e7fc      	b.n	80069ec <__fpclassifyd+0x34>
 80069f2:	2003      	movs	r0, #3
 80069f4:	e7fa      	b.n	80069ec <__fpclassifyd+0x34>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e7f8      	b.n	80069ec <__fpclassifyd+0x34>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d1ee      	bne.n	80069dc <__fpclassifyd+0x24>
 80069fe:	2002      	movs	r0, #2
 8006a00:	e7f4      	b.n	80069ec <__fpclassifyd+0x34>
 8006a02:	bf00      	nop
 8006a04:	7fdfffff 	.word	0x7fdfffff
 8006a08:	7ff00000 	.word	0x7ff00000

08006a0c <__ieee754_sqrt>:
 8006a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	4a68      	ldr	r2, [pc, #416]	@ (8006bb4 <__ieee754_sqrt+0x1a8>)
 8006a12:	ec55 4b10 	vmov	r4, r5, d0
 8006a16:	43aa      	bics	r2, r5
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	d110      	bne.n	8006a40 <__ieee754_sqrt+0x34>
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4620      	mov	r0, r4
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7f9 fd94 	bl	8000550 <__aeabi_dmul>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7f9 fbd8 	bl	80001e4 <__adddf3>
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	ec45 4b10 	vmov	d0, r4, r5
 8006a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	dc0e      	bgt.n	8006a62 <__ieee754_sqrt+0x56>
 8006a44:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006a48:	4322      	orrs	r2, r4
 8006a4a:	d0f5      	beq.n	8006a38 <__ieee754_sqrt+0x2c>
 8006a4c:	b19d      	cbz	r5, 8006a76 <__ieee754_sqrt+0x6a>
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4620      	mov	r0, r4
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7f9 fbc4 	bl	80001e0 <__aeabi_dsub>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	f7f9 fea2 	bl	80007a4 <__aeabi_ddiv>
 8006a60:	e7e8      	b.n	8006a34 <__ieee754_sqrt+0x28>
 8006a62:	152a      	asrs	r2, r5, #20
 8006a64:	d115      	bne.n	8006a92 <__ieee754_sqrt+0x86>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e009      	b.n	8006a7e <__ieee754_sqrt+0x72>
 8006a6a:	0acb      	lsrs	r3, r1, #11
 8006a6c:	3a15      	subs	r2, #21
 8006a6e:	0549      	lsls	r1, r1, #21
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0fa      	beq.n	8006a6a <__ieee754_sqrt+0x5e>
 8006a74:	e7f7      	b.n	8006a66 <__ieee754_sqrt+0x5a>
 8006a76:	462a      	mov	r2, r5
 8006a78:	e7fa      	b.n	8006a70 <__ieee754_sqrt+0x64>
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	02dc      	lsls	r4, r3, #11
 8006a80:	d5fb      	bpl.n	8006a7a <__ieee754_sqrt+0x6e>
 8006a82:	1e44      	subs	r4, r0, #1
 8006a84:	1b12      	subs	r2, r2, r4
 8006a86:	f1c0 0420 	rsb	r4, r0, #32
 8006a8a:	fa21 f404 	lsr.w	r4, r1, r4
 8006a8e:	4323      	orrs	r3, r4
 8006a90:	4081      	lsls	r1, r0
 8006a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a96:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a9e:	07d2      	lsls	r2, r2, #31
 8006aa0:	bf5c      	itt	pl
 8006aa2:	005b      	lslpl	r3, r3, #1
 8006aa4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006aac:	bf58      	it	pl
 8006aae:	0049      	lslpl	r1, r1, #1
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006ab6:	106d      	asrs	r5, r5, #1
 8006ab8:	0049      	lsls	r1, r1, #1
 8006aba:	2016      	movs	r0, #22
 8006abc:	4632      	mov	r2, r6
 8006abe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006ac2:	1917      	adds	r7, r2, r4
 8006ac4:	429f      	cmp	r7, r3
 8006ac6:	bfde      	ittt	le
 8006ac8:	193a      	addle	r2, r7, r4
 8006aca:	1bdb      	suble	r3, r3, r7
 8006acc:	1936      	addle	r6, r6, r4
 8006ace:	0fcf      	lsrs	r7, r1, #31
 8006ad0:	3801      	subs	r0, #1
 8006ad2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006ad6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ada:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006ade:	d1f0      	bne.n	8006ac2 <__ieee754_sqrt+0xb6>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2720      	movs	r7, #32
 8006ae4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	eb00 0e0c 	add.w	lr, r0, ip
 8006aee:	db02      	blt.n	8006af6 <__ieee754_sqrt+0xea>
 8006af0:	d113      	bne.n	8006b1a <__ieee754_sqrt+0x10e>
 8006af2:	458e      	cmp	lr, r1
 8006af4:	d811      	bhi.n	8006b1a <__ieee754_sqrt+0x10e>
 8006af6:	f1be 0f00 	cmp.w	lr, #0
 8006afa:	eb0e 000c 	add.w	r0, lr, ip
 8006afe:	da42      	bge.n	8006b86 <__ieee754_sqrt+0x17a>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	db40      	blt.n	8006b86 <__ieee754_sqrt+0x17a>
 8006b04:	f102 0801 	add.w	r8, r2, #1
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	458e      	cmp	lr, r1
 8006b0c:	bf88      	it	hi
 8006b0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006b12:	eba1 010e 	sub.w	r1, r1, lr
 8006b16:	4464      	add	r4, ip
 8006b18:	4642      	mov	r2, r8
 8006b1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006b1e:	3f01      	subs	r7, #1
 8006b20:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006b24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b28:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006b2c:	d1dc      	bne.n	8006ae8 <__ieee754_sqrt+0xdc>
 8006b2e:	4319      	orrs	r1, r3
 8006b30:	d01b      	beq.n	8006b6a <__ieee754_sqrt+0x15e>
 8006b32:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006bb8 <__ieee754_sqrt+0x1ac>
 8006b36:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006bbc <__ieee754_sqrt+0x1b0>
 8006b3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8006b3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b42:	f7f9 fb4d 	bl	80001e0 <__aeabi_dsub>
 8006b46:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 ff79 	bl	8000a48 <__aeabi_dcmple>
 8006b56:	b140      	cbz	r0, 8006b6a <__ieee754_sqrt+0x15e>
 8006b58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006b5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006b60:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b64:	d111      	bne.n	8006b8a <__ieee754_sqrt+0x17e>
 8006b66:	3601      	adds	r6, #1
 8006b68:	463c      	mov	r4, r7
 8006b6a:	1072      	asrs	r2, r6, #1
 8006b6c:	0863      	lsrs	r3, r4, #1
 8006b6e:	07f1      	lsls	r1, r6, #31
 8006b70:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006b74:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006b78:	bf48      	it	mi
 8006b7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006b7e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006b82:	4618      	mov	r0, r3
 8006b84:	e756      	b.n	8006a34 <__ieee754_sqrt+0x28>
 8006b86:	4690      	mov	r8, r2
 8006b88:	e7be      	b.n	8006b08 <__ieee754_sqrt+0xfc>
 8006b8a:	f7f9 fb2b 	bl	80001e4 <__adddf3>
 8006b8e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 ff4b 	bl	8000a34 <__aeabi_dcmplt>
 8006b9e:	b120      	cbz	r0, 8006baa <__ieee754_sqrt+0x19e>
 8006ba0:	1ca0      	adds	r0, r4, #2
 8006ba2:	bf08      	it	eq
 8006ba4:	3601      	addeq	r6, #1
 8006ba6:	3402      	adds	r4, #2
 8006ba8:	e7df      	b.n	8006b6a <__ieee754_sqrt+0x15e>
 8006baa:	1c63      	adds	r3, r4, #1
 8006bac:	f023 0401 	bic.w	r4, r3, #1
 8006bb0:	e7db      	b.n	8006b6a <__ieee754_sqrt+0x15e>
 8006bb2:	bf00      	nop
 8006bb4:	7ff00000 	.word	0x7ff00000
 8006bb8:	20000100 	.word	0x20000100
 8006bbc:	200000f8 	.word	0x200000f8

08006bc0 <__ieee754_acos>:
 8006bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ec55 4b10 	vmov	r4, r5, d0
 8006bc8:	49b7      	ldr	r1, [pc, #732]	@ (8006ea8 <__ieee754_acos+0x2e8>)
 8006bca:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006bce:	428b      	cmp	r3, r1
 8006bd0:	d919      	bls.n	8006c06 <__ieee754_acos+0x46>
 8006bd2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8006bd6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006bda:	4323      	orrs	r3, r4
 8006bdc:	d106      	bne.n	8006bec <__ieee754_acos+0x2c>
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	f340 8210 	ble.w	8007004 <__ieee754_acos+0x444>
 8006be4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8006e38 <__ieee754_acos+0x278>
 8006be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 faf4 	bl	80001e0 <__aeabi_dsub>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	f7f9 fdd2 	bl	80007a4 <__aeabi_ddiv>
 8006c00:	ec41 0b10 	vmov	d0, r0, r1
 8006c04:	e7f0      	b.n	8006be8 <__ieee754_acos+0x28>
 8006c06:	49a9      	ldr	r1, [pc, #676]	@ (8006eac <__ieee754_acos+0x2ec>)
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	f200 8085 	bhi.w	8006d18 <__ieee754_acos+0x158>
 8006c0e:	4aa8      	ldr	r2, [pc, #672]	@ (8006eb0 <__ieee754_acos+0x2f0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	f240 81fa 	bls.w	800700a <__ieee754_acos+0x44a>
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	f7f9 fc97 	bl	8000550 <__aeabi_dmul>
 8006c22:	a387      	add	r3, pc, #540	@ (adr r3, 8006e40 <__ieee754_acos+0x280>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	f7f9 fc90 	bl	8000550 <__aeabi_dmul>
 8006c30:	a385      	add	r3, pc, #532	@ (adr r3, 8006e48 <__ieee754_acos+0x288>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fad5 	bl	80001e4 <__adddf3>
 8006c3a:	4632      	mov	r2, r6
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	f7f9 fc87 	bl	8000550 <__aeabi_dmul>
 8006c42:	a383      	add	r3, pc, #524	@ (adr r3, 8006e50 <__ieee754_acos+0x290>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 faca 	bl	80001e0 <__aeabi_dsub>
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	463b      	mov	r3, r7
 8006c50:	f7f9 fc7e 	bl	8000550 <__aeabi_dmul>
 8006c54:	a380      	add	r3, pc, #512	@ (adr r3, 8006e58 <__ieee754_acos+0x298>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fac3 	bl	80001e4 <__adddf3>
 8006c5e:	4632      	mov	r2, r6
 8006c60:	463b      	mov	r3, r7
 8006c62:	f7f9 fc75 	bl	8000550 <__aeabi_dmul>
 8006c66:	a37e      	add	r3, pc, #504	@ (adr r3, 8006e60 <__ieee754_acos+0x2a0>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fab8 	bl	80001e0 <__aeabi_dsub>
 8006c70:	4632      	mov	r2, r6
 8006c72:	463b      	mov	r3, r7
 8006c74:	f7f9 fc6c 	bl	8000550 <__aeabi_dmul>
 8006c78:	a37b      	add	r3, pc, #492	@ (adr r3, 8006e68 <__ieee754_acos+0x2a8>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fab1 	bl	80001e4 <__adddf3>
 8006c82:	4632      	mov	r2, r6
 8006c84:	463b      	mov	r3, r7
 8006c86:	f7f9 fc63 	bl	8000550 <__aeabi_dmul>
 8006c8a:	a379      	add	r3, pc, #484	@ (adr r3, 8006e70 <__ieee754_acos+0x2b0>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	4680      	mov	r8, r0
 8006c92:	4689      	mov	r9, r1
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 fc5a 	bl	8000550 <__aeabi_dmul>
 8006c9c:	a376      	add	r3, pc, #472	@ (adr r3, 8006e78 <__ieee754_acos+0x2b8>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f7f9 fa9d 	bl	80001e0 <__aeabi_dsub>
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	463b      	mov	r3, r7
 8006caa:	f7f9 fc51 	bl	8000550 <__aeabi_dmul>
 8006cae:	a374      	add	r3, pc, #464	@ (adr r3, 8006e80 <__ieee754_acos+0x2c0>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f7f9 fa96 	bl	80001e4 <__adddf3>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	f7f9 fc48 	bl	8000550 <__aeabi_dmul>
 8006cc0:	a371      	add	r3, pc, #452	@ (adr r3, 8006e88 <__ieee754_acos+0x2c8>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fa8b 	bl	80001e0 <__aeabi_dsub>
 8006cca:	4632      	mov	r2, r6
 8006ccc:	463b      	mov	r3, r7
 8006cce:	f7f9 fc3f 	bl	8000550 <__aeabi_dmul>
 8006cd2:	4b78      	ldr	r3, [pc, #480]	@ (8006eb4 <__ieee754_acos+0x2f4>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f7f9 fa85 	bl	80001e4 <__adddf3>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fd5f 	bl	80007a4 <__aeabi_ddiv>
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	462b      	mov	r3, r5
 8006cea:	f7f9 fc31 	bl	8000550 <__aeabi_dmul>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	a167      	add	r1, pc, #412	@ (adr r1, 8006e90 <__ieee754_acos+0x2d0>)
 8006cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf8:	f7f9 fa72 	bl	80001e0 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 fa6c 	bl	80001e0 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	a162      	add	r1, pc, #392	@ (adr r1, 8006e98 <__ieee754_acos+0x2d8>)
 8006d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d12:	f7f9 fa65 	bl	80001e0 <__aeabi_dsub>
 8006d16:	e773      	b.n	8006c00 <__ieee754_acos+0x40>
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	f280 80cf 	bge.w	8006ebc <__ieee754_acos+0x2fc>
 8006d1e:	4b65      	ldr	r3, [pc, #404]	@ (8006eb4 <__ieee754_acos+0x2f4>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fa5d 	bl	80001e4 <__adddf3>
 8006d2a:	4b63      	ldr	r3, [pc, #396]	@ (8006eb8 <__ieee754_acos+0x2f8>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f7f9 fc0f 	bl	8000550 <__aeabi_dmul>
 8006d32:	a343      	add	r3, pc, #268	@ (adr r3, 8006e40 <__ieee754_acos+0x280>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	f7f9 fc08 	bl	8000550 <__aeabi_dmul>
 8006d40:	a341      	add	r3, pc, #260	@ (adr r3, 8006e48 <__ieee754_acos+0x288>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fa4d 	bl	80001e4 <__adddf3>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	f7f9 fbff 	bl	8000550 <__aeabi_dmul>
 8006d52:	a33f      	add	r3, pc, #252	@ (adr r3, 8006e50 <__ieee754_acos+0x290>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fa42 	bl	80001e0 <__aeabi_dsub>
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	462b      	mov	r3, r5
 8006d60:	f7f9 fbf6 	bl	8000550 <__aeabi_dmul>
 8006d64:	a33c      	add	r3, pc, #240	@ (adr r3, 8006e58 <__ieee754_acos+0x298>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f7f9 fa3b 	bl	80001e4 <__adddf3>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f7f9 fbed 	bl	8000550 <__aeabi_dmul>
 8006d76:	a33a      	add	r3, pc, #232	@ (adr r3, 8006e60 <__ieee754_acos+0x2a0>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f7f9 fa30 	bl	80001e0 <__aeabi_dsub>
 8006d80:	4622      	mov	r2, r4
 8006d82:	462b      	mov	r3, r5
 8006d84:	f7f9 fbe4 	bl	8000550 <__aeabi_dmul>
 8006d88:	a337      	add	r3, pc, #220	@ (adr r3, 8006e68 <__ieee754_acos+0x2a8>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f7f9 fa29 	bl	80001e4 <__adddf3>
 8006d92:	4622      	mov	r2, r4
 8006d94:	462b      	mov	r3, r5
 8006d96:	f7f9 fbdb 	bl	8000550 <__aeabi_dmul>
 8006d9a:	a335      	add	r3, pc, #212	@ (adr r3, 8006e70 <__ieee754_acos+0x2b0>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	4606      	mov	r6, r0
 8006da2:	460f      	mov	r7, r1
 8006da4:	4620      	mov	r0, r4
 8006da6:	4629      	mov	r1, r5
 8006da8:	f7f9 fbd2 	bl	8000550 <__aeabi_dmul>
 8006dac:	a332      	add	r3, pc, #200	@ (adr r3, 8006e78 <__ieee754_acos+0x2b8>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f7f9 fa15 	bl	80001e0 <__aeabi_dsub>
 8006db6:	4622      	mov	r2, r4
 8006db8:	462b      	mov	r3, r5
 8006dba:	f7f9 fbc9 	bl	8000550 <__aeabi_dmul>
 8006dbe:	a330      	add	r3, pc, #192	@ (adr r3, 8006e80 <__ieee754_acos+0x2c0>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f7f9 fa0e 	bl	80001e4 <__adddf3>
 8006dc8:	4622      	mov	r2, r4
 8006dca:	462b      	mov	r3, r5
 8006dcc:	f7f9 fbc0 	bl	8000550 <__aeabi_dmul>
 8006dd0:	a32d      	add	r3, pc, #180	@ (adr r3, 8006e88 <__ieee754_acos+0x2c8>)
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f7f9 fa03 	bl	80001e0 <__aeabi_dsub>
 8006dda:	4622      	mov	r2, r4
 8006ddc:	462b      	mov	r3, r5
 8006dde:	f7f9 fbb7 	bl	8000550 <__aeabi_dmul>
 8006de2:	4b34      	ldr	r3, [pc, #208]	@ (8006eb4 <__ieee754_acos+0x2f4>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	f7f9 f9fd 	bl	80001e4 <__adddf3>
 8006dea:	ec45 4b10 	vmov	d0, r4, r5
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	f7ff fe0b 	bl	8006a0c <__ieee754_sqrt>
 8006df6:	ec55 4b10 	vmov	r4, r5, d0
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fccf 	bl	80007a4 <__aeabi_ddiv>
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	f7f9 fba1 	bl	8000550 <__aeabi_dmul>
 8006e0e:	a320      	add	r3, pc, #128	@ (adr r3, 8006e90 <__ieee754_acos+0x2d0>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 f9e4 	bl	80001e0 <__aeabi_dsub>
 8006e18:	4622      	mov	r2, r4
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	f7f9 f9e2 	bl	80001e4 <__adddf3>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	f7f9 f9de 	bl	80001e4 <__adddf3>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	a11c      	add	r1, pc, #112	@ (adr r1, 8006ea0 <__ieee754_acos+0x2e0>)
 8006e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e32:	e76e      	b.n	8006d12 <__ieee754_acos+0x152>
 8006e34:	f3af 8000 	nop.w
	...
 8006e40:	0dfdf709 	.word	0x0dfdf709
 8006e44:	3f023de1 	.word	0x3f023de1
 8006e48:	7501b288 	.word	0x7501b288
 8006e4c:	3f49efe0 	.word	0x3f49efe0
 8006e50:	b5688f3b 	.word	0xb5688f3b
 8006e54:	3fa48228 	.word	0x3fa48228
 8006e58:	0e884455 	.word	0x0e884455
 8006e5c:	3fc9c155 	.word	0x3fc9c155
 8006e60:	03eb6f7d 	.word	0x03eb6f7d
 8006e64:	3fd4d612 	.word	0x3fd4d612
 8006e68:	55555555 	.word	0x55555555
 8006e6c:	3fc55555 	.word	0x3fc55555
 8006e70:	b12e9282 	.word	0xb12e9282
 8006e74:	3fb3b8c5 	.word	0x3fb3b8c5
 8006e78:	1b8d0159 	.word	0x1b8d0159
 8006e7c:	3fe6066c 	.word	0x3fe6066c
 8006e80:	9c598ac8 	.word	0x9c598ac8
 8006e84:	40002ae5 	.word	0x40002ae5
 8006e88:	1c8a2d4b 	.word	0x1c8a2d4b
 8006e8c:	40033a27 	.word	0x40033a27
 8006e90:	33145c07 	.word	0x33145c07
 8006e94:	3c91a626 	.word	0x3c91a626
 8006e98:	54442d18 	.word	0x54442d18
 8006e9c:	3ff921fb 	.word	0x3ff921fb
 8006ea0:	54442d18 	.word	0x54442d18
 8006ea4:	400921fb 	.word	0x400921fb
 8006ea8:	3fefffff 	.word	0x3fefffff
 8006eac:	3fdfffff 	.word	0x3fdfffff
 8006eb0:	3c600000 	.word	0x3c600000
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	3fe00000 	.word	0x3fe00000
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	496b      	ldr	r1, [pc, #428]	@ (8007070 <__ieee754_acos+0x4b0>)
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7f9 f98c 	bl	80001e0 <__aeabi_dsub>
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8007074 <__ieee754_acos+0x4b4>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7f9 fb40 	bl	8000550 <__aeabi_dmul>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	ec45 4b10 	vmov	d0, r4, r5
 8006ed8:	f7ff fd98 	bl	8006a0c <__ieee754_sqrt>
 8006edc:	a34c      	add	r3, pc, #304	@ (adr r3, 8007010 <__ieee754_acos+0x450>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	ec59 8b10 	vmov	r8, r9, d0
 8006eea:	f7f9 fb31 	bl	8000550 <__aeabi_dmul>
 8006eee:	a34a      	add	r3, pc, #296	@ (adr r3, 8007018 <__ieee754_acos+0x458>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 f976 	bl	80001e4 <__adddf3>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	462b      	mov	r3, r5
 8006efc:	f7f9 fb28 	bl	8000550 <__aeabi_dmul>
 8006f00:	a347      	add	r3, pc, #284	@ (adr r3, 8007020 <__ieee754_acos+0x460>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 f96b 	bl	80001e0 <__aeabi_dsub>
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	f7f9 fb1f 	bl	8000550 <__aeabi_dmul>
 8006f12:	a345      	add	r3, pc, #276	@ (adr r3, 8007028 <__ieee754_acos+0x468>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 f964 	bl	80001e4 <__adddf3>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	462b      	mov	r3, r5
 8006f20:	f7f9 fb16 	bl	8000550 <__aeabi_dmul>
 8006f24:	a342      	add	r3, pc, #264	@ (adr r3, 8007030 <__ieee754_acos+0x470>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f7f9 f959 	bl	80001e0 <__aeabi_dsub>
 8006f2e:	4622      	mov	r2, r4
 8006f30:	462b      	mov	r3, r5
 8006f32:	f7f9 fb0d 	bl	8000550 <__aeabi_dmul>
 8006f36:	a340      	add	r3, pc, #256	@ (adr r3, 8007038 <__ieee754_acos+0x478>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 f952 	bl	80001e4 <__adddf3>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 fb04 	bl	8000550 <__aeabi_dmul>
 8006f48:	a33d      	add	r3, pc, #244	@ (adr r3, 8007040 <__ieee754_acos+0x480>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	4682      	mov	sl, r0
 8006f50:	468b      	mov	fp, r1
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fafb 	bl	8000550 <__aeabi_dmul>
 8006f5a:	a33b      	add	r3, pc, #236	@ (adr r3, 8007048 <__ieee754_acos+0x488>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f7f9 f93e 	bl	80001e0 <__aeabi_dsub>
 8006f64:	4622      	mov	r2, r4
 8006f66:	462b      	mov	r3, r5
 8006f68:	f7f9 faf2 	bl	8000550 <__aeabi_dmul>
 8006f6c:	a338      	add	r3, pc, #224	@ (adr r3, 8007050 <__ieee754_acos+0x490>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 f937 	bl	80001e4 <__adddf3>
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	f7f9 fae9 	bl	8000550 <__aeabi_dmul>
 8006f7e:	a336      	add	r3, pc, #216	@ (adr r3, 8007058 <__ieee754_acos+0x498>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f92c 	bl	80001e0 <__aeabi_dsub>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 fae0 	bl	8000550 <__aeabi_dmul>
 8006f90:	4b37      	ldr	r3, [pc, #220]	@ (8007070 <__ieee754_acos+0x4b0>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	f7f9 f926 	bl	80001e4 <__adddf3>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	f7f9 fc00 	bl	80007a4 <__aeabi_ddiv>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	f7f9 fad2 	bl	8000550 <__aeabi_dmul>
 8006fac:	2600      	movs	r6, #0
 8006fae:	4682      	mov	sl, r0
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 fac9 	bl	8000550 <__aeabi_dmul>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f90b 	bl	80001e0 <__aeabi_dsub>
 8006fca:	4632      	mov	r2, r6
 8006fcc:	4604      	mov	r4, r0
 8006fce:	460d      	mov	r5, r1
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 f905 	bl	80001e4 <__adddf3>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fbdf 	bl	80007a4 <__aeabi_ddiv>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4650      	mov	r0, sl
 8006fec:	4659      	mov	r1, fp
 8006fee:	f7f9 f8f9 	bl	80001e4 <__adddf3>
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	464b      	mov	r3, r9
 8006ff6:	f7f9 f8f5 	bl	80001e4 <__adddf3>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	f7f9 f8f1 	bl	80001e4 <__adddf3>
 8007002:	e5fd      	b.n	8006c00 <__ieee754_acos+0x40>
 8007004:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007060 <__ieee754_acos+0x4a0>
 8007008:	e5ee      	b.n	8006be8 <__ieee754_acos+0x28>
 800700a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007068 <__ieee754_acos+0x4a8>
 800700e:	e5eb      	b.n	8006be8 <__ieee754_acos+0x28>
 8007010:	0dfdf709 	.word	0x0dfdf709
 8007014:	3f023de1 	.word	0x3f023de1
 8007018:	7501b288 	.word	0x7501b288
 800701c:	3f49efe0 	.word	0x3f49efe0
 8007020:	b5688f3b 	.word	0xb5688f3b
 8007024:	3fa48228 	.word	0x3fa48228
 8007028:	0e884455 	.word	0x0e884455
 800702c:	3fc9c155 	.word	0x3fc9c155
 8007030:	03eb6f7d 	.word	0x03eb6f7d
 8007034:	3fd4d612 	.word	0x3fd4d612
 8007038:	55555555 	.word	0x55555555
 800703c:	3fc55555 	.word	0x3fc55555
 8007040:	b12e9282 	.word	0xb12e9282
 8007044:	3fb3b8c5 	.word	0x3fb3b8c5
 8007048:	1b8d0159 	.word	0x1b8d0159
 800704c:	3fe6066c 	.word	0x3fe6066c
 8007050:	9c598ac8 	.word	0x9c598ac8
 8007054:	40002ae5 	.word	0x40002ae5
 8007058:	1c8a2d4b 	.word	0x1c8a2d4b
 800705c:	40033a27 	.word	0x40033a27
 8007060:	54442d18 	.word	0x54442d18
 8007064:	400921fb 	.word	0x400921fb
 8007068:	54442d18 	.word	0x54442d18
 800706c:	3ff921fb 	.word	0x3ff921fb
 8007070:	3ff00000 	.word	0x3ff00000
 8007074:	3fe00000 	.word	0x3fe00000

08007078 <__ieee754_asin>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	ec55 4b10 	vmov	r4, r5, d0
 8007080:	4bc7      	ldr	r3, [pc, #796]	@ (80073a0 <__ieee754_asin+0x328>)
 8007082:	b087      	sub	sp, #28
 8007084:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007088:	429e      	cmp	r6, r3
 800708a:	9501      	str	r5, [sp, #4]
 800708c:	d92d      	bls.n	80070ea <__ieee754_asin+0x72>
 800708e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007092:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007096:	4326      	orrs	r6, r4
 8007098:	d116      	bne.n	80070c8 <__ieee754_asin+0x50>
 800709a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007338 <__ieee754_asin+0x2c0>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 fa54 	bl	8000550 <__aeabi_dmul>
 80070a8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8007340 <__ieee754_asin+0x2c8>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 fa4b 	bl	8000550 <__aeabi_dmul>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4630      	mov	r0, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	f7f9 f88f 	bl	80001e4 <__adddf3>
 80070c6:	e009      	b.n	80070dc <__ieee754_asin+0x64>
 80070c8:	4622      	mov	r2, r4
 80070ca:	462b      	mov	r3, r5
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 f886 	bl	80001e0 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	f7f9 fb64 	bl	80007a4 <__aeabi_ddiv>
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	ec45 4b10 	vmov	d0, r4, r5
 80070e4:	b007      	add	sp, #28
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ea:	4bae      	ldr	r3, [pc, #696]	@ (80073a4 <__ieee754_asin+0x32c>)
 80070ec:	429e      	cmp	r6, r3
 80070ee:	d810      	bhi.n	8007112 <__ieee754_asin+0x9a>
 80070f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80070f4:	f080 80ad 	bcs.w	8007252 <__ieee754_asin+0x1da>
 80070f8:	a393      	add	r3, pc, #588	@ (adr r3, 8007348 <__ieee754_asin+0x2d0>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f7f9 f86f 	bl	80001e4 <__adddf3>
 8007106:	4ba8      	ldr	r3, [pc, #672]	@ (80073a8 <__ieee754_asin+0x330>)
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fcb1 	bl	8000a70 <__aeabi_dcmpgt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d1e6      	bne.n	80070e0 <__ieee754_asin+0x68>
 8007112:	ec45 4b10 	vmov	d0, r4, r5
 8007116:	f7ff fbdd 	bl	80068d4 <fabs>
 800711a:	49a3      	ldr	r1, [pc, #652]	@ (80073a8 <__ieee754_asin+0x330>)
 800711c:	ec53 2b10 	vmov	r2, r3, d0
 8007120:	2000      	movs	r0, #0
 8007122:	f7f9 f85d 	bl	80001e0 <__aeabi_dsub>
 8007126:	4ba1      	ldr	r3, [pc, #644]	@ (80073ac <__ieee754_asin+0x334>)
 8007128:	2200      	movs	r2, #0
 800712a:	f7f9 fa11 	bl	8000550 <__aeabi_dmul>
 800712e:	a388      	add	r3, pc, #544	@ (adr r3, 8007350 <__ieee754_asin+0x2d8>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 fa0a 	bl	8000550 <__aeabi_dmul>
 800713c:	a386      	add	r3, pc, #536	@ (adr r3, 8007358 <__ieee754_asin+0x2e0>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f84f 	bl	80001e4 <__adddf3>
 8007146:	4622      	mov	r2, r4
 8007148:	462b      	mov	r3, r5
 800714a:	f7f9 fa01 	bl	8000550 <__aeabi_dmul>
 800714e:	a384      	add	r3, pc, #528	@ (adr r3, 8007360 <__ieee754_asin+0x2e8>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f844 	bl	80001e0 <__aeabi_dsub>
 8007158:	4622      	mov	r2, r4
 800715a:	462b      	mov	r3, r5
 800715c:	f7f9 f9f8 	bl	8000550 <__aeabi_dmul>
 8007160:	a381      	add	r3, pc, #516	@ (adr r3, 8007368 <__ieee754_asin+0x2f0>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 f83d 	bl	80001e4 <__adddf3>
 800716a:	4622      	mov	r2, r4
 800716c:	462b      	mov	r3, r5
 800716e:	f7f9 f9ef 	bl	8000550 <__aeabi_dmul>
 8007172:	a37f      	add	r3, pc, #508	@ (adr r3, 8007370 <__ieee754_asin+0x2f8>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f7f9 f832 	bl	80001e0 <__aeabi_dsub>
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	f7f9 f9e6 	bl	8000550 <__aeabi_dmul>
 8007184:	a37c      	add	r3, pc, #496	@ (adr r3, 8007378 <__ieee754_asin+0x300>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f82b 	bl	80001e4 <__adddf3>
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	f7f9 f9dd 	bl	8000550 <__aeabi_dmul>
 8007196:	a37a      	add	r3, pc, #488	@ (adr r3, 8007380 <__ieee754_asin+0x308>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f9 f9d4 	bl	8000550 <__aeabi_dmul>
 80071a8:	a377      	add	r3, pc, #476	@ (adr r3, 8007388 <__ieee754_asin+0x310>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 f817 	bl	80001e0 <__aeabi_dsub>
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	f7f9 f9cb 	bl	8000550 <__aeabi_dmul>
 80071ba:	a375      	add	r3, pc, #468	@ (adr r3, 8007390 <__ieee754_asin+0x318>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f810 	bl	80001e4 <__adddf3>
 80071c4:	4622      	mov	r2, r4
 80071c6:	462b      	mov	r3, r5
 80071c8:	f7f9 f9c2 	bl	8000550 <__aeabi_dmul>
 80071cc:	a372      	add	r3, pc, #456	@ (adr r3, 8007398 <__ieee754_asin+0x320>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f7f9 f805 	bl	80001e0 <__aeabi_dsub>
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	f7f9 f9b9 	bl	8000550 <__aeabi_dmul>
 80071de:	4b72      	ldr	r3, [pc, #456]	@ (80073a8 <__ieee754_asin+0x330>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7f8 ffff 	bl	80001e4 <__adddf3>
 80071e6:	ec45 4b10 	vmov	d0, r4, r5
 80071ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ee:	f7ff fc0d 	bl	8006a0c <__ieee754_sqrt>
 80071f2:	4b6f      	ldr	r3, [pc, #444]	@ (80073b0 <__ieee754_asin+0x338>)
 80071f4:	429e      	cmp	r6, r3
 80071f6:	ec5b ab10 	vmov	sl, fp, d0
 80071fa:	f240 80db 	bls.w	80073b4 <__ieee754_asin+0x33c>
 80071fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007206:	f7f9 facd 	bl	80007a4 <__aeabi_ddiv>
 800720a:	4652      	mov	r2, sl
 800720c:	465b      	mov	r3, fp
 800720e:	f7f9 f99f 	bl	8000550 <__aeabi_dmul>
 8007212:	4652      	mov	r2, sl
 8007214:	465b      	mov	r3, fp
 8007216:	f7f8 ffe5 	bl	80001e4 <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	f7f8 ffe1 	bl	80001e4 <__adddf3>
 8007222:	a347      	add	r3, pc, #284	@ (adr r3, 8007340 <__ieee754_asin+0x2c8>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 ffda 	bl	80001e0 <__aeabi_dsub>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	a141      	add	r1, pc, #260	@ (adr r1, 8007338 <__ieee754_asin+0x2c0>)
 8007232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007236:	f7f8 ffd3 	bl	80001e0 <__aeabi_dsub>
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfdc      	itt	le
 8007240:	4602      	movle	r2, r0
 8007242:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	bfdc      	itt	le
 800724c:	4614      	movle	r4, r2
 800724e:	461d      	movle	r5, r3
 8007250:	e746      	b.n	80070e0 <__ieee754_asin+0x68>
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f979 	bl	8000550 <__aeabi_dmul>
 800725e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007350 <__ieee754_asin+0x2d8>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	f7f9 f972 	bl	8000550 <__aeabi_dmul>
 800726c:	a33a      	add	r3, pc, #232	@ (adr r3, 8007358 <__ieee754_asin+0x2e0>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f8 ffb7 	bl	80001e4 <__adddf3>
 8007276:	4632      	mov	r2, r6
 8007278:	463b      	mov	r3, r7
 800727a:	f7f9 f969 	bl	8000550 <__aeabi_dmul>
 800727e:	a338      	add	r3, pc, #224	@ (adr r3, 8007360 <__ieee754_asin+0x2e8>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f8 ffac 	bl	80001e0 <__aeabi_dsub>
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	f7f9 f960 	bl	8000550 <__aeabi_dmul>
 8007290:	a335      	add	r3, pc, #212	@ (adr r3, 8007368 <__ieee754_asin+0x2f0>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f8 ffa5 	bl	80001e4 <__adddf3>
 800729a:	4632      	mov	r2, r6
 800729c:	463b      	mov	r3, r7
 800729e:	f7f9 f957 	bl	8000550 <__aeabi_dmul>
 80072a2:	a333      	add	r3, pc, #204	@ (adr r3, 8007370 <__ieee754_asin+0x2f8>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f8 ff9a 	bl	80001e0 <__aeabi_dsub>
 80072ac:	4632      	mov	r2, r6
 80072ae:	463b      	mov	r3, r7
 80072b0:	f7f9 f94e 	bl	8000550 <__aeabi_dmul>
 80072b4:	a330      	add	r3, pc, #192	@ (adr r3, 8007378 <__ieee754_asin+0x300>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ff93 	bl	80001e4 <__adddf3>
 80072be:	4632      	mov	r2, r6
 80072c0:	463b      	mov	r3, r7
 80072c2:	f7f9 f945 	bl	8000550 <__aeabi_dmul>
 80072c6:	a32e      	add	r3, pc, #184	@ (adr r3, 8007380 <__ieee754_asin+0x308>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f9 f93c 	bl	8000550 <__aeabi_dmul>
 80072d8:	a32b      	add	r3, pc, #172	@ (adr r3, 8007388 <__ieee754_asin+0x310>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f8 ff7f 	bl	80001e0 <__aeabi_dsub>
 80072e2:	4632      	mov	r2, r6
 80072e4:	463b      	mov	r3, r7
 80072e6:	f7f9 f933 	bl	8000550 <__aeabi_dmul>
 80072ea:	a329      	add	r3, pc, #164	@ (adr r3, 8007390 <__ieee754_asin+0x318>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f7f8 ff78 	bl	80001e4 <__adddf3>
 80072f4:	4632      	mov	r2, r6
 80072f6:	463b      	mov	r3, r7
 80072f8:	f7f9 f92a 	bl	8000550 <__aeabi_dmul>
 80072fc:	a326      	add	r3, pc, #152	@ (adr r3, 8007398 <__ieee754_asin+0x320>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f7f8 ff6d 	bl	80001e0 <__aeabi_dsub>
 8007306:	4632      	mov	r2, r6
 8007308:	463b      	mov	r3, r7
 800730a:	f7f9 f921 	bl	8000550 <__aeabi_dmul>
 800730e:	4b26      	ldr	r3, [pc, #152]	@ (80073a8 <__ieee754_asin+0x330>)
 8007310:	2200      	movs	r2, #0
 8007312:	f7f8 ff67 	bl	80001e4 <__adddf3>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f9 fa41 	bl	80007a4 <__aeabi_ddiv>
 8007322:	4622      	mov	r2, r4
 8007324:	462b      	mov	r3, r5
 8007326:	f7f9 f913 	bl	8000550 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	e6c6      	b.n	80070c2 <__ieee754_asin+0x4a>
 8007334:	f3af 8000 	nop.w
 8007338:	54442d18 	.word	0x54442d18
 800733c:	3ff921fb 	.word	0x3ff921fb
 8007340:	33145c07 	.word	0x33145c07
 8007344:	3c91a626 	.word	0x3c91a626
 8007348:	8800759c 	.word	0x8800759c
 800734c:	7e37e43c 	.word	0x7e37e43c
 8007350:	0dfdf709 	.word	0x0dfdf709
 8007354:	3f023de1 	.word	0x3f023de1
 8007358:	7501b288 	.word	0x7501b288
 800735c:	3f49efe0 	.word	0x3f49efe0
 8007360:	b5688f3b 	.word	0xb5688f3b
 8007364:	3fa48228 	.word	0x3fa48228
 8007368:	0e884455 	.word	0x0e884455
 800736c:	3fc9c155 	.word	0x3fc9c155
 8007370:	03eb6f7d 	.word	0x03eb6f7d
 8007374:	3fd4d612 	.word	0x3fd4d612
 8007378:	55555555 	.word	0x55555555
 800737c:	3fc55555 	.word	0x3fc55555
 8007380:	b12e9282 	.word	0xb12e9282
 8007384:	3fb3b8c5 	.word	0x3fb3b8c5
 8007388:	1b8d0159 	.word	0x1b8d0159
 800738c:	3fe6066c 	.word	0x3fe6066c
 8007390:	9c598ac8 	.word	0x9c598ac8
 8007394:	40002ae5 	.word	0x40002ae5
 8007398:	1c8a2d4b 	.word	0x1c8a2d4b
 800739c:	40033a27 	.word	0x40033a27
 80073a0:	3fefffff 	.word	0x3fefffff
 80073a4:	3fdfffff 	.word	0x3fdfffff
 80073a8:	3ff00000 	.word	0x3ff00000
 80073ac:	3fe00000 	.word	0x3fe00000
 80073b0:	3fef3332 	.word	0x3fef3332
 80073b4:	4652      	mov	r2, sl
 80073b6:	465b      	mov	r3, fp
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f8 ff12 	bl	80001e4 <__adddf3>
 80073c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c4:	4606      	mov	r6, r0
 80073c6:	460f      	mov	r7, r1
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f9 f9ea 	bl	80007a4 <__aeabi_ddiv>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 f8ba 	bl	8000550 <__aeabi_dmul>
 80073dc:	f04f 0800 	mov.w	r8, #0
 80073e0:	4606      	mov	r6, r0
 80073e2:	460f      	mov	r7, r1
 80073e4:	4642      	mov	r2, r8
 80073e6:	465b      	mov	r3, fp
 80073e8:	4640      	mov	r0, r8
 80073ea:	4659      	mov	r1, fp
 80073ec:	f7f9 f8b0 	bl	8000550 <__aeabi_dmul>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f8 fef2 	bl	80001e0 <__aeabi_dsub>
 80073fc:	4642      	mov	r2, r8
 80073fe:	4604      	mov	r4, r0
 8007400:	460d      	mov	r5, r1
 8007402:	465b      	mov	r3, fp
 8007404:	4650      	mov	r0, sl
 8007406:	4659      	mov	r1, fp
 8007408:	f7f8 feec 	bl	80001e4 <__adddf3>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f7f9 f9c6 	bl	80007a4 <__aeabi_ddiv>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	f7f8 fee2 	bl	80001e4 <__adddf3>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	a112      	add	r1, pc, #72	@ (adr r1, 8007470 <__ieee754_asin+0x3f8>)
 8007426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742a:	f7f8 fed9 	bl	80001e0 <__aeabi_dsub>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	f7f8 fed3 	bl	80001e0 <__aeabi_dsub>
 800743a:	4642      	mov	r2, r8
 800743c:	4604      	mov	r4, r0
 800743e:	460d      	mov	r5, r1
 8007440:	465b      	mov	r3, fp
 8007442:	4640      	mov	r0, r8
 8007444:	4659      	mov	r1, fp
 8007446:	f7f8 fecd 	bl	80001e4 <__adddf3>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007478 <__ieee754_asin+0x400>)
 8007450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007454:	f7f8 fec4 	bl	80001e0 <__aeabi_dsub>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f8 febe 	bl	80001e0 <__aeabi_dsub>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	a103      	add	r1, pc, #12	@ (adr r1, 8007478 <__ieee754_asin+0x400>)
 800746a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800746e:	e6e2      	b.n	8007236 <__ieee754_asin+0x1be>
 8007470:	33145c07 	.word	0x33145c07
 8007474:	3c91a626 	.word	0x3c91a626
 8007478:	54442d18 	.word	0x54442d18
 800747c:	3fe921fb 	.word	0x3fe921fb

08007480 <__ieee754_atan2>:
 8007480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007484:	ec57 6b11 	vmov	r6, r7, d1
 8007488:	4273      	negs	r3, r6
 800748a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007608 <__ieee754_atan2+0x188>
 800748e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007492:	4333      	orrs	r3, r6
 8007494:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007498:	4543      	cmp	r3, r8
 800749a:	ec51 0b10 	vmov	r0, r1, d0
 800749e:	4635      	mov	r5, r6
 80074a0:	d809      	bhi.n	80074b6 <__ieee754_atan2+0x36>
 80074a2:	4244      	negs	r4, r0
 80074a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80074a8:	4304      	orrs	r4, r0
 80074aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80074ae:	4544      	cmp	r4, r8
 80074b0:	468e      	mov	lr, r1
 80074b2:	4681      	mov	r9, r0
 80074b4:	d907      	bls.n	80074c6 <__ieee754_atan2+0x46>
 80074b6:	4632      	mov	r2, r6
 80074b8:	463b      	mov	r3, r7
 80074ba:	f7f8 fe93 	bl	80001e4 <__adddf3>
 80074be:	ec41 0b10 	vmov	d0, r0, r1
 80074c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80074ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80074ce:	4334      	orrs	r4, r6
 80074d0:	d103      	bne.n	80074da <__ieee754_atan2+0x5a>
 80074d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d6:	f000 bddf 	b.w	8008098 <atan>
 80074da:	17bc      	asrs	r4, r7, #30
 80074dc:	f004 0402 	and.w	r4, r4, #2
 80074e0:	ea53 0909 	orrs.w	r9, r3, r9
 80074e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80074e8:	d107      	bne.n	80074fa <__ieee754_atan2+0x7a>
 80074ea:	2c02      	cmp	r4, #2
 80074ec:	d05f      	beq.n	80075ae <__ieee754_atan2+0x12e>
 80074ee:	2c03      	cmp	r4, #3
 80074f0:	d1e5      	bne.n	80074be <__ieee754_atan2+0x3e>
 80074f2:	a141      	add	r1, pc, #260	@ (adr r1, 80075f8 <__ieee754_atan2+0x178>)
 80074f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f8:	e7e1      	b.n	80074be <__ieee754_atan2+0x3e>
 80074fa:	4315      	orrs	r5, r2
 80074fc:	d106      	bne.n	800750c <__ieee754_atan2+0x8c>
 80074fe:	f1be 0f00 	cmp.w	lr, #0
 8007502:	da5f      	bge.n	80075c4 <__ieee754_atan2+0x144>
 8007504:	a13e      	add	r1, pc, #248	@ (adr r1, 8007600 <__ieee754_atan2+0x180>)
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750a:	e7d8      	b.n	80074be <__ieee754_atan2+0x3e>
 800750c:	4542      	cmp	r2, r8
 800750e:	d10f      	bne.n	8007530 <__ieee754_atan2+0xb0>
 8007510:	4293      	cmp	r3, r2
 8007512:	f104 34ff 	add.w	r4, r4, #4294967295
 8007516:	d107      	bne.n	8007528 <__ieee754_atan2+0xa8>
 8007518:	2c02      	cmp	r4, #2
 800751a:	d84c      	bhi.n	80075b6 <__ieee754_atan2+0x136>
 800751c:	4b34      	ldr	r3, [pc, #208]	@ (80075f0 <__ieee754_atan2+0x170>)
 800751e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007526:	e7ca      	b.n	80074be <__ieee754_atan2+0x3e>
 8007528:	2c02      	cmp	r4, #2
 800752a:	d848      	bhi.n	80075be <__ieee754_atan2+0x13e>
 800752c:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <__ieee754_atan2+0x174>)
 800752e:	e7f6      	b.n	800751e <__ieee754_atan2+0x9e>
 8007530:	4543      	cmp	r3, r8
 8007532:	d0e4      	beq.n	80074fe <__ieee754_atan2+0x7e>
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800753a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800753e:	da1e      	bge.n	800757e <__ieee754_atan2+0xfe>
 8007540:	2f00      	cmp	r7, #0
 8007542:	da01      	bge.n	8007548 <__ieee754_atan2+0xc8>
 8007544:	323c      	adds	r2, #60	@ 0x3c
 8007546:	db1e      	blt.n	8007586 <__ieee754_atan2+0x106>
 8007548:	4632      	mov	r2, r6
 800754a:	463b      	mov	r3, r7
 800754c:	f7f9 f92a 	bl	80007a4 <__aeabi_ddiv>
 8007550:	ec41 0b10 	vmov	d0, r0, r1
 8007554:	f7ff f9be 	bl	80068d4 <fabs>
 8007558:	f000 fd9e 	bl	8008098 <atan>
 800755c:	ec51 0b10 	vmov	r0, r1, d0
 8007560:	2c01      	cmp	r4, #1
 8007562:	d013      	beq.n	800758c <__ieee754_atan2+0x10c>
 8007564:	2c02      	cmp	r4, #2
 8007566:	d015      	beq.n	8007594 <__ieee754_atan2+0x114>
 8007568:	2c00      	cmp	r4, #0
 800756a:	d0a8      	beq.n	80074be <__ieee754_atan2+0x3e>
 800756c:	a318      	add	r3, pc, #96	@ (adr r3, 80075d0 <__ieee754_atan2+0x150>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fe35 	bl	80001e0 <__aeabi_dsub>
 8007576:	a318      	add	r3, pc, #96	@ (adr r3, 80075d8 <__ieee754_atan2+0x158>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	e014      	b.n	80075a8 <__ieee754_atan2+0x128>
 800757e:	a118      	add	r1, pc, #96	@ (adr r1, 80075e0 <__ieee754_atan2+0x160>)
 8007580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007584:	e7ec      	b.n	8007560 <__ieee754_atan2+0xe0>
 8007586:	2000      	movs	r0, #0
 8007588:	2100      	movs	r1, #0
 800758a:	e7e9      	b.n	8007560 <__ieee754_atan2+0xe0>
 800758c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007590:	4619      	mov	r1, r3
 8007592:	e794      	b.n	80074be <__ieee754_atan2+0x3e>
 8007594:	a30e      	add	r3, pc, #56	@ (adr r3, 80075d0 <__ieee754_atan2+0x150>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f7f8 fe21 	bl	80001e0 <__aeabi_dsub>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	a10d      	add	r1, pc, #52	@ (adr r1, 80075d8 <__ieee754_atan2+0x158>)
 80075a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a8:	f7f8 fe1a 	bl	80001e0 <__aeabi_dsub>
 80075ac:	e787      	b.n	80074be <__ieee754_atan2+0x3e>
 80075ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80075d8 <__ieee754_atan2+0x158>)
 80075b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b4:	e783      	b.n	80074be <__ieee754_atan2+0x3e>
 80075b6:	a10c      	add	r1, pc, #48	@ (adr r1, 80075e8 <__ieee754_atan2+0x168>)
 80075b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075bc:	e77f      	b.n	80074be <__ieee754_atan2+0x3e>
 80075be:	2000      	movs	r0, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	e77c      	b.n	80074be <__ieee754_atan2+0x3e>
 80075c4:	a106      	add	r1, pc, #24	@ (adr r1, 80075e0 <__ieee754_atan2+0x160>)
 80075c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ca:	e778      	b.n	80074be <__ieee754_atan2+0x3e>
 80075cc:	f3af 8000 	nop.w
 80075d0:	33145c07 	.word	0x33145c07
 80075d4:	3ca1a626 	.word	0x3ca1a626
 80075d8:	54442d18 	.word	0x54442d18
 80075dc:	400921fb 	.word	0x400921fb
 80075e0:	54442d18 	.word	0x54442d18
 80075e4:	3ff921fb 	.word	0x3ff921fb
 80075e8:	54442d18 	.word	0x54442d18
 80075ec:	3fe921fb 	.word	0x3fe921fb
 80075f0:	08008598 	.word	0x08008598
 80075f4:	08008580 	.word	0x08008580
 80075f8:	54442d18 	.word	0x54442d18
 80075fc:	c00921fb 	.word	0xc00921fb
 8007600:	54442d18 	.word	0x54442d18
 8007604:	bff921fb 	.word	0xbff921fb
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	00000000 	.word	0x00000000

08007610 <__ieee754_pow>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	b091      	sub	sp, #68	@ 0x44
 8007616:	ed8d 1b00 	vstr	d1, [sp]
 800761a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800761e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007622:	ea5a 0001 	orrs.w	r0, sl, r1
 8007626:	ec57 6b10 	vmov	r6, r7, d0
 800762a:	d113      	bne.n	8007654 <__ieee754_pow+0x44>
 800762c:	19b3      	adds	r3, r6, r6
 800762e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007632:	4152      	adcs	r2, r2
 8007634:	4298      	cmp	r0, r3
 8007636:	4b98      	ldr	r3, [pc, #608]	@ (8007898 <__ieee754_pow+0x288>)
 8007638:	4193      	sbcs	r3, r2
 800763a:	f080 84ea 	bcs.w	8008012 <__ieee754_pow+0xa02>
 800763e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	f7f8 fdcd 	bl	80001e4 <__adddf3>
 800764a:	ec41 0b10 	vmov	d0, r0, r1
 800764e:	b011      	add	sp, #68	@ 0x44
 8007650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007654:	4a91      	ldr	r2, [pc, #580]	@ (800789c <__ieee754_pow+0x28c>)
 8007656:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800765a:	4590      	cmp	r8, r2
 800765c:	463d      	mov	r5, r7
 800765e:	4633      	mov	r3, r6
 8007660:	d806      	bhi.n	8007670 <__ieee754_pow+0x60>
 8007662:	d101      	bne.n	8007668 <__ieee754_pow+0x58>
 8007664:	2e00      	cmp	r6, #0
 8007666:	d1ea      	bne.n	800763e <__ieee754_pow+0x2e>
 8007668:	4592      	cmp	sl, r2
 800766a:	d801      	bhi.n	8007670 <__ieee754_pow+0x60>
 800766c:	d10e      	bne.n	800768c <__ieee754_pow+0x7c>
 800766e:	b169      	cbz	r1, 800768c <__ieee754_pow+0x7c>
 8007670:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007674:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007678:	431d      	orrs	r5, r3
 800767a:	d1e0      	bne.n	800763e <__ieee754_pow+0x2e>
 800767c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007680:	18db      	adds	r3, r3, r3
 8007682:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007686:	4152      	adcs	r2, r2
 8007688:	429d      	cmp	r5, r3
 800768a:	e7d4      	b.n	8007636 <__ieee754_pow+0x26>
 800768c:	2d00      	cmp	r5, #0
 800768e:	46c3      	mov	fp, r8
 8007690:	da3a      	bge.n	8007708 <__ieee754_pow+0xf8>
 8007692:	4a83      	ldr	r2, [pc, #524]	@ (80078a0 <__ieee754_pow+0x290>)
 8007694:	4592      	cmp	sl, r2
 8007696:	d84d      	bhi.n	8007734 <__ieee754_pow+0x124>
 8007698:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800769c:	4592      	cmp	sl, r2
 800769e:	f240 84c7 	bls.w	8008030 <__ieee754_pow+0xa20>
 80076a2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80076a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80076aa:	2a14      	cmp	r2, #20
 80076ac:	dd0f      	ble.n	80076ce <__ieee754_pow+0xbe>
 80076ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80076b2:	fa21 f402 	lsr.w	r4, r1, r2
 80076b6:	fa04 f202 	lsl.w	r2, r4, r2
 80076ba:	428a      	cmp	r2, r1
 80076bc:	f040 84b8 	bne.w	8008030 <__ieee754_pow+0xa20>
 80076c0:	f004 0401 	and.w	r4, r4, #1
 80076c4:	f1c4 0402 	rsb	r4, r4, #2
 80076c8:	2900      	cmp	r1, #0
 80076ca:	d158      	bne.n	800777e <__ieee754_pow+0x16e>
 80076cc:	e00e      	b.n	80076ec <__ieee754_pow+0xdc>
 80076ce:	2900      	cmp	r1, #0
 80076d0:	d154      	bne.n	800777c <__ieee754_pow+0x16c>
 80076d2:	f1c2 0214 	rsb	r2, r2, #20
 80076d6:	fa4a f402 	asr.w	r4, sl, r2
 80076da:	fa04 f202 	lsl.w	r2, r4, r2
 80076de:	4552      	cmp	r2, sl
 80076e0:	f040 84a3 	bne.w	800802a <__ieee754_pow+0xa1a>
 80076e4:	f004 0401 	and.w	r4, r4, #1
 80076e8:	f1c4 0402 	rsb	r4, r4, #2
 80076ec:	4a6d      	ldr	r2, [pc, #436]	@ (80078a4 <__ieee754_pow+0x294>)
 80076ee:	4592      	cmp	sl, r2
 80076f0:	d12e      	bne.n	8007750 <__ieee754_pow+0x140>
 80076f2:	f1b9 0f00 	cmp.w	r9, #0
 80076f6:	f280 8494 	bge.w	8008022 <__ieee754_pow+0xa12>
 80076fa:	496a      	ldr	r1, [pc, #424]	@ (80078a4 <__ieee754_pow+0x294>)
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	2000      	movs	r0, #0
 8007702:	f7f9 f84f 	bl	80007a4 <__aeabi_ddiv>
 8007706:	e7a0      	b.n	800764a <__ieee754_pow+0x3a>
 8007708:	2400      	movs	r4, #0
 800770a:	bbc1      	cbnz	r1, 800777e <__ieee754_pow+0x16e>
 800770c:	4a63      	ldr	r2, [pc, #396]	@ (800789c <__ieee754_pow+0x28c>)
 800770e:	4592      	cmp	sl, r2
 8007710:	d1ec      	bne.n	80076ec <__ieee754_pow+0xdc>
 8007712:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007716:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800771a:	431a      	orrs	r2, r3
 800771c:	f000 8479 	beq.w	8008012 <__ieee754_pow+0xa02>
 8007720:	4b61      	ldr	r3, [pc, #388]	@ (80078a8 <__ieee754_pow+0x298>)
 8007722:	4598      	cmp	r8, r3
 8007724:	d908      	bls.n	8007738 <__ieee754_pow+0x128>
 8007726:	f1b9 0f00 	cmp.w	r9, #0
 800772a:	f2c0 8476 	blt.w	800801a <__ieee754_pow+0xa0a>
 800772e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007732:	e78a      	b.n	800764a <__ieee754_pow+0x3a>
 8007734:	2402      	movs	r4, #2
 8007736:	e7e8      	b.n	800770a <__ieee754_pow+0xfa>
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	f04f 0000 	mov.w	r0, #0
 8007740:	f04f 0100 	mov.w	r1, #0
 8007744:	da81      	bge.n	800764a <__ieee754_pow+0x3a>
 8007746:	e9dd 0300 	ldrd	r0, r3, [sp]
 800774a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800774e:	e77c      	b.n	800764a <__ieee754_pow+0x3a>
 8007750:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007754:	d106      	bne.n	8007764 <__ieee754_pow+0x154>
 8007756:	4632      	mov	r2, r6
 8007758:	463b      	mov	r3, r7
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f8 fef7 	bl	8000550 <__aeabi_dmul>
 8007762:	e772      	b.n	800764a <__ieee754_pow+0x3a>
 8007764:	4a51      	ldr	r2, [pc, #324]	@ (80078ac <__ieee754_pow+0x29c>)
 8007766:	4591      	cmp	r9, r2
 8007768:	d109      	bne.n	800777e <__ieee754_pow+0x16e>
 800776a:	2d00      	cmp	r5, #0
 800776c:	db07      	blt.n	800777e <__ieee754_pow+0x16e>
 800776e:	ec47 6b10 	vmov	d0, r6, r7
 8007772:	b011      	add	sp, #68	@ 0x44
 8007774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	f7ff b948 	b.w	8006a0c <__ieee754_sqrt>
 800777c:	2400      	movs	r4, #0
 800777e:	ec47 6b10 	vmov	d0, r6, r7
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	f7ff f8a6 	bl	80068d4 <fabs>
 8007788:	9b02      	ldr	r3, [sp, #8]
 800778a:	ec51 0b10 	vmov	r0, r1, d0
 800778e:	bb53      	cbnz	r3, 80077e6 <__ieee754_pow+0x1d6>
 8007790:	4b44      	ldr	r3, [pc, #272]	@ (80078a4 <__ieee754_pow+0x294>)
 8007792:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007796:	429a      	cmp	r2, r3
 8007798:	d002      	beq.n	80077a0 <__ieee754_pow+0x190>
 800779a:	f1b8 0f00 	cmp.w	r8, #0
 800779e:	d122      	bne.n	80077e6 <__ieee754_pow+0x1d6>
 80077a0:	f1b9 0f00 	cmp.w	r9, #0
 80077a4:	da05      	bge.n	80077b2 <__ieee754_pow+0x1a2>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	2000      	movs	r0, #0
 80077ac:	493d      	ldr	r1, [pc, #244]	@ (80078a4 <__ieee754_pow+0x294>)
 80077ae:	f7f8 fff9 	bl	80007a4 <__aeabi_ddiv>
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	f6bf af49 	bge.w	800764a <__ieee754_pow+0x3a>
 80077b8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80077bc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80077c0:	ea58 0804 	orrs.w	r8, r8, r4
 80077c4:	d108      	bne.n	80077d8 <__ieee754_pow+0x1c8>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	f7f8 fd07 	bl	80001e0 <__aeabi_dsub>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	e794      	b.n	8007702 <__ieee754_pow+0xf2>
 80077d8:	2c01      	cmp	r4, #1
 80077da:	f47f af36 	bne.w	800764a <__ieee754_pow+0x3a>
 80077de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077e2:	4619      	mov	r1, r3
 80077e4:	e731      	b.n	800764a <__ieee754_pow+0x3a>
 80077e6:	0feb      	lsrs	r3, r5, #31
 80077e8:	3b01      	subs	r3, #1
 80077ea:	ea53 0204 	orrs.w	r2, r3, r4
 80077ee:	d102      	bne.n	80077f6 <__ieee754_pow+0x1e6>
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	e7e9      	b.n	80077ca <__ieee754_pow+0x1ba>
 80077f6:	3c01      	subs	r4, #1
 80077f8:	431c      	orrs	r4, r3
 80077fa:	d016      	beq.n	800782a <__ieee754_pow+0x21a>
 80077fc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007888 <__ieee754_pow+0x278>
 8007800:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007808:	f240 8112 	bls.w	8007a30 <__ieee754_pow+0x420>
 800780c:	4b28      	ldr	r3, [pc, #160]	@ (80078b0 <__ieee754_pow+0x2a0>)
 800780e:	459a      	cmp	sl, r3
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <__ieee754_pow+0x298>)
 8007812:	d916      	bls.n	8007842 <__ieee754_pow+0x232>
 8007814:	4598      	cmp	r8, r3
 8007816:	d80b      	bhi.n	8007830 <__ieee754_pow+0x220>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	da0b      	bge.n	8007836 <__ieee754_pow+0x226>
 800781e:	2000      	movs	r0, #0
 8007820:	b011      	add	sp, #68	@ 0x44
 8007822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f000 be83 	b.w	8008530 <__math_oflow>
 800782a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007890 <__ieee754_pow+0x280>
 800782e:	e7e7      	b.n	8007800 <__ieee754_pow+0x1f0>
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	dcf3      	bgt.n	800781e <__ieee754_pow+0x20e>
 8007836:	2000      	movs	r0, #0
 8007838:	b011      	add	sp, #68	@ 0x44
 800783a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783e:	f000 be6f 	b.w	8008520 <__math_uflow>
 8007842:	4598      	cmp	r8, r3
 8007844:	d20c      	bcs.n	8007860 <__ieee754_pow+0x250>
 8007846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	f7f9 f8f1 	bl	8000a34 <__aeabi_dcmplt>
 8007852:	3800      	subs	r0, #0
 8007854:	bf18      	it	ne
 8007856:	2001      	movne	r0, #1
 8007858:	f1b9 0f00 	cmp.w	r9, #0
 800785c:	daec      	bge.n	8007838 <__ieee754_pow+0x228>
 800785e:	e7df      	b.n	8007820 <__ieee754_pow+0x210>
 8007860:	4b10      	ldr	r3, [pc, #64]	@ (80078a4 <__ieee754_pow+0x294>)
 8007862:	4598      	cmp	r8, r3
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	d924      	bls.n	80078b4 <__ieee754_pow+0x2a4>
 800786a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800786e:	2300      	movs	r3, #0
 8007870:	f7f9 f8e0 	bl	8000a34 <__aeabi_dcmplt>
 8007874:	3800      	subs	r0, #0
 8007876:	bf18      	it	ne
 8007878:	2001      	movne	r0, #1
 800787a:	f1b9 0f00 	cmp.w	r9, #0
 800787e:	dccf      	bgt.n	8007820 <__ieee754_pow+0x210>
 8007880:	e7da      	b.n	8007838 <__ieee754_pow+0x228>
 8007882:	bf00      	nop
 8007884:	f3af 8000 	nop.w
 8007888:	00000000 	.word	0x00000000
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	00000000 	.word	0x00000000
 8007894:	bff00000 	.word	0xbff00000
 8007898:	fff00000 	.word	0xfff00000
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	433fffff 	.word	0x433fffff
 80078a4:	3ff00000 	.word	0x3ff00000
 80078a8:	3fefffff 	.word	0x3fefffff
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	43f00000 	.word	0x43f00000
 80078b4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a20 <__ieee754_pow+0x410>)
 80078b6:	f7f8 fc93 	bl	80001e0 <__aeabi_dsub>
 80078ba:	a351      	add	r3, pc, #324	@ (adr r3, 8007a00 <__ieee754_pow+0x3f0>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	f7f8 fe44 	bl	8000550 <__aeabi_dmul>
 80078c8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007a08 <__ieee754_pow+0x3f8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f8 fe3b 	bl	8000550 <__aeabi_dmul>
 80078da:	4b52      	ldr	r3, [pc, #328]	@ (8007a24 <__ieee754_pow+0x414>)
 80078dc:	4682      	mov	sl, r0
 80078de:	468b      	mov	fp, r1
 80078e0:	2200      	movs	r2, #0
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7f8 fe33 	bl	8000550 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	a148      	add	r1, pc, #288	@ (adr r1, 8007a10 <__ieee754_pow+0x400>)
 80078f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f4:	f7f8 fc74 	bl	80001e0 <__aeabi_dsub>
 80078f8:	4622      	mov	r2, r4
 80078fa:	462b      	mov	r3, r5
 80078fc:	f7f8 fe28 	bl	8000550 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	2000      	movs	r0, #0
 8007906:	4948      	ldr	r1, [pc, #288]	@ (8007a28 <__ieee754_pow+0x418>)
 8007908:	f7f8 fc6a 	bl	80001e0 <__aeabi_dsub>
 800790c:	4622      	mov	r2, r4
 800790e:	4680      	mov	r8, r0
 8007910:	4689      	mov	r9, r1
 8007912:	462b      	mov	r3, r5
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f8 fe1a 	bl	8000550 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fe14 	bl	8000550 <__aeabi_dmul>
 8007928:	a33b      	add	r3, pc, #236	@ (adr r3, 8007a18 <__ieee754_pow+0x408>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fe0f 	bl	8000550 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4650      	mov	r0, sl
 8007938:	4659      	mov	r1, fp
 800793a:	f7f8 fc51 	bl	80001e0 <__aeabi_dsub>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4680      	mov	r8, r0
 8007944:	4689      	mov	r9, r1
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fc4b 	bl	80001e4 <__adddf3>
 800794e:	2400      	movs	r4, #0
 8007950:	4632      	mov	r2, r6
 8007952:	463b      	mov	r3, r7
 8007954:	4620      	mov	r0, r4
 8007956:	460d      	mov	r5, r1
 8007958:	f7f8 fc42 	bl	80001e0 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4640      	mov	r0, r8
 8007962:	4649      	mov	r1, r9
 8007964:	f7f8 fc3c 	bl	80001e0 <__aeabi_dsub>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007970:	2300      	movs	r3, #0
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4652      	mov	r2, sl
 800797e:	465b      	mov	r3, fp
 8007980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007984:	f7f8 fc2c 	bl	80001e0 <__aeabi_dsub>
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fde0 	bl	8000550 <__aeabi_dmul>
 8007990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007994:	4680      	mov	r8, r0
 8007996:	4689      	mov	r9, r1
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f8 fdd8 	bl	8000550 <__aeabi_dmul>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f8 fc1c 	bl	80001e4 <__adddf3>
 80079ac:	4652      	mov	r2, sl
 80079ae:	465b      	mov	r3, fp
 80079b0:	4606      	mov	r6, r0
 80079b2:	460f      	mov	r7, r1
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fdca 	bl	8000550 <__aeabi_dmul>
 80079bc:	460b      	mov	r3, r1
 80079be:	4602      	mov	r2, r0
 80079c0:	4680      	mov	r8, r0
 80079c2:	4689      	mov	r9, r1
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f8 fc0c 	bl	80001e4 <__adddf3>
 80079cc:	4b17      	ldr	r3, [pc, #92]	@ (8007a2c <__ieee754_pow+0x41c>)
 80079ce:	4299      	cmp	r1, r3
 80079d0:	4604      	mov	r4, r0
 80079d2:	460d      	mov	r5, r1
 80079d4:	468a      	mov	sl, r1
 80079d6:	468b      	mov	fp, r1
 80079d8:	f340 82ef 	ble.w	8007fba <__ieee754_pow+0x9aa>
 80079dc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80079e0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80079e4:	4303      	orrs	r3, r0
 80079e6:	f000 81e8 	beq.w	8007dba <__ieee754_pow+0x7aa>
 80079ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2300      	movs	r3, #0
 80079f2:	f7f9 f81f 	bl	8000a34 <__aeabi_dcmplt>
 80079f6:	3800      	subs	r0, #0
 80079f8:	bf18      	it	ne
 80079fa:	2001      	movne	r0, #1
 80079fc:	e710      	b.n	8007820 <__ieee754_pow+0x210>
 80079fe:	bf00      	nop
 8007a00:	60000000 	.word	0x60000000
 8007a04:	3ff71547 	.word	0x3ff71547
 8007a08:	f85ddf44 	.word	0xf85ddf44
 8007a0c:	3e54ae0b 	.word	0x3e54ae0b
 8007a10:	55555555 	.word	0x55555555
 8007a14:	3fd55555 	.word	0x3fd55555
 8007a18:	652b82fe 	.word	0x652b82fe
 8007a1c:	3ff71547 	.word	0x3ff71547
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	3fd00000 	.word	0x3fd00000
 8007a28:	3fe00000 	.word	0x3fe00000
 8007a2c:	408fffff 	.word	0x408fffff
 8007a30:	4bd5      	ldr	r3, [pc, #852]	@ (8007d88 <__ieee754_pow+0x778>)
 8007a32:	402b      	ands	r3, r5
 8007a34:	2200      	movs	r2, #0
 8007a36:	b92b      	cbnz	r3, 8007a44 <__ieee754_pow+0x434>
 8007a38:	4bd4      	ldr	r3, [pc, #848]	@ (8007d8c <__ieee754_pow+0x77c>)
 8007a3a:	f7f8 fd89 	bl	8000550 <__aeabi_dmul>
 8007a3e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007a42:	468b      	mov	fp, r1
 8007a44:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007a48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007a4c:	4413      	add	r3, r2
 8007a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a50:	4bcf      	ldr	r3, [pc, #828]	@ (8007d90 <__ieee754_pow+0x780>)
 8007a52:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007a56:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007a5a:	459b      	cmp	fp, r3
 8007a5c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a60:	dd08      	ble.n	8007a74 <__ieee754_pow+0x464>
 8007a62:	4bcc      	ldr	r3, [pc, #816]	@ (8007d94 <__ieee754_pow+0x784>)
 8007a64:	459b      	cmp	fp, r3
 8007a66:	f340 81a5 	ble.w	8007db4 <__ieee754_pow+0x7a4>
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a70:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007a74:	f04f 0a00 	mov.w	sl, #0
 8007a78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007a7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a7e:	4bc6      	ldr	r3, [pc, #792]	@ (8007d98 <__ieee754_pow+0x788>)
 8007a80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a84:	ed93 7b00 	vldr	d7, [r3]
 8007a88:	4629      	mov	r1, r5
 8007a8a:	ec53 2b17 	vmov	r2, r3, d7
 8007a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a92:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a96:	f7f8 fba3 	bl	80001e0 <__aeabi_dsub>
 8007a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa6:	f7f8 fb9d 	bl	80001e4 <__adddf3>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	2000      	movs	r0, #0
 8007ab0:	49ba      	ldr	r1, [pc, #744]	@ (8007d9c <__ieee754_pow+0x78c>)
 8007ab2:	f7f8 fe77 	bl	80007a4 <__aeabi_ddiv>
 8007ab6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f8 fd45 	bl	8000550 <__aeabi_dmul>
 8007ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007ace:	106d      	asrs	r5, r5, #1
 8007ad0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007ad4:	f04f 0b00 	mov.w	fp, #0
 8007ad8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007adc:	4661      	mov	r1, ip
 8007ade:	2200      	movs	r2, #0
 8007ae0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007ae4:	4658      	mov	r0, fp
 8007ae6:	46e1      	mov	r9, ip
 8007ae8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	f7f8 fd2e 	bl	8000550 <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f8 fb70 	bl	80001e0 <__aeabi_dsub>
 8007b00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b04:	4606      	mov	r6, r0
 8007b06:	460f      	mov	r7, r1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 fb68 	bl	80001e0 <__aeabi_dsub>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b18:	f7f8 fb62 	bl	80001e0 <__aeabi_dsub>
 8007b1c:	465a      	mov	r2, fp
 8007b1e:	464b      	mov	r3, r9
 8007b20:	f7f8 fd16 	bl	8000550 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fb58 	bl	80001e0 <__aeabi_dsub>
 8007b30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b34:	f7f8 fd0c 	bl	8000550 <__aeabi_dmul>
 8007b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b40:	4610      	mov	r0, r2
 8007b42:	4619      	mov	r1, r3
 8007b44:	f7f8 fd04 	bl	8000550 <__aeabi_dmul>
 8007b48:	a37d      	add	r3, pc, #500	@ (adr r3, 8007d40 <__ieee754_pow+0x730>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	4604      	mov	r4, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	f7f8 fcfd 	bl	8000550 <__aeabi_dmul>
 8007b56:	a37c      	add	r3, pc, #496	@ (adr r3, 8007d48 <__ieee754_pow+0x738>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fb42 	bl	80001e4 <__adddf3>
 8007b60:	4622      	mov	r2, r4
 8007b62:	462b      	mov	r3, r5
 8007b64:	f7f8 fcf4 	bl	8000550 <__aeabi_dmul>
 8007b68:	a379      	add	r3, pc, #484	@ (adr r3, 8007d50 <__ieee754_pow+0x740>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fb39 	bl	80001e4 <__adddf3>
 8007b72:	4622      	mov	r2, r4
 8007b74:	462b      	mov	r3, r5
 8007b76:	f7f8 fceb 	bl	8000550 <__aeabi_dmul>
 8007b7a:	a377      	add	r3, pc, #476	@ (adr r3, 8007d58 <__ieee754_pow+0x748>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fb30 	bl	80001e4 <__adddf3>
 8007b84:	4622      	mov	r2, r4
 8007b86:	462b      	mov	r3, r5
 8007b88:	f7f8 fce2 	bl	8000550 <__aeabi_dmul>
 8007b8c:	a374      	add	r3, pc, #464	@ (adr r3, 8007d60 <__ieee754_pow+0x750>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f7f8 fb27 	bl	80001e4 <__adddf3>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fcd9 	bl	8000550 <__aeabi_dmul>
 8007b9e:	a372      	add	r3, pc, #456	@ (adr r3, 8007d68 <__ieee754_pow+0x758>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fb1e 	bl	80001e4 <__adddf3>
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	462b      	mov	r3, r5
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fccc 	bl	8000550 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fcc6 	bl	8000550 <__aeabi_dmul>
 8007bc4:	465a      	mov	r2, fp
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	460d      	mov	r5, r1
 8007bca:	464b      	mov	r3, r9
 8007bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd0:	f7f8 fb08 	bl	80001e4 <__adddf3>
 8007bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bd8:	f7f8 fcba 	bl	8000550 <__aeabi_dmul>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 fb00 	bl	80001e4 <__adddf3>
 8007be4:	465a      	mov	r2, fp
 8007be6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bea:	464b      	mov	r3, r9
 8007bec:	4658      	mov	r0, fp
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 fcae 	bl	8000550 <__aeabi_dmul>
 8007bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8007da0 <__ieee754_pow+0x790>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	f7f8 faf2 	bl	80001e4 <__adddf3>
 8007c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c04:	f7f8 faee 	bl	80001e4 <__adddf3>
 8007c08:	46d8      	mov	r8, fp
 8007c0a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007c0e:	460d      	mov	r5, r1
 8007c10:	465a      	mov	r2, fp
 8007c12:	460b      	mov	r3, r1
 8007c14:	4640      	mov	r0, r8
 8007c16:	4649      	mov	r1, r9
 8007c18:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007c1c:	f7f8 fc98 	bl	8000550 <__aeabi_dmul>
 8007c20:	465c      	mov	r4, fp
 8007c22:	4680      	mov	r8, r0
 8007c24:	4689      	mov	r9, r1
 8007c26:	4b5e      	ldr	r3, [pc, #376]	@ (8007da0 <__ieee754_pow+0x790>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f7f8 fad7 	bl	80001e0 <__aeabi_dsub>
 8007c32:	4632      	mov	r2, r6
 8007c34:	463b      	mov	r3, r7
 8007c36:	f7f8 fad3 	bl	80001e0 <__aeabi_dsub>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c42:	f7f8 facd 	bl	80001e0 <__aeabi_dsub>
 8007c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c4a:	f7f8 fc81 	bl	8000550 <__aeabi_dmul>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	462b      	mov	r3, r5
 8007c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c5a:	f7f8 fc79 	bl	8000550 <__aeabi_dmul>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 fabd 	bl	80001e4 <__adddf3>
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460f      	mov	r7, r1
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fab5 	bl	80001e4 <__adddf3>
 8007c7a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007c7e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007d70 <__ieee754_pow+0x760>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	4658      	mov	r0, fp
 8007c86:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	f7f8 fc60 	bl	8000550 <__aeabi_dmul>
 8007c90:	465c      	mov	r4, fp
 8007c92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fa9f 	bl	80001e0 <__aeabi_dsub>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fa99 	bl	80001e0 <__aeabi_dsub>
 8007cae:	a332      	add	r3, pc, #200	@ (adr r3, 8007d78 <__ieee754_pow+0x768>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fc4c 	bl	8000550 <__aeabi_dmul>
 8007cb8:	a331      	add	r3, pc, #196	@ (adr r3, 8007d80 <__ieee754_pow+0x770>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 fc43 	bl	8000550 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fa87 	bl	80001e4 <__adddf3>
 8007cd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007cd8:	4b32      	ldr	r3, [pc, #200]	@ (8007da4 <__ieee754_pow+0x794>)
 8007cda:	4413      	add	r3, r2
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fa80 	bl	80001e4 <__adddf3>
 8007ce4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ce8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cea:	f7f8 fbc7 	bl	800047c <__aeabi_i2d>
 8007cee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8007da8 <__ieee754_pow+0x798>)
 8007cf2:	4413      	add	r3, r2
 8007cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfe:	460f      	mov	r7, r1
 8007d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d04:	f7f8 fa6e 	bl	80001e4 <__adddf3>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fa6a 	bl	80001e4 <__adddf3>
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	f7f8 fa66 	bl	80001e4 <__adddf3>
 8007d18:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	463b      	mov	r3, r7
 8007d20:	4658      	mov	r0, fp
 8007d22:	460d      	mov	r5, r1
 8007d24:	f7f8 fa5c 	bl	80001e0 <__aeabi_dsub>
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	f7f8 fa58 	bl	80001e0 <__aeabi_dsub>
 8007d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d34:	f7f8 fa54 	bl	80001e0 <__aeabi_dsub>
 8007d38:	465c      	mov	r4, fp
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	e036      	b.n	8007dac <__ieee754_pow+0x79c>
 8007d3e:	bf00      	nop
 8007d40:	4a454eef 	.word	0x4a454eef
 8007d44:	3fca7e28 	.word	0x3fca7e28
 8007d48:	93c9db65 	.word	0x93c9db65
 8007d4c:	3fcd864a 	.word	0x3fcd864a
 8007d50:	a91d4101 	.word	0xa91d4101
 8007d54:	3fd17460 	.word	0x3fd17460
 8007d58:	518f264d 	.word	0x518f264d
 8007d5c:	3fd55555 	.word	0x3fd55555
 8007d60:	db6fabff 	.word	0xdb6fabff
 8007d64:	3fdb6db6 	.word	0x3fdb6db6
 8007d68:	33333303 	.word	0x33333303
 8007d6c:	3fe33333 	.word	0x3fe33333
 8007d70:	e0000000 	.word	0xe0000000
 8007d74:	3feec709 	.word	0x3feec709
 8007d78:	dc3a03fd 	.word	0xdc3a03fd
 8007d7c:	3feec709 	.word	0x3feec709
 8007d80:	145b01f5 	.word	0x145b01f5
 8007d84:	be3e2fe0 	.word	0xbe3e2fe0
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	43400000 	.word	0x43400000
 8007d90:	0003988e 	.word	0x0003988e
 8007d94:	000bb679 	.word	0x000bb679
 8007d98:	080085d0 	.word	0x080085d0
 8007d9c:	3ff00000 	.word	0x3ff00000
 8007da0:	40080000 	.word	0x40080000
 8007da4:	080085b0 	.word	0x080085b0
 8007da8:	080085c0 	.word	0x080085c0
 8007dac:	460b      	mov	r3, r1
 8007dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db2:	e5d7      	b.n	8007964 <__ieee754_pow+0x354>
 8007db4:	f04f 0a01 	mov.w	sl, #1
 8007db8:	e65e      	b.n	8007a78 <__ieee754_pow+0x468>
 8007dba:	a3b4      	add	r3, pc, #720	@ (adr r3, 800808c <__ieee754_pow+0xa7c>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fa0e 	bl	80001e4 <__adddf3>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	e9cd 0100 	strd	r0, r1, [sp]
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 fa04 	bl	80001e0 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007de0:	f7f8 fe46 	bl	8000a70 <__aeabi_dcmpgt>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f47f ae00 	bne.w	80079ea <__ieee754_pow+0x3da>
 8007dea:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007dee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007df2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007df6:	fa43 fa0a 	asr.w	sl, r3, sl
 8007dfa:	44da      	add	sl, fp
 8007dfc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007e00:	489d      	ldr	r0, [pc, #628]	@ (8008078 <__ieee754_pow+0xa68>)
 8007e02:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007e06:	4108      	asrs	r0, r1
 8007e08:	ea00 030a 	and.w	r3, r0, sl
 8007e0c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007e10:	f1c1 0114 	rsb	r1, r1, #20
 8007e14:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007e18:	fa4a fa01 	asr.w	sl, sl, r1
 8007e1c:	f1bb 0f00 	cmp.w	fp, #0
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007e2e:	f7f8 f9d7 	bl	80001e0 <__aeabi_dsub>
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	4632      	mov	r2, r6
 8007e38:	463b      	mov	r3, r7
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 f9d1 	bl	80001e4 <__adddf3>
 8007e42:	2400      	movs	r4, #0
 8007e44:	a37c      	add	r3, pc, #496	@ (adr r3, 8008038 <__ieee754_pow+0xa28>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	f7f8 fb7f 	bl	8000550 <__aeabi_dmul>
 8007e52:	4642      	mov	r2, r8
 8007e54:	e9cd 0100 	strd	r0, r1, [sp]
 8007e58:	464b      	mov	r3, r9
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 f9bf 	bl	80001e0 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 f9b9 	bl	80001e0 <__aeabi_dsub>
 8007e6e:	a374      	add	r3, pc, #464	@ (adr r3, 8008040 <__ieee754_pow+0xa30>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fb6c 	bl	8000550 <__aeabi_dmul>
 8007e78:	a373      	add	r3, pc, #460	@ (adr r3, 8008048 <__ieee754_pow+0xa38>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 fb63 	bl	8000550 <__aeabi_dmul>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f9a7 	bl	80001e4 <__adddf3>
 8007e96:	4604      	mov	r4, r0
 8007e98:	460d      	mov	r5, r1
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ea2:	f7f8 f99f 	bl	80001e4 <__adddf3>
 8007ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eaa:	4680      	mov	r8, r0
 8007eac:	4689      	mov	r9, r1
 8007eae:	f7f8 f997 	bl	80001e0 <__aeabi_dsub>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	f7f8 f991 	bl	80001e0 <__aeabi_dsub>
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 fb41 	bl	8000550 <__aeabi_dmul>
 8007ece:	a360      	add	r3, pc, #384	@ (adr r3, 8008050 <__ieee754_pow+0xa40>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	f7f8 fb3a 	bl	8000550 <__aeabi_dmul>
 8007edc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008058 <__ieee754_pow+0xa48>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 f97d 	bl	80001e0 <__aeabi_dsub>
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	462b      	mov	r3, r5
 8007eea:	f7f8 fb31 	bl	8000550 <__aeabi_dmul>
 8007eee:	a35c      	add	r3, pc, #368	@ (adr r3, 8008060 <__ieee754_pow+0xa50>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 f976 	bl	80001e4 <__adddf3>
 8007ef8:	4622      	mov	r2, r4
 8007efa:	462b      	mov	r3, r5
 8007efc:	f7f8 fb28 	bl	8000550 <__aeabi_dmul>
 8007f00:	a359      	add	r3, pc, #356	@ (adr r3, 8008068 <__ieee754_pow+0xa58>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7f8 f96b 	bl	80001e0 <__aeabi_dsub>
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	f7f8 fb1f 	bl	8000550 <__aeabi_dmul>
 8007f12:	a357      	add	r3, pc, #348	@ (adr r3, 8008070 <__ieee754_pow+0xa60>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f7f8 f964 	bl	80001e4 <__adddf3>
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	462b      	mov	r3, r5
 8007f20:	f7f8 fb16 	bl	8000550 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f958 	bl	80001e0 <__aeabi_dsub>
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fb08 	bl	8000550 <__aeabi_dmul>
 8007f40:	2200      	movs	r2, #0
 8007f42:	e9cd 0100 	strd	r0, r1, [sp]
 8007f46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 f947 	bl	80001e0 <__aeabi_dsub>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f5a:	f7f8 fc23 	bl	80007a4 <__aeabi_ddiv>
 8007f5e:	4632      	mov	r2, r6
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	463b      	mov	r3, r7
 8007f66:	4640      	mov	r0, r8
 8007f68:	4649      	mov	r1, r9
 8007f6a:	f7f8 faf1 	bl	8000550 <__aeabi_dmul>
 8007f6e:	4632      	mov	r2, r6
 8007f70:	463b      	mov	r3, r7
 8007f72:	f7f8 f937 	bl	80001e4 <__adddf3>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 f92f 	bl	80001e0 <__aeabi_dsub>
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	f7f8 f92b 	bl	80001e0 <__aeabi_dsub>
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	493b      	ldr	r1, [pc, #236]	@ (800807c <__ieee754_pow+0xa6c>)
 8007f90:	2000      	movs	r0, #0
 8007f92:	f7f8 f925 	bl	80001e0 <__aeabi_dsub>
 8007f96:	ec41 0b10 	vmov	d0, r0, r1
 8007f9a:	ee10 3a90 	vmov	r3, s1
 8007f9e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa6:	da30      	bge.n	800800a <__ieee754_pow+0x9fa>
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f000 fa0d 	bl	80083c8 <scalbn>
 8007fae:	ec51 0b10 	vmov	r0, r1, d0
 8007fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb6:	f7ff bbd2 	b.w	800775e <__ieee754_pow+0x14e>
 8007fba:	4c31      	ldr	r4, [pc, #196]	@ (8008080 <__ieee754_pow+0xa70>)
 8007fbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d91a      	bls.n	8007ffa <__ieee754_pow+0x9ea>
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8008084 <__ieee754_pow+0xa74>)
 8007fc6:	440b      	add	r3, r1
 8007fc8:	4303      	orrs	r3, r0
 8007fca:	d009      	beq.n	8007fe0 <__ieee754_pow+0x9d0>
 8007fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd2e 	bl	8000a34 <__aeabi_dcmplt>
 8007fd8:	3800      	subs	r0, #0
 8007fda:	bf18      	it	ne
 8007fdc:	2001      	movne	r0, #1
 8007fde:	e42b      	b.n	8007838 <__ieee754_pow+0x228>
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	f7f8 f8fc 	bl	80001e0 <__aeabi_dsub>
 8007fe8:	4632      	mov	r2, r6
 8007fea:	463b      	mov	r3, r7
 8007fec:	f7f8 fd36 	bl	8000a5c <__aeabi_dcmpge>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1eb      	bne.n	8007fcc <__ieee754_pow+0x9bc>
 8007ff4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008094 <__ieee754_pow+0xa84>
 8007ff8:	e6f7      	b.n	8007dea <__ieee754_pow+0x7da>
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	4b22      	ldr	r3, [pc, #136]	@ (8008088 <__ieee754_pow+0xa78>)
 8007ffe:	459a      	cmp	sl, r3
 8008000:	f63f aef3 	bhi.w	8007dea <__ieee754_pow+0x7da>
 8008004:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008008:	e715      	b.n	8007e36 <__ieee754_pow+0x826>
 800800a:	ec51 0b10 	vmov	r0, r1, d0
 800800e:	4619      	mov	r1, r3
 8008010:	e7cf      	b.n	8007fb2 <__ieee754_pow+0x9a2>
 8008012:	491a      	ldr	r1, [pc, #104]	@ (800807c <__ieee754_pow+0xa6c>)
 8008014:	2000      	movs	r0, #0
 8008016:	f7ff bb18 	b.w	800764a <__ieee754_pow+0x3a>
 800801a:	2000      	movs	r0, #0
 800801c:	2100      	movs	r1, #0
 800801e:	f7ff bb14 	b.w	800764a <__ieee754_pow+0x3a>
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7ff bb10 	b.w	800764a <__ieee754_pow+0x3a>
 800802a:	460c      	mov	r4, r1
 800802c:	f7ff bb5e 	b.w	80076ec <__ieee754_pow+0xdc>
 8008030:	2400      	movs	r4, #0
 8008032:	f7ff bb49 	b.w	80076c8 <__ieee754_pow+0xb8>
 8008036:	bf00      	nop
 8008038:	00000000 	.word	0x00000000
 800803c:	3fe62e43 	.word	0x3fe62e43
 8008040:	fefa39ef 	.word	0xfefa39ef
 8008044:	3fe62e42 	.word	0x3fe62e42
 8008048:	0ca86c39 	.word	0x0ca86c39
 800804c:	be205c61 	.word	0xbe205c61
 8008050:	72bea4d0 	.word	0x72bea4d0
 8008054:	3e663769 	.word	0x3e663769
 8008058:	c5d26bf1 	.word	0xc5d26bf1
 800805c:	3ebbbd41 	.word	0x3ebbbd41
 8008060:	af25de2c 	.word	0xaf25de2c
 8008064:	3f11566a 	.word	0x3f11566a
 8008068:	16bebd93 	.word	0x16bebd93
 800806c:	3f66c16c 	.word	0x3f66c16c
 8008070:	5555553e 	.word	0x5555553e
 8008074:	3fc55555 	.word	0x3fc55555
 8008078:	fff00000 	.word	0xfff00000
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	4090cbff 	.word	0x4090cbff
 8008084:	3f6f3400 	.word	0x3f6f3400
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	652b82fe 	.word	0x652b82fe
 8008090:	3c971547 	.word	0x3c971547
 8008094:	4090cc00 	.word	0x4090cc00

08008098 <atan>:
 8008098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	ec55 4b10 	vmov	r4, r5, d0
 80080a0:	4bbf      	ldr	r3, [pc, #764]	@ (80083a0 <atan+0x308>)
 80080a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80080a6:	429e      	cmp	r6, r3
 80080a8:	46ab      	mov	fp, r5
 80080aa:	d918      	bls.n	80080de <atan+0x46>
 80080ac:	4bbd      	ldr	r3, [pc, #756]	@ (80083a4 <atan+0x30c>)
 80080ae:	429e      	cmp	r6, r3
 80080b0:	d801      	bhi.n	80080b6 <atan+0x1e>
 80080b2:	d109      	bne.n	80080c8 <atan+0x30>
 80080b4:	b144      	cbz	r4, 80080c8 <atan+0x30>
 80080b6:	4622      	mov	r2, r4
 80080b8:	462b      	mov	r3, r5
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 f891 	bl	80001e4 <__adddf3>
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	e006      	b.n	80080d6 <atan+0x3e>
 80080c8:	f1bb 0f00 	cmp.w	fp, #0
 80080cc:	f340 812b 	ble.w	8008326 <atan+0x28e>
 80080d0:	a597      	add	r5, pc, #604	@ (adr r5, 8008330 <atan+0x298>)
 80080d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080d6:	ec45 4b10 	vmov	d0, r4, r5
 80080da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	4bb2      	ldr	r3, [pc, #712]	@ (80083a8 <atan+0x310>)
 80080e0:	429e      	cmp	r6, r3
 80080e2:	d813      	bhi.n	800810c <atan+0x74>
 80080e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80080e8:	429e      	cmp	r6, r3
 80080ea:	d80c      	bhi.n	8008106 <atan+0x6e>
 80080ec:	a392      	add	r3, pc, #584	@ (adr r3, 8008338 <atan+0x2a0>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 f875 	bl	80001e4 <__adddf3>
 80080fa:	4bac      	ldr	r3, [pc, #688]	@ (80083ac <atan+0x314>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	f7f8 fcb7 	bl	8000a70 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d1e7      	bne.n	80080d6 <atan+0x3e>
 8008106:	f04f 3aff 	mov.w	sl, #4294967295
 800810a:	e029      	b.n	8008160 <atan+0xc8>
 800810c:	f7fe fbe2 	bl	80068d4 <fabs>
 8008110:	4ba7      	ldr	r3, [pc, #668]	@ (80083b0 <atan+0x318>)
 8008112:	429e      	cmp	r6, r3
 8008114:	ec55 4b10 	vmov	r4, r5, d0
 8008118:	f200 80bc 	bhi.w	8008294 <atan+0x1fc>
 800811c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008120:	429e      	cmp	r6, r3
 8008122:	f200 809e 	bhi.w	8008262 <atan+0x1ca>
 8008126:	4622      	mov	r2, r4
 8008128:	462b      	mov	r3, r5
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 f859 	bl	80001e4 <__adddf3>
 8008132:	4b9e      	ldr	r3, [pc, #632]	@ (80083ac <atan+0x314>)
 8008134:	2200      	movs	r2, #0
 8008136:	f7f8 f853 	bl	80001e0 <__aeabi_dsub>
 800813a:	2200      	movs	r2, #0
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 f84c 	bl	80001e4 <__adddf3>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fb26 	bl	80007a4 <__aeabi_ddiv>
 8008158:	f04f 0a00 	mov.w	sl, #0
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	4622      	mov	r2, r4
 8008162:	462b      	mov	r3, r5
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	f7f8 f9f2 	bl	8000550 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4680      	mov	r8, r0
 8008172:	4689      	mov	r9, r1
 8008174:	f7f8 f9ec 	bl	8000550 <__aeabi_dmul>
 8008178:	a371      	add	r3, pc, #452	@ (adr r3, 8008340 <atan+0x2a8>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	f7f8 f9e5 	bl	8000550 <__aeabi_dmul>
 8008186:	a370      	add	r3, pc, #448	@ (adr r3, 8008348 <atan+0x2b0>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f82a 	bl	80001e4 <__adddf3>
 8008190:	4632      	mov	r2, r6
 8008192:	463b      	mov	r3, r7
 8008194:	f7f8 f9dc 	bl	8000550 <__aeabi_dmul>
 8008198:	a36d      	add	r3, pc, #436	@ (adr r3, 8008350 <atan+0x2b8>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f8 f821 	bl	80001e4 <__adddf3>
 80081a2:	4632      	mov	r2, r6
 80081a4:	463b      	mov	r3, r7
 80081a6:	f7f8 f9d3 	bl	8000550 <__aeabi_dmul>
 80081aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8008358 <atan+0x2c0>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 f818 	bl	80001e4 <__adddf3>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 f9ca 	bl	8000550 <__aeabi_dmul>
 80081bc:	a368      	add	r3, pc, #416	@ (adr r3, 8008360 <atan+0x2c8>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f80f 	bl	80001e4 <__adddf3>
 80081c6:	4632      	mov	r2, r6
 80081c8:	463b      	mov	r3, r7
 80081ca:	f7f8 f9c1 	bl	8000550 <__aeabi_dmul>
 80081ce:	a366      	add	r3, pc, #408	@ (adr r3, 8008368 <atan+0x2d0>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f8 f806 	bl	80001e4 <__adddf3>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	f7f8 f9b8 	bl	8000550 <__aeabi_dmul>
 80081e0:	a363      	add	r3, pc, #396	@ (adr r3, 8008370 <atan+0x2d8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	4680      	mov	r8, r0
 80081e8:	4689      	mov	r9, r1
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f8 f9af 	bl	8000550 <__aeabi_dmul>
 80081f2:	a361      	add	r3, pc, #388	@ (adr r3, 8008378 <atan+0x2e0>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f7 fff2 	bl	80001e0 <__aeabi_dsub>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 f9a6 	bl	8000550 <__aeabi_dmul>
 8008204:	a35e      	add	r3, pc, #376	@ (adr r3, 8008380 <atan+0x2e8>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f7 ffe9 	bl	80001e0 <__aeabi_dsub>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	f7f8 f99d 	bl	8000550 <__aeabi_dmul>
 8008216:	a35c      	add	r3, pc, #368	@ (adr r3, 8008388 <atan+0x2f0>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f7 ffe0 	bl	80001e0 <__aeabi_dsub>
 8008220:	4632      	mov	r2, r6
 8008222:	463b      	mov	r3, r7
 8008224:	f7f8 f994 	bl	8000550 <__aeabi_dmul>
 8008228:	a359      	add	r3, pc, #356	@ (adr r3, 8008390 <atan+0x2f8>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f7 ffd7 	bl	80001e0 <__aeabi_dsub>
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 f98b 	bl	8000550 <__aeabi_dmul>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4640      	mov	r0, r8
 8008240:	4649      	mov	r1, r9
 8008242:	f7f7 ffcf 	bl	80001e4 <__adddf3>
 8008246:	4622      	mov	r2, r4
 8008248:	462b      	mov	r3, r5
 800824a:	f7f8 f981 	bl	8000550 <__aeabi_dmul>
 800824e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	d148      	bne.n	80082ea <atan+0x252>
 8008258:	4620      	mov	r0, r4
 800825a:	4629      	mov	r1, r5
 800825c:	f7f7 ffc0 	bl	80001e0 <__aeabi_dsub>
 8008260:	e72f      	b.n	80080c2 <atan+0x2a>
 8008262:	4b52      	ldr	r3, [pc, #328]	@ (80083ac <atan+0x314>)
 8008264:	2200      	movs	r2, #0
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f7 ffb9 	bl	80001e0 <__aeabi_dsub>
 800826e:	4b4f      	ldr	r3, [pc, #316]	@ (80083ac <atan+0x314>)
 8008270:	4606      	mov	r6, r0
 8008272:	460f      	mov	r7, r1
 8008274:	2200      	movs	r2, #0
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f7 ffb3 	bl	80001e4 <__adddf3>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 fa8d 	bl	80007a4 <__aeabi_ddiv>
 800828a:	f04f 0a01 	mov.w	sl, #1
 800828e:	4604      	mov	r4, r0
 8008290:	460d      	mov	r5, r1
 8008292:	e765      	b.n	8008160 <atan+0xc8>
 8008294:	4b47      	ldr	r3, [pc, #284]	@ (80083b4 <atan+0x31c>)
 8008296:	429e      	cmp	r6, r3
 8008298:	d21c      	bcs.n	80082d4 <atan+0x23c>
 800829a:	4b47      	ldr	r3, [pc, #284]	@ (80083b8 <atan+0x320>)
 800829c:	2200      	movs	r2, #0
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f7 ff9d 	bl	80001e0 <__aeabi_dsub>
 80082a6:	4b44      	ldr	r3, [pc, #272]	@ (80083b8 <atan+0x320>)
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f8 f94d 	bl	8000550 <__aeabi_dmul>
 80082b6:	4b3d      	ldr	r3, [pc, #244]	@ (80083ac <atan+0x314>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f7 ff93 	bl	80001e4 <__adddf3>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f8 fa6d 	bl	80007a4 <__aeabi_ddiv>
 80082ca:	f04f 0a02 	mov.w	sl, #2
 80082ce:	4604      	mov	r4, r0
 80082d0:	460d      	mov	r5, r1
 80082d2:	e745      	b.n	8008160 <atan+0xc8>
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	4938      	ldr	r1, [pc, #224]	@ (80083bc <atan+0x324>)
 80082da:	2000      	movs	r0, #0
 80082dc:	f7f8 fa62 	bl	80007a4 <__aeabi_ddiv>
 80082e0:	f04f 0a03 	mov.w	sl, #3
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	e73a      	b.n	8008160 <atan+0xc8>
 80082ea:	4b35      	ldr	r3, [pc, #212]	@ (80083c0 <atan+0x328>)
 80082ec:	4e35      	ldr	r6, [pc, #212]	@ (80083c4 <atan+0x32c>)
 80082ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f7 ff73 	bl	80001e0 <__aeabi_dsub>
 80082fa:	4622      	mov	r2, r4
 80082fc:	462b      	mov	r3, r5
 80082fe:	f7f7 ff6f 	bl	80001e0 <__aeabi_dsub>
 8008302:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800830e:	f7f7 ff67 	bl	80001e0 <__aeabi_dsub>
 8008312:	f1bb 0f00 	cmp.w	fp, #0
 8008316:	4604      	mov	r4, r0
 8008318:	460d      	mov	r5, r1
 800831a:	f6bf aedc 	bge.w	80080d6 <atan+0x3e>
 800831e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008322:	461d      	mov	r5, r3
 8008324:	e6d7      	b.n	80080d6 <atan+0x3e>
 8008326:	a51c      	add	r5, pc, #112	@ (adr r5, 8008398 <atan+0x300>)
 8008328:	e9d5 4500 	ldrd	r4, r5, [r5]
 800832c:	e6d3      	b.n	80080d6 <atan+0x3e>
 800832e:	bf00      	nop
 8008330:	54442d18 	.word	0x54442d18
 8008334:	3ff921fb 	.word	0x3ff921fb
 8008338:	8800759c 	.word	0x8800759c
 800833c:	7e37e43c 	.word	0x7e37e43c
 8008340:	e322da11 	.word	0xe322da11
 8008344:	3f90ad3a 	.word	0x3f90ad3a
 8008348:	24760deb 	.word	0x24760deb
 800834c:	3fa97b4b 	.word	0x3fa97b4b
 8008350:	a0d03d51 	.word	0xa0d03d51
 8008354:	3fb10d66 	.word	0x3fb10d66
 8008358:	c54c206e 	.word	0xc54c206e
 800835c:	3fb745cd 	.word	0x3fb745cd
 8008360:	920083ff 	.word	0x920083ff
 8008364:	3fc24924 	.word	0x3fc24924
 8008368:	5555550d 	.word	0x5555550d
 800836c:	3fd55555 	.word	0x3fd55555
 8008370:	2c6a6c2f 	.word	0x2c6a6c2f
 8008374:	bfa2b444 	.word	0xbfa2b444
 8008378:	52defd9a 	.word	0x52defd9a
 800837c:	3fadde2d 	.word	0x3fadde2d
 8008380:	af749a6d 	.word	0xaf749a6d
 8008384:	3fb3b0f2 	.word	0x3fb3b0f2
 8008388:	fe231671 	.word	0xfe231671
 800838c:	3fbc71c6 	.word	0x3fbc71c6
 8008390:	9998ebc4 	.word	0x9998ebc4
 8008394:	3fc99999 	.word	0x3fc99999
 8008398:	54442d18 	.word	0x54442d18
 800839c:	bff921fb 	.word	0xbff921fb
 80083a0:	440fffff 	.word	0x440fffff
 80083a4:	7ff00000 	.word	0x7ff00000
 80083a8:	3fdbffff 	.word	0x3fdbffff
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	3ff2ffff 	.word	0x3ff2ffff
 80083b4:	40038000 	.word	0x40038000
 80083b8:	3ff80000 	.word	0x3ff80000
 80083bc:	bff00000 	.word	0xbff00000
 80083c0:	080085e0 	.word	0x080085e0
 80083c4:	08008600 	.word	0x08008600

080083c8 <scalbn>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	ec55 4b10 	vmov	r4, r5, d0
 80083ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80083d2:	4606      	mov	r6, r0
 80083d4:	462b      	mov	r3, r5
 80083d6:	b991      	cbnz	r1, 80083fe <scalbn+0x36>
 80083d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80083dc:	4323      	orrs	r3, r4
 80083de:	d03d      	beq.n	800845c <scalbn+0x94>
 80083e0:	4b35      	ldr	r3, [pc, #212]	@ (80084b8 <scalbn+0xf0>)
 80083e2:	4620      	mov	r0, r4
 80083e4:	4629      	mov	r1, r5
 80083e6:	2200      	movs	r2, #0
 80083e8:	f7f8 f8b2 	bl	8000550 <__aeabi_dmul>
 80083ec:	4b33      	ldr	r3, [pc, #204]	@ (80084bc <scalbn+0xf4>)
 80083ee:	429e      	cmp	r6, r3
 80083f0:	4604      	mov	r4, r0
 80083f2:	460d      	mov	r5, r1
 80083f4:	da0f      	bge.n	8008416 <scalbn+0x4e>
 80083f6:	a328      	add	r3, pc, #160	@ (adr r3, 8008498 <scalbn+0xd0>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	e01e      	b.n	800843c <scalbn+0x74>
 80083fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008402:	4291      	cmp	r1, r2
 8008404:	d10b      	bne.n	800841e <scalbn+0x56>
 8008406:	4622      	mov	r2, r4
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f7f7 feea 	bl	80001e4 <__adddf3>
 8008410:	4604      	mov	r4, r0
 8008412:	460d      	mov	r5, r1
 8008414:	e022      	b.n	800845c <scalbn+0x94>
 8008416:	460b      	mov	r3, r1
 8008418:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800841c:	3936      	subs	r1, #54	@ 0x36
 800841e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008422:	4296      	cmp	r6, r2
 8008424:	dd0d      	ble.n	8008442 <scalbn+0x7a>
 8008426:	2d00      	cmp	r5, #0
 8008428:	a11d      	add	r1, pc, #116	@ (adr r1, 80084a0 <scalbn+0xd8>)
 800842a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800842e:	da02      	bge.n	8008436 <scalbn+0x6e>
 8008430:	a11d      	add	r1, pc, #116	@ (adr r1, 80084a8 <scalbn+0xe0>)
 8008432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008436:	a31a      	add	r3, pc, #104	@ (adr r3, 80084a0 <scalbn+0xd8>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f7f8 f888 	bl	8000550 <__aeabi_dmul>
 8008440:	e7e6      	b.n	8008410 <scalbn+0x48>
 8008442:	1872      	adds	r2, r6, r1
 8008444:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008448:	428a      	cmp	r2, r1
 800844a:	dcec      	bgt.n	8008426 <scalbn+0x5e>
 800844c:	2a00      	cmp	r2, #0
 800844e:	dd08      	ble.n	8008462 <scalbn+0x9a>
 8008450:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008454:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008458:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800845c:	ec45 4b10 	vmov	d0, r4, r5
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008466:	da08      	bge.n	800847a <scalbn+0xb2>
 8008468:	2d00      	cmp	r5, #0
 800846a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008498 <scalbn+0xd0>)
 800846c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008470:	dac1      	bge.n	80083f6 <scalbn+0x2e>
 8008472:	a10f      	add	r1, pc, #60	@ (adr r1, 80084b0 <scalbn+0xe8>)
 8008474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008478:	e7bd      	b.n	80083f6 <scalbn+0x2e>
 800847a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800847e:	3236      	adds	r2, #54	@ 0x36
 8008480:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008484:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008488:	4620      	mov	r0, r4
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <scalbn+0xf8>)
 800848c:	4629      	mov	r1, r5
 800848e:	2200      	movs	r2, #0
 8008490:	e7d4      	b.n	800843c <scalbn+0x74>
 8008492:	bf00      	nop
 8008494:	f3af 8000 	nop.w
 8008498:	c2f8f359 	.word	0xc2f8f359
 800849c:	01a56e1f 	.word	0x01a56e1f
 80084a0:	8800759c 	.word	0x8800759c
 80084a4:	7e37e43c 	.word	0x7e37e43c
 80084a8:	8800759c 	.word	0x8800759c
 80084ac:	fe37e43c 	.word	0xfe37e43c
 80084b0:	c2f8f359 	.word	0xc2f8f359
 80084b4:	81a56e1f 	.word	0x81a56e1f
 80084b8:	43500000 	.word	0x43500000
 80084bc:	ffff3cb0 	.word	0xffff3cb0
 80084c0:	3c900000 	.word	0x3c900000

080084c4 <with_errno>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	ed2d 8b02 	vpush	{d8}
 80084ca:	eeb0 8a40 	vmov.f32	s16, s0
 80084ce:	eef0 8a60 	vmov.f32	s17, s1
 80084d2:	4604      	mov	r4, r0
 80084d4:	f7fe f8ce 	bl	8006674 <__errno>
 80084d8:	eeb0 0a48 	vmov.f32	s0, s16
 80084dc:	eef0 0a68 	vmov.f32	s1, s17
 80084e0:	ecbd 8b02 	vpop	{d8}
 80084e4:	6004      	str	r4, [r0, #0]
 80084e6:	bd10      	pop	{r4, pc}

080084e8 <xflow>:
 80084e8:	4603      	mov	r3, r0
 80084ea:	b507      	push	{r0, r1, r2, lr}
 80084ec:	ec51 0b10 	vmov	r0, r1, d0
 80084f0:	b183      	cbz	r3, 8008514 <xflow+0x2c>
 80084f2:	4602      	mov	r2, r0
 80084f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084f8:	e9cd 2300 	strd	r2, r3, [sp]
 80084fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008500:	f7f8 f826 	bl	8000550 <__aeabi_dmul>
 8008504:	ec41 0b10 	vmov	d0, r0, r1
 8008508:	2022      	movs	r0, #34	@ 0x22
 800850a:	b003      	add	sp, #12
 800850c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008510:	f7ff bfd8 	b.w	80084c4 <with_errno>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	e7ee      	b.n	80084f8 <xflow+0x10>
 800851a:	0000      	movs	r0, r0
 800851c:	0000      	movs	r0, r0
	...

08008520 <__math_uflow>:
 8008520:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008528 <__math_uflow+0x8>
 8008524:	f7ff bfe0 	b.w	80084e8 <xflow>
 8008528:	00000000 	.word	0x00000000
 800852c:	10000000 	.word	0x10000000

08008530 <__math_oflow>:
 8008530:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008538 <__math_oflow+0x8>
 8008534:	f7ff bfd8 	b.w	80084e8 <xflow>
 8008538:	00000000 	.word	0x00000000
 800853c:	70000000 	.word	0x70000000

08008540 <_init>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr

0800854c <_fini>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr
