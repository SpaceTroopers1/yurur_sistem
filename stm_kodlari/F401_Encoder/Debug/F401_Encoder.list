
F401_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08012fd8  08012fd8  00013fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a30  08013a30  000150cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013a30  08013a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a38  08013a38  000150cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a38  08013a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013a3c  08013a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08013a40  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd40  200000d0  08013b0c  000150d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000de10  08013b0c  00015e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cab4  00000000  00000000  000150fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebe  00000000  00000000  00031bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c0  00000000  00000000  000373b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000089c3  00000000  00000000  00038778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d354  00000000  00000000  0004113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4fed  00000000  00000000  0005e48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  0010347c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079ac  00000000  00000000  00103518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010aec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012fc0 	.word	0x08012fc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	08012fc0 	.word	0x08012fc0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_ldivmod>:
 800091c:	b97b      	cbnz	r3, 800093e <__aeabi_ldivmod+0x22>
 800091e:	b972      	cbnz	r2, 800093e <__aeabi_ldivmod+0x22>
 8000920:	2900      	cmp	r1, #0
 8000922:	bfbe      	ittt	lt
 8000924:	2000      	movlt	r0, #0
 8000926:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800092a:	e006      	blt.n	800093a <__aeabi_ldivmod+0x1e>
 800092c:	bf08      	it	eq
 800092e:	2800      	cmpeq	r0, #0
 8000930:	bf1c      	itt	ne
 8000932:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000936:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800093a:	f000 b9b5 	b.w	8000ca8 <__aeabi_idiv0>
 800093e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000942:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000946:	2900      	cmp	r1, #0
 8000948:	db09      	blt.n	800095e <__aeabi_ldivmod+0x42>
 800094a:	2b00      	cmp	r3, #0
 800094c:	db1a      	blt.n	8000984 <__aeabi_ldivmod+0x68>
 800094e:	f000 f84d 	bl	80009ec <__udivmoddi4>
 8000952:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800095a:	b004      	add	sp, #16
 800095c:	4770      	bx	lr
 800095e:	4240      	negs	r0, r0
 8000960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	db1b      	blt.n	80009a0 <__aeabi_ldivmod+0x84>
 8000968:	f000 f840 	bl	80009ec <__udivmoddi4>
 800096c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000974:	b004      	add	sp, #16
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	4252      	negs	r2, r2
 800097e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000982:	4770      	bx	lr
 8000984:	4252      	negs	r2, r2
 8000986:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800098a:	f000 f82f 	bl	80009ec <__udivmoddi4>
 800098e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000996:	b004      	add	sp, #16
 8000998:	4240      	negs	r0, r0
 800099a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800099e:	4770      	bx	lr
 80009a0:	4252      	negs	r2, r2
 80009a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009a6:	f000 f821 	bl	80009ec <__udivmoddi4>
 80009aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b2:	b004      	add	sp, #16
 80009b4:	4252      	negs	r2, r2
 80009b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cb8:	f006 fb74 	bl	80073a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e28 <pvPortMallocMicroROS+0x17c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cc4:	f000 f986 	bl	8000fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cc8:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <pvPortMallocMicroROS+0x180>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 8090 	bne.w	8000df6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01e      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000cdc:	2208      	movs	r2, #8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d015      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	e7fd      	b.n	8000d16 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d06a      	beq.n	8000df6 <pvPortMallocMicroROS+0x14a>
 8000d20:	4b43      	ldr	r3, [pc, #268]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d865      	bhi.n	8000df6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <pvPortMallocMicroROS+0x188>)
 8000d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <pvPortMallocMicroROS+0x188>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d34:	e004      	b.n	8000d40 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d903      	bls.n	8000d52 <pvPortMallocMicroROS+0xa6>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f1      	bne.n	8000d36 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <pvPortMallocMicroROS+0x17c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d04c      	beq.n	8000df6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2208      	movs	r2, #8
 8000d62:	4413      	add	r3, r2
 8000d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1ad2      	subs	r2, r2, r3
 8000d76:	2308      	movs	r3, #8
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d920      	bls.n	8000dc0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00b      	beq.n	8000da8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d94:	f383 8811 	msr	BASEPRI, r3
 8000d98:	f3bf 8f6f 	isb	sy
 8000d9c:	f3bf 8f4f 	dsb	sy
 8000da0:	613b      	str	r3, [r7, #16]
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1ad2      	subs	r2, r2, r3
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dba:	69b8      	ldr	r0, [r7, #24]
 8000dbc:	f000 f96c 	bl	8001098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <pvPortMallocMicroROS+0x18c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d203      	bcs.n	8000de2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <pvPortMallocMicroROS+0x18c>)
 8000de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <pvPortMallocMicroROS+0x180>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000df6:	f006 fae3 	bl	80073c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00b      	beq.n	8000e1c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	60fb      	str	r3, [r7, #12]
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20003cf4 	.word	0x20003cf4
 8000e2c:	20003d00 	.word	0x20003d00
 8000e30:	20003cf8 	.word	0x20003cf8
 8000e34:	20003cec 	.word	0x20003cec
 8000e38:	20003cfc 	.word	0x20003cfc

08000e3c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d04a      	beq.n	8000ee4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	425b      	negs	r3, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4413      	add	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10b      	bne.n	8000e82 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e6e:	f383 8811 	msr	BASEPRI, r3
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	60fb      	str	r3, [r7, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	60bb      	str	r3, [r7, #8]
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	e7fd      	b.n	8000e9e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d019      	beq.n	8000ee4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d115      	bne.n	8000ee4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ec8:	f006 fa6c 	bl	80073a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <vPortFreeMicroROS+0xb4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <vPortFreeMicroROS+0xb4>)
 8000ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000eda:	6938      	ldr	r0, [r7, #16]
 8000edc:	f000 f8dc 	bl	8001098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000ee0:	f006 fa6e 	bl	80073c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20003d00 	.word	0x20003d00
 8000ef0:	20003cf8 	.word	0x20003cf8

08000ef4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f00:	2308      	movs	r3, #8
 8000f02:	425b      	negs	r3, r3
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <getBlockSize+0x38>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

	return count;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20003d00 	.word	0x20003d00

08000f30 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f3a:	f006 fa33 	bl	80073a4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f3e:	6838      	ldr	r0, [r7, #0]
 8000f40:	f7ff feb4 	bl	8000cac <pvPortMallocMicroROS>
 8000f44:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d017      	beq.n	8000f7c <pvPortReallocMicroROS+0x4c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d014      	beq.n	8000f7c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffce 	bl	8000ef4 <getBlockSize>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d201      	bcs.n	8000f6c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f011 f938 	bl	80121e6 <memcpy>

		vPortFreeMicroROS(pv);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff60 	bl	8000e3c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f7c:	f006 fa20 	bl	80073c0 <xTaskResumeAll>

	return newmem;
 8000f80:	68bb      	ldr	r3, [r7, #8]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f94:	f006 fa06 	bl	80073a4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff fe82 	bl	8000cac <pvPortMallocMicroROS>
 8000fa8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fae:	e004      	b.n	8000fba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	613a      	str	r2, [r7, #16]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	617a      	str	r2, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f5      	bne.n	8000fb0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000fc4:	f006 f9fc 	bl	80073c0 <xTaskResumeAll>
  	return mem;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000fda:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <prvHeapInit+0xac>)
 8000fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f023 0307 	bic.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <prvHeapInit+0xac>)
 8001004:	4413      	add	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <prvHeapInit+0xb0>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <prvHeapInit+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001020:	2208      	movs	r2, #8
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <prvHeapInit+0xb4>)
 8001034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <prvHeapInit+0xb4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <prvHeapInit+0xb4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <prvHeapInit+0xb4>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <prvHeapInit+0xb8>)
 8001062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <prvHeapInit+0xbc>)
 800106a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <prvHeapInit+0xc0>)
 800106e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200000ec 	.word	0x200000ec
 8001084:	20003cec 	.word	0x20003cec
 8001088:	20003cf4 	.word	0x20003cf4
 800108c:	20003cfc 	.word	0x20003cfc
 8001090:	20003cf8 	.word	0x20003cf8
 8001094:	20003d00 	.word	0x20003d00

08001098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <prvInsertBlockIntoFreeList+0xac>)
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e002      	b.n	80010ac <prvInsertBlockIntoFreeList+0x14>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d8f7      	bhi.n	80010a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d108      	bne.n	80010da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	441a      	add	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	441a      	add	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d118      	bne.n	8001120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <prvInsertBlockIntoFreeList+0xb0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d00d      	beq.n	8001116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	441a      	add	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e008      	b.n	8001128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <prvInsertBlockIntoFreeList+0xb0>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e003      	b.n	8001128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d002      	beq.n	8001136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20003cec 	.word	0x20003cec
 8001148:	20003cf4 	.word	0x20003cf4

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 fae0 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f82c 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 fac8 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 800115c:	f000 fa9e 	bl	800169c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001160:	f000 fa72 	bl	8001648 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001164:	f000 f8be 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001168:	f000 f918 	bl	800139c <MX_TIM2_Init>
  MX_TIM3_Init();
 800116c:	f000 f96e 	bl	800144c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001170:	f000 fa1c 	bl	80015ac <MX_TIM5_Init>
  MX_I2C1_Init();
 8001174:	f000 f888 	bl	8001288 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001178:	f000 f9c0 	bl	80014fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <main+0x54>)
 800117e:	f003 f819 	bl	80041b4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001182:	f004 fff1 	bl	8006168 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Microros, NULL, &defaultTask_attributes);
 8001186:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <main+0x58>)
 8001188:	2100      	movs	r1, #0
 800118a:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <main+0x5c>)
 800118c:	f005 f836 	bl	80061fc <osThreadNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <main+0x60>)
 8001194:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001196:	f005 f80b 	bl	80061b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <main+0x4e>
 800119e:	bf00      	nop
 80011a0:	20003e78 	.word	0x20003e78
 80011a4:	08013024 	.word	0x08013024
 80011a8:	080019c1 	.word	0x080019c1
 80011ac:	20003fc8 	.word	0x20003fc8

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	@ 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f010 ff48 	bl	8012054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <SystemClock_Config+0xd0>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a28      	ldr	r2, [pc, #160]	@ (8001280 <SystemClock_Config+0xd0>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <SystemClock_Config+0xd0>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <SystemClock_Config+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <SystemClock_Config+0xd4>)
 80011fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <SystemClock_Config+0xd4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001224:	2310      	movs	r3, #16
 8001226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001228:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800122e:	2304      	movs	r3, #4
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001232:	2307      	movs	r3, #7
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fad2 	bl	80037e4 <HAL_RCC_OscConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001246:	f000 fc45 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2102      	movs	r1, #2
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fd34 	bl	8003cd4 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001272:	f000 fc2f 	bl	8001ad4 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	@ 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800128e:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <MX_I2C1_Init+0x54>)
 8001290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_I2C1_Init+0x50>)
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x58>)
 8001296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c6:	f002 f949 	bl	800355c <HAL_I2C_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d0:	f000 fc00 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20003d04 	.word	0x20003d04
 80012dc:	40005400 	.word	0x40005400
 80012e0:	000186a0 	.word	0x000186a0

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2224      	movs	r2, #36	@ 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f010 feae 	bl	8012054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001302:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <MX_TIM1_Init+0xb4>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_TIM1_Init+0xb0>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <MX_TIM1_Init+0xb0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001328:	2280      	movs	r2, #128	@ 0x80
 800132a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800132c:	2301      	movs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	480f      	ldr	r0, [pc, #60]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001358:	f002 ff8e 	bl	8004278 <HAL_TIM_Encoder_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001362:	f000 fbb7 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001374:	f003 fbe0 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800137e:	f000 fba9 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001382:	213c      	movs	r1, #60	@ 0x3c
 8001384:	4803      	ldr	r0, [pc, #12]	@ (8001394 <MX_TIM1_Init+0xb0>)
 8001386:	f003 f81d 	bl	80043c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	@ 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20003d58 	.word	0x20003d58
 8001398:	40010000 	.word	0x40010000

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	@ 0x30
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2224      	movs	r2, #36	@ 0x24
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f010 fe52 	bl	8012054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c0:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013da:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <MX_TIM2_Init+0xac>)
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f8:	2301      	movs	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480f      	ldr	r0, [pc, #60]	@ (8001448 <MX_TIM2_Init+0xac>)
 800140c:	f002 ff34 	bl	8004278 <HAL_TIM_Encoder_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001416:	f000 fb5d 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <MX_TIM2_Init+0xac>)
 8001428:	f003 fb86 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001432:	f000 fb4f 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001436:	213c      	movs	r1, #60	@ 0x3c
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <MX_TIM2_Init+0xac>)
 800143a:	f002 ffc3 	bl	80043c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	@ 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20003da0 	.word	0x20003da0

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2224      	movs	r2, #36	@ 0x24
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f010 fdfa 	bl	8012054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001468:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 800146a:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <MX_TIM3_Init+0xac>)
 800146c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800146e:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 800147c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001480:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148e:	2301      	movs	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 80014ba:	f002 fedd 	bl	8004278 <HAL_TIM_Encoder_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014c4:	f000 fb06 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 80014d6:	f003 fb2f 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014e0:	f000 faf8 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80014e4:	213c      	movs	r1, #60	@ 0x3c
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <MX_TIM3_Init+0xa8>)
 80014e8:	f002 ff6c 	bl	80043c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3730      	adds	r7, #48	@ 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20003de8 	.word	0x20003de8
 80014f8:	40000400 	.word	0x40000400

080014fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f010 fda2 	bl	8012054 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 800151a:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <MX_TIM4_Init+0xac>)
 800151c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 800152c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 800156a:	f002 fe85 	bl	8004278 <HAL_TIM_Encoder_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001574:	f000 faae 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 8001586:	f003 fad7 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001590:	f000 faa0 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001594:	213c      	movs	r1, #60	@ 0x3c
 8001596:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM4_Init+0xa8>)
 8001598:	f002 ff14 	bl	80043c4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3730      	adds	r7, #48	@ 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20003e30 	.word	0x20003e30
 80015a8:	40000800 	.word	0x40000800

080015ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001644 <MX_TIM5_Init+0x98>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015d0:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80015d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015de:	22c8      	movs	r2, #200	@ 0xc8
 80015e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015e8:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015ee:	4814      	ldr	r0, [pc, #80]	@ (8001640 <MX_TIM5_Init+0x94>)
 80015f0:	f002 fd90 	bl	8004114 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 fa6b 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <MX_TIM5_Init+0x94>)
 800160c:	f003 f858 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001616:	f000 fa5d 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800161a:	2320      	movs	r3, #32
 800161c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_TIM5_Init+0x94>)
 8001628:	f003 fa86 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001632:	f000 fa4f 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20003e78 	.word	0x20003e78
 8001644:	40000c00 	.word	0x40000c00

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <MX_USART2_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_USART2_UART_Init+0x4c>)
 8001680:	f003 fadc 	bl	8004c3c <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 fa23 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20003ec0 	.word	0x20003ec0
 8001698:	40004400 	.word	0x40004400

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_DMA_Init+0x4c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <MX_DMA_Init+0x4c>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <MX_DMA_Init+0x4c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2105      	movs	r1, #5
 80016c2:	2010      	movs	r0, #16
 80016c4:	f001 f973 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016c8:	2010      	movs	r0, #16
 80016ca:	f001 f98c 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2105      	movs	r1, #5
 80016d2:	2011      	movs	r0, #17
 80016d4:	f001 f96b 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016d8:	2011      	movs	r0, #17
 80016da:	f001 f984 	bl	80029e6 <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a2f      	ldr	r2, [pc, #188]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a28      	ldr	r2, [pc, #160]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_GPIO_Init+0xf8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2120      	movs	r1, #32
 8001776:	481c      	ldr	r0, [pc, #112]	@ (80017e8 <MX_GPIO_Init+0xfc>)
 8001778:	f001 fed6 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	481a      	ldr	r0, [pc, #104]	@ (80017ec <MX_GPIO_Init+0x100>)
 8001782:	f001 fed1 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800178c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4813      	ldr	r0, [pc, #76]	@ (80017ec <MX_GPIO_Init+0x100>)
 800179e:	f001 fd3f 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017a2:	2320      	movs	r3, #32
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <MX_GPIO_Init+0xfc>)
 80017ba:	f001 fd31 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_GPIO_Init+0x100>)
 80017d6:	f001 fd23 	bl	8003220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020800 	.word	0x40020800

080017f0 <read_encoder_angular_velocity>:
rover_msgs__msg__EncoderMsg encodermsg;
rcl_subscription_t subscriber;
uint8_t light;


void read_encoder_angular_velocity(encoder_data *motor,TIM_HandleTypeDef *htim,int delay){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	motor->timer_counter = __HAL_TIM_GET_COUNTER(htim);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]

				 int change = motor->last_counter_value - motor->timer_counter;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]


			  	  if(change > 60000){
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800181a:	4293      	cmp	r3, r2
 800181c:	dd0b      	ble.n	8001836 <read_encoder_angular_velocity+0x46>
			  		motor->angular_velocity = -change + max_bits;// tekerlekteki açısal hızı veriyor olması lazım
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001824:	33ff      	adds	r3, #255	@ 0xff
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	edc3 7a00 	vstr	s15, [r3]
 8001834:	e01a      	b.n	800186c <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else if (change < -60000){
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4a3d      	ldr	r2, [pc, #244]	@ (8001930 <read_encoder_angular_velocity+0x140>)
 800183a:	4293      	cmp	r3, r2
 800183c:	da0a      	bge.n	8001854 <read_encoder_angular_velocity+0x64>
			  		motor->angular_velocity = -change - max_bits;
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <read_encoder_angular_velocity+0x144>)
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edc3 7a00 	vstr	s15, [r3]
 8001852:	e00b      	b.n	800186c <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else{
			  		motor->angular_velocity = (motor->timer_counter - motor->last_counter_value);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edc3 7a00 	vstr	s15, [r3]
			  	  }


	motor->angular_velocity *= 1000/delay;// geçen süreye bölmece
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	fb92 f3f3 	sdiv	r3, r2, r3
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	edc3 7a00 	vstr	s15, [r3]
	if(htim->Instance == TIM2 && change > 0){
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001896:	d10d      	bne.n	80018b4 <read_encoder_angular_velocity+0xc4>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd0a      	ble.n	80018b4 <read_encoder_angular_velocity+0xc4>
		motor->angular_velocity /=3500;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001938 <read_encoder_angular_velocity+0x148>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	edc3 7a00 	vstr	s15, [r3]
 80018b2:	e009      	b.n	80018c8 <read_encoder_angular_velocity+0xd8>
	}
	else{
		motor->angular_velocity /=6000;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800193c <read_encoder_angular_velocity+0x14c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	edc3 7a00 	vstr	s15, [r3]
	}
	motor->angular_velocity *= 16; motor->angular_velocity /= 100;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	edc3 7a00 	vstr	s15, [r3]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001940 <read_encoder_angular_velocity+0x150>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	edc3 7a00 	vstr	s15, [r3]
	motor ->angular_velocity*= 2 * M_PI;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff69 	bl	80007cc <__aeabi_f2d>
 80018fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001928 <read_encoder_angular_velocity+0x138>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fcd6 	bl	80002b0 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7fe ffb6 	bl	800087c <__aeabi_d2f>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]
	motor->last_counter_value = motor->timer_counter;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	609a      	str	r2, [r3, #8]
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	54442d18 	.word	0x54442d18
 800192c:	401921fb 	.word	0x401921fb
 8001930:	ffff15a0 	.word	0xffff15a0
 8001934:	ffff0001 	.word	0xffff0001
 8001938:	455ac000 	.word	0x455ac000
 800193c:	45bb8000 	.word	0x45bb8000
 8001940:	42c80000 	.word	0x42c80000

08001944 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a11      	ldr	r2, [pc, #68]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d11b      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x4a>
		read_encoder_angular_velocity(&m1,&htim1, delay);//motor 1
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4910      	ldr	r1, [pc, #64]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800195e:	4811      	ldr	r0, [pc, #68]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001960:	f7ff ff46 	bl	80017f0 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m2, &htim2, delay);//motor 2
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	490f      	ldr	r1, [pc, #60]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800196c:	480f      	ldr	r0, [pc, #60]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x68>)
 800196e:	f7ff ff3f 	bl	80017f0 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m3,&htim3, delay);//motor 3
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800197a:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800197c:	f7ff ff38 	bl	80017f0 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m4, &htim4, delay);//motor 4
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800198a:	f7ff ff31 	bl	80017f0 <read_encoder_angular_velocity>


	}


}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40000c00 	.word	0x40000c00
 800199c:	20000000 	.word	0x20000000
 80019a0:	20003d58 	.word	0x20003d58
 80019a4:	20003fcc 	.word	0x20003fcc
 80019a8:	20003da0 	.word	0x20003da0
 80019ac:	20003fd8 	.word	0x20003fd8
 80019b0:	20003de8 	.word	0x20003de8
 80019b4:	20003fe4 	.word	0x20003fe4
 80019b8:	20003e30 	.word	0x20003e30
 80019bc:	20003ff0 	.word	0x20003ff0

080019c0 <Microros>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Microros */
void Microros(void *argument)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b0cc      	sub	sp, #304	@ 0x130
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80019ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019ce:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  rmw_uros_set_custom_transport(
 80019d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <Microros+0xd0>)
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <Microros+0xd4>)
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <Microros+0xd8>)
 80019da:	4a30      	ldr	r2, [pc, #192]	@ (8001a9c <Microros+0xdc>)
 80019dc:	4930      	ldr	r1, [pc, #192]	@ (8001aa0 <Microros+0xe0>)
 80019de:	2001      	movs	r0, #1
 80019e0:	f007 fd82 	bl	80094e8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80019e4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 fb6d 	bl	80090c8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <Microros+0xe4>)
 80019f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <Microros+0xe8>)
 80019f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <Microros+0xec>)
 80019fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <Microros+0xf0>)
 8001a02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	      rcl_publisher_t publisher;
	      rcl_node_t nodepub;


	      allocator = rcl_get_default_allocator();
 8001a06:	463b      	mov	r3, r7
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f007 fb6b 	bl	80090e4 <rcutils_get_default_allocator>
 8001a0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001a12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a16:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f007 fa84 	bl	8008f3c <rclc_support_init>

	      	    // create node
	      rclc_node_init_default(&nodepub, "encoder_node", "", &support);
 8001a34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a38:	f107 0020 	add.w	r0, r7, #32
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <Microros+0xf4>)
 8001a3e:	491e      	ldr	r1, [pc, #120]	@ (8001ab8 <Microros+0xf8>)
 8001a40:	f007 faca 	bl	8008fd8 <rclc_node_init_default>
	      	      &executor, &subscriber, &submsg,
	      	      &subscription_callback_controller, ON_NEW_DATA);
*/

	      	    // create subscription
	      rclc_publisher_init_default(
 8001a44:	f008 f994 	bl	8009d70 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f107 0120 	add.w	r1, r7, #32
 8001a4e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001a52:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <Microros+0xfc>)
 8001a54:	f007 fafc 	bl	8009050 <rclc_publisher_init_default>
	          &publisher,
	          &nodepub,
	          ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, EncoderMsg),
	          "encoder");
	  for(;;){
		encodermsg.m1 = m1.angular_velocity;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <Microros+0x100>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <Microros+0x104>)
 8001a5e:	6013      	str	r3, [r2, #0]
	   encodermsg.m2 =m2.angular_velocity;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Microros+0x108>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <Microros+0x104>)
 8001a66:	6053      	str	r3, [r2, #4]
		encodermsg.m3 =m3.angular_velocity;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <Microros+0x10c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <Microros+0x104>)
 8001a6e:	6093      	str	r3, [r2, #8]
		encodermsg.m4 =m4.angular_velocity;
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <Microros+0x110>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a13      	ldr	r2, [pc, #76]	@ (8001ac4 <Microros+0x104>)
 8001a76:	60d3      	str	r3, [r2, #12]
		//rclc_executor_spin_some(&executor,100);
		rcl_publish(&publisher, &encodermsg, NULL);
 8001a78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4911      	ldr	r1, [pc, #68]	@ (8001ac4 <Microros+0x104>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 fa37 	bl	8008ef4 <rcl_publish>



	    osDelay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f004 fc4a 	bl	8006320 <osDelay>
		encodermsg.m1 = m1.angular_velocity;
 8001a8c:	bf00      	nop
 8001a8e:	e7e3      	b.n	8001a58 <Microros+0x98>
 8001a90:	08002619 	.word	0x08002619
 8001a94:	080025b1 	.word	0x080025b1
 8001a98:	08002591 	.word	0x08002591
 8001a9c:	08002565 	.word	0x08002565
 8001aa0:	20003ec0 	.word	0x20003ec0
 8001aa4:	08001ae1 	.word	0x08001ae1
 8001aa8:	08001b25 	.word	0x08001b25
 8001aac:	08001b5d 	.word	0x08001b5d
 8001ab0:	08001bc9 	.word	0x08001bc9
 8001ab4:	08012fe4 	.word	0x08012fe4
 8001ab8:	08012fe8 	.word	0x08012fe8
 8001abc:	08012ff8 	.word	0x08012ff8
 8001ac0:	20003fcc 	.word	0x20003fcc
 8001ac4:	20003ffc 	.word	0x20003ffc
 8001ac8:	20003fd8 	.word	0x20003fd8
 8001acc:	20003fe4 	.word	0x20003fe4
 8001ad0:	20003ff0 	.word	0x20003ff0

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <Error_Handler+0x8>

08001ae0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <microros_allocate+0x3c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <microros_allocate+0x3c>)
 8001af8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <microros_allocate+0x40>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <microros_allocate+0x40>)
 8001b08:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff f8ce 	bl	8000cac <pvPortMallocMicroROS>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000400c 	.word	0x2000400c
 8001b20:	20004010 	.word	0x20004010

08001b24 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff f9dd 	bl	8000ef4 <getBlockSize>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <microros_deallocate+0x34>)
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <microros_deallocate+0x34>)
 8001b46:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff f977 	bl	8000e3c <vPortFreeMicroROS>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20004010 	.word	0x20004010

08001b5c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <microros_reallocate+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <microros_reallocate+0x64>)
 8001b76:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <microros_reallocate+0x68>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <microros_reallocate+0x68>)
 8001b86:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f7ff f88c 	bl	8000cac <pvPortMallocMicroROS>
 8001b94:	4603      	mov	r3, r0
 8001b96:	e00e      	b.n	8001bb6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff f9ab 	bl	8000ef4 <getBlockSize>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <microros_reallocate+0x68>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <microros_reallocate+0x68>)
 8001baa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff f9be 	bl	8000f30 <pvPortReallocMicroROS>
 8001bb4:	4603      	mov	r3, r0
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000400c 	.word	0x2000400c
 8001bc4:	20004010 	.word	0x20004010

08001bc8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <microros_zero_allocate+0x48>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <microros_zero_allocate+0x48>)
 8001be6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <microros_zero_allocate+0x4c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <microros_zero_allocate+0x4c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff f9c3 	bl	8000f8a <pvPortCallocMicroROS>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000400c 	.word	0x2000400c
 8001c14:	20004010 	.word	0x20004010

08001c18 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c2e:	a320      	add	r3, pc, #128	@ (adr r3, 8001cb0 <UTILS_NanosecondsToTimespec+0x98>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fe72 	bl	800091c <__aeabi_ldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	a31a      	add	r3, pc, #104	@ (adr r3, 8001cb0 <UTILS_NanosecondsToTimespec+0x98>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fe66 	bl	800091c <__aeabi_ldivmod>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da20      	bge.n	8001c9e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <UTILS_NanosecondsToTimespec+0x90>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	1712      	asrs	r2, r2, #28
 8001c68:	17db      	asrs	r3, r3, #31
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	17c8      	asrs	r0, r1, #31
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4605      	mov	r5, r0
 8001c7e:	ebb2 0804 	subs.w	r8, r2, r4
 8001c82:	eb63 0905 	sbc.w	r9, r3, r5
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4906      	ldr	r1, [pc, #24]	@ (8001cac <UTILS_NanosecondsToTimespec+0x94>)
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ca8:	44b82fa1 	.word	0x44b82fa1
 8001cac:	3b9aca00 	.word	0x3b9aca00
 8001cb0:	3b9aca00 	.word	0x3b9aca00
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cbc:	b08e      	sub	sp, #56	@ 0x38
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cc2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001cc4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 fdea 	bl	80078b8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce6:	17da      	asrs	r2, r3, #31
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	69b9      	ldr	r1, [r7, #24]
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d00:	2200      	movs	r2, #0
 8001d02:	461c      	mov	r4, r3
 8001d04:	4615      	mov	r5, r2
 8001d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d0a:	1911      	adds	r1, r2, r4
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	416b      	adcs	r3, r5
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d16:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001d1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	f04f 0500 	mov.w	r5, #0
 8001d2a:	015d      	lsls	r5, r3, #5
 8001d2c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001d30:	0154      	lsls	r4, r2, #5
 8001d32:	4622      	mov	r2, r4
 8001d34:	462b      	mov	r3, r5
 8001d36:	ebb2 0800 	subs.w	r8, r2, r0
 8001d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d4a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d4e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	eb18 0a00 	adds.w	sl, r8, r0
 8001d5a:	eb49 0b01 	adc.w	fp, r9, r1
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d6a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d6e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d72:	ebb2 040a 	subs.w	r4, r2, sl
 8001d76:	603c      	str	r4, [r7, #0]
 8001d78:	eb63 030b 	sbc.w	r3, r3, fp
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d82:	4623      	mov	r3, r4
 8001d84:	181b      	adds	r3, r3, r0
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	462b      	mov	r3, r5
 8001d8a:	eb41 0303 	adc.w	r3, r1, r3
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d96:	f7ff ff3f 	bl	8001c18 <UTILS_NanosecondsToTimespec>

    return 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3738      	adds	r7, #56	@ 0x38
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_MspInit+0x54>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_MspInit+0x54>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_MspInit+0x54>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_MspInit+0x54>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_MspInit+0x54>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_MspInit+0x54>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	210f      	movs	r1, #15
 8001dea:	f06f 0001 	mvn.w	r0, #1
 8001dee:	f000 fdde 	bl	80029ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_I2C_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e50:	2304      	movs	r3, #4
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <HAL_I2C_MspInit+0x8c>)
 8001e5c:	f001 f9e0 	bl	8003220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005400 	.word	0x40005400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b090      	sub	sp, #64	@ 0x40
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a80      	ldr	r2, [pc, #512]	@ (80020b0 <HAL_TIM_Encoder_MspInit+0x220>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d14d      	bne.n	8001f4e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	4a7e      	ldr	r2, [pc, #504]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed2:	4b78      	ldr	r3, [pc, #480]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a77      	ldr	r2, [pc, #476]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	486c      	ldr	r0, [pc, #432]	@ (80020b8 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f08:	f001 f98a 	bl	8003220 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2105      	movs	r1, #5
 8001f10:	2018      	movs	r0, #24
 8001f12:	f000 fd4c 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f16:	2018      	movs	r0, #24
 8001f18:	f000 fd65 	bl	80029e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2105      	movs	r1, #5
 8001f20:	2019      	movs	r0, #25
 8001f22:	f000 fd44 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f26:	2019      	movs	r0, #25
 8001f28:	f000 fd5d 	bl	80029e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2105      	movs	r1, #5
 8001f30:	201a      	movs	r0, #26
 8001f32:	f000 fd3c 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f36:	201a      	movs	r0, #26
 8001f38:	f000 fd55 	bl	80029e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2105      	movs	r1, #5
 8001f40:	201b      	movs	r0, #27
 8001f42:	f000 fd34 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f46:	201b      	movs	r0, #27
 8001f48:	f000 fd4d 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f4c:	e0ac      	b.n	80020a8 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f56:	d134      	bne.n	8001fc2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	4b55      	ldr	r3, [pc, #340]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	4a54      	ldr	r2, [pc, #336]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	4b4e      	ldr	r3, [pc, #312]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f84:	4b4b      	ldr	r3, [pc, #300]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f90:	2303      	movs	r3, #3
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4843      	ldr	r0, [pc, #268]	@ (80020b8 <HAL_TIM_Encoder_MspInit+0x228>)
 8001fac:	f001 f938 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 fcfa 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fba:	201c      	movs	r0, #28
 8001fbc:	f000 fd13 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 8001fc0:	e072      	b.n	80020a8 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_TIM_Encoder_MspInit+0x22c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d134      	bne.n	8002036 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a37      	ldr	r2, [pc, #220]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fdc:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002004:	23c0      	movs	r3, #192	@ 0xc0
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002014:	2302      	movs	r3, #2
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201c:	4619      	mov	r1, r3
 800201e:	4826      	ldr	r0, [pc, #152]	@ (80020b8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002020:	f001 f8fe 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2105      	movs	r1, #5
 8002028:	201d      	movs	r0, #29
 800202a:	f000 fcc0 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800202e:	201d      	movs	r0, #29
 8002030:	f000 fcd9 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 8002034:	e038      	b.n	80020a8 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM4)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a21      	ldr	r2, [pc, #132]	@ (80020c0 <HAL_TIM_Encoder_MspInit+0x230>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d133      	bne.n	80020a8 <HAL_TIM_Encoder_MspInit+0x218>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	4a1a      	ldr	r2, [pc, #104]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002066:	f043 0302 	orr.w	r3, r3, #2
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_TIM_Encoder_MspInit+0x224>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002078:	23c0      	movs	r3, #192	@ 0xc0
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002088:	2302      	movs	r3, #2
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <HAL_TIM_Encoder_MspInit+0x234>)
 8002094:	f001 f8c4 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2105      	movs	r1, #5
 800209c:	201e      	movs	r0, #30
 800209e:	f000 fc86 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a2:	201e      	movs	r0, #30
 80020a4:	f000 fc9f 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	3740      	adds	r7, #64	@ 0x40
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40020400 	.word	0x40020400

080020c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <HAL_TIM_Base_MspInit+0x48>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d115      	bne.n	8002106 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	2032      	movs	r0, #50	@ 0x32
 80020fc:	f000 fc57 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002100:	2032      	movs	r0, #50	@ 0x32
 8002102:	f000 fc70 	bl	80029e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4d      	ldr	r2, [pc, #308]	@ (800226c <HAL_UART_MspInit+0x154>)
 8002136:	4293      	cmp	r3, r2
 8002138:	f040 8093 	bne.w	8002262 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	4b4b      	ldr	r3, [pc, #300]	@ (8002270 <HAL_UART_MspInit+0x158>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a4a      	ldr	r2, [pc, #296]	@ (8002270 <HAL_UART_MspInit+0x158>)
 8002146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
 800214c:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <HAL_UART_MspInit+0x158>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b44      	ldr	r3, [pc, #272]	@ (8002270 <HAL_UART_MspInit+0x158>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <HAL_UART_MspInit+0x158>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b41      	ldr	r3, [pc, #260]	@ (8002270 <HAL_UART_MspInit+0x158>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002174:	230c      	movs	r3, #12
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002184:	2307      	movs	r3, #7
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4839      	ldr	r0, [pc, #228]	@ (8002274 <HAL_UART_MspInit+0x15c>)
 8002190:	f001 f846 	bl	8003220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002194:	4b38      	ldr	r3, [pc, #224]	@ (8002278 <HAL_UART_MspInit+0x160>)
 8002196:	4a39      	ldr	r2, [pc, #228]	@ (800227c <HAL_UART_MspInit+0x164>)
 8002198:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800219a:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <HAL_UART_MspInit+0x160>)
 800219c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a2:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021d8:	4827      	ldr	r0, [pc, #156]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021da:	f000 fc1f 	bl	8002a1c <HAL_DMA_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80021e4:	f7ff fc76 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ee:	4a22      	ldr	r2, [pc, #136]	@ (8002278 <HAL_UART_MspInit+0x160>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <HAL_UART_MspInit+0x168>)
 80021f6:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_UART_MspInit+0x16c>)
 80021f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_UART_MspInit+0x168>)
 80021fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002200:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002204:	2240      	movs	r2, #64	@ 0x40
 8002206:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_UART_MspInit+0x168>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002210:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002214:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <HAL_UART_MspInit+0x168>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002224:	2200      	movs	r2, #0
 8002226:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_UART_MspInit+0x168>)
 800222a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800222e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002236:	4812      	ldr	r0, [pc, #72]	@ (8002280 <HAL_UART_MspInit+0x168>)
 8002238:	f000 fbf0 	bl	8002a1c <HAL_DMA_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002242:	f7ff fc47 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_UART_MspInit+0x168>)
 800224a:	639a      	str	r2, [r3, #56]	@ 0x38
 800224c:	4a0c      	ldr	r2, [pc, #48]	@ (8002280 <HAL_UART_MspInit+0x168>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	2026      	movs	r0, #38	@ 0x26
 8002258:	f000 fba9 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800225c:	2026      	movs	r0, #38	@ 0x26
 800225e:	f000 fbc2 	bl	80029e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	@ 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40004400 	.word	0x40004400
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	20003f08 	.word	0x20003f08
 800227c:	40026088 	.word	0x40026088
 8002280:	20003f68 	.word	0x20003f68
 8002284:	400260a0 	.word	0x400260a0

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <NMI_Handler+0x4>

08002290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <UsageFault_Handler+0x4>

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c2:	f000 fa79 	bl	80027b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022c6:	f005 fc7b 	bl	8007bc0 <xTaskGetSchedulerState>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d001      	beq.n	80022d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022d0:	f006 fa72 	bl	80087b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <DMA1_Stream5_IRQHandler+0x10>)
 80022de:	f000 fd35 	bl	8002d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20003f08 	.word	0x20003f08

080022ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <DMA1_Stream6_IRQHandler+0x10>)
 80022f2:	f000 fd2b 	bl	8002d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20003f68 	.word	0x20003f68

08002300 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002306:	f002 f8eb 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20003d58 	.word	0x20003d58

08002314 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800231a:	f002 f8e1 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20003d58 	.word	0x20003d58

08002328 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800232e:	f002 f8d7 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20003d58 	.word	0x20003d58

0800233c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM1_CC_IRQHandler+0x10>)
 8002342:	f002 f8cd 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20003d58 	.word	0x20003d58

08002350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <TIM2_IRQHandler+0x10>)
 8002356:	f002 f8c3 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20003da0 	.word	0x20003da0

08002364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM3_IRQHandler+0x10>)
 800236a:	f002 f8b9 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20003de8 	.word	0x20003de8

08002378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM4_IRQHandler+0x10>)
 800237e:	f002 f8af 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20003e30 	.word	0x20003e30

0800238c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <USART2_IRQHandler+0x10>)
 8002392:	f002 fdb7 	bl	8004f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20003ec0 	.word	0x20003ec0

080023a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <TIM5_IRQHandler+0x10>)
 80023a6:	f002 f89b 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20003e78 	.word	0x20003e78

080023b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_kill>:

int _kill(int pid, int sig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ce:	f00f fed5 	bl	801217c <__errno>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2216      	movs	r2, #22
 80023d6:	601a      	str	r2, [r3, #0]
  return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_exit>:

void _exit (int status)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffe7 	bl	80023c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f6:	bf00      	nop
 80023f8:	e7fd      	b.n	80023f6 <_exit+0x12>

080023fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e00a      	b.n	8002422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240c:	f3af 8000 	nop.w
 8002410:	4601      	mov	r1, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	dbf0      	blt.n	800240c <_read+0x12>
  }

  return len;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e009      	b.n	800245a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	dbf1      	blt.n	8002446 <_write+0x12>
  }
  return len;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_close>:

int _close(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002494:	605a      	str	r2, [r3, #4]
  return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	@ (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f00f fe3a 	bl	801217c <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20018000 	.word	0x20018000
 8002534:	00000400 	.word	0x00000400
 8002538:	20004018 	.word	0x20004018
 800253c:	2000de10 	.word	0x2000de10

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002572:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <cubemx_transport_open+0x28>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f002 fc1e 	bl	8004dbc <HAL_UART_Receive_DMA>
    return true;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000401c 	.word	0x2000401c

08002590 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800259e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f002 fc30 	bl	8004e06 <HAL_UART_DMAStop>
    return true;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025c4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d11c      	bne.n	800260c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f002 fb7e 	bl	8004cdc <HAL_UART_Transmit_DMA>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025e4:	e002      	b.n	80025ec <cubemx_transport_write+0x3c>
            osDelay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f003 fe9a 	bl	8006320 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <cubemx_transport_write+0x4e>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d1f3      	bne.n	80025e6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <cubemx_transport_write+0x58>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	e002      	b.n	800260e <cubemx_transport_write+0x5e>
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800260c:	2300      	movs	r3, #0
    }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800262c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002632:	b672      	cpsid	i
}
 8002634:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <cubemx_transport_read+0x9c>)
 8002644:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002646:	b662      	cpsie	i
}
 8002648:	bf00      	nop
        __enable_irq();
        ms_used++;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002650:	2001      	movs	r0, #1
 8002652:	f003 fe65 	bl	8006320 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002656:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <cubemx_transport_read+0xa0>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <cubemx_transport_read+0x9c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d103      	bne.n	800266a <cubemx_transport_read+0x52>
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbe3      	blt.n	8002632 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800266e:	e011      	b.n	8002694 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <cubemx_transport_read+0xa0>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	440b      	add	r3, r1
 800267a:	4910      	ldr	r1, [pc, #64]	@ (80026bc <cubemx_transport_read+0xa4>)
 800267c:	5c8a      	ldrb	r2, [r1, r2]
 800267e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002680:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <cubemx_transport_read+0xa0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <cubemx_transport_read+0xa0>)
 800268c:	6013      	str	r3, [r2, #0]
        wrote++;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3301      	adds	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <cubemx_transport_read+0xa0>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <cubemx_transport_read+0x9c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d003      	beq.n	80026a8 <cubemx_transport_read+0x90>
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3e3      	bcc.n	8002670 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80026a8:	69bb      	ldr	r3, [r7, #24]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20004820 	.word	0x20004820
 80026b8:	2000481c 	.word	0x2000481c
 80026bc:	2000401c 	.word	0x2000401c

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026c4:	f7ff ff3c 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	@ (8002700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	@ (800270c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f00f fd4b 	bl	8012188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fe fd2b 	bl	800114c <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002704:	08013a40 	.word	0x08013a40
  ldr r2, =_sbss
 8002708:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800270c:	2000de10 	.word	0x2000de10

08002710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f92b 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	200f      	movs	r0, #15
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fb2e 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f943 	bl	8002a02 <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002794:	f000 f90b 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000008 	.word	0x20000008
 80027b0:	20000010 	.word	0x20000010
 80027b4:	2000000c 	.word	0x2000000c

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000010 	.word	0x20000010
 80027dc:	20004824 	.word	0x20004824

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20004824 	.word	0x20004824

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	@ (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff feda 	bl	80027e0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e099      	b.n	8002b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a58:	e00f      	b.n	8002a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5a:	f7ff fec1 	bl	80027e0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d908      	bls.n	8002a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e078      	b.n	8002b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e8      	bne.n	8002a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_DMA_Init+0x158>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	4313      	orrs	r3, r2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d117      	bne.n	8002b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb01 	bl	8003128 <DMA_CheckFifoParam>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fab8 	bl	80030bc <DMA_CalcBaseAndBitshift>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	223f      	movs	r2, #63	@ 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	f010803f 	.word	0xf010803f

08002b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Start_IT+0x26>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e040      	b.n	8002c20 <HAL_DMA_Start_IT+0xa8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12f      	bne.n	8002c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa4a 	bl	8003060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	223f      	movs	r2, #63	@ 0x3f
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0216 	orr.w	r2, r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e005      	b.n	8002c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c36:	f7ff fdd3 	bl	80027e0 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2280      	movs	r2, #128	@ 0x80
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e052      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0216 	bic.w	r2, r2, #22
 8002c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_DMA_Abort+0x62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0208 	bic.w	r2, r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	e013      	b.n	8002cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cac:	f7ff fd98 	bl	80027e0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e015      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e4      	bne.n	8002cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	223f      	movs	r2, #63	@ 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00c      	b.n	8002d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d58:	4b8e      	ldr	r3, [pc, #568]	@ (8002f94 <HAL_DMA_IRQHandler+0x248>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a8e      	ldr	r2, [pc, #568]	@ (8002f98 <HAL_DMA_IRQHandler+0x24c>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2208      	movs	r2, #8
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01a      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	2208      	movs	r2, #8
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	2201      	movs	r2, #1
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2204      	movs	r2, #4
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2204      	movs	r2, #4
 8002e12:	409a      	lsls	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	2210      	movs	r2, #16
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d043      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d03c      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	2210      	movs	r2, #16
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d024      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
 8002e7a:	e01f      	b.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e016      	b.n	8002ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0208 	bic.w	r2, r2, #8
 8002eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 808f 	beq.w	8002fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8087 	beq.w	8002fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d136      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0216 	bic.w	r2, r2, #22
 8002f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x1da>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	223f      	movs	r2, #63	@ 0x3f
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d07e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
        }
        return;
 8002f62:	e079      	b.n	8003058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01d      	beq.n	8002fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e02c      	b.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
 8002f92:	bf00      	nop
 8002f94:	20000008 	.word	0x20000008
 8002f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e01e      	b.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0210 	bic.w	r2, r2, #16
 8002fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d032      	beq.n	800305a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d022      	beq.n	8003046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d307      	bcc.n	8003034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f2      	bne.n	8003018 <HAL_DMA_IRQHandler+0x2cc>
 8003032:	e000      	b.n	8003036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
 8003056:	e000      	b.n	800305a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003058:	bf00      	nop
    }
  }
}
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800307c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b40      	cmp	r3, #64	@ 0x40
 800308c:	d108      	bne.n	80030a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800309e:	e007      	b.n	80030b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b10      	subs	r3, #16
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <DMA_CalcBaseAndBitshift+0x64>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030d6:	4a13      	ldr	r2, [pc, #76]	@ (8003124 <DMA_CalcBaseAndBitshift+0x68>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d909      	bls.n	80030fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80030fc:	e007      	b.n	800310e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	aaaaaaab 	.word	0xaaaaaaab
 8003124:	08013060 	.word	0x08013060

08003128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11f      	bne.n	8003182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d856      	bhi.n	80031f6 <DMA_CheckFifoParam+0xce>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <DMA_CheckFifoParam+0x28>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003161 	.word	0x08003161
 8003154:	08003173 	.word	0x08003173
 8003158:	08003161 	.word	0x08003161
 800315c:	080031f7 	.word	0x080031f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d046      	beq.n	80031fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e043      	b.n	80031fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800317a:	d140      	bne.n	80031fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e03d      	b.n	80031fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318a:	d121      	bne.n	80031d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d837      	bhi.n	8003202 <DMA_CheckFifoParam+0xda>
 8003192:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <DMA_CheckFifoParam+0x70>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031af 	.word	0x080031af
 80031a0:	080031a9 	.word	0x080031a9
 80031a4:	080031c1 	.word	0x080031c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e030      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d025      	beq.n	8003206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e022      	b.n	8003206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ce:	e01c      	b.n	800320a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d903      	bls.n	80031de <DMA_CheckFifoParam+0xb6>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d003      	beq.n	80031e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031dc:	e018      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      break;
 80031e2:	e015      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e00b      	b.n	800320e <DMA_CheckFifoParam+0xe6>
      break;
 80031f6:	bf00      	nop
 80031f8:	e00a      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e008      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e006      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;   
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 800320e:	bf00      	nop
    }
  } 
  
  return status; 
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e159      	b.n	80034f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8148 	bne.w	80034ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d005      	beq.n	8003272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	2b02      	cmp	r3, #2
 8003270:	d130      	bne.n	80032d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0201 	and.w	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d017      	beq.n	8003310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d123      	bne.n	8003364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a2 	beq.w	80034ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b6:	4b54      	ldr	r3, [pc, #336]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_GPIO_Init+0x2ec>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	@ (8003510 <HAL_GPIO_Init+0x2f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x202>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a48      	ldr	r2, [pc, #288]	@ (8003514 <HAL_GPIO_Init+0x2f4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x1fe>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a47      	ldr	r2, [pc, #284]	@ (8003518 <HAL_GPIO_Init+0x2f8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x1fa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a46      	ldr	r2, [pc, #280]	@ (800351c <HAL_GPIO_Init+0x2fc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x1f6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a45      	ldr	r2, [pc, #276]	@ (8003520 <HAL_GPIO_Init+0x300>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x1f2>
 800340e:	2304      	movs	r3, #4
 8003410:	e008      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003412:	2307      	movs	r3, #7
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003422:	2300      	movs	r3, #0
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003434:	4935      	ldr	r1, [pc, #212]	@ (800350c <HAL_GPIO_Init+0x2ec>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b38      	ldr	r3, [pc, #224]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_GPIO_Init+0x304>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a24      	ldr	r2, [pc, #144]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	f67f aea2 	bls.w	800323c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40013800 	.word	0x40013800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003544:	e003      	b.n	800354e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	041a      	lsls	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e12b      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fc3c 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	@ 0x24
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c0:	f000 fd80 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a81      	ldr	r2, [pc, #516]	@ (80037d0 <HAL_I2C_Init+0x274>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d807      	bhi.n	80035e0 <HAL_I2C_Init+0x84>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a80      	ldr	r2, [pc, #512]	@ (80037d4 <HAL_I2C_Init+0x278>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e006      	b.n	80035ee <HAL_I2C_Init+0x92>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a7d      	ldr	r2, [pc, #500]	@ (80037d8 <HAL_I2C_Init+0x27c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0e7      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a78      	ldr	r2, [pc, #480]	@ (80037dc <HAL_I2C_Init+0x280>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0c9b      	lsrs	r3, r3, #18
 8003600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a6a      	ldr	r2, [pc, #424]	@ (80037d0 <HAL_I2C_Init+0x274>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d802      	bhi.n	8003630 <HAL_I2C_Init+0xd4>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	e009      	b.n	8003644 <HAL_I2C_Init+0xe8>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	4a69      	ldr	r2, [pc, #420]	@ (80037e0 <HAL_I2C_Init+0x284>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	3301      	adds	r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	430b      	orrs	r3, r1
 800364a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003656:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	495c      	ldr	r1, [pc, #368]	@ (80037d0 <HAL_I2C_Init+0x274>)
 8003660:	428b      	cmp	r3, r1
 8003662:	d819      	bhi.n	8003698 <HAL_I2C_Init+0x13c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e59      	subs	r1, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003678:	400b      	ands	r3, r1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_I2C_Init+0x138>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e59      	subs	r1, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb1 f3f3 	udiv	r3, r1, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	e051      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003694:	2304      	movs	r3, #4
 8003696:	e04f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d111      	bne.n	80036c4 <HAL_I2C_Init+0x168>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e012      	b.n	80036ea <HAL_I2C_Init+0x18e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e58      	subs	r0, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	0099      	lsls	r1, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Init+0x196>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e022      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10e      	bne.n	8003718 <HAL_I2C_Init+0x1bc>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1e58      	subs	r0, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	440b      	add	r3, r1
 8003708:	fbb0 f3f3 	udiv	r3, r0, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003716:	e00f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e58      	subs	r0, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	0099      	lsls	r1, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6809      	ldr	r1, [r1, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003766:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6911      	ldr	r1, [r2, #16]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	000186a0 	.word	0x000186a0
 80037d4:	001e847f 	.word	0x001e847f
 80037d8:	003d08ff 	.word	0x003d08ff
 80037dc:	431bde83 	.word	0x431bde83
 80037e0:	10624dd3 	.word	0x10624dd3

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e267      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d075      	beq.n	80038ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d00c      	beq.n	8003828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003816:	2b08      	cmp	r3, #8
 8003818:	d112      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b82      	ldr	r3, [pc, #520]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003826:	d10b      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	4b7e      	ldr	r3, [pc, #504]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05b      	beq.n	80038ec <HAL_RCC_OscConfig+0x108>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d157      	bne.n	80038ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e242      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x74>
 800384a:	4b76      	ldr	r3, [pc, #472]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a75      	ldr	r2, [pc, #468]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e01d      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6f      	ldr	r2, [pc, #444]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6c      	ldr	r2, [pc, #432]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 800387c:	4b69      	ldr	r3, [pc, #420]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a68      	ldr	r2, [pc, #416]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a65      	ldr	r2, [pc, #404]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe ffa0 	bl	80027e0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe ff9c 	bl	80027e0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e207      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0xc0>
 80038c2:	e014      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe ff8c 	bl	80027e0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe ff88 	bl	80027e0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1f3      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	4b51      	ldr	r3, [pc, #324]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0xe8>
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d063      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800390e:	2b08      	cmp	r3, #8
 8003910:	d11c      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b44      	ldr	r3, [pc, #272]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e1c7      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4937      	ldr	r1, [pc, #220]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	e03a      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003954:	4b34      	ldr	r3, [pc, #208]	@ (8003a28 <HAL_RCC_OscConfig+0x244>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fe ff41 	bl	80027e0 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fe ff3d 	bl	80027e0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1a8      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b28      	ldr	r3, [pc, #160]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4925      	ldr	r1, [pc, #148]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_RCC_OscConfig+0x244>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe ff20 	bl	80027e0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe ff1c 	bl	80027e0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e187      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d036      	beq.n	8003a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_RCC_OscConfig+0x248>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe ff00 	bl	80027e0 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe fefc 	bl	80027e0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e167      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x200>
 8003a02:	e01b      	b.n	8003a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_OscConfig+0x248>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fee9 	bl	80027e0 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	e00e      	b.n	8003a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe fee5 	bl	80027e0 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d907      	bls.n	8003a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e150      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	42470000 	.word	0x42470000
 8003a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ea      	bne.n	8003a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8097 	beq.w	8003b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b81      	ldr	r3, [pc, #516]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	4a7c      	ldr	r2, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b77      	ldr	r3, [pc, #476]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a86:	4b74      	ldr	r3, [pc, #464]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7fe fea5 	bl	80027e0 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fe fea1 	bl	80027e0 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e10c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x2ea>
 8003ac0:	4b64      	ldr	r3, [pc, #400]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac4:	4a63      	ldr	r2, [pc, #396]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003acc:	e01c      	b.n	8003b08 <HAL_RCC_OscConfig+0x324>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x30c>
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	4a5e      	ldr	r2, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aee:	e00b      	b.n	8003b08 <HAL_RCC_OscConfig+0x324>
 8003af0:	4b58      	ldr	r3, [pc, #352]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af4:	4a57      	ldr	r2, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	4a54      	ldr	r2, [pc, #336]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe fe66 	bl	80027e0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fe fe62 	bl	80027e0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0cb      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	4b49      	ldr	r3, [pc, #292]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <HAL_RCC_OscConfig+0x334>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fe fe50 	bl	80027e0 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe fe4c 	bl	80027e0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0b5      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ee      	bne.n	8003b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6c:	4b39      	ldr	r3, [pc, #228]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a38      	ldr	r2, [pc, #224]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a1 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d05c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d141      	bne.n	8003c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fe20 	bl	80027e0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe fe1c 	bl	80027e0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e087      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	4b27      	ldr	r3, [pc, #156]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fdf5 	bl	80027e0 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fe fdf1 	bl	80027e0 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e05c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x416>
 8003c18:	e054      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fdde 	bl	80027e0 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fdda 	bl	80027e0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e045      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x444>
 8003c46:	e03d      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e038      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ec>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d121      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d11a      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0cc      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d90c      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b65      	ldr	r3, [pc, #404]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b63      	ldr	r3, [pc, #396]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0b8      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d28:	4b59      	ldr	r3, [pc, #356]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a58      	ldr	r2, [pc, #352]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d40:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a52      	ldr	r2, [pc, #328]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4c:	4b50      	ldr	r3, [pc, #320]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	494d      	ldr	r1, [pc, #308]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d044      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d119      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d003      	beq.n	8003d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e06f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da2:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e067      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db2:	4b37      	ldr	r3, [pc, #220]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4934      	ldr	r1, [pc, #208]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fd0c 	bl	80027e0 <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dcc:	f7fe fd08 	bl	80027e0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e04f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 020c 	and.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1eb      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df4:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d20c      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b22      	ldr	r3, [pc, #136]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e032      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4916      	ldr	r1, [pc, #88]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	490e      	ldr	r1, [pc, #56]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e5a:	f000 f821 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	490a      	ldr	r1, [pc, #40]	@ (8003e94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	5ccb      	ldrb	r3, [r1, r3]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc6c 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023c00 	.word	0x40023c00
 8003e90:	40023800 	.word	0x40023800
 8003e94:	08013048 	.word	0x08013048
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	2000000c 	.word	0x2000000c

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea4:	b094      	sub	sp, #80	@ 0x50
 8003ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb8:	4b79      	ldr	r3, [pc, #484]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	f200 80e1 	bhi.w	800408c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x3a>
 8003ed2:	e0db      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b73      	ldr	r3, [pc, #460]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ed8:	e0db      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eda:	4b73      	ldr	r3, [pc, #460]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ede:	e0d8      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eea:	4b6d      	ldr	r3, [pc, #436]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	099b      	lsrs	r3, r3, #6
 8003efc:	2200      	movs	r2, #0
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f12:	4622      	mov	r2, r4
 8003f14:	462b      	mov	r3, r5
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	0159      	lsls	r1, r3, #5
 8003f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f24:	0150      	lsls	r0, r2, #5
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	1a51      	subs	r1, r2, r1
 8003f2e:	6139      	str	r1, [r7, #16]
 8003f30:	4629      	mov	r1, r5
 8003f32:	eb63 0301 	sbc.w	r3, r3, r1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f44:	4659      	mov	r1, fp
 8003f46:	018b      	lsls	r3, r1, #6
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f4e:	4651      	mov	r1, sl
 8003f50:	018a      	lsls	r2, r1, #6
 8003f52:	4651      	mov	r1, sl
 8003f54:	ebb2 0801 	subs.w	r8, r2, r1
 8003f58:	4659      	mov	r1, fp
 8003f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f72:	4690      	mov	r8, r2
 8003f74:	4699      	mov	r9, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	eb18 0303 	adds.w	r3, r8, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	462b      	mov	r3, r5
 8003f80:	eb49 0303 	adc.w	r3, r9, r3
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f92:	4629      	mov	r1, r5
 8003f94:	024b      	lsls	r3, r1, #9
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	024a      	lsls	r2, r1, #9
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fb0:	f7fc fd04 	bl	80009bc <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fbc:	e058      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b38      	ldr	r3, [pc, #224]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4611      	mov	r1, r2
 8003fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	f04f 0000 	mov.w	r0, #0
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	0159      	lsls	r1, r3, #5
 8003fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fea:	0150      	lsls	r0, r2, #5
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800400c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004010:	ebb2 040a 	subs.w	r4, r2, sl
 8004014:	eb63 050b 	sbc.w	r5, r3, fp
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	00eb      	lsls	r3, r5, #3
 8004022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004026:	00e2      	lsls	r2, r4, #3
 8004028:	4614      	mov	r4, r2
 800402a:	461d      	mov	r5, r3
 800402c:	4643      	mov	r3, r8
 800402e:	18e3      	adds	r3, r4, r3
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	464b      	mov	r3, r9
 8004034:	eb45 0303 	adc.w	r3, r5, r3
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004046:	4629      	mov	r1, r5
 8004048:	028b      	lsls	r3, r1, #10
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004050:	4621      	mov	r1, r4
 8004052:	028a      	lsls	r2, r1, #10
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405a:	2200      	movs	r2, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	61fa      	str	r2, [r7, #28]
 8004060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004064:	f7fc fcaa 	bl	80009bc <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	3301      	adds	r3, #1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800408a:	e002      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004094:	4618      	mov	r0, r3
 8004096:	3750      	adds	r7, #80	@ 0x50
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	007a1200 	.word	0x007a1200

080040ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b0:	4b03      	ldr	r3, [pc, #12]	@ (80040c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000008 	.word	0x20000008

080040c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c8:	f7ff fff0 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	0a9b      	lsrs	r3, r3, #10
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4903      	ldr	r1, [pc, #12]	@ (80040e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08013058 	.word	0x08013058

080040ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f0:	f7ff ffdc 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0b5b      	lsrs	r3, r3, #13
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	@ (8004110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	08013058 	.word	0x08013058

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd ffc4 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fba4 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e044      	b.n	8004256 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f6:	d013      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_TIM_Base_Start_IT+0xb4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a19      	ldr	r2, [pc, #100]	@ (800426c <HAL_TIM_Base_Start_IT+0xb8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <HAL_TIM_Base_Start_IT+0xbc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <HAL_TIM_Base_Start_IT+0xc0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d010      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e007      	b.n	8004254 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e097      	b.n	80043bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fd fdf5 	bl	8001e90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042bc:	f023 0307 	bic.w	r3, r3, #7
 80042c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f000 fae7 	bl	80048a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	4313      	orrs	r3, r2
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004318:	f023 030c 	bic.w	r3, r3, #12
 800431c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4313      	orrs	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	031b      	lsls	r3, r3, #12
 8004348:	4313      	orrs	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4313      	orrs	r3, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043fa:	7b7b      	ldrb	r3, [r7, #13]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e069      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	e031      	b.n	800447a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d110      	bne.n	800443e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004422:	7b3b      	ldrb	r3, [r7, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e055      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800443c:	e01d      	b.n	800447a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	7b7b      	ldrb	r3, [r7, #13]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d102      	bne.n	8004456 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004450:	7b3b      	ldrb	r3, [r7, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03e      	b.n	80044d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_Encoder_Start+0xc4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b04      	cmp	r3, #4
 8004484:	d008      	beq.n	8004498 <HAL_TIM_Encoder_Start+0xd4>
 8004486:	e00f      	b.n	80044a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fb2b 	bl	8004aec <TIM_CCxChannelCmd>
      break;
 8004496:	e016      	b.n	80044c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	2104      	movs	r1, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fb23 	bl	8004aec <TIM_CCxChannelCmd>
      break;
 80044a6:	e00e      	b.n	80044c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb1b 	bl	8004aec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	2104      	movs	r1, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb14 	bl	8004aec <TIM_CCxChannelCmd>
      break;
 80044c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0202 	mvn.w	r2, #2
 8004514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f999 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f98b 	bl	800484e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f99c 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f973 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f965 	bl	800484e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f976 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d020      	beq.n	80045dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0208 	mvn.w	r2, #8
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2204      	movs	r2, #4
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f94d 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f93f 	bl	800484e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f950 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0210 	mvn.w	r2, #16
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2208      	movs	r2, #8
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f927 	bl	8004862 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f919 	bl	800484e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f92a 	bl	8004876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0201 	mvn.w	r2, #1
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd f97c 	bl	8001944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fadc 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8fb 	bl	800488a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0220 	mvn.w	r2, #32
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 faae 	bl	8004c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_ConfigClockSource+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e0b4      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x186>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d03e      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xd4>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	f200 8087 	bhi.w	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	f000 8086 	beq.w	8004832 <HAL_TIM_ConfigClockSource+0x172>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d87f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b70      	cmp	r3, #112	@ 0x70
 800472e:	d01a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xa6>
 8004730:	2b70      	cmp	r3, #112	@ 0x70
 8004732:	d87b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b60      	cmp	r3, #96	@ 0x60
 8004736:	d050      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x11a>
 8004738:	2b60      	cmp	r3, #96	@ 0x60
 800473a:	d877      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b50      	cmp	r3, #80	@ 0x50
 800473e:	d03c      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xfa>
 8004740:	2b50      	cmp	r3, #80	@ 0x50
 8004742:	d873      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d058      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x13a>
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d86f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b30      	cmp	r3, #48	@ 0x30
 800474e:	d064      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b30      	cmp	r3, #48	@ 0x30
 8004752:	d86b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d060      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d867      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d05a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	e062      	b.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	f000 f999 	bl	8004aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04f      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	f000 f982 	bl	8004aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e03c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 f8f6 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	@ 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f94f 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e02c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 f915 	bl	8004a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	@ 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f93f 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	f000 f8d6 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	@ 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f92f 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004818:	e00c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 f926 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 800482a:	e003      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3a      	ldr	r2, [pc, #232]	@ (800499c <TIM_Base_SetConfig+0xfc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a37      	ldr	r2, [pc, #220]	@ (80049a0 <TIM_Base_SetConfig+0x100>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a36      	ldr	r2, [pc, #216]	@ (80049a4 <TIM_Base_SetConfig+0x104>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a35      	ldr	r2, [pc, #212]	@ (80049a8 <TIM_Base_SetConfig+0x108>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <TIM_Base_SetConfig+0xfc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a28      	ldr	r2, [pc, #160]	@ (80049a0 <TIM_Base_SetConfig+0x100>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <TIM_Base_SetConfig+0x104>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <TIM_Base_SetConfig+0x108>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a25      	ldr	r2, [pc, #148]	@ (80049ac <TIM_Base_SetConfig+0x10c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a24      	ldr	r2, [pc, #144]	@ (80049b0 <TIM_Base_SetConfig+0x110>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a23      	ldr	r2, [pc, #140]	@ (80049b4 <TIM_Base_SetConfig+0x114>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a0e      	ldr	r2, [pc, #56]	@ (800499c <TIM_Base_SetConfig+0xfc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d105      	bne.n	800498e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	611a      	str	r2, [r3, #16]
  }
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f023 0210 	bic.w	r2, r3, #16
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e050      	b.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d013      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10c      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40014000 	.word	0x40014000

08004c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e042      	b.n	8004cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fd fa58 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 ffc9 	bl	8005c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	@ 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d156      	bne.n	8004da4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_Transmit_DMA+0x26>
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e04f      	b.n	8004da6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	@ 0x21
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	4a21      	ldr	r2, [pc, #132]	@ (8004db0 <HAL_UART_Transmit_DMA+0xd4>)
 8004d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	4a20      	ldr	r2, [pc, #128]	@ (8004db4 <HAL_UART_Transmit_DMA+0xd8>)
 8004d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <HAL_UART_Transmit_DMA+0xdc>)
 8004d3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	2200      	movs	r2, #0
 8004d44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	f7fd ff0b 	bl	8002b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3730      	adds	r7, #48	@ 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	080054a5 	.word	0x080054a5
 8004db4:	0800553f 	.word	0x0800553f
 8004db8:	080056c3 	.word	0x080056c3

08004dbc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d112      	bne.n	8004dfc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_UART_Receive_DMA+0x26>
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00b      	b.n	8004dfe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fcb0 	bl	8005758 <UART_Start_Receive_DMA>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e000      	b.n	8004dfe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b090      	sub	sp, #64	@ 0x40
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b80      	cmp	r3, #128	@ 0x80
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b21      	cmp	r3, #33	@ 0x21
 8004e32:	d128      	bne.n	8004e86 <HAL_UART_DMAStop+0x80>
 8004e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d025      	beq.n	8004e86 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fed4 	bl	8002c28 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fd03 	bl	800588c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b22      	cmp	r3, #34	@ 0x22
 8004ea6:	d128      	bne.n	8004efa <HAL_UART_DMAStop+0xf4>
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d025      	beq.n	8004efa <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ece:	61fa      	str	r2, [r7, #28]
 8004ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	69b9      	ldr	r1, [r7, #24]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	617b      	str	r3, [r7, #20]
   return(result);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd fe9a 	bl	8002c28 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fcf1 	bl	80058dc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3740      	adds	r7, #64	@ 0x40
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b0ba      	sub	sp, #232	@ 0xe8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <HAL_UART_IRQHandler+0x66>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fd99 	bl	8005a9a <UART_Receive_IT>
      return;
 8004f68:	e25b      	b.n	8005422 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80de 	beq.w	8005130 <HAL_UART_IRQHandler+0x22c>
 8004f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80d1 	beq.w	8005130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xae>
 8004f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xd2>
 8004fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <HAL_UART_IRQHandler+0xf6>
 8004fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f043 0204 	orr.w	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d011      	beq.n	800502a <HAL_UART_IRQHandler+0x126>
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 81f2 	beq.w	8005418 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x14e>
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fd24 	bl	8005a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_UART_IRQHandler+0x17a>
 8005076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04f      	beq.n	800511e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fc2c 	bl	80058dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d141      	bne.n	8005116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1d9      	bne.n	8005092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d013      	beq.n	800510e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ea:	4a7e      	ldr	r2, [pc, #504]	@ (80052e4 <HAL_UART_IRQHandler+0x3e0>)
 80050ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd fe08 	bl	8002d08 <HAL_DMA_Abort_IT>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	e00e      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9b2 	bl	8005478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	e00a      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9ae 	bl	8005478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e006      	b.n	800512c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9aa 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800512a:	e175      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	bf00      	nop
    return;
 800512e:	e173      	b.n	8005418 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	f040 814f 	bne.w	80053d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 8148 	beq.w	80053d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8141 	beq.w	80053d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	f040 80b6 	bne.w	80052e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8145 	beq.w	800541c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800519a:	429a      	cmp	r2, r3
 800519c:	f080 813e 	bcs.w	800541c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b2:	f000 8088 	beq.w	80052c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1d9      	bne.n	80051b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005226:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800522a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800522e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e1      	bne.n	8005202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800524e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e3      	bne.n	800523e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e3      	bne.n	8005284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fd fcb1 	bl	8002c28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8d5 	bl	800548c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e2:	e09b      	b.n	800541c <HAL_UART_IRQHandler+0x518>
 80052e4:	080059a3 	.word	0x080059a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 808e 	beq.w	8005420 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8089 	beq.w	8005420 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005324:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005332:	647a      	str	r2, [r7, #68]	@ 0x44
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005338:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	623b      	str	r3, [r7, #32]
   return(result);
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800536a:	633a      	str	r2, [r7, #48]	@ 0x30
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60fb      	str	r3, [r7, #12]
   return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e3      	bne.n	800538c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f85b 	bl	800548c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d6:	e023      	b.n	8005420 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <HAL_UART_IRQHandler+0x4f4>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 faea 	bl	80059ca <UART_Transmit_IT>
    return;
 80053f6:	e014      	b.n	8005422 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <HAL_UART_IRQHandler+0x51e>
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fb2a 	bl	8005a6a <UART_EndTransmit_IT>
    return;
 8005416:	e004      	b.n	8005422 <HAL_UART_IRQHandler+0x51e>
    return;
 8005418:	bf00      	nop
 800541a:	e002      	b.n	8005422 <HAL_UART_IRQHandler+0x51e>
      return;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HAL_UART_IRQHandler+0x51e>
      return;
 8005420:	bf00      	nop
  }
}
 8005422:	37e8      	adds	r7, #232	@ 0xe8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b090      	sub	sp, #64	@ 0x40
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d137      	bne.n	8005530 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80054c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c2:	2200      	movs	r2, #0
 80054c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	623b      	str	r3, [r7, #32]
   return(result);
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e5      	bne.n	80054c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	60fb      	str	r3, [r7, #12]
   return(result);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
 8005512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800551a:	61fa      	str	r2, [r7, #28]
 800551c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	69b9      	ldr	r1, [r7, #24]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	617b      	str	r3, [r7, #20]
   return(result);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800552e:	e002      	b.n	8005536 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005530:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005532:	f7ff ff79 	bl	8005428 <HAL_UART_TxCpltCallback>
}
 8005536:	bf00      	nop
 8005538:	3740      	adds	r7, #64	@ 0x40
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff75 	bl	800543c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b09c      	sub	sp, #112	@ 0x70
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d172      	bne.n	800565c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005578:	2200      	movs	r2, #0
 800557a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800558c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005592:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800559c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800559e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80055c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80055d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	623b      	str	r3, [r7, #32]
   return(result);
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80055fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005604:	633a      	str	r2, [r7, #48]	@ 0x30
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800560a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	2b01      	cmp	r3, #1
 8005626:	d119      	bne.n	800565c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	60fb      	str	r3, [r7, #12]
   return(result);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0310 	bic.w	r3, r3, #16
 800563e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005648:	61fa      	str	r2, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	69b9      	ldr	r1, [r7, #24]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	617b      	str	r3, [r7, #20]
   return(result);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565e:	2200      	movs	r2, #0
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005666:	2b01      	cmp	r3, #1
 8005668:	d106      	bne.n	8005678 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800566c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800566e:	4619      	mov	r1, r3
 8005670:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005672:	f7ff ff0b 	bl	800548c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005676:	e002      	b.n	800567e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005678:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800567a:	f7ff fee9 	bl	8005450 <HAL_UART_RxCpltCallback>
}
 800567e:	bf00      	nop
 8005680:	3770      	adds	r7, #112	@ 0x70
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d108      	bne.n	80056b4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff feed 	bl	800548c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056b2:	e002      	b.n	80056ba <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff fed5 	bl	8005464 <HAL_UART_RxHalfCpltCallback>
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056de:	2b80      	cmp	r3, #128	@ 0x80
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b21      	cmp	r3, #33	@ 0x21
 80056f4:	d108      	bne.n	8005708 <UART_DMAError+0x46>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005702:	68b8      	ldr	r0, [r7, #8]
 8005704:	f000 f8c2 	bl	800588c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b40      	cmp	r3, #64	@ 0x40
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b22      	cmp	r3, #34	@ 0x22
 8005728:	d108      	bne.n	800573c <UART_DMAError+0x7a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f000 f8d0 	bl	80058dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005740:	f043 0210 	orr.w	r2, r3, #16
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f7ff fe95 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b098      	sub	sp, #96	@ 0x60
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	@ 0x22
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	4a3e      	ldr	r2, [pc, #248]	@ (8005880 <UART_Start_Receive_DMA+0x128>)
 8005786:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	4a3d      	ldr	r2, [pc, #244]	@ (8005884 <UART_Start_Receive_DMA+0x12c>)
 800578e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	4a3c      	ldr	r2, [pc, #240]	@ (8005888 <UART_Start_Receive_DMA+0x130>)
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	2200      	movs	r2, #0
 800579e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80057a0:	f107 0308 	add.w	r3, r7, #8
 80057a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	f7fd f9de 	bl	8002b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d019      	beq.n	800580e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80057fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	657b      	str	r3, [r7, #84]	@ 0x54
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800582e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3314      	adds	r3, #20
 8005848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005858:	653b      	str	r3, [r7, #80]	@ 0x50
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005862:	627a      	str	r2, [r7, #36]	@ 0x24
 8005864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6a39      	ldr	r1, [r7, #32]
 8005868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3760      	adds	r7, #96	@ 0x60
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	0800555b 	.word	0x0800555b
 8005884:	08005687 	.word	0x08005687
 8005888:	080056c3 	.word	0x080056c3

0800588c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	@ 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	61ba      	str	r2, [r7, #24]
 80058b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6979      	ldr	r1, [r7, #20]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	613b      	str	r3, [r7, #16]
   return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80058d0:	bf00      	nop
 80058d2:	3724      	adds	r7, #36	@ 0x24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b095      	sub	sp, #84	@ 0x54
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005904:	643a      	str	r2, [r7, #64]	@ 0x40
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800590a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	61fb      	str	r3, [r7, #28]
   return(result);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005938:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	d119      	bne.n	8005988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	647b      	str	r3, [r7, #68]	@ 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005974:	61ba      	str	r2, [r7, #24]
 8005976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e5      	bne.n	8005954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005996:	bf00      	nop
 8005998:	3754      	adds	r7, #84	@ 0x54
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff fd5b 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b21      	cmp	r3, #33	@ 0x21
 80059dc:	d13e      	bne.n	8005a5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e6:	d114      	bne.n	8005a12 <UART_Transmit_IT+0x48>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d110      	bne.n	8005a12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]
 8005a10:	e008      	b.n	8005a24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6211      	str	r1, [r2, #32]
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4619      	mov	r1, r3
 8005a32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10f      	bne.n	8005a58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fccc 	bl	8005428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b08c      	sub	sp, #48	@ 0x30
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b22      	cmp	r3, #34	@ 0x22
 8005aac:	f040 80ae 	bne.w	8005c0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d117      	bne.n	8005aea <UART_Receive_IT+0x50>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d113      	bne.n	8005aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	1c9a      	adds	r2, r3, #2
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ae8:	e026      	b.n	8005b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afc:	d007      	beq.n	8005b0e <UART_Receive_IT+0x74>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <UART_Receive_IT+0x82>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	e008      	b.n	8005b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4619      	mov	r1, r3
 8005b46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d15d      	bne.n	8005c08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0220 	bic.w	r2, r2, #32
 8005b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d135      	bne.n	8005bfe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb8:	623a      	str	r2, [r7, #32]
 8005bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	69f9      	ldr	r1, [r7, #28]
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b10      	cmp	r3, #16
 8005bd8:	d10a      	bne.n	8005bf0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fc48 	bl	800548c <HAL_UARTEx_RxEventCallback>
 8005bfc:	e002      	b.n	8005c04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fc26 	bl	8005450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e002      	b.n	8005c0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	@ 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b0c0      	sub	sp, #256	@ 0x100
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	68d9      	ldr	r1, [r3, #12]
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	ea40 0301 	orr.w	r3, r0, r1
 8005c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c70:	f021 010c 	bic.w	r1, r1, #12
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c92:	6999      	ldr	r1, [r3, #24]
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	ea40 0301 	orr.w	r3, r0, r1
 8005c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee4 <UART_SetConfig+0x2cc>)
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d005      	beq.n	8005cb8 <UART_SetConfig+0xa0>
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ee8 <UART_SetConfig+0x2d0>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d104      	bne.n	8005cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fe fa18 	bl	80040ec <HAL_RCC_GetPCLK2Freq>
 8005cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cc0:	e003      	b.n	8005cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7fe f9ff 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 8005cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd4:	f040 810c 	bne.w	8005ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	eb12 0801 	adds.w	r8, r2, r1
 8005d00:	4629      	mov	r1, r5
 8005d02:	eb43 0901 	adc.w	r9, r3, r1
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	eb18 0303 	adds.w	r3, r8, r3
 8005d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb49 0303 	adc.w	r3, r9, r3
 8005d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d46:	460b      	mov	r3, r1
 8005d48:	18db      	adds	r3, r3, r3
 8005d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	eb42 0303 	adc.w	r3, r2, r3
 8005d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d5c:	f7fa fe2e 	bl	80009bc <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b61      	ldr	r3, [pc, #388]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005d66:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	011c      	lsls	r4, r3, #4
 8005d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	1891      	adds	r1, r2, r2
 8005d86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d88:	415b      	adcs	r3, r3
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d90:	4641      	mov	r1, r8
 8005d92:	eb12 0a01 	adds.w	sl, r2, r1
 8005d96:	4649      	mov	r1, r9
 8005d98:	eb43 0b01 	adc.w	fp, r3, r1
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db0:	4692      	mov	sl, r2
 8005db2:	469b      	mov	fp, r3
 8005db4:	4643      	mov	r3, r8
 8005db6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	18db      	adds	r3, r3, r3
 8005de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de2:	4613      	mov	r3, r2
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005df2:	f7fa fde3 	bl	80009bc <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	@ 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e12:	4b36      	ldr	r3, [pc, #216]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005e14:	fba3 2302 	umull	r2, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e20:	441c      	add	r4, r3
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e44:	4641      	mov	r1, r8
 8005e46:	1851      	adds	r1, r2, r1
 8005e48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	414b      	adcs	r3, r1
 8005e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	00cb      	lsls	r3, r1, #3
 8005e60:	4651      	mov	r1, sl
 8005e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e66:	4651      	mov	r1, sl
 8005e68:	00ca      	lsls	r2, r1, #3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4642      	mov	r2, r8
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e78:	464b      	mov	r3, r9
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e98:	460b      	mov	r3, r1
 8005e9a:	18db      	adds	r3, r3, r3
 8005e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	eb42 0303 	adc.w	r3, r2, r3
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eae:	f7fa fd85 	bl	80009bc <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2164      	movs	r1, #100	@ 0x64
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	3332      	adds	r3, #50	@ 0x32
 8005eca:	4a08      	ldr	r2, [pc, #32]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f003 0207 	and.w	r2, r3, #7
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4422      	add	r2, r4
 8005ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee0:	e106      	b.n	80060f0 <UART_SetConfig+0x4d8>
 8005ee2:	bf00      	nop
 8005ee4:	40011000 	.word	0x40011000
 8005ee8:	40011400 	.word	0x40011400
 8005eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005efa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f02:	4642      	mov	r2, r8
 8005f04:	464b      	mov	r3, r9
 8005f06:	1891      	adds	r1, r2, r2
 8005f08:	6239      	str	r1, [r7, #32]
 8005f0a:	415b      	adcs	r3, r3
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f12:	4641      	mov	r1, r8
 8005f14:	1854      	adds	r4, r2, r1
 8005f16:	4649      	mov	r1, r9
 8005f18:	eb43 0501 	adc.w	r5, r3, r1
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	00eb      	lsls	r3, r5, #3
 8005f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2a:	00e2      	lsls	r2, r4, #3
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	461d      	mov	r5, r3
 8005f30:	4643      	mov	r3, r8
 8005f32:	18e3      	adds	r3, r4, r3
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f38:	464b      	mov	r3, r9
 8005f3a:	eb45 0303 	adc.w	r3, r5, r3
 8005f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f5e:	4629      	mov	r1, r5
 8005f60:	008b      	lsls	r3, r1, #2
 8005f62:	4621      	mov	r1, r4
 8005f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f68:	4621      	mov	r1, r4
 8005f6a:	008a      	lsls	r2, r1, #2
 8005f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f70:	f7fa fd24 	bl	80009bc <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b60      	ldr	r3, [pc, #384]	@ (80060fc <UART_SetConfig+0x4e4>)
 8005f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	011c      	lsls	r4, r3, #4
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	1891      	adds	r1, r2, r2
 8005f9a:	61b9      	str	r1, [r7, #24]
 8005f9c:	415b      	adcs	r3, r3
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	1851      	adds	r1, r2, r1
 8005fa8:	6139      	str	r1, [r7, #16]
 8005faa:	4649      	mov	r1, r9
 8005fac:	414b      	adcs	r3, r1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	00cb      	lsls	r3, r1, #3
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	00ca      	lsls	r2, r1, #3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	189b      	adds	r3, r3, r2
 8005fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fd8:	464b      	mov	r3, r9
 8005fda:	460a      	mov	r2, r1
 8005fdc:	eb42 0303 	adc.w	r3, r2, r3
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	008b      	lsls	r3, r1, #2
 8006000:	4641      	mov	r1, r8
 8006002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006006:	4641      	mov	r1, r8
 8006008:	008a      	lsls	r2, r1, #2
 800600a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800600e:	f7fa fcd5 	bl	80009bc <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4611      	mov	r1, r2
 8006018:	4b38      	ldr	r3, [pc, #224]	@ (80060fc <UART_SetConfig+0x4e4>)
 800601a:	fba3 2301 	umull	r2, r3, r3, r1
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2264      	movs	r2, #100	@ 0x64
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	1acb      	subs	r3, r1, r3
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	3332      	adds	r3, #50	@ 0x32
 800602c:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <UART_SetConfig+0x4e4>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006038:	441c      	add	r4, r3
 800603a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800603e:	2200      	movs	r2, #0
 8006040:	673b      	str	r3, [r7, #112]	@ 0x70
 8006042:	677a      	str	r2, [r7, #116]	@ 0x74
 8006044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	1891      	adds	r1, r2, r2
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	415b      	adcs	r3, r3
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006058:	4641      	mov	r1, r8
 800605a:	1851      	adds	r1, r2, r1
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	4649      	mov	r1, r9
 8006060:	414b      	adcs	r3, r1
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006070:	4659      	mov	r1, fp
 8006072:	00cb      	lsls	r3, r1, #3
 8006074:	4651      	mov	r1, sl
 8006076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607a:	4651      	mov	r1, sl
 800607c:	00ca      	lsls	r2, r1, #3
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	4603      	mov	r3, r0
 8006084:	4642      	mov	r2, r8
 8006086:	189b      	adds	r3, r3, r2
 8006088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800608a:	464b      	mov	r3, r9
 800608c:	460a      	mov	r2, r1
 800608e:	eb42 0303 	adc.w	r3, r2, r3
 8006092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	663b      	str	r3, [r7, #96]	@ 0x60
 800609e:	667a      	str	r2, [r7, #100]	@ 0x64
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060ac:	4649      	mov	r1, r9
 80060ae:	008b      	lsls	r3, r1, #2
 80060b0:	4641      	mov	r1, r8
 80060b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b6:	4641      	mov	r1, r8
 80060b8:	008a      	lsls	r2, r1, #2
 80060ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060be:	f7fa fc7d 	bl	80009bc <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <UART_SetConfig+0x4e4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	@ 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	3332      	adds	r3, #50	@ 0x32
 80060da:	4a08      	ldr	r2, [pc, #32]	@ (80060fc <UART_SetConfig+0x4e4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 020f 	and.w	r2, r3, #15
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4422      	add	r2, r4
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fc:	51eb851f 	.word	0x51eb851f

08006100 <__NVIC_SetPriority>:
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	6039      	str	r1, [r7, #0]
 800610a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	2b00      	cmp	r3, #0
 8006112:	db0a      	blt.n	800612a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	490c      	ldr	r1, [pc, #48]	@ (800614c <__NVIC_SetPriority+0x4c>)
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	0112      	lsls	r2, r2, #4
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	440b      	add	r3, r1
 8006124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006128:	e00a      	b.n	8006140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4908      	ldr	r1, [pc, #32]	@ (8006150 <__NVIC_SetPriority+0x50>)
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	3b04      	subs	r3, #4
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	440b      	add	r3, r1
 800613e:	761a      	strb	r2, [r3, #24]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	e000e100 	.word	0xe000e100
 8006150:	e000ed00 	.word	0xe000ed00

08006154 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006158:	2100      	movs	r1, #0
 800615a:	f06f 0004 	mvn.w	r0, #4
 800615e:	f7ff ffcf 	bl	8006100 <__NVIC_SetPriority>
#endif
}
 8006162:	bf00      	nop
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616e:	f3ef 8305 	mrs	r3, IPSR
 8006172:	603b      	str	r3, [r7, #0]
  return(result);
 8006174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800617a:	f06f 0305 	mvn.w	r3, #5
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	e00c      	b.n	800619c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <osKernelInitialize+0x44>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800618a:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <osKernelInitialize+0x44>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006190:	2300      	movs	r3, #0
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	e002      	b.n	800619c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800619a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800619c:	687b      	ldr	r3, [r7, #4]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20004828 	.word	0x20004828

080061b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b6:	f3ef 8305 	mrs	r3, IPSR
 80061ba:	603b      	str	r3, [r7, #0]
  return(result);
 80061bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80061c2:	f06f 0305 	mvn.w	r3, #5
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	e010      	b.n	80061ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061ca:	4b0b      	ldr	r3, [pc, #44]	@ (80061f8 <osKernelStart+0x48>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d109      	bne.n	80061e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061d2:	f7ff ffbf 	bl	8006154 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <osKernelStart+0x48>)
 80061d8:	2202      	movs	r2, #2
 80061da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061dc:	f001 f87a 	bl	80072d4 <vTaskStartScheduler>
      stat = osOK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e002      	b.n	80061ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061ec:	687b      	ldr	r3, [r7, #4]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20004828 	.word	0x20004828

080061fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	@ 0x38
 8006200:	af04      	add	r7, sp, #16
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800620c:	f3ef 8305 	mrs	r3, IPSR
 8006210:	617b      	str	r3, [r7, #20]
  return(result);
 8006212:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006214:	2b00      	cmp	r3, #0
 8006216:	d17e      	bne.n	8006316 <osThreadNew+0x11a>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d07b      	beq.n	8006316 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800621e:	2380      	movs	r3, #128	@ 0x80
 8006220:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006222:	2318      	movs	r3, #24
 8006224:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800622e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d045      	beq.n	80062c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <osThreadNew+0x48>
        name = attr->name;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <osThreadNew+0x6e>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b38      	cmp	r3, #56	@ 0x38
 800625c:	d805      	bhi.n	800626a <osThreadNew+0x6e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <osThreadNew+0x72>
        return (NULL);
 800626a:	2300      	movs	r3, #0
 800626c:	e054      	b.n	8006318 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	089b      	lsrs	r3, r3, #2
 800627c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <osThreadNew+0xa8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b5b      	cmp	r3, #91	@ 0x5b
 800628c:	d90a      	bls.n	80062a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osThreadNew+0xa8>
        mem = 1;
 800629e:	2301      	movs	r3, #1
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e010      	b.n	80062c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <osThreadNew+0xca>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <osThreadNew+0xca>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <osThreadNew+0xca>
          mem = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e001      	b.n	80062c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d110      	bne.n	80062ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062d4:	9202      	str	r2, [sp, #8]
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fe1a 	bl	8006f1c <xTaskCreateStatic>
 80062e8:	4603      	mov	r3, r0
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e013      	b.n	8006316 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d110      	bne.n	8006316 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f107 0310 	add.w	r3, r7, #16
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fe68 	bl	8006fdc <xTaskCreate>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <osThreadNew+0x11a>
            hTask = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006316:	693b      	ldr	r3, [r7, #16]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3728      	adds	r7, #40	@ 0x28
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006328:	f3ef 8305 	mrs	r3, IPSR
 800632c:	60bb      	str	r3, [r7, #8]
  return(result);
 800632e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <osDelay+0x1c>
    stat = osErrorISR;
 8006334:	f06f 0305 	mvn.w	r3, #5
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e007      	b.n	800634c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 ff8e 	bl	8007268 <vTaskDelay>
    }
  }

  return (stat);
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a07      	ldr	r2, [pc, #28]	@ (8006384 <vApplicationGetIdleTaskMemory+0x2c>)
 8006368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a06      	ldr	r2, [pc, #24]	@ (8006388 <vApplicationGetIdleTaskMemory+0x30>)
 800636e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2280      	movs	r2, #128	@ 0x80
 8006374:	601a      	str	r2, [r3, #0]
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000482c 	.word	0x2000482c
 8006388:	20004888 	.word	0x20004888

0800638c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a07      	ldr	r2, [pc, #28]	@ (80063b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800639c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4a06      	ldr	r2, [pc, #24]	@ (80063bc <vApplicationGetTimerTaskMemory+0x30>)
 80063a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063aa:	601a      	str	r2, [r3, #0]
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20004a88 	.word	0x20004a88
 80063bc:	20004ae4 	.word	0x20004ae4

080063c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f103 0208 	add.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f103 0208 	add.w	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 0208 	add.w	r2, r3, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006478:	d103      	bne.n	8006482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e00c      	b.n	800649c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3308      	adds	r3, #8
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e002      	b.n	8006490 <vListInsert+0x2e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d2f6      	bcs.n	800648a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6892      	ldr	r2, [r2, #8]
 80064ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6852      	ldr	r2, [r2, #4]
 80064f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d103      	bne.n	8006508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericReset+0x2c>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60bb      	str	r3, [r7, #8]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006554:	f002 f8a0 	bl	8008698 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	441a      	add	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	3b01      	subs	r3, #1
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	22ff      	movs	r2, #255	@ 0xff
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	22ff      	movs	r2, #255	@ 0xff
 80065a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d114      	bne.n	80065d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01a      	beq.n	80065e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3310      	adds	r3, #16
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 f91a 	bl	80077f0 <xTaskRemoveFromEventList>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d012      	beq.n	80065e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <xQueueGenericReset+0xd0>)
 80065c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	e009      	b.n	80065e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3310      	adds	r3, #16
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fef1 	bl	80063c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3324      	adds	r3, #36	@ 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff feec 	bl	80063c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065e8:	f002 f888 	bl	80086fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065ec:	2301      	movs	r3, #1
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08e      	sub	sp, #56	@ 0x38
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <xQueueGenericCreateStatic+0x56>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <xQueueGenericCreateStatic+0x5a>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <xQueueGenericCreateStatic+0x5c>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	e7fd      	b.n	8006670 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <xQueueGenericCreateStatic+0x84>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <xQueueGenericCreateStatic+0x88>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <xQueueGenericCreateStatic+0x8a>
 8006684:	2300      	movs	r3, #0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	61fb      	str	r3, [r7, #28]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066a2:	2350      	movs	r3, #80	@ 0x50
 80066a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b50      	cmp	r3, #80	@ 0x50
 80066aa:	d00b      	beq.n	80066c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61bb      	str	r3, [r7, #24]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f805 	bl	80066f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3730      	adds	r7, #48	@ 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d103      	bne.n	8006712 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e002      	b.n	8006718 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006724:	2101      	movs	r1, #1
 8006726:	69b8      	ldr	r0, [r7, #24]
 8006728:	f7ff fefe 	bl	8006528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08e      	sub	sp, #56	@ 0x38
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <xQueueGenericSend+0x34>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueGenericSend+0x42>
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueGenericSend+0x46>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueGenericSend+0x48>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10b      	bne.n	80067a0 <xQueueGenericSend+0x64>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d103      	bne.n	80067ae <xQueueGenericSend+0x72>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <xQueueGenericSend+0x76>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueGenericSend+0x78>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xQueueGenericSend+0x94>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d0:	f001 f9f6 	bl	8007bc0 <xTaskGetSchedulerState>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <xQueueGenericSend+0xa4>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xQueueGenericSend+0xa8>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <xQueueGenericSend+0xaa>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <xQueueGenericSend+0xc6>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	61fb      	str	r3, [r7, #28]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006802:	f001 ff49 	bl	8008698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680e:	429a      	cmp	r2, r3
 8006810:	d302      	bcc.n	8006818 <xQueueGenericSend+0xdc>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d129      	bne.n	800686c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800681e:	f000 fa0f 	bl	8006c40 <prvCopyDataToQueue>
 8006822:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d010      	beq.n	800684e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	3324      	adds	r3, #36	@ 0x24
 8006830:	4618      	mov	r0, r3
 8006832:	f000 ffdd 	bl	80077f0 <xTaskRemoveFromEventList>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d013      	beq.n	8006864 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800683c:	4b3f      	ldr	r3, [pc, #252]	@ (800693c <xQueueGenericSend+0x200>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	e00a      	b.n	8006864 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006854:	4b39      	ldr	r3, [pc, #228]	@ (800693c <xQueueGenericSend+0x200>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006864:	f001 ff4a 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 8006868:	2301      	movs	r3, #1
 800686a:	e063      	b.n	8006934 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006872:	f001 ff43 	bl	80086fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006876:	2300      	movs	r3, #0
 8006878:	e05c      	b.n	8006934 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006880:	f107 0314 	add.w	r3, r7, #20
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f83f 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800688e:	f001 ff35 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006892:	f000 fd87 	bl	80073a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006896:	f001 feff 	bl	8008698 <vPortEnterCritical>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a6:	d103      	bne.n	80068b0 <xQueueGenericSend+0x174>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068bc:	d103      	bne.n	80068c6 <xQueueGenericSend+0x18a>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068c6:	f001 ff19 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ca:	1d3a      	adds	r2, r7, #4
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f82e 	bl	8007934 <xTaskCheckForTimeOut>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d124      	bne.n	8006928 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068e0:	f000 faa6 	bl	8006e30 <prvIsQueueFull>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	3310      	adds	r3, #16
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 ff2a 	bl	800774c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fa:	f000 fa31 	bl	8006d60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068fe:	f000 fd5f 	bl	80073c0 <xTaskResumeAll>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f af7c 	bne.w	8006802 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800690a:	4b0c      	ldr	r3, [pc, #48]	@ (800693c <xQueueGenericSend+0x200>)
 800690c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	e772      	b.n	8006802 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800691c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800691e:	f000 fa1f 	bl	8006d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006922:	f000 fd4d 	bl	80073c0 <xTaskResumeAll>
 8006926:	e76c      	b.n	8006802 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800692a:	f000 fa19 	bl	8006d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800692e:	f000 fd47 	bl	80073c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006932:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006934:	4618      	mov	r0, r3
 8006936:	3738      	adds	r7, #56	@ 0x38
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b090      	sub	sp, #64	@ 0x40
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	e7fd      	b.n	800696c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <xQueueGenericSendFromISR+0x3e>
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <xQueueGenericSendFromISR+0x42>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueGenericSendFromISR+0x44>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSendFromISR+0x6e>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSendFromISR+0x72>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSendFromISR+0x74>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069d0:	f001 ff42 	bl	8008858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069d4:	f3ef 8211 	mrs	r2, BASEPRI
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	61fa      	str	r2, [r7, #28]
 80069ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <xQueueGenericSendFromISR+0xc2>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d12f      	bne.n	8006a62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a18:	f000 f912 	bl	8006c40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a24:	d112      	bne.n	8006a4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d016      	beq.n	8006a5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	3324      	adds	r3, #36	@ 0x24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fedc 	bl	80077f0 <xTaskRemoveFromEventList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e007      	b.n	8006a5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a50:	3301      	adds	r3, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	b25a      	sxtb	r2, r3
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a60:	e001      	b.n	8006a66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3740      	adds	r7, #64	@ 0x40
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	@ 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueReceive+0x32>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	623b      	str	r3, [r7, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <xQueueReceive+0x40>
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <xQueueReceive+0x44>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <xQueueReceive+0x46>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <xQueueReceive+0x62>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	61fb      	str	r3, [r7, #28]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ade:	f001 f86f 	bl	8007bc0 <xTaskGetSchedulerState>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <xQueueReceive+0x72>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueReceive+0x76>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueReceive+0x78>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <xQueueReceive+0x94>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b10:	f001 fdc2 	bl	8008698 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01f      	beq.n	8006b60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b24:	f000 f8f6 	bl	8006d14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	1e5a      	subs	r2, r3, #1
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00f      	beq.n	8006b58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fe57 	bl	80077f0 <xTaskRemoveFromEventList>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b48:	4b3c      	ldr	r3, [pc, #240]	@ (8006c3c <xQueueReceive+0x1c0>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b58:	f001 fdd0 	bl	80086fc <vPortExitCritical>
				return pdPASS;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e069      	b.n	8006c34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b66:	f001 fdc9 	bl	80086fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e062      	b.n	8006c34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b74:	f107 0310 	add.w	r3, r7, #16
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fec5 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b82:	f001 fdbb 	bl	80086fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b86:	f000 fc0d 	bl	80073a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b8a:	f001 fd85 	bl	8008698 <vPortEnterCritical>
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	d103      	bne.n	8006ba4 <xQueueReceive+0x128>
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006baa:	b25b      	sxtb	r3, r3
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bb0:	d103      	bne.n	8006bba <xQueueReceive+0x13e>
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bba:	f001 fd9f 	bl	80086fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bbe:	1d3a      	adds	r2, r7, #4
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 feb4 	bl	8007934 <xTaskCheckForTimeOut>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d123      	bne.n	8006c1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bd4:	f000 f916 	bl	8006e04 <prvIsQueueEmpty>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d017      	beq.n	8006c0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	3324      	adds	r3, #36	@ 0x24
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fdb0 	bl	800774c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bee:	f000 f8b7 	bl	8006d60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bf2:	f000 fbe5 	bl	80073c0 <xTaskResumeAll>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d189      	bne.n	8006b10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c3c <xQueueReceive+0x1c0>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	e780      	b.n	8006b10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c10:	f000 f8a6 	bl	8006d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c14:	f000 fbd4 	bl	80073c0 <xTaskResumeAll>
 8006c18:	e77a      	b.n	8006b10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c1c:	f000 f8a0 	bl	8006d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c20:	f000 fbce 	bl	80073c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c26:	f000 f8ed 	bl	8006e04 <prvIsQueueEmpty>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f43f af6f 	beq.w	8006b10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3730      	adds	r7, #48	@ 0x30
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10d      	bne.n	8006c7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d14d      	bne.n	8006d02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 ffc6 	bl	8007bfc <xTaskPriorityDisinherit>
 8006c70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	e043      	b.n	8006d02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d119      	bne.n	8006cb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6858      	ldr	r0, [r3, #4]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	f00b faab 	bl	80121e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d32b      	bcc.n	8006d02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	e026      	b.n	8006d02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68d8      	ldr	r0, [r3, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	f00b fa91 	bl	80121e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	425b      	negs	r3, r3
 8006cce:	441a      	add	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d207      	bcs.n	8006cf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce8:	425b      	negs	r3, r3
 8006cea:	441a      	add	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d105      	bne.n	8006d02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d0a:	697b      	ldr	r3, [r7, #20]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	441a      	add	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d303      	bcc.n	8006d48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68d9      	ldr	r1, [r3, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d50:	461a      	mov	r2, r3
 8006d52:	6838      	ldr	r0, [r7, #0]
 8006d54:	f00b fa47 	bl	80121e6 <memcpy>
	}
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d68:	f001 fc96 	bl	8008698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d74:	e011      	b.n	8006d9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d012      	beq.n	8006da4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3324      	adds	r3, #36	@ 0x24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fd34 	bl	80077f0 <xTaskRemoveFromEventList>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d8e:	f000 fe35 	bl	80079fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dce9      	bgt.n	8006d76 <prvUnlockQueue+0x16>
 8006da2:	e000      	b.n	8006da6 <prvUnlockQueue+0x46>
					break;
 8006da4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	22ff      	movs	r2, #255	@ 0xff
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006dae:	f001 fca5 	bl	80086fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006db2:	f001 fc71 	bl	8008698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dbe:	e011      	b.n	8006de4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3310      	adds	r3, #16
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fd0f 	bl	80077f0 <xTaskRemoveFromEventList>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dd8:	f000 fe10 	bl	80079fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dce9      	bgt.n	8006dc0 <prvUnlockQueue+0x60>
 8006dec:	e000      	b.n	8006df0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	22ff      	movs	r2, #255	@ 0xff
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006df8:	f001 fc80 	bl	80086fc <vPortExitCritical>
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e0c:	f001 fc44 	bl	8008698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	e001      	b.n	8006e22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e22:	f001 fc6b 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006e26:	68fb      	ldr	r3, [r7, #12]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e38:	f001 fc2e 	bl	8008698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d102      	bne.n	8006e4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e001      	b.n	8006e52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e52:	f001 fc53 	bl	80086fc <vPortExitCritical>

	return xReturn;
 8006e56:	68fb      	ldr	r3, [r7, #12]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	e014      	b.n	8006e9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e70:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb0 <vQueueAddToRegistry+0x50>)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e7c:	490c      	ldr	r1, [pc, #48]	@ (8006eb0 <vQueueAddToRegistry+0x50>)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <vQueueAddToRegistry+0x50>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e92:	e006      	b.n	8006ea2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	d9e7      	bls.n	8006e70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20004ee4 	.word	0x20004ee4

08006eb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ec4:	f001 fbe8 	bl	8008698 <vPortEnterCritical>
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ed4:	d103      	bne.n	8006ede <vQueueWaitForMessageRestricted+0x2a>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ee4:	b25b      	sxtb	r3, r3
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eea:	d103      	bne.n	8006ef4 <vQueueWaitForMessageRestricted+0x40>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef4:	f001 fc02 	bl	80086fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	3324      	adds	r3, #36	@ 0x24
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fc45 	bl	8007798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f0e:	6978      	ldr	r0, [r7, #20]
 8006f10:	f7ff ff26 	bl	8006d60 <prvUnlockQueue>
	}
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08e      	sub	sp, #56	@ 0x38
 8006f20:	af04      	add	r7, sp, #16
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10b      	bne.n	8006f48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	623b      	str	r3, [r7, #32]
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	61fb      	str	r3, [r7, #28]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f66:	235c      	movs	r3, #92	@ 0x5c
 8006f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f6e:	d00b      	beq.n	8006f88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	61bb      	str	r3, [r7, #24]
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <xTaskCreateStatic+0xb2>
 8006f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01b      	beq.n	8006fce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9303      	str	r3, [sp, #12]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	9302      	str	r3, [sp, #8]
 8006fb0:	f107 0314 	add.w	r3, r7, #20
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f850 	bl	8007066 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fc8:	f000 f8de 	bl	8007188 <prvAddNewTaskToReadyList>
 8006fcc:	e001      	b.n	8006fd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fd2:	697b      	ldr	r3, [r7, #20]
	}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3728      	adds	r7, #40	@ 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	@ 0x30
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fc73 	bl	80088dc <pvPortMalloc>
 8006ff6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00e      	beq.n	800701c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ffe:	205c      	movs	r0, #92	@ 0x5c
 8007000:	f001 fc6c 	bl	80088dc <pvPortMalloc>
 8007004:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	631a      	str	r2, [r3, #48]	@ 0x30
 8007012:	e005      	b.n	8007020 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007014:	6978      	ldr	r0, [r7, #20]
 8007016:	f001 fd2f 	bl	8008a78 <vPortFree>
 800701a:	e001      	b.n	8007020 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d017      	beq.n	8007056 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	2300      	movs	r3, #0
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	9302      	str	r3, [sp, #8]
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f80e 	bl	8007066 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800704a:	69f8      	ldr	r0, [r7, #28]
 800704c:	f000 f89c 	bl	8007188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007050:	2301      	movs	r3, #1
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e002      	b.n	800705c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800705a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800705c:	69bb      	ldr	r3, [r7, #24]
	}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b088      	sub	sp, #32
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	461a      	mov	r2, r3
 800707e:	21a5      	movs	r1, #165	@ 0xa5
 8007080:	f00a ffe8 	bl	8012054 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800708e:	3b01      	subs	r3, #1
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	617b      	str	r3, [r7, #20]
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01f      	beq.n	8007106 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e012      	b.n	80070f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	7819      	ldrb	r1, [r3, #0]
 80070d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	3334      	adds	r3, #52	@ 0x34
 80070dc:	460a      	mov	r2, r1
 80070de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d006      	beq.n	80070fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d9e9      	bls.n	80070cc <prvInitialiseNewTask+0x66>
 80070f8:	e000      	b.n	80070fc <prvInitialiseNewTask+0x96>
			{
				break;
 80070fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007104:	e003      	b.n	800710e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	2b37      	cmp	r3, #55	@ 0x37
 8007112:	d901      	bls.n	8007118 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007114:	2337      	movs	r3, #55	@ 0x37
 8007116:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800711c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007122:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	2200      	movs	r2, #0
 8007128:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff f966 	bl	8006400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	3318      	adds	r3, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff f961 	bl	8006400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007146:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007152:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	68f9      	ldr	r1, [r7, #12]
 8007166:	69b8      	ldr	r0, [r7, #24]
 8007168:	f001 f966 	bl	8008438 <pxPortInitialiseStack>
 800716c:	4602      	mov	r2, r0
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800717e:	bf00      	nop
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007190:	f001 fa82 	bl	8008698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007194:	4b2d      	ldr	r3, [pc, #180]	@ (800724c <prvAddNewTaskToReadyList+0xc4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	4a2c      	ldr	r2, [pc, #176]	@ (800724c <prvAddNewTaskToReadyList+0xc4>)
 800719c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800719e:	4b2c      	ldr	r3, [pc, #176]	@ (8007250 <prvAddNewTaskToReadyList+0xc8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007250 <prvAddNewTaskToReadyList+0xc8>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071ac:	4b27      	ldr	r3, [pc, #156]	@ (800724c <prvAddNewTaskToReadyList+0xc4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d110      	bne.n	80071d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071b4:	f000 fc46 	bl	8007a44 <prvInitialiseTaskLists>
 80071b8:	e00d      	b.n	80071d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071ba:	4b26      	ldr	r3, [pc, #152]	@ (8007254 <prvAddNewTaskToReadyList+0xcc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071c2:	4b23      	ldr	r3, [pc, #140]	@ (8007250 <prvAddNewTaskToReadyList+0xc8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d802      	bhi.n	80071d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007250 <prvAddNewTaskToReadyList+0xc8>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071d6:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <prvAddNewTaskToReadyList+0xd0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007258 <prvAddNewTaskToReadyList+0xd0>)
 80071de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <prvAddNewTaskToReadyList+0xd0>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ec:	4b1b      	ldr	r3, [pc, #108]	@ (800725c <prvAddNewTaskToReadyList+0xd4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d903      	bls.n	80071fc <prvAddNewTaskToReadyList+0x74>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	4a18      	ldr	r2, [pc, #96]	@ (800725c <prvAddNewTaskToReadyList+0xd4>)
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4a15      	ldr	r2, [pc, #84]	@ (8007260 <prvAddNewTaskToReadyList+0xd8>)
 800720a:	441a      	add	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7ff f901 	bl	800641a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007218:	f001 fa70 	bl	80086fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800721c:	4b0d      	ldr	r3, [pc, #52]	@ (8007254 <prvAddNewTaskToReadyList+0xcc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00e      	beq.n	8007242 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007224:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <prvAddNewTaskToReadyList+0xc8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	429a      	cmp	r2, r3
 8007230:	d207      	bcs.n	8007242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007232:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <prvAddNewTaskToReadyList+0xdc>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200053f8 	.word	0x200053f8
 8007250:	20004f24 	.word	0x20004f24
 8007254:	20005404 	.word	0x20005404
 8007258:	20005414 	.word	0x20005414
 800725c:	20005400 	.word	0x20005400
 8007260:	20004f28 	.word	0x20004f28
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800727a:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <vTaskDelay+0x64>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <vTaskDelay+0x32>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60bb      	str	r3, [r7, #8]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800729a:	f000 f883 	bl	80073a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800729e:	2100      	movs	r1, #0
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fd1b 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072a6:	f000 f88b 	bl	80073c0 <xTaskResumeAll>
 80072aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072b2:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <vTaskDelay+0x68>)
 80072b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20005420 	.word	0x20005420
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	@ 0x28
 80072d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072e2:	463a      	mov	r2, r7
 80072e4:	1d39      	adds	r1, r7, #4
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff f834 	bl	8006358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	9202      	str	r2, [sp, #8]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	460a      	mov	r2, r1
 8007302:	4922      	ldr	r1, [pc, #136]	@ (800738c <vTaskStartScheduler+0xb8>)
 8007304:	4822      	ldr	r0, [pc, #136]	@ (8007390 <vTaskStartScheduler+0xbc>)
 8007306:	f7ff fe09 	bl	8006f1c <xTaskCreateStatic>
 800730a:	4603      	mov	r3, r0
 800730c:	4a21      	ldr	r2, [pc, #132]	@ (8007394 <vTaskStartScheduler+0xc0>)
 800730e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007310:	4b20      	ldr	r3, [pc, #128]	@ (8007394 <vTaskStartScheduler+0xc0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e001      	b.n	8007322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007328:	f000 fd2c 	bl	8007d84 <xTimerCreateTimerTask>
 800732c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d116      	bne.n	8007362 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	613b      	str	r3, [r7, #16]
}
 8007346:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007348:	4b13      	ldr	r3, [pc, #76]	@ (8007398 <vTaskStartScheduler+0xc4>)
 800734a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800734e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007350:	4b12      	ldr	r3, [pc, #72]	@ (800739c <vTaskStartScheduler+0xc8>)
 8007352:	2201      	movs	r2, #1
 8007354:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007356:	4b12      	ldr	r3, [pc, #72]	@ (80073a0 <vTaskStartScheduler+0xcc>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800735c:	f001 f8f8 	bl	8008550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007360:	e00f      	b.n	8007382 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007368:	d10b      	bne.n	8007382 <vTaskStartScheduler+0xae>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	60fb      	str	r3, [r7, #12]
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	e7fd      	b.n	800737e <vTaskStartScheduler+0xaa>
}
 8007382:	bf00      	nop
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	08013000 	.word	0x08013000
 8007390:	08007a15 	.word	0x08007a15
 8007394:	2000541c 	.word	0x2000541c
 8007398:	20005418 	.word	0x20005418
 800739c:	20005404 	.word	0x20005404
 80073a0:	200053fc 	.word	0x200053fc

080073a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073a8:	4b04      	ldr	r3, [pc, #16]	@ (80073bc <vTaskSuspendAll+0x18>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	4a03      	ldr	r2, [pc, #12]	@ (80073bc <vTaskSuspendAll+0x18>)
 80073b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073b2:	bf00      	nop
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20005420 	.word	0x20005420

080073c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ce:	4b42      	ldr	r3, [pc, #264]	@ (80074d8 <xTaskResumeAll+0x118>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <xTaskResumeAll+0x2e>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	603b      	str	r3, [r7, #0]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ee:	f001 f953 	bl	8008698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073f2:	4b39      	ldr	r3, [pc, #228]	@ (80074d8 <xTaskResumeAll+0x118>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	4a37      	ldr	r2, [pc, #220]	@ (80074d8 <xTaskResumeAll+0x118>)
 80073fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073fc:	4b36      	ldr	r3, [pc, #216]	@ (80074d8 <xTaskResumeAll+0x118>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d162      	bne.n	80074ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007404:	4b35      	ldr	r3, [pc, #212]	@ (80074dc <xTaskResumeAll+0x11c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05e      	beq.n	80074ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800740c:	e02f      	b.n	800746e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740e:	4b34      	ldr	r3, [pc, #208]	@ (80074e0 <xTaskResumeAll+0x120>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3318      	adds	r3, #24
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff f85a 	bl	80064d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3304      	adds	r3, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff f855 	bl	80064d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742e:	4b2d      	ldr	r3, [pc, #180]	@ (80074e4 <xTaskResumeAll+0x124>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d903      	bls.n	800743e <xTaskResumeAll+0x7e>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	4a2a      	ldr	r2, [pc, #168]	@ (80074e4 <xTaskResumeAll+0x124>)
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a27      	ldr	r2, [pc, #156]	@ (80074e8 <xTaskResumeAll+0x128>)
 800744c:	441a      	add	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7fe ffe0 	bl	800641a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745e:	4b23      	ldr	r3, [pc, #140]	@ (80074ec <xTaskResumeAll+0x12c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007468:	4b21      	ldr	r3, [pc, #132]	@ (80074f0 <xTaskResumeAll+0x130>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800746e:	4b1c      	ldr	r3, [pc, #112]	@ (80074e0 <xTaskResumeAll+0x120>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1cb      	bne.n	800740e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800747c:	f000 fb80 	bl	8007b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007480:	4b1c      	ldr	r3, [pc, #112]	@ (80074f4 <xTaskResumeAll+0x134>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d010      	beq.n	80074ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800748c:	f000 f846 	bl	800751c <xTaskIncrementTick>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007496:	4b16      	ldr	r3, [pc, #88]	@ (80074f0 <xTaskResumeAll+0x130>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3b01      	subs	r3, #1
 80074a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f1      	bne.n	800748c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80074a8:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <xTaskResumeAll+0x134>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074ae:	4b10      	ldr	r3, [pc, #64]	@ (80074f0 <xTaskResumeAll+0x130>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074ba:	4b0f      	ldr	r3, [pc, #60]	@ (80074f8 <xTaskResumeAll+0x138>)
 80074bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074ca:	f001 f917 	bl	80086fc <vPortExitCritical>

	return xAlreadyYielded;
 80074ce:	68bb      	ldr	r3, [r7, #8]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20005420 	.word	0x20005420
 80074dc:	200053f8 	.word	0x200053f8
 80074e0:	200053b8 	.word	0x200053b8
 80074e4:	20005400 	.word	0x20005400
 80074e8:	20004f28 	.word	0x20004f28
 80074ec:	20004f24 	.word	0x20004f24
 80074f0:	2000540c 	.word	0x2000540c
 80074f4:	20005408 	.word	0x20005408
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007502:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <xTaskGetTickCount+0x1c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007508:	687b      	ldr	r3, [r7, #4]
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	200053fc 	.word	0x200053fc

0800751c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007526:	4b4f      	ldr	r3, [pc, #316]	@ (8007664 <xTaskIncrementTick+0x148>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 8090 	bne.w	8007650 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007530:	4b4d      	ldr	r3, [pc, #308]	@ (8007668 <xTaskIncrementTick+0x14c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007538:	4a4b      	ldr	r2, [pc, #300]	@ (8007668 <xTaskIncrementTick+0x14c>)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d121      	bne.n	8007588 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007544:	4b49      	ldr	r3, [pc, #292]	@ (800766c <xTaskIncrementTick+0x150>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <xTaskIncrementTick+0x4a>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	603b      	str	r3, [r7, #0]
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	e7fd      	b.n	8007562 <xTaskIncrementTick+0x46>
 8007566:	4b41      	ldr	r3, [pc, #260]	@ (800766c <xTaskIncrementTick+0x150>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	4b40      	ldr	r3, [pc, #256]	@ (8007670 <xTaskIncrementTick+0x154>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a3e      	ldr	r2, [pc, #248]	@ (800766c <xTaskIncrementTick+0x150>)
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4a3e      	ldr	r2, [pc, #248]	@ (8007670 <xTaskIncrementTick+0x154>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	4b3e      	ldr	r3, [pc, #248]	@ (8007674 <xTaskIncrementTick+0x158>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	4a3c      	ldr	r2, [pc, #240]	@ (8007674 <xTaskIncrementTick+0x158>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	f000 fafc 	bl	8007b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007588:	4b3b      	ldr	r3, [pc, #236]	@ (8007678 <xTaskIncrementTick+0x15c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	429a      	cmp	r2, r3
 8007590:	d349      	bcc.n	8007626 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007592:	4b36      	ldr	r3, [pc, #216]	@ (800766c <xTaskIncrementTick+0x150>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800759c:	4b36      	ldr	r3, [pc, #216]	@ (8007678 <xTaskIncrementTick+0x15c>)
 800759e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075a2:	601a      	str	r2, [r3, #0]
					break;
 80075a4:	e03f      	b.n	8007626 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b31      	ldr	r3, [pc, #196]	@ (800766c <xTaskIncrementTick+0x150>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d203      	bcs.n	80075c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075be:	4a2e      	ldr	r2, [pc, #184]	@ (8007678 <xTaskIncrementTick+0x15c>)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075c4:	e02f      	b.n	8007626 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe ff82 	bl	80064d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3318      	adds	r3, #24
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe ff79 	bl	80064d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e6:	4b25      	ldr	r3, [pc, #148]	@ (800767c <xTaskIncrementTick+0x160>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d903      	bls.n	80075f6 <xTaskIncrementTick+0xda>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	4a22      	ldr	r2, [pc, #136]	@ (800767c <xTaskIncrementTick+0x160>)
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4a1f      	ldr	r2, [pc, #124]	@ (8007680 <xTaskIncrementTick+0x164>)
 8007604:	441a      	add	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fe ff04 	bl	800641a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007616:	4b1b      	ldr	r3, [pc, #108]	@ (8007684 <xTaskIncrementTick+0x168>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761c:	429a      	cmp	r2, r3
 800761e:	d3b8      	bcc.n	8007592 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007624:	e7b5      	b.n	8007592 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007626:	4b17      	ldr	r3, [pc, #92]	@ (8007684 <xTaskIncrementTick+0x168>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762c:	4914      	ldr	r1, [pc, #80]	@ (8007680 <xTaskIncrementTick+0x164>)
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d901      	bls.n	8007642 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800763e:	2301      	movs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007642:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <xTaskIncrementTick+0x16c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800764a:	2301      	movs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e004      	b.n	800765a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <xTaskIncrementTick+0x170>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	4a0d      	ldr	r2, [pc, #52]	@ (800768c <xTaskIncrementTick+0x170>)
 8007658:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800765a:	697b      	ldr	r3, [r7, #20]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20005420 	.word	0x20005420
 8007668:	200053fc 	.word	0x200053fc
 800766c:	200053b0 	.word	0x200053b0
 8007670:	200053b4 	.word	0x200053b4
 8007674:	20005410 	.word	0x20005410
 8007678:	20005418 	.word	0x20005418
 800767c:	20005400 	.word	0x20005400
 8007680:	20004f28 	.word	0x20004f28
 8007684:	20004f24 	.word	0x20004f24
 8007688:	2000540c 	.word	0x2000540c
 800768c:	20005408 	.word	0x20005408

08007690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007696:	4b28      	ldr	r3, [pc, #160]	@ (8007738 <vTaskSwitchContext+0xa8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800769e:	4b27      	ldr	r3, [pc, #156]	@ (800773c <vTaskSwitchContext+0xac>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076a4:	e042      	b.n	800772c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80076a6:	4b25      	ldr	r3, [pc, #148]	@ (800773c <vTaskSwitchContext+0xac>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ac:	4b24      	ldr	r3, [pc, #144]	@ (8007740 <vTaskSwitchContext+0xb0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e011      	b.n	80076d8 <vTaskSwitchContext+0x48>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	607b      	str	r3, [r7, #4]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vTaskSwitchContext+0x3e>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	491a      	ldr	r1, [pc, #104]	@ (8007744 <vTaskSwitchContext+0xb4>)
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0e3      	beq.n	80076b4 <vTaskSwitchContext+0x24>
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4a13      	ldr	r2, [pc, #76]	@ (8007744 <vTaskSwitchContext+0xb4>)
 80076f8:	4413      	add	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3308      	adds	r3, #8
 800770e:	429a      	cmp	r2, r3
 8007710:	d104      	bne.n	800771c <vTaskSwitchContext+0x8c>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	605a      	str	r2, [r3, #4]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4a09      	ldr	r2, [pc, #36]	@ (8007748 <vTaskSwitchContext+0xb8>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a06      	ldr	r2, [pc, #24]	@ (8007740 <vTaskSwitchContext+0xb0>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]
}
 800772c:	bf00      	nop
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20005420 	.word	0x20005420
 800773c:	2000540c 	.word	0x2000540c
 8007740:	20005400 	.word	0x20005400
 8007744:	20004f28 	.word	0x20004f28
 8007748:	20004f24 	.word	0x20004f24

0800774c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007774:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <vTaskPlaceOnEventList+0x48>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3318      	adds	r3, #24
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fe fe70 	bl	8006462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007782:	2101      	movs	r1, #1
 8007784:	6838      	ldr	r0, [r7, #0]
 8007786:	f000 faa9 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20004f24 	.word	0x20004f24

08007798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	617b      	str	r3, [r7, #20]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c2:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <vTaskPlaceOnEventListRestricted+0x54>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3318      	adds	r3, #24
 80077c8:	4619      	mov	r1, r3
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7fe fe25 	bl	800641a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	68b8      	ldr	r0, [r7, #8]
 80077e0:	f000 fa7c 	bl	8007cdc <prvAddCurrentTaskToDelayedList>
	}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20004f24 	.word	0x20004f24

080077f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	60fb      	str	r3, [r7, #12]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3318      	adds	r3, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fe56 	bl	80064d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007828:	4b1d      	ldr	r3, [pc, #116]	@ (80078a0 <xTaskRemoveFromEventList+0xb0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11d      	bne.n	800786c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	3304      	adds	r3, #4
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fe4d 	bl	80064d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783e:	4b19      	ldr	r3, [pc, #100]	@ (80078a4 <xTaskRemoveFromEventList+0xb4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d903      	bls.n	800784e <xTaskRemoveFromEventList+0x5e>
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4a16      	ldr	r2, [pc, #88]	@ (80078a4 <xTaskRemoveFromEventList+0xb4>)
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a13      	ldr	r2, [pc, #76]	@ (80078a8 <xTaskRemoveFromEventList+0xb8>)
 800785c:	441a      	add	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3304      	adds	r3, #4
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fe fdd8 	bl	800641a <vListInsertEnd>
 800786a:	e005      	b.n	8007878 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3318      	adds	r3, #24
 8007870:	4619      	mov	r1, r3
 8007872:	480e      	ldr	r0, [pc, #56]	@ (80078ac <xTaskRemoveFromEventList+0xbc>)
 8007874:	f7fe fdd1 	bl	800641a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787c:	4b0c      	ldr	r3, [pc, #48]	@ (80078b0 <xTaskRemoveFromEventList+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	429a      	cmp	r2, r3
 8007884:	d905      	bls.n	8007892 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800788a:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <xTaskRemoveFromEventList+0xc4>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e001      	b.n	8007896 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007896:	697b      	ldr	r3, [r7, #20]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20005420 	.word	0x20005420
 80078a4:	20005400 	.word	0x20005400
 80078a8:	20004f28 	.word	0x20004f28
 80078ac:	200053b8 	.word	0x200053b8
 80078b0:	20004f24 	.word	0x20004f24
 80078b4:	2000540c 	.word	0x2000540c

080078b8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <vTaskSetTimeOutState+0x26>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60fb      	str	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	e7fd      	b.n	80078da <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80078de:	f000 fedb 	bl	8008698 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078e2:	4b07      	ldr	r3, [pc, #28]	@ (8007900 <vTaskSetTimeOutState+0x48>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80078ea:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <vTaskSetTimeOutState+0x4c>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80078f2:	f000 ff03 	bl	80086fc <vPortExitCritical>
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20005410 	.word	0x20005410
 8007904:	200053fc 	.word	0x200053fc

08007908 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <vTaskInternalSetTimeOutState+0x24>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007918:	4b05      	ldr	r3, [pc, #20]	@ (8007930 <vTaskInternalSetTimeOutState+0x28>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20005410 	.word	0x20005410
 8007930:	200053fc 	.word	0x200053fc

08007934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	613b      	str	r3, [r7, #16]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60fb      	str	r3, [r7, #12]
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800797a:	f000 fe8d 	bl	8008698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800797e:	4b1d      	ldr	r3, [pc, #116]	@ (80079f4 <xTaskCheckForTimeOut+0xc0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007996:	d102      	bne.n	800799e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e023      	b.n	80079e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b15      	ldr	r3, [pc, #84]	@ (80079f8 <xTaskCheckForTimeOut+0xc4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d007      	beq.n	80079ba <xTaskCheckForTimeOut+0x86>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d302      	bcc.n	80079ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e015      	b.n	80079e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d20b      	bcs.n	80079dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff99 	bl	8007908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	e004      	b.n	80079e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079e6:	f000 fe89 	bl	80086fc <vPortExitCritical>

	return xReturn;
 80079ea:	69fb      	ldr	r3, [r7, #28]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	200053fc 	.word	0x200053fc
 80079f8:	20005410 	.word	0x20005410

080079fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a00:	4b03      	ldr	r3, [pc, #12]	@ (8007a10 <vTaskMissedYield+0x14>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	2000540c 	.word	0x2000540c

08007a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a1c:	f000 f852 	bl	8007ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a20:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <prvIdleTask+0x28>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d9f9      	bls.n	8007a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <prvIdleTask+0x2c>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a38:	e7f0      	b.n	8007a1c <prvIdleTask+0x8>
 8007a3a:	bf00      	nop
 8007a3c:	20004f28 	.word	0x20004f28
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
 8007a4e:	e00c      	b.n	8007a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a12      	ldr	r2, [pc, #72]	@ (8007aa4 <prvInitialiseTaskLists+0x60>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fcae 	bl	80063c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3301      	adds	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b37      	cmp	r3, #55	@ 0x37
 8007a6e:	d9ef      	bls.n	8007a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a70:	480d      	ldr	r0, [pc, #52]	@ (8007aa8 <prvInitialiseTaskLists+0x64>)
 8007a72:	f7fe fca5 	bl	80063c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a76:	480d      	ldr	r0, [pc, #52]	@ (8007aac <prvInitialiseTaskLists+0x68>)
 8007a78:	f7fe fca2 	bl	80063c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a7c:	480c      	ldr	r0, [pc, #48]	@ (8007ab0 <prvInitialiseTaskLists+0x6c>)
 8007a7e:	f7fe fc9f 	bl	80063c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a82:	480c      	ldr	r0, [pc, #48]	@ (8007ab4 <prvInitialiseTaskLists+0x70>)
 8007a84:	f7fe fc9c 	bl	80063c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a88:	480b      	ldr	r0, [pc, #44]	@ (8007ab8 <prvInitialiseTaskLists+0x74>)
 8007a8a:	f7fe fc99 	bl	80063c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <prvInitialiseTaskLists+0x78>)
 8007a90:	4a05      	ldr	r2, [pc, #20]	@ (8007aa8 <prvInitialiseTaskLists+0x64>)
 8007a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <prvInitialiseTaskLists+0x7c>)
 8007a96:	4a05      	ldr	r2, [pc, #20]	@ (8007aac <prvInitialiseTaskLists+0x68>)
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20004f28 	.word	0x20004f28
 8007aa8:	20005388 	.word	0x20005388
 8007aac:	2000539c 	.word	0x2000539c
 8007ab0:	200053b8 	.word	0x200053b8
 8007ab4:	200053cc 	.word	0x200053cc
 8007ab8:	200053e4 	.word	0x200053e4
 8007abc:	200053b0 	.word	0x200053b0
 8007ac0:	200053b4 	.word	0x200053b4

08007ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aca:	e019      	b.n	8007b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007acc:	f000 fde4 	bl	8008698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad0:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <prvCheckTasksWaitingTermination+0x50>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fe fcf9 	bl	80064d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <prvCheckTasksWaitingTermination+0x54>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8007b18 <prvCheckTasksWaitingTermination+0x54>)
 8007aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aec:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <prvCheckTasksWaitingTermination+0x58>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	4a0a      	ldr	r2, [pc, #40]	@ (8007b1c <prvCheckTasksWaitingTermination+0x58>)
 8007af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007af6:	f000 fe01 	bl	80086fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f810 	bl	8007b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b00:	4b06      	ldr	r3, [pc, #24]	@ (8007b1c <prvCheckTasksWaitingTermination+0x58>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e1      	bne.n	8007acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	200053cc 	.word	0x200053cc
 8007b18:	200053f8 	.word	0x200053f8
 8007b1c:	200053e0 	.word	0x200053e0

08007b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d108      	bne.n	8007b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 ff9e 	bl	8008a78 <vPortFree>
				vPortFree( pxTCB );
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ff9b 	bl	8008a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b42:	e019      	b.n	8007b78 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d103      	bne.n	8007b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 ff92 	bl	8008a78 <vPortFree>
	}
 8007b54:	e010      	b.n	8007b78 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d00b      	beq.n	8007b78 <prvDeleteTCB+0x58>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <prvDeleteTCB+0x54>
	}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b86:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <prvResetNextTaskUnblockTime+0x38>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b90:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <prvResetNextTaskUnblockTime+0x3c>)
 8007b92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b98:	e008      	b.n	8007bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <prvResetNextTaskUnblockTime+0x38>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a04      	ldr	r2, [pc, #16]	@ (8007bbc <prvResetNextTaskUnblockTime+0x3c>)
 8007baa:	6013      	str	r3, [r2, #0]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	200053b0 	.word	0x200053b0
 8007bbc:	20005418 	.word	0x20005418

08007bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <xTaskGetSchedulerState+0x34>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	e008      	b.n	8007be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd4:	4b08      	ldr	r3, [pc, #32]	@ (8007bf8 <xTaskGetSchedulerState+0x38>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e001      	b.n	8007be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007be6:	687b      	ldr	r3, [r7, #4]
	}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20005404 	.word	0x20005404
 8007bf8:	20005420 	.word	0x20005420

08007bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d058      	beq.n	8007cc4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c12:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd0 <xTaskPriorityDisinherit+0xd4>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d00b      	beq.n	8007c34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60fb      	str	r3, [r7, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10b      	bne.n	8007c54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60bb      	str	r3, [r7, #8]
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	e7fd      	b.n	8007c50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c58:	1e5a      	subs	r2, r3, #1
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d02c      	beq.n	8007cc4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d128      	bne.n	8007cc4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fc2c 	bl	80064d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c94:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <xTaskPriorityDisinherit+0xd8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d903      	bls.n	8007ca4 <xTaskPriorityDisinherit+0xa8>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd4 <xTaskPriorityDisinherit+0xd8>)
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a09      	ldr	r2, [pc, #36]	@ (8007cd8 <xTaskPriorityDisinherit+0xdc>)
 8007cb2:	441a      	add	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7fe fbad 	bl	800641a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cc4:	697b      	ldr	r3, [r7, #20]
	}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20004f24 	.word	0x20004f24
 8007cd4:	20005400 	.word	0x20005400
 8007cd8:	20004f28 	.word	0x20004f28

08007cdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ce6:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cec:	4b20      	ldr	r3, [pc, #128]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fbee 	bl	80064d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cfe:	d10a      	bne.n	8007d16 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d06:	4b1a      	ldr	r3, [pc, #104]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4819      	ldr	r0, [pc, #100]	@ (8007d74 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d10:	f7fe fb83 	bl	800641a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d14:	e026      	b.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d1e:	4b14      	ldr	r3, [pc, #80]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d209      	bcs.n	8007d42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2e:	4b12      	ldr	r3, [pc, #72]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b0f      	ldr	r3, [pc, #60]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fe fb91 	bl	8006462 <vListInsert>
}
 8007d40:	e010      	b.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d42:	4b0e      	ldr	r3, [pc, #56]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4b0a      	ldr	r3, [pc, #40]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fb87 	bl	8006462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d54:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d202      	bcs.n	8007d64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d5e:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	200053fc 	.word	0x200053fc
 8007d70:	20004f24 	.word	0x20004f24
 8007d74:	200053e4 	.word	0x200053e4
 8007d78:	200053b4 	.word	0x200053b4
 8007d7c:	200053b0 	.word	0x200053b0
 8007d80:	20005418 	.word	0x20005418

08007d84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	@ 0x28
 8007d88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d8e:	f000 fb13 	bl	80083b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d92:	4b1d      	ldr	r3, [pc, #116]	@ (8007e08 <xTimerCreateTimerTask+0x84>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d021      	beq.n	8007dde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007da2:	1d3a      	adds	r2, r7, #4
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	f107 030c 	add.w	r3, r7, #12
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe faed 	bl	800638c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	9202      	str	r2, [sp, #8]
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	4911      	ldr	r1, [pc, #68]	@ (8007e0c <xTimerCreateTimerTask+0x88>)
 8007dc6:	4812      	ldr	r0, [pc, #72]	@ (8007e10 <xTimerCreateTimerTask+0x8c>)
 8007dc8:	f7ff f8a8 	bl	8006f1c <xTaskCreateStatic>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	4a11      	ldr	r2, [pc, #68]	@ (8007e14 <xTimerCreateTimerTask+0x90>)
 8007dd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <xTimerCreateTimerTask+0x90>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	613b      	str	r3, [r7, #16]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dfc:	697b      	ldr	r3, [r7, #20]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20005454 	.word	0x20005454
 8007e0c:	08013008 	.word	0x08013008
 8007e10:	08007f51 	.word	0x08007f51
 8007e14:	20005458 	.word	0x20005458

08007e18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	623b      	str	r3, [r7, #32]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02a      	beq.n	8007ea6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	dc18      	bgt.n	8007e94 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e62:	f7ff fead 	bl	8007bc0 <xTaskGetSchedulerState>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d109      	bne.n	8007e80 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e6c:	4b10      	ldr	r3, [pc, #64]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	f107 0110 	add.w	r1, r7, #16
 8007e74:	2300      	movs	r3, #0
 8007e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e78:	f7fe fc60 	bl	800673c <xQueueGenericSend>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e7e:	e012      	b.n	8007ea6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e80:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	f107 0110 	add.w	r1, r7, #16
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7fe fc56 	bl	800673c <xQueueGenericSend>
 8007e90:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e92:	e008      	b.n	8007ea6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <xTimerGenericCommand+0x98>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	f107 0110 	add.w	r1, r7, #16
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	f7fe fd4e 	bl	8006940 <xQueueGenericSendFromISR>
 8007ea4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20005454 	.word	0x20005454

08007eb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebe:	4b23      	ldr	r3, [pc, #140]	@ (8007f4c <prvProcessExpiredTimer+0x98>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fb01 	bl	80064d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d023      	beq.n	8007f28 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	18d1      	adds	r1, r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	6978      	ldr	r0, [r7, #20]
 8007eee:	f000 f8d5 	bl	800809c <prvInsertTimerInActiveList>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d020      	beq.n	8007f3a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2300      	movs	r3, #0
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	2100      	movs	r1, #0
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f7ff ff88 	bl	8007e18 <xTimerGenericCommand>
 8007f08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d114      	bne.n	8007f3a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	4798      	blx	r3
}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2000544c 	.word	0x2000544c

08007f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f859 	bl	8008014 <prvGetNextExpireTime>
 8007f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f805 	bl	8007f78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f6e:	f000 f8d7 	bl	8008120 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f72:	bf00      	nop
 8007f74:	e7f0      	b.n	8007f58 <prvTimerTask+0x8>
	...

08007f78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f82:	f7ff fa0f 	bl	80073a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f866 	bl	800805c <prvSampleTimeNow>
 8007f90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d130      	bne.n	8007ffa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d806      	bhi.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fa6:	f7ff fa0b 	bl	80073c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff81 	bl	8007eb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fb2:	e024      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fba:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <prvProcessTimerOrBlockTask+0x90>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <prvProcessTimerOrBlockTask+0x50>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <prvProcessTimerOrBlockTask+0x52>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800800c <prvProcessTimerOrBlockTask+0x94>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7fe ff6b 	bl	8006eb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fde:	f7ff f9ef 	bl	80073c0 <xTaskResumeAll>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fe8:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <prvProcessTimerOrBlockTask+0x98>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
}
 8007ff8:	e001      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ffa:	f7ff f9e1 	bl	80073c0 <xTaskResumeAll>
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20005450 	.word	0x20005450
 800800c:	20005454 	.word	0x20005454
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800801c:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <prvGetNextExpireTime+0x44>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <prvGetNextExpireTime+0x16>
 8008026:	2201      	movs	r2, #1
 8008028:	e000      	b.n	800802c <prvGetNextExpireTime+0x18>
 800802a:	2200      	movs	r2, #0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <prvGetNextExpireTime+0x44>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e001      	b.n	8008048 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	2000544c 	.word	0x2000544c

0800805c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008064:	f7ff fa4a 	bl	80074fc <xTaskGetTickCount>
 8008068:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800806a:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <prvSampleTimeNow+0x3c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	429a      	cmp	r2, r3
 8008072:	d205      	bcs.n	8008080 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008074:	f000 f93a 	bl	80082ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e002      	b.n	8008086 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008086:	4a04      	ldr	r2, [pc, #16]	@ (8008098 <prvSampleTimeNow+0x3c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	2000545c 	.word	0x2000545c

0800809c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d812      	bhi.n	80080e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e01b      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b10      	ldr	r3, [pc, #64]	@ (8008118 <prvInsertTimerInActiveList+0x7c>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fe f9be 	bl	8006462 <vListInsert>
 80080e6:	e012      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d206      	bcs.n	80080fe <prvInsertTimerInActiveList+0x62>
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e007      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fe:	4b07      	ldr	r3, [pc, #28]	@ (800811c <prvInsertTimerInActiveList+0x80>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe f9aa 	bl	8006462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800810e:	697b      	ldr	r3, [r7, #20]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20005450 	.word	0x20005450
 800811c:	2000544c 	.word	0x2000544c

08008120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	@ 0x38
 8008124:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008126:	e0ce      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da19      	bge.n	8008162 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	3304      	adds	r3, #4
 8008132:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	61fb      	str	r3, [r7, #28]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008158:	6850      	ldr	r0, [r2, #4]
 800815a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800815c:	6892      	ldr	r2, [r2, #8]
 800815e:	4611      	mov	r1, r2
 8008160:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f2c0 80ae 	blt.w	80082c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	3304      	adds	r3, #4
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe f9aa 	bl	80064d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008180:	463b      	mov	r3, r7
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff ff6a 	bl	800805c <prvSampleTimeNow>
 8008188:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b09      	cmp	r3, #9
 800818e:	f200 8097 	bhi.w	80082c0 <prvProcessReceivedCommands+0x1a0>
 8008192:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <prvProcessReceivedCommands+0x78>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	08008237 	.word	0x08008237
 80081a8:	0800824b 	.word	0x0800824b
 80081ac:	08008297 	.word	0x08008297
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c1 	.word	0x080081c1
 80081b8:	08008237 	.word	0x08008237
 80081bc:	0800824b 	.word	0x0800824b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e0:	f7ff ff5c 	bl	800809c <prvInsertTimerInActiveList>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06c      	beq.n	80082c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d061      	beq.n	80082c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	441a      	add	r2, r3
 8008208:	2300      	movs	r3, #0
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2300      	movs	r3, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008212:	f7ff fe01 	bl	8007e18 <xTimerGenericCommand>
 8008216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d152      	bne.n	80082c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	61bb      	str	r3, [r7, #24]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	b2da      	uxtb	r2, r3
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008248:	e03d      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008260:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	617b      	str	r3, [r7, #20]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	18d1      	adds	r1, r2, r3
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008290:	f7ff ff04 	bl	800809c <prvInsertTimerInActiveList>
					break;
 8008294:	e017      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80082a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a6:	f000 fbe7 	bl	8008a78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082aa:	e00c      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082be:	e002      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80082c0:	bf00      	nop
 80082c2:	e000      	b.n	80082c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80082c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082c6:	4b08      	ldr	r3, [pc, #32]	@ (80082e8 <prvProcessReceivedCommands+0x1c8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1d39      	adds	r1, r7, #4
 80082cc:	2200      	movs	r2, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fbd4 	bl	8006a7c <xQueueReceive>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f af26 	bne.w	8008128 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3730      	adds	r7, #48	@ 0x30
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20005454 	.word	0x20005454

080082ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082f2:	e049      	b.n	8008388 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082f4:	4b2e      	ldr	r3, [pc, #184]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fe:	4b2c      	ldr	r3, [pc, #176]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe f8e1 	bl	80064d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d02f      	beq.n	8008388 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4413      	add	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d90e      	bls.n	8008358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b1a      	ldr	r3, [pc, #104]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe f886 	bl	8006462 <vListInsert>
 8008356:	e017      	b.n	8008388 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008358:	2300      	movs	r3, #0
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2300      	movs	r3, #0
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	2100      	movs	r1, #0
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff fd58 	bl	8007e18 <xTimerGenericCommand>
 8008368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	603b      	str	r3, [r7, #0]
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008388:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1b0      	bne.n	80082f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008392:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008398:	4b06      	ldr	r3, [pc, #24]	@ (80083b4 <prvSwitchTimerLists+0xc8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a04      	ldr	r2, [pc, #16]	@ (80083b0 <prvSwitchTimerLists+0xc4>)
 800839e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083a0:	4a04      	ldr	r2, [pc, #16]	@ (80083b4 <prvSwitchTimerLists+0xc8>)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6013      	str	r3, [r2, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	2000544c 	.word	0x2000544c
 80083b4:	20005450 	.word	0x20005450

080083b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083be:	f000 f96b 	bl	8008698 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083c2:	4b15      	ldr	r3, [pc, #84]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d120      	bne.n	800840c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ca:	4814      	ldr	r0, [pc, #80]	@ (800841c <prvCheckForValidListAndQueue+0x64>)
 80083cc:	f7fd fff8 	bl	80063c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083d0:	4813      	ldr	r0, [pc, #76]	@ (8008420 <prvCheckForValidListAndQueue+0x68>)
 80083d2:	f7fd fff5 	bl	80063c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <prvCheckForValidListAndQueue+0x6c>)
 80083d8:	4a10      	ldr	r2, [pc, #64]	@ (800841c <prvCheckForValidListAndQueue+0x64>)
 80083da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083dc:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <prvCheckForValidListAndQueue+0x70>)
 80083de:	4a10      	ldr	r2, [pc, #64]	@ (8008420 <prvCheckForValidListAndQueue+0x68>)
 80083e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083e2:	2300      	movs	r3, #0
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4b11      	ldr	r3, [pc, #68]	@ (800842c <prvCheckForValidListAndQueue+0x74>)
 80083e8:	4a11      	ldr	r2, [pc, #68]	@ (8008430 <prvCheckForValidListAndQueue+0x78>)
 80083ea:	2110      	movs	r1, #16
 80083ec:	200a      	movs	r0, #10
 80083ee:	f7fe f905 	bl	80065fc <xQueueGenericCreateStatic>
 80083f2:	4603      	mov	r3, r0
 80083f4:	4a08      	ldr	r2, [pc, #32]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083f8:	4b07      	ldr	r3, [pc, #28]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <prvCheckForValidListAndQueue+0x60>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	490b      	ldr	r1, [pc, #44]	@ (8008434 <prvCheckForValidListAndQueue+0x7c>)
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fd2a 	bl	8006e60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800840c:	f000 f976 	bl	80086fc <vPortExitCritical>
}
 8008410:	bf00      	nop
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20005454 	.word	0x20005454
 800841c:	20005424 	.word	0x20005424
 8008420:	20005438 	.word	0x20005438
 8008424:	2000544c 	.word	0x2000544c
 8008428:	20005450 	.word	0x20005450
 800842c:	20005500 	.word	0x20005500
 8008430:	20005460 	.word	0x20005460
 8008434:	08013010 	.word	0x08013010

08008438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b04      	subs	r3, #4
 8008448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008468:	4a0c      	ldr	r2, [pc, #48]	@ (800849c <pxPortInitialiseStack+0x64>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b14      	subs	r3, #20
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3b04      	subs	r3, #4
 800847e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f06f 0202 	mvn.w	r2, #2
 8008486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3b20      	subs	r3, #32
 800848c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	080084a1 	.word	0x080084a1

080084a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084aa:	4b13      	ldr	r3, [pc, #76]	@ (80084f8 <prvTaskExitError+0x58>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084b2:	d00b      	beq.n	80084cc <prvTaskExitError+0x2c>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <prvTaskExitError+0x28>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60bb      	str	r3, [r7, #8]
}
 80084de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084e0:	bf00      	nop
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0fc      	beq.n	80084e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000014 	.word	0x20000014
 80084fc:	00000000 	.word	0x00000000

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst2>:
 8008520:	20004f24 	.word	0x20004f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	@ (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	bf00      	nop
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008556:	4b47      	ldr	r3, [pc, #284]	@ (8008674 <xPortStartScheduler+0x124>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a47      	ldr	r2, [pc, #284]	@ (8008678 <xPortStartScheduler+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10b      	bne.n	8008578 <xPortStartScheduler+0x28>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008578:	4b3e      	ldr	r3, [pc, #248]	@ (8008674 <xPortStartScheduler+0x124>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a3f      	ldr	r2, [pc, #252]	@ (800867c <xPortStartScheduler+0x12c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d10b      	bne.n	800859a <xPortStartScheduler+0x4a>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60fb      	str	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <xPortStartScheduler+0x130>)
 800859c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	22ff      	movs	r2, #255	@ 0xff
 80085aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b31      	ldr	r3, [pc, #196]	@ (8008684 <xPortStartScheduler+0x134>)
 80085c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085c2:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <xPortStartScheduler+0x138>)
 80085c4:	2207      	movs	r2, #7
 80085c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085c8:	e009      	b.n	80085de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <xPortStartScheduler+0x138>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <xPortStartScheduler+0x138>)
 80085d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e6:	2b80      	cmp	r3, #128	@ 0x80
 80085e8:	d0ef      	beq.n	80085ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ea:	4b27      	ldr	r3, [pc, #156]	@ (8008688 <xPortStartScheduler+0x138>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1c3 0307 	rsb	r3, r3, #7
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d00b      	beq.n	800860e <xPortStartScheduler+0xbe>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60bb      	str	r3, [r7, #8]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800860e:	4b1e      	ldr	r3, [pc, #120]	@ (8008688 <xPortStartScheduler+0x138>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	4a1c      	ldr	r2, [pc, #112]	@ (8008688 <xPortStartScheduler+0x138>)
 8008616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <xPortStartScheduler+0x138>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008620:	4a19      	ldr	r2, [pc, #100]	@ (8008688 <xPortStartScheduler+0x138>)
 8008622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800862c:	4b17      	ldr	r3, [pc, #92]	@ (800868c <xPortStartScheduler+0x13c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a16      	ldr	r2, [pc, #88]	@ (800868c <xPortStartScheduler+0x13c>)
 8008632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008638:	4b14      	ldr	r3, [pc, #80]	@ (800868c <xPortStartScheduler+0x13c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a13      	ldr	r2, [pc, #76]	@ (800868c <xPortStartScheduler+0x13c>)
 800863e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008644:	f000 f8da 	bl	80087fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008648:	4b11      	ldr	r3, [pc, #68]	@ (8008690 <xPortStartScheduler+0x140>)
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800864e:	f000 f8f9 	bl	8008844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008652:	4b10      	ldr	r3, [pc, #64]	@ (8008694 <xPortStartScheduler+0x144>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a0f      	ldr	r2, [pc, #60]	@ (8008694 <xPortStartScheduler+0x144>)
 8008658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800865c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800865e:	f7ff ff63 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008662:	f7ff f815 	bl	8007690 <vTaskSwitchContext>
	prvTaskExitError();
 8008666:	f7ff ff1b 	bl	80084a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	e000ed00 	.word	0xe000ed00
 8008678:	410fc271 	.word	0x410fc271
 800867c:	410fc270 	.word	0x410fc270
 8008680:	e000e400 	.word	0xe000e400
 8008684:	20005550 	.word	0x20005550
 8008688:	20005554 	.word	0x20005554
 800868c:	e000ed20 	.word	0xe000ed20
 8008690:	20000014 	.word	0x20000014
 8008694:	e000ef34 	.word	0xe000ef34

08008698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b2:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a0e      	ldr	r2, [pc, #56]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d110      	bne.n	80086e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <vPortEnterCritical+0x60>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	603b      	str	r3, [r7, #0]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <vPortEnterCritical+0x4a>
	}
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000014 	.word	0x20000014
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008702:	4b12      	ldr	r3, [pc, #72]	@ (800874c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <vPortExitCritical+0x26>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008722:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <vPortExitCritical+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3b01      	subs	r3, #1
 8008728:	4a08      	ldr	r2, [pc, #32]	@ (800874c <vPortExitCritical+0x50>)
 800872a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800872c:	4b07      	ldr	r3, [pc, #28]	@ (800874c <vPortExitCritical+0x50>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <vPortExitCritical+0x44>
 8008734:	2300      	movs	r3, #0
 8008736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f383 8811 	msr	BASEPRI, r3
}
 800873e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000014 	.word	0x20000014

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	@ (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f7fe ff86 	bl	8007690 <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	20004f24 	.word	0x20004f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f7fe fea3 	bl	800751c <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <xPortSysTickHandler+0x40>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008800:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <vPortSetupTimerInterrupt+0x38>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <vPortSetupTimerInterrupt+0x3c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <vPortSetupTimerInterrupt+0x40>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <vPortSetupTimerInterrupt+0x44>)
 800881a:	3b01      	subs	r3, #1
 800881c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881e:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008820:	2207      	movs	r2, #7
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e010 	.word	0xe000e010
 8008834:	e000e018 	.word	0xe000e018
 8008838:	20000008 	.word	0x20000008
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	e000e014 	.word	0xe000e014

08008844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008854 <vPortEnableVFP+0x10>
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800884e:	6001      	str	r1, [r0, #0]
 8008850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008852:	bf00      	nop
 8008854:	e000ed88 	.word	0xe000ed88

08008858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d915      	bls.n	8008896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800886a:	4a18      	ldr	r2, [pc, #96]	@ (80088cc <vPortValidateInterruptPriority+0x74>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008874:	4b16      	ldr	r3, [pc, #88]	@ (80088d0 <vPortValidateInterruptPriority+0x78>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	429a      	cmp	r2, r3
 800887c:	d20b      	bcs.n	8008896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <vPortValidateInterruptPriority+0x7c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800889e:	4b0e      	ldr	r3, [pc, #56]	@ (80088d8 <vPortValidateInterruptPriority+0x80>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90b      	bls.n	80088be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	603b      	str	r3, [r7, #0]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <vPortValidateInterruptPriority+0x62>
	}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	e000e3f0 	.word	0xe000e3f0
 80088d0:	20005550 	.word	0x20005550
 80088d4:	e000ed0c 	.word	0xe000ed0c
 80088d8:	20005554 	.word	0x20005554

080088dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	@ 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088e8:	f7fe fd5c 	bl	80073a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008a60 <pvPortMalloc+0x184>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f4:	f000 f924 	bl	8008b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a64 <pvPortMalloc+0x188>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 8095 	bne.w	8008a30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01e      	beq.n	800894a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800890c:	2208      	movs	r2, #8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d015      	beq.n	800894a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f023 0307 	bic.w	r3, r3, #7
 8008924:	3308      	adds	r3, #8
 8008926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <pvPortMalloc+0x6e>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	617b      	str	r3, [r7, #20]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06f      	beq.n	8008a30 <pvPortMalloc+0x154>
 8008950:	4b45      	ldr	r3, [pc, #276]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d86a      	bhi.n	8008a30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800895a:	4b44      	ldr	r3, [pc, #272]	@ (8008a6c <pvPortMalloc+0x190>)
 800895c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b43      	ldr	r3, [pc, #268]	@ (8008a6c <pvPortMalloc+0x190>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <pvPortMalloc+0xa6>
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008982:	4b37      	ldr	r3, [pc, #220]	@ (8008a60 <pvPortMalloc+0x184>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	d051      	beq.n	8008a30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2208      	movs	r2, #8
 8008992:	4413      	add	r3, r2
 8008994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d920      	bls.n	80089f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <pvPortMalloc+0xfc>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089ea:	69b8      	ldr	r0, [r7, #24]
 80089ec:	f000 f90a 	bl	8008c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <pvPortMalloc+0x18c>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008a68 <pvPortMalloc+0x18c>)
 80089fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b1b      	ldr	r3, [pc, #108]	@ (8008a70 <pvPortMalloc+0x194>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d203      	bcs.n	8008a12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a0a:	4b17      	ldr	r3, [pc, #92]	@ (8008a68 <pvPortMalloc+0x18c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a18      	ldr	r2, [pc, #96]	@ (8008a70 <pvPortMalloc+0x194>)
 8008a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b13      	ldr	r3, [pc, #76]	@ (8008a64 <pvPortMalloc+0x188>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a26:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <pvPortMalloc+0x198>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	4a11      	ldr	r2, [pc, #68]	@ (8008a74 <pvPortMalloc+0x198>)
 8008a2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a30:	f7fe fcc6 	bl	80073c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <pvPortMalloc+0x17a>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60fb      	str	r3, [r7, #12]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <pvPortMalloc+0x176>
	return pvReturn;
 8008a56:	69fb      	ldr	r3, [r7, #28]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	@ 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20009160 	.word	0x20009160
 8008a64:	20009174 	.word	0x20009174
 8008a68:	20009164 	.word	0x20009164
 8008a6c:	20009158 	.word	0x20009158
 8008a70:	20009168 	.word	0x20009168
 8008a74:	2000916c 	.word	0x2000916c

08008a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d04f      	beq.n	8008b2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b25      	ldr	r3, [pc, #148]	@ (8008b34 <vPortFree+0xbc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <vPortFree+0x46>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <vPortFree+0x66>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	e7fd      	b.n	8008ada <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <vPortFree+0xbc>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01e      	beq.n	8008b2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11a      	bne.n	8008b2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <vPortFree+0xbc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	43db      	mvns	r3, r3
 8008afe:	401a      	ands	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b04:	f7fe fc4e 	bl	80073a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <vPortFree+0xc0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <vPortFree+0xc0>)
 8008b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f000 f874 	bl	8008c04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <vPortFree+0xc4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a06      	ldr	r2, [pc, #24]	@ (8008b3c <vPortFree+0xc4>)
 8008b24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b26:	f7fe fc4b 	bl	80073c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20009174 	.word	0x20009174
 8008b38:	20009164 	.word	0x20009164
 8008b3c:	20009170 	.word	0x20009170

08008b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b4c:	4b27      	ldr	r3, [pc, #156]	@ (8008bec <prvHeapInit+0xac>)
 8008b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3307      	adds	r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 0307 	bic.w	r3, r3, #7
 8008b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bec <prvHeapInit+0xac>)
 8008b70:	4413      	add	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <prvHeapInit+0xb0>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf0 <prvHeapInit+0xb0>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0307 	bic.w	r3, r3, #7
 8008b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ba2:	4b14      	ldr	r3, [pc, #80]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008baa:	4b12      	ldr	r3, [pc, #72]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	1ad2      	subs	r2, r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <prvHeapInit+0xb4>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf8 <prvHeapInit+0xb8>)
 8008bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a09      	ldr	r2, [pc, #36]	@ (8008bfc <prvHeapInit+0xbc>)
 8008bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <prvHeapInit+0xc0>)
 8008bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bde:	601a      	str	r2, [r3, #0]
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	20005558 	.word	0x20005558
 8008bf0:	20009158 	.word	0x20009158
 8008bf4:	20009160 	.word	0x20009160
 8008bf8:	20009168 	.word	0x20009168
 8008bfc:	20009164 	.word	0x20009164
 8008c00:	20009174 	.word	0x20009174

08008c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c0c:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <prvInsertBlockIntoFreeList+0xac>)
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e002      	b.n	8008c18 <prvInsertBlockIntoFreeList+0x14>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d8f7      	bhi.n	8008c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d108      	bne.n	8008c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d118      	bne.n	8008c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b15      	ldr	r3, [pc, #84]	@ (8008cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d00d      	beq.n	8008c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	441a      	add	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e008      	b.n	8008c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c82:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	e003      	b.n	8008c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d002      	beq.n	8008ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	20009158 	.word	0x20009158
 8008cb4:	20009160 	.word	0x20009160

08008cb8 <rcl_get_zero_initialized_publisher>:
 8008cb8:	4b01      	ldr	r3, [pc, #4]	@ (8008cc0 <rcl_get_zero_initialized_publisher+0x8>)
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	08013068 	.word	0x08013068

08008cc4 <rcl_publisher_init>:
 8008cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	b091      	sub	sp, #68	@ 0x44
 8008cca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8008ccc:	b3d7      	cbz	r7, 8008d44 <rcl_publisher_init+0x80>
 8008cce:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4648      	mov	r0, r9
 8008cd6:	4688      	mov	r8, r1
 8008cd8:	4616      	mov	r6, r2
 8008cda:	461d      	mov	r5, r3
 8008cdc:	f000 fa10 	bl	8009100 <rcutils_allocator_is_valid>
 8008ce0:	b380      	cbz	r0, 8008d44 <rcl_publisher_init+0x80>
 8008ce2:	b37c      	cbz	r4, 8008d44 <rcl_publisher_init+0x80>
 8008ce4:	f8d4 a000 	ldr.w	sl, [r4]
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d004      	beq.n	8008cf8 <rcl_publisher_init+0x34>
 8008cee:	2564      	movs	r5, #100	@ 0x64
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	b011      	add	sp, #68	@ 0x44
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	f005 fbe5 	bl	800e4c8 <rcl_node_is_valid>
 8008cfe:	b330      	cbz	r0, 8008d4e <rcl_publisher_init+0x8a>
 8008d00:	b306      	cbz	r6, 8008d44 <rcl_publisher_init+0x80>
 8008d02:	b1fd      	cbz	r5, 8008d44 <rcl_publisher_init+0x80>
 8008d04:	46ce      	mov	lr, r9
 8008d06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008d0a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8008d0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d12:	f8de 3000 	ldr.w	r3, [lr]
 8008d16:	f8cc 3000 	str.w	r3, [ip]
 8008d1a:	f000 fa2d 	bl	8009178 <rcutils_get_zero_initialized_string_map>
 8008d1e:	ab10      	add	r3, sp, #64	@ 0x40
 8008d20:	4684      	mov	ip, r0
 8008d22:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008d26:	f8cd c020 	str.w	ip, [sp, #32]
 8008d2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008d2e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8008d32:	4651      	mov	r1, sl
 8008d34:	a808      	add	r0, sp, #32
 8008d36:	f000 fa99 	bl	800926c <rcutils_string_map_init>
 8008d3a:	b150      	cbz	r0, 8008d52 <rcl_publisher_init+0x8e>
 8008d3c:	280a      	cmp	r0, #10
 8008d3e:	d013      	beq.n	8008d68 <rcl_publisher_init+0xa4>
 8008d40:	2501      	movs	r5, #1
 8008d42:	e7d5      	b.n	8008cf0 <rcl_publisher_init+0x2c>
 8008d44:	250b      	movs	r5, #11
 8008d46:	4628      	mov	r0, r5
 8008d48:	b011      	add	sp, #68	@ 0x44
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	25c8      	movs	r5, #200	@ 0xc8
 8008d50:	e7ce      	b.n	8008cf0 <rcl_publisher_init+0x2c>
 8008d52:	a808      	add	r0, sp, #32
 8008d54:	f004 ffee 	bl	800dd34 <rcl_get_default_topic_name_substitutions>
 8008d58:	4682      	mov	sl, r0
 8008d5a:	b138      	cbz	r0, 8008d6c <rcl_publisher_init+0xa8>
 8008d5c:	a808      	add	r0, sp, #32
 8008d5e:	f000 fac5 	bl	80092ec <rcutils_string_map_fini>
 8008d62:	f1ba 0f0a 	cmp.w	sl, #10
 8008d66:	d1eb      	bne.n	8008d40 <rcl_publisher_init+0x7c>
 8008d68:	250a      	movs	r5, #10
 8008d6a:	e7c1      	b.n	8008cf0 <rcl_publisher_init+0x2c>
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008d72:	f005 fbb3 	bl	800e4dc <rcl_node_get_name>
 8008d76:	4682      	mov	sl, r0
 8008d78:	4640      	mov	r0, r8
 8008d7a:	f005 fbb7 	bl	800e4ec <rcl_node_get_namespace>
 8008d7e:	4686      	mov	lr, r0
 8008d80:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8008d84:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8008d88:	46ec      	mov	ip, sp
 8008d8a:	f8cd b014 	str.w	fp, [sp, #20]
 8008d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d92:	f8d9 3000 	ldr.w	r3, [r9]
 8008d96:	f8cc 3000 	str.w	r3, [ip]
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	4651      	mov	r1, sl
 8008d9e:	4672      	mov	r2, lr
 8008da0:	ab08      	add	r3, sp, #32
 8008da2:	f004 fe61 	bl	800da68 <rcl_expand_topic_name>
 8008da6:	4605      	mov	r5, r0
 8008da8:	a808      	add	r0, sp, #32
 8008daa:	f000 fa9f 	bl	80092ec <rcutils_string_map_fini>
 8008dae:	b920      	cbnz	r0, 8008dba <rcl_publisher_init+0xf6>
 8008db0:	b15d      	cbz	r5, 8008dca <rcl_publisher_init+0x106>
 8008db2:	2d67      	cmp	r5, #103	@ 0x67
 8008db4:	d002      	beq.n	8008dbc <rcl_publisher_init+0xf8>
 8008db6:	2d69      	cmp	r5, #105	@ 0x69
 8008db8:	d05f      	beq.n	8008e7a <rcl_publisher_init+0x1b6>
 8008dba:	2501      	movs	r5, #1
 8008dbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d096      	beq.n	8008cf0 <rcl_publisher_init+0x2c>
 8008dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008dc6:	4798      	blx	r3
 8008dc8:	e792      	b.n	8008cf0 <rcl_publisher_init+0x2c>
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f005 fb96 	bl	800e4fc <rcl_node_get_options>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d0f2      	beq.n	8008dba <rcl_publisher_init+0xf6>
 8008dd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dd6:	f7f7 fa0d 	bl	80001f4 <strlen>
 8008dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ddc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008dde:	3001      	adds	r0, #1
 8008de0:	4798      	blx	r3
 8008de2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008de4:	9107      	str	r1, [sp, #28]
 8008de6:	4681      	mov	r9, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	f7f7 fa03 	bl	80001f4 <strlen>
 8008dee:	9907      	ldr	r1, [sp, #28]
 8008df0:	1c42      	adds	r2, r0, #1
 8008df2:	4648      	mov	r0, r9
 8008df4:	f009 f9f7 	bl	80121e6 <memcpy>
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4648      	mov	r0, r9
 8008dfc:	a90a      	add	r1, sp, #40	@ 0x28
 8008dfe:	f000 faed 	bl	80093dc <rmw_validate_full_topic_name>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d137      	bne.n	8008e76 <rcl_publisher_init+0x1b2>
 8008e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d138      	bne.n	8008e7e <rcl_publisher_init+0x1ba>
 8008e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e0e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e10:	20c0      	movs	r0, #192	@ 0xc0
 8008e12:	4798      	blx	r3
 8008e14:	6020      	str	r0, [r4, #0]
 8008e16:	b3a0      	cbz	r0, 8008e82 <rcl_publisher_init+0x1be>
 8008e18:	4640      	mov	r0, r8
 8008e1a:	f005 fb77 	bl	800e50c <rcl_node_get_rmw_handle>
 8008e1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4631      	mov	r1, r6
 8008e26:	463b      	mov	r3, r7
 8008e28:	464a      	mov	r2, r9
 8008e2a:	6825      	ldr	r5, [r4, #0]
 8008e2c:	f000 fbd6 	bl	80095dc <rmw_create_publisher>
 8008e30:	6821      	ldr	r1, [r4, #0]
 8008e32:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 8008e36:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 8008e3a:	b388      	cbz	r0, 8008ea0 <rcl_publisher_init+0x1dc>
 8008e3c:	3168      	adds	r1, #104	@ 0x68
 8008e3e:	f000 fca7 	bl	8009790 <rmw_publisher_get_actual_qos>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	4605      	mov	r5, r0
 8008e46:	b9f0      	cbnz	r0, 8008e86 <rcl_publisher_init+0x1c2>
 8008e48:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8008e4c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 8008e50:	4618      	mov	r0, r3
 8008e52:	2268      	movs	r2, #104	@ 0x68
 8008e54:	4639      	mov	r1, r7
 8008e56:	f009 f9c6 	bl	80121e6 <memcpy>
 8008e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8008e5e:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 8008e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e64:	b110      	cbz	r0, 8008e6c <rcl_publisher_init+0x1a8>
 8008e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e6a:	4798      	blx	r3
 8008e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e6e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008e70:	4648      	mov	r0, r9
 8008e72:	4798      	blx	r3
 8008e74:	e73c      	b.n	8008cf0 <rcl_publisher_init+0x2c>
 8008e76:	2501      	movs	r5, #1
 8008e78:	e7f3      	b.n	8008e62 <rcl_publisher_init+0x19e>
 8008e7a:	2567      	movs	r5, #103	@ 0x67
 8008e7c:	e79e      	b.n	8008dbc <rcl_publisher_init+0xf8>
 8008e7e:	2567      	movs	r5, #103	@ 0x67
 8008e80:	e7ef      	b.n	8008e62 <rcl_publisher_init+0x19e>
 8008e82:	250a      	movs	r5, #10
 8008e84:	e7ed      	b.n	8008e62 <rcl_publisher_init+0x19e>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f5      	beq.n	8008e76 <rcl_publisher_init+0x1b2>
 8008e8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e8e:	b13b      	cbz	r3, 8008ea0 <rcl_publisher_init+0x1dc>
 8008e90:	4640      	mov	r0, r8
 8008e92:	f005 fb3b 	bl	800e50c <rcl_node_get_rmw_handle>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8008e9c:	f000 fc86 	bl	80097ac <rmw_destroy_publisher>
 8008ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ea2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	4798      	blx	r3
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	2501      	movs	r5, #1
 8008eae:	e7d8      	b.n	8008e62 <rcl_publisher_init+0x19e>

08008eb0 <rcl_publisher_get_default_options>:
 8008eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb2:	4f0e      	ldr	r7, [pc, #56]	@ (8008eec <rcl_publisher_get_default_options+0x3c>)
 8008eb4:	490e      	ldr	r1, [pc, #56]	@ (8008ef0 <rcl_publisher_get_default_options+0x40>)
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	4606      	mov	r6, r0
 8008eba:	2250      	movs	r2, #80	@ 0x50
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f009 f992 	bl	80121e6 <memcpy>
 8008ec2:	466c      	mov	r4, sp
 8008ec4:	4668      	mov	r0, sp
 8008ec6:	f000 f90d 	bl	80090e4 <rcutils_get_default_allocator>
 8008eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ecc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8008ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f000 fa7f 	bl	80093d8 <rmw_get_default_publisher_options>
 8008eda:	4639      	mov	r1, r7
 8008edc:	6678      	str	r0, [r7, #100]	@ 0x64
 8008ede:	2268      	movs	r2, #104	@ 0x68
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f009 f980 	bl	80121e6 <memcpy>
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	b007      	add	sp, #28
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eec:	20009178 	.word	0x20009178
 8008ef0:	08013070 	.word	0x08013070

08008ef4 <rcl_publish>:
 8008ef4:	b1f8      	cbz	r0, 8008f36 <rcl_publish+0x42>
 8008ef6:	6803      	ldr	r3, [r0, #0]
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	4604      	mov	r4, r0
 8008efc:	b1b3      	cbz	r3, 8008f2c <rcl_publish+0x38>
 8008efe:	4616      	mov	r6, r2
 8008f00:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8008f04:	b192      	cbz	r2, 8008f2c <rcl_publish+0x38>
 8008f06:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	f004 fd42 	bl	800d994 <rcl_context_is_valid>
 8008f10:	b160      	cbz	r0, 8008f2c <rcl_publish+0x38>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8008f18:	b140      	cbz	r0, 8008f2c <rcl_publish+0x38>
 8008f1a:	b155      	cbz	r5, 8008f32 <rcl_publish+0x3e>
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f000 fafc 	bl	800951c <rmw_publish>
 8008f24:	3800      	subs	r0, #0
 8008f26:	bf18      	it	ne
 8008f28:	2001      	movne	r0, #1
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008f30:	bd70      	pop	{r4, r5, r6, pc}
 8008f32:	200b      	movs	r0, #11
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008f3a:	4770      	bx	lr

08008f3c <rclc_support_init>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	b086      	sub	sp, #24
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d042      	beq.n	8008fcc <rclc_support_init+0x90>
 8008f46:	461c      	mov	r4, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d03f      	beq.n	8008fcc <rclc_support_init+0x90>
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	4690      	mov	r8, r2
 8008f50:	4606      	mov	r6, r0
 8008f52:	f004 ffff 	bl	800df54 <rcl_get_zero_initialized_init_options>
 8008f56:	4603      	mov	r3, r0
 8008f58:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8008f5c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	a805      	add	r0, sp, #20
 8008f64:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008f68:	f004 fff6 	bl	800df58 <rcl_init_options_init>
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	bb38      	cbnz	r0, 8008fc0 <rclc_support_init+0x84>
 8008f70:	f004 fff0 	bl	800df54 <rcl_get_zero_initialized_init_options>
 8008f74:	4631      	mov	r1, r6
 8008f76:	6030      	str	r0, [r6, #0]
 8008f78:	a805      	add	r0, sp, #20
 8008f7a:	f005 f863 	bl	800e044 <rcl_init_options_copy>
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b9c0      	cbnz	r0, 8008fb4 <rclc_support_init+0x78>
 8008f82:	ad02      	add	r5, sp, #8
 8008f84:	4628      	mov	r0, r5
 8008f86:	f004 fcfb 	bl	800d980 <rcl_get_zero_initialized_context>
 8008f8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008f8e:	1d33      	adds	r3, r6, #4
 8008f90:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f94:	4632      	mov	r2, r6
 8008f96:	4641      	mov	r1, r8
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f004 fed1 	bl	800dd40 <rcl_init>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	b940      	cbnz	r0, 8008fb4 <rclc_support_init+0x78>
 8008fa2:	60f4      	str	r4, [r6, #12]
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	f106 0110 	add.w	r1, r6, #16
 8008faa:	2003      	movs	r0, #3
 8008fac:	f005 fbfa 	bl	800e7a4 <rcl_clock_init>
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	b108      	cbz	r0, 8008fb8 <rclc_support_init+0x7c>
 8008fb4:	f000 f8c8 	bl	8009148 <rcutils_reset_error>
 8008fb8:	a805      	add	r0, sp, #20
 8008fba:	f005 f81f 	bl	800dffc <rcl_init_options_fini>
 8008fbe:	b108      	cbz	r0, 8008fc4 <rclc_support_init+0x88>
 8008fc0:	f000 f8c2 	bl	8009148 <rcutils_reset_error>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	b006      	add	sp, #24
 8008fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fcc:	250b      	movs	r5, #11
 8008fce:	4628      	mov	r0, r5
 8008fd0:	b006      	add	sp, #24
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd6:	bf00      	nop

08008fd8 <rclc_node_init_default>:
 8008fd8:	b3b8      	cbz	r0, 800904a <rclc_node_init_default+0x72>
 8008fda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fde:	460d      	mov	r5, r1
 8008fe0:	b08f      	sub	sp, #60	@ 0x3c
 8008fe2:	b329      	cbz	r1, 8009030 <rclc_node_init_default+0x58>
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	b31a      	cbz	r2, 8009030 <rclc_node_init_default+0x58>
 8008fe8:	461f      	mov	r7, r3
 8008fea:	b30b      	cbz	r3, 8009030 <rclc_node_init_default+0x58>
 8008fec:	f10d 0810 	add.w	r8, sp, #16
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	f005 f8ee 	bl	800e1d4 <rcl_get_zero_initialized_node>
 8008ff8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008ffc:	f10d 091c 	add.w	r9, sp, #28
 8009000:	e884 0003 	stmia.w	r4, {r0, r1}
 8009004:	4648      	mov	r0, r9
 8009006:	f005 fa87 	bl	800e518 <rcl_node_get_default_options>
 800900a:	4640      	mov	r0, r8
 800900c:	f005 f8e2 	bl	800e1d4 <rcl_get_zero_initialized_node>
 8009010:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009014:	1d3b      	adds	r3, r7, #4
 8009016:	f8cd 9000 	str.w	r9, [sp]
 800901a:	4632      	mov	r2, r6
 800901c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
 8009024:	f005 f8e0 	bl	800e1e8 <rcl_node_init>
 8009028:	b930      	cbnz	r0, 8009038 <rclc_node_init_default+0x60>
 800902a:	b00f      	add	sp, #60	@ 0x3c
 800902c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009030:	200b      	movs	r0, #11
 8009032:	b00f      	add	sp, #60	@ 0x3c
 8009034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009038:	9003      	str	r0, [sp, #12]
 800903a:	f000 f885 	bl	8009148 <rcutils_reset_error>
 800903e:	f000 f883 	bl	8009148 <rcutils_reset_error>
 8009042:	9803      	ldr	r0, [sp, #12]
 8009044:	b00f      	add	sp, #60	@ 0x3c
 8009046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800904a:	200b      	movs	r0, #11
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <rclc_publisher_init_default>:
 8009050:	b368      	cbz	r0, 80090ae <rclc_publisher_init_default+0x5e>
 8009052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009056:	460d      	mov	r5, r1
 8009058:	b09e      	sub	sp, #120	@ 0x78
 800905a:	b321      	cbz	r1, 80090a6 <rclc_publisher_init_default+0x56>
 800905c:	4616      	mov	r6, r2
 800905e:	b312      	cbz	r2, 80090a6 <rclc_publisher_init_default+0x56>
 8009060:	461f      	mov	r7, r3
 8009062:	b303      	cbz	r3, 80090a6 <rclc_publisher_init_default+0x56>
 8009064:	4604      	mov	r4, r0
 8009066:	f7ff fe27 	bl	8008cb8 <rcl_get_zero_initialized_publisher>
 800906a:	f10d 0810 	add.w	r8, sp, #16
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	4640      	mov	r0, r8
 8009072:	f7ff ff1d 	bl	8008eb0 <rcl_publisher_get_default_options>
 8009076:	490f      	ldr	r1, [pc, #60]	@ (80090b4 <rclc_publisher_init_default+0x64>)
 8009078:	2250      	movs	r2, #80	@ 0x50
 800907a:	4640      	mov	r0, r8
 800907c:	f009 f8b3 	bl	80121e6 <memcpy>
 8009080:	f8cd 8000 	str.w	r8, [sp]
 8009084:	463b      	mov	r3, r7
 8009086:	4632      	mov	r2, r6
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff fe1a 	bl	8008cc4 <rcl_publisher_init>
 8009090:	b910      	cbnz	r0, 8009098 <rclc_publisher_init_default+0x48>
 8009092:	b01e      	add	sp, #120	@ 0x78
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009098:	9003      	str	r0, [sp, #12]
 800909a:	f000 f855 	bl	8009148 <rcutils_reset_error>
 800909e:	9803      	ldr	r0, [sp, #12]
 80090a0:	b01e      	add	sp, #120	@ 0x78
 80090a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a6:	200b      	movs	r0, #11
 80090a8:	b01e      	add	sp, #120	@ 0x78
 80090aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ae:	200b      	movs	r0, #11
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	080130c0 	.word	0x080130c0

080090b8 <__default_zero_allocate>:
 80090b8:	f008 bc1e 	b.w	80118f8 <calloc>

080090bc <__default_reallocate>:
 80090bc:	f008 bdaa 	b.w	8011c14 <realloc>

080090c0 <__default_deallocate>:
 80090c0:	f008 bc86 	b.w	80119d0 <free>

080090c4 <__default_allocate>:
 80090c4:	f008 bc7c 	b.w	80119c0 <malloc>

080090c8 <rcutils_get_zero_initialized_allocator>:
 80090c8:	b470      	push	{r4, r5, r6}
 80090ca:	4d05      	ldr	r5, [pc, #20]	@ (80090e0 <rcutils_get_zero_initialized_allocator+0x18>)
 80090cc:	4606      	mov	r6, r0
 80090ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090d0:	4634      	mov	r4, r6
 80090d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	4630      	mov	r0, r6
 80090da:	bc70      	pop	{r4, r5, r6}
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	08013110 	.word	0x08013110

080090e4 <rcutils_get_default_allocator>:
 80090e4:	b470      	push	{r4, r5, r6}
 80090e6:	4d05      	ldr	r5, [pc, #20]	@ (80090fc <rcutils_get_default_allocator+0x18>)
 80090e8:	4606      	mov	r6, r0
 80090ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ec:	4634      	mov	r4, r6
 80090ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	4630      	mov	r0, r6
 80090f6:	bc70      	pop	{r4, r5, r6}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000018 	.word	0x20000018

08009100 <rcutils_allocator_is_valid>:
 8009100:	b158      	cbz	r0, 800911a <rcutils_allocator_is_valid+0x1a>
 8009102:	6803      	ldr	r3, [r0, #0]
 8009104:	b143      	cbz	r3, 8009118 <rcutils_allocator_is_valid+0x18>
 8009106:	6843      	ldr	r3, [r0, #4]
 8009108:	b133      	cbz	r3, 8009118 <rcutils_allocator_is_valid+0x18>
 800910a:	68c3      	ldr	r3, [r0, #12]
 800910c:	b123      	cbz	r3, 8009118 <rcutils_allocator_is_valid+0x18>
 800910e:	6880      	ldr	r0, [r0, #8]
 8009110:	3800      	subs	r0, #0
 8009112:	bf18      	it	ne
 8009114:	2001      	movne	r0, #1
 8009116:	4770      	bx	lr
 8009118:	4618      	mov	r0, r3
 800911a:	4770      	bx	lr

0800911c <rcutils_get_error_string>:
 800911c:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <rcutils_get_error_string+0x1c>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b13b      	cbz	r3, 8009132 <rcutils_get_error_string+0x16>
 8009122:	4b06      	ldr	r3, [pc, #24]	@ (800913c <rcutils_get_error_string+0x20>)
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	b90a      	cbnz	r2, 800912c <rcutils_get_error_string+0x10>
 8009128:	2201      	movs	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <rcutils_get_error_string+0x24>)
 800912e:	7818      	ldrb	r0, [r3, #0]
 8009130:	4770      	bx	lr
 8009132:	4b04      	ldr	r3, [pc, #16]	@ (8009144 <rcutils_get_error_string+0x28>)
 8009134:	7818      	ldrb	r0, [r3, #0]
 8009136:	4770      	bx	lr
 8009138:	200091e0 	.word	0x200091e0
 800913c:	200091e1 	.word	0x200091e1
 8009140:	20009448 	.word	0x20009448
 8009144:	08013124 	.word	0x08013124

08009148 <rcutils_reset_error>:
 8009148:	b4d0      	push	{r4, r6, r7}
 800914a:	4a07      	ldr	r2, [pc, #28]	@ (8009168 <rcutils_reset_error+0x20>)
 800914c:	4807      	ldr	r0, [pc, #28]	@ (800916c <rcutils_reset_error+0x24>)
 800914e:	4c08      	ldr	r4, [pc, #32]	@ (8009170 <rcutils_reset_error+0x28>)
 8009150:	4908      	ldr	r1, [pc, #32]	@ (8009174 <rcutils_reset_error+0x2c>)
 8009152:	2300      	movs	r3, #0
 8009154:	2600      	movs	r6, #0
 8009156:	2700      	movs	r7, #0
 8009158:	8013      	strh	r3, [r2, #0]
 800915a:	7003      	strb	r3, [r0, #0]
 800915c:	e9c2 6702 	strd	r6, r7, [r2, #8]
 8009160:	7023      	strb	r3, [r4, #0]
 8009162:	700b      	strb	r3, [r1, #0]
 8009164:	bcd0      	pop	{r4, r6, r7}
 8009166:	4770      	bx	lr
 8009168:	20009450 	.word	0x20009450
 800916c:	20009448 	.word	0x20009448
 8009170:	200091e1 	.word	0x200091e1
 8009174:	200091e0 	.word	0x200091e0

08009178 <rcutils_get_zero_initialized_string_map>:
 8009178:	4b01      	ldr	r3, [pc, #4]	@ (8009180 <rcutils_get_zero_initialized_string_map+0x8>)
 800917a:	2000      	movs	r0, #0
 800917c:	6018      	str	r0, [r3, #0]
 800917e:	4770      	bx	lr
 8009180:	200091e4 	.word	0x200091e4

08009184 <rcutils_string_map_reserve>:
 8009184:	2800      	cmp	r0, #0
 8009186:	d061      	beq.n	800924c <rcutils_string_map_reserve+0xc8>
 8009188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800918c:	6805      	ldr	r5, [r0, #0]
 800918e:	b083      	sub	sp, #12
 8009190:	460c      	mov	r4, r1
 8009192:	4606      	mov	r6, r0
 8009194:	b12d      	cbz	r5, 80091a2 <rcutils_string_map_reserve+0x1e>
 8009196:	68eb      	ldr	r3, [r5, #12]
 8009198:	42a3      	cmp	r3, r4
 800919a:	d906      	bls.n	80091aa <rcutils_string_map_reserve+0x26>
 800919c:	461c      	mov	r4, r3
 800919e:	2d00      	cmp	r5, #0
 80091a0:	d1f9      	bne.n	8009196 <rcutils_string_map_reserve+0x12>
 80091a2:	201f      	movs	r0, #31
 80091a4:	b003      	add	sp, #12
 80091a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091aa:	68ab      	ldr	r3, [r5, #8]
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d049      	beq.n	8009244 <rcutils_string_map_reserve+0xc0>
 80091b0:	6a2f      	ldr	r7, [r5, #32]
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	d035      	beq.n	8009222 <rcutils_string_map_reserve+0x9e>
 80091b6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80091ba:	d245      	bcs.n	8009248 <rcutils_string_map_reserve+0xc4>
 80091bc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80091c0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80091c4:	6828      	ldr	r0, [r5, #0]
 80091c6:	4641      	mov	r1, r8
 80091c8:	463a      	mov	r2, r7
 80091ca:	47c8      	blx	r9
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d03b      	beq.n	8009248 <rcutils_string_map_reserve+0xc4>
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	463a      	mov	r2, r7
 80091d4:	6018      	str	r0, [r3, #0]
 80091d6:	4641      	mov	r1, r8
 80091d8:	6858      	ldr	r0, [r3, #4]
 80091da:	47c8      	blx	r9
 80091dc:	2800      	cmp	r0, #0
 80091de:	d033      	beq.n	8009248 <rcutils_string_map_reserve+0xc4>
 80091e0:	6835      	ldr	r5, [r6, #0]
 80091e2:	68ab      	ldr	r3, [r5, #8]
 80091e4:	6068      	str	r0, [r5, #4]
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	d227      	bcs.n	800923a <rcutils_string_map_reserve+0xb6>
 80091ea:	682a      	ldr	r2, [r5, #0]
 80091ec:	eb00 0108 	add.w	r1, r0, r8
 80091f0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80091f4:	428f      	cmp	r7, r1
 80091f6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80091fa:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80091fe:	d203      	bcs.n	8009208 <rcutils_string_map_reserve+0x84>
 8009200:	eb02 0108 	add.w	r1, r2, r8
 8009204:	428e      	cmp	r6, r1
 8009206:	d323      	bcc.n	8009250 <rcutils_string_map_reserve+0xcc>
 8009208:	1ae3      	subs	r3, r4, r3
 800920a:	009a      	lsls	r2, r3, #2
 800920c:	4638      	mov	r0, r7
 800920e:	2100      	movs	r1, #0
 8009210:	9201      	str	r2, [sp, #4]
 8009212:	f008 ff1f 	bl	8012054 <memset>
 8009216:	9a01      	ldr	r2, [sp, #4]
 8009218:	4630      	mov	r0, r6
 800921a:	2100      	movs	r1, #0
 800921c:	f008 ff1a 	bl	8012054 <memset>
 8009220:	e00b      	b.n	800923a <rcutils_string_map_reserve+0xb6>
 8009222:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8009226:	6828      	ldr	r0, [r5, #0]
 8009228:	4639      	mov	r1, r7
 800922a:	47c0      	blx	r8
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	4639      	mov	r1, r7
 8009230:	6858      	ldr	r0, [r3, #4]
 8009232:	601c      	str	r4, [r3, #0]
 8009234:	47c0      	blx	r8
 8009236:	6835      	ldr	r5, [r6, #0]
 8009238:	606c      	str	r4, [r5, #4]
 800923a:	2000      	movs	r0, #0
 800923c:	60ac      	str	r4, [r5, #8]
 800923e:	b003      	add	sp, #12
 8009240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009244:	2000      	movs	r0, #0
 8009246:	e7ad      	b.n	80091a4 <rcutils_string_map_reserve+0x20>
 8009248:	200a      	movs	r0, #10
 800924a:	e7ab      	b.n	80091a4 <rcutils_string_map_reserve+0x20>
 800924c:	200b      	movs	r0, #11
 800924e:	4770      	bx	lr
 8009250:	1f13      	subs	r3, r2, #4
 8009252:	f1ac 0c04 	sub.w	ip, ip, #4
 8009256:	4498      	add	r8, r3
 8009258:	4460      	add	r0, ip
 800925a:	4462      	add	r2, ip
 800925c:	2300      	movs	r3, #0
 800925e:	f842 3f04 	str.w	r3, [r2, #4]!
 8009262:	4542      	cmp	r2, r8
 8009264:	f840 3f04 	str.w	r3, [r0, #4]!
 8009268:	d1f9      	bne.n	800925e <rcutils_string_map_reserve+0xda>
 800926a:	e7e6      	b.n	800923a <rcutils_string_map_reserve+0xb6>

0800926c <rcutils_string_map_init>:
 800926c:	b082      	sub	sp, #8
 800926e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009270:	460e      	mov	r6, r1
 8009272:	a906      	add	r1, sp, #24
 8009274:	e881 000c 	stmia.w	r1, {r2, r3}
 8009278:	b380      	cbz	r0, 80092dc <rcutils_string_map_init+0x70>
 800927a:	6807      	ldr	r7, [r0, #0]
 800927c:	4604      	mov	r4, r0
 800927e:	b12f      	cbz	r7, 800928c <rcutils_string_map_init+0x20>
 8009280:	251e      	movs	r5, #30
 8009282:	4628      	mov	r0, r5
 8009284:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009288:	b002      	add	sp, #8
 800928a:	4770      	bx	lr
 800928c:	a806      	add	r0, sp, #24
 800928e:	f7ff ff37 	bl	8009100 <rcutils_allocator_is_valid>
 8009292:	b318      	cbz	r0, 80092dc <rcutils_string_map_init+0x70>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009298:	2024      	movs	r0, #36	@ 0x24
 800929a:	4798      	blx	r3
 800929c:	4605      	mov	r5, r0
 800929e:	6020      	str	r0, [r4, #0]
 80092a0:	b310      	cbz	r0, 80092e8 <rcutils_string_map_init+0x7c>
 80092a2:	f10d 0e18 	add.w	lr, sp, #24
 80092a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80092aa:	f105 0c10 	add.w	ip, r5, #16
 80092ae:	e9c5 7700 	strd	r7, r7, [r5]
 80092b2:	e9c5 7702 	strd	r7, r7, [r5, #8]
 80092b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092ba:	f8de 3000 	ldr.w	r3, [lr]
 80092be:	f8cc 3000 	str.w	r3, [ip]
 80092c2:	4631      	mov	r1, r6
 80092c4:	4620      	mov	r0, r4
 80092c6:	f7ff ff5d 	bl	8009184 <rcutils_string_map_reserve>
 80092ca:	4605      	mov	r5, r0
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d0d8      	beq.n	8009282 <rcutils_string_map_init+0x16>
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092d4:	6820      	ldr	r0, [r4, #0]
 80092d6:	4798      	blx	r3
 80092d8:	6027      	str	r7, [r4, #0]
 80092da:	e7d2      	b.n	8009282 <rcutils_string_map_init+0x16>
 80092dc:	250b      	movs	r5, #11
 80092de:	4628      	mov	r0, r5
 80092e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092e4:	b002      	add	sp, #8
 80092e6:	4770      	bx	lr
 80092e8:	250a      	movs	r5, #10
 80092ea:	e7ca      	b.n	8009282 <rcutils_string_map_init+0x16>

080092ec <rcutils_string_map_fini>:
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d039      	beq.n	800936a <rcutils_string_map_fini+0x7e>
 80092f6:	6804      	ldr	r4, [r0, #0]
 80092f8:	4606      	mov	r6, r0
 80092fa:	2c00      	cmp	r4, #0
 80092fc:	d031      	beq.n	8009362 <rcutils_string_map_fini+0x76>
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	b323      	cbz	r3, 800934c <rcutils_string_map_fini+0x60>
 8009302:	2500      	movs	r5, #0
 8009304:	6822      	ldr	r2, [r4, #0]
 8009306:	46a8      	mov	r8, r5
 8009308:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800930c:	b1d8      	cbz	r0, 8009346 <rcutils_string_map_fini+0x5a>
 800930e:	6a21      	ldr	r1, [r4, #32]
 8009310:	6967      	ldr	r7, [r4, #20]
 8009312:	9101      	str	r1, [sp, #4]
 8009314:	47b8      	blx	r7
 8009316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800931a:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800931e:	9901      	ldr	r1, [sp, #4]
 8009320:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009324:	47b8      	blx	r7
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	6862      	ldr	r2, [r4, #4]
 800932a:	3b01      	subs	r3, #1
 800932c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8009330:	60e3      	str	r3, [r4, #12]
 8009332:	6834      	ldr	r4, [r6, #0]
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	3501      	adds	r5, #1
 8009338:	429d      	cmp	r5, r3
 800933a:	d207      	bcs.n	800934c <rcutils_string_map_fini+0x60>
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8009342:	2800      	cmp	r0, #0
 8009344:	d1e3      	bne.n	800930e <rcutils_string_map_fini+0x22>
 8009346:	3501      	adds	r5, #1
 8009348:	429d      	cmp	r5, r3
 800934a:	d3dd      	bcc.n	8009308 <rcutils_string_map_fini+0x1c>
 800934c:	2100      	movs	r1, #0
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ff18 	bl	8009184 <rcutils_string_map_reserve>
 8009354:	4604      	mov	r4, r0
 8009356:	b920      	cbnz	r0, 8009362 <rcutils_string_map_fini+0x76>
 8009358:	6830      	ldr	r0, [r6, #0]
 800935a:	6943      	ldr	r3, [r0, #20]
 800935c:	6a01      	ldr	r1, [r0, #32]
 800935e:	4798      	blx	r3
 8009360:	6034      	str	r4, [r6, #0]
 8009362:	4620      	mov	r0, r4
 8009364:	b002      	add	sp, #8
 8009366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800936a:	240b      	movs	r4, #11
 800936c:	4620      	mov	r0, r4
 800936e:	b002      	add	sp, #8
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009374 <rcutils_string_map_getn>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	b308      	cbz	r0, 80093c0 <rcutils_string_map_getn+0x4c>
 800937c:	6804      	ldr	r4, [r0, #0]
 800937e:	b304      	cbz	r4, 80093c2 <rcutils_string_map_getn+0x4e>
 8009380:	460d      	mov	r5, r1
 8009382:	b1e9      	cbz	r1, 80093c0 <rcutils_string_map_getn+0x4c>
 8009384:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8009388:	6827      	ldr	r7, [r4, #0]
 800938a:	f1b9 0f00 	cmp.w	r9, #0
 800938e:	d017      	beq.n	80093c0 <rcutils_string_map_getn+0x4c>
 8009390:	4690      	mov	r8, r2
 8009392:	3f04      	subs	r7, #4
 8009394:	2600      	movs	r6, #0
 8009396:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800939a:	9101      	str	r1, [sp, #4]
 800939c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80093a0:	4608      	mov	r0, r1
 80093a2:	3601      	adds	r6, #1
 80093a4:	b151      	cbz	r1, 80093bc <rcutils_string_map_getn+0x48>
 80093a6:	f7f6 ff25 	bl	80001f4 <strlen>
 80093aa:	4540      	cmp	r0, r8
 80093ac:	4602      	mov	r2, r0
 80093ae:	9901      	ldr	r1, [sp, #4]
 80093b0:	bf38      	it	cc
 80093b2:	4642      	movcc	r2, r8
 80093b4:	4628      	mov	r0, r5
 80093b6:	f008 fe62 	bl	801207e <strncmp>
 80093ba:	b130      	cbz	r0, 80093ca <rcutils_string_map_getn+0x56>
 80093bc:	45b1      	cmp	r9, r6
 80093be:	d1ea      	bne.n	8009396 <rcutils_string_map_getn+0x22>
 80093c0:	2400      	movs	r4, #0
 80093c2:	4620      	mov	r0, r4
 80093c4:	b002      	add	sp, #8
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	f853 400a 	ldr.w	r4, [r3, sl]
 80093d0:	4620      	mov	r0, r4
 80093d2:	b002      	add	sp, #8
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080093d8 <rmw_get_default_publisher_options>:
 80093d8:	2000      	movs	r0, #0
 80093da:	4770      	bx	lr

080093dc <rmw_validate_full_topic_name>:
 80093dc:	2800      	cmp	r0, #0
 80093de:	d062      	beq.n	80094a6 <rmw_validate_full_topic_name+0xca>
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	460d      	mov	r5, r1
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d05f      	beq.n	80094aa <rmw_validate_full_topic_name+0xce>
 80093ea:	4616      	mov	r6, r2
 80093ec:	4604      	mov	r4, r0
 80093ee:	f7f6 ff01 	bl	80001f4 <strlen>
 80093f2:	b148      	cbz	r0, 8009408 <rmw_validate_full_topic_name+0x2c>
 80093f4:	7823      	ldrb	r3, [r4, #0]
 80093f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80093f8:	d00d      	beq.n	8009416 <rmw_validate_full_topic_name+0x3a>
 80093fa:	2302      	movs	r3, #2
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	b13e      	cbz	r6, 8009410 <rmw_validate_full_topic_name+0x34>
 8009400:	2000      	movs	r0, #0
 8009402:	6030      	str	r0, [r6, #0]
 8009404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009408:	2301      	movs	r3, #1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	2e00      	cmp	r6, #0
 800940e:	d1f7      	bne.n	8009400 <rmw_validate_full_topic_name+0x24>
 8009410:	2000      	movs	r0, #0
 8009412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009416:	1e47      	subs	r7, r0, #1
 8009418:	5de3      	ldrb	r3, [r4, r7]
 800941a:	2b2f      	cmp	r3, #47	@ 0x2f
 800941c:	d047      	beq.n	80094ae <rmw_validate_full_topic_name+0xd2>
 800941e:	1e63      	subs	r3, r4, #1
 8009420:	eb03 0900 	add.w	r9, r3, r0
 8009424:	f1c4 0e01 	rsb	lr, r4, #1
 8009428:	eb0e 0803 	add.w	r8, lr, r3
 800942c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009430:	f021 0220 	bic.w	r2, r1, #32
 8009434:	3a41      	subs	r2, #65	@ 0x41
 8009436:	2a19      	cmp	r2, #25
 8009438:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800943c:	d90c      	bls.n	8009458 <rmw_validate_full_topic_name+0x7c>
 800943e:	295f      	cmp	r1, #95	@ 0x5f
 8009440:	d00a      	beq.n	8009458 <rmw_validate_full_topic_name+0x7c>
 8009442:	f1bc 0f0a 	cmp.w	ip, #10
 8009446:	d907      	bls.n	8009458 <rmw_validate_full_topic_name+0x7c>
 8009448:	2304      	movs	r3, #4
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	2e00      	cmp	r6, #0
 800944e:	d0df      	beq.n	8009410 <rmw_validate_full_topic_name+0x34>
 8009450:	f8c6 8000 	str.w	r8, [r6]
 8009454:	2000      	movs	r0, #0
 8009456:	e7d5      	b.n	8009404 <rmw_validate_full_topic_name+0x28>
 8009458:	454b      	cmp	r3, r9
 800945a:	d1e5      	bne.n	8009428 <rmw_validate_full_topic_name+0x4c>
 800945c:	f8df e084 	ldr.w	lr, [pc, #132]	@ 80094e4 <rmw_validate_full_topic_name+0x108>
 8009460:	2300      	movs	r3, #0
 8009462:	f107 0801 	add.w	r8, r7, #1
 8009466:	e005      	b.n	8009474 <rmw_validate_full_topic_name+0x98>
 8009468:	4611      	mov	r1, r2
 800946a:	4288      	cmp	r0, r1
 800946c:	4613      	mov	r3, r2
 800946e:	f104 0401 	add.w	r4, r4, #1
 8009472:	d925      	bls.n	80094c0 <rmw_validate_full_topic_name+0xe4>
 8009474:	429f      	cmp	r7, r3
 8009476:	f103 0201 	add.w	r2, r3, #1
 800947a:	d01e      	beq.n	80094ba <rmw_validate_full_topic_name+0xde>
 800947c:	7821      	ldrb	r1, [r4, #0]
 800947e:	292f      	cmp	r1, #47	@ 0x2f
 8009480:	d1f2      	bne.n	8009468 <rmw_validate_full_topic_name+0x8c>
 8009482:	f894 c001 	ldrb.w	ip, [r4, #1]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800948c:	4611      	mov	r1, r2
 800948e:	d024      	beq.n	80094da <rmw_validate_full_topic_name+0xfe>
 8009490:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8009494:	075b      	lsls	r3, r3, #29
 8009496:	d5e8      	bpl.n	800946a <rmw_validate_full_topic_name+0x8e>
 8009498:	2306      	movs	r3, #6
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	2e00      	cmp	r6, #0
 800949e:	d0b7      	beq.n	8009410 <rmw_validate_full_topic_name+0x34>
 80094a0:	6032      	str	r2, [r6, #0]
 80094a2:	2000      	movs	r0, #0
 80094a4:	e7ae      	b.n	8009404 <rmw_validate_full_topic_name+0x28>
 80094a6:	200b      	movs	r0, #11
 80094a8:	4770      	bx	lr
 80094aa:	200b      	movs	r0, #11
 80094ac:	e7aa      	b.n	8009404 <rmw_validate_full_topic_name+0x28>
 80094ae:	2303      	movs	r3, #3
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	d0ac      	beq.n	8009410 <rmw_validate_full_topic_name+0x34>
 80094b6:	6037      	str	r7, [r6, #0]
 80094b8:	e7aa      	b.n	8009410 <rmw_validate_full_topic_name+0x34>
 80094ba:	4641      	mov	r1, r8
 80094bc:	1c7a      	adds	r2, r7, #1
 80094be:	e7d4      	b.n	800946a <rmw_validate_full_topic_name+0x8e>
 80094c0:	28f7      	cmp	r0, #247	@ 0xf7
 80094c2:	d802      	bhi.n	80094ca <rmw_validate_full_topic_name+0xee>
 80094c4:	2000      	movs	r0, #0
 80094c6:	6028      	str	r0, [r5, #0]
 80094c8:	e79c      	b.n	8009404 <rmw_validate_full_topic_name+0x28>
 80094ca:	2307      	movs	r3, #7
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d09e      	beq.n	8009410 <rmw_validate_full_topic_name+0x34>
 80094d2:	23f6      	movs	r3, #246	@ 0xf6
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	e794      	b.n	8009404 <rmw_validate_full_topic_name+0x28>
 80094da:	2305      	movs	r3, #5
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	2e00      	cmp	r6, #0
 80094e0:	d1de      	bne.n	80094a0 <rmw_validate_full_topic_name+0xc4>
 80094e2:	e795      	b.n	8009410 <rmw_validate_full_topic_name+0x34>
 80094e4:	080138c0 	.word	0x080138c0

080094e8 <rmw_uros_set_custom_transport>:
 80094e8:	b470      	push	{r4, r5, r6}
 80094ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80094ee:	b162      	cbz	r2, 800950a <rmw_uros_set_custom_transport+0x22>
 80094f0:	b15b      	cbz	r3, 800950a <rmw_uros_set_custom_transport+0x22>
 80094f2:	b155      	cbz	r5, 800950a <rmw_uros_set_custom_transport+0x22>
 80094f4:	b14e      	cbz	r6, 800950a <rmw_uros_set_custom_transport+0x22>
 80094f6:	4c06      	ldr	r4, [pc, #24]	@ (8009510 <rmw_uros_set_custom_transport+0x28>)
 80094f8:	7020      	strb	r0, [r4, #0]
 80094fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80094fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009502:	6166      	str	r6, [r4, #20]
 8009504:	2000      	movs	r0, #0
 8009506:	bc70      	pop	{r4, r5, r6}
 8009508:	4770      	bx	lr
 800950a:	200b      	movs	r0, #11
 800950c:	bc70      	pop	{r4, r5, r6}
 800950e:	4770      	bx	lr
 8009510:	20009460 	.word	0x20009460

08009514 <flush_session>:
 8009514:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8009516:	f002 bbbb 	b.w	800bc90 <uxr_run_session_until_confirm_delivery>
 800951a:	bf00      	nop

0800951c <rmw_publish>:
 800951c:	2800      	cmp	r0, #0
 800951e:	d053      	beq.n	80095c8 <rmw_publish+0xac>
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	460d      	mov	r5, r1
 8009524:	b08e      	sub	sp, #56	@ 0x38
 8009526:	2900      	cmp	r1, #0
 8009528:	d04b      	beq.n	80095c2 <rmw_publish+0xa6>
 800952a:	4604      	mov	r4, r0
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f000 fc05 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 8009532:	2800      	cmp	r0, #0
 8009534:	d045      	beq.n	80095c2 <rmw_publish+0xa6>
 8009536:	6866      	ldr	r6, [r4, #4]
 8009538:	2e00      	cmp	r6, #0
 800953a:	d042      	beq.n	80095c2 <rmw_publish+0xa6>
 800953c:	69b4      	ldr	r4, [r6, #24]
 800953e:	4628      	mov	r0, r5
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	4798      	blx	r3
 8009544:	69f3      	ldr	r3, [r6, #28]
 8009546:	9005      	str	r0, [sp, #20]
 8009548:	b113      	cbz	r3, 8009550 <rmw_publish+0x34>
 800954a:	a805      	add	r0, sp, #20
 800954c:	4798      	blx	r3
 800954e:	9805      	ldr	r0, [sp, #20]
 8009550:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	9000      	str	r0, [sp, #0]
 8009558:	6972      	ldr	r2, [r6, #20]
 800955a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800955c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009560:	ab06      	add	r3, sp, #24
 8009562:	f003 f99d 	bl	800c8a0 <uxr_prepare_output_stream>
 8009566:	b1d8      	cbz	r0, 80095a0 <rmw_publish+0x84>
 8009568:	68a3      	ldr	r3, [r4, #8]
 800956a:	4628      	mov	r0, r5
 800956c:	a906      	add	r1, sp, #24
 800956e:	4798      	blx	r3
 8009570:	6a33      	ldr	r3, [r6, #32]
 8009572:	4604      	mov	r4, r0
 8009574:	b10b      	cbz	r3, 800957a <rmw_publish+0x5e>
 8009576:	a806      	add	r0, sp, #24
 8009578:	4798      	blx	r3
 800957a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800957e:	2b01      	cmp	r3, #1
 8009580:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009584:	d022      	beq.n	80095cc <rmw_publish+0xb0>
 8009586:	6918      	ldr	r0, [r3, #16]
 8009588:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800958a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800958e:	f002 fb7f 	bl	800bc90 <uxr_run_session_until_confirm_delivery>
 8009592:	4020      	ands	r0, r4
 8009594:	b2c4      	uxtb	r4, r0
 8009596:	f084 0001 	eor.w	r0, r4, #1
 800959a:	b2c0      	uxtb	r0, r0
 800959c:	b00e      	add	sp, #56	@ 0x38
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80095a4:	4a0c      	ldr	r2, [pc, #48]	@ (80095d8 <rmw_publish+0xbc>)
 80095a6:	6918      	ldr	r0, [r3, #16]
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80095b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80095b4:	6972      	ldr	r2, [r6, #20]
 80095b6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80095b8:	ab06      	add	r3, sp, #24
 80095ba:	f003 f9a1 	bl	800c900 <uxr_prepare_output_stream_fragmented>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1d2      	bne.n	8009568 <rmw_publish+0x4c>
 80095c2:	2001      	movs	r0, #1
 80095c4:	b00e      	add	sp, #56	@ 0x38
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	2001      	movs	r0, #1
 80095ca:	4770      	bx	lr
 80095cc:	6918      	ldr	r0, [r3, #16]
 80095ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80095d2:	f001 ffdb 	bl	800b58c <uxr_flash_output_streams>
 80095d6:	e7de      	b.n	8009596 <rmw_publish+0x7a>
 80095d8:	08009515 	.word	0x08009515

080095dc <rmw_create_publisher>:
 80095dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	b087      	sub	sp, #28
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f000 80c9 	beq.w	800977a <rmw_create_publisher+0x19e>
 80095e8:	460e      	mov	r6, r1
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f000 80c5 	beq.w	800977a <rmw_create_publisher+0x19e>
 80095f0:	4604      	mov	r4, r0
 80095f2:	6800      	ldr	r0, [r0, #0]
 80095f4:	4615      	mov	r5, r2
 80095f6:	4698      	mov	r8, r3
 80095f8:	f000 fba0 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f000 80bc 	beq.w	800977a <rmw_create_publisher+0x19e>
 8009602:	2d00      	cmp	r5, #0
 8009604:	f000 80b9 	beq.w	800977a <rmw_create_publisher+0x19e>
 8009608:	782b      	ldrb	r3, [r5, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80b5 	beq.w	800977a <rmw_create_publisher+0x19e>
 8009610:	f1b8 0f00 	cmp.w	r8, #0
 8009614:	f000 80b1 	beq.w	800977a <rmw_create_publisher+0x19e>
 8009618:	485a      	ldr	r0, [pc, #360]	@ (8009784 <rmw_create_publisher+0x1a8>)
 800961a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800961e:	f005 fd71 	bl	800f104 <get_memory>
 8009622:	2800      	cmp	r0, #0
 8009624:	f000 80a9 	beq.w	800977a <rmw_create_publisher+0x19e>
 8009628:	68c4      	ldr	r4, [r0, #12]
 800962a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800962e:	f005 fd8d 	bl	800f14c <rmw_get_implementation_identifier>
 8009632:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8009636:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800963a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800963e:	4628      	mov	r0, r5
 8009640:	f7f6 fdd8 	bl	80001f4 <strlen>
 8009644:	3001      	adds	r0, #1
 8009646:	283c      	cmp	r0, #60	@ 0x3c
 8009648:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800964c:	f200 808e 	bhi.w	800976c <rmw_create_publisher+0x190>
 8009650:	4a4d      	ldr	r2, [pc, #308]	@ (8009788 <rmw_create_publisher+0x1ac>)
 8009652:	462b      	mov	r3, r5
 8009654:	213c      	movs	r1, #60	@ 0x3c
 8009656:	4650      	mov	r0, sl
 8009658:	f008 fc4c 	bl	8011ef4 <sniprintf>
 800965c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009660:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 8009664:	4641      	mov	r1, r8
 8009666:	2250      	movs	r2, #80	@ 0x50
 8009668:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800966c:	f008 fdbb 	bl	80121e6 <memcpy>
 8009670:	f898 3008 	ldrb.w	r3, [r8, #8]
 8009674:	4945      	ldr	r1, [pc, #276]	@ (800978c <rmw_create_publisher+0x1b0>)
 8009676:	2b02      	cmp	r3, #2
 8009678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800967c:	bf0c      	ite	eq
 800967e:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8009682:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8009686:	67a3      	str	r3, [r4, #120]	@ 0x78
 8009688:	2300      	movs	r3, #0
 800968a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800968e:	4630      	mov	r0, r6
 8009690:	f000 fb62 	bl	8009d58 <get_message_typesupport_handle>
 8009694:	2800      	cmp	r0, #0
 8009696:	d069      	beq.n	800976c <rmw_create_publisher+0x190>
 8009698:	6842      	ldr	r2, [r0, #4]
 800969a:	61a2      	str	r2, [r4, #24]
 800969c:	2a00      	cmp	r2, #0
 800969e:	d065      	beq.n	800976c <rmw_create_publisher+0x190>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4643      	mov	r3, r8
 80096a4:	4648      	mov	r0, r9
 80096a6:	f005 ff9b 	bl	800f5e0 <create_topic>
 80096aa:	6260      	str	r0, [r4, #36]	@ 0x24
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d061      	beq.n	8009774 <rmw_create_publisher+0x198>
 80096b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80096b4:	f241 5398 	movw	r3, #5528	@ 0x1598
 80096b8:	2103      	movs	r1, #3
 80096ba:	5ad0      	ldrh	r0, [r2, r3]
 80096bc:	1c45      	adds	r5, r0, #1
 80096be:	52d5      	strh	r5, [r2, r3]
 80096c0:	f001 fe18 	bl	800b2f4 <uxr_object_id>
 80096c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80096cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80096d0:	6912      	ldr	r2, [r2, #16]
 80096d2:	6120      	str	r0, [r4, #16]
 80096d4:	f04f 0a06 	mov.w	sl, #6
 80096d8:	f8cd a000 	str.w	sl, [sp]
 80096dc:	6819      	ldr	r1, [r3, #0]
 80096de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80096e2:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 80096e6:	6922      	ldr	r2, [r4, #16]
 80096e8:	f001 fd5e 	bl	800b1a8 <uxr_buffer_create_publisher_bin>
 80096ec:	4602      	mov	r2, r0
 80096ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80096f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80096f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80096fa:	f000 fa9f 	bl	8009c3c <run_xrce_session>
 80096fe:	b3a8      	cbz	r0, 800976c <rmw_create_publisher+0x190>
 8009700:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009704:	f241 539a 	movw	r3, #5530	@ 0x159a
 8009708:	2105      	movs	r1, #5
 800970a:	5ad0      	ldrh	r0, [r2, r3]
 800970c:	1c45      	adds	r5, r0, #1
 800970e:	52d5      	strh	r5, [r2, r3]
 8009710:	f001 fdf0 	bl	800b2f4 <uxr_object_id>
 8009714:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800971c:	6915      	ldr	r5, [r2, #16]
 800971e:	6160      	str	r0, [r4, #20]
 8009720:	ae04      	add	r6, sp, #16
 8009722:	4641      	mov	r1, r8
 8009724:	4630      	mov	r0, r6
 8009726:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800972a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800972e:	f000 faa1 	bl	8009c74 <convert_qos_profile>
 8009732:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009736:	f8cd a00c 	str.w	sl, [sp, #12]
 800973a:	9001      	str	r0, [sp, #4]
 800973c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009740:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800974a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800974e:	f8d8 1000 	ldr.w	r1, [r8]
 8009752:	4628      	mov	r0, r5
 8009754:	f001 fd56 	bl	800b204 <uxr_buffer_create_datawriter_bin>
 8009758:	4602      	mov	r2, r0
 800975a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800975e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009762:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009766:	f000 fa69 	bl	8009c3c <run_xrce_session>
 800976a:	b938      	cbnz	r0, 800977c <rmw_create_publisher+0x1a0>
 800976c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800976e:	b108      	cbz	r0, 8009774 <rmw_create_publisher+0x198>
 8009770:	f000 fa0c 	bl	8009b8c <rmw_uxrce_fini_topic_memory>
 8009774:	4638      	mov	r0, r7
 8009776:	f000 f9b1 	bl	8009adc <rmw_uxrce_fini_publisher_memory>
 800977a:	2700      	movs	r7, #0
 800977c:	4638      	mov	r0, r7
 800977e:	b007      	add	sp, #28
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	20009490 	.word	0x20009490
 8009788:	0801315c 	.word	0x0801315c
 800978c:	08013128 	.word	0x08013128

08009790 <rmw_publisher_get_actual_qos>:
 8009790:	b150      	cbz	r0, 80097a8 <rmw_publisher_get_actual_qos+0x18>
 8009792:	b149      	cbz	r1, 80097a8 <rmw_publisher_get_actual_qos+0x18>
 8009794:	b508      	push	{r3, lr}
 8009796:	6843      	ldr	r3, [r0, #4]
 8009798:	2250      	movs	r2, #80	@ 0x50
 800979a:	4608      	mov	r0, r1
 800979c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80097a0:	f008 fd21 	bl	80121e6 <memcpy>
 80097a4:	2000      	movs	r0, #0
 80097a6:	bd08      	pop	{r3, pc}
 80097a8:	200b      	movs	r0, #11
 80097aa:	4770      	bx	lr

080097ac <rmw_destroy_publisher>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	b128      	cbz	r0, 80097bc <rmw_destroy_publisher+0x10>
 80097b0:	4604      	mov	r4, r0
 80097b2:	6800      	ldr	r0, [r0, #0]
 80097b4:	460d      	mov	r5, r1
 80097b6:	f000 fac1 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 80097ba:	b910      	cbnz	r0, 80097c2 <rmw_destroy_publisher+0x16>
 80097bc:	2401      	movs	r4, #1
 80097be:	4620      	mov	r0, r4
 80097c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0f9      	beq.n	80097bc <rmw_destroy_publisher+0x10>
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	d0f7      	beq.n	80097bc <rmw_destroy_publisher+0x10>
 80097cc:	6828      	ldr	r0, [r5, #0]
 80097ce:	f000 fab5 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0f2      	beq.n	80097bc <rmw_destroy_publisher+0x10>
 80097d6:	686c      	ldr	r4, [r5, #4]
 80097d8:	2c00      	cmp	r4, #0
 80097da:	d0ef      	beq.n	80097bc <rmw_destroy_publisher+0x10>
 80097dc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80097de:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80097e2:	f005 ff4d 	bl	800f680 <destroy_topic>
 80097e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80097ea:	6962      	ldr	r2, [r4, #20]
 80097ec:	6918      	ldr	r0, [r3, #16]
 80097ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80097f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80097f6:	6819      	ldr	r1, [r3, #0]
 80097f8:	f001 fc24 	bl	800b044 <uxr_buffer_delete_entity>
 80097fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009800:	6922      	ldr	r2, [r4, #16]
 8009802:	4603      	mov	r3, r0
 8009804:	6908      	ldr	r0, [r1, #16]
 8009806:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800980a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800980e:	6809      	ldr	r1, [r1, #0]
 8009810:	461c      	mov	r4, r3
 8009812:	f001 fc17 	bl	800b044 <uxr_buffer_delete_entity>
 8009816:	4606      	mov	r6, r0
 8009818:	6938      	ldr	r0, [r7, #16]
 800981a:	4622      	mov	r2, r4
 800981c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009820:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009824:	f000 fa0a 	bl	8009c3c <run_xrce_session>
 8009828:	4604      	mov	r4, r0
 800982a:	6938      	ldr	r0, [r7, #16]
 800982c:	4632      	mov	r2, r6
 800982e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009832:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009836:	f000 fa01 	bl	8009c3c <run_xrce_session>
 800983a:	b12c      	cbz	r4, 8009848 <rmw_destroy_publisher+0x9c>
 800983c:	b120      	cbz	r0, 8009848 <rmw_destroy_publisher+0x9c>
 800983e:	2400      	movs	r4, #0
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f94b 	bl	8009adc <rmw_uxrce_fini_publisher_memory>
 8009846:	e7ba      	b.n	80097be <rmw_destroy_publisher+0x12>
 8009848:	2402      	movs	r4, #2
 800984a:	e7f9      	b.n	8009840 <rmw_destroy_publisher+0x94>

0800984c <rmw_uxrce_init_service_memory>:
 800984c:	b1b2      	cbz	r2, 800987c <rmw_uxrce_init_service_memory+0x30>
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	7a07      	ldrb	r7, [r0, #8]
 8009852:	4605      	mov	r5, r0
 8009854:	b98f      	cbnz	r7, 800987a <rmw_uxrce_init_service_memory+0x2e>
 8009856:	e9c0 7700 	strd	r7, r7, [r0]
 800985a:	460c      	mov	r4, r1
 800985c:	23c8      	movs	r3, #200	@ 0xc8
 800985e:	2101      	movs	r1, #1
 8009860:	fb03 4602 	mla	r6, r3, r2, r4
 8009864:	60c3      	str	r3, [r0, #12]
 8009866:	7201      	strb	r1, [r0, #8]
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f005 fc5a 	bl	800f124 <put_memory>
 8009870:	60e4      	str	r4, [r4, #12]
 8009872:	f804 7bc8 	strb.w	r7, [r4], #200
 8009876:	42a6      	cmp	r6, r4
 8009878:	d1f6      	bne.n	8009868 <rmw_uxrce_init_service_memory+0x1c>
 800987a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop

08009880 <rmw_uxrce_init_client_memory>:
 8009880:	b1b2      	cbz	r2, 80098b0 <rmw_uxrce_init_client_memory+0x30>
 8009882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009884:	7a07      	ldrb	r7, [r0, #8]
 8009886:	4605      	mov	r5, r0
 8009888:	b98f      	cbnz	r7, 80098ae <rmw_uxrce_init_client_memory+0x2e>
 800988a:	e9c0 7700 	strd	r7, r7, [r0]
 800988e:	460c      	mov	r4, r1
 8009890:	23c8      	movs	r3, #200	@ 0xc8
 8009892:	2101      	movs	r1, #1
 8009894:	fb03 4602 	mla	r6, r3, r2, r4
 8009898:	60c3      	str	r3, [r0, #12]
 800989a:	7201      	strb	r1, [r0, #8]
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	f005 fc40 	bl	800f124 <put_memory>
 80098a4:	60e4      	str	r4, [r4, #12]
 80098a6:	f804 7bc8 	strb.w	r7, [r4], #200
 80098aa:	42a6      	cmp	r6, r4
 80098ac:	d1f6      	bne.n	800989c <rmw_uxrce_init_client_memory+0x1c>
 80098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop

080098b4 <rmw_uxrce_init_publisher_memory>:
 80098b4:	b1b2      	cbz	r2, 80098e4 <rmw_uxrce_init_publisher_memory+0x30>
 80098b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b8:	7a07      	ldrb	r7, [r0, #8]
 80098ba:	4605      	mov	r5, r0
 80098bc:	b98f      	cbnz	r7, 80098e2 <rmw_uxrce_init_publisher_memory+0x2e>
 80098be:	e9c0 7700 	strd	r7, r7, [r0]
 80098c2:	460c      	mov	r4, r1
 80098c4:	23d8      	movs	r3, #216	@ 0xd8
 80098c6:	2101      	movs	r1, #1
 80098c8:	fb03 4602 	mla	r6, r3, r2, r4
 80098cc:	60c3      	str	r3, [r0, #12]
 80098ce:	7201      	strb	r1, [r0, #8]
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f005 fc26 	bl	800f124 <put_memory>
 80098d8:	60e4      	str	r4, [r4, #12]
 80098da:	f804 7bd8 	strb.w	r7, [r4], #216
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d1f6      	bne.n	80098d0 <rmw_uxrce_init_publisher_memory+0x1c>
 80098e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop

080098e8 <rmw_uxrce_init_subscription_memory>:
 80098e8:	b1b2      	cbz	r2, 8009918 <rmw_uxrce_init_subscription_memory+0x30>
 80098ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ec:	7a07      	ldrb	r7, [r0, #8]
 80098ee:	4605      	mov	r5, r0
 80098f0:	b98f      	cbnz	r7, 8009916 <rmw_uxrce_init_subscription_memory+0x2e>
 80098f2:	e9c0 7700 	strd	r7, r7, [r0]
 80098f6:	460c      	mov	r4, r1
 80098f8:	23d0      	movs	r3, #208	@ 0xd0
 80098fa:	2101      	movs	r1, #1
 80098fc:	fb03 4602 	mla	r6, r3, r2, r4
 8009900:	60c3      	str	r3, [r0, #12]
 8009902:	7201      	strb	r1, [r0, #8]
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f005 fc0c 	bl	800f124 <put_memory>
 800990c:	60e4      	str	r4, [r4, #12]
 800990e:	f804 7bd0 	strb.w	r7, [r4], #208
 8009912:	42a6      	cmp	r6, r4
 8009914:	d1f6      	bne.n	8009904 <rmw_uxrce_init_subscription_memory+0x1c>
 8009916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop

0800991c <rmw_uxrce_init_node_memory>:
 800991c:	b1b2      	cbz	r2, 800994c <rmw_uxrce_init_node_memory+0x30>
 800991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009920:	7a07      	ldrb	r7, [r0, #8]
 8009922:	4605      	mov	r5, r0
 8009924:	b98f      	cbnz	r7, 800994a <rmw_uxrce_init_node_memory+0x2e>
 8009926:	e9c0 7700 	strd	r7, r7, [r0]
 800992a:	460c      	mov	r4, r1
 800992c:	23a4      	movs	r3, #164	@ 0xa4
 800992e:	2101      	movs	r1, #1
 8009930:	fb03 4602 	mla	r6, r3, r2, r4
 8009934:	60c3      	str	r3, [r0, #12]
 8009936:	7201      	strb	r1, [r0, #8]
 8009938:	4621      	mov	r1, r4
 800993a:	4628      	mov	r0, r5
 800993c:	f005 fbf2 	bl	800f124 <put_memory>
 8009940:	60e4      	str	r4, [r4, #12]
 8009942:	f804 7ba4 	strb.w	r7, [r4], #164
 8009946:	42a6      	cmp	r6, r4
 8009948:	d1f6      	bne.n	8009938 <rmw_uxrce_init_node_memory+0x1c>
 800994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <rmw_uxrce_init_session_memory>:
 8009950:	b1d2      	cbz	r2, 8009988 <rmw_uxrce_init_session_memory+0x38>
 8009952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009956:	7a07      	ldrb	r7, [r0, #8]
 8009958:	4605      	mov	r5, r0
 800995a:	b99f      	cbnz	r7, 8009984 <rmw_uxrce_init_session_memory+0x34>
 800995c:	e9c0 7700 	strd	r7, r7, [r0]
 8009960:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 8009964:	460c      	mov	r4, r1
 8009966:	2101      	movs	r1, #1
 8009968:	fb03 4602 	mla	r6, r3, r2, r4
 800996c:	60c3      	str	r3, [r0, #12]
 800996e:	4698      	mov	r8, r3
 8009970:	7201      	strb	r1, [r0, #8]
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f005 fbd5 	bl	800f124 <put_memory>
 800997a:	60e4      	str	r4, [r4, #12]
 800997c:	7027      	strb	r7, [r4, #0]
 800997e:	4444      	add	r4, r8
 8009980:	42a6      	cmp	r6, r4
 8009982:	d1f6      	bne.n	8009972 <rmw_uxrce_init_session_memory+0x22>
 8009984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop

0800998c <rmw_uxrce_init_topic_memory>:
 800998c:	b1c2      	cbz	r2, 80099c0 <rmw_uxrce_init_topic_memory+0x34>
 800998e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009990:	7a07      	ldrb	r7, [r0, #8]
 8009992:	4606      	mov	r6, r0
 8009994:	b99f      	cbnz	r7, 80099be <rmw_uxrce_init_topic_memory+0x32>
 8009996:	e9c0 7700 	strd	r7, r7, [r0]
 800999a:	460c      	mov	r4, r1
 800999c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80099a0:	2101      	movs	r1, #1
 80099a2:	231c      	movs	r3, #28
 80099a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099a8:	7201      	strb	r1, [r0, #8]
 80099aa:	60c3      	str	r3, [r0, #12]
 80099ac:	4621      	mov	r1, r4
 80099ae:	4630      	mov	r0, r6
 80099b0:	f005 fbb8 	bl	800f124 <put_memory>
 80099b4:	60e4      	str	r4, [r4, #12]
 80099b6:	f804 7b1c 	strb.w	r7, [r4], #28
 80099ba:	42a5      	cmp	r5, r4
 80099bc:	d1f6      	bne.n	80099ac <rmw_uxrce_init_topic_memory+0x20>
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop

080099c4 <rmw_uxrce_init_static_input_buffer_memory>:
 80099c4:	b1d2      	cbz	r2, 80099fc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80099c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c8:	7a07      	ldrb	r7, [r0, #8]
 80099ca:	4606      	mov	r6, r0
 80099cc:	b9af      	cbnz	r7, 80099fa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 80099ce:	e9c0 7700 	strd	r7, r7, [r0]
 80099d2:	460c      	mov	r4, r1
 80099d4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80099d8:	2101      	movs	r1, #1
 80099da:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80099de:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80099e2:	7201      	strb	r1, [r0, #8]
 80099e4:	60c3      	str	r3, [r0, #12]
 80099e6:	4621      	mov	r1, r4
 80099e8:	4630      	mov	r0, r6
 80099ea:	f005 fb9b 	bl	800f124 <put_memory>
 80099ee:	60e4      	str	r4, [r4, #12]
 80099f0:	7027      	strb	r7, [r4, #0]
 80099f2:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80099f6:	42a5      	cmp	r5, r4
 80099f8:	d1f5      	bne.n	80099e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop

08009a00 <rmw_uxrce_init_init_options_impl_memory>:
 8009a00:	b1b2      	cbz	r2, 8009a30 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8009a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a04:	7a07      	ldrb	r7, [r0, #8]
 8009a06:	4605      	mov	r5, r0
 8009a08:	b98f      	cbnz	r7, 8009a2e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 8009a0a:	e9c0 7700 	strd	r7, r7, [r0]
 8009a0e:	460c      	mov	r4, r1
 8009a10:	232c      	movs	r3, #44	@ 0x2c
 8009a12:	2101      	movs	r1, #1
 8009a14:	fb03 4602 	mla	r6, r3, r2, r4
 8009a18:	60c3      	str	r3, [r0, #12]
 8009a1a:	7201      	strb	r1, [r0, #8]
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f005 fb80 	bl	800f124 <put_memory>
 8009a24:	60e4      	str	r4, [r4, #12]
 8009a26:	f804 7b2c 	strb.w	r7, [r4], #44
 8009a2a:	42a6      	cmp	r6, r4
 8009a2c:	d1f6      	bne.n	8009a1c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 8009a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop

08009a34 <rmw_uxrce_init_wait_set_memory>:
 8009a34:	b1c2      	cbz	r2, 8009a68 <rmw_uxrce_init_wait_set_memory+0x34>
 8009a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a38:	7a07      	ldrb	r7, [r0, #8]
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	b99f      	cbnz	r7, 8009a66 <rmw_uxrce_init_wait_set_memory+0x32>
 8009a3e:	e9c0 7700 	strd	r7, r7, [r0]
 8009a42:	460c      	mov	r4, r1
 8009a44:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009a48:	2101      	movs	r1, #1
 8009a4a:	231c      	movs	r3, #28
 8009a4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a50:	7201      	strb	r1, [r0, #8]
 8009a52:	60c3      	str	r3, [r0, #12]
 8009a54:	4621      	mov	r1, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f005 fb64 	bl	800f124 <put_memory>
 8009a5c:	60e4      	str	r4, [r4, #12]
 8009a5e:	f804 7b1c 	strb.w	r7, [r4], #28
 8009a62:	42a5      	cmp	r5, r4
 8009a64:	d1f6      	bne.n	8009a54 <rmw_uxrce_init_wait_set_memory+0x20>
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop

08009a6c <rmw_uxrce_init_guard_condition_memory>:
 8009a6c:	b1b2      	cbz	r2, 8009a9c <rmw_uxrce_init_guard_condition_memory+0x30>
 8009a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a70:	7a07      	ldrb	r7, [r0, #8]
 8009a72:	4605      	mov	r5, r0
 8009a74:	b98f      	cbnz	r7, 8009a9a <rmw_uxrce_init_guard_condition_memory+0x2e>
 8009a76:	e9c0 7700 	strd	r7, r7, [r0]
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	2101      	movs	r1, #1
 8009a80:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8009a84:	7201      	strb	r1, [r0, #8]
 8009a86:	60c3      	str	r3, [r0, #12]
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f005 fb4a 	bl	800f124 <put_memory>
 8009a90:	60e4      	str	r4, [r4, #12]
 8009a92:	f804 7b20 	strb.w	r7, [r4], #32
 8009a96:	42a6      	cmp	r6, r4
 8009a98:	d1f6      	bne.n	8009a88 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop

08009aa0 <rmw_uxrce_fini_session_memory>:
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <rmw_uxrce_fini_session_memory+0x8>)
 8009aa4:	f005 bb3e 	b.w	800f124 <put_memory>
 8009aa8:	2000c628 	.word	0x2000c628

08009aac <rmw_uxrce_fini_node_memory>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	6800      	ldr	r0, [r0, #0]
 8009ab2:	b128      	cbz	r0, 8009ac0 <rmw_uxrce_fini_node_memory+0x14>
 8009ab4:	4b07      	ldr	r3, [pc, #28]	@ (8009ad4 <rmw_uxrce_fini_node_memory+0x28>)
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	f7f6 fb92 	bl	80001e0 <strcmp>
 8009abc:	b940      	cbnz	r0, 8009ad0 <rmw_uxrce_fini_node_memory+0x24>
 8009abe:	6020      	str	r0, [r4, #0]
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	b129      	cbz	r1, 8009ad0 <rmw_uxrce_fini_node_memory+0x24>
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	4804      	ldr	r0, [pc, #16]	@ (8009ad8 <rmw_uxrce_fini_node_memory+0x2c>)
 8009ac8:	610d      	str	r5, [r1, #16]
 8009aca:	f005 fb2b 	bl	800f124 <put_memory>
 8009ace:	6065      	str	r5, [r4, #4]
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08013634 	.word	0x08013634
 8009ad8:	2000c454 	.word	0x2000c454

08009adc <rmw_uxrce_fini_publisher_memory>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	6800      	ldr	r0, [r0, #0]
 8009ae2:	b128      	cbz	r0, 8009af0 <rmw_uxrce_fini_publisher_memory+0x14>
 8009ae4:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <rmw_uxrce_fini_publisher_memory+0x24>)
 8009ae6:	6819      	ldr	r1, [r3, #0]
 8009ae8:	f7f6 fb7a 	bl	80001e0 <strcmp>
 8009aec:	b938      	cbnz	r0, 8009afe <rmw_uxrce_fini_publisher_memory+0x22>
 8009aee:	6020      	str	r0, [r4, #0]
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	b121      	cbz	r1, 8009afe <rmw_uxrce_fini_publisher_memory+0x22>
 8009af4:	4803      	ldr	r0, [pc, #12]	@ (8009b04 <rmw_uxrce_fini_publisher_memory+0x28>)
 8009af6:	f005 fb15 	bl	800f124 <put_memory>
 8009afa:	2300      	movs	r3, #0
 8009afc:	6063      	str	r3, [r4, #4]
 8009afe:	bd10      	pop	{r4, pc}
 8009b00:	08013634 	.word	0x08013634
 8009b04:	20009490 	.word	0x20009490

08009b08 <rmw_uxrce_fini_subscription_memory>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	6800      	ldr	r0, [r0, #0]
 8009b0e:	b128      	cbz	r0, 8009b1c <rmw_uxrce_fini_subscription_memory+0x14>
 8009b10:	4b06      	ldr	r3, [pc, #24]	@ (8009b2c <rmw_uxrce_fini_subscription_memory+0x24>)
 8009b12:	6819      	ldr	r1, [r3, #0]
 8009b14:	f7f6 fb64 	bl	80001e0 <strcmp>
 8009b18:	b938      	cbnz	r0, 8009b2a <rmw_uxrce_fini_subscription_memory+0x22>
 8009b1a:	6020      	str	r0, [r4, #0]
 8009b1c:	6861      	ldr	r1, [r4, #4]
 8009b1e:	b121      	cbz	r1, 8009b2a <rmw_uxrce_fini_subscription_memory+0x22>
 8009b20:	4803      	ldr	r0, [pc, #12]	@ (8009b30 <rmw_uxrce_fini_subscription_memory+0x28>)
 8009b22:	f005 faff 	bl	800f124 <put_memory>
 8009b26:	2300      	movs	r3, #0
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	bd10      	pop	{r4, pc}
 8009b2c:	08013634 	.word	0x08013634
 8009b30:	2000c6ec 	.word	0x2000c6ec

08009b34 <rmw_uxrce_fini_service_memory>:
 8009b34:	b510      	push	{r4, lr}
 8009b36:	4604      	mov	r4, r0
 8009b38:	6800      	ldr	r0, [r0, #0]
 8009b3a:	b128      	cbz	r0, 8009b48 <rmw_uxrce_fini_service_memory+0x14>
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <rmw_uxrce_fini_service_memory+0x24>)
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	f7f6 fb4e 	bl	80001e0 <strcmp>
 8009b44:	b938      	cbnz	r0, 8009b56 <rmw_uxrce_fini_service_memory+0x22>
 8009b46:	6020      	str	r0, [r4, #0]
 8009b48:	6861      	ldr	r1, [r4, #4]
 8009b4a:	b121      	cbz	r1, 8009b56 <rmw_uxrce_fini_service_memory+0x22>
 8009b4c:	4803      	ldr	r0, [pc, #12]	@ (8009b5c <rmw_uxrce_fini_service_memory+0x28>)
 8009b4e:	f005 fae9 	bl	800f124 <put_memory>
 8009b52:	2300      	movs	r3, #0
 8009b54:	6063      	str	r3, [r4, #4]
 8009b56:	bd10      	pop	{r4, pc}
 8009b58:	08013634 	.word	0x08013634
 8009b5c:	2000c6dc 	.word	0x2000c6dc

08009b60 <rmw_uxrce_fini_client_memory>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	4604      	mov	r4, r0
 8009b64:	6800      	ldr	r0, [r0, #0]
 8009b66:	b128      	cbz	r0, 8009b74 <rmw_uxrce_fini_client_memory+0x14>
 8009b68:	4b06      	ldr	r3, [pc, #24]	@ (8009b84 <rmw_uxrce_fini_client_memory+0x24>)
 8009b6a:	6819      	ldr	r1, [r3, #0]
 8009b6c:	f7f6 fb38 	bl	80001e0 <strcmp>
 8009b70:	b938      	cbnz	r0, 8009b82 <rmw_uxrce_fini_client_memory+0x22>
 8009b72:	6020      	str	r0, [r4, #0]
 8009b74:	6861      	ldr	r1, [r4, #4]
 8009b76:	b121      	cbz	r1, 8009b82 <rmw_uxrce_fini_client_memory+0x22>
 8009b78:	4803      	ldr	r0, [pc, #12]	@ (8009b88 <rmw_uxrce_fini_client_memory+0x28>)
 8009b7a:	f005 fad3 	bl	800f124 <put_memory>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	bd10      	pop	{r4, pc}
 8009b84:	08013634 	.word	0x08013634
 8009b88:	20009d10 	.word	0x20009d10

08009b8c <rmw_uxrce_fini_topic_memory>:
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4604      	mov	r4, r0
 8009b92:	4803      	ldr	r0, [pc, #12]	@ (8009ba0 <rmw_uxrce_fini_topic_memory+0x14>)
 8009b94:	f005 fac6 	bl	800f124 <put_memory>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61a3      	str	r3, [r4, #24]
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000c618 	.word	0x2000c618

08009ba4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	b4f0      	push	{r4, r5, r6, r7}
 8009ba8:	4923      	ldr	r1, [pc, #140]	@ (8009c38 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8009baa:	ac04      	add	r4, sp, #16
 8009bac:	e884 000c 	stmia.w	r4, {r2, r3}
 8009bb0:	680d      	ldr	r5, [r1, #0]
 8009bb2:	9c05      	ldr	r4, [sp, #20]
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	d03d      	beq.n	8009c34 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8009bb8:	462b      	mov	r3, r5
 8009bba:	2100      	movs	r1, #0
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8009bc4:	4290      	cmp	r0, r2
 8009bc6:	bf08      	it	eq
 8009bc8:	3101      	addeq	r1, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1f6      	bne.n	8009bbc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8009bce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d026      	beq.n	8009c24 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8009bd6:	d906      	bls.n	8009be6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d004      	beq.n	8009be6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8009bdc:	2100      	movs	r1, #0
 8009bde:	bcf0      	pop	{r4, r5, r6, r7}
 8009be0:	4608      	mov	r0, r1
 8009be2:	b002      	add	sp, #8
 8009be4:	4770      	bx	lr
 8009be6:	b304      	cbz	r4, 8009c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009be8:	428c      	cmp	r4, r1
 8009bea:	d81e      	bhi.n	8009c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	d0f5      	beq.n	8009bdc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009bf6:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8009bfa:	e002      	b.n	8009c02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8009bfc:	68ad      	ldr	r5, [r5, #8]
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	d0ed      	beq.n	8009bde <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009c02:	68eb      	ldr	r3, [r5, #12]
 8009c04:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8009c08:	4290      	cmp	r0, r2
 8009c0a:	d1f7      	bne.n	8009bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8009c0c:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	42b2      	cmp	r2, r6
 8009c16:	eb73 0407 	sbcs.w	r4, r3, r7
 8009c1a:	daef      	bge.n	8009bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8009c1c:	4616      	mov	r6, r2
 8009c1e:	461f      	mov	r7, r3
 8009c20:	4629      	mov	r1, r5
 8009c22:	e7eb      	b.n	8009bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8009c24:	b10c      	cbz	r4, 8009c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009c26:	428c      	cmp	r4, r1
 8009c28:	d9d8      	bls.n	8009bdc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8009c2c:	4802      	ldr	r0, [pc, #8]	@ (8009c38 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8009c2e:	b002      	add	sp, #8
 8009c30:	f005 ba68 	b.w	800f104 <get_memory>
 8009c34:	4629      	mov	r1, r5
 8009c36:	e7ca      	b.n	8009bce <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009c38:	20009480 	.word	0x20009480

08009c3c <run_xrce_session>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	788c      	ldrb	r4, [r1, #2]
 8009c40:	b086      	sub	sp, #24
 8009c42:	2c01      	cmp	r4, #1
 8009c44:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009c48:	d00c      	beq.n	8009c64 <run_xrce_session+0x28>
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	f10d 020e 	add.w	r2, sp, #14
 8009c54:	f10d 0317 	add.w	r3, sp, #23
 8009c58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c5c:	f002 f83e 	bl	800bcdc <uxr_run_session_until_all_status>
 8009c60:	b006      	add	sp, #24
 8009c62:	bd10      	pop	{r4, pc}
 8009c64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c68:	f001 fc90 	bl	800b58c <uxr_flash_output_streams>
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	b006      	add	sp, #24
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	bf00      	nop

08009c74 <convert_qos_profile>:
 8009c74:	b430      	push	{r4, r5}
 8009c76:	7a0d      	ldrb	r5, [r1, #8]
 8009c78:	780c      	ldrb	r4, [r1, #0]
 8009c7a:	7a4a      	ldrb	r2, [r1, #9]
 8009c7c:	8889      	ldrh	r1, [r1, #4]
 8009c7e:	8081      	strh	r1, [r0, #4]
 8009c80:	f1a5 0502 	sub.w	r5, r5, #2
 8009c84:	f1a4 0402 	sub.w	r4, r4, #2
 8009c88:	2a02      	cmp	r2, #2
 8009c8a:	fab5 f585 	clz	r5, r5
 8009c8e:	fab4 f484 	clz	r4, r4
 8009c92:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009c96:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009c9a:	bf18      	it	ne
 8009c9c:	2200      	movne	r2, #0
 8009c9e:	7045      	strb	r5, [r0, #1]
 8009ca0:	7084      	strb	r4, [r0, #2]
 8009ca2:	7002      	strb	r2, [r0, #0]
 8009ca4:	bc30      	pop	{r4, r5}
 8009ca6:	4770      	bx	lr

08009ca8 <generate_type_name>:
 8009ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009caa:	2300      	movs	r3, #0
 8009cac:	700b      	strb	r3, [r1, #0]
 8009cae:	6803      	ldr	r3, [r0, #0]
 8009cb0:	b087      	sub	sp, #28
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	b1d3      	cbz	r3, 8009cec <generate_type_name+0x44>
 8009cb6:	4d0f      	ldr	r5, [pc, #60]	@ (8009cf4 <generate_type_name+0x4c>)
 8009cb8:	462f      	mov	r7, r5
 8009cba:	4a0f      	ldr	r2, [pc, #60]	@ (8009cf8 <generate_type_name+0x50>)
 8009cbc:	4e0f      	ldr	r6, [pc, #60]	@ (8009cfc <generate_type_name+0x54>)
 8009cbe:	6840      	ldr	r0, [r0, #4]
 8009cc0:	9004      	str	r0, [sp, #16]
 8009cc2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	9205      	str	r2, [sp, #20]
 8009cca:	9503      	str	r5, [sp, #12]
 8009ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8009d00 <generate_type_name+0x58>)
 8009cce:	9700      	str	r7, [sp, #0]
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f008 f90f 	bl	8011ef4 <sniprintf>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	db05      	blt.n	8009ce6 <generate_type_name+0x3e>
 8009cda:	4284      	cmp	r4, r0
 8009cdc:	bfd4      	ite	le
 8009cde:	2000      	movle	r0, #0
 8009ce0:	2001      	movgt	r0, #1
 8009ce2:	b007      	add	sp, #28
 8009ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	b007      	add	sp, #28
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <generate_type_name+0x5c>)
 8009cee:	4d01      	ldr	r5, [pc, #4]	@ (8009cf4 <generate_type_name+0x4c>)
 8009cf0:	461f      	mov	r7, r3
 8009cf2:	e7e2      	b.n	8009cba <generate_type_name+0x12>
 8009cf4:	0801314c 	.word	0x0801314c
 8009cf8:	08013160 	.word	0x08013160
 8009cfc:	08013164 	.word	0x08013164
 8009d00:	08013150 	.word	0x08013150
 8009d04:	0801340c 	.word	0x0801340c

08009d08 <generate_topic_name>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	4b09      	ldr	r3, [pc, #36]	@ (8009d34 <generate_topic_name+0x2c>)
 8009d0e:	9000      	str	r0, [sp, #0]
 8009d10:	4614      	mov	r4, r2
 8009d12:	4608      	mov	r0, r1
 8009d14:	4611      	mov	r1, r2
 8009d16:	4a08      	ldr	r2, [pc, #32]	@ (8009d38 <generate_topic_name+0x30>)
 8009d18:	f008 f8ec 	bl	8011ef4 <sniprintf>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	db05      	blt.n	8009d2c <generate_topic_name+0x24>
 8009d20:	4284      	cmp	r4, r0
 8009d22:	bfd4      	ite	le
 8009d24:	2000      	movle	r0, #0
 8009d26:	2001      	movgt	r0, #1
 8009d28:	b002      	add	sp, #8
 8009d2a:	bd10      	pop	{r4, pc}
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	b002      	add	sp, #8
 8009d30:	bd10      	pop	{r4, pc}
 8009d32:	bf00      	nop
 8009d34:	08013170 	.word	0x08013170
 8009d38:	08013168 	.word	0x08013168

08009d3c <is_uxrce_rmw_identifier_valid>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	b140      	cbz	r0, 8009d54 <is_uxrce_rmw_identifier_valid+0x18>
 8009d42:	f005 fa03 	bl	800f14c <rmw_get_implementation_identifier>
 8009d46:	4601      	mov	r1, r0
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7f6 fa49 	bl	80001e0 <strcmp>
 8009d4e:	fab0 f080 	clz	r0, r0
 8009d52:	0940      	lsrs	r0, r0, #5
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	bf00      	nop

08009d58 <get_message_typesupport_handle>:
 8009d58:	6883      	ldr	r3, [r0, #8]
 8009d5a:	4718      	bx	r3

08009d5c <get_message_typesupport_handle_function>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	6800      	ldr	r0, [r0, #0]
 8009d62:	f7f6 fa3d 	bl	80001e0 <strcmp>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	bf0c      	ite	eq
 8009d6a:	4620      	moveq	r0, r4
 8009d6c:	2000      	movne	r0, #0
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009d70:	f000 b88a 	b.w	8009e88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>

08009d74 <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 8009d74:	b1e0      	cbz	r0, 8009db0 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 8009d76:	b570      	push	{r4, r5, r6, lr}
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	2104      	movs	r1, #4
 8009d7e:	f001 f8f5 	bl	800af6c <ucdr_alignment>
 8009d82:	1d2b      	adds	r3, r5, #4
 8009d84:	181e      	adds	r6, r3, r0
 8009d86:	4630      	mov	r0, r6
 8009d88:	2104      	movs	r1, #4
 8009d8a:	f001 f8ef 	bl	800af6c <ucdr_alignment>
 8009d8e:	1d04      	adds	r4, r0, #4
 8009d90:	4434      	add	r4, r6
 8009d92:	4620      	mov	r0, r4
 8009d94:	2104      	movs	r1, #4
 8009d96:	f001 f8e9 	bl	800af6c <ucdr_alignment>
 8009d9a:	3004      	adds	r0, #4
 8009d9c:	4404      	add	r4, r0
 8009d9e:	4620      	mov	r0, r4
 8009da0:	2104      	movs	r1, #4
 8009da2:	f001 f8e3 	bl	800af6c <ucdr_alignment>
 8009da6:	f1c5 0504 	rsb	r5, r5, #4
 8009daa:	4428      	add	r0, r5
 8009dac:	4420      	add	r0, r4
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop

08009db4 <_EncoderMsg__cdr_deserialize>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	460c      	mov	r4, r1
 8009db8:	b191      	cbz	r1, 8009de0 <_EncoderMsg__cdr_deserialize+0x2c>
 8009dba:	4605      	mov	r5, r0
 8009dbc:	f000 fff0 	bl	800ada0 <ucdr_deserialize_float>
 8009dc0:	1d21      	adds	r1, r4, #4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 ffec 	bl	800ada0 <ucdr_deserialize_float>
 8009dc8:	f104 0108 	add.w	r1, r4, #8
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f000 ffe7 	bl	800ada0 <ucdr_deserialize_float>
 8009dd2:	f104 010c 	add.w	r1, r4, #12
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ddc:	f000 bfe0 	b.w	800ada0 <ucdr_deserialize_float>
 8009de0:	4608      	mov	r0, r1
 8009de2:	bd38      	pop	{r3, r4, r5, pc}

08009de4 <_EncoderMsg__cdr_serialize>:
 8009de4:	b1c0      	cbz	r0, 8009e18 <_EncoderMsg__cdr_serialize+0x34>
 8009de6:	b538      	push	{r3, r4, r5, lr}
 8009de8:	ed90 0a00 	vldr	s0, [r0]
 8009dec:	460d      	mov	r5, r1
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	f000 ff3d 	bl	800ac70 <ucdr_serialize_float>
 8009df6:	ed94 0a01 	vldr	s0, [r4, #4]
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f000 ff38 	bl	800ac70 <ucdr_serialize_float>
 8009e00:	ed94 0a02 	vldr	s0, [r4, #8]
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 ff33 	bl	800ac70 <ucdr_serialize_float>
 8009e0a:	ed94 0a03 	vldr	s0, [r4, #12]
 8009e0e:	4628      	mov	r0, r5
 8009e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e14:	f000 bf2c 	b.w	800ac70 <ucdr_serialize_float>
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop

08009e1c <_EncoderMsg__get_serialized_size>:
 8009e1c:	b1c0      	cbz	r0, 8009e50 <_EncoderMsg__get_serialized_size+0x34>
 8009e1e:	b538      	push	{r3, r4, r5, lr}
 8009e20:	2104      	movs	r1, #4
 8009e22:	2000      	movs	r0, #0
 8009e24:	f001 f8a2 	bl	800af6c <ucdr_alignment>
 8009e28:	1d05      	adds	r5, r0, #4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	2104      	movs	r1, #4
 8009e2e:	f001 f89d 	bl	800af6c <ucdr_alignment>
 8009e32:	1d04      	adds	r4, r0, #4
 8009e34:	442c      	add	r4, r5
 8009e36:	4620      	mov	r0, r4
 8009e38:	2104      	movs	r1, #4
 8009e3a:	f001 f897 	bl	800af6c <ucdr_alignment>
 8009e3e:	3004      	adds	r0, #4
 8009e40:	4404      	add	r4, r0
 8009e42:	4620      	mov	r0, r4
 8009e44:	2104      	movs	r1, #4
 8009e46:	f001 f891 	bl	800af6c <ucdr_alignment>
 8009e4a:	3004      	adds	r0, #4
 8009e4c:	4420      	add	r0, r4
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <_EncoderMsg__max_serialized_size>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	2104      	movs	r1, #4
 8009e58:	2000      	movs	r0, #0
 8009e5a:	f001 f887 	bl	800af6c <ucdr_alignment>
 8009e5e:	1d05      	adds	r5, r0, #4
 8009e60:	4628      	mov	r0, r5
 8009e62:	2104      	movs	r1, #4
 8009e64:	f001 f882 	bl	800af6c <ucdr_alignment>
 8009e68:	1d04      	adds	r4, r0, #4
 8009e6a:	442c      	add	r4, r5
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	2104      	movs	r1, #4
 8009e70:	f001 f87c 	bl	800af6c <ucdr_alignment>
 8009e74:	3004      	adds	r0, #4
 8009e76:	4404      	add	r4, r0
 8009e78:	4620      	mov	r0, r4
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	f001 f876 	bl	800af6c <ucdr_alignment>
 8009e80:	3004      	adds	r0, #4
 8009e82:	4420      	add	r0, r4
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop

08009e88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009e88:	4800      	ldr	r0, [pc, #0]	@ (8009e8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 8009e8a:	4770      	bx	lr
 8009e8c:	2000002c 	.word	0x2000002c

08009e90 <ucdr_serialize_bool>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	460d      	mov	r5, r1
 8009e94:	2101      	movs	r1, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	f001 f81e 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009e9c:	b148      	cbz	r0, 8009eb2 <ucdr_serialize_bool+0x22>
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	701d      	strb	r5, [r3, #0]
 8009ea2:	68a2      	ldr	r2, [r4, #8]
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	3201      	adds	r2, #1
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	2101      	movs	r1, #1
 8009eac:	60a2      	str	r2, [r4, #8]
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	7561      	strb	r1, [r4, #21]
 8009eb2:	7da0      	ldrb	r0, [r4, #22]
 8009eb4:	f080 0001 	eor.w	r0, r0, #1
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop

08009ebc <ucdr_deserialize_bool>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f001 f808 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009ec8:	b168      	cbz	r0, 8009ee6 <ucdr_deserialize_bool+0x2a>
 8009eca:	68a2      	ldr	r2, [r4, #8]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009ed2:	3900      	subs	r1, #0
 8009ed4:	f103 0301 	add.w	r3, r3, #1
 8009ed8:	bf18      	it	ne
 8009eda:	2101      	movne	r1, #1
 8009edc:	2001      	movs	r0, #1
 8009ede:	7029      	strb	r1, [r5, #0]
 8009ee0:	60a2      	str	r2, [r4, #8]
 8009ee2:	6123      	str	r3, [r4, #16]
 8009ee4:	7560      	strb	r0, [r4, #21]
 8009ee6:	7da0      	ldrb	r0, [r4, #22]
 8009ee8:	f080 0001 	eor.w	r0, r0, #1
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
 8009eee:	bf00      	nop

08009ef0 <ucdr_serialize_uint8_t>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	f000 ffee 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009efc:	b148      	cbz	r0, 8009f12 <ucdr_serialize_uint8_t+0x22>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	701d      	strb	r5, [r3, #0]
 8009f02:	68a2      	ldr	r2, [r4, #8]
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	3201      	adds	r2, #1
 8009f08:	3301      	adds	r3, #1
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	60a2      	str	r2, [r4, #8]
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	7561      	strb	r1, [r4, #21]
 8009f12:	7da0      	ldrb	r0, [r4, #22]
 8009f14:	f080 0001 	eor.w	r0, r0, #1
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	bf00      	nop

08009f1c <ucdr_deserialize_uint8_t>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	460d      	mov	r5, r1
 8009f20:	2101      	movs	r1, #1
 8009f22:	4604      	mov	r4, r0
 8009f24:	f000 ffd8 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009f28:	b150      	cbz	r0, 8009f40 <ucdr_deserialize_uint8_t+0x24>
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	702b      	strb	r3, [r5, #0]
 8009f30:	68a2      	ldr	r2, [r4, #8]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	3201      	adds	r2, #1
 8009f36:	3301      	adds	r3, #1
 8009f38:	2101      	movs	r1, #1
 8009f3a:	60a2      	str	r2, [r4, #8]
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	7561      	strb	r1, [r4, #21]
 8009f40:	7da0      	ldrb	r0, [r4, #22]
 8009f42:	f080 0001 	eor.w	r0, r0, #1
 8009f46:	bd38      	pop	{r3, r4, r5, pc}

08009f48 <ucdr_serialize_uint16_t>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	460b      	mov	r3, r1
 8009f50:	2102      	movs	r1, #2
 8009f52:	4604      	mov	r4, r0
 8009f54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f58:	f001 f810 	bl	800af7c <ucdr_buffer_alignment>
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	7d67      	ldrb	r7, [r4, #21]
 8009f62:	f001 f84f 	bl	800b004 <ucdr_advance_buffer>
 8009f66:	4620      	mov	r0, r4
 8009f68:	2102      	movs	r1, #2
 8009f6a:	f000 ffa9 	bl	800aec0 <ucdr_check_buffer_available_for>
 8009f6e:	bb78      	cbnz	r0, 8009fd0 <ucdr_serialize_uint16_t+0x88>
 8009f70:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009f74:	42b5      	cmp	r5, r6
 8009f76:	d926      	bls.n	8009fc6 <ucdr_serialize_uint16_t+0x7e>
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	60a5      	str	r5, [r4, #8]
 8009f7c:	1bad      	subs	r5, r5, r6
 8009f7e:	442a      	add	r2, r5
 8009f80:	f1c5 0802 	rsb	r8, r5, #2
 8009f84:	6122      	str	r2, [r4, #16]
 8009f86:	4641      	mov	r1, r8
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 ffa5 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d03b      	beq.n	800a00a <ucdr_serialize_uint16_t+0xc2>
 8009f92:	7d23      	ldrb	r3, [r4, #20]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d04a      	beq.n	800a02e <ucdr_serialize_uint16_t+0xe6>
 8009f98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f9c:	7033      	strb	r3, [r6, #0]
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	d040      	beq.n	800a024 <ucdr_serialize_uint16_t+0xdc>
 8009fa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009fa6:	7073      	strb	r3, [r6, #1]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	68a2      	ldr	r2, [r4, #8]
 8009fac:	7da0      	ldrb	r0, [r4, #22]
 8009fae:	3302      	adds	r3, #2
 8009fb0:	1b5b      	subs	r3, r3, r5
 8009fb2:	4442      	add	r2, r8
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	f080 0001 	eor.w	r0, r0, #1
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	60a2      	str	r2, [r4, #8]
 8009fbe:	7561      	strb	r1, [r4, #21]
 8009fc0:	b002      	add	sp, #8
 8009fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc6:	2102      	movs	r1, #2
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 ff85 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 8009fce:	b190      	cbz	r0, 8009ff6 <ucdr_serialize_uint16_t+0xae>
 8009fd0:	7d23      	ldrb	r3, [r4, #20]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	d014      	beq.n	800a002 <ucdr_serialize_uint16_t+0xba>
 8009fd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009fe4:	705a      	strb	r2, [r3, #1]
 8009fe6:	68a2      	ldr	r2, [r4, #8]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	3202      	adds	r2, #2
 8009fec:	3302      	adds	r3, #2
 8009fee:	2102      	movs	r1, #2
 8009ff0:	60a2      	str	r2, [r4, #8]
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	7561      	strb	r1, [r4, #21]
 8009ff6:	7da0      	ldrb	r0, [r4, #22]
 8009ff8:	f080 0001 	eor.w	r0, r0, #1
 8009ffc:	b002      	add	sp, #8
 8009ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a002:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	e7ed      	b.n	8009fe6 <ucdr_serialize_uint16_t+0x9e>
 800a00a:	68a2      	ldr	r2, [r4, #8]
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	7da0      	ldrb	r0, [r4, #22]
 800a010:	7567      	strb	r7, [r4, #21]
 800a012:	1b52      	subs	r2, r2, r5
 800a014:	1b5b      	subs	r3, r3, r5
 800a016:	f080 0001 	eor.w	r0, r0, #1
 800a01a:	60a2      	str	r2, [r4, #8]
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	b002      	add	sp, #8
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	68a3      	ldr	r3, [r4, #8]
 800a026:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	e7bc      	b.n	8009fa8 <ucdr_serialize_uint16_t+0x60>
 800a02e:	4630      	mov	r0, r6
 800a030:	f10d 0606 	add.w	r6, sp, #6
 800a034:	4631      	mov	r1, r6
 800a036:	462a      	mov	r2, r5
 800a038:	f008 f8d5 	bl	80121e6 <memcpy>
 800a03c:	68a0      	ldr	r0, [r4, #8]
 800a03e:	4642      	mov	r2, r8
 800a040:	1971      	adds	r1, r6, r5
 800a042:	f008 f8d0 	bl	80121e6 <memcpy>
 800a046:	e7af      	b.n	8009fa8 <ucdr_serialize_uint16_t+0x60>

0800a048 <ucdr_serialize_endian_uint16_t>:
 800a048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a04c:	b083      	sub	sp, #12
 800a04e:	460d      	mov	r5, r1
 800a050:	2102      	movs	r1, #2
 800a052:	4604      	mov	r4, r0
 800a054:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a058:	f000 ff90 	bl	800af7c <ucdr_buffer_alignment>
 800a05c:	4601      	mov	r1, r0
 800a05e:	4620      	mov	r0, r4
 800a060:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a064:	f000 ffce 	bl	800b004 <ucdr_advance_buffer>
 800a068:	4620      	mov	r0, r4
 800a06a:	2102      	movs	r1, #2
 800a06c:	f000 ff28 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a070:	bb70      	cbnz	r0, 800a0d0 <ucdr_serialize_endian_uint16_t+0x88>
 800a072:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a076:	42be      	cmp	r6, r7
 800a078:	d925      	bls.n	800a0c6 <ucdr_serialize_endian_uint16_t+0x7e>
 800a07a:	6922      	ldr	r2, [r4, #16]
 800a07c:	60a6      	str	r6, [r4, #8]
 800a07e:	1bf6      	subs	r6, r6, r7
 800a080:	4432      	add	r2, r6
 800a082:	f1c6 0902 	rsb	r9, r6, #2
 800a086:	6122      	str	r2, [r4, #16]
 800a088:	4649      	mov	r1, r9
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 ff24 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a090:	2800      	cmp	r0, #0
 800a092:	d039      	beq.n	800a108 <ucdr_serialize_endian_uint16_t+0xc0>
 800a094:	2d01      	cmp	r5, #1
 800a096:	d04a      	beq.n	800a12e <ucdr_serialize_endian_uint16_t+0xe6>
 800a098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a09c:	703b      	strb	r3, [r7, #0]
 800a09e:	2e00      	cmp	r6, #0
 800a0a0:	d040      	beq.n	800a124 <ucdr_serialize_endian_uint16_t+0xdc>
 800a0a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a0a6:	707b      	strb	r3, [r7, #1]
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	68a2      	ldr	r2, [r4, #8]
 800a0ac:	7da0      	ldrb	r0, [r4, #22]
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	1b9b      	subs	r3, r3, r6
 800a0b2:	444a      	add	r2, r9
 800a0b4:	2102      	movs	r1, #2
 800a0b6:	f080 0001 	eor.w	r0, r0, #1
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	60a2      	str	r2, [r4, #8]
 800a0be:	7561      	strb	r1, [r4, #21]
 800a0c0:	b003      	add	sp, #12
 800a0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 ff05 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a0ce:	b188      	cbz	r0, 800a0f4 <ucdr_serialize_endian_uint16_t+0xac>
 800a0d0:	2d01      	cmp	r5, #1
 800a0d2:	68a3      	ldr	r3, [r4, #8]
 800a0d4:	d014      	beq.n	800a100 <ucdr_serialize_endian_uint16_t+0xb8>
 800a0d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	68a3      	ldr	r3, [r4, #8]
 800a0de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0e2:	705a      	strb	r2, [r3, #1]
 800a0e4:	68a2      	ldr	r2, [r4, #8]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	2102      	movs	r1, #2
 800a0ee:	60a2      	str	r2, [r4, #8]
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	7561      	strb	r1, [r4, #21]
 800a0f4:	7da0      	ldrb	r0, [r4, #22]
 800a0f6:	f080 0001 	eor.w	r0, r0, #1
 800a0fa:	b003      	add	sp, #12
 800a0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a100:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	e7ed      	b.n	800a0e4 <ucdr_serialize_endian_uint16_t+0x9c>
 800a108:	68a2      	ldr	r2, [r4, #8]
 800a10a:	6923      	ldr	r3, [r4, #16]
 800a10c:	7da0      	ldrb	r0, [r4, #22]
 800a10e:	f884 8015 	strb.w	r8, [r4, #21]
 800a112:	1b92      	subs	r2, r2, r6
 800a114:	1b9b      	subs	r3, r3, r6
 800a116:	f080 0001 	eor.w	r0, r0, #1
 800a11a:	60a2      	str	r2, [r4, #8]
 800a11c:	6123      	str	r3, [r4, #16]
 800a11e:	b003      	add	sp, #12
 800a120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a124:	68a3      	ldr	r3, [r4, #8]
 800a126:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	e7bc      	b.n	800a0a8 <ucdr_serialize_endian_uint16_t+0x60>
 800a12e:	f10d 0506 	add.w	r5, sp, #6
 800a132:	4629      	mov	r1, r5
 800a134:	4632      	mov	r2, r6
 800a136:	4638      	mov	r0, r7
 800a138:	f008 f855 	bl	80121e6 <memcpy>
 800a13c:	68a0      	ldr	r0, [r4, #8]
 800a13e:	464a      	mov	r2, r9
 800a140:	19a9      	adds	r1, r5, r6
 800a142:	f008 f850 	bl	80121e6 <memcpy>
 800a146:	e7af      	b.n	800a0a8 <ucdr_serialize_endian_uint16_t+0x60>

0800a148 <ucdr_deserialize_uint16_t>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	460d      	mov	r5, r1
 800a14e:	2102      	movs	r1, #2
 800a150:	4604      	mov	r4, r0
 800a152:	f000 ff13 	bl	800af7c <ucdr_buffer_alignment>
 800a156:	4601      	mov	r1, r0
 800a158:	4620      	mov	r0, r4
 800a15a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a15e:	f000 ff51 	bl	800b004 <ucdr_advance_buffer>
 800a162:	4620      	mov	r0, r4
 800a164:	2102      	movs	r1, #2
 800a166:	f000 feab 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a16a:	bb60      	cbnz	r0, 800a1c6 <ucdr_deserialize_uint16_t+0x7e>
 800a16c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a170:	42be      	cmp	r6, r7
 800a172:	d923      	bls.n	800a1bc <ucdr_deserialize_uint16_t+0x74>
 800a174:	6922      	ldr	r2, [r4, #16]
 800a176:	60a6      	str	r6, [r4, #8]
 800a178:	1bf6      	subs	r6, r6, r7
 800a17a:	4432      	add	r2, r6
 800a17c:	f1c6 0902 	rsb	r9, r6, #2
 800a180:	6122      	str	r2, [r4, #16]
 800a182:	4649      	mov	r1, r9
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fea7 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d034      	beq.n	800a1f8 <ucdr_deserialize_uint16_t+0xb0>
 800a18e:	7d23      	ldrb	r3, [r4, #20]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d042      	beq.n	800a21a <ucdr_deserialize_uint16_t+0xd2>
 800a194:	787b      	ldrb	r3, [r7, #1]
 800a196:	702b      	strb	r3, [r5, #0]
 800a198:	2e00      	cmp	r6, #0
 800a19a:	d03a      	beq.n	800a212 <ucdr_deserialize_uint16_t+0xca>
 800a19c:	783b      	ldrb	r3, [r7, #0]
 800a19e:	706b      	strb	r3, [r5, #1]
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	68a2      	ldr	r2, [r4, #8]
 800a1a4:	7da0      	ldrb	r0, [r4, #22]
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	1b9b      	subs	r3, r3, r6
 800a1ac:	444a      	add	r2, r9
 800a1ae:	7561      	strb	r1, [r4, #21]
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	60a2      	str	r2, [r4, #8]
 800a1b4:	f080 0001 	eor.w	r0, r0, #1
 800a1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1bc:	2102      	movs	r1, #2
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f000 fe8a 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a1c4:	b180      	cbz	r0, 800a1e8 <ucdr_deserialize_uint16_t+0xa0>
 800a1c6:	7d23      	ldrb	r3, [r4, #20]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	d011      	beq.n	800a1f2 <ucdr_deserialize_uint16_t+0xaa>
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	702b      	strb	r3, [r5, #0]
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	706b      	strb	r3, [r5, #1]
 800a1d8:	68a2      	ldr	r2, [r4, #8]
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	3202      	adds	r2, #2
 800a1de:	3302      	adds	r3, #2
 800a1e0:	2102      	movs	r1, #2
 800a1e2:	60a2      	str	r2, [r4, #8]
 800a1e4:	6123      	str	r3, [r4, #16]
 800a1e6:	7561      	strb	r1, [r4, #21]
 800a1e8:	7da0      	ldrb	r0, [r4, #22]
 800a1ea:	f080 0001 	eor.w	r0, r0, #1
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	802b      	strh	r3, [r5, #0]
 800a1f6:	e7ef      	b.n	800a1d8 <ucdr_deserialize_uint16_t+0x90>
 800a1f8:	68a2      	ldr	r2, [r4, #8]
 800a1fa:	6923      	ldr	r3, [r4, #16]
 800a1fc:	7da0      	ldrb	r0, [r4, #22]
 800a1fe:	f884 8015 	strb.w	r8, [r4, #21]
 800a202:	1b92      	subs	r2, r2, r6
 800a204:	1b9b      	subs	r3, r3, r6
 800a206:	60a2      	str	r2, [r4, #8]
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	f080 0001 	eor.w	r0, r0, #1
 800a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	706b      	strb	r3, [r5, #1]
 800a218:	e7c2      	b.n	800a1a0 <ucdr_deserialize_uint16_t+0x58>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4632      	mov	r2, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	f007 ffe1 	bl	80121e6 <memcpy>
 800a224:	68a1      	ldr	r1, [r4, #8]
 800a226:	464a      	mov	r2, r9
 800a228:	19a8      	adds	r0, r5, r6
 800a22a:	f007 ffdc 	bl	80121e6 <memcpy>
 800a22e:	e7b7      	b.n	800a1a0 <ucdr_deserialize_uint16_t+0x58>

0800a230 <ucdr_deserialize_endian_uint16_t>:
 800a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a234:	460e      	mov	r6, r1
 800a236:	2102      	movs	r1, #2
 800a238:	4604      	mov	r4, r0
 800a23a:	4615      	mov	r5, r2
 800a23c:	f000 fe9e 	bl	800af7c <ucdr_buffer_alignment>
 800a240:	4601      	mov	r1, r0
 800a242:	4620      	mov	r0, r4
 800a244:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a248:	f000 fedc 	bl	800b004 <ucdr_advance_buffer>
 800a24c:	4620      	mov	r0, r4
 800a24e:	2102      	movs	r1, #2
 800a250:	f000 fe36 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a254:	bb70      	cbnz	r0, 800a2b4 <ucdr_deserialize_endian_uint16_t+0x84>
 800a256:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a25a:	4547      	cmp	r7, r8
 800a25c:	d925      	bls.n	800a2aa <ucdr_deserialize_endian_uint16_t+0x7a>
 800a25e:	6922      	ldr	r2, [r4, #16]
 800a260:	60a7      	str	r7, [r4, #8]
 800a262:	eba7 0708 	sub.w	r7, r7, r8
 800a266:	443a      	add	r2, r7
 800a268:	f1c7 0a02 	rsb	sl, r7, #2
 800a26c:	6122      	str	r2, [r4, #16]
 800a26e:	4651      	mov	r1, sl
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fe31 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a276:	2800      	cmp	r0, #0
 800a278:	d034      	beq.n	800a2e4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a27a:	2e01      	cmp	r6, #1
 800a27c:	d043      	beq.n	800a306 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a27e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a282:	702b      	strb	r3, [r5, #0]
 800a284:	2f00      	cmp	r7, #0
 800a286:	d03a      	beq.n	800a2fe <ucdr_deserialize_endian_uint16_t+0xce>
 800a288:	f898 3000 	ldrb.w	r3, [r8]
 800a28c:	706b      	strb	r3, [r5, #1]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	68a2      	ldr	r2, [r4, #8]
 800a292:	7da0      	ldrb	r0, [r4, #22]
 800a294:	2102      	movs	r1, #2
 800a296:	3302      	adds	r3, #2
 800a298:	1bdb      	subs	r3, r3, r7
 800a29a:	4452      	add	r2, sl
 800a29c:	7561      	strb	r1, [r4, #21]
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	60a2      	str	r2, [r4, #8]
 800a2a2:	f080 0001 	eor.w	r0, r0, #1
 800a2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2aa:	2102      	movs	r1, #2
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fe13 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a2b2:	b178      	cbz	r0, 800a2d4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a2b4:	2e01      	cmp	r6, #1
 800a2b6:	68a3      	ldr	r3, [r4, #8]
 800a2b8:	d011      	beq.n	800a2de <ucdr_deserialize_endian_uint16_t+0xae>
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	702b      	strb	r3, [r5, #0]
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	706b      	strb	r3, [r5, #1]
 800a2c4:	68a2      	ldr	r2, [r4, #8]
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	3202      	adds	r2, #2
 800a2ca:	3302      	adds	r3, #2
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	60a2      	str	r2, [r4, #8]
 800a2d0:	6123      	str	r3, [r4, #16]
 800a2d2:	7561      	strb	r1, [r4, #21]
 800a2d4:	7da0      	ldrb	r0, [r4, #22]
 800a2d6:	f080 0001 	eor.w	r0, r0, #1
 800a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	802b      	strh	r3, [r5, #0]
 800a2e2:	e7ef      	b.n	800a2c4 <ucdr_deserialize_endian_uint16_t+0x94>
 800a2e4:	68a2      	ldr	r2, [r4, #8]
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	7da0      	ldrb	r0, [r4, #22]
 800a2ea:	f884 9015 	strb.w	r9, [r4, #21]
 800a2ee:	1bd2      	subs	r2, r2, r7
 800a2f0:	1bdb      	subs	r3, r3, r7
 800a2f2:	60a2      	str	r2, [r4, #8]
 800a2f4:	6123      	str	r3, [r4, #16]
 800a2f6:	f080 0001 	eor.w	r0, r0, #1
 800a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	706b      	strb	r3, [r5, #1]
 800a304:	e7c3      	b.n	800a28e <ucdr_deserialize_endian_uint16_t+0x5e>
 800a306:	4641      	mov	r1, r8
 800a308:	463a      	mov	r2, r7
 800a30a:	4628      	mov	r0, r5
 800a30c:	f007 ff6b 	bl	80121e6 <memcpy>
 800a310:	68a1      	ldr	r1, [r4, #8]
 800a312:	4652      	mov	r2, sl
 800a314:	19e8      	adds	r0, r5, r7
 800a316:	f007 ff66 	bl	80121e6 <memcpy>
 800a31a:	e7b8      	b.n	800a28e <ucdr_deserialize_endian_uint16_t+0x5e>

0800a31c <ucdr_serialize_uint32_t>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	4604      	mov	r4, r0
 800a324:	9101      	str	r1, [sp, #4]
 800a326:	2104      	movs	r1, #4
 800a328:	f000 fe28 	bl	800af7c <ucdr_buffer_alignment>
 800a32c:	4601      	mov	r1, r0
 800a32e:	4620      	mov	r0, r4
 800a330:	7d67      	ldrb	r7, [r4, #21]
 800a332:	f000 fe67 	bl	800b004 <ucdr_advance_buffer>
 800a336:	4620      	mov	r0, r4
 800a338:	2104      	movs	r1, #4
 800a33a:	f000 fdc1 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d139      	bne.n	800a3b6 <ucdr_serialize_uint32_t+0x9a>
 800a342:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a346:	42ae      	cmp	r6, r5
 800a348:	d930      	bls.n	800a3ac <ucdr_serialize_uint32_t+0x90>
 800a34a:	6922      	ldr	r2, [r4, #16]
 800a34c:	60a6      	str	r6, [r4, #8]
 800a34e:	1b76      	subs	r6, r6, r5
 800a350:	4432      	add	r2, r6
 800a352:	f1c6 0804 	rsb	r8, r6, #4
 800a356:	6122      	str	r2, [r4, #16]
 800a358:	4641      	mov	r1, r8
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fdbc 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a360:	2800      	cmp	r0, #0
 800a362:	d04c      	beq.n	800a3fe <ucdr_serialize_uint32_t+0xe2>
 800a364:	7d23      	ldrb	r3, [r4, #20]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d063      	beq.n	800a432 <ucdr_serialize_uint32_t+0x116>
 800a36a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a36e:	702b      	strb	r3, [r5, #0]
 800a370:	2e00      	cmp	r6, #0
 800a372:	d051      	beq.n	800a418 <ucdr_serialize_uint32_t+0xfc>
 800a374:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a378:	706b      	strb	r3, [r5, #1]
 800a37a:	2e01      	cmp	r6, #1
 800a37c:	d050      	beq.n	800a420 <ucdr_serialize_uint32_t+0x104>
 800a37e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a382:	70ab      	strb	r3, [r5, #2]
 800a384:	2e02      	cmp	r6, #2
 800a386:	d04f      	beq.n	800a428 <ucdr_serialize_uint32_t+0x10c>
 800a388:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a38c:	70eb      	strb	r3, [r5, #3]
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	68a2      	ldr	r2, [r4, #8]
 800a392:	7da0      	ldrb	r0, [r4, #22]
 800a394:	3304      	adds	r3, #4
 800a396:	1b9b      	subs	r3, r3, r6
 800a398:	4442      	add	r2, r8
 800a39a:	2104      	movs	r1, #4
 800a39c:	f080 0001 	eor.w	r0, r0, #1
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	60a2      	str	r2, [r4, #8]
 800a3a4:	7561      	strb	r1, [r4, #21]
 800a3a6:	b002      	add	sp, #8
 800a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fd92 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a3b4:	b1d0      	cbz	r0, 800a3ec <ucdr_serialize_uint32_t+0xd0>
 800a3b6:	7d23      	ldrb	r3, [r4, #20]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	d01c      	beq.n	800a3f8 <ucdr_serialize_uint32_t+0xdc>
 800a3be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	68a3      	ldr	r3, [r4, #8]
 800a3c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3ca:	705a      	strb	r2, [r3, #1]
 800a3cc:	68a3      	ldr	r3, [r4, #8]
 800a3ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3d2:	709a      	strb	r2, [r3, #2]
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3da:	70da      	strb	r2, [r3, #3]
 800a3dc:	68a2      	ldr	r2, [r4, #8]
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	3204      	adds	r2, #4
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	2104      	movs	r1, #4
 800a3e6:	60a2      	str	r2, [r4, #8]
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	7561      	strb	r1, [r4, #21]
 800a3ec:	7da0      	ldrb	r0, [r4, #22]
 800a3ee:	f080 0001 	eor.w	r0, r0, #1
 800a3f2:	b002      	add	sp, #8
 800a3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	e7ee      	b.n	800a3dc <ucdr_serialize_uint32_t+0xc0>
 800a3fe:	68a2      	ldr	r2, [r4, #8]
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	7da0      	ldrb	r0, [r4, #22]
 800a404:	7567      	strb	r7, [r4, #21]
 800a406:	1b92      	subs	r2, r2, r6
 800a408:	1b9b      	subs	r3, r3, r6
 800a40a:	f080 0001 	eor.w	r0, r0, #1
 800a40e:	60a2      	str	r2, [r4, #8]
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	b002      	add	sp, #8
 800a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	e7ad      	b.n	800a38e <ucdr_serialize_uint32_t+0x72>
 800a432:	4628      	mov	r0, r5
 800a434:	ad01      	add	r5, sp, #4
 800a436:	4629      	mov	r1, r5
 800a438:	4632      	mov	r2, r6
 800a43a:	f007 fed4 	bl	80121e6 <memcpy>
 800a43e:	68a0      	ldr	r0, [r4, #8]
 800a440:	4642      	mov	r2, r8
 800a442:	19a9      	adds	r1, r5, r6
 800a444:	f007 fecf 	bl	80121e6 <memcpy>
 800a448:	e7a1      	b.n	800a38e <ucdr_serialize_uint32_t+0x72>
 800a44a:	bf00      	nop

0800a44c <ucdr_serialize_endian_uint32_t>:
 800a44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a450:	b083      	sub	sp, #12
 800a452:	460d      	mov	r5, r1
 800a454:	2104      	movs	r1, #4
 800a456:	4604      	mov	r4, r0
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	f000 fd8f 	bl	800af7c <ucdr_buffer_alignment>
 800a45e:	4601      	mov	r1, r0
 800a460:	4620      	mov	r0, r4
 800a462:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a466:	f000 fdcd 	bl	800b004 <ucdr_advance_buffer>
 800a46a:	4620      	mov	r0, r4
 800a46c:	2104      	movs	r1, #4
 800a46e:	f000 fd27 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a472:	2800      	cmp	r0, #0
 800a474:	d138      	bne.n	800a4e8 <ucdr_serialize_endian_uint32_t+0x9c>
 800a476:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a47a:	42b7      	cmp	r7, r6
 800a47c:	d92f      	bls.n	800a4de <ucdr_serialize_endian_uint32_t+0x92>
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	60a7      	str	r7, [r4, #8]
 800a482:	1bbf      	subs	r7, r7, r6
 800a484:	443a      	add	r2, r7
 800a486:	f1c7 0904 	rsb	r9, r7, #4
 800a48a:	6122      	str	r2, [r4, #16]
 800a48c:	4649      	mov	r1, r9
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fd22 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a494:	2800      	cmp	r0, #0
 800a496:	d04a      	beq.n	800a52e <ucdr_serialize_endian_uint32_t+0xe2>
 800a498:	2d01      	cmp	r5, #1
 800a49a:	d063      	beq.n	800a564 <ucdr_serialize_endian_uint32_t+0x118>
 800a49c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a4a0:	7033      	strb	r3, [r6, #0]
 800a4a2:	2f00      	cmp	r7, #0
 800a4a4:	d051      	beq.n	800a54a <ucdr_serialize_endian_uint32_t+0xfe>
 800a4a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a4aa:	7073      	strb	r3, [r6, #1]
 800a4ac:	2f01      	cmp	r7, #1
 800a4ae:	d050      	beq.n	800a552 <ucdr_serialize_endian_uint32_t+0x106>
 800a4b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a4b4:	70b3      	strb	r3, [r6, #2]
 800a4b6:	2f02      	cmp	r7, #2
 800a4b8:	d04f      	beq.n	800a55a <ucdr_serialize_endian_uint32_t+0x10e>
 800a4ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a4be:	70f3      	strb	r3, [r6, #3]
 800a4c0:	6923      	ldr	r3, [r4, #16]
 800a4c2:	68a2      	ldr	r2, [r4, #8]
 800a4c4:	7da0      	ldrb	r0, [r4, #22]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	1bdb      	subs	r3, r3, r7
 800a4ca:	444a      	add	r2, r9
 800a4cc:	2104      	movs	r1, #4
 800a4ce:	f080 0001 	eor.w	r0, r0, #1
 800a4d2:	6123      	str	r3, [r4, #16]
 800a4d4:	60a2      	str	r2, [r4, #8]
 800a4d6:	7561      	strb	r1, [r4, #21]
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4de:	2104      	movs	r1, #4
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fcf9 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a4e6:	b1c8      	cbz	r0, 800a51c <ucdr_serialize_endian_uint32_t+0xd0>
 800a4e8:	2d01      	cmp	r5, #1
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	d01c      	beq.n	800a528 <ucdr_serialize_endian_uint32_t+0xdc>
 800a4ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4fa:	705a      	strb	r2, [r3, #1]
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a502:	709a      	strb	r2, [r3, #2]
 800a504:	68a3      	ldr	r3, [r4, #8]
 800a506:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a50a:	70da      	strb	r2, [r3, #3]
 800a50c:	68a2      	ldr	r2, [r4, #8]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	3204      	adds	r2, #4
 800a512:	3304      	adds	r3, #4
 800a514:	2104      	movs	r1, #4
 800a516:	60a2      	str	r2, [r4, #8]
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	7561      	strb	r1, [r4, #21]
 800a51c:	7da0      	ldrb	r0, [r4, #22]
 800a51e:	f080 0001 	eor.w	r0, r0, #1
 800a522:	b003      	add	sp, #12
 800a524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a528:	9a01      	ldr	r2, [sp, #4]
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e7ee      	b.n	800a50c <ucdr_serialize_endian_uint32_t+0xc0>
 800a52e:	68a2      	ldr	r2, [r4, #8]
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	7da0      	ldrb	r0, [r4, #22]
 800a534:	f884 8015 	strb.w	r8, [r4, #21]
 800a538:	1bd2      	subs	r2, r2, r7
 800a53a:	1bdb      	subs	r3, r3, r7
 800a53c:	f080 0001 	eor.w	r0, r0, #1
 800a540:	60a2      	str	r2, [r4, #8]
 800a542:	6123      	str	r3, [r4, #16]
 800a544:	b003      	add	sp, #12
 800a546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	68a3      	ldr	r3, [r4, #8]
 800a554:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a558:	701a      	strb	r2, [r3, #0]
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e7ad      	b.n	800a4c0 <ucdr_serialize_endian_uint32_t+0x74>
 800a564:	ad01      	add	r5, sp, #4
 800a566:	4629      	mov	r1, r5
 800a568:	463a      	mov	r2, r7
 800a56a:	4630      	mov	r0, r6
 800a56c:	f007 fe3b 	bl	80121e6 <memcpy>
 800a570:	68a0      	ldr	r0, [r4, #8]
 800a572:	464a      	mov	r2, r9
 800a574:	19e9      	adds	r1, r5, r7
 800a576:	f007 fe36 	bl	80121e6 <memcpy>
 800a57a:	e7a1      	b.n	800a4c0 <ucdr_serialize_endian_uint32_t+0x74>

0800a57c <ucdr_deserialize_uint32_t>:
 800a57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a580:	460d      	mov	r5, r1
 800a582:	2104      	movs	r1, #4
 800a584:	4604      	mov	r4, r0
 800a586:	f000 fcf9 	bl	800af7c <ucdr_buffer_alignment>
 800a58a:	4601      	mov	r1, r0
 800a58c:	4620      	mov	r0, r4
 800a58e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a592:	f000 fd37 	bl	800b004 <ucdr_advance_buffer>
 800a596:	4620      	mov	r0, r4
 800a598:	2104      	movs	r1, #4
 800a59a:	f000 fc91 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d138      	bne.n	800a614 <ucdr_deserialize_uint32_t+0x98>
 800a5a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a5a6:	42b7      	cmp	r7, r6
 800a5a8:	d92f      	bls.n	800a60a <ucdr_deserialize_uint32_t+0x8e>
 800a5aa:	6922      	ldr	r2, [r4, #16]
 800a5ac:	60a7      	str	r7, [r4, #8]
 800a5ae:	1bbf      	subs	r7, r7, r6
 800a5b0:	443a      	add	r2, r7
 800a5b2:	f1c7 0904 	rsb	r9, r7, #4
 800a5b6:	6122      	str	r2, [r4, #16]
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fc8c 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d046      	beq.n	800a652 <ucdr_deserialize_uint32_t+0xd6>
 800a5c4:	7d23      	ldrb	r3, [r4, #20]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d05c      	beq.n	800a684 <ucdr_deserialize_uint32_t+0x108>
 800a5ca:	78f3      	ldrb	r3, [r6, #3]
 800a5cc:	702b      	strb	r3, [r5, #0]
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	d04c      	beq.n	800a66c <ucdr_deserialize_uint32_t+0xf0>
 800a5d2:	78b3      	ldrb	r3, [r6, #2]
 800a5d4:	706b      	strb	r3, [r5, #1]
 800a5d6:	2f01      	cmp	r7, #1
 800a5d8:	f105 0302 	add.w	r3, r5, #2
 800a5dc:	d04a      	beq.n	800a674 <ucdr_deserialize_uint32_t+0xf8>
 800a5de:	7873      	ldrb	r3, [r6, #1]
 800a5e0:	70ab      	strb	r3, [r5, #2]
 800a5e2:	2f02      	cmp	r7, #2
 800a5e4:	f105 0303 	add.w	r3, r5, #3
 800a5e8:	d048      	beq.n	800a67c <ucdr_deserialize_uint32_t+0x100>
 800a5ea:	7833      	ldrb	r3, [r6, #0]
 800a5ec:	70eb      	strb	r3, [r5, #3]
 800a5ee:	6923      	ldr	r3, [r4, #16]
 800a5f0:	68a2      	ldr	r2, [r4, #8]
 800a5f2:	7da0      	ldrb	r0, [r4, #22]
 800a5f4:	2104      	movs	r1, #4
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	1bdb      	subs	r3, r3, r7
 800a5fa:	444a      	add	r2, r9
 800a5fc:	7561      	strb	r1, [r4, #21]
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	60a2      	str	r2, [r4, #8]
 800a602:	f080 0001 	eor.w	r0, r0, #1
 800a606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60a:	2104      	movs	r1, #4
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fc63 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a612:	b1b0      	cbz	r0, 800a642 <ucdr_deserialize_uint32_t+0xc6>
 800a614:	7d23      	ldrb	r3, [r4, #20]
 800a616:	2b01      	cmp	r3, #1
 800a618:	68a3      	ldr	r3, [r4, #8]
 800a61a:	d017      	beq.n	800a64c <ucdr_deserialize_uint32_t+0xd0>
 800a61c:	78db      	ldrb	r3, [r3, #3]
 800a61e:	702b      	strb	r3, [r5, #0]
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	789b      	ldrb	r3, [r3, #2]
 800a624:	706b      	strb	r3, [r5, #1]
 800a626:	68a3      	ldr	r3, [r4, #8]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	70ab      	strb	r3, [r5, #2]
 800a62c:	68a3      	ldr	r3, [r4, #8]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	70eb      	strb	r3, [r5, #3]
 800a632:	68a2      	ldr	r2, [r4, #8]
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	3204      	adds	r2, #4
 800a638:	3304      	adds	r3, #4
 800a63a:	2104      	movs	r1, #4
 800a63c:	60a2      	str	r2, [r4, #8]
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	7561      	strb	r1, [r4, #21]
 800a642:	7da0      	ldrb	r0, [r4, #22]
 800a644:	f080 0001 	eor.w	r0, r0, #1
 800a648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	e7ef      	b.n	800a632 <ucdr_deserialize_uint32_t+0xb6>
 800a652:	68a2      	ldr	r2, [r4, #8]
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	7da0      	ldrb	r0, [r4, #22]
 800a658:	f884 8015 	strb.w	r8, [r4, #21]
 800a65c:	1bd2      	subs	r2, r2, r7
 800a65e:	1bdb      	subs	r3, r3, r7
 800a660:	60a2      	str	r2, [r4, #8]
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	f080 0001 	eor.w	r0, r0, #1
 800a668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	789b      	ldrb	r3, [r3, #2]
 800a670:	706b      	strb	r3, [r5, #1]
 800a672:	1cab      	adds	r3, r5, #2
 800a674:	68a2      	ldr	r2, [r4, #8]
 800a676:	7852      	ldrb	r2, [r2, #1]
 800a678:	f803 2b01 	strb.w	r2, [r3], #1
 800a67c:	68a2      	ldr	r2, [r4, #8]
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	701a      	strb	r2, [r3, #0]
 800a682:	e7b4      	b.n	800a5ee <ucdr_deserialize_uint32_t+0x72>
 800a684:	4631      	mov	r1, r6
 800a686:	463a      	mov	r2, r7
 800a688:	4628      	mov	r0, r5
 800a68a:	f007 fdac 	bl	80121e6 <memcpy>
 800a68e:	68a1      	ldr	r1, [r4, #8]
 800a690:	464a      	mov	r2, r9
 800a692:	19e8      	adds	r0, r5, r7
 800a694:	f007 fda7 	bl	80121e6 <memcpy>
 800a698:	e7a9      	b.n	800a5ee <ucdr_deserialize_uint32_t+0x72>
 800a69a:	bf00      	nop

0800a69c <ucdr_deserialize_endian_uint32_t>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	2104      	movs	r1, #4
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	4615      	mov	r5, r2
 800a6a8:	f000 fc68 	bl	800af7c <ucdr_buffer_alignment>
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a6b4:	f000 fca6 	bl	800b004 <ucdr_advance_buffer>
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	f000 fc00 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d13c      	bne.n	800a73e <ucdr_deserialize_endian_uint32_t+0xa2>
 800a6c4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a6c8:	42bb      	cmp	r3, r7
 800a6ca:	d933      	bls.n	800a734 <ucdr_deserialize_endian_uint32_t+0x98>
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	eba3 0807 	sub.w	r8, r3, r7
 800a6d4:	4442      	add	r2, r8
 800a6d6:	f1c8 0a04 	rsb	sl, r8, #4
 800a6da:	6122      	str	r2, [r4, #16]
 800a6dc:	4651      	mov	r1, sl
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 fbfa 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d048      	beq.n	800a77a <ucdr_deserialize_endian_uint32_t+0xde>
 800a6e8:	2e01      	cmp	r6, #1
 800a6ea:	d061      	beq.n	800a7b0 <ucdr_deserialize_endian_uint32_t+0x114>
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	702b      	strb	r3, [r5, #0]
 800a6f0:	f1b8 0f00 	cmp.w	r8, #0
 800a6f4:	d050      	beq.n	800a798 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a6f6:	78bb      	ldrb	r3, [r7, #2]
 800a6f8:	706b      	strb	r3, [r5, #1]
 800a6fa:	f1b8 0f01 	cmp.w	r8, #1
 800a6fe:	f105 0302 	add.w	r3, r5, #2
 800a702:	d04d      	beq.n	800a7a0 <ucdr_deserialize_endian_uint32_t+0x104>
 800a704:	787b      	ldrb	r3, [r7, #1]
 800a706:	70ab      	strb	r3, [r5, #2]
 800a708:	f1b8 0f02 	cmp.w	r8, #2
 800a70c:	f105 0303 	add.w	r3, r5, #3
 800a710:	d04a      	beq.n	800a7a8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a712:	783b      	ldrb	r3, [r7, #0]
 800a714:	70eb      	strb	r3, [r5, #3]
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	68a2      	ldr	r2, [r4, #8]
 800a71a:	7da0      	ldrb	r0, [r4, #22]
 800a71c:	2104      	movs	r1, #4
 800a71e:	3304      	adds	r3, #4
 800a720:	eba3 0308 	sub.w	r3, r3, r8
 800a724:	4452      	add	r2, sl
 800a726:	7561      	strb	r1, [r4, #21]
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	60a2      	str	r2, [r4, #8]
 800a72c:	f080 0001 	eor.w	r0, r0, #1
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	2104      	movs	r1, #4
 800a736:	4620      	mov	r0, r4
 800a738:	f000 fbce 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a73c:	b1a8      	cbz	r0, 800a76a <ucdr_deserialize_endian_uint32_t+0xce>
 800a73e:	2e01      	cmp	r6, #1
 800a740:	68a3      	ldr	r3, [r4, #8]
 800a742:	d017      	beq.n	800a774 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a744:	78db      	ldrb	r3, [r3, #3]
 800a746:	702b      	strb	r3, [r5, #0]
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	789b      	ldrb	r3, [r3, #2]
 800a74c:	706b      	strb	r3, [r5, #1]
 800a74e:	68a3      	ldr	r3, [r4, #8]
 800a750:	785b      	ldrb	r3, [r3, #1]
 800a752:	70ab      	strb	r3, [r5, #2]
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	70eb      	strb	r3, [r5, #3]
 800a75a:	68a2      	ldr	r2, [r4, #8]
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	3204      	adds	r2, #4
 800a760:	3304      	adds	r3, #4
 800a762:	2104      	movs	r1, #4
 800a764:	60a2      	str	r2, [r4, #8]
 800a766:	6123      	str	r3, [r4, #16]
 800a768:	7561      	strb	r1, [r4, #21]
 800a76a:	7da0      	ldrb	r0, [r4, #22]
 800a76c:	f080 0001 	eor.w	r0, r0, #1
 800a770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	e7ef      	b.n	800a75a <ucdr_deserialize_endian_uint32_t+0xbe>
 800a77a:	68a2      	ldr	r2, [r4, #8]
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	7da0      	ldrb	r0, [r4, #22]
 800a780:	f884 9015 	strb.w	r9, [r4, #21]
 800a784:	eba2 0208 	sub.w	r2, r2, r8
 800a788:	eba3 0308 	sub.w	r3, r3, r8
 800a78c:	60a2      	str	r2, [r4, #8]
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	f080 0001 	eor.w	r0, r0, #1
 800a794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a798:	68a3      	ldr	r3, [r4, #8]
 800a79a:	789b      	ldrb	r3, [r3, #2]
 800a79c:	706b      	strb	r3, [r5, #1]
 800a79e:	1cab      	adds	r3, r5, #2
 800a7a0:	68a2      	ldr	r2, [r4, #8]
 800a7a2:	7852      	ldrb	r2, [r2, #1]
 800a7a4:	f803 2b01 	strb.w	r2, [r3], #1
 800a7a8:	68a2      	ldr	r2, [r4, #8]
 800a7aa:	7812      	ldrb	r2, [r2, #0]
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e7b2      	b.n	800a716 <ucdr_deserialize_endian_uint32_t+0x7a>
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f007 fd16 	bl	80121e6 <memcpy>
 800a7ba:	68a1      	ldr	r1, [r4, #8]
 800a7bc:	4652      	mov	r2, sl
 800a7be:	eb05 0008 	add.w	r0, r5, r8
 800a7c2:	f007 fd10 	bl	80121e6 <memcpy>
 800a7c6:	e7a6      	b.n	800a716 <ucdr_deserialize_endian_uint32_t+0x7a>

0800a7c8 <ucdr_serialize_uint64_t>:
 800a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7cc:	2108      	movs	r1, #8
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	e9cd 2300 	strd	r2, r3, [sp]
 800a7d6:	f000 fbd1 	bl	800af7c <ucdr_buffer_alignment>
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	7d67      	ldrb	r7, [r4, #21]
 800a7e0:	f000 fc10 	bl	800b004 <ucdr_advance_buffer>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	2108      	movs	r1, #8
 800a7e8:	f000 fb6a 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d14e      	bne.n	800a88e <ucdr_serialize_uint64_t+0xc6>
 800a7f0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a7f4:	42b5      	cmp	r5, r6
 800a7f6:	d945      	bls.n	800a884 <ucdr_serialize_uint64_t+0xbc>
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	60a5      	str	r5, [r4, #8]
 800a7fc:	1bad      	subs	r5, r5, r6
 800a7fe:	442b      	add	r3, r5
 800a800:	f1c5 0808 	rsb	r8, r5, #8
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	4641      	mov	r1, r8
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fb65 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d074      	beq.n	800a8fc <ucdr_serialize_uint64_t+0x134>
 800a812:	7d23      	ldrb	r3, [r4, #20]
 800a814:	2b01      	cmp	r3, #1
 800a816:	f000 809b 	beq.w	800a950 <ucdr_serialize_uint64_t+0x188>
 800a81a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a81e:	7033      	strb	r3, [r6, #0]
 800a820:	2d00      	cmp	r5, #0
 800a822:	d078      	beq.n	800a916 <ucdr_serialize_uint64_t+0x14e>
 800a824:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a828:	7073      	strb	r3, [r6, #1]
 800a82a:	2d01      	cmp	r5, #1
 800a82c:	d077      	beq.n	800a91e <ucdr_serialize_uint64_t+0x156>
 800a82e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a832:	70b3      	strb	r3, [r6, #2]
 800a834:	2d02      	cmp	r5, #2
 800a836:	d076      	beq.n	800a926 <ucdr_serialize_uint64_t+0x15e>
 800a838:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a83c:	70f3      	strb	r3, [r6, #3]
 800a83e:	2d03      	cmp	r5, #3
 800a840:	d075      	beq.n	800a92e <ucdr_serialize_uint64_t+0x166>
 800a842:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a846:	7133      	strb	r3, [r6, #4]
 800a848:	2d04      	cmp	r5, #4
 800a84a:	d074      	beq.n	800a936 <ucdr_serialize_uint64_t+0x16e>
 800a84c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a850:	7173      	strb	r3, [r6, #5]
 800a852:	2d05      	cmp	r5, #5
 800a854:	d073      	beq.n	800a93e <ucdr_serialize_uint64_t+0x176>
 800a856:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a85a:	71b3      	strb	r3, [r6, #6]
 800a85c:	2d06      	cmp	r5, #6
 800a85e:	d072      	beq.n	800a946 <ucdr_serialize_uint64_t+0x17e>
 800a860:	f89d 3000 	ldrb.w	r3, [sp]
 800a864:	71f3      	strb	r3, [r6, #7]
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	68a2      	ldr	r2, [r4, #8]
 800a86a:	7da0      	ldrb	r0, [r4, #22]
 800a86c:	3308      	adds	r3, #8
 800a86e:	1b5d      	subs	r5, r3, r5
 800a870:	4442      	add	r2, r8
 800a872:	2308      	movs	r3, #8
 800a874:	f080 0001 	eor.w	r0, r0, #1
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	60a2      	str	r2, [r4, #8]
 800a87c:	7563      	strb	r3, [r4, #21]
 800a87e:	b002      	add	sp, #8
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	2108      	movs	r1, #8
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fb26 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a88c:	b350      	cbz	r0, 800a8e4 <ucdr_serialize_uint64_t+0x11c>
 800a88e:	7d23      	ldrb	r3, [r4, #20]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d02d      	beq.n	800a8f0 <ucdr_serialize_uint64_t+0x128>
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	68a3      	ldr	r3, [r4, #8]
 800a89e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8a2:	705a      	strb	r2, [r3, #1]
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8aa:	709a      	strb	r2, [r3, #2]
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8b2:	70da      	strb	r2, [r3, #3]
 800a8b4:	68a3      	ldr	r3, [r4, #8]
 800a8b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a8ba:	711a      	strb	r2, [r3, #4]
 800a8bc:	68a3      	ldr	r3, [r4, #8]
 800a8be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a8c2:	715a      	strb	r2, [r3, #5]
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a8ca:	719a      	strb	r2, [r3, #6]
 800a8cc:	68a3      	ldr	r3, [r4, #8]
 800a8ce:	f89d 2000 	ldrb.w	r2, [sp]
 800a8d2:	71da      	strb	r2, [r3, #7]
 800a8d4:	68a2      	ldr	r2, [r4, #8]
 800a8d6:	6923      	ldr	r3, [r4, #16]
 800a8d8:	3208      	adds	r2, #8
 800a8da:	3308      	adds	r3, #8
 800a8dc:	2108      	movs	r1, #8
 800a8de:	60a2      	str	r2, [r4, #8]
 800a8e0:	6123      	str	r3, [r4, #16]
 800a8e2:	7561      	strb	r1, [r4, #21]
 800a8e4:	7da0      	ldrb	r0, [r4, #22]
 800a8e6:	f080 0001 	eor.w	r0, r0, #1
 800a8ea:	b002      	add	sp, #8
 800a8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f0:	466b      	mov	r3, sp
 800a8f2:	cb03      	ldmia	r3!, {r0, r1}
 800a8f4:	68a3      	ldr	r3, [r4, #8]
 800a8f6:	6018      	str	r0, [r3, #0]
 800a8f8:	6059      	str	r1, [r3, #4]
 800a8fa:	e7eb      	b.n	800a8d4 <ucdr_serialize_uint64_t+0x10c>
 800a8fc:	68a2      	ldr	r2, [r4, #8]
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	7da0      	ldrb	r0, [r4, #22]
 800a902:	7567      	strb	r7, [r4, #21]
 800a904:	1b52      	subs	r2, r2, r5
 800a906:	f080 0001 	eor.w	r0, r0, #1
 800a90a:	1b5d      	subs	r5, r3, r5
 800a90c:	60a2      	str	r2, [r4, #8]
 800a90e:	6125      	str	r5, [r4, #16]
 800a910:	b002      	add	sp, #8
 800a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a924:	701a      	strb	r2, [r3, #0]
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	68a3      	ldr	r3, [r4, #8]
 800a938:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	f89d 2000 	ldrb.w	r2, [sp]
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e78a      	b.n	800a866 <ucdr_serialize_uint64_t+0x9e>
 800a950:	4630      	mov	r0, r6
 800a952:	466e      	mov	r6, sp
 800a954:	4631      	mov	r1, r6
 800a956:	462a      	mov	r2, r5
 800a958:	f007 fc45 	bl	80121e6 <memcpy>
 800a95c:	68a0      	ldr	r0, [r4, #8]
 800a95e:	4642      	mov	r2, r8
 800a960:	1971      	adds	r1, r6, r5
 800a962:	f007 fc40 	bl	80121e6 <memcpy>
 800a966:	e77e      	b.n	800a866 <ucdr_serialize_uint64_t+0x9e>

0800a968 <ucdr_serialize_int16_t>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	460b      	mov	r3, r1
 800a970:	2102      	movs	r1, #2
 800a972:	4604      	mov	r4, r0
 800a974:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a978:	f000 fb00 	bl	800af7c <ucdr_buffer_alignment>
 800a97c:	4601      	mov	r1, r0
 800a97e:	4620      	mov	r0, r4
 800a980:	7d67      	ldrb	r7, [r4, #21]
 800a982:	f000 fb3f 	bl	800b004 <ucdr_advance_buffer>
 800a986:	4620      	mov	r0, r4
 800a988:	2102      	movs	r1, #2
 800a98a:	f000 fa99 	bl	800aec0 <ucdr_check_buffer_available_for>
 800a98e:	bb78      	cbnz	r0, 800a9f0 <ucdr_serialize_int16_t+0x88>
 800a990:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a994:	42b5      	cmp	r5, r6
 800a996:	d926      	bls.n	800a9e6 <ucdr_serialize_int16_t+0x7e>
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	60a5      	str	r5, [r4, #8]
 800a99c:	1bad      	subs	r5, r5, r6
 800a99e:	442a      	add	r2, r5
 800a9a0:	f1c5 0802 	rsb	r8, r5, #2
 800a9a4:	6122      	str	r2, [r4, #16]
 800a9a6:	4641      	mov	r1, r8
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fa95 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d03b      	beq.n	800aa2a <ucdr_serialize_int16_t+0xc2>
 800a9b2:	7d23      	ldrb	r3, [r4, #20]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d04a      	beq.n	800aa4e <ucdr_serialize_int16_t+0xe6>
 800a9b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9bc:	7033      	strb	r3, [r6, #0]
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	d040      	beq.n	800aa44 <ucdr_serialize_int16_t+0xdc>
 800a9c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9c6:	7073      	strb	r3, [r6, #1]
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	68a2      	ldr	r2, [r4, #8]
 800a9cc:	7da0      	ldrb	r0, [r4, #22]
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	1b5b      	subs	r3, r3, r5
 800a9d2:	4442      	add	r2, r8
 800a9d4:	2102      	movs	r1, #2
 800a9d6:	f080 0001 	eor.w	r0, r0, #1
 800a9da:	6123      	str	r3, [r4, #16]
 800a9dc:	60a2      	str	r2, [r4, #8]
 800a9de:	7561      	strb	r1, [r4, #21]
 800a9e0:	b002      	add	sp, #8
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fa75 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800a9ee:	b190      	cbz	r0, 800aa16 <ucdr_serialize_int16_t+0xae>
 800a9f0:	7d23      	ldrb	r3, [r4, #20]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	d014      	beq.n	800aa22 <ucdr_serialize_int16_t+0xba>
 800a9f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9fc:	701a      	strb	r2, [r3, #0]
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa04:	705a      	strb	r2, [r3, #1]
 800aa06:	68a2      	ldr	r2, [r4, #8]
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	3202      	adds	r2, #2
 800aa0c:	3302      	adds	r3, #2
 800aa0e:	2102      	movs	r1, #2
 800aa10:	60a2      	str	r2, [r4, #8]
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	7561      	strb	r1, [r4, #21]
 800aa16:	7da0      	ldrb	r0, [r4, #22]
 800aa18:	f080 0001 	eor.w	r0, r0, #1
 800aa1c:	b002      	add	sp, #8
 800aa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e7ed      	b.n	800aa06 <ucdr_serialize_int16_t+0x9e>
 800aa2a:	68a2      	ldr	r2, [r4, #8]
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	7da0      	ldrb	r0, [r4, #22]
 800aa30:	7567      	strb	r7, [r4, #21]
 800aa32:	1b52      	subs	r2, r2, r5
 800aa34:	1b5b      	subs	r3, r3, r5
 800aa36:	f080 0001 	eor.w	r0, r0, #1
 800aa3a:	60a2      	str	r2, [r4, #8]
 800aa3c:	6123      	str	r3, [r4, #16]
 800aa3e:	b002      	add	sp, #8
 800aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa44:	68a3      	ldr	r3, [r4, #8]
 800aa46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa4a:	701a      	strb	r2, [r3, #0]
 800aa4c:	e7bc      	b.n	800a9c8 <ucdr_serialize_int16_t+0x60>
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f10d 0606 	add.w	r6, sp, #6
 800aa54:	4631      	mov	r1, r6
 800aa56:	462a      	mov	r2, r5
 800aa58:	f007 fbc5 	bl	80121e6 <memcpy>
 800aa5c:	68a0      	ldr	r0, [r4, #8]
 800aa5e:	4642      	mov	r2, r8
 800aa60:	1971      	adds	r1, r6, r5
 800aa62:	f007 fbc0 	bl	80121e6 <memcpy>
 800aa66:	e7af      	b.n	800a9c8 <ucdr_serialize_int16_t+0x60>

0800aa68 <ucdr_deserialize_int16_t>:
 800aa68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	460d      	mov	r5, r1
 800aa6e:	2102      	movs	r1, #2
 800aa70:	4604      	mov	r4, r0
 800aa72:	f000 fa83 	bl	800af7c <ucdr_buffer_alignment>
 800aa76:	4601      	mov	r1, r0
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa7e:	f000 fac1 	bl	800b004 <ucdr_advance_buffer>
 800aa82:	4620      	mov	r0, r4
 800aa84:	2102      	movs	r1, #2
 800aa86:	f000 fa1b 	bl	800aec0 <ucdr_check_buffer_available_for>
 800aa8a:	bb60      	cbnz	r0, 800aae6 <ucdr_deserialize_int16_t+0x7e>
 800aa8c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa90:	42be      	cmp	r6, r7
 800aa92:	d923      	bls.n	800aadc <ucdr_deserialize_int16_t+0x74>
 800aa94:	6922      	ldr	r2, [r4, #16]
 800aa96:	60a6      	str	r6, [r4, #8]
 800aa98:	1bf6      	subs	r6, r6, r7
 800aa9a:	4432      	add	r2, r6
 800aa9c:	f1c6 0902 	rsb	r9, r6, #2
 800aaa0:	6122      	str	r2, [r4, #16]
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fa17 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d034      	beq.n	800ab18 <ucdr_deserialize_int16_t+0xb0>
 800aaae:	7d23      	ldrb	r3, [r4, #20]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d042      	beq.n	800ab3a <ucdr_deserialize_int16_t+0xd2>
 800aab4:	787b      	ldrb	r3, [r7, #1]
 800aab6:	702b      	strb	r3, [r5, #0]
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	d03a      	beq.n	800ab32 <ucdr_deserialize_int16_t+0xca>
 800aabc:	783b      	ldrb	r3, [r7, #0]
 800aabe:	706b      	strb	r3, [r5, #1]
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	68a2      	ldr	r2, [r4, #8]
 800aac4:	7da0      	ldrb	r0, [r4, #22]
 800aac6:	2102      	movs	r1, #2
 800aac8:	3302      	adds	r3, #2
 800aaca:	1b9b      	subs	r3, r3, r6
 800aacc:	444a      	add	r2, r9
 800aace:	7561      	strb	r1, [r4, #21]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	60a2      	str	r2, [r4, #8]
 800aad4:	f080 0001 	eor.w	r0, r0, #1
 800aad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aadc:	2102      	movs	r1, #2
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 f9fa 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800aae4:	b180      	cbz	r0, 800ab08 <ucdr_deserialize_int16_t+0xa0>
 800aae6:	7d23      	ldrb	r3, [r4, #20]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	68a3      	ldr	r3, [r4, #8]
 800aaec:	d011      	beq.n	800ab12 <ucdr_deserialize_int16_t+0xaa>
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	702b      	strb	r3, [r5, #0]
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	706b      	strb	r3, [r5, #1]
 800aaf8:	68a2      	ldr	r2, [r4, #8]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	3202      	adds	r2, #2
 800aafe:	3302      	adds	r3, #2
 800ab00:	2102      	movs	r1, #2
 800ab02:	60a2      	str	r2, [r4, #8]
 800ab04:	6123      	str	r3, [r4, #16]
 800ab06:	7561      	strb	r1, [r4, #21]
 800ab08:	7da0      	ldrb	r0, [r4, #22]
 800ab0a:	f080 0001 	eor.w	r0, r0, #1
 800ab0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	802b      	strh	r3, [r5, #0]
 800ab16:	e7ef      	b.n	800aaf8 <ucdr_deserialize_int16_t+0x90>
 800ab18:	68a2      	ldr	r2, [r4, #8]
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	7da0      	ldrb	r0, [r4, #22]
 800ab1e:	f884 8015 	strb.w	r8, [r4, #21]
 800ab22:	1b92      	subs	r2, r2, r6
 800ab24:	1b9b      	subs	r3, r3, r6
 800ab26:	60a2      	str	r2, [r4, #8]
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	f080 0001 	eor.w	r0, r0, #1
 800ab2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	706b      	strb	r3, [r5, #1]
 800ab38:	e7c2      	b.n	800aac0 <ucdr_deserialize_int16_t+0x58>
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f007 fb51 	bl	80121e6 <memcpy>
 800ab44:	68a1      	ldr	r1, [r4, #8]
 800ab46:	464a      	mov	r2, r9
 800ab48:	19a8      	adds	r0, r5, r6
 800ab4a:	f007 fb4c 	bl	80121e6 <memcpy>
 800ab4e:	e7b7      	b.n	800aac0 <ucdr_deserialize_int16_t+0x58>

0800ab50 <ucdr_deserialize_int32_t>:
 800ab50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab54:	460d      	mov	r5, r1
 800ab56:	2104      	movs	r1, #4
 800ab58:	4604      	mov	r4, r0
 800ab5a:	f000 fa0f 	bl	800af7c <ucdr_buffer_alignment>
 800ab5e:	4601      	mov	r1, r0
 800ab60:	4620      	mov	r0, r4
 800ab62:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab66:	f000 fa4d 	bl	800b004 <ucdr_advance_buffer>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	2104      	movs	r1, #4
 800ab6e:	f000 f9a7 	bl	800aec0 <ucdr_check_buffer_available_for>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d138      	bne.n	800abe8 <ucdr_deserialize_int32_t+0x98>
 800ab76:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ab7a:	42b7      	cmp	r7, r6
 800ab7c:	d92f      	bls.n	800abde <ucdr_deserialize_int32_t+0x8e>
 800ab7e:	6922      	ldr	r2, [r4, #16]
 800ab80:	60a7      	str	r7, [r4, #8]
 800ab82:	1bbf      	subs	r7, r7, r6
 800ab84:	443a      	add	r2, r7
 800ab86:	f1c7 0904 	rsb	r9, r7, #4
 800ab8a:	6122      	str	r2, [r4, #16]
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f9a2 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d046      	beq.n	800ac26 <ucdr_deserialize_int32_t+0xd6>
 800ab98:	7d23      	ldrb	r3, [r4, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d05c      	beq.n	800ac58 <ucdr_deserialize_int32_t+0x108>
 800ab9e:	78f3      	ldrb	r3, [r6, #3]
 800aba0:	702b      	strb	r3, [r5, #0]
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	d04c      	beq.n	800ac40 <ucdr_deserialize_int32_t+0xf0>
 800aba6:	78b3      	ldrb	r3, [r6, #2]
 800aba8:	706b      	strb	r3, [r5, #1]
 800abaa:	2f01      	cmp	r7, #1
 800abac:	f105 0302 	add.w	r3, r5, #2
 800abb0:	d04a      	beq.n	800ac48 <ucdr_deserialize_int32_t+0xf8>
 800abb2:	7873      	ldrb	r3, [r6, #1]
 800abb4:	70ab      	strb	r3, [r5, #2]
 800abb6:	2f02      	cmp	r7, #2
 800abb8:	f105 0303 	add.w	r3, r5, #3
 800abbc:	d048      	beq.n	800ac50 <ucdr_deserialize_int32_t+0x100>
 800abbe:	7833      	ldrb	r3, [r6, #0]
 800abc0:	70eb      	strb	r3, [r5, #3]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	68a2      	ldr	r2, [r4, #8]
 800abc6:	7da0      	ldrb	r0, [r4, #22]
 800abc8:	2104      	movs	r1, #4
 800abca:	3304      	adds	r3, #4
 800abcc:	1bdb      	subs	r3, r3, r7
 800abce:	444a      	add	r2, r9
 800abd0:	7561      	strb	r1, [r4, #21]
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	60a2      	str	r2, [r4, #8]
 800abd6:	f080 0001 	eor.w	r0, r0, #1
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	2104      	movs	r1, #4
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 f979 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800abe6:	b1b0      	cbz	r0, 800ac16 <ucdr_deserialize_int32_t+0xc6>
 800abe8:	7d23      	ldrb	r3, [r4, #20]
 800abea:	2b01      	cmp	r3, #1
 800abec:	68a3      	ldr	r3, [r4, #8]
 800abee:	d017      	beq.n	800ac20 <ucdr_deserialize_int32_t+0xd0>
 800abf0:	78db      	ldrb	r3, [r3, #3]
 800abf2:	702b      	strb	r3, [r5, #0]
 800abf4:	68a3      	ldr	r3, [r4, #8]
 800abf6:	789b      	ldrb	r3, [r3, #2]
 800abf8:	706b      	strb	r3, [r5, #1]
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	785b      	ldrb	r3, [r3, #1]
 800abfe:	70ab      	strb	r3, [r5, #2]
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	70eb      	strb	r3, [r5, #3]
 800ac06:	68a2      	ldr	r2, [r4, #8]
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	3204      	adds	r2, #4
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	2104      	movs	r1, #4
 800ac10:	60a2      	str	r2, [r4, #8]
 800ac12:	6123      	str	r3, [r4, #16]
 800ac14:	7561      	strb	r1, [r4, #21]
 800ac16:	7da0      	ldrb	r0, [r4, #22]
 800ac18:	f080 0001 	eor.w	r0, r0, #1
 800ac1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	602b      	str	r3, [r5, #0]
 800ac24:	e7ef      	b.n	800ac06 <ucdr_deserialize_int32_t+0xb6>
 800ac26:	68a2      	ldr	r2, [r4, #8]
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	7da0      	ldrb	r0, [r4, #22]
 800ac2c:	f884 8015 	strb.w	r8, [r4, #21]
 800ac30:	1bd2      	subs	r2, r2, r7
 800ac32:	1bdb      	subs	r3, r3, r7
 800ac34:	60a2      	str	r2, [r4, #8]
 800ac36:	6123      	str	r3, [r4, #16]
 800ac38:	f080 0001 	eor.w	r0, r0, #1
 800ac3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	789b      	ldrb	r3, [r3, #2]
 800ac44:	706b      	strb	r3, [r5, #1]
 800ac46:	1cab      	adds	r3, r5, #2
 800ac48:	68a2      	ldr	r2, [r4, #8]
 800ac4a:	7852      	ldrb	r2, [r2, #1]
 800ac4c:	f803 2b01 	strb.w	r2, [r3], #1
 800ac50:	68a2      	ldr	r2, [r4, #8]
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e7b4      	b.n	800abc2 <ucdr_deserialize_int32_t+0x72>
 800ac58:	4631      	mov	r1, r6
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f007 fac2 	bl	80121e6 <memcpy>
 800ac62:	68a1      	ldr	r1, [r4, #8]
 800ac64:	464a      	mov	r2, r9
 800ac66:	19e8      	adds	r0, r5, r7
 800ac68:	f007 fabd 	bl	80121e6 <memcpy>
 800ac6c:	e7a9      	b.n	800abc2 <ucdr_deserialize_int32_t+0x72>
 800ac6e:	bf00      	nop

0800ac70 <ucdr_serialize_float>:
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	2104      	movs	r1, #4
 800ac76:	b082      	sub	sp, #8
 800ac78:	4604      	mov	r4, r0
 800ac7a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ac7e:	f000 f97d 	bl	800af7c <ucdr_buffer_alignment>
 800ac82:	4601      	mov	r1, r0
 800ac84:	4620      	mov	r0, r4
 800ac86:	7d67      	ldrb	r7, [r4, #21]
 800ac88:	f000 f9bc 	bl	800b004 <ucdr_advance_buffer>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	2104      	movs	r1, #4
 800ac90:	f000 f916 	bl	800aec0 <ucdr_check_buffer_available_for>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d139      	bne.n	800ad0c <ucdr_serialize_float+0x9c>
 800ac98:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ac9c:	42ae      	cmp	r6, r5
 800ac9e:	d930      	bls.n	800ad02 <ucdr_serialize_float+0x92>
 800aca0:	6922      	ldr	r2, [r4, #16]
 800aca2:	60a6      	str	r6, [r4, #8]
 800aca4:	1b76      	subs	r6, r6, r5
 800aca6:	4432      	add	r2, r6
 800aca8:	f1c6 0804 	rsb	r8, r6, #4
 800acac:	6122      	str	r2, [r4, #16]
 800acae:	4641      	mov	r1, r8
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 f911 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d04c      	beq.n	800ad54 <ucdr_serialize_float+0xe4>
 800acba:	7d23      	ldrb	r3, [r4, #20]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d063      	beq.n	800ad88 <ucdr_serialize_float+0x118>
 800acc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acc4:	702b      	strb	r3, [r5, #0]
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	d051      	beq.n	800ad6e <ucdr_serialize_float+0xfe>
 800acca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acce:	706b      	strb	r3, [r5, #1]
 800acd0:	2e01      	cmp	r6, #1
 800acd2:	d050      	beq.n	800ad76 <ucdr_serialize_float+0x106>
 800acd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acd8:	70ab      	strb	r3, [r5, #2]
 800acda:	2e02      	cmp	r6, #2
 800acdc:	d04f      	beq.n	800ad7e <ucdr_serialize_float+0x10e>
 800acde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ace2:	70eb      	strb	r3, [r5, #3]
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	68a2      	ldr	r2, [r4, #8]
 800ace8:	7da0      	ldrb	r0, [r4, #22]
 800acea:	3304      	adds	r3, #4
 800acec:	1b9b      	subs	r3, r3, r6
 800acee:	4442      	add	r2, r8
 800acf0:	2104      	movs	r1, #4
 800acf2:	f080 0001 	eor.w	r0, r0, #1
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	60a2      	str	r2, [r4, #8]
 800acfa:	7561      	strb	r1, [r4, #21]
 800acfc:	b002      	add	sp, #8
 800acfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad02:	2104      	movs	r1, #4
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 f8e7 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800ad0a:	b1d0      	cbz	r0, 800ad42 <ucdr_serialize_float+0xd2>
 800ad0c:	7d23      	ldrb	r3, [r4, #20]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	d01c      	beq.n	800ad4e <ucdr_serialize_float+0xde>
 800ad14:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	68a3      	ldr	r3, [r4, #8]
 800ad1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad20:	705a      	strb	r2, [r3, #1]
 800ad22:	68a3      	ldr	r3, [r4, #8]
 800ad24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad28:	709a      	strb	r2, [r3, #2]
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad30:	70da      	strb	r2, [r3, #3]
 800ad32:	68a2      	ldr	r2, [r4, #8]
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	3204      	adds	r2, #4
 800ad38:	3304      	adds	r3, #4
 800ad3a:	2104      	movs	r1, #4
 800ad3c:	60a2      	str	r2, [r4, #8]
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	7561      	strb	r1, [r4, #21]
 800ad42:	7da0      	ldrb	r0, [r4, #22]
 800ad44:	f080 0001 	eor.w	r0, r0, #1
 800ad48:	b002      	add	sp, #8
 800ad4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad4e:	9a01      	ldr	r2, [sp, #4]
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e7ee      	b.n	800ad32 <ucdr_serialize_float+0xc2>
 800ad54:	68a2      	ldr	r2, [r4, #8]
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	7da0      	ldrb	r0, [r4, #22]
 800ad5a:	7567      	strb	r7, [r4, #21]
 800ad5c:	1b92      	subs	r2, r2, r6
 800ad5e:	1b9b      	subs	r3, r3, r6
 800ad60:	f080 0001 	eor.w	r0, r0, #1
 800ad64:	60a2      	str	r2, [r4, #8]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	b002      	add	sp, #8
 800ad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	68a3      	ldr	r3, [r4, #8]
 800ad80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e7ad      	b.n	800ace4 <ucdr_serialize_float+0x74>
 800ad88:	4628      	mov	r0, r5
 800ad8a:	ad01      	add	r5, sp, #4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4632      	mov	r2, r6
 800ad90:	f007 fa29 	bl	80121e6 <memcpy>
 800ad94:	68a0      	ldr	r0, [r4, #8]
 800ad96:	4642      	mov	r2, r8
 800ad98:	19a9      	adds	r1, r5, r6
 800ad9a:	f007 fa24 	bl	80121e6 <memcpy>
 800ad9e:	e7a1      	b.n	800ace4 <ucdr_serialize_float+0x74>

0800ada0 <ucdr_deserialize_float>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	460d      	mov	r5, r1
 800ada6:	2104      	movs	r1, #4
 800ada8:	4604      	mov	r4, r0
 800adaa:	f000 f8e7 	bl	800af7c <ucdr_buffer_alignment>
 800adae:	4601      	mov	r1, r0
 800adb0:	4620      	mov	r0, r4
 800adb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800adb6:	f000 f925 	bl	800b004 <ucdr_advance_buffer>
 800adba:	4620      	mov	r0, r4
 800adbc:	2104      	movs	r1, #4
 800adbe:	f000 f87f 	bl	800aec0 <ucdr_check_buffer_available_for>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d138      	bne.n	800ae38 <ucdr_deserialize_float+0x98>
 800adc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800adca:	42b7      	cmp	r7, r6
 800adcc:	d92f      	bls.n	800ae2e <ucdr_deserialize_float+0x8e>
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	60a7      	str	r7, [r4, #8]
 800add2:	1bbf      	subs	r7, r7, r6
 800add4:	443a      	add	r2, r7
 800add6:	f1c7 0904 	rsb	r9, r7, #4
 800adda:	6122      	str	r2, [r4, #16]
 800addc:	4649      	mov	r1, r9
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 f87a 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d046      	beq.n	800ae76 <ucdr_deserialize_float+0xd6>
 800ade8:	7d23      	ldrb	r3, [r4, #20]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d05c      	beq.n	800aea8 <ucdr_deserialize_float+0x108>
 800adee:	78f3      	ldrb	r3, [r6, #3]
 800adf0:	702b      	strb	r3, [r5, #0]
 800adf2:	2f00      	cmp	r7, #0
 800adf4:	d04c      	beq.n	800ae90 <ucdr_deserialize_float+0xf0>
 800adf6:	78b3      	ldrb	r3, [r6, #2]
 800adf8:	706b      	strb	r3, [r5, #1]
 800adfa:	2f01      	cmp	r7, #1
 800adfc:	f105 0302 	add.w	r3, r5, #2
 800ae00:	d04a      	beq.n	800ae98 <ucdr_deserialize_float+0xf8>
 800ae02:	7873      	ldrb	r3, [r6, #1]
 800ae04:	70ab      	strb	r3, [r5, #2]
 800ae06:	2f02      	cmp	r7, #2
 800ae08:	f105 0303 	add.w	r3, r5, #3
 800ae0c:	d048      	beq.n	800aea0 <ucdr_deserialize_float+0x100>
 800ae0e:	7833      	ldrb	r3, [r6, #0]
 800ae10:	70eb      	strb	r3, [r5, #3]
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	68a2      	ldr	r2, [r4, #8]
 800ae16:	7da0      	ldrb	r0, [r4, #22]
 800ae18:	2104      	movs	r1, #4
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	1bdb      	subs	r3, r3, r7
 800ae1e:	444a      	add	r2, r9
 800ae20:	7561      	strb	r1, [r4, #21]
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	60a2      	str	r2, [r4, #8]
 800ae26:	f080 0001 	eor.w	r0, r0, #1
 800ae2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	2104      	movs	r1, #4
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 f851 	bl	800aed8 <ucdr_check_final_buffer_behavior>
 800ae36:	b1b0      	cbz	r0, 800ae66 <ucdr_deserialize_float+0xc6>
 800ae38:	7d23      	ldrb	r3, [r4, #20]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	d017      	beq.n	800ae70 <ucdr_deserialize_float+0xd0>
 800ae40:	78db      	ldrb	r3, [r3, #3]
 800ae42:	702b      	strb	r3, [r5, #0]
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	789b      	ldrb	r3, [r3, #2]
 800ae48:	706b      	strb	r3, [r5, #1]
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	785b      	ldrb	r3, [r3, #1]
 800ae4e:	70ab      	strb	r3, [r5, #2]
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	70eb      	strb	r3, [r5, #3]
 800ae56:	68a2      	ldr	r2, [r4, #8]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	3204      	adds	r2, #4
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	2104      	movs	r1, #4
 800ae60:	60a2      	str	r2, [r4, #8]
 800ae62:	6123      	str	r3, [r4, #16]
 800ae64:	7561      	strb	r1, [r4, #21]
 800ae66:	7da0      	ldrb	r0, [r4, #22]
 800ae68:	f080 0001 	eor.w	r0, r0, #1
 800ae6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	e7ef      	b.n	800ae56 <ucdr_deserialize_float+0xb6>
 800ae76:	68a2      	ldr	r2, [r4, #8]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	7da0      	ldrb	r0, [r4, #22]
 800ae7c:	f884 8015 	strb.w	r8, [r4, #21]
 800ae80:	1bd2      	subs	r2, r2, r7
 800ae82:	1bdb      	subs	r3, r3, r7
 800ae84:	60a2      	str	r2, [r4, #8]
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	f080 0001 	eor.w	r0, r0, #1
 800ae8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae90:	68a3      	ldr	r3, [r4, #8]
 800ae92:	789b      	ldrb	r3, [r3, #2]
 800ae94:	706b      	strb	r3, [r5, #1]
 800ae96:	1cab      	adds	r3, r5, #2
 800ae98:	68a2      	ldr	r2, [r4, #8]
 800ae9a:	7852      	ldrb	r2, [r2, #1]
 800ae9c:	f803 2b01 	strb.w	r2, [r3], #1
 800aea0:	68a2      	ldr	r2, [r4, #8]
 800aea2:	7812      	ldrb	r2, [r2, #0]
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e7b4      	b.n	800ae12 <ucdr_deserialize_float+0x72>
 800aea8:	4631      	mov	r1, r6
 800aeaa:	463a      	mov	r2, r7
 800aeac:	4628      	mov	r0, r5
 800aeae:	f007 f99a 	bl	80121e6 <memcpy>
 800aeb2:	68a1      	ldr	r1, [r4, #8]
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	19e8      	adds	r0, r5, r7
 800aeb8:	f007 f995 	bl	80121e6 <memcpy>
 800aebc:	e7a9      	b.n	800ae12 <ucdr_deserialize_float+0x72>
 800aebe:	bf00      	nop

0800aec0 <ucdr_check_buffer_available_for>:
 800aec0:	7d83      	ldrb	r3, [r0, #22]
 800aec2:	b93b      	cbnz	r3, 800aed4 <ucdr_check_buffer_available_for+0x14>
 800aec4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800aec8:	4419      	add	r1, r3
 800aeca:	4288      	cmp	r0, r1
 800aecc:	bf34      	ite	cc
 800aece:	2000      	movcc	r0, #0
 800aed0:	2001      	movcs	r0, #1
 800aed2:	4770      	bx	lr
 800aed4:	2000      	movs	r0, #0
 800aed6:	4770      	bx	lr

0800aed8 <ucdr_check_final_buffer_behavior>:
 800aed8:	7d83      	ldrb	r3, [r0, #22]
 800aeda:	b943      	cbnz	r3, 800aeee <ucdr_check_final_buffer_behavior+0x16>
 800aedc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800aee0:	4291      	cmp	r1, r2
 800aee2:	b510      	push	{r4, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	d205      	bcs.n	800aef4 <ucdr_check_final_buffer_behavior+0x1c>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4618      	mov	r0, r3
 800aeec:	bd10      	pop	{r4, pc}
 800aeee:	2300      	movs	r3, #0
 800aef0:	4618      	mov	r0, r3
 800aef2:	4770      	bx	lr
 800aef4:	6982      	ldr	r2, [r0, #24]
 800aef6:	b13a      	cbz	r2, 800af08 <ucdr_check_final_buffer_behavior+0x30>
 800aef8:	69c1      	ldr	r1, [r0, #28]
 800aefa:	4790      	blx	r2
 800aefc:	f080 0301 	eor.w	r3, r0, #1
 800af00:	b2db      	uxtb	r3, r3
 800af02:	75a0      	strb	r0, [r4, #22]
 800af04:	4618      	mov	r0, r3
 800af06:	bd10      	pop	{r4, pc}
 800af08:	2001      	movs	r0, #1
 800af0a:	75a0      	strb	r0, [r4, #22]
 800af0c:	e7fa      	b.n	800af04 <ucdr_check_final_buffer_behavior+0x2c>
 800af0e:	bf00      	nop

0800af10 <ucdr_set_on_full_buffer_callback>:
 800af10:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop

0800af18 <ucdr_init_buffer_origin_offset_endian>:
 800af18:	b430      	push	{r4, r5}
 800af1a:	9c02      	ldr	r4, [sp, #8]
 800af1c:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800af20:	6001      	str	r1, [r0, #0]
 800af22:	440a      	add	r2, r1
 800af24:	60c3      	str	r3, [r0, #12]
 800af26:	4421      	add	r1, r4
 800af28:	441c      	add	r4, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	6104      	str	r4, [r0, #16]
 800af2e:	7505      	strb	r5, [r0, #20]
 800af30:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800af34:	bc30      	pop	{r4, r5}
 800af36:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800af3a:	7543      	strb	r3, [r0, #21]
 800af3c:	7583      	strb	r3, [r0, #22]
 800af3e:	4770      	bx	lr

0800af40 <ucdr_init_buffer_origin_offset>:
 800af40:	b510      	push	{r4, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	9c04      	ldr	r4, [sp, #16]
 800af46:	9400      	str	r4, [sp, #0]
 800af48:	2401      	movs	r4, #1
 800af4a:	9401      	str	r4, [sp, #4]
 800af4c:	f7ff ffe4 	bl	800af18 <ucdr_init_buffer_origin_offset_endian>
 800af50:	b002      	add	sp, #8
 800af52:	bd10      	pop	{r4, pc}

0800af54 <ucdr_init_buffer_origin>:
 800af54:	b510      	push	{r4, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	2400      	movs	r4, #0
 800af5a:	9400      	str	r4, [sp, #0]
 800af5c:	f7ff fff0 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800af60:	b002      	add	sp, #8
 800af62:	bd10      	pop	{r4, pc}

0800af64 <ucdr_init_buffer>:
 800af64:	2300      	movs	r3, #0
 800af66:	f7ff bff5 	b.w	800af54 <ucdr_init_buffer_origin>
 800af6a:	bf00      	nop

0800af6c <ucdr_alignment>:
 800af6c:	fbb0 f3f1 	udiv	r3, r0, r1
 800af70:	fb03 0011 	mls	r0, r3, r1, r0
 800af74:	1a08      	subs	r0, r1, r0
 800af76:	3901      	subs	r1, #1
 800af78:	4008      	ands	r0, r1
 800af7a:	4770      	bx	lr

0800af7c <ucdr_buffer_alignment>:
 800af7c:	7d43      	ldrb	r3, [r0, #21]
 800af7e:	428b      	cmp	r3, r1
 800af80:	d208      	bcs.n	800af94 <ucdr_buffer_alignment+0x18>
 800af82:	6903      	ldr	r3, [r0, #16]
 800af84:	fbb3 f0f1 	udiv	r0, r3, r1
 800af88:	fb01 3010 	mls	r0, r1, r0, r3
 800af8c:	1a08      	subs	r0, r1, r0
 800af8e:	3901      	subs	r1, #1
 800af90:	4008      	ands	r0, r1
 800af92:	4770      	bx	lr
 800af94:	2000      	movs	r0, #0
 800af96:	4770      	bx	lr

0800af98 <ucdr_align_to>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	4604      	mov	r4, r0
 800af9c:	460e      	mov	r6, r1
 800af9e:	f7ff ffed 	bl	800af7c <ucdr_buffer_alignment>
 800afa2:	68a5      	ldr	r5, [r4, #8]
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	7566      	strb	r6, [r4, #21]
 800afaa:	4405      	add	r5, r0
 800afac:	42ab      	cmp	r3, r5
 800afae:	4410      	add	r0, r2
 800afb0:	bf28      	it	cs
 800afb2:	462b      	movcs	r3, r5
 800afb4:	6120      	str	r0, [r4, #16]
 800afb6:	60a3      	str	r3, [r4, #8]
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	bf00      	nop

0800afbc <ucdr_buffer_length>:
 800afbc:	6882      	ldr	r2, [r0, #8]
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	1a10      	subs	r0, r2, r0
 800afc2:	4770      	bx	lr

0800afc4 <ucdr_buffer_remaining>:
 800afc4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800afc8:	1a10      	subs	r0, r2, r0
 800afca:	4770      	bx	lr

0800afcc <ucdr_check_final_buffer_behavior_array>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	7d83      	ldrb	r3, [r0, #22]
 800afd0:	b963      	cbnz	r3, 800afec <ucdr_check_final_buffer_behavior_array+0x20>
 800afd2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	d308      	bcc.n	800aff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800afde:	b139      	cbz	r1, 800aff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800afe0:	6983      	ldr	r3, [r0, #24]
 800afe2:	b163      	cbz	r3, 800affe <ucdr_check_final_buffer_behavior_array+0x32>
 800afe4:	69c1      	ldr	r1, [r0, #28]
 800afe6:	4798      	blx	r3
 800afe8:	75a0      	strb	r0, [r4, #22]
 800afea:	b108      	cbz	r0, 800aff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800afec:	2000      	movs	r0, #0
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff ffe7 	bl	800afc4 <ucdr_buffer_remaining>
 800aff6:	42a8      	cmp	r0, r5
 800aff8:	bf28      	it	cs
 800affa:	4628      	movcs	r0, r5
 800affc:	bd38      	pop	{r3, r4, r5, pc}
 800affe:	2301      	movs	r3, #1
 800b000:	7583      	strb	r3, [r0, #22]
 800b002:	e7f3      	b.n	800afec <ucdr_check_final_buffer_behavior_array+0x20>

0800b004 <ucdr_advance_buffer>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	f7ff ff59 	bl	800aec0 <ucdr_check_buffer_available_for>
 800b00e:	b178      	cbz	r0, 800b030 <ucdr_advance_buffer+0x2c>
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	6921      	ldr	r1, [r4, #16]
 800b014:	442b      	add	r3, r5
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	2301      	movs	r3, #1
 800b01a:	4429      	add	r1, r5
 800b01c:	7563      	strb	r3, [r4, #21]
 800b01e:	6121      	str	r1, [r4, #16]
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	68a2      	ldr	r2, [r4, #8]
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	4402      	add	r2, r0
 800b028:	4403      	add	r3, r0
 800b02a:	1a2d      	subs	r5, r5, r0
 800b02c:	60a2      	str	r2, [r4, #8]
 800b02e:	6123      	str	r3, [r4, #16]
 800b030:	2201      	movs	r2, #1
 800b032:	4629      	mov	r1, r5
 800b034:	4620      	mov	r0, r4
 800b036:	f7ff ffc9 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d1f1      	bne.n	800b022 <ucdr_advance_buffer+0x1e>
 800b03e:	2301      	movs	r3, #1
 800b040:	7563      	strb	r3, [r4, #21]
 800b042:	bd38      	pop	{r3, r4, r5, pc}

0800b044 <uxr_buffer_delete_entity>:
 800b044:	b530      	push	{r4, r5, lr}
 800b046:	b08f      	sub	sp, #60	@ 0x3c
 800b048:	2403      	movs	r4, #3
 800b04a:	2500      	movs	r5, #0
 800b04c:	e9cd 4500 	strd	r4, r5, [sp]
 800b050:	9202      	str	r2, [sp, #8]
 800b052:	ab06      	add	r3, sp, #24
 800b054:	2204      	movs	r2, #4
 800b056:	9103      	str	r1, [sp, #12]
 800b058:	4604      	mov	r4, r0
 800b05a:	f001 f87b 	bl	800c154 <uxr_prepare_stream_to_write_submessage>
 800b05e:	b918      	cbnz	r0, 800b068 <uxr_buffer_delete_entity+0x24>
 800b060:	4604      	mov	r4, r0
 800b062:	4620      	mov	r0, r4
 800b064:	b00f      	add	sp, #60	@ 0x3c
 800b066:	bd30      	pop	{r4, r5, pc}
 800b068:	9902      	ldr	r1, [sp, #8]
 800b06a:	aa05      	add	r2, sp, #20
 800b06c:	4620      	mov	r0, r4
 800b06e:	f001 f9ab 	bl	800c3c8 <uxr_init_base_object_request>
 800b072:	a905      	add	r1, sp, #20
 800b074:	4604      	mov	r4, r0
 800b076:	a806      	add	r0, sp, #24
 800b078:	f002 fafa 	bl	800d670 <uxr_serialize_DELETE_Payload>
 800b07c:	4620      	mov	r0, r4
 800b07e:	b00f      	add	sp, #60	@ 0x3c
 800b080:	bd30      	pop	{r4, r5, pc}
 800b082:	bf00      	nop

0800b084 <uxr_common_create_entity>:
 800b084:	b530      	push	{r4, r5, lr}
 800b086:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b08a:	b08d      	sub	sp, #52	@ 0x34
 800b08c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b090:	2d01      	cmp	r5, #1
 800b092:	bf0c      	ite	eq
 800b094:	f003 0201 	andeq.w	r2, r3, #1
 800b098:	2200      	movne	r2, #0
 800b09a:	330e      	adds	r3, #14
 800b09c:	4604      	mov	r4, r0
 800b09e:	441a      	add	r2, r3
 800b0a0:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 800b0a4:	9001      	str	r0, [sp, #4]
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	9100      	str	r1, [sp, #0]
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	9903      	ldr	r1, [sp, #12]
 800b0ae:	ab04      	add	r3, sp, #16
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f001 f84f 	bl	800c154 <uxr_prepare_stream_to_write_submessage>
 800b0b6:	b918      	cbnz	r0, 800b0c0 <uxr_common_create_entity+0x3c>
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	b00d      	add	sp, #52	@ 0x34
 800b0be:	bd30      	pop	{r4, r5, pc}
 800b0c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0c2:	9902      	ldr	r1, [sp, #8]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f001 f97f 	bl	800c3c8 <uxr_init_base_object_request>
 800b0ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	a804      	add	r0, sp, #16
 800b0d0:	f002 fa22 	bl	800d518 <uxr_serialize_CREATE_Payload>
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	b00d      	add	sp, #52	@ 0x34
 800b0d8:	bd30      	pop	{r4, r5, pc}
 800b0da:	bf00      	nop

0800b0dc <uxr_buffer_create_participant_bin>:
 800b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0de:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800b0e2:	ac11      	add	r4, sp, #68	@ 0x44
 800b0e4:	9103      	str	r1, [sp, #12]
 800b0e6:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 800b0e8:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 800b0ec:	2103      	movs	r1, #3
 800b0ee:	7221      	strb	r1, [r4, #8]
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	7123      	strb	r3, [r4, #4]
 800b0f6:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 800b0fa:	9202      	str	r2, [sp, #8]
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	f88d 1014 	strb.w	r1, [sp, #20]
 800b102:	b1ce      	cbz	r6, 800b138 <uxr_buffer_create_participant_bin+0x5c>
 800b104:	f88d 301c 	strb.w	r3, [sp, #28]
 800b108:	9608      	str	r6, [sp, #32]
 800b10a:	a809      	add	r0, sp, #36	@ 0x24
 800b10c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b110:	a915      	add	r1, sp, #84	@ 0x54
 800b112:	f7ff ff27 	bl	800af64 <ucdr_init_buffer>
 800b116:	a905      	add	r1, sp, #20
 800b118:	a809      	add	r0, sp, #36	@ 0x24
 800b11a:	f001 feb1 	bl	800ce80 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b11e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b120:	9401      	str	r4, [sp, #4]
 800b122:	b283      	uxth	r3, r0
 800b124:	9700      	str	r7, [sp, #0]
 800b126:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b12a:	60e0      	str	r0, [r4, #12]
 800b12c:	4628      	mov	r0, r5
 800b12e:	f7ff ffa9 	bl	800b084 <uxr_common_create_entity>
 800b132:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 800b136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b138:	f88d 601c 	strb.w	r6, [sp, #28]
 800b13c:	e7e5      	b.n	800b10a <uxr_buffer_create_participant_bin+0x2e>
 800b13e:	bf00      	nop

0800b140 <uxr_buffer_create_topic_bin>:
 800b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b142:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b146:	ac13      	add	r4, sp, #76	@ 0x4c
 800b148:	4605      	mov	r5, r0
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	4618      	mov	r0, r3
 800b14e:	a997      	add	r1, sp, #604	@ 0x25c
 800b150:	2602      	movs	r6, #2
 800b152:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b156:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 800b15a:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 800b15e:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 800b160:	f000 f8ea 	bl	800b338 <uxr_object_id_to_raw>
 800b164:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 800b166:	9206      	str	r2, [sp, #24]
 800b168:	2303      	movs	r3, #3
 800b16a:	2101      	movs	r1, #1
 800b16c:	7223      	strb	r3, [r4, #8]
 800b16e:	a80b      	add	r0, sp, #44	@ 0x2c
 800b170:	2300      	movs	r3, #0
 800b172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b176:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800b17a:	a917      	add	r1, sp, #92	@ 0x5c
 800b17c:	f88d 301c 	strb.w	r3, [sp, #28]
 800b180:	960a      	str	r6, [sp, #40]	@ 0x28
 800b182:	f7ff feef 	bl	800af64 <ucdr_init_buffer>
 800b186:	a906      	add	r1, sp, #24
 800b188:	a80b      	add	r0, sp, #44	@ 0x2c
 800b18a:	f001 fe9b 	bl	800cec4 <uxr_serialize_OBJK_Topic_Binary>
 800b18e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800b190:	9401      	str	r4, [sp, #4]
 800b192:	9700      	str	r7, [sp, #0]
 800b194:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b198:	4628      	mov	r0, r5
 800b19a:	b2b3      	uxth	r3, r6
 800b19c:	60e6      	str	r6, [r4, #12]
 800b19e:	f7ff ff71 	bl	800b084 <uxr_common_create_entity>
 800b1a2:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1a8 <uxr_buffer_create_publisher_bin>:
 800b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800b1ae:	ac0e      	add	r4, sp, #56	@ 0x38
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	9105      	str	r1, [sp, #20]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	2603      	movs	r6, #3
 800b1b8:	a992      	add	r1, sp, #584	@ 0x248
 800b1ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b1be:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800b1c2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800b1c6:	f000 f8b7 	bl	800b338 <uxr_object_id_to_raw>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	a806      	add	r0, sp, #24
 800b1ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1d2:	a912      	add	r1, sp, #72	@ 0x48
 800b1d4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b1d8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b1dc:	7226      	strb	r6, [r4, #8]
 800b1de:	f7ff fec1 	bl	800af64 <ucdr_init_buffer>
 800b1e2:	a993      	add	r1, sp, #588	@ 0x24c
 800b1e4:	a806      	add	r0, sp, #24
 800b1e6:	f001 ff21 	bl	800d02c <uxr_serialize_OBJK_Publisher_Binary>
 800b1ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b1ec:	9700      	str	r7, [sp, #0]
 800b1ee:	9401      	str	r4, [sp, #4]
 800b1f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	b2b3      	uxth	r3, r6
 800b1f8:	60e6      	str	r6, [r4, #12]
 800b1fa:	f7ff ff43 	bl	800b084 <uxr_common_create_entity>
 800b1fe:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800b202:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b204 <uxr_buffer_create_datawriter_bin>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b20c:	ac1d      	add	r4, sp, #116	@ 0x74
 800b20e:	2505      	movs	r5, #5
 800b210:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b214:	9105      	str	r1, [sp, #20]
 800b216:	4606      	mov	r6, r0
 800b218:	a9a1      	add	r1, sp, #644	@ 0x284
 800b21a:	4618      	mov	r0, r3
 800b21c:	7125      	strb	r5, [r4, #4]
 800b21e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800b222:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800b226:	2703      	movs	r7, #3
 800b228:	f000 f886 	bl	800b338 <uxr_object_id_to_raw>
 800b22c:	a90e      	add	r1, sp, #56	@ 0x38
 800b22e:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800b230:	7227      	strb	r7, [r4, #8]
 800b232:	f000 f881 	bl	800b338 <uxr_object_id_to_raw>
 800b236:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b23a:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 800b23e:	3d00      	subs	r5, #0
 800b240:	f04f 0300 	mov.w	r3, #0
 800b244:	bf18      	it	ne
 800b246:	2501      	movne	r5, #1
 800b248:	2201      	movs	r2, #1
 800b24a:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b24e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800b252:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b256:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b25a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b25e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b262:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b266:	bb89      	cbnz	r1, 800b2cc <uxr_buffer_create_datawriter_bin+0xc8>
 800b268:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b26c:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b270:	f04f 0c13 	mov.w	ip, #19
 800b274:	250b      	movs	r5, #11
 800b276:	2221      	movs	r2, #33	@ 0x21
 800b278:	2111      	movs	r1, #17
 800b27a:	2009      	movs	r0, #9
 800b27c:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800b280:	b923      	cbnz	r3, 800b28c <uxr_buffer_create_datawriter_bin+0x88>
 800b282:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b286:	4672      	mov	r2, lr
 800b288:	4661      	mov	r1, ip
 800b28a:	4628      	mov	r0, r5
 800b28c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800b290:	2b01      	cmp	r3, #1
 800b292:	d025      	beq.n	800b2e0 <uxr_buffer_create_datawriter_bin+0xdc>
 800b294:	2b03      	cmp	r3, #3
 800b296:	d029      	beq.n	800b2ec <uxr_buffer_create_datawriter_bin+0xe8>
 800b298:	b32b      	cbz	r3, 800b2e6 <uxr_buffer_create_datawriter_bin+0xe2>
 800b29a:	a806      	add	r0, sp, #24
 800b29c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2a0:	a921      	add	r1, sp, #132	@ 0x84
 800b2a2:	f7ff fe5f 	bl	800af64 <ucdr_init_buffer>
 800b2a6:	a90e      	add	r1, sp, #56	@ 0x38
 800b2a8:	a806      	add	r0, sp, #24
 800b2aa:	f001 ff35 	bl	800d118 <uxr_serialize_OBJK_DataWriter_Binary>
 800b2ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b2b0:	9401      	str	r4, [sp, #4]
 800b2b2:	b283      	uxth	r3, r0
 800b2b4:	f8cd 8000 	str.w	r8, [sp]
 800b2b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b2bc:	60e0      	str	r0, [r4, #12]
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7ff fee0 	bl	800b084 <uxr_common_create_entity>
 800b2c4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800b2d0:	f04f 0c12 	mov.w	ip, #18
 800b2d4:	250a      	movs	r5, #10
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	2110      	movs	r1, #16
 800b2da:	2008      	movs	r0, #8
 800b2dc:	2702      	movs	r7, #2
 800b2de:	e7cd      	b.n	800b27c <uxr_buffer_create_datawriter_bin+0x78>
 800b2e0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800b2e4:	e7d9      	b.n	800b29a <uxr_buffer_create_datawriter_bin+0x96>
 800b2e6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800b2ea:	e7d6      	b.n	800b29a <uxr_buffer_create_datawriter_bin+0x96>
 800b2ec:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b2f0:	e7d3      	b.n	800b29a <uxr_buffer_create_datawriter_bin+0x96>
 800b2f2:	bf00      	nop

0800b2f4 <uxr_object_id>:
 800b2f4:	b082      	sub	sp, #8
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f88d 1006 	strb.w	r1, [sp, #6]
 800b2fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b300:	f360 030f 	bfi	r3, r0, #0, #16
 800b304:	f362 431f 	bfi	r3, r2, #16, #16
 800b308:	4618      	mov	r0, r3
 800b30a:	b002      	add	sp, #8
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop

0800b310 <uxr_object_id_from_raw>:
 800b310:	7843      	ldrb	r3, [r0, #1]
 800b312:	7801      	ldrb	r1, [r0, #0]
 800b314:	b082      	sub	sp, #8
 800b316:	f003 000f 	and.w	r0, r3, #15
 800b31a:	f88d 0006 	strb.w	r0, [sp, #6]
 800b31e:	091b      	lsrs	r3, r3, #4
 800b320:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b324:	2200      	movs	r2, #0
 800b326:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800b32a:	f363 020f 	bfi	r2, r3, #0, #16
 800b32e:	f361 421f 	bfi	r2, r1, #16, #16
 800b332:	4610      	mov	r0, r2
 800b334:	b002      	add	sp, #8
 800b336:	4770      	bx	lr

0800b338 <uxr_object_id_to_raw>:
 800b338:	4602      	mov	r2, r0
 800b33a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b33e:	b082      	sub	sp, #8
 800b340:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800b344:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800b348:	700a      	strb	r2, [r1, #0]
 800b34a:	704b      	strb	r3, [r1, #1]
 800b34c:	b002      	add	sp, #8
 800b34e:	4770      	bx	lr

0800b350 <on_get_fragmentation_info>:
 800b350:	b500      	push	{lr}
 800b352:	b08b      	sub	sp, #44	@ 0x2c
 800b354:	4601      	mov	r1, r0
 800b356:	2204      	movs	r2, #4
 800b358:	a802      	add	r0, sp, #8
 800b35a:	f7ff fe03 	bl	800af64 <ucdr_init_buffer>
 800b35e:	f10d 0305 	add.w	r3, sp, #5
 800b362:	a802      	add	r0, sp, #8
 800b364:	f10d 0206 	add.w	r2, sp, #6
 800b368:	a901      	add	r1, sp, #4
 800b36a:	f001 f9b1 	bl	800c6d0 <uxr_read_submessage_header>
 800b36e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b372:	2b0d      	cmp	r3, #13
 800b374:	d003      	beq.n	800b37e <on_get_fragmentation_info+0x2e>
 800b376:	2000      	movs	r0, #0
 800b378:	b00b      	add	sp, #44	@ 0x2c
 800b37a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b37e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b382:	f013 0f02 	tst.w	r3, #2
 800b386:	bf14      	ite	ne
 800b388:	2002      	movne	r0, #2
 800b38a:	2001      	moveq	r0, #1
 800b38c:	b00b      	add	sp, #44	@ 0x2c
 800b38e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b392:	bf00      	nop

0800b394 <read_submessage_get_info>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	2500      	movs	r5, #0
 800b398:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800b39c:	4604      	mov	r4, r0
 800b39e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800b3a2:	460e      	mov	r6, r1
 800b3a4:	a810      	add	r0, sp, #64	@ 0x40
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b3ac:	f006 fe52 	bl	8012054 <memset>
 800b3b0:	a903      	add	r1, sp, #12
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	f002 f948 	bl	800d648 <uxr_deserialize_GET_INFO_Payload>
 800b3b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b3bc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fff9 	bl	800c3b8 <uxr_session_header_offset>
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	9000      	str	r0, [sp, #0]
 800b3ca:	a905      	add	r1, sp, #20
 800b3cc:	a808      	add	r0, sp, #32
 800b3ce:	220c      	movs	r2, #12
 800b3d0:	f7ff fdb6 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800b3d4:	a910      	add	r1, sp, #64	@ 0x40
 800b3d6:	a808      	add	r0, sp, #32
 800b3d8:	f002 f9a8 	bl	800d72c <uxr_serialize_INFO_Payload>
 800b3dc:	9b08      	ldr	r3, [sp, #32]
 800b3de:	462a      	mov	r2, r5
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 ff90 	bl	800c308 <uxr_stamp_session_header>
 800b3e8:	a808      	add	r0, sp, #32
 800b3ea:	f7ff fde7 	bl	800afbc <ucdr_buffer_length>
 800b3ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	a905      	add	r1, sp, #20
 800b3f4:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b3f8:	47a0      	blx	r4
 800b3fa:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}

0800b400 <write_submessage_acknack.isra.0>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	b092      	sub	sp, #72	@ 0x48
 800b404:	4605      	mov	r5, r0
 800b406:	460e      	mov	r6, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	f000 ffd5 	bl	800c3b8 <uxr_session_header_offset>
 800b40e:	a905      	add	r1, sp, #20
 800b410:	9000      	str	r0, [sp, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	a80a      	add	r0, sp, #40	@ 0x28
 800b416:	2211      	movs	r2, #17
 800b418:	f7ff fd92 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800b41c:	2218      	movs	r2, #24
 800b41e:	fb02 5404 	mla	r4, r2, r4, r5
 800b422:	2300      	movs	r3, #0
 800b424:	2205      	movs	r2, #5
 800b426:	3450      	adds	r4, #80	@ 0x50
 800b428:	a80a      	add	r0, sp, #40	@ 0x28
 800b42a:	210a      	movs	r1, #10
 800b42c:	f001 f936 	bl	800c69c <uxr_buffer_submessage_header>
 800b430:	a903      	add	r1, sp, #12
 800b432:	4620      	mov	r0, r4
 800b434:	f004 ff14 	bl	8010260 <uxr_compute_acknack>
 800b438:	a903      	add	r1, sp, #12
 800b43a:	ba43      	rev16	r3, r0
 800b43c:	a80a      	add	r0, sp, #40	@ 0x28
 800b43e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b442:	f88d 6010 	strb.w	r6, [sp, #16]
 800b446:	f002 f9e1 	bl	800d80c <uxr_serialize_ACKNACK_Payload>
 800b44a:	2200      	movs	r2, #0
 800b44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b44e:	4611      	mov	r1, r2
 800b450:	4628      	mov	r0, r5
 800b452:	f000 ff59 	bl	800c308 <uxr_stamp_session_header>
 800b456:	a80a      	add	r0, sp, #40	@ 0x28
 800b458:	f7ff fdb0 	bl	800afbc <ucdr_buffer_length>
 800b45c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b45e:	4602      	mov	r2, r0
 800b460:	a905      	add	r1, sp, #20
 800b462:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b466:	47a0      	blx	r4
 800b468:	b012      	add	sp, #72	@ 0x48
 800b46a:	bd70      	pop	{r4, r5, r6, pc}

0800b46c <uxr_init_session>:
 800b46c:	b5d0      	push	{r4, r6, r7, lr}
 800b46e:	2300      	movs	r3, #0
 800b470:	2600      	movs	r6, #0
 800b472:	2700      	movs	r7, #0
 800b474:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 800b478:	4604      	mov	r4, r0
 800b47a:	6701      	str	r1, [r0, #112]	@ 0x70
 800b47c:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 800b480:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 800b484:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 800b488:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 800b48c:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 800b490:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800b494:	2181      	movs	r1, #129	@ 0x81
 800b496:	f000 fea1 	bl	800c1dc <uxr_init_session_info>
 800b49a:	f104 0008 	add.w	r0, r4, #8
 800b49e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800b4a2:	f001 b817 	b.w	800c4d4 <uxr_init_stream_storage>
 800b4a6:	bf00      	nop

0800b4a8 <uxr_set_status_callback>:
 800b4a8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop

0800b4b0 <uxr_set_topic_callback>:
 800b4b0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop

0800b4b8 <uxr_set_request_callback>:
 800b4b8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop

0800b4c0 <uxr_set_reply_callback>:
 800b4c0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop

0800b4c8 <uxr_create_output_best_effort_stream>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	e9cd 2100 	strd	r2, r1, [sp]
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	f000 ff71 	bl	800c3b8 <uxr_session_header_offset>
 800b4d6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f104 0008 	add.w	r0, r4, #8
 800b4e0:	b004      	add	sp, #16
 800b4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e6:	f001 b83f 	b.w	800c568 <uxr_add_output_best_effort_buffer>
 800b4ea:	bf00      	nop

0800b4ec <uxr_create_output_reliable_stream>:
 800b4ec:	b530      	push	{r4, r5, lr}
 800b4ee:	b089      	sub	sp, #36	@ 0x24
 800b4f0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b4f4:	9303      	str	r3, [sp, #12]
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	f000 ff5e 	bl	800c3b8 <uxr_session_header_offset>
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b502:	9905      	ldr	r1, [sp, #20]
 800b504:	9500      	str	r5, [sp, #0]
 800b506:	f104 0008 	add.w	r0, r4, #8
 800b50a:	f001 f83f 	bl	800c58c <uxr_add_output_reliable_buffer>
 800b50e:	2200      	movs	r2, #0
 800b510:	b2c3      	uxtb	r3, r0
 800b512:	f363 0207 	bfi	r2, r3, #0, #8
 800b516:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b51a:	f363 220f 	bfi	r2, r3, #8, #8
 800b51e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b522:	f363 4217 	bfi	r2, r3, #16, #8
 800b526:	0e03      	lsrs	r3, r0, #24
 800b528:	f363 621f 	bfi	r2, r3, #24, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	b009      	add	sp, #36	@ 0x24
 800b530:	bd30      	pop	{r4, r5, pc}
 800b532:	bf00      	nop

0800b534 <uxr_create_input_best_effort_stream>:
 800b534:	b082      	sub	sp, #8
 800b536:	3008      	adds	r0, #8
 800b538:	b002      	add	sp, #8
 800b53a:	f001 b841 	b.w	800c5c0 <uxr_add_input_best_effort_buffer>
 800b53e:	bf00      	nop

0800b540 <uxr_create_input_reliable_stream>:
 800b540:	b510      	push	{r4, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	4c0b      	ldr	r4, [pc, #44]	@ (800b574 <uxr_create_input_reliable_stream+0x34>)
 800b546:	9400      	str	r4, [sp, #0]
 800b548:	3008      	adds	r0, #8
 800b54a:	f001 f84f 	bl	800c5ec <uxr_add_input_reliable_buffer>
 800b54e:	2200      	movs	r2, #0
 800b550:	b2c3      	uxtb	r3, r0
 800b552:	f363 0207 	bfi	r2, r3, #0, #8
 800b556:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b55a:	f363 220f 	bfi	r2, r3, #8, #8
 800b55e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b562:	f363 4217 	bfi	r2, r3, #16, #8
 800b566:	0e03      	lsrs	r3, r0, #24
 800b568:	f363 621f 	bfi	r2, r3, #24, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	b004      	add	sp, #16
 800b570:	bd10      	pop	{r4, pc}
 800b572:	bf00      	nop
 800b574:	0800b351 	.word	0x0800b351

0800b578 <uxr_epoch_nanos>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	f001 f8f0 	bl	800c760 <uxr_nanos>
 800b580:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800b584:	1ac0      	subs	r0, r0, r3
 800b586:	eb61 0102 	sbc.w	r1, r1, r2
 800b58a:	bd10      	pop	{r4, pc}

0800b58c <uxr_flash_output_streams>:
 800b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	7e03      	ldrb	r3, [r0, #24]
 800b592:	b084      	sub	sp, #16
 800b594:	4604      	mov	r4, r0
 800b596:	b1fb      	cbz	r3, 800b5d8 <uxr_flash_output_streams+0x4c>
 800b598:	f04f 0900 	mov.w	r9, #0
 800b59c:	4648      	mov	r0, r9
 800b59e:	f10d 0802 	add.w	r8, sp, #2
 800b5a2:	af03      	add	r7, sp, #12
 800b5a4:	ae02      	add	r6, sp, #8
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b5ae:	f000 ff3b 	bl	800c428 <uxr_stream_id>
 800b5b2:	3508      	adds	r5, #8
 800b5b4:	4684      	mov	ip, r0
 800b5b6:	4643      	mov	r3, r8
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	463a      	mov	r2, r7
 800b5bc:	4631      	mov	r1, r6
 800b5be:	f8cd c004 	str.w	ip, [sp, #4]
 800b5c2:	f004 fed5 	bl	8010370 <uxr_prepare_best_effort_buffer_to_send>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d13d      	bne.n	800b646 <uxr_flash_output_streams+0xba>
 800b5ca:	7e23      	ldrb	r3, [r4, #24]
 800b5cc:	f109 0901 	add.w	r9, r9, #1
 800b5d0:	fa5f f089 	uxtb.w	r0, r9
 800b5d4:	4283      	cmp	r3, r0
 800b5d6:	d8e6      	bhi.n	800b5a6 <uxr_flash_output_streams+0x1a>
 800b5d8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b5dc:	b383      	cbz	r3, 800b640 <uxr_flash_output_streams+0xb4>
 800b5de:	f04f 0900 	mov.w	r9, #0
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f10d 0802 	add.w	r8, sp, #2
 800b5e8:	af03      	add	r7, sp, #12
 800b5ea:	ae02      	add	r6, sp, #8
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	2102      	movs	r1, #2
 800b5f0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b5f4:	f000 ff18 	bl	800c428 <uxr_stream_id>
 800b5f8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b5fc:	3520      	adds	r5, #32
 800b5fe:	9001      	str	r0, [sp, #4]
 800b600:	e00c      	b.n	800b61c <uxr_flash_output_streams+0x90>
 800b602:	9b02      	ldr	r3, [sp, #8]
 800b604:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b608:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b60c:	f000 fe7c 	bl	800c308 <uxr_stamp_session_header>
 800b610:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b612:	9a03      	ldr	r2, [sp, #12]
 800b614:	9902      	ldr	r1, [sp, #8]
 800b616:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800b61a:	47d0      	blx	sl
 800b61c:	4643      	mov	r3, r8
 800b61e:	463a      	mov	r2, r7
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	f005 f8b8 	bl	8010798 <uxr_prepare_next_reliable_buffer_to_send>
 800b628:	4603      	mov	r3, r0
 800b62a:	4620      	mov	r0, r4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1e8      	bne.n	800b602 <uxr_flash_output_streams+0x76>
 800b630:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b634:	f109 0901 	add.w	r9, r9, #1
 800b638:	fa5f f089 	uxtb.w	r0, r9
 800b63c:	4283      	cmp	r3, r0
 800b63e:	d8d5      	bhi.n	800b5ec <uxr_flash_output_streams+0x60>
 800b640:	b004      	add	sp, #16
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	9b02      	ldr	r3, [sp, #8]
 800b648:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b64c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b650:	4620      	mov	r0, r4
 800b652:	f000 fe59 	bl	800c308 <uxr_stamp_session_header>
 800b656:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b658:	9a03      	ldr	r2, [sp, #12]
 800b65a:	9902      	ldr	r1, [sp, #8]
 800b65c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b660:	47a8      	blx	r5
 800b662:	f109 0901 	add.w	r9, r9, #1
 800b666:	7e23      	ldrb	r3, [r4, #24]
 800b668:	fa5f f089 	uxtb.w	r0, r9
 800b66c:	4283      	cmp	r3, r0
 800b66e:	d89a      	bhi.n	800b5a6 <uxr_flash_output_streams+0x1a>
 800b670:	e7b2      	b.n	800b5d8 <uxr_flash_output_streams+0x4c>
 800b672:	bf00      	nop

0800b674 <read_submessage_info>:
 800b674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b678:	460d      	mov	r5, r1
 800b67a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800b67e:	4669      	mov	r1, sp
 800b680:	4607      	mov	r7, r0
 800b682:	4628      	mov	r0, r5
 800b684:	f001 fee6 	bl	800d454 <uxr_deserialize_BaseObjectReply>
 800b688:	a902      	add	r1, sp, #8
 800b68a:	4604      	mov	r4, r0
 800b68c:	4628      	mov	r0, r5
 800b68e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b692:	f7fe fc13 	bl	8009ebc <ucdr_deserialize_bool>
 800b696:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b69a:	4004      	ands	r4, r0
 800b69c:	b2e4      	uxtb	r4, r4
 800b69e:	b95b      	cbnz	r3, 800b6b8 <read_submessage_info+0x44>
 800b6a0:	a987      	add	r1, sp, #540	@ 0x21c
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7fe fc0a 	bl	8009ebc <ucdr_deserialize_bool>
 800b6a8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	b94b      	cbnz	r3, 800b6c4 <read_submessage_info+0x50>
 800b6b0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	a903      	add	r1, sp, #12
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f001 fd58 	bl	800d170 <uxr_deserialize_ObjectVariant>
 800b6c0:	4004      	ands	r4, r0
 800b6c2:	e7ed      	b.n	800b6a0 <read_submessage_info+0x2c>
 800b6c4:	a988      	add	r1, sp, #544	@ 0x220
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f7fe fc28 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800b6cc:	4234      	tst	r4, r6
 800b6ce:	d0ef      	beq.n	800b6b0 <read_submessage_info+0x3c>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0ed      	beq.n	800b6b0 <read_submessage_info+0x3c>
 800b6d4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800b6d8:	2b0d      	cmp	r3, #13
 800b6da:	d1e9      	bne.n	800b6b0 <read_submessage_info+0x3c>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	a98a      	add	r1, sp, #552	@ 0x228
 800b6e0:	f7ff f9c2 	bl	800aa68 <ucdr_deserialize_int16_t>
 800b6e4:	b140      	cbz	r0, 800b6f8 <read_submessage_info+0x84>
 800b6e6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd07      	ble.n	800b6fe <read_submessage_info+0x8a>
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	bf14      	ite	ne
 800b6f4:	2001      	movne	r0, #1
 800b6f6:	2002      	moveq	r0, #2
 800b6f8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800b6fc:	e7d8      	b.n	800b6b0 <read_submessage_info+0x3c>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e7fa      	b.n	800b6f8 <read_submessage_info+0x84>
 800b702:	bf00      	nop

0800b704 <read_submessage_list>:
 800b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	b098      	sub	sp, #96	@ 0x60
 800b70a:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 800ba10 <read_submessage_list+0x30c>
 800b70e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b710:	4604      	mov	r4, r0
 800b712:	4688      	mov	r8, r1
 800b714:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 800b718:	aa0e      	add	r2, sp, #56	@ 0x38
 800b71a:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 800b71e:	4640      	mov	r0, r8
 800b720:	f000 ffd6 	bl	800c6d0 <uxr_read_submessage_header>
 800b724:	2800      	cmp	r0, #0
 800b726:	f000 813d 	beq.w	800b9a4 <read_submessage_list+0x2a0>
 800b72a:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 800b72e:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 800b732:	3b02      	subs	r3, #2
 800b734:	2b0d      	cmp	r3, #13
 800b736:	d8ed      	bhi.n	800b714 <read_submessage_list+0x10>
 800b738:	a101      	add	r1, pc, #4	@ (adr r1, 800b740 <read_submessage_list+0x3c>)
 800b73a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b73e:	bf00      	nop
 800b740:	0800b99b 	.word	0x0800b99b
 800b744:	0800b715 	.word	0x0800b715
 800b748:	0800b98b 	.word	0x0800b98b
 800b74c:	0800b92f 	.word	0x0800b92f
 800b750:	0800b925 	.word	0x0800b925
 800b754:	0800b715 	.word	0x0800b715
 800b758:	0800b715 	.word	0x0800b715
 800b75c:	0800b887 	.word	0x0800b887
 800b760:	0800b819 	.word	0x0800b819
 800b764:	0800b7d7 	.word	0x0800b7d7
 800b768:	0800b715 	.word	0x0800b715
 800b76c:	0800b715 	.word	0x0800b715
 800b770:	0800b715 	.word	0x0800b715
 800b774:	0800b779 	.word	0x0800b779
 800b778:	a912      	add	r1, sp, #72	@ 0x48
 800b77a:	4640      	mov	r0, r8
 800b77c:	f002 f896 	bl	800d8ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800b780:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 800b784:	2d00      	cmp	r5, #0
 800b786:	f000 8115 	beq.w	800b9b4 <read_submessage_list+0x2b0>
 800b78a:	f000 ffe9 	bl	800c760 <uxr_nanos>
 800b78e:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800b790:	460b      	mov	r3, r1
 800b792:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b794:	2700      	movs	r7, #0
 800b796:	fbc9 6701 	smlal	r6, r7, r9, r1
 800b79a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b79e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b7a4:	460e      	mov	r6, r1
 800b7a6:	2700      	movs	r7, #0
 800b7a8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b7ac:	9106      	str	r1, [sp, #24]
 800b7ae:	fbc9 6700 	smlal	r6, r7, r9, r0
 800b7b2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b7b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b7b8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b7ba:	2700      	movs	r7, #0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	4639      	mov	r1, r7
 800b7c0:	fbc9 0106 	smlal	r0, r1, r9, r6
 800b7c4:	e9cd 0100 	strd	r0, r1, [sp]
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	47a8      	blx	r5
 800b7cc:	f04f 0301 	mov.w	r3, #1
 800b7d0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800b7d4:	e79e      	b.n	800b714 <read_submessage_list+0x10>
 800b7d6:	a912      	add	r1, sp, #72	@ 0x48
 800b7d8:	4640      	mov	r0, r8
 800b7da:	f002 f855 	bl	800d888 <uxr_deserialize_HEARTBEAT_Payload>
 800b7de:	2100      	movs	r1, #0
 800b7e0:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800b7e4:	f000 fe4a 	bl	800c47c <uxr_stream_id_from_raw>
 800b7e8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	f104 0008 	add.w	r0, r4, #8
 800b7f4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7f6:	f000 ff2f 	bl	800c658 <uxr_get_input_reliable_stream>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d08a      	beq.n	800b714 <read_submessage_list+0x10>
 800b7fe:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 800b802:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 800b806:	f004 fd1f 	bl	8010248 <uxr_process_heartbeat>
 800b80a:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 800b80e:	462a      	mov	r2, r5
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fdf5 	bl	800b400 <write_submessage_acknack.isra.0>
 800b816:	e77d      	b.n	800b714 <read_submessage_list+0x10>
 800b818:	a912      	add	r1, sp, #72	@ 0x48
 800b81a:	4640      	mov	r0, r8
 800b81c:	f002 f80c 	bl	800d838 <uxr_deserialize_ACKNACK_Payload>
 800b820:	2100      	movs	r1, #0
 800b822:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800b826:	f000 fe29 	bl	800c47c <uxr_stream_id_from_raw>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b830:	f104 0008 	add.w	r0, r4, #8
 800b834:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b836:	f000 fef9 	bl	800c62c <uxr_get_output_reliable_stream>
 800b83a:	4605      	mov	r5, r0
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f43f af69 	beq.w	800b714 <read_submessage_list+0x10>
 800b842:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 800b846:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 800b84a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800b84e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b852:	b289      	uxth	r1, r1
 800b854:	f005 f848 	bl	80108e8 <uxr_process_acknack>
 800b858:	4628      	mov	r0, r5
 800b85a:	f005 f80b 	bl	8010874 <uxr_begin_output_nack_buffer_it>
 800b85e:	af10      	add	r7, sp, #64	@ 0x40
 800b860:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800b864:	e005      	b.n	800b872 <read_submessage_list+0x16e>
 800b866:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b868:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b86a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b86c:	e9d3 0600 	ldrd	r0, r6, [r3]
 800b870:	47b0      	blx	r6
 800b872:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 800b876:	aa11      	add	r2, sp, #68	@ 0x44
 800b878:	4639      	mov	r1, r7
 800b87a:	4628      	mov	r0, r5
 800b87c:	f004 fffc 	bl	8010878 <uxr_next_reliable_nack_buffer_to_send>
 800b880:	2800      	cmp	r0, #0
 800b882:	d1f0      	bne.n	800b866 <read_submessage_list+0x162>
 800b884:	e746      	b.n	800b714 <read_submessage_list+0x10>
 800b886:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 800b88a:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 800b88e:	af10      	add	r7, sp, #64	@ 0x40
 800b890:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 800b894:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 800b898:	4639      	mov	r1, r7
 800b89a:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800b89e:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 800b8a2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800b8a6:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800b8b0:	f001 fd0c 	bl	800d2cc <uxr_deserialize_BaseObjectRequest>
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	a911      	add	r1, sp, #68	@ 0x44
 800b8b8:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800b8bc:	f000 fda2 	bl	800c404 <uxr_parse_base_object_request>
 800b8c0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800b8c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b8c6:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 800b8ca:	9112      	str	r1, [sp, #72]	@ 0x48
 800b8cc:	3d04      	subs	r5, #4
 800b8ce:	f006 060e 	and.w	r6, r6, #14
 800b8d2:	b2ad      	uxth	r5, r5
 800b8d4:	f1ba 0f00 	cmp.w	sl, #0
 800b8d8:	d006      	beq.n	800b8e8 <read_submessage_list+0x1e4>
 800b8da:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	463a      	mov	r2, r7
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	47d0      	blx	sl
 800b8e8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800b8ea:	b168      	cbz	r0, 800b908 <read_submessage_list+0x204>
 800b8ec:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	3902      	subs	r1, #2
 800b8f2:	e002      	b.n	800b8fa <read_submessage_list+0x1f6>
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	4283      	cmp	r3, r0
 800b8f8:	d006      	beq.n	800b908 <read_submessage_list+0x204>
 800b8fa:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800b8fe:	42ba      	cmp	r2, r7
 800b900:	d1f8      	bne.n	800b8f4 <read_submessage_list+0x1f0>
 800b902:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800b904:	2100      	movs	r1, #0
 800b906:	54d1      	strb	r1, [r2, r3]
 800b908:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b90a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b90c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 800b910:	9302      	str	r3, [sp, #8]
 800b912:	e9cd 1000 	strd	r1, r0, [sp]
 800b916:	4633      	mov	r3, r6
 800b918:	462a      	mov	r2, r5
 800b91a:	4641      	mov	r1, r8
 800b91c:	4620      	mov	r0, r4
 800b91e:	f005 f867 	bl	80109f0 <read_submessage_format>
 800b922:	e6f7      	b.n	800b714 <read_submessage_list+0x10>
 800b924:	4641      	mov	r1, r8
 800b926:	4620      	mov	r0, r4
 800b928:	f7ff fea4 	bl	800b674 <read_submessage_info>
 800b92c:	e6f2      	b.n	800b714 <read_submessage_list+0x10>
 800b92e:	2a00      	cmp	r2, #0
 800b930:	d03b      	beq.n	800b9aa <read_submessage_list+0x2a6>
 800b932:	a912      	add	r1, sp, #72	@ 0x48
 800b934:	4640      	mov	r0, r8
 800b936:	f001 fedb 	bl	800d6f0 <uxr_deserialize_STATUS_Payload>
 800b93a:	a910      	add	r1, sp, #64	@ 0x40
 800b93c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b93e:	a812      	add	r0, sp, #72	@ 0x48
 800b940:	f000 fd60 	bl	800c404 <uxr_parse_base_object_request>
 800b944:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800b948:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b94a:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800b94e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 800b952:	9111      	str	r1, [sp, #68]	@ 0x44
 800b954:	b135      	cbz	r5, 800b964 <read_submessage_list+0x260>
 800b956:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	4620      	mov	r0, r4
 800b962:	47a8      	blx	r5
 800b964:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800b966:	2b00      	cmp	r3, #0
 800b968:	f43f aed4 	beq.w	800b714 <read_submessage_list+0x10>
 800b96c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b96e:	2100      	movs	r1, #0
 800b970:	3802      	subs	r0, #2
 800b972:	e003      	b.n	800b97c <read_submessage_list+0x278>
 800b974:	3101      	adds	r1, #1
 800b976:	4299      	cmp	r1, r3
 800b978:	f43f aecc 	beq.w	800b714 <read_submessage_list+0x10>
 800b97c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800b980:	42b2      	cmp	r2, r6
 800b982:	d1f7      	bne.n	800b974 <read_submessage_list+0x270>
 800b984:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b986:	545f      	strb	r7, [r3, r1]
 800b988:	e6c4      	b.n	800b714 <read_submessage_list+0x10>
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	f47f aec2 	bne.w	800b714 <read_submessage_list+0x10>
 800b990:	4641      	mov	r1, r8
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fc7a 	bl	800c28c <uxr_read_create_session_status>
 800b998:	e6bc      	b.n	800b714 <read_submessage_list+0x10>
 800b99a:	4641      	mov	r1, r8
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7ff fcf9 	bl	800b394 <read_submessage_get_info>
 800b9a2:	e6b7      	b.n	800b714 <read_submessage_list+0x10>
 800b9a4:	b018      	add	sp, #96	@ 0x60
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 fc79 	bl	800c2a4 <uxr_read_delete_session_status>
 800b9b2:	e6af      	b.n	800b714 <read_submessage_list+0x10>
 800b9b4:	f000 fed4 	bl	800c760 <uxr_nanos>
 800b9b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9ba:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800b9bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b9c0:	2700      	movs	r7, #0
 800b9c2:	fbc9 6703 	smlal	r6, r7, r9, r3
 800b9c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b9c8:	eb16 0c00 	adds.w	ip, r6, r0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9d0:	eb47 0e01 	adc.w	lr, r7, r1
 800b9d4:	461e      	mov	r6, r3
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	2700      	movs	r7, #0
 800b9da:	fbc9 0105 	smlal	r0, r1, r9, r5
 800b9de:	fbc9 6702 	smlal	r6, r7, r9, r2
 800b9e2:	1983      	adds	r3, r0, r6
 800b9e4:	eb41 0207 	adc.w	r2, r1, r7
 800b9e8:	ebbc 0303 	subs.w	r3, ip, r3
 800b9ec:	9308      	str	r3, [sp, #32]
 800b9ee:	eb6e 0302 	sbc.w	r3, lr, r2
 800b9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b9f8:	0fd3      	lsrs	r3, r2, #31
 800b9fa:	18c9      	adds	r1, r1, r3
 800b9fc:	f142 0200 	adc.w	r2, r2, #0
 800ba00:	084b      	lsrs	r3, r1, #1
 800ba02:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800ba06:	1052      	asrs	r2, r2, #1
 800ba08:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 800ba0c:	e6de      	b.n	800b7cc <read_submessage_list+0xc8>
 800ba0e:	bf00      	nop
 800ba10:	3b9aca00 	.word	0x3b9aca00

0800ba14 <listen_message_reliably>:
 800ba14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba18:	1e0b      	subs	r3, r1, #0
 800ba1a:	b09d      	sub	sp, #116	@ 0x74
 800ba1c:	bfb8      	it	lt
 800ba1e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	4607      	mov	r7, r0
 800ba26:	f000 fe7f 	bl	800c728 <uxr_millis>
 800ba2a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800ba2e:	4681      	mov	r9, r0
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	f000 8095 	beq.w	800bb60 <listen_message_reliably+0x14c>
 800ba36:	2600      	movs	r6, #0
 800ba38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba3c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ba40:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba44:	4630      	mov	r0, r6
 800ba46:	4688      	mov	r8, r1
 800ba48:	46ca      	mov	sl, r9
 800ba4a:	e00f      	b.n	800ba6c <listen_message_reliably+0x58>
 800ba4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ba50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba54:	42a2      	cmp	r2, r4
 800ba56:	eb73 0105 	sbcs.w	r1, r3, r5
 800ba5a:	bfb8      	it	lt
 800ba5c:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800ba60:	3601      	adds	r6, #1
 800ba62:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ba66:	b2f0      	uxtb	r0, r6
 800ba68:	4283      	cmp	r3, r0
 800ba6a:	d951      	bls.n	800bb10 <listen_message_reliably+0xfc>
 800ba6c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ba70:	2201      	movs	r2, #1
 800ba72:	2102      	movs	r1, #2
 800ba74:	f000 fcd8 	bl	800c428 <uxr_stream_id>
 800ba78:	00e4      	lsls	r4, r4, #3
 800ba7a:	f104 0520 	add.w	r5, r4, #32
 800ba7e:	443d      	add	r5, r7
 800ba80:	4601      	mov	r1, r0
 800ba82:	4643      	mov	r3, r8
 800ba84:	4652      	mov	r2, sl
 800ba86:	4628      	mov	r0, r5
 800ba88:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba8a:	f004 fec7 	bl	801081c <uxr_update_output_stream_heartbeat_timestamp>
 800ba8e:	193b      	adds	r3, r7, r4
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d0db      	beq.n	800ba4c <listen_message_reliably+0x38>
 800ba94:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800ba98:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f000 fc8b 	bl	800c3b8 <uxr_session_header_offset>
 800baa2:	3501      	adds	r5, #1
 800baa4:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 800baa8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800baac:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800bab0:	9000      	str	r0, [sp, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	4658      	mov	r0, fp
 800bab6:	2211      	movs	r2, #17
 800bab8:	a90c      	add	r1, sp, #48	@ 0x30
 800baba:	f7ff fa41 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800babe:	2300      	movs	r3, #0
 800bac0:	2205      	movs	r2, #5
 800bac2:	210b      	movs	r1, #11
 800bac4:	4658      	mov	r0, fp
 800bac6:	f000 fde9 	bl	800c69c <uxr_buffer_submessage_header>
 800baca:	8968      	ldrh	r0, [r5, #10]
 800bacc:	2101      	movs	r1, #1
 800bace:	f005 f84f 	bl	8010b70 <uxr_seq_num_add>
 800bad2:	892a      	ldrh	r2, [r5, #8]
 800bad4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800bad8:	4603      	mov	r3, r0
 800bada:	a90a      	add	r1, sp, #40	@ 0x28
 800badc:	4658      	mov	r0, fp
 800bade:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800bae2:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 800bae6:	f001 febb 	bl	800d860 <uxr_serialize_HEARTBEAT_Payload>
 800baea:	2200      	movs	r2, #0
 800baec:	4611      	mov	r1, r2
 800baee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800baf0:	4638      	mov	r0, r7
 800baf2:	f000 fc09 	bl	800c308 <uxr_stamp_session_header>
 800baf6:	4658      	mov	r0, fp
 800baf8:	f7ff fa60 	bl	800afbc <ucdr_buffer_length>
 800bafc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bafe:	4602      	mov	r2, r0
 800bb00:	a90c      	add	r1, sp, #48	@ 0x30
 800bb02:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bb06:	443c      	add	r4, r7
 800bb08:	47a8      	blx	r5
 800bb0a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800bb0e:	e79f      	b.n	800ba50 <listen_message_reliably+0x3c>
 800bb10:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800bb14:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800bb18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bb1c:	4294      	cmp	r4, r2
 800bb1e:	bf08      	it	eq
 800bb20:	428b      	cmpeq	r3, r1
 800bb22:	d01d      	beq.n	800bb60 <listen_message_reliably+0x14c>
 800bb24:	eba3 030a 	sub.w	r3, r3, sl
 800bb28:	9905      	ldr	r1, [sp, #20]
 800bb2a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	bf08      	it	eq
 800bb30:	2301      	moveq	r3, #1
 800bb32:	4299      	cmp	r1, r3
 800bb34:	bfa8      	it	ge
 800bb36:	4619      	movge	r1, r3
 800bb38:	6894      	ldr	r4, [r2, #8]
 800bb3a:	6810      	ldr	r0, [r2, #0]
 800bb3c:	4689      	mov	r9, r1
 800bb3e:	460b      	mov	r3, r1
 800bb40:	aa08      	add	r2, sp, #32
 800bb42:	a907      	add	r1, sp, #28
 800bb44:	47a0      	blx	r4
 800bb46:	b968      	cbnz	r0, 800bb64 <listen_message_reliably+0x150>
 800bb48:	9b05      	ldr	r3, [sp, #20]
 800bb4a:	eba3 0309 	sub.w	r3, r3, r9
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	9305      	str	r3, [sp, #20]
 800bb52:	f73f af68 	bgt.w	800ba26 <listen_message_reliably+0x12>
 800bb56:	4604      	mov	r4, r0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	b01d      	add	sp, #116	@ 0x74
 800bb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb60:	9b05      	ldr	r3, [sp, #20]
 800bb62:	e7e1      	b.n	800bb28 <listen_message_reliably+0x114>
 800bb64:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800bb68:	4604      	mov	r4, r0
 800bb6a:	a80c      	add	r0, sp, #48	@ 0x30
 800bb6c:	f7ff f9fa 	bl	800af64 <ucdr_init_buffer>
 800bb70:	2500      	movs	r5, #0
 800bb72:	a90c      	add	r1, sp, #48	@ 0x30
 800bb74:	f10d 031a 	add.w	r3, sp, #26
 800bb78:	aa06      	add	r2, sp, #24
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f88d 5018 	strb.w	r5, [sp, #24]
 800bb80:	f000 fbd8 	bl	800c334 <uxr_read_session_header>
 800bb84:	b918      	cbnz	r0, 800bb8e <listen_message_reliably+0x17a>
 800bb86:	4620      	mov	r0, r4
 800bb88:	b01d      	add	sp, #116	@ 0x74
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bb94:	f000 fc72 	bl	800c47c <uxr_stream_id_from_raw>
 800bb98:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800bb9c:	2e01      	cmp	r6, #1
 800bb9e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800bba2:	900a      	str	r0, [sp, #40]	@ 0x28
 800bba4:	fa5f fa80 	uxtb.w	sl, r0
 800bba8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800bbac:	d04b      	beq.n	800bc46 <listen_message_reliably+0x232>
 800bbae:	2e02      	cmp	r6, #2
 800bbb0:	d00f      	beq.n	800bbd2 <listen_message_reliably+0x1be>
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	d1e7      	bne.n	800bb86 <listen_message_reliably+0x172>
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f000 fc5f 	bl	800c47c <uxr_stream_id_from_raw>
 800bbbe:	a90c      	add	r1, sp, #48	@ 0x30
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	920a      	str	r2, [sp, #40]	@ 0x28
 800bbc6:	f7ff fd9d 	bl	800b704 <read_submessage_list>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	b01d      	add	sp, #116	@ 0x74
 800bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f107 0008 	add.w	r0, r7, #8
 800bbd8:	f000 fd3e 	bl	800c658 <uxr_get_input_reliable_stream>
 800bbdc:	4680      	mov	r8, r0
 800bbde:	b348      	cbz	r0, 800bc34 <listen_message_reliably+0x220>
 800bbe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbe2:	9202      	str	r2, [sp, #8]
 800bbe4:	a80c      	add	r0, sp, #48	@ 0x30
 800bbe6:	f7ff f9ed 	bl	800afc4 <ucdr_buffer_remaining>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f10d 0019 	add.w	r0, sp, #25
 800bbf0:	9000      	str	r0, [sp, #0]
 800bbf2:	9a02      	ldr	r2, [sp, #8]
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f004 fa28 	bl	801004c <uxr_receive_reliable_message>
 800bbfc:	b1d0      	cbz	r0, 800bc34 <listen_message_reliably+0x220>
 800bbfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d037      	beq.n	800bc76 <listen_message_reliably+0x262>
 800bc06:	ae14      	add	r6, sp, #80	@ 0x50
 800bc08:	f04f 0902 	mov.w	r9, #2
 800bc0c:	e008      	b.n	800bc20 <listen_message_reliably+0x20c>
 800bc0e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800bc12:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800bc16:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800bc1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc1c:	f7ff fd72 	bl	800b704 <read_submessage_list>
 800bc20:	4631      	mov	r1, r6
 800bc22:	2204      	movs	r2, #4
 800bc24:	4640      	mov	r0, r8
 800bc26:	f004 fa91 	bl	801014c <uxr_next_input_reliable_buffer_available>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4638      	mov	r0, r7
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1ec      	bne.n	800bc0e <listen_message_reliably+0x1fa>
 800bc34:	4638      	mov	r0, r7
 800bc36:	462a      	mov	r2, r5
 800bc38:	4651      	mov	r1, sl
 800bc3a:	f7ff fbe1 	bl	800b400 <write_submessage_acknack.isra.0>
 800bc3e:	4620      	mov	r0, r4
 800bc40:	b01d      	add	sp, #116	@ 0x74
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	4629      	mov	r1, r5
 800bc48:	f107 0008 	add.w	r0, r7, #8
 800bc4c:	f000 fcfa 	bl	800c644 <uxr_get_input_best_effort_stream>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d098      	beq.n	800bb86 <listen_message_reliably+0x172>
 800bc54:	4649      	mov	r1, r9
 800bc56:	f004 f975 	bl	800ff44 <uxr_receive_best_effort_message>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d093      	beq.n	800bb86 <listen_message_reliably+0x172>
 800bc5e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800bc62:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800bc66:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800bc6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc6c:	a90c      	add	r1, sp, #48	@ 0x30
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7ff fd48 	bl	800b704 <read_submessage_list>
 800bc74:	e787      	b.n	800bb86 <listen_message_reliably+0x172>
 800bc76:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800bc7a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800bc7e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800bc82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc84:	a90c      	add	r1, sp, #48	@ 0x30
 800bc86:	4638      	mov	r0, r7
 800bc88:	f7ff fd3c 	bl	800b704 <read_submessage_list>
 800bc8c:	e7bb      	b.n	800bc06 <listen_message_reliably+0x1f2>
 800bc8e:	bf00      	nop

0800bc90 <uxr_run_session_until_confirm_delivery>:
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	4606      	mov	r6, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	f000 fd46 	bl	800c728 <uxr_millis>
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff fc74 	bl	800b58c <uxr_flash_output_streams>
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	f106 0808 	add.w	r8, r6, #8
 800bcaa:	bfa8      	it	ge
 800bcac:	462c      	movge	r4, r5
 800bcae:	da07      	bge.n	800bcc0 <uxr_run_session_until_confirm_delivery+0x30>
 800bcb0:	e00e      	b.n	800bcd0 <uxr_run_session_until_confirm_delivery+0x40>
 800bcb2:	f7ff feaf 	bl	800ba14 <listen_message_reliably>
 800bcb6:	f000 fd37 	bl	800c728 <uxr_millis>
 800bcba:	1bc3      	subs	r3, r0, r7
 800bcbc:	1aec      	subs	r4, r5, r3
 800bcbe:	d407      	bmi.n	800bcd0 <uxr_run_session_until_confirm_delivery+0x40>
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	f000 fcd5 	bl	800c670 <uxr_output_streams_confirmed>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4630      	mov	r0, r6
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0f0      	beq.n	800bcb2 <uxr_run_session_until_confirm_delivery+0x22>
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd6:	f000 bccb 	b.w	800c670 <uxr_output_streams_confirmed>
 800bcda:	bf00      	nop

0800bcdc <uxr_run_session_until_all_status>:
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	9d08      	ldr	r5, [sp, #32]
 800bce2:	460f      	mov	r7, r1
 800bce4:	4692      	mov	sl, r2
 800bce6:	461c      	mov	r4, r3
 800bce8:	4606      	mov	r6, r0
 800bcea:	f7ff fc4f 	bl	800b58c <uxr_flash_output_streams>
 800bcee:	b125      	cbz	r5, 800bcfa <uxr_run_session_until_all_status+0x1e>
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	21ff      	movs	r1, #255	@ 0xff
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f006 f9ad 	bl	8012054 <memset>
 800bcfa:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 800bcfe:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800bd00:	f000 fd12 	bl	800c728 <uxr_millis>
 800bd04:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 800bd08:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	4639      	mov	r1, r7
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7ff fe7f 	bl	800ba14 <listen_message_reliably>
 800bd16:	f000 fd07 	bl	800c728 <uxr_millis>
 800bd1a:	eba0 0008 	sub.w	r0, r0, r8
 800bd1e:	1a39      	subs	r1, r7, r0
 800bd20:	b33d      	cbz	r5, 800bd72 <uxr_run_session_until_all_status+0x96>
 800bd22:	46cc      	mov	ip, r9
 800bd24:	464a      	mov	r2, r9
 800bd26:	2301      	movs	r3, #1
 800bd28:	e002      	b.n	800bd30 <uxr_run_session_until_all_status+0x54>
 800bd2a:	42ab      	cmp	r3, r5
 800bd2c:	d20c      	bcs.n	800bd48 <uxr_run_session_until_all_status+0x6c>
 800bd2e:	3301      	adds	r3, #1
 800bd30:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800bd34:	2cff      	cmp	r4, #255	@ 0xff
 800bd36:	d1f8      	bne.n	800bd2a <uxr_run_session_until_all_status+0x4e>
 800bd38:	42ab      	cmp	r3, r5
 800bd3a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800bd3e:	d213      	bcs.n	800bd68 <uxr_run_session_until_all_status+0x8c>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d0f4      	beq.n	800bd2e <uxr_run_session_until_all_status+0x52>
 800bd44:	2900      	cmp	r1, #0
 800bd46:	dce3      	bgt.n	800bd10 <uxr_run_session_until_all_status+0x34>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	444d      	add	r5, r9
 800bd4c:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800bd4e:	e001      	b.n	800bd54 <uxr_run_session_until_all_status+0x78>
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d812      	bhi.n	800bd7a <uxr_run_session_until_all_status+0x9e>
 800bd54:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800bd58:	4565      	cmp	r5, ip
 800bd5a:	d1f9      	bne.n	800bd50 <uxr_run_session_until_all_status+0x74>
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	bf8c      	ite	hi
 800bd60:	2000      	movhi	r0, #0
 800bd62:	2001      	movls	r0, #1
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	2900      	cmp	r1, #0
 800bd6a:	dded      	ble.n	800bd48 <uxr_run_session_until_all_status+0x6c>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d1cf      	bne.n	800bd10 <uxr_run_session_until_all_status+0x34>
 800bd70:	e7ea      	b.n	800bd48 <uxr_run_session_until_all_status+0x6c>
 800bd72:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800bd74:	2001      	movs	r0, #1
 800bd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bd80 <uxr_create_session>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	ed2d 8b02 	vpush	{d8}
 800bd88:	f100 0808 	add.w	r8, r0, #8
 800bd8c:	b0a9      	sub	sp, #164	@ 0xa4
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4640      	mov	r0, r8
 800bd92:	f000 fba9 	bl	800c4e8 <uxr_reset_stream_storage>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fb0e 	bl	800c3b8 <uxr_session_header_offset>
 800bd9c:	a909      	add	r1, sp, #36	@ 0x24
 800bd9e:	9000      	str	r0, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	a810      	add	r0, sp, #64	@ 0x40
 800bda4:	221c      	movs	r2, #28
 800bda6:	f7ff f8cb 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800bdaa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bdac:	8a1a      	ldrh	r2, [r3, #16]
 800bdae:	3a04      	subs	r2, #4
 800bdb0:	b292      	uxth	r2, r2
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	a910      	add	r1, sp, #64	@ 0x40
 800bdb6:	f000 fa23 	bl	800c200 <uxr_buffer_create_session>
 800bdba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 fa8f 	bl	800c2e0 <uxr_stamp_create_session_header>
 800bdc2:	a810      	add	r0, sp, #64	@ 0x40
 800bdc4:	f7ff f8fa 	bl	800afbc <ucdr_buffer_length>
 800bdc8:	23ff      	movs	r3, #255	@ 0xff
 800bdca:	ee08 0a10 	vmov	s16, r0
 800bdce:	7163      	strb	r3, [r4, #5]
 800bdd0:	f04f 090a 	mov.w	r9, #10
 800bdd4:	46c2      	mov	sl, r8
 800bdd6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bdd8:	ee18 2a10 	vmov	r2, s16
 800bddc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bde0:	a909      	add	r1, sp, #36	@ 0x24
 800bde2:	47a8      	blx	r5
 800bde4:	f000 fca0 	bl	800c728 <uxr_millis>
 800bde8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bdec:	9002      	str	r0, [sp, #8]
 800bdee:	e00c      	b.n	800be0a <uxr_create_session+0x8a>
 800bdf0:	f000 fc9a 	bl	800c728 <uxr_millis>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	7962      	ldrb	r2, [r4, #5]
 800bdf8:	1ac0      	subs	r0, r0, r3
 800bdfa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f340 8094 	ble.w	800bf2c <uxr_create_session+0x1ac>
 800be04:	2aff      	cmp	r2, #255	@ 0xff
 800be06:	f040 8097 	bne.w	800bf38 <uxr_create_session+0x1b8>
 800be0a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800be0c:	a905      	add	r1, sp, #20
 800be0e:	6895      	ldr	r5, [r2, #8]
 800be10:	6810      	ldr	r0, [r2, #0]
 800be12:	aa06      	add	r2, sp, #24
 800be14:	47a8      	blx	r5
 800be16:	2800      	cmp	r0, #0
 800be18:	d0ea      	beq.n	800bdf0 <uxr_create_session+0x70>
 800be1a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800be1e:	a818      	add	r0, sp, #96	@ 0x60
 800be20:	f7ff f8a0 	bl	800af64 <ucdr_init_buffer>
 800be24:	2500      	movs	r5, #0
 800be26:	f10d 0312 	add.w	r3, sp, #18
 800be2a:	aa04      	add	r2, sp, #16
 800be2c:	a918      	add	r1, sp, #96	@ 0x60
 800be2e:	4620      	mov	r0, r4
 800be30:	f88d 5010 	strb.w	r5, [sp, #16]
 800be34:	f000 fa7e 	bl	800c334 <uxr_read_session_header>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d0d9      	beq.n	800bdf0 <uxr_create_session+0x70>
 800be3c:	4629      	mov	r1, r5
 800be3e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800be42:	f000 fb1b 	bl	800c47c <uxr_stream_id_from_raw>
 800be46:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800be4a:	2f01      	cmp	r7, #1
 800be4c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800be50:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800be54:	fa5f f880 	uxtb.w	r8, r0
 800be58:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800be5c:	d04d      	beq.n	800befa <uxr_create_session+0x17a>
 800be5e:	2f02      	cmp	r7, #2
 800be60:	d00c      	beq.n	800be7c <uxr_create_session+0xfc>
 800be62:	2f00      	cmp	r7, #0
 800be64:	d1c4      	bne.n	800bdf0 <uxr_create_session+0x70>
 800be66:	4639      	mov	r1, r7
 800be68:	4638      	mov	r0, r7
 800be6a:	f000 fb07 	bl	800c47c <uxr_stream_id_from_raw>
 800be6e:	a918      	add	r1, sp, #96	@ 0x60
 800be70:	4602      	mov	r2, r0
 800be72:	4620      	mov	r0, r4
 800be74:	9208      	str	r2, [sp, #32]
 800be76:	f7ff fc45 	bl	800b704 <read_submessage_list>
 800be7a:	e7b9      	b.n	800bdf0 <uxr_create_session+0x70>
 800be7c:	4629      	mov	r1, r5
 800be7e:	4650      	mov	r0, sl
 800be80:	f000 fbea 	bl	800c658 <uxr_get_input_reliable_stream>
 800be84:	4606      	mov	r6, r0
 800be86:	b390      	cbz	r0, 800beee <uxr_create_session+0x16e>
 800be88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be8a:	9203      	str	r2, [sp, #12]
 800be8c:	a818      	add	r0, sp, #96	@ 0x60
 800be8e:	f7ff f899 	bl	800afc4 <ucdr_buffer_remaining>
 800be92:	4603      	mov	r3, r0
 800be94:	f10d 0011 	add.w	r0, sp, #17
 800be98:	9000      	str	r0, [sp, #0]
 800be9a:	9a03      	ldr	r2, [sp, #12]
 800be9c:	4659      	mov	r1, fp
 800be9e:	4630      	mov	r0, r6
 800bea0:	f004 f8d4 	bl	801004c <uxr_receive_reliable_message>
 800bea4:	b318      	cbz	r0, 800beee <uxr_create_session+0x16e>
 800bea6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800beaa:	b9b3      	cbnz	r3, 800beda <uxr_create_session+0x15a>
 800beac:	f88d 8020 	strb.w	r8, [sp, #32]
 800beb0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800beb4:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800beb8:	9a08      	ldr	r2, [sp, #32]
 800beba:	a918      	add	r1, sp, #96	@ 0x60
 800bebc:	4620      	mov	r0, r4
 800bebe:	f7ff fc21 	bl	800b704 <read_submessage_list>
 800bec2:	e00a      	b.n	800beda <uxr_create_session+0x15a>
 800bec4:	f04f 0302 	mov.w	r3, #2
 800bec8:	f88d 8020 	strb.w	r8, [sp, #32]
 800becc:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800bed0:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 800bed4:	9a08      	ldr	r2, [sp, #32]
 800bed6:	f7ff fc15 	bl	800b704 <read_submessage_list>
 800beda:	a920      	add	r1, sp, #128	@ 0x80
 800bedc:	2204      	movs	r2, #4
 800bede:	4630      	mov	r0, r6
 800bee0:	f004 f934 	bl	801014c <uxr_next_input_reliable_buffer_available>
 800bee4:	4603      	mov	r3, r0
 800bee6:	a920      	add	r1, sp, #128	@ 0x80
 800bee8:	4620      	mov	r0, r4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1ea      	bne.n	800bec4 <uxr_create_session+0x144>
 800beee:	462a      	mov	r2, r5
 800bef0:	4641      	mov	r1, r8
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7ff fa84 	bl	800b400 <write_submessage_acknack.isra.0>
 800bef8:	e77a      	b.n	800bdf0 <uxr_create_session+0x70>
 800befa:	4629      	mov	r1, r5
 800befc:	4650      	mov	r0, sl
 800befe:	f000 fba1 	bl	800c644 <uxr_get_input_best_effort_stream>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	f43f af74 	beq.w	800bdf0 <uxr_create_session+0x70>
 800bf08:	4659      	mov	r1, fp
 800bf0a:	f004 f81b 	bl	800ff44 <uxr_receive_best_effort_message>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	f43f af6e 	beq.w	800bdf0 <uxr_create_session+0x70>
 800bf14:	f88d 8020 	strb.w	r8, [sp, #32]
 800bf18:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800bf1c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800bf20:	9a08      	ldr	r2, [sp, #32]
 800bf22:	a918      	add	r1, sp, #96	@ 0x60
 800bf24:	4620      	mov	r0, r4
 800bf26:	f7ff fbed 	bl	800b704 <read_submessage_list>
 800bf2a:	e761      	b.n	800bdf0 <uxr_create_session+0x70>
 800bf2c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf30:	d002      	beq.n	800bf38 <uxr_create_session+0x1b8>
 800bf32:	2aff      	cmp	r2, #255	@ 0xff
 800bf34:	f43f af4f 	beq.w	800bdd6 <uxr_create_session+0x56>
 800bf38:	b12a      	cbz	r2, 800bf46 <uxr_create_session+0x1c6>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	b029      	add	sp, #164	@ 0xa4
 800bf3e:	ecbd 8b02 	vpop	{d8}
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf46:	4650      	mov	r0, sl
 800bf48:	f000 face 	bl	800c4e8 <uxr_reset_stream_storage>
 800bf4c:	2001      	movs	r0, #1
 800bf4e:	b029      	add	sp, #164	@ 0xa4
 800bf50:	ecbd 8b02 	vpop	{d8}
 800bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf58 <wait_session_status>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	b09d      	sub	sp, #116	@ 0x74
 800bf60:	20ff      	movs	r0, #255	@ 0xff
 800bf62:	7160      	strb	r0, [r4, #5]
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 80b8 	beq.w	800c0dc <wait_session_status+0x184>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	468b      	mov	fp, r1
 800bf70:	4692      	mov	sl, r2
 800bf72:	9303      	str	r3, [sp, #12]
 800bf74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bf76:	4652      	mov	r2, sl
 800bf78:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	47a8      	blx	r5
 800bf80:	f000 fbd2 	bl	800c728 <uxr_millis>
 800bf84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bf88:	4605      	mov	r5, r0
 800bf8a:	e009      	b.n	800bfa0 <wait_session_status+0x48>
 800bf8c:	f000 fbcc 	bl	800c728 <uxr_millis>
 800bf90:	1b40      	subs	r0, r0, r5
 800bf92:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd42      	ble.n	800c020 <wait_session_status+0xc8>
 800bf9a:	7960      	ldrb	r0, [r4, #5]
 800bf9c:	28ff      	cmp	r0, #255	@ 0xff
 800bf9e:	d148      	bne.n	800c032 <wait_session_status+0xda>
 800bfa0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800bfa2:	a908      	add	r1, sp, #32
 800bfa4:	6896      	ldr	r6, [r2, #8]
 800bfa6:	6810      	ldr	r0, [r2, #0]
 800bfa8:	aa09      	add	r2, sp, #36	@ 0x24
 800bfaa:	47b0      	blx	r6
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d0ed      	beq.n	800bf8c <wait_session_status+0x34>
 800bfb0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800bfb4:	a80c      	add	r0, sp, #48	@ 0x30
 800bfb6:	f7fe ffd5 	bl	800af64 <ucdr_init_buffer>
 800bfba:	2600      	movs	r6, #0
 800bfbc:	f10d 031e 	add.w	r3, sp, #30
 800bfc0:	aa07      	add	r2, sp, #28
 800bfc2:	a90c      	add	r1, sp, #48	@ 0x30
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f88d 601c 	strb.w	r6, [sp, #28]
 800bfca:	f000 f9b3 	bl	800c334 <uxr_read_session_header>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d0dc      	beq.n	800bf8c <wait_session_status+0x34>
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800bfd8:	f000 fa50 	bl	800c47c <uxr_stream_id_from_raw>
 800bfdc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800bfe0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	2f01      	cmp	r7, #1
 800bfe8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800bfec:	fa5f f880 	uxtb.w	r8, r0
 800bff0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800bff4:	d058      	beq.n	800c0a8 <wait_session_status+0x150>
 800bff6:	2f02      	cmp	r7, #2
 800bff8:	d021      	beq.n	800c03e <wait_session_status+0xe6>
 800bffa:	2f00      	cmp	r7, #0
 800bffc:	d1c6      	bne.n	800bf8c <wait_session_status+0x34>
 800bffe:	4639      	mov	r1, r7
 800c000:	4638      	mov	r0, r7
 800c002:	f000 fa3b 	bl	800c47c <uxr_stream_id_from_raw>
 800c006:	a90c      	add	r1, sp, #48	@ 0x30
 800c008:	4602      	mov	r2, r0
 800c00a:	4620      	mov	r0, r4
 800c00c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c00e:	f7ff fb79 	bl	800b704 <read_submessage_list>
 800c012:	f000 fb89 	bl	800c728 <uxr_millis>
 800c016:	1b40      	subs	r0, r0, r5
 800c018:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dcbc      	bgt.n	800bf9a <wait_session_status+0x42>
 800c020:	9b03      	ldr	r3, [sp, #12]
 800c022:	9a04      	ldr	r2, [sp, #16]
 800c024:	7960      	ldrb	r0, [r4, #5]
 800c026:	3301      	adds	r3, #1
 800c028:	429a      	cmp	r2, r3
 800c02a:	9303      	str	r3, [sp, #12]
 800c02c:	d001      	beq.n	800c032 <wait_session_status+0xda>
 800c02e:	28ff      	cmp	r0, #255	@ 0xff
 800c030:	d0a0      	beq.n	800bf74 <wait_session_status+0x1c>
 800c032:	38ff      	subs	r0, #255	@ 0xff
 800c034:	bf18      	it	ne
 800c036:	2001      	movne	r0, #1
 800c038:	b01d      	add	sp, #116	@ 0x74
 800c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03e:	4631      	mov	r1, r6
 800c040:	f104 0008 	add.w	r0, r4, #8
 800c044:	f000 fb08 	bl	800c658 <uxr_get_input_reliable_stream>
 800c048:	4681      	mov	r9, r0
 800c04a:	b338      	cbz	r0, 800c09c <wait_session_status+0x144>
 800c04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c04e:	9205      	str	r2, [sp, #20]
 800c050:	a80c      	add	r0, sp, #48	@ 0x30
 800c052:	f7fe ffb7 	bl	800afc4 <ucdr_buffer_remaining>
 800c056:	4603      	mov	r3, r0
 800c058:	f10d 001d 	add.w	r0, sp, #29
 800c05c:	9000      	str	r0, [sp, #0]
 800c05e:	9a05      	ldr	r2, [sp, #20]
 800c060:	9902      	ldr	r1, [sp, #8]
 800c062:	4648      	mov	r0, r9
 800c064:	f003 fff2 	bl	801004c <uxr_receive_reliable_message>
 800c068:	b1c0      	cbz	r0, 800c09c <wait_session_status+0x144>
 800c06a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c06e:	b95b      	cbnz	r3, 800c088 <wait_session_status+0x130>
 800c070:	e03c      	b.n	800c0ec <wait_session_status+0x194>
 800c072:	f04f 0302 	mov.w	r3, #2
 800c076:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800c07a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c07e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800c082:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c084:	f7ff fb3e 	bl	800b704 <read_submessage_list>
 800c088:	a914      	add	r1, sp, #80	@ 0x50
 800c08a:	2204      	movs	r2, #4
 800c08c:	4648      	mov	r0, r9
 800c08e:	f004 f85d 	bl	801014c <uxr_next_input_reliable_buffer_available>
 800c092:	4603      	mov	r3, r0
 800c094:	a914      	add	r1, sp, #80	@ 0x50
 800c096:	4620      	mov	r0, r4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1ea      	bne.n	800c072 <wait_session_status+0x11a>
 800c09c:	4632      	mov	r2, r6
 800c09e:	4641      	mov	r1, r8
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f7ff f9ad 	bl	800b400 <write_submessage_acknack.isra.0>
 800c0a6:	e771      	b.n	800bf8c <wait_session_status+0x34>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	f104 0008 	add.w	r0, r4, #8
 800c0ae:	f000 fac9 	bl	800c644 <uxr_get_input_best_effort_stream>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f af6a 	beq.w	800bf8c <wait_session_status+0x34>
 800c0b8:	9902      	ldr	r1, [sp, #8]
 800c0ba:	f003 ff43 	bl	800ff44 <uxr_receive_best_effort_message>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f af64 	beq.w	800bf8c <wait_session_status+0x34>
 800c0c4:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800c0c8:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c0cc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c0d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0d2:	a90c      	add	r1, sp, #48	@ 0x30
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f7ff fb15 	bl	800b704 <read_submessage_list>
 800c0da:	e757      	b.n	800bf8c <wait_session_status+0x34>
 800c0dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c0de:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c0e2:	47a0      	blx	r4
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	b01d      	add	sp, #116	@ 0x74
 800c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ec:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800c0f0:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c0f4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c0f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0fa:	a90c      	add	r1, sp, #48	@ 0x30
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7ff fb01 	bl	800b704 <read_submessage_list>
 800c102:	e7c1      	b.n	800c088 <wait_session_status+0x130>

0800c104 <uxr_delete_session_retries>:
 800c104:	b530      	push	{r4, r5, lr}
 800c106:	b08f      	sub	sp, #60	@ 0x3c
 800c108:	4604      	mov	r4, r0
 800c10a:	460d      	mov	r5, r1
 800c10c:	f000 f954 	bl	800c3b8 <uxr_session_header_offset>
 800c110:	2300      	movs	r3, #0
 800c112:	2210      	movs	r2, #16
 800c114:	9000      	str	r0, [sp, #0]
 800c116:	a902      	add	r1, sp, #8
 800c118:	a806      	add	r0, sp, #24
 800c11a:	f7fe ff11 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800c11e:	a906      	add	r1, sp, #24
 800c120:	4620      	mov	r0, r4
 800c122:	f000 f897 	bl	800c254 <uxr_buffer_delete_session>
 800c126:	2200      	movs	r2, #0
 800c128:	4611      	mov	r1, r2
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 f8eb 	bl	800c308 <uxr_stamp_session_header>
 800c132:	a806      	add	r0, sp, #24
 800c134:	f7fe ff42 	bl	800afbc <ucdr_buffer_length>
 800c138:	462b      	mov	r3, r5
 800c13a:	4602      	mov	r2, r0
 800c13c:	a902      	add	r1, sp, #8
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ff0a 	bl	800bf58 <wait_session_status>
 800c144:	b118      	cbz	r0, 800c14e <uxr_delete_session_retries+0x4a>
 800c146:	7960      	ldrb	r0, [r4, #5]
 800c148:	fab0 f080 	clz	r0, r0
 800c14c:	0940      	lsrs	r0, r0, #5
 800c14e:	b00f      	add	sp, #60	@ 0x3c
 800c150:	bd30      	pop	{r4, r5, pc}
 800c152:	bf00      	nop

0800c154 <uxr_prepare_stream_to_write_submessage>:
 800c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	4682      	mov	sl, r0
 800c15c:	4610      	mov	r0, r2
 800c15e:	4615      	mov	r5, r2
 800c160:	461e      	mov	r6, r3
 800c162:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800c166:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800c16a:	9101      	str	r1, [sp, #4]
 800c16c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c170:	f000 fad4 	bl	800c71c <uxr_submessage_padding>
 800c174:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c178:	f105 0904 	add.w	r9, r5, #4
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	4481      	add	r9, r0
 800c180:	d01d      	beq.n	800c1be <uxr_prepare_stream_to_write_submessage+0x6a>
 800c182:	2b02      	cmp	r3, #2
 800c184:	d116      	bne.n	800c1b4 <uxr_prepare_stream_to_write_submessage+0x60>
 800c186:	4621      	mov	r1, r4
 800c188:	f10a 0008 	add.w	r0, sl, #8
 800c18c:	f000 fa4e 	bl	800c62c <uxr_get_output_reliable_stream>
 800c190:	4604      	mov	r4, r0
 800c192:	b158      	cbz	r0, 800c1ac <uxr_prepare_stream_to_write_submessage+0x58>
 800c194:	4649      	mov	r1, r9
 800c196:	4632      	mov	r2, r6
 800c198:	f004 f98e 	bl	80104b8 <uxr_prepare_reliable_buffer_to_write>
 800c19c:	4604      	mov	r4, r0
 800c19e:	b12c      	cbz	r4, 800c1ac <uxr_prepare_stream_to_write_submessage+0x58>
 800c1a0:	4643      	mov	r3, r8
 800c1a2:	b2aa      	uxth	r2, r5
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	f000 fa78 	bl	800c69c <uxr_buffer_submessage_header>
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	b002      	add	sp, #8
 800c1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b4:	2400      	movs	r4, #0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	b002      	add	sp, #8
 800c1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1be:	4621      	mov	r1, r4
 800c1c0:	f10a 0008 	add.w	r0, sl, #8
 800c1c4:	f000 fa2a 	bl	800c61c <uxr_get_output_best_effort_stream>
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d0ee      	beq.n	800c1ac <uxr_prepare_stream_to_write_submessage+0x58>
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	f004 f8ad 	bl	8010330 <uxr_prepare_best_effort_buffer_to_write>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	e7e1      	b.n	800c19e <uxr_prepare_stream_to_write_submessage+0x4a>
 800c1da:	bf00      	nop

0800c1dc <uxr_init_session_info>:
 800c1dc:	b470      	push	{r4, r5, r6}
 800c1de:	7102      	strb	r2, [r0, #4]
 800c1e0:	0e16      	lsrs	r6, r2, #24
 800c1e2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800c1e6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c1ea:	23ff      	movs	r3, #255	@ 0xff
 800c1ec:	2209      	movs	r2, #9
 800c1ee:	7046      	strb	r6, [r0, #1]
 800c1f0:	7085      	strb	r5, [r0, #2]
 800c1f2:	70c4      	strb	r4, [r0, #3]
 800c1f4:	7001      	strb	r1, [r0, #0]
 800c1f6:	bc70      	pop	{r4, r5, r6}
 800c1f8:	80c2      	strh	r2, [r0, #6]
 800c1fa:	7143      	strb	r3, [r0, #5]
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop

0800c200 <uxr_buffer_create_session>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	2300      	movs	r3, #0
 800c206:	4d12      	ldr	r5, [pc, #72]	@ (800c250 <uxr_buffer_create_session+0x50>)
 800c208:	9307      	str	r3, [sp, #28]
 800c20a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c20e:	7802      	ldrb	r2, [r0, #0]
 800c210:	9303      	str	r3, [sp, #12]
 800c212:	460c      	mov	r4, r1
 800c214:	f88d 200c 	strb.w	r2, [sp, #12]
 800c218:	2101      	movs	r1, #1
 800c21a:	682a      	ldr	r2, [r5, #0]
 800c21c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800c220:	88ad      	ldrh	r5, [r5, #4]
 800c222:	80c1      	strh	r1, [r0, #6]
 800c224:	f8ad 1004 	strh.w	r1, [sp, #4]
 800c228:	9200      	str	r2, [sp, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	2210      	movs	r2, #16
 800c22e:	4620      	mov	r0, r4
 800c230:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c234:	9306      	str	r3, [sp, #24]
 800c236:	f88d 300d 	strb.w	r3, [sp, #13]
 800c23a:	9602      	str	r6, [sp, #8]
 800c23c:	f8ad 5006 	strh.w	r5, [sp, #6]
 800c240:	f000 fa2c 	bl	800c69c <uxr_buffer_submessage_header>
 800c244:	4620      	mov	r0, r4
 800c246:	4669      	mov	r1, sp
 800c248:	f001 f964 	bl	800d514 <uxr_serialize_CREATE_CLIENT_Payload>
 800c24c:	b008      	add	sp, #32
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	08013018 	.word	0x08013018

0800c254 <uxr_buffer_delete_session>:
 800c254:	b530      	push	{r4, r5, lr}
 800c256:	4b0c      	ldr	r3, [pc, #48]	@ (800c288 <uxr_buffer_delete_session+0x34>)
 800c258:	b083      	sub	sp, #12
 800c25a:	891b      	ldrh	r3, [r3, #8]
 800c25c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c260:	2202      	movs	r2, #2
 800c262:	460c      	mov	r4, r1
 800c264:	80c2      	strh	r2, [r0, #6]
 800c266:	2300      	movs	r3, #0
 800c268:	2204      	movs	r2, #4
 800c26a:	4608      	mov	r0, r1
 800c26c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800c270:	2103      	movs	r1, #3
 800c272:	f8ad 5004 	strh.w	r5, [sp, #4]
 800c276:	f000 fa11 	bl	800c69c <uxr_buffer_submessage_header>
 800c27a:	4620      	mov	r0, r4
 800c27c:	a901      	add	r1, sp, #4
 800c27e:	f001 f9f7 	bl	800d670 <uxr_serialize_DELETE_Payload>
 800c282:	b003      	add	sp, #12
 800c284:	bd30      	pop	{r4, r5, pc}
 800c286:	bf00      	nop
 800c288:	08013018 	.word	0x08013018

0800c28c <uxr_read_create_session_status>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	4604      	mov	r4, r0
 800c292:	4608      	mov	r0, r1
 800c294:	a901      	add	r1, sp, #4
 800c296:	f001 f9fb 	bl	800d690 <uxr_deserialize_STATUS_AGENT_Payload>
 800c29a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c29e:	7163      	strb	r3, [r4, #5]
 800c2a0:	b008      	add	sp, #32
 800c2a2:	bd10      	pop	{r4, pc}

0800c2a4 <uxr_read_delete_session_status>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	a902      	add	r1, sp, #8
 800c2ae:	f001 fa1f 	bl	800d6f0 <uxr_deserialize_STATUS_Payload>
 800c2b2:	88e3      	ldrh	r3, [r4, #6]
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d001      	beq.n	800c2bc <uxr_read_delete_session_status+0x18>
 800c2b8:	b004      	add	sp, #16
 800c2ba:	bd10      	pop	{r4, pc}
 800c2bc:	f10d 000a 	add.w	r0, sp, #10
 800c2c0:	f7ff f826 	bl	800b310 <uxr_object_id_from_raw>
 800c2c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c2c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c2cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	bf04      	itt	eq
 800c2d6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c2da:	7163      	strbeq	r3, [r4, #5]
 800c2dc:	b004      	add	sp, #16
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <uxr_stamp_create_session_header>:
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	b08a      	sub	sp, #40	@ 0x28
 800c2e6:	a802      	add	r0, sp, #8
 800c2e8:	2208      	movs	r2, #8
 800c2ea:	f7fe fe3b 	bl	800af64 <ucdr_init_buffer>
 800c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f2:	9400      	str	r4, [sp, #0]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	a802      	add	r0, sp, #8
 800c2f8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f000 fbcb 	bl	800ca98 <uxr_serialize_message_header>
 800c302:	b00a      	add	sp, #40	@ 0x28
 800c304:	bd10      	pop	{r4, pc}
 800c306:	bf00      	nop

0800c308 <uxr_stamp_session_header>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	4604      	mov	r4, r0
 800c30c:	b08c      	sub	sp, #48	@ 0x30
 800c30e:	460d      	mov	r5, r1
 800c310:	4616      	mov	r6, r2
 800c312:	4619      	mov	r1, r3
 800c314:	a804      	add	r0, sp, #16
 800c316:	2208      	movs	r2, #8
 800c318:	9603      	str	r6, [sp, #12]
 800c31a:	f7fe fe23 	bl	800af64 <ucdr_init_buffer>
 800c31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	9400      	str	r4, [sp, #0]
 800c326:	462a      	mov	r2, r5
 800c328:	a804      	add	r0, sp, #16
 800c32a:	f000 fbb5 	bl	800ca98 <uxr_serialize_message_header>
 800c32e:	b00c      	add	sp, #48	@ 0x30
 800c330:	bd70      	pop	{r4, r5, r6, pc}
 800c332:	bf00      	nop

0800c334 <uxr_read_session_header>:
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	4607      	mov	r7, r0
 800c33a:	b084      	sub	sp, #16
 800c33c:	4608      	mov	r0, r1
 800c33e:	460c      	mov	r4, r1
 800c340:	4615      	mov	r5, r2
 800c342:	461e      	mov	r6, r3
 800c344:	f7fe fe3e 	bl	800afc4 <ucdr_buffer_remaining>
 800c348:	2808      	cmp	r0, #8
 800c34a:	d803      	bhi.n	800c354 <uxr_read_session_header+0x20>
 800c34c:	2000      	movs	r0, #0
 800c34e:	b004      	add	sp, #16
 800c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c354:	f10d 080c 	add.w	r8, sp, #12
 800c358:	4633      	mov	r3, r6
 800c35a:	462a      	mov	r2, r5
 800c35c:	4620      	mov	r0, r4
 800c35e:	f8cd 8000 	str.w	r8, [sp]
 800c362:	f10d 010b 	add.w	r1, sp, #11
 800c366:	f000 fbb5 	bl	800cad4 <uxr_deserialize_message_header>
 800c36a:	783a      	ldrb	r2, [r7, #0]
 800c36c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c370:	4293      	cmp	r3, r2
 800c372:	d1eb      	bne.n	800c34c <uxr_read_session_header+0x18>
 800c374:	061b      	lsls	r3, r3, #24
 800c376:	d41c      	bmi.n	800c3b2 <uxr_read_session_header+0x7e>
 800c378:	f898 2000 	ldrb.w	r2, [r8]
 800c37c:	787b      	ldrb	r3, [r7, #1]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d003      	beq.n	800c38a <uxr_read_session_header+0x56>
 800c382:	2001      	movs	r0, #1
 800c384:	f080 0001 	eor.w	r0, r0, #1
 800c388:	e7e1      	b.n	800c34e <uxr_read_session_header+0x1a>
 800c38a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c38e:	78bb      	ldrb	r3, [r7, #2]
 800c390:	429a      	cmp	r2, r3
 800c392:	f107 0102 	add.w	r1, r7, #2
 800c396:	d1f4      	bne.n	800c382 <uxr_read_session_header+0x4e>
 800c398:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c39c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d1ee      	bne.n	800c382 <uxr_read_session_header+0x4e>
 800c3a4:	784b      	ldrb	r3, [r1, #1]
 800c3a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d1e9      	bne.n	800c382 <uxr_read_session_header+0x4e>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	e7e8      	b.n	800c384 <uxr_read_session_header+0x50>
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	e7cb      	b.n	800c34e <uxr_read_session_header+0x1a>
 800c3b6:	bf00      	nop

0800c3b8 <uxr_session_header_offset>:
 800c3b8:	f990 3000 	ldrsb.w	r3, [r0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfac      	ite	ge
 800c3c0:	2008      	movge	r0, #8
 800c3c2:	2004      	movlt	r0, #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop

0800c3c8 <uxr_init_base_object_request>:
 800c3c8:	b530      	push	{r4, r5, lr}
 800c3ca:	88c3      	ldrh	r3, [r0, #6]
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800c3d2:	9101      	str	r1, [sp, #4]
 800c3d4:	f1a3 010a 	sub.w	r1, r3, #10
 800c3d8:	b289      	uxth	r1, r1
 800c3da:	42a1      	cmp	r1, r4
 800c3dc:	d80e      	bhi.n	800c3fc <uxr_init_base_object_request+0x34>
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b29c      	uxth	r4, r3
 800c3e2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	80c4      	strh	r4, [r0, #6]
 800c3ea:	1c91      	adds	r1, r2, #2
 800c3ec:	9801      	ldr	r0, [sp, #4]
 800c3ee:	7015      	strb	r5, [r2, #0]
 800c3f0:	7053      	strb	r3, [r2, #1]
 800c3f2:	f7fe ffa1 	bl	800b338 <uxr_object_id_to_raw>
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	bd30      	pop	{r4, r5, pc}
 800c3fc:	230a      	movs	r3, #10
 800c3fe:	461c      	mov	r4, r3
 800c400:	2500      	movs	r5, #0
 800c402:	e7f1      	b.n	800c3e8 <uxr_init_base_object_request+0x20>

0800c404 <uxr_parse_base_object_request>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4604      	mov	r4, r0
 800c408:	3002      	adds	r0, #2
 800c40a:	460d      	mov	r5, r1
 800c40c:	4616      	mov	r6, r2
 800c40e:	f7fe ff7f 	bl	800b310 <uxr_object_id_from_raw>
 800c412:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c416:	8028      	strh	r0, [r5, #0]
 800c418:	806b      	strh	r3, [r5, #2]
 800c41a:	7822      	ldrb	r2, [r4, #0]
 800c41c:	7863      	ldrb	r3, [r4, #1]
 800c41e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c422:	8033      	strh	r3, [r6, #0]
 800c424:	bd70      	pop	{r4, r5, r6, pc}
 800c426:	bf00      	nop

0800c428 <uxr_stream_id>:
 800c428:	b410      	push	{r4}
 800c42a:	2901      	cmp	r1, #1
 800c42c:	b083      	sub	sp, #12
 800c42e:	d01f      	beq.n	800c470 <uxr_stream_id+0x48>
 800c430:	2902      	cmp	r1, #2
 800c432:	f04f 0400 	mov.w	r4, #0
 800c436:	d01e      	beq.n	800c476 <uxr_stream_id+0x4e>
 800c438:	2300      	movs	r3, #0
 800c43a:	f364 0307 	bfi	r3, r4, #0, #8
 800c43e:	f360 230f 	bfi	r3, r0, #8, #8
 800c442:	f361 4317 	bfi	r3, r1, #16, #8
 800c446:	f362 631f 	bfi	r3, r2, #24, #8
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	2000      	movs	r0, #0
 800c44e:	f362 0007 	bfi	r0, r2, #0, #8
 800c452:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c456:	f362 200f 	bfi	r0, r2, #8, #8
 800c45a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c45e:	f362 4017 	bfi	r0, r2, #16, #8
 800c462:	0e1b      	lsrs	r3, r3, #24
 800c464:	f363 601f 	bfi	r0, r3, #24, #8
 800c468:	b003      	add	sp, #12
 800c46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	1c44      	adds	r4, r0, #1
 800c472:	b2e4      	uxtb	r4, r4
 800c474:	e7e0      	b.n	800c438 <uxr_stream_id+0x10>
 800c476:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 800c47a:	e7dd      	b.n	800c438 <uxr_stream_id+0x10>

0800c47c <uxr_stream_id_from_raw>:
 800c47c:	b410      	push	{r4}
 800c47e:	b083      	sub	sp, #12
 800c480:	b128      	cbz	r0, 800c48e <uxr_stream_id_from_raw+0x12>
 800c482:	0603      	lsls	r3, r0, #24
 800c484:	d421      	bmi.n	800c4ca <uxr_stream_id_from_raw+0x4e>
 800c486:	1e42      	subs	r2, r0, #1
 800c488:	b2d2      	uxtb	r2, r2
 800c48a:	2401      	movs	r4, #1
 800c48c:	e001      	b.n	800c492 <uxr_stream_id_from_raw+0x16>
 800c48e:	4604      	mov	r4, r0
 800c490:	4602      	mov	r2, r0
 800c492:	2300      	movs	r3, #0
 800c494:	f360 0307 	bfi	r3, r0, #0, #8
 800c498:	f362 230f 	bfi	r3, r2, #8, #8
 800c49c:	f364 4317 	bfi	r3, r4, #16, #8
 800c4a0:	f361 631f 	bfi	r3, r1, #24, #8
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f362 0007 	bfi	r0, r2, #0, #8
 800c4ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c4b0:	f362 200f 	bfi	r0, r2, #8, #8
 800c4b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c4b8:	f362 4017 	bfi	r0, r2, #16, #8
 800c4bc:	0e1b      	lsrs	r3, r3, #24
 800c4be:	f363 601f 	bfi	r0, r3, #24, #8
 800c4c2:	b003      	add	sp, #12
 800c4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800c4ce:	2402      	movs	r4, #2
 800c4d0:	e7df      	b.n	800c492 <uxr_stream_id_from_raw+0x16>
 800c4d2:	bf00      	nop

0800c4d4 <uxr_init_stream_storage>:
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	7403      	strb	r3, [r0, #16]
 800c4d8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800c4dc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800c4e0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop

0800c4e8 <uxr_reset_stream_storage>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	7c03      	ldrb	r3, [r0, #16]
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	b153      	cbz	r3, 800c506 <uxr_reset_stream_storage+0x1e>
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	2500      	movs	r5, #0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f003 ff15 	bl	8010324 <uxr_reset_output_best_effort_stream>
 800c4fa:	7c23      	ldrb	r3, [r4, #16]
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	42ab      	cmp	r3, r5
 800c500:	f106 0610 	add.w	r6, r6, #16
 800c504:	d8f6      	bhi.n	800c4f4 <uxr_reset_stream_storage+0xc>
 800c506:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c50a:	b163      	cbz	r3, 800c526 <uxr_reset_stream_storage+0x3e>
 800c50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c510:	2500      	movs	r5, #0
 800c512:	4630      	mov	r0, r6
 800c514:	f003 fd12 	bl	800ff3c <uxr_reset_input_best_effort_stream>
 800c518:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c51c:	3501      	adds	r5, #1
 800c51e:	42ab      	cmp	r3, r5
 800c520:	f106 0602 	add.w	r6, r6, #2
 800c524:	d8f5      	bhi.n	800c512 <uxr_reset_stream_storage+0x2a>
 800c526:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c52a:	b163      	cbz	r3, 800c546 <uxr_reset_stream_storage+0x5e>
 800c52c:	f104 0618 	add.w	r6, r4, #24
 800c530:	2500      	movs	r5, #0
 800c532:	4630      	mov	r0, r6
 800c534:	f003 ff96 	bl	8010464 <uxr_reset_output_reliable_stream>
 800c538:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c53c:	3501      	adds	r5, #1
 800c53e:	42ab      	cmp	r3, r5
 800c540:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800c544:	d8f5      	bhi.n	800c532 <uxr_reset_stream_storage+0x4a>
 800c546:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c54a:	b163      	cbz	r3, 800c566 <uxr_reset_stream_storage+0x7e>
 800c54c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800c550:	2500      	movs	r5, #0
 800c552:	4630      	mov	r0, r6
 800c554:	f003 fd5a 	bl	801000c <uxr_reset_input_reliable_stream>
 800c558:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c55c:	3501      	adds	r5, #1
 800c55e:	42ab      	cmp	r3, r5
 800c560:	f106 0618 	add.w	r6, r6, #24
 800c564:	d8f5      	bhi.n	800c552 <uxr_reset_stream_storage+0x6a>
 800c566:	bd70      	pop	{r4, r5, r6, pc}

0800c568 <uxr_add_output_best_effort_buffer>:
 800c568:	b530      	push	{r4, r5, lr}
 800c56a:	7c04      	ldrb	r4, [r0, #16]
 800c56c:	1c65      	adds	r5, r4, #1
 800c56e:	b083      	sub	sp, #12
 800c570:	7405      	strb	r5, [r0, #16]
 800c572:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c576:	f003 fec9 	bl	801030c <uxr_init_output_best_effort_stream>
 800c57a:	2201      	movs	r2, #1
 800c57c:	4620      	mov	r0, r4
 800c57e:	4611      	mov	r1, r2
 800c580:	b003      	add	sp, #12
 800c582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c586:	f7ff bf4f 	b.w	800c428 <uxr_stream_id>
 800c58a:	bf00      	nop

0800c58c <uxr_add_output_reliable_buffer>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 800c594:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800c598:	9600      	str	r6, [sp, #0]
 800c59a:	2528      	movs	r5, #40	@ 0x28
 800c59c:	1c66      	adds	r6, r4, #1
 800c59e:	fb05 0504 	mla	r5, r5, r4, r0
 800c5a2:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 800c5a6:	f105 0018 	add.w	r0, r5, #24
 800c5aa:	f003 ff29 	bl	8010400 <uxr_init_output_reliable_stream>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	2102      	movs	r1, #2
 800c5b4:	b004      	add	sp, #16
 800c5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5ba:	f7ff bf35 	b.w	800c428 <uxr_stream_id>
 800c5be:	bf00      	nop

0800c5c0 <uxr_add_input_best_effort_buffer>:
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800c5c6:	1c62      	adds	r2, r4, #1
 800c5c8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800c5d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c5d6:	f003 fcad 	bl	800ff34 <uxr_init_input_best_effort_stream>
 800c5da:	4620      	mov	r0, r4
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2101      	movs	r1, #1
 800c5e0:	b002      	add	sp, #8
 800c5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e6:	f7ff bf1f 	b.w	800c428 <uxr_stream_id>
 800c5ea:	bf00      	nop

0800c5ec <uxr_add_input_reliable_buffer>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800c5f4:	9e08      	ldr	r6, [sp, #32]
 800c5f6:	9600      	str	r6, [sp, #0]
 800c5f8:	2518      	movs	r5, #24
 800c5fa:	1c66      	adds	r6, r4, #1
 800c5fc:	fb05 0504 	mla	r5, r5, r4, r0
 800c600:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 800c604:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c608:	f003 fcdc 	bl	800ffc4 <uxr_init_input_reliable_stream>
 800c60c:	4620      	mov	r0, r4
 800c60e:	2200      	movs	r2, #0
 800c610:	2102      	movs	r1, #2
 800c612:	b004      	add	sp, #16
 800c614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c618:	f7ff bf06 	b.w	800c428 <uxr_stream_id>

0800c61c <uxr_get_output_best_effort_stream>:
 800c61c:	7c03      	ldrb	r3, [r0, #16]
 800c61e:	428b      	cmp	r3, r1
 800c620:	bf8c      	ite	hi
 800c622:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800c626:	2000      	movls	r0, #0
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop

0800c62c <uxr_get_output_reliable_stream>:
 800c62c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c630:	428b      	cmp	r3, r1
 800c632:	bf83      	ittte	hi
 800c634:	2328      	movhi	r3, #40	@ 0x28
 800c636:	fb03 0101 	mlahi	r1, r3, r1, r0
 800c63a:	f101 0018 	addhi.w	r0, r1, #24
 800c63e:	2000      	movls	r0, #0
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop

0800c644 <uxr_get_input_best_effort_stream>:
 800c644:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c648:	428b      	cmp	r3, r1
 800c64a:	bf86      	itte	hi
 800c64c:	3121      	addhi	r1, #33	@ 0x21
 800c64e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800c652:	2000      	movls	r0, #0
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop

0800c658 <uxr_get_input_reliable_stream>:
 800c658:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800c65c:	428b      	cmp	r3, r1
 800c65e:	bf83      	ittte	hi
 800c660:	2318      	movhi	r3, #24
 800c662:	fb03 0101 	mlahi	r1, r3, r1, r0
 800c666:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 800c66a:	2000      	movls	r0, #0
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop

0800c670 <uxr_output_streams_confirmed>:
 800c670:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c674:	b183      	cbz	r3, 800c698 <uxr_output_streams_confirmed+0x28>
 800c676:	b570      	push	{r4, r5, r6, lr}
 800c678:	4606      	mov	r6, r0
 800c67a:	f100 0518 	add.w	r5, r0, #24
 800c67e:	2400      	movs	r4, #0
 800c680:	e001      	b.n	800c686 <uxr_output_streams_confirmed+0x16>
 800c682:	3528      	adds	r5, #40	@ 0x28
 800c684:	b138      	cbz	r0, 800c696 <uxr_output_streams_confirmed+0x26>
 800c686:	4628      	mov	r0, r5
 800c688:	f004 f95c 	bl	8010944 <uxr_is_output_up_to_date>
 800c68c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800c690:	3401      	adds	r4, #1
 800c692:	42a3      	cmp	r3, r4
 800c694:	d8f5      	bhi.n	800c682 <uxr_output_streams_confirmed+0x12>
 800c696:	bd70      	pop	{r4, r5, r6, pc}
 800c698:	2001      	movs	r0, #1
 800c69a:	4770      	bx	lr

0800c69c <uxr_buffer_submessage_header>:
 800c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69e:	4604      	mov	r4, r0
 800c6a0:	460e      	mov	r6, r1
 800c6a2:	2104      	movs	r1, #4
 800c6a4:	4615      	mov	r5, r2
 800c6a6:	461f      	mov	r7, r3
 800c6a8:	f7fe fc76 	bl	800af98 <ucdr_align_to>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	ea47 0203 	orr.w	r2, r7, r3
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	7523      	strb	r3, [r4, #20]
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	f000 fa2b 	bl	800cb14 <uxr_serialize_submessage_header>
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f7fe fc80 	bl	800afc4 <ucdr_buffer_remaining>
 800c6c4:	42a8      	cmp	r0, r5
 800c6c6:	bf34      	ite	cc
 800c6c8:	2000      	movcc	r0, #0
 800c6ca:	2001      	movcs	r0, #1
 800c6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ce:	bf00      	nop

0800c6d0 <uxr_read_submessage_header>:
 800c6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	2104      	movs	r1, #4
 800c6da:	4616      	mov	r6, r2
 800c6dc:	4698      	mov	r8, r3
 800c6de:	f7fe fc5b 	bl	800af98 <ucdr_align_to>
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f7fe fc6e 	bl	800afc4 <ucdr_buffer_remaining>
 800c6e8:	2803      	cmp	r0, #3
 800c6ea:	bf8c      	ite	hi
 800c6ec:	2701      	movhi	r7, #1
 800c6ee:	2700      	movls	r7, #0
 800c6f0:	d802      	bhi.n	800c6f8 <uxr_read_submessage_header+0x28>
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	4633      	mov	r3, r6
 800c6fa:	4642      	mov	r2, r8
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	4629      	mov	r1, r5
 800c700:	f000 fa1c 	bl	800cb3c <uxr_deserialize_submessage_header>
 800c704:	f898 3000 	ldrb.w	r3, [r8]
 800c708:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	f888 2000 	strb.w	r2, [r8]
 800c714:	7523      	strb	r3, [r4, #20]
 800c716:	4638      	mov	r0, r7
 800c718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c71c <uxr_submessage_padding>:
 800c71c:	f010 0003 	ands.w	r0, r0, #3
 800c720:	bf18      	it	ne
 800c722:	f1c0 0004 	rsbne	r0, r0, #4
 800c726:	4770      	bx	lr

0800c728 <uxr_millis>:
 800c728:	b510      	push	{r4, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	4669      	mov	r1, sp
 800c72e:	2001      	movs	r0, #1
 800c730:	f7f5 fac2 	bl	8001cb8 <clock_gettime>
 800c734:	e9dd 2400 	ldrd	r2, r4, [sp]
 800c738:	4907      	ldr	r1, [pc, #28]	@ (800c758 <uxr_millis+0x30>)
 800c73a:	9802      	ldr	r0, [sp, #8]
 800c73c:	fba2 2301 	umull	r2, r3, r2, r1
 800c740:	fb01 3304 	mla	r3, r1, r4, r3
 800c744:	4604      	mov	r4, r0
 800c746:	1810      	adds	r0, r2, r0
 800c748:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800c74c:	4a03      	ldr	r2, [pc, #12]	@ (800c75c <uxr_millis+0x34>)
 800c74e:	2300      	movs	r3, #0
 800c750:	f7f4 f8e4 	bl	800091c <__aeabi_ldivmod>
 800c754:	b004      	add	sp, #16
 800c756:	bd10      	pop	{r4, pc}
 800c758:	3b9aca00 	.word	0x3b9aca00
 800c75c:	000f4240 	.word	0x000f4240

0800c760 <uxr_nanos>:
 800c760:	b510      	push	{r4, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	4669      	mov	r1, sp
 800c766:	2001      	movs	r0, #1
 800c768:	f7f5 faa6 	bl	8001cb8 <clock_gettime>
 800c76c:	e9dd 2400 	ldrd	r2, r4, [sp]
 800c770:	4905      	ldr	r1, [pc, #20]	@ (800c788 <uxr_nanos+0x28>)
 800c772:	9802      	ldr	r0, [sp, #8]
 800c774:	fba2 2301 	umull	r2, r3, r2, r1
 800c778:	fb01 3304 	mla	r3, r1, r4, r3
 800c77c:	4604      	mov	r4, r0
 800c77e:	1810      	adds	r0, r2, r0
 800c780:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800c784:	b004      	add	sp, #16
 800c786:	bd10      	pop	{r4, pc}
 800c788:	3b9aca00 	.word	0x3b9aca00

0800c78c <on_full_output_buffer_fragmented>:
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	460c      	mov	r4, r1
 800c792:	b08a      	sub	sp, #40	@ 0x28
 800c794:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800c798:	4606      	mov	r6, r0
 800c79a:	f104 0008 	add.w	r0, r4, #8
 800c79e:	f7ff ff45 	bl	800c62c <uxr_get_output_reliable_stream>
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	f004 f8d8 	bl	8010958 <get_available_free_slots>
 800c7a8:	b968      	cbnz	r0, 800c7c6 <on_full_output_buffer_fragmented+0x3a>
 800c7aa:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4798      	blx	r3
 800c7b2:	b918      	cbnz	r0, 800c7bc <on_full_output_buffer_fragmented+0x30>
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	b00a      	add	sp, #40	@ 0x28
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f004 f8cb 	bl	8010958 <get_available_free_slots>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d0f6      	beq.n	800c7b4 <on_full_output_buffer_fragmented+0x28>
 800c7c6:	8928      	ldrh	r0, [r5, #8]
 800c7c8:	89eb      	ldrh	r3, [r5, #14]
 800c7ca:	7b2a      	ldrb	r2, [r5, #12]
 800c7cc:	fbb3 f1f0 	udiv	r1, r3, r0
 800c7d0:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 800c7d4:	fb00 3111 	mls	r1, r0, r1, r3
 800c7d8:	b28b      	uxth	r3, r1
 800c7da:	32fc      	adds	r2, #252	@ 0xfc
 800c7dc:	6869      	ldr	r1, [r5, #4]
 800c7de:	fbb1 f1f0 	udiv	r1, r1, r0
 800c7e2:	1f0f      	subs	r7, r1, #4
 800c7e4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 800c7e8:	fb01 f103 	mul.w	r1, r1, r3
 800c7ec:	443a      	add	r2, r7
 800c7ee:	682b      	ldr	r3, [r5, #0]
 800c7f0:	fa1f f882 	uxth.w	r8, r2
 800c7f4:	3104      	adds	r1, #4
 800c7f6:	4419      	add	r1, r3
 800c7f8:	eba0 0008 	sub.w	r0, r0, r8
 800c7fc:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800c800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	463a      	mov	r2, r7
 800c808:	2300      	movs	r3, #0
 800c80a:	a802      	add	r0, sp, #8
 800c80c:	f7fe fb98 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800c810:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800c814:	f102 0308 	add.w	r3, r2, #8
 800c818:	42bb      	cmp	r3, r7
 800c81a:	d927      	bls.n	800c86c <on_full_output_buffer_fragmented+0xe0>
 800c81c:	4642      	mov	r2, r8
 800c81e:	2300      	movs	r3, #0
 800c820:	210d      	movs	r1, #13
 800c822:	a802      	add	r0, sp, #8
 800c824:	f7ff ff3a 	bl	800c69c <uxr_buffer_submessage_header>
 800c828:	8928      	ldrh	r0, [r5, #8]
 800c82a:	89eb      	ldrh	r3, [r5, #14]
 800c82c:	fbb3 f1f0 	udiv	r1, r3, r0
 800c830:	fb00 3111 	mls	r1, r0, r1, r3
 800c834:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c838:	b289      	uxth	r1, r1
 800c83a:	fbb3 f3f0 	udiv	r3, r3, r0
 800c83e:	fb03 f301 	mul.w	r3, r3, r1
 800c842:	50d7      	str	r7, [r2, r3]
 800c844:	89e8      	ldrh	r0, [r5, #14]
 800c846:	2101      	movs	r1, #1
 800c848:	f004 f992 	bl	8010b70 <uxr_seq_num_add>
 800c84c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c850:	81e8      	strh	r0, [r5, #14]
 800c852:	1a52      	subs	r2, r2, r1
 800c854:	4630      	mov	r0, r6
 800c856:	f7fe fb85 	bl	800af64 <ucdr_init_buffer>
 800c85a:	4630      	mov	r0, r6
 800c85c:	490f      	ldr	r1, [pc, #60]	@ (800c89c <on_full_output_buffer_fragmented+0x110>)
 800c85e:	4622      	mov	r2, r4
 800c860:	f7fe fb56 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 800c864:	2000      	movs	r0, #0
 800c866:	b00a      	add	sp, #40	@ 0x28
 800c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86c:	b292      	uxth	r2, r2
 800c86e:	2302      	movs	r3, #2
 800c870:	210d      	movs	r1, #13
 800c872:	a802      	add	r0, sp, #8
 800c874:	f7ff ff12 	bl	800c69c <uxr_buffer_submessage_header>
 800c878:	8928      	ldrh	r0, [r5, #8]
 800c87a:	89eb      	ldrh	r3, [r5, #14]
 800c87c:	fbb3 f2f0 	udiv	r2, r3, r0
 800c880:	fb00 3212 	mls	r2, r0, r2, r3
 800c884:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800c888:	686b      	ldr	r3, [r5, #4]
 800c88a:	fbb3 f3f0 	udiv	r3, r3, r0
 800c88e:	b292      	uxth	r2, r2
 800c890:	6828      	ldr	r0, [r5, #0]
 800c892:	fb03 f302 	mul.w	r3, r3, r2
 800c896:	3108      	adds	r1, #8
 800c898:	50c1      	str	r1, [r0, r3]
 800c89a:	e7d3      	b.n	800c844 <on_full_output_buffer_fragmented+0xb8>
 800c89c:	0800c78d 	.word	0x0800c78d

0800c8a0 <uxr_prepare_output_stream>:
 800c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	2407      	movs	r4, #7
 800c8a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8a8:	9202      	str	r2, [sp, #8]
 800c8aa:	2500      	movs	r5, #0
 800c8ac:	1d32      	adds	r2, r6, #4
 800c8ae:	e9cd 4500 	strd	r4, r5, [sp]
 800c8b2:	9103      	str	r1, [sp, #12]
 800c8b4:	461c      	mov	r4, r3
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	f7ff fc4c 	bl	800c154 <uxr_prepare_stream_to_write_submessage>
 800c8bc:	f080 0201 	eor.w	r2, r0, #1
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	75a2      	strb	r2, [r4, #22]
 800c8c4:	b112      	cbz	r2, 800c8cc <uxr_prepare_output_stream+0x2c>
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	b007      	add	sp, #28
 800c8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8cc:	aa05      	add	r2, sp, #20
 800c8ce:	9902      	ldr	r1, [sp, #8]
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7ff fd79 	bl	800c3c8 <uxr_init_base_object_request>
 800c8d6:	a905      	add	r1, sp, #20
 800c8d8:	4605      	mov	r5, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 ff86 	bl	800d7ec <uxr_serialize_WRITE_DATA_Payload_Data>
 800c8e0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c8e4:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800c8e8:	1a52      	subs	r2, r2, r1
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f7fe fb3a 	bl	800af64 <ucdr_init_buffer>
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	4631      	mov	r1, r6
 800c8f6:	f7fe fb0b 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	b007      	add	sp, #28
 800c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c900 <uxr_prepare_output_stream_fragmented>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	b093      	sub	sp, #76	@ 0x4c
 800c906:	4605      	mov	r5, r0
 800c908:	9107      	str	r1, [sp, #28]
 800c90a:	3008      	adds	r0, #8
 800c90c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c910:	9303      	str	r3, [sp, #12]
 800c912:	9206      	str	r2, [sp, #24]
 800c914:	f7ff fe8a 	bl	800c62c <uxr_get_output_reliable_stream>
 800c918:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	f000 8094 	beq.w	800ca4a <uxr_prepare_output_stream_fragmented+0x14a>
 800c922:	4604      	mov	r4, r0
 800c924:	2800      	cmp	r0, #0
 800c926:	f000 8090 	beq.w	800ca4a <uxr_prepare_output_stream_fragmented+0x14a>
 800c92a:	f004 f815 	bl	8010958 <get_available_free_slots>
 800c92e:	2800      	cmp	r0, #0
 800c930:	f000 8086 	beq.w	800ca40 <uxr_prepare_output_stream_fragmented+0x140>
 800c934:	8922      	ldrh	r2, [r4, #8]
 800c936:	89e7      	ldrh	r7, [r4, #14]
 800c938:	fbb7 f8f2 	udiv	r8, r7, r2
 800c93c:	e9d4 3100 	ldrd	r3, r1, [r4]
 800c940:	fb02 7818 	mls	r8, r2, r8, r7
 800c944:	fa1f f888 	uxth.w	r8, r8
 800c948:	fbb1 f2f2 	udiv	r2, r1, r2
 800c94c:	fb02 f808 	mul.w	r8, r2, r8
 800c950:	f108 0804 	add.w	r8, r8, #4
 800c954:	4498      	add	r8, r3
 800c956:	7b23      	ldrb	r3, [r4, #12]
 800c958:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800c95c:	9204      	str	r2, [sp, #16]
 800c95e:	4553      	cmp	r3, sl
 800c960:	f1a2 0b04 	sub.w	fp, r2, #4
 800c964:	d37d      	bcc.n	800ca62 <uxr_prepare_output_stream_fragmented+0x162>
 800c966:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c968:	f8cd a000 	str.w	sl, [sp]
 800c96c:	f1ab 0904 	sub.w	r9, fp, #4
 800c970:	eba9 0903 	sub.w	r9, r9, r3
 800c974:	3608      	adds	r6, #8
 800c976:	a80a      	add	r0, sp, #40	@ 0x28
 800c978:	2300      	movs	r3, #0
 800c97a:	465a      	mov	r2, fp
 800c97c:	4641      	mov	r1, r8
 800c97e:	fa1f f989 	uxth.w	r9, r9
 800c982:	9605      	str	r6, [sp, #20]
 800c984:	f7fe fadc 	bl	800af40 <ucdr_init_buffer_origin_offset>
 800c988:	455e      	cmp	r6, fp
 800c98a:	bf34      	ite	cc
 800c98c:	2302      	movcc	r3, #2
 800c98e:	2300      	movcs	r3, #0
 800c990:	464a      	mov	r2, r9
 800c992:	210d      	movs	r1, #13
 800c994:	a80a      	add	r0, sp, #40	@ 0x28
 800c996:	f7ff fe81 	bl	800c69c <uxr_buffer_submessage_header>
 800c99a:	8920      	ldrh	r0, [r4, #8]
 800c99c:	fbb7 f3f0 	udiv	r3, r7, r0
 800c9a0:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c9a4:	fb00 7313 	mls	r3, r0, r3, r7
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	fbb1 f1f0 	udiv	r1, r1, r0
 800c9ae:	fb03 f301 	mul.w	r3, r3, r1
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f842 b003 	str.w	fp, [r2, r3]
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	f004 f8d9 	bl	8010b70 <uxr_seq_num_add>
 800c9be:	9b04      	ldr	r3, [sp, #16]
 800c9c0:	9e03      	ldr	r6, [sp, #12]
 800c9c2:	f1a3 0208 	sub.w	r2, r3, #8
 800c9c6:	f10a 0104 	add.w	r1, sl, #4
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	eba2 020a 	sub.w	r2, r2, sl
 800c9d0:	4441      	add	r1, r8
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7fe fac6 	bl	800af64 <ucdr_init_buffer>
 800c9d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c9da:	81e7      	strh	r7, [r4, #14]
 800c9dc:	1d1a      	adds	r2, r3, #4
 800c9de:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c9e2:	bf28      	it	cs
 800c9e4:	2200      	movcs	r2, #0
 800c9e6:	b292      	uxth	r2, r2
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2107      	movs	r1, #7
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7ff fe55 	bl	800c69c <uxr_buffer_submessage_header>
 800c9f2:	9906      	ldr	r1, [sp, #24]
 800c9f4:	aa09      	add	r2, sp, #36	@ 0x24
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f7ff fce6 	bl	800c3c8 <uxr_init_base_object_request>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	b328      	cbz	r0, 800ca4c <uxr_prepare_output_stream_fragmented+0x14c>
 800ca00:	9e03      	ldr	r6, [sp, #12]
 800ca02:	a909      	add	r1, sp, #36	@ 0x24
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 fef1 	bl	800d7ec <uxr_serialize_WRITE_DATA_Payload_Data>
 800ca0a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ca0e:	4630      	mov	r0, r6
 800ca10:	1a52      	subs	r2, r2, r1
 800ca12:	f7fe faa7 	bl	800af64 <ucdr_init_buffer>
 800ca16:	9a05      	ldr	r2, [sp, #20]
 800ca18:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 800ca1c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ca1e:	9b07      	ldr	r3, [sp, #28]
 800ca20:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 800ca24:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ca26:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4919      	ldr	r1, [pc, #100]	@ (800ca94 <uxr_prepare_output_stream_fragmented+0x194>)
 800ca2e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800ca32:	462a      	mov	r2, r5
 800ca34:	f7fe fa6c 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 800ca38:	4620      	mov	r0, r4
 800ca3a:	b013      	add	sp, #76	@ 0x4c
 800ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca40:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ca42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca44:	4628      	mov	r0, r5
 800ca46:	4798      	blx	r3
 800ca48:	b920      	cbnz	r0, 800ca54 <uxr_prepare_output_stream_fragmented+0x154>
 800ca4a:	2400      	movs	r4, #0
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	b013      	add	sp, #76	@ 0x4c
 800ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca54:	4620      	mov	r0, r4
 800ca56:	f003 ff7f 	bl	8010958 <get_available_free_slots>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f47f af6a 	bne.w	800c934 <uxr_prepare_output_stream_fragmented+0x34>
 800ca60:	e7f3      	b.n	800ca4a <uxr_prepare_output_stream_fragmented+0x14a>
 800ca62:	4638      	mov	r0, r7
 800ca64:	2101      	movs	r1, #1
 800ca66:	f004 f883 	bl	8010b70 <uxr_seq_num_add>
 800ca6a:	8922      	ldrh	r2, [r4, #8]
 800ca6c:	fbb0 f8f2 	udiv	r8, r0, r2
 800ca70:	fb02 0818 	mls	r8, r2, r8, r0
 800ca74:	fa1f f888 	uxth.w	r8, r8
 800ca78:	6863      	ldr	r3, [r4, #4]
 800ca7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca7e:	6822      	ldr	r2, [r4, #0]
 800ca80:	fb08 f803 	mul.w	r8, r8, r3
 800ca84:	f108 0804 	add.w	r8, r8, #4
 800ca88:	4490      	add	r8, r2
 800ca8a:	7b23      	ldrb	r3, [r4, #12]
 800ca8c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800ca90:	4607      	mov	r7, r0
 800ca92:	e768      	b.n	800c966 <uxr_prepare_output_stream_fragmented+0x66>
 800ca94:	0800c78d 	.word	0x0800c78d

0800ca98 <uxr_serialize_message_header>:
 800ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	4616      	mov	r6, r2
 800ca9e:	4604      	mov	r4, r0
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	460d      	mov	r5, r1
 800caa4:	9f08      	ldr	r7, [sp, #32]
 800caa6:	f7fd fa23 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800caaa:	4631      	mov	r1, r6
 800caac:	4620      	mov	r0, r4
 800caae:	f7fd fa1f 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cab2:	9a01      	ldr	r2, [sp, #4]
 800cab4:	4620      	mov	r0, r4
 800cab6:	2101      	movs	r1, #1
 800cab8:	f7fd fac6 	bl	800a048 <ucdr_serialize_endian_uint16_t>
 800cabc:	062b      	lsls	r3, r5, #24
 800cabe:	d501      	bpl.n	800cac4 <uxr_serialize_message_header+0x2c>
 800cac0:	b003      	add	sp, #12
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac4:	4639      	mov	r1, r7
 800cac6:	4620      	mov	r0, r4
 800cac8:	2204      	movs	r2, #4
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cad0:	f003 b838 	b.w	800fb44 <ucdr_serialize_array_uint8_t>

0800cad4 <uxr_deserialize_message_header>:
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	b083      	sub	sp, #12
 800cad8:	4616      	mov	r6, r2
 800cada:	4604      	mov	r4, r0
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	460d      	mov	r5, r1
 800cae0:	9f08      	ldr	r7, [sp, #32]
 800cae2:	f7fd fa1b 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800cae6:	4631      	mov	r1, r6
 800cae8:	4620      	mov	r0, r4
 800caea:	f7fd fa17 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800caee:	9a01      	ldr	r2, [sp, #4]
 800caf0:	4620      	mov	r0, r4
 800caf2:	2101      	movs	r1, #1
 800caf4:	f7fd fb9c 	bl	800a230 <ucdr_deserialize_endian_uint16_t>
 800caf8:	f995 3000 	ldrsb.w	r3, [r5]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da01      	bge.n	800cb04 <uxr_deserialize_message_header+0x30>
 800cb00:	b003      	add	sp, #12
 800cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb04:	4639      	mov	r1, r7
 800cb06:	4620      	mov	r0, r4
 800cb08:	2204      	movs	r2, #4
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb10:	f003 b87c 	b.w	800fc0c <ucdr_deserialize_array_uint8_t>

0800cb14 <uxr_serialize_submessage_header>:
 800cb14:	b530      	push	{r4, r5, lr}
 800cb16:	b083      	sub	sp, #12
 800cb18:	4615      	mov	r5, r2
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	f7fd f9e7 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cb22:	4629      	mov	r1, r5
 800cb24:	4620      	mov	r0, r4
 800cb26:	f7fd f9e3 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cb2a:	9a01      	ldr	r2, [sp, #4]
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	2101      	movs	r1, #1
 800cb30:	b003      	add	sp, #12
 800cb32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb36:	f7fd ba87 	b.w	800a048 <ucdr_serialize_endian_uint16_t>
 800cb3a:	bf00      	nop

0800cb3c <uxr_deserialize_submessage_header>:
 800cb3c:	b530      	push	{r4, r5, lr}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	4615      	mov	r5, r2
 800cb42:	4604      	mov	r4, r0
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	f7fd f9e9 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f7fd f9e5 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800cb52:	9a01      	ldr	r2, [sp, #4]
 800cb54:	4620      	mov	r0, r4
 800cb56:	2101      	movs	r1, #1
 800cb58:	b003      	add	sp, #12
 800cb5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb5e:	f7fd bb67 	b.w	800a230 <ucdr_deserialize_endian_uint16_t>
 800cb62:	bf00      	nop

0800cb64 <uxr_serialize_CLIENT_Representation>:
 800cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb68:	2204      	movs	r2, #4
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	f002 ffe9 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cb72:	1d21      	adds	r1, r4, #4
 800cb74:	4607      	mov	r7, r0
 800cb76:	2202      	movs	r2, #2
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f002 ffe3 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cb7e:	1da1      	adds	r1, r4, #6
 800cb80:	4007      	ands	r7, r0
 800cb82:	2202      	movs	r2, #2
 800cb84:	4628      	mov	r0, r5
 800cb86:	f002 ffdd 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cb8a:	fa5f f887 	uxtb.w	r8, r7
 800cb8e:	2204      	movs	r2, #4
 800cb90:	4607      	mov	r7, r0
 800cb92:	f104 0108 	add.w	r1, r4, #8
 800cb96:	4628      	mov	r0, r5
 800cb98:	f002 ffd4 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cb9c:	ea08 0707 	and.w	r7, r8, r7
 800cba0:	7b21      	ldrb	r1, [r4, #12]
 800cba2:	4680      	mov	r8, r0
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7fd f9a3 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cbaa:	ea08 0807 	and.w	r8, r8, r7
 800cbae:	7b61      	ldrb	r1, [r4, #13]
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f7fd f96c 	bl	8009e90 <ucdr_serialize_bool>
 800cbb8:	7b63      	ldrb	r3, [r4, #13]
 800cbba:	ea08 0707 	and.w	r7, r8, r7
 800cbbe:	ea07 0600 	and.w	r6, r7, r0
 800cbc2:	b933      	cbnz	r3, 800cbd2 <uxr_serialize_CLIENT_Representation+0x6e>
 800cbc4:	8ba1      	ldrh	r1, [r4, #28]
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f7fd f9be 	bl	8009f48 <ucdr_serialize_uint16_t>
 800cbcc:	4030      	ands	r0, r6
 800cbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd2:	6921      	ldr	r1, [r4, #16]
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f7fd fba1 	bl	800a31c <ucdr_serialize_uint32_t>
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	b1cb      	cbz	r3, 800cc12 <uxr_serialize_CLIENT_Representation+0xae>
 800cbde:	b1d0      	cbz	r0, 800cc16 <uxr_serialize_CLIENT_Representation+0xb2>
 800cbe0:	46a0      	mov	r8, r4
 800cbe2:	f04f 0900 	mov.w	r9, #0
 800cbe6:	e002      	b.n	800cbee <uxr_serialize_CLIENT_Representation+0x8a>
 800cbe8:	f108 0808 	add.w	r8, r8, #8
 800cbec:	b198      	cbz	r0, 800cc16 <uxr_serialize_CLIENT_Representation+0xb2>
 800cbee:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f003 f8c6 	bl	800fd84 <ucdr_serialize_string>
 800cbf8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f003 f8c0 	bl	800fd84 <ucdr_serialize_string>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	f109 0901 	add.w	r9, r9, #1
 800cc0a:	4038      	ands	r0, r7
 800cc0c:	4599      	cmp	r9, r3
 800cc0e:	b2c0      	uxtb	r0, r0
 800cc10:	d3ea      	bcc.n	800cbe8 <uxr_serialize_CLIENT_Representation+0x84>
 800cc12:	4006      	ands	r6, r0
 800cc14:	e7d6      	b.n	800cbc4 <uxr_serialize_CLIENT_Representation+0x60>
 800cc16:	2600      	movs	r6, #0
 800cc18:	e7d4      	b.n	800cbc4 <uxr_serialize_CLIENT_Representation+0x60>
 800cc1a:	bf00      	nop

0800cc1c <uxr_deserialize_CLIENT_Representation>:
 800cc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc20:	2204      	movs	r2, #4
 800cc22:	460c      	mov	r4, r1
 800cc24:	4605      	mov	r5, r0
 800cc26:	f002 fff1 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800cc2a:	1d21      	adds	r1, r4, #4
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4628      	mov	r0, r5
 800cc32:	f002 ffeb 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800cc36:	1da1      	adds	r1, r4, #6
 800cc38:	4007      	ands	r7, r0
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f002 ffe5 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800cc42:	fa5f f887 	uxtb.w	r8, r7
 800cc46:	2204      	movs	r2, #4
 800cc48:	4607      	mov	r7, r0
 800cc4a:	f104 0108 	add.w	r1, r4, #8
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f002 ffdc 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800cc54:	ea08 0707 	and.w	r7, r8, r7
 800cc58:	f104 010c 	add.w	r1, r4, #12
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f7fd f95c 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800cc64:	ea08 0807 	and.w	r8, r8, r7
 800cc68:	f104 010d 	add.w	r1, r4, #13
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7fd f924 	bl	8009ebc <ucdr_deserialize_bool>
 800cc74:	7b63      	ldrb	r3, [r4, #13]
 800cc76:	ea08 0707 	and.w	r7, r8, r7
 800cc7a:	ea07 0600 	and.w	r6, r7, r0
 800cc7e:	b93b      	cbnz	r3, 800cc90 <uxr_deserialize_CLIENT_Representation+0x74>
 800cc80:	f104 011c 	add.w	r1, r4, #28
 800cc84:	4628      	mov	r0, r5
 800cc86:	f7fd fa5f 	bl	800a148 <ucdr_deserialize_uint16_t>
 800cc8a:	4030      	ands	r0, r6
 800cc8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc90:	f104 0110 	add.w	r1, r4, #16
 800cc94:	4628      	mov	r0, r5
 800cc96:	f7fd fc71 	bl	800a57c <ucdr_deserialize_uint32_t>
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d903      	bls.n	800cca8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800cca0:	2301      	movs	r3, #1
 800cca2:	75ab      	strb	r3, [r5, #22]
 800cca4:	2600      	movs	r6, #0
 800cca6:	e7eb      	b.n	800cc80 <uxr_deserialize_CLIENT_Representation+0x64>
 800cca8:	b1fb      	cbz	r3, 800ccea <uxr_deserialize_CLIENT_Representation+0xce>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d0fa      	beq.n	800cca4 <uxr_deserialize_CLIENT_Representation+0x88>
 800ccae:	46a0      	mov	r8, r4
 800ccb0:	f04f 0900 	mov.w	r9, #0
 800ccb4:	e003      	b.n	800ccbe <uxr_deserialize_CLIENT_Representation+0xa2>
 800ccb6:	f108 0808 	add.w	r8, r8, #8
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d0f2      	beq.n	800cca4 <uxr_deserialize_CLIENT_Representation+0x88>
 800ccbe:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ccc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f003 f86c 	bl	800fda4 <ucdr_deserialize_string>
 800cccc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f003 f864 	bl	800fda4 <ucdr_deserialize_string>
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	f109 0901 	add.w	r9, r9, #1
 800cce2:	4038      	ands	r0, r7
 800cce4:	4599      	cmp	r9, r3
 800cce6:	b2c0      	uxtb	r0, r0
 800cce8:	d3e5      	bcc.n	800ccb6 <uxr_deserialize_CLIENT_Representation+0x9a>
 800ccea:	4006      	ands	r6, r0
 800ccec:	e7c8      	b.n	800cc80 <uxr_deserialize_CLIENT_Representation+0x64>
 800ccee:	bf00      	nop

0800ccf0 <uxr_serialize_AGENT_Representation>:
 800ccf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf4:	2204      	movs	r2, #4
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	f002 ff23 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800ccfe:	1d21      	adds	r1, r4, #4
 800cd00:	4606      	mov	r6, r0
 800cd02:	2202      	movs	r2, #2
 800cd04:	4628      	mov	r0, r5
 800cd06:	f002 ff1d 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cd0a:	1da1      	adds	r1, r4, #6
 800cd0c:	4006      	ands	r6, r0
 800cd0e:	2202      	movs	r2, #2
 800cd10:	4628      	mov	r0, r5
 800cd12:	f002 ff17 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cd16:	b2f6      	uxtb	r6, r6
 800cd18:	4603      	mov	r3, r0
 800cd1a:	7a21      	ldrb	r1, [r4, #8]
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	401e      	ands	r6, r3
 800cd20:	f7fd f8b6 	bl	8009e90 <ucdr_serialize_bool>
 800cd24:	7a23      	ldrb	r3, [r4, #8]
 800cd26:	ea00 0706 	and.w	r7, r0, r6
 800cd2a:	b913      	cbnz	r3, 800cd32 <uxr_serialize_AGENT_Representation+0x42>
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd32:	68e1      	ldr	r1, [r4, #12]
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7fd faf1 	bl	800a31c <ucdr_serialize_uint32_t>
 800cd3a:	68e3      	ldr	r3, [r4, #12]
 800cd3c:	b313      	cbz	r3, 800cd84 <uxr_serialize_AGENT_Representation+0x94>
 800cd3e:	b1e8      	cbz	r0, 800cd7c <uxr_serialize_AGENT_Representation+0x8c>
 800cd40:	46a0      	mov	r8, r4
 800cd42:	f04f 0900 	mov.w	r9, #0
 800cd46:	e002      	b.n	800cd4e <uxr_serialize_AGENT_Representation+0x5e>
 800cd48:	f108 0808 	add.w	r8, r8, #8
 800cd4c:	b1b3      	cbz	r3, 800cd7c <uxr_serialize_AGENT_Representation+0x8c>
 800cd4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cd52:	4628      	mov	r0, r5
 800cd54:	f003 f816 	bl	800fd84 <ucdr_serialize_string>
 800cd58:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f003 f810 	bl	800fd84 <ucdr_serialize_string>
 800cd64:	68e2      	ldr	r2, [r4, #12]
 800cd66:	f109 0901 	add.w	r9, r9, #1
 800cd6a:	ea06 0300 	and.w	r3, r6, r0
 800cd6e:	4591      	cmp	r9, r2
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	d3e9      	bcc.n	800cd48 <uxr_serialize_AGENT_Representation+0x58>
 800cd74:	401f      	ands	r7, r3
 800cd76:	4638      	mov	r0, r7
 800cd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd7c:	2700      	movs	r7, #0
 800cd7e:	4638      	mov	r0, r7
 800cd80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd84:	4007      	ands	r7, r0
 800cd86:	e7d1      	b.n	800cd2c <uxr_serialize_AGENT_Representation+0x3c>

0800cd88 <uxr_serialize_ObjectVariant.part.0>:
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	780b      	ldrb	r3, [r1, #0]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	460c      	mov	r4, r1
 800cd90:	4605      	mov	r5, r0
 800cd92:	2b0d      	cmp	r3, #13
 800cd94:	d869      	bhi.n	800ce6a <uxr_serialize_ObjectVariant.part.0+0xe2>
 800cd96:	e8df f003 	tbb	[pc, r3]
 800cd9a:	074a      	.short	0x074a
 800cd9c:	07073030 	.word	0x07073030
 800cda0:	21680707 	.word	0x21680707
 800cda4:	45632121 	.word	0x45632121
 800cda8:	7909      	ldrb	r1, [r1, #4]
 800cdaa:	f7fd f8a1 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	b158      	cbz	r0, 800cdca <uxr_serialize_ObjectVariant.part.0+0x42>
 800cdb2:	7923      	ldrb	r3, [r4, #4]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d003      	beq.n	800cdc0 <uxr_serialize_ObjectVariant.part.0+0x38>
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d029      	beq.n	800ce10 <uxr_serialize_ObjectVariant.part.0+0x88>
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d104      	bne.n	800cdca <uxr_serialize_ObjectVariant.part.0+0x42>
 800cdc0:	68a1      	ldr	r1, [r4, #8]
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f002 ffde 	bl	800fd84 <ucdr_serialize_string>
 800cdc8:	4606      	mov	r6, r0
 800cdca:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800cdce:	4628      	mov	r0, r5
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	f002 feb7 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800cdd6:	4030      	ands	r0, r6
 800cdd8:	b2c0      	uxtb	r0, r0
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	7909      	ldrb	r1, [r1, #4]
 800cdde:	f7fd f887 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800cde2:	b1e8      	cbz	r0, 800ce20 <uxr_serialize_ObjectVariant.part.0+0x98>
 800cde4:	7923      	ldrb	r3, [r4, #4]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d001      	beq.n	800cdee <uxr_serialize_ObjectVariant.part.0+0x66>
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d13d      	bne.n	800ce6a <uxr_serialize_ObjectVariant.part.0+0xe2>
 800cdee:	68a1      	ldr	r1, [r4, #8]
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdf6:	f002 bfc5 	b.w	800fd84 <ucdr_serialize_string>
 800cdfa:	7909      	ldrb	r1, [r1, #4]
 800cdfc:	f7fd f878 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800ce00:	4606      	mov	r6, r0
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0e1      	beq.n	800cdca <uxr_serialize_ObjectVariant.part.0+0x42>
 800ce06:	7923      	ldrb	r3, [r4, #4]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d0d9      	beq.n	800cdc0 <uxr_serialize_ObjectVariant.part.0+0x38>
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d1dc      	bne.n	800cdca <uxr_serialize_ObjectVariant.part.0+0x42>
 800ce10:	68a2      	ldr	r2, [r4, #8]
 800ce12:	f104 010c 	add.w	r1, r4, #12
 800ce16:	4628      	mov	r0, r5
 800ce18:	f002 ff88 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	e7d4      	b.n	800cdca <uxr_serialize_ObjectVariant.part.0+0x42>
 800ce20:	2000      	movs	r0, #0
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce28:	3104      	adds	r1, #4
 800ce2a:	f7ff be9b 	b.w	800cb64 <uxr_serialize_CLIENT_Representation>
 800ce2e:	7909      	ldrb	r1, [r1, #4]
 800ce30:	f7fd f85e 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800ce34:	4606      	mov	r6, r0
 800ce36:	b158      	cbz	r0, 800ce50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ce38:	7923      	ldrb	r3, [r4, #4]
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d003      	beq.n	800ce46 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d015      	beq.n	800ce6e <uxr_serialize_ObjectVariant.part.0+0xe6>
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d104      	bne.n	800ce50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ce46:	68a1      	ldr	r1, [r4, #8]
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f002 ff9b 	bl	800fd84 <ucdr_serialize_string>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ce54:	4628      	mov	r0, r5
 800ce56:	f7fd fd87 	bl	800a968 <ucdr_serialize_int16_t>
 800ce5a:	4030      	ands	r0, r6
 800ce5c:	b2c0      	uxtb	r0, r0
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce64:	3104      	adds	r1, #4
 800ce66:	f7ff bf43 	b.w	800ccf0 <uxr_serialize_AGENT_Representation>
 800ce6a:	2001      	movs	r0, #1
 800ce6c:	bd70      	pop	{r4, r5, r6, pc}
 800ce6e:	68a2      	ldr	r2, [r4, #8]
 800ce70:	f104 010c 	add.w	r1, r4, #12
 800ce74:	4628      	mov	r0, r5
 800ce76:	f002 ff59 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	e7e8      	b.n	800ce50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ce7e:	bf00      	nop

0800ce80 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	460d      	mov	r5, r1
 800ce84:	7809      	ldrb	r1, [r1, #0]
 800ce86:	4606      	mov	r6, r0
 800ce88:	f7fd f802 	bl	8009e90 <ucdr_serialize_bool>
 800ce8c:	782b      	ldrb	r3, [r5, #0]
 800ce8e:	4604      	mov	r4, r0
 800ce90:	b94b      	cbnz	r3, 800cea6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ce92:	7a29      	ldrb	r1, [r5, #8]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7fc fffb 	bl	8009e90 <ucdr_serialize_bool>
 800ce9a:	7a2b      	ldrb	r3, [r5, #8]
 800ce9c:	4004      	ands	r4, r0
 800ce9e:	b2e4      	uxtb	r4, r4
 800cea0:	b943      	cbnz	r3, 800ceb4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800cea2:	4620      	mov	r0, r4
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	6869      	ldr	r1, [r5, #4]
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f002 ff6b 	bl	800fd84 <ucdr_serialize_string>
 800ceae:	4004      	ands	r4, r0
 800ceb0:	b2e4      	uxtb	r4, r4
 800ceb2:	e7ee      	b.n	800ce92 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ceb4:	68e9      	ldr	r1, [r5, #12]
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f002 ff64 	bl	800fd84 <ucdr_serialize_string>
 800cebc:	4004      	ands	r4, r0
 800cebe:	4620      	mov	r0, r4
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
 800cec2:	bf00      	nop

0800cec4 <uxr_serialize_OBJK_Topic_Binary>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	460d      	mov	r5, r1
 800cec8:	6809      	ldr	r1, [r1, #0]
 800ceca:	4606      	mov	r6, r0
 800cecc:	f002 ff5a 	bl	800fd84 <ucdr_serialize_string>
 800ced0:	7929      	ldrb	r1, [r5, #4]
 800ced2:	4604      	mov	r4, r0
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7fc ffdb 	bl	8009e90 <ucdr_serialize_bool>
 800ceda:	792b      	ldrb	r3, [r5, #4]
 800cedc:	4004      	ands	r4, r0
 800cede:	b2e4      	uxtb	r4, r4
 800cee0:	b943      	cbnz	r3, 800cef4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800cee2:	7b29      	ldrb	r1, [r5, #12]
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7fc ffd3 	bl	8009e90 <ucdr_serialize_bool>
 800ceea:	7b2b      	ldrb	r3, [r5, #12]
 800ceec:	4004      	ands	r4, r0
 800ceee:	b93b      	cbnz	r3, 800cf00 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800cef0:	4620      	mov	r0, r4
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	68a9      	ldr	r1, [r5, #8]
 800cef6:	4630      	mov	r0, r6
 800cef8:	f002 ff44 	bl	800fd84 <ucdr_serialize_string>
 800cefc:	4004      	ands	r4, r0
 800cefe:	e7f0      	b.n	800cee2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800cf00:	6929      	ldr	r1, [r5, #16]
 800cf02:	4630      	mov	r0, r6
 800cf04:	f002 ff3e 	bl	800fd84 <ucdr_serialize_string>
 800cf08:	4004      	ands	r4, r0
 800cf0a:	b2e4      	uxtb	r4, r4
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}

0800cf10 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800cf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf14:	460c      	mov	r4, r1
 800cf16:	7809      	ldrb	r1, [r1, #0]
 800cf18:	4606      	mov	r6, r0
 800cf1a:	f7fc ffb9 	bl	8009e90 <ucdr_serialize_bool>
 800cf1e:	7823      	ldrb	r3, [r4, #0]
 800cf20:	4605      	mov	r5, r0
 800cf22:	b96b      	cbnz	r3, 800cf40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800cf24:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7fc ffb1 	bl	8009e90 <ucdr_serialize_bool>
 800cf2e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800cf32:	4005      	ands	r5, r0
 800cf34:	b2ed      	uxtb	r5, r5
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d169      	bne.n	800d00e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf40:	6861      	ldr	r1, [r4, #4]
 800cf42:	4630      	mov	r0, r6
 800cf44:	f7fd f9ea 	bl	800a31c <ucdr_serialize_uint32_t>
 800cf48:	6863      	ldr	r3, [r4, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d06b      	beq.n	800d026 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d067      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cf52:	68a1      	ldr	r1, [r4, #8]
 800cf54:	4630      	mov	r0, r6
 800cf56:	f002 ff15 	bl	800fd84 <ucdr_serialize_string>
 800cf5a:	6863      	ldr	r3, [r4, #4]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d953      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d05e      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cf64:	68e1      	ldr	r1, [r4, #12]
 800cf66:	4630      	mov	r0, r6
 800cf68:	f002 ff0c 	bl	800fd84 <ucdr_serialize_string>
 800cf6c:	6863      	ldr	r3, [r4, #4]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d94a      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d055      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cf76:	6921      	ldr	r1, [r4, #16]
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f002 ff03 	bl	800fd84 <ucdr_serialize_string>
 800cf7e:	6863      	ldr	r3, [r4, #4]
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d941      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d04c      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cf88:	6961      	ldr	r1, [r4, #20]
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f002 fefa 	bl	800fd84 <ucdr_serialize_string>
 800cf90:	6863      	ldr	r3, [r4, #4]
 800cf92:	2b04      	cmp	r3, #4
 800cf94:	d938      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d043      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cf9a:	69a1      	ldr	r1, [r4, #24]
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f002 fef1 	bl	800fd84 <ucdr_serialize_string>
 800cfa2:	6863      	ldr	r3, [r4, #4]
 800cfa4:	2b05      	cmp	r3, #5
 800cfa6:	d92f      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d03a      	beq.n	800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cfac:	69e1      	ldr	r1, [r4, #28]
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f002 fee8 	bl	800fd84 <ucdr_serialize_string>
 800cfb4:	6863      	ldr	r3, [r4, #4]
 800cfb6:	2b06      	cmp	r3, #6
 800cfb8:	d926      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cfba:	b390      	cbz	r0, 800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f002 fee0 	bl	800fd84 <ucdr_serialize_string>
 800cfc4:	6863      	ldr	r3, [r4, #4]
 800cfc6:	2b07      	cmp	r3, #7
 800cfc8:	d91e      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cfca:	b350      	cbz	r0, 800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cfcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f002 fed8 	bl	800fd84 <ucdr_serialize_string>
 800cfd4:	6863      	ldr	r3, [r4, #4]
 800cfd6:	2b08      	cmp	r3, #8
 800cfd8:	d916      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cfda:	b310      	cbz	r0, 800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cfdc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f002 fed0 	bl	800fd84 <ucdr_serialize_string>
 800cfe4:	6863      	ldr	r3, [r4, #4]
 800cfe6:	2b09      	cmp	r3, #9
 800cfe8:	d90e      	bls.n	800d008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800cfea:	b1d0      	cbz	r0, 800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cfec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800cff0:	2709      	movs	r7, #9
 800cff2:	e000      	b.n	800cff6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800cff4:	b1a8      	cbz	r0, 800d022 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800cff6:	f858 1b04 	ldr.w	r1, [r8], #4
 800cffa:	4630      	mov	r0, r6
 800cffc:	f002 fec2 	bl	800fd84 <ucdr_serialize_string>
 800d000:	6862      	ldr	r2, [r4, #4]
 800d002:	3701      	adds	r7, #1
 800d004:	4297      	cmp	r7, r2
 800d006:	d3f5      	bcc.n	800cff4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d008:	4005      	ands	r5, r0
 800d00a:	b2ed      	uxtb	r5, r5
 800d00c:	e78a      	b.n	800cf24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d00e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d010:	4630      	mov	r0, r6
 800d012:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d016:	f002 fe89 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800d01a:	4005      	ands	r5, r0
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d022:	2500      	movs	r5, #0
 800d024:	e77e      	b.n	800cf24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d026:	4028      	ands	r0, r5
 800d028:	b2c5      	uxtb	r5, r0
 800d02a:	e77b      	b.n	800cf24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d02c <uxr_serialize_OBJK_Publisher_Binary>:
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	460d      	mov	r5, r1
 800d030:	7809      	ldrb	r1, [r1, #0]
 800d032:	4606      	mov	r6, r0
 800d034:	f7fc ff2c 	bl	8009e90 <ucdr_serialize_bool>
 800d038:	782b      	ldrb	r3, [r5, #0]
 800d03a:	4604      	mov	r4, r0
 800d03c:	b94b      	cbnz	r3, 800d052 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d03e:	7a29      	ldrb	r1, [r5, #8]
 800d040:	4630      	mov	r0, r6
 800d042:	f7fc ff25 	bl	8009e90 <ucdr_serialize_bool>
 800d046:	7a2b      	ldrb	r3, [r5, #8]
 800d048:	4004      	ands	r4, r0
 800d04a:	b2e4      	uxtb	r4, r4
 800d04c:	b943      	cbnz	r3, 800d060 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d04e:	4620      	mov	r0, r4
 800d050:	bd70      	pop	{r4, r5, r6, pc}
 800d052:	6869      	ldr	r1, [r5, #4]
 800d054:	4630      	mov	r0, r6
 800d056:	f002 fe95 	bl	800fd84 <ucdr_serialize_string>
 800d05a:	4004      	ands	r4, r0
 800d05c:	b2e4      	uxtb	r4, r4
 800d05e:	e7ee      	b.n	800d03e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d060:	f105 010c 	add.w	r1, r5, #12
 800d064:	4630      	mov	r0, r6
 800d066:	f7ff ff53 	bl	800cf10 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d06a:	4004      	ands	r4, r0
 800d06c:	4620      	mov	r0, r4
 800d06e:	bd70      	pop	{r4, r5, r6, pc}

0800d070 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d070:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d074:	4688      	mov	r8, r1
 800d076:	8809      	ldrh	r1, [r1, #0]
 800d078:	4681      	mov	r9, r0
 800d07a:	f7fc ff65 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d07e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d082:	4606      	mov	r6, r0
 800d084:	4648      	mov	r0, r9
 800d086:	f7fc ff03 	bl	8009e90 <ucdr_serialize_bool>
 800d08a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d08e:	4030      	ands	r0, r6
 800d090:	b2c5      	uxtb	r5, r0
 800d092:	b9eb      	cbnz	r3, 800d0d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d094:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d098:	4648      	mov	r0, r9
 800d09a:	f7fc fef9 	bl	8009e90 <ucdr_serialize_bool>
 800d09e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d0a2:	4005      	ands	r5, r0
 800d0a4:	bb7b      	cbnz	r3, 800d106 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d0a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d0aa:	4648      	mov	r0, r9
 800d0ac:	f7fc fef0 	bl	8009e90 <ucdr_serialize_bool>
 800d0b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d0b4:	4005      	ands	r5, r0
 800d0b6:	b9f3      	cbnz	r3, 800d0f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d0b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d0bc:	4648      	mov	r0, r9
 800d0be:	f7fc fee7 	bl	8009e90 <ucdr_serialize_bool>
 800d0c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d0c6:	4005      	ands	r5, r0
 800d0c8:	b94b      	cbnz	r3, 800d0de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d0d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	f7fc ff37 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d0da:	4005      	ands	r5, r0
 800d0dc:	e7da      	b.n	800d094 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d0de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d0e2:	4648      	mov	r0, r9
 800d0e4:	f108 011c 	add.w	r1, r8, #28
 800d0e8:	f002 fe20 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800d0ec:	4028      	ands	r0, r5
 800d0ee:	b2c5      	uxtb	r5, r0
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d0f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	f7fd f90e 	bl	800a31c <ucdr_serialize_uint32_t>
 800d100:	4028      	ands	r0, r5
 800d102:	b2c5      	uxtb	r5, r0
 800d104:	e7d8      	b.n	800d0b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d106:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d10a:	4648      	mov	r0, r9
 800d10c:	f7fd f906 	bl	800a31c <ucdr_serialize_uint32_t>
 800d110:	4028      	ands	r0, r5
 800d112:	b2c5      	uxtb	r5, r0
 800d114:	e7c7      	b.n	800d0a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d116:	bf00      	nop

0800d118 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11a:	2202      	movs	r2, #2
 800d11c:	460d      	mov	r5, r1
 800d11e:	4606      	mov	r6, r0
 800d120:	f002 fd10 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d124:	78a9      	ldrb	r1, [r5, #2]
 800d126:	4604      	mov	r4, r0
 800d128:	4630      	mov	r0, r6
 800d12a:	f7fc feb1 	bl	8009e90 <ucdr_serialize_bool>
 800d12e:	78ab      	ldrb	r3, [r5, #2]
 800d130:	4004      	ands	r4, r0
 800d132:	b2e4      	uxtb	r4, r4
 800d134:	b90b      	cbnz	r3, 800d13a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d136:	4620      	mov	r0, r4
 800d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13a:	f105 0108 	add.w	r1, r5, #8
 800d13e:	4630      	mov	r0, r6
 800d140:	f7ff ff96 	bl	800d070 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d144:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800d148:	4607      	mov	r7, r0
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7fc fea0 	bl	8009e90 <ucdr_serialize_bool>
 800d150:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800d154:	4007      	ands	r7, r0
 800d156:	b2ff      	uxtb	r7, r7
 800d158:	b913      	cbnz	r3, 800d160 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d15a:	403c      	ands	r4, r7
 800d15c:	4620      	mov	r0, r4
 800d15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d160:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800d164:	4630      	mov	r0, r6
 800d166:	f7fd fb2f 	bl	800a7c8 <ucdr_serialize_uint64_t>
 800d16a:	4007      	ands	r7, r0
 800d16c:	e7f5      	b.n	800d15a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d16e:	bf00      	nop

0800d170 <uxr_deserialize_ObjectVariant>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	4605      	mov	r5, r0
 800d174:	460e      	mov	r6, r1
 800d176:	f7fc fed1 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d17a:	b320      	cbz	r0, 800d1c6 <uxr_deserialize_ObjectVariant+0x56>
 800d17c:	7833      	ldrb	r3, [r6, #0]
 800d17e:	3b01      	subs	r3, #1
 800d180:	4604      	mov	r4, r0
 800d182:	2b0d      	cmp	r3, #13
 800d184:	d81d      	bhi.n	800d1c2 <uxr_deserialize_ObjectVariant+0x52>
 800d186:	e8df f003 	tbb	[pc, r3]
 800d18a:	2107      	.short	0x2107
 800d18c:	21214b4b 	.word	0x21214b4b
 800d190:	381c2121 	.word	0x381c2121
 800d194:	876a3838 	.word	0x876a3838
 800d198:	1d31      	adds	r1, r6, #4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f7fc febe 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	b138      	cbz	r0, 800d1b4 <uxr_deserialize_ObjectVariant+0x44>
 800d1a4:	7933      	ldrb	r3, [r6, #4]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d07c      	beq.n	800d2a4 <uxr_deserialize_ObjectVariant+0x134>
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	f000 8082 	beq.w	800d2b4 <uxr_deserialize_ObjectVariant+0x144>
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d077      	beq.n	800d2a4 <uxr_deserialize_ObjectVariant+0x134>
 800d1b4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f7fd fc55 	bl	800aa68 <ucdr_deserialize_int16_t>
 800d1be:	4038      	ands	r0, r7
 800d1c0:	b2c4      	uxtb	r4, r0
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c6:	2400      	movs	r4, #0
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1cc:	1d31      	adds	r1, r6, #4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f7fc fea4 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d1d4:	4607      	mov	r7, r0
 800d1d6:	b130      	cbz	r0, 800d1e6 <uxr_deserialize_ObjectVariant+0x76>
 800d1d8:	7933      	ldrb	r3, [r6, #4]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d037      	beq.n	800d24e <uxr_deserialize_ObjectVariant+0xde>
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d02a      	beq.n	800d238 <uxr_deserialize_ObjectVariant+0xc8>
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d033      	beq.n	800d24e <uxr_deserialize_ObjectVariant+0xde>
 800d1e6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	f002 fd0d 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d1f2:	4038      	ands	r0, r7
 800d1f4:	b2c4      	uxtb	r4, r0
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1fa:	1d31      	adds	r1, r6, #4
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f7fc fe8d 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d202:	2800      	cmp	r0, #0
 800d204:	d0df      	beq.n	800d1c6 <uxr_deserialize_ObjectVariant+0x56>
 800d206:	7933      	ldrb	r3, [r6, #4]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d001      	beq.n	800d210 <uxr_deserialize_ObjectVariant+0xa0>
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d1d8      	bne.n	800d1c2 <uxr_deserialize_ObjectVariant+0x52>
 800d210:	68b1      	ldr	r1, [r6, #8]
 800d212:	4628      	mov	r0, r5
 800d214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d21c:	f002 bdc2 	b.w	800fda4 <ucdr_deserialize_string>
 800d220:	1d31      	adds	r1, r6, #4
 800d222:	4628      	mov	r0, r5
 800d224:	f7fc fe7a 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d228:	4607      	mov	r7, r0
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d0db      	beq.n	800d1e6 <uxr_deserialize_ObjectVariant+0x76>
 800d22e:	7933      	ldrb	r3, [r6, #4]
 800d230:	2b02      	cmp	r3, #2
 800d232:	d00c      	beq.n	800d24e <uxr_deserialize_ObjectVariant+0xde>
 800d234:	2b03      	cmp	r3, #3
 800d236:	d1d6      	bne.n	800d1e6 <uxr_deserialize_ObjectVariant+0x76>
 800d238:	f106 0308 	add.w	r3, r6, #8
 800d23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d240:	f106 010c 	add.w	r1, r6, #12
 800d244:	4628      	mov	r0, r5
 800d246:	f002 fd83 	bl	800fd50 <ucdr_deserialize_sequence_uint8_t>
 800d24a:	4607      	mov	r7, r0
 800d24c:	e7cb      	b.n	800d1e6 <uxr_deserialize_ObjectVariant+0x76>
 800d24e:	68b1      	ldr	r1, [r6, #8]
 800d250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d254:	4628      	mov	r0, r5
 800d256:	f002 fda5 	bl	800fda4 <ucdr_deserialize_string>
 800d25a:	4607      	mov	r7, r0
 800d25c:	e7c3      	b.n	800d1e6 <uxr_deserialize_ObjectVariant+0x76>
 800d25e:	2204      	movs	r2, #4
 800d260:	18b1      	adds	r1, r6, r2
 800d262:	4628      	mov	r0, r5
 800d264:	f002 fcd2 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d268:	2202      	movs	r2, #2
 800d26a:	4604      	mov	r4, r0
 800d26c:	f106 0108 	add.w	r1, r6, #8
 800d270:	4628      	mov	r0, r5
 800d272:	f002 fccb 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d276:	2202      	movs	r2, #2
 800d278:	4004      	ands	r4, r0
 800d27a:	f106 010a 	add.w	r1, r6, #10
 800d27e:	4628      	mov	r0, r5
 800d280:	f002 fcc4 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d284:	b2e4      	uxtb	r4, r4
 800d286:	4603      	mov	r3, r0
 800d288:	f106 010c 	add.w	r1, r6, #12
 800d28c:	4628      	mov	r0, r5
 800d28e:	401c      	ands	r4, r3
 800d290:	f7fc fe14 	bl	8009ebc <ucdr_deserialize_bool>
 800d294:	4004      	ands	r4, r0
 800d296:	e794      	b.n	800d1c2 <uxr_deserialize_ObjectVariant+0x52>
 800d298:	1d31      	adds	r1, r6, #4
 800d29a:	4628      	mov	r0, r5
 800d29c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2a0:	f7ff bcbc 	b.w	800cc1c <uxr_deserialize_CLIENT_Representation>
 800d2a4:	68b1      	ldr	r1, [r6, #8]
 800d2a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f002 fd7a 	bl	800fda4 <ucdr_deserialize_string>
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	e77f      	b.n	800d1b4 <uxr_deserialize_ObjectVariant+0x44>
 800d2b4:	f106 0308 	add.w	r3, r6, #8
 800d2b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2bc:	f106 010c 	add.w	r1, r6, #12
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	f002 fd45 	bl	800fd50 <ucdr_deserialize_sequence_uint8_t>
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	e774      	b.n	800d1b4 <uxr_deserialize_ObjectVariant+0x44>
 800d2ca:	bf00      	nop

0800d2cc <uxr_deserialize_BaseObjectRequest>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	460e      	mov	r6, r1
 800d2d4:	f002 fc9a 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d2d8:	1cb1      	adds	r1, r6, #2
 800d2da:	4604      	mov	r4, r0
 800d2dc:	2202      	movs	r2, #2
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f002 fc94 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d2e4:	4020      	ands	r0, r4
 800d2e6:	b2c0      	uxtb	r0, r0
 800d2e8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ea:	bf00      	nop

0800d2ec <uxr_serialize_AGENT_ActivityInfo>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	460e      	mov	r6, r1
 800d2f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 800d2f6:	4607      	mov	r7, r0
 800d2f8:	f7fd fb36 	bl	800a968 <ucdr_serialize_int16_t>
 800d2fc:	6871      	ldr	r1, [r6, #4]
 800d2fe:	4680      	mov	r8, r0
 800d300:	4638      	mov	r0, r7
 800d302:	f7fd f80b 	bl	800a31c <ucdr_serialize_uint32_t>
 800d306:	6873      	ldr	r3, [r6, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d06a      	beq.n	800d3e2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800d30c:	b318      	cbz	r0, 800d356 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800d30e:	f106 0904 	add.w	r9, r6, #4
 800d312:	2500      	movs	r5, #0
 800d314:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800d318:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800d31c:	7a21      	ldrb	r1, [r4, #8]
 800d31e:	4638      	mov	r0, r7
 800d320:	f7fc fde6 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d324:	2800      	cmp	r0, #0
 800d326:	d051      	beq.n	800d3cc <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800d328:	7a23      	ldrb	r3, [r4, #8]
 800d32a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d32e:	00c9      	lsls	r1, r1, #3
 800d330:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800d334:	2b03      	cmp	r3, #3
 800d336:	d859      	bhi.n	800d3ec <uxr_serialize_AGENT_ActivityInfo+0x100>
 800d338:	e8df f003 	tbb	[pc, r3]
 800d33c:	02122436 	.word	0x02122436
 800d340:	4449      	add	r1, r9
 800d342:	4638      	mov	r0, r7
 800d344:	6889      	ldr	r1, [r1, #8]
 800d346:	f002 fd1d 	bl	800fd84 <ucdr_serialize_string>
 800d34a:	6873      	ldr	r3, [r6, #4]
 800d34c:	3501      	adds	r5, #1
 800d34e:	429d      	cmp	r5, r3
 800d350:	d240      	bcs.n	800d3d4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800d352:	2800      	cmp	r0, #0
 800d354:	d1de      	bne.n	800d314 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800d356:	f04f 0800 	mov.w	r8, #0
 800d35a:	4640      	mov	r0, r8
 800d35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d360:	3108      	adds	r1, #8
 800d362:	4449      	add	r1, r9
 800d364:	2210      	movs	r2, #16
 800d366:	4638      	mov	r0, r7
 800d368:	f002 fbec 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d36c:	44aa      	add	sl, r5
 800d36e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d372:	4604      	mov	r4, r0
 800d374:	f8da 101c 	ldr.w	r1, [sl, #28]
 800d378:	4638      	mov	r0, r7
 800d37a:	f7fc ffcf 	bl	800a31c <ucdr_serialize_uint32_t>
 800d37e:	4020      	ands	r0, r4
 800d380:	b2c0      	uxtb	r0, r0
 800d382:	e7e2      	b.n	800d34a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d384:	3108      	adds	r1, #8
 800d386:	4449      	add	r1, r9
 800d388:	2204      	movs	r2, #4
 800d38a:	4638      	mov	r0, r7
 800d38c:	f002 fbda 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d390:	44aa      	add	sl, r5
 800d392:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d396:	4604      	mov	r4, r0
 800d398:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800d39c:	4638      	mov	r0, r7
 800d39e:	f7fc fdd3 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d3a2:	4020      	ands	r0, r4
 800d3a4:	b2c0      	uxtb	r0, r0
 800d3a6:	e7d0      	b.n	800d34a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d3a8:	3108      	adds	r1, #8
 800d3aa:	4449      	add	r1, r9
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	f002 fbc8 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d3b4:	44aa      	add	sl, r5
 800d3b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	f7fc fd95 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d3c6:	4020      	ands	r0, r4
 800d3c8:	b2c0      	uxtb	r0, r0
 800d3ca:	e7be      	b.n	800d34a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d3cc:	6873      	ldr	r3, [r6, #4]
 800d3ce:	3501      	adds	r5, #1
 800d3d0:	429d      	cmp	r5, r3
 800d3d2:	d3c0      	bcc.n	800d356 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800d3d4:	ea08 0000 	and.w	r0, r8, r0
 800d3d8:	fa5f f880 	uxtb.w	r8, r0
 800d3dc:	4640      	mov	r0, r8
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	ea08 0800 	and.w	r8, r8, r0
 800d3e6:	fa5f f888 	uxtb.w	r8, r8
 800d3ea:	e7b6      	b.n	800d35a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800d3ec:	6873      	ldr	r3, [r6, #4]
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	f104 0418 	add.w	r4, r4, #24
 800d3f6:	d891      	bhi.n	800d31c <uxr_serialize_AGENT_ActivityInfo+0x30>
 800d3f8:	e7af      	b.n	800d35a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800d3fa:	bf00      	nop

0800d3fc <uxr_serialize_ActivityInfoVariant>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	460d      	mov	r5, r1
 800d400:	7809      	ldrb	r1, [r1, #0]
 800d402:	4606      	mov	r6, r0
 800d404:	f7fc fd74 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d408:	b130      	cbz	r0, 800d418 <uxr_serialize_ActivityInfoVariant+0x1c>
 800d40a:	782b      	ldrb	r3, [r5, #0]
 800d40c:	2b06      	cmp	r3, #6
 800d40e:	d019      	beq.n	800d444 <uxr_serialize_ActivityInfoVariant+0x48>
 800d410:	2b0d      	cmp	r3, #13
 800d412:	d010      	beq.n	800d436 <uxr_serialize_ActivityInfoVariant+0x3a>
 800d414:	2b05      	cmp	r3, #5
 800d416:	d000      	beq.n	800d41a <uxr_serialize_ActivityInfoVariant+0x1e>
 800d418:	bd70      	pop	{r4, r5, r6, pc}
 800d41a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d41e:	4630      	mov	r0, r6
 800d420:	f7fd faa2 	bl	800a968 <ucdr_serialize_int16_t>
 800d424:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d428:	4604      	mov	r4, r0
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7fd f9cc 	bl	800a7c8 <ucdr_serialize_uint64_t>
 800d430:	4020      	ands	r0, r4
 800d432:	b2c0      	uxtb	r0, r0
 800d434:	bd70      	pop	{r4, r5, r6, pc}
 800d436:	f105 0108 	add.w	r1, r5, #8
 800d43a:	4630      	mov	r0, r6
 800d43c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d440:	f7ff bf54 	b.w	800d2ec <uxr_serialize_AGENT_ActivityInfo>
 800d444:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d448:	4630      	mov	r0, r6
 800d44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d44e:	f7fd ba8b 	b.w	800a968 <ucdr_serialize_int16_t>
 800d452:	bf00      	nop

0800d454 <uxr_deserialize_BaseObjectReply>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	2202      	movs	r2, #2
 800d45a:	4606      	mov	r6, r0
 800d45c:	460f      	mov	r7, r1
 800d45e:	f002 fbd5 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d462:	2202      	movs	r2, #2
 800d464:	1cb9      	adds	r1, r7, #2
 800d466:	4605      	mov	r5, r0
 800d468:	4630      	mov	r0, r6
 800d46a:	f002 fbcf 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d46e:	1d39      	adds	r1, r7, #4
 800d470:	4680      	mov	r8, r0
 800d472:	4630      	mov	r0, r6
 800d474:	f7fc fd52 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d478:	1d79      	adds	r1, r7, #5
 800d47a:	4604      	mov	r4, r0
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7fc fd4d 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d482:	ea05 0508 	and.w	r5, r5, r8
 800d486:	402c      	ands	r4, r5
 800d488:	4020      	ands	r0, r4
 800d48a:	b2c0      	uxtb	r0, r0
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d490 <uxr_serialize_ReadSpecification>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	460e      	mov	r6, r1
 800d496:	7809      	ldrb	r1, [r1, #0]
 800d498:	4607      	mov	r7, r0
 800d49a:	f7fc fd29 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d49e:	7871      	ldrb	r1, [r6, #1]
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	f7fc fd24 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d4a8:	78b1      	ldrb	r1, [r6, #2]
 800d4aa:	4004      	ands	r4, r0
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f7fc fcef 	bl	8009e90 <ucdr_serialize_bool>
 800d4b2:	78b3      	ldrb	r3, [r6, #2]
 800d4b4:	b2e4      	uxtb	r4, r4
 800d4b6:	4004      	ands	r4, r0
 800d4b8:	b94b      	cbnz	r3, 800d4ce <uxr_serialize_ReadSpecification+0x3e>
 800d4ba:	7a31      	ldrb	r1, [r6, #8]
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7fc fce7 	bl	8009e90 <ucdr_serialize_bool>
 800d4c2:	7a33      	ldrb	r3, [r6, #8]
 800d4c4:	4004      	ands	r4, r0
 800d4c6:	b943      	cbnz	r3, 800d4da <uxr_serialize_ReadSpecification+0x4a>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ce:	6871      	ldr	r1, [r6, #4]
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f002 fc57 	bl	800fd84 <ucdr_serialize_string>
 800d4d6:	4004      	ands	r4, r0
 800d4d8:	e7ef      	b.n	800d4ba <uxr_serialize_ReadSpecification+0x2a>
 800d4da:	8971      	ldrh	r1, [r6, #10]
 800d4dc:	4638      	mov	r0, r7
 800d4de:	f7fc fd33 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d4e2:	89b1      	ldrh	r1, [r6, #12]
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7fc fd2e 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d4ec:	89f1      	ldrh	r1, [r6, #14]
 800d4ee:	4005      	ands	r5, r0
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7fc fd29 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d4f6:	8a31      	ldrh	r1, [r6, #16]
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f7fc fd24 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d500:	b2ed      	uxtb	r5, r5
 800d502:	4025      	ands	r5, r4
 800d504:	ea08 0505 	and.w	r5, r8, r5
 800d508:	ea00 0405 	and.w	r4, r0, r5
 800d50c:	4620      	mov	r0, r4
 800d50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d512:	bf00      	nop

0800d514 <uxr_serialize_CREATE_CLIENT_Payload>:
 800d514:	f7ff bb26 	b.w	800cb64 <uxr_serialize_CLIENT_Representation>

0800d518 <uxr_serialize_CREATE_Payload>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	2202      	movs	r2, #2
 800d51c:	4606      	mov	r6, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	f002 fb10 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d524:	1ca9      	adds	r1, r5, #2
 800d526:	4604      	mov	r4, r0
 800d528:	2202      	movs	r2, #2
 800d52a:	4630      	mov	r0, r6
 800d52c:	f002 fb0a 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d530:	7929      	ldrb	r1, [r5, #4]
 800d532:	4607      	mov	r7, r0
 800d534:	4630      	mov	r0, r6
 800d536:	f7fc fcdb 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d53a:	b328      	cbz	r0, 800d588 <uxr_serialize_CREATE_Payload+0x70>
 800d53c:	792b      	ldrb	r3, [r5, #4]
 800d53e:	403c      	ands	r4, r7
 800d540:	3b01      	subs	r3, #1
 800d542:	b2e4      	uxtb	r4, r4
 800d544:	2b0d      	cmp	r3, #13
 800d546:	d81d      	bhi.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d548:	e8df f003 	tbb	[pc, r3]
 800d54c:	32320753 	.word	0x32320753
 800d550:	07070707 	.word	0x07070707
 800d554:	2121211c 	.word	0x2121211c
 800d558:	684c      	.short	0x684c
 800d55a:	7a29      	ldrb	r1, [r5, #8]
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7fc fcc7 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d562:	4607      	mov	r7, r0
 800d564:	b130      	cbz	r0, 800d574 <uxr_serialize_CREATE_Payload+0x5c>
 800d566:	7a2b      	ldrb	r3, [r5, #8]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d035      	beq.n	800d5d8 <uxr_serialize_CREATE_Payload+0xc0>
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d02b      	beq.n	800d5c8 <uxr_serialize_CREATE_Payload+0xb0>
 800d570:	2b01      	cmp	r3, #1
 800d572:	d031      	beq.n	800d5d8 <uxr_serialize_CREATE_Payload+0xc0>
 800d574:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800d578:	4630      	mov	r0, r6
 800d57a:	2202      	movs	r2, #2
 800d57c:	f002 fae2 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d580:	4038      	ands	r0, r7
 800d582:	4004      	ands	r4, r0
 800d584:	4620      	mov	r0, r4
 800d586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d588:	2400      	movs	r4, #0
 800d58a:	4620      	mov	r0, r4
 800d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d58e:	7a29      	ldrb	r1, [r5, #8]
 800d590:	4630      	mov	r0, r6
 800d592:	f7fc fcad 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d596:	2800      	cmp	r0, #0
 800d598:	d0f6      	beq.n	800d588 <uxr_serialize_CREATE_Payload+0x70>
 800d59a:	7a2b      	ldrb	r3, [r5, #8]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d001      	beq.n	800d5a4 <uxr_serialize_CREATE_Payload+0x8c>
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d1ef      	bne.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d5a4:	68e9      	ldr	r1, [r5, #12]
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f002 fbec 	bl	800fd84 <ucdr_serialize_string>
 800d5ac:	4004      	ands	r4, r0
 800d5ae:	e7e9      	b.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d5b0:	7a29      	ldrb	r1, [r5, #8]
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f7fc fc9c 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d0da      	beq.n	800d574 <uxr_serialize_CREATE_Payload+0x5c>
 800d5be:	7a2b      	ldrb	r3, [r5, #8]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d009      	beq.n	800d5d8 <uxr_serialize_CREATE_Payload+0xc0>
 800d5c4:	2b03      	cmp	r3, #3
 800d5c6:	d1d5      	bne.n	800d574 <uxr_serialize_CREATE_Payload+0x5c>
 800d5c8:	68ea      	ldr	r2, [r5, #12]
 800d5ca:	f105 0110 	add.w	r1, r5, #16
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f002 fbac 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	e7cd      	b.n	800d574 <uxr_serialize_CREATE_Payload+0x5c>
 800d5d8:	68e9      	ldr	r1, [r5, #12]
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f002 fbd2 	bl	800fd84 <ucdr_serialize_string>
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	e7c7      	b.n	800d574 <uxr_serialize_CREATE_Payload+0x5c>
 800d5e4:	f105 0108 	add.w	r1, r5, #8
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff fb81 	bl	800ccf0 <uxr_serialize_AGENT_Representation>
 800d5ee:	4004      	ands	r4, r0
 800d5f0:	e7c8      	b.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d5f2:	7a29      	ldrb	r1, [r5, #8]
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7fc fc7b 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d5fa:	4607      	mov	r7, r0
 800d5fc:	b130      	cbz	r0, 800d60c <uxr_serialize_CREATE_Payload+0xf4>
 800d5fe:	7a2b      	ldrb	r3, [r5, #8]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d012      	beq.n	800d62a <uxr_serialize_CREATE_Payload+0x112>
 800d604:	2b03      	cmp	r3, #3
 800d606:	d016      	beq.n	800d636 <uxr_serialize_CREATE_Payload+0x11e>
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d00e      	beq.n	800d62a <uxr_serialize_CREATE_Payload+0x112>
 800d60c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800d610:	4630      	mov	r0, r6
 800d612:	f7fd f9a9 	bl	800a968 <ucdr_serialize_int16_t>
 800d616:	4038      	ands	r0, r7
 800d618:	4004      	ands	r4, r0
 800d61a:	e7b3      	b.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d61c:	f105 0108 	add.w	r1, r5, #8
 800d620:	4630      	mov	r0, r6
 800d622:	f7ff fa9f 	bl	800cb64 <uxr_serialize_CLIENT_Representation>
 800d626:	4004      	ands	r4, r0
 800d628:	e7ac      	b.n	800d584 <uxr_serialize_CREATE_Payload+0x6c>
 800d62a:	68e9      	ldr	r1, [r5, #12]
 800d62c:	4630      	mov	r0, r6
 800d62e:	f002 fba9 	bl	800fd84 <ucdr_serialize_string>
 800d632:	4607      	mov	r7, r0
 800d634:	e7ea      	b.n	800d60c <uxr_serialize_CREATE_Payload+0xf4>
 800d636:	68ea      	ldr	r2, [r5, #12]
 800d638:	f105 0110 	add.w	r1, r5, #16
 800d63c:	4630      	mov	r0, r6
 800d63e:	f002 fb75 	bl	800fd2c <ucdr_serialize_sequence_uint8_t>
 800d642:	4607      	mov	r7, r0
 800d644:	e7e2      	b.n	800d60c <uxr_serialize_CREATE_Payload+0xf4>
 800d646:	bf00      	nop

0800d648 <uxr_deserialize_GET_INFO_Payload>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	2202      	movs	r2, #2
 800d64c:	4605      	mov	r5, r0
 800d64e:	460e      	mov	r6, r1
 800d650:	f002 fadc 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d654:	1cb1      	adds	r1, r6, #2
 800d656:	2202      	movs	r2, #2
 800d658:	4604      	mov	r4, r0
 800d65a:	4628      	mov	r0, r5
 800d65c:	f002 fad6 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d660:	1d31      	adds	r1, r6, #4
 800d662:	4004      	ands	r4, r0
 800d664:	4628      	mov	r0, r5
 800d666:	f7fc ff89 	bl	800a57c <ucdr_deserialize_uint32_t>
 800d66a:	b2e4      	uxtb	r4, r4
 800d66c:	4020      	ands	r0, r4
 800d66e:	bd70      	pop	{r4, r5, r6, pc}

0800d670 <uxr_serialize_DELETE_Payload>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	2202      	movs	r2, #2
 800d674:	4605      	mov	r5, r0
 800d676:	460e      	mov	r6, r1
 800d678:	f002 fa64 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d67c:	1cb1      	adds	r1, r6, #2
 800d67e:	4604      	mov	r4, r0
 800d680:	2202      	movs	r2, #2
 800d682:	4628      	mov	r0, r5
 800d684:	f002 fa5e 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d688:	4020      	ands	r0, r4
 800d68a:	b2c0      	uxtb	r0, r0
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
 800d68e:	bf00      	nop

0800d690 <uxr_deserialize_STATUS_AGENT_Payload>:
 800d690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d694:	4606      	mov	r6, r0
 800d696:	460f      	mov	r7, r1
 800d698:	f7fc fc40 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d69c:	1c79      	adds	r1, r7, #1
 800d69e:	4605      	mov	r5, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fc fc3b 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d6a6:	1d39      	adds	r1, r7, #4
 800d6a8:	4681      	mov	r9, r0
 800d6aa:	2204      	movs	r2, #4
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f002 faad 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d6b2:	f107 0108 	add.w	r1, r7, #8
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f002 faa6 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d6c0:	f107 010a 	add.w	r1, r7, #10
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f002 fa9f 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d6ce:	ea05 0509 	and.w	r5, r5, r9
 800d6d2:	b2ed      	uxtb	r5, r5
 800d6d4:	402c      	ands	r4, r5
 800d6d6:	f107 010c 	add.w	r1, r7, #12
 800d6da:	4605      	mov	r5, r0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7fc fbed 	bl	8009ebc <ucdr_deserialize_bool>
 800d6e2:	ea08 0404 	and.w	r4, r8, r4
 800d6e6:	4025      	ands	r5, r4
 800d6e8:	4028      	ands	r0, r5
 800d6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ee:	bf00      	nop

0800d6f0 <uxr_deserialize_STATUS_Payload>:
 800d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	f002 fa87 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d6fe:	2202      	movs	r2, #2
 800d700:	1cb9      	adds	r1, r7, #2
 800d702:	4605      	mov	r5, r0
 800d704:	4630      	mov	r0, r6
 800d706:	f002 fa81 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d70a:	1d39      	adds	r1, r7, #4
 800d70c:	4680      	mov	r8, r0
 800d70e:	4630      	mov	r0, r6
 800d710:	f7fc fc04 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d714:	1d79      	adds	r1, r7, #5
 800d716:	4604      	mov	r4, r0
 800d718:	4630      	mov	r0, r6
 800d71a:	f7fc fbff 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d71e:	ea05 0508 	and.w	r5, r5, r8
 800d722:	402c      	ands	r4, r5
 800d724:	4020      	ands	r0, r4
 800d726:	b2c0      	uxtb	r0, r0
 800d728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d72c <uxr_serialize_INFO_Payload>:
 800d72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d730:	2202      	movs	r2, #2
 800d732:	460c      	mov	r4, r1
 800d734:	4605      	mov	r5, r0
 800d736:	f002 fa05 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d73a:	2202      	movs	r2, #2
 800d73c:	4680      	mov	r8, r0
 800d73e:	1ca1      	adds	r1, r4, #2
 800d740:	4628      	mov	r0, r5
 800d742:	f002 f9ff 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d746:	7921      	ldrb	r1, [r4, #4]
 800d748:	4607      	mov	r7, r0
 800d74a:	4628      	mov	r0, r5
 800d74c:	f7fc fbd0 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d750:	7961      	ldrb	r1, [r4, #5]
 800d752:	4606      	mov	r6, r0
 800d754:	4628      	mov	r0, r5
 800d756:	f7fc fbcb 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d75a:	ea08 0807 	and.w	r8, r8, r7
 800d75e:	ea06 0608 	and.w	r6, r6, r8
 800d762:	4006      	ands	r6, r0
 800d764:	7a21      	ldrb	r1, [r4, #8]
 800d766:	4628      	mov	r0, r5
 800d768:	f7fc fb92 	bl	8009e90 <ucdr_serialize_bool>
 800d76c:	7a23      	ldrb	r3, [r4, #8]
 800d76e:	b2f7      	uxtb	r7, r6
 800d770:	4606      	mov	r6, r0
 800d772:	b96b      	cbnz	r3, 800d790 <uxr_serialize_INFO_Payload+0x64>
 800d774:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800d778:	4628      	mov	r0, r5
 800d77a:	f7fc fb89 	bl	8009e90 <ucdr_serialize_bool>
 800d77e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800d782:	4030      	ands	r0, r6
 800d784:	b2c6      	uxtb	r6, r0
 800d786:	b983      	cbnz	r3, 800d7aa <uxr_serialize_INFO_Payload+0x7e>
 800d788:	ea06 0007 	and.w	r0, r6, r7
 800d78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d790:	7b21      	ldrb	r1, [r4, #12]
 800d792:	4628      	mov	r0, r5
 800d794:	f7fc fbac 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d798:	b188      	cbz	r0, 800d7be <uxr_serialize_INFO_Payload+0x92>
 800d79a:	f104 010c 	add.w	r1, r4, #12
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7ff faf2 	bl	800cd88 <uxr_serialize_ObjectVariant.part.0>
 800d7a4:	4030      	ands	r0, r6
 800d7a6:	b2c6      	uxtb	r6, r0
 800d7a8:	e7e4      	b.n	800d774 <uxr_serialize_INFO_Payload+0x48>
 800d7aa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7ff fe24 	bl	800d3fc <uxr_serialize_ActivityInfoVariant>
 800d7b4:	4006      	ands	r6, r0
 800d7b6:	ea06 0007 	and.w	r0, r6, r7
 800d7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7be:	4606      	mov	r6, r0
 800d7c0:	e7d8      	b.n	800d774 <uxr_serialize_INFO_Payload+0x48>
 800d7c2:	bf00      	nop

0800d7c4 <uxr_serialize_READ_DATA_Payload>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460e      	mov	r6, r1
 800d7cc:	f002 f9ba 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d7d0:	1cb1      	adds	r1, r6, #2
 800d7d2:	2202      	movs	r2, #2
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f002 f9b4 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d7dc:	1d31      	adds	r1, r6, #4
 800d7de:	4004      	ands	r4, r0
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f7ff fe55 	bl	800d490 <uxr_serialize_ReadSpecification>
 800d7e6:	b2e4      	uxtb	r4, r4
 800d7e8:	4020      	ands	r0, r4
 800d7ea:	bd70      	pop	{r4, r5, r6, pc}

0800d7ec <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	460e      	mov	r6, r1
 800d7f4:	f002 f9a6 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d7f8:	1cb1      	adds	r1, r6, #2
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	4628      	mov	r0, r5
 800d800:	f002 f9a0 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d804:	4020      	ands	r0, r4
 800d806:	b2c0      	uxtb	r0, r0
 800d808:	bd70      	pop	{r4, r5, r6, pc}
 800d80a:	bf00      	nop

0800d80c <uxr_serialize_ACKNACK_Payload>:
 800d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80e:	460f      	mov	r7, r1
 800d810:	460e      	mov	r6, r1
 800d812:	f837 1b02 	ldrh.w	r1, [r7], #2
 800d816:	4605      	mov	r5, r0
 800d818:	f7fc fb96 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d81c:	4639      	mov	r1, r7
 800d81e:	2202      	movs	r2, #2
 800d820:	4604      	mov	r4, r0
 800d822:	4628      	mov	r0, r5
 800d824:	f002 f98e 	bl	800fb44 <ucdr_serialize_array_uint8_t>
 800d828:	7931      	ldrb	r1, [r6, #4]
 800d82a:	4004      	ands	r4, r0
 800d82c:	4628      	mov	r0, r5
 800d82e:	f7fc fb5f 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d832:	b2e4      	uxtb	r4, r4
 800d834:	4020      	ands	r0, r4
 800d836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d838 <uxr_deserialize_ACKNACK_Payload>:
 800d838:	b570      	push	{r4, r5, r6, lr}
 800d83a:	4605      	mov	r5, r0
 800d83c:	460e      	mov	r6, r1
 800d83e:	f7fc fc83 	bl	800a148 <ucdr_deserialize_uint16_t>
 800d842:	1cb1      	adds	r1, r6, #2
 800d844:	2202      	movs	r2, #2
 800d846:	4604      	mov	r4, r0
 800d848:	4628      	mov	r0, r5
 800d84a:	f002 f9df 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d84e:	1d31      	adds	r1, r6, #4
 800d850:	4004      	ands	r4, r0
 800d852:	4628      	mov	r0, r5
 800d854:	f7fc fb62 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d858:	b2e4      	uxtb	r4, r4
 800d85a:	4020      	ands	r0, r4
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	bf00      	nop

0800d860 <uxr_serialize_HEARTBEAT_Payload>:
 800d860:	b570      	push	{r4, r5, r6, lr}
 800d862:	460d      	mov	r5, r1
 800d864:	8809      	ldrh	r1, [r1, #0]
 800d866:	4606      	mov	r6, r0
 800d868:	f7fc fb6e 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d86c:	8869      	ldrh	r1, [r5, #2]
 800d86e:	4604      	mov	r4, r0
 800d870:	4630      	mov	r0, r6
 800d872:	f7fc fb69 	bl	8009f48 <ucdr_serialize_uint16_t>
 800d876:	7929      	ldrb	r1, [r5, #4]
 800d878:	4004      	ands	r4, r0
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fc fb38 	bl	8009ef0 <ucdr_serialize_uint8_t>
 800d880:	b2e4      	uxtb	r4, r4
 800d882:	4020      	ands	r0, r4
 800d884:	bd70      	pop	{r4, r5, r6, pc}
 800d886:	bf00      	nop

0800d888 <uxr_deserialize_HEARTBEAT_Payload>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	4605      	mov	r5, r0
 800d88c:	460e      	mov	r6, r1
 800d88e:	f7fc fc5b 	bl	800a148 <ucdr_deserialize_uint16_t>
 800d892:	1cb1      	adds	r1, r6, #2
 800d894:	4604      	mov	r4, r0
 800d896:	4628      	mov	r0, r5
 800d898:	f7fc fc56 	bl	800a148 <ucdr_deserialize_uint16_t>
 800d89c:	1d31      	adds	r1, r6, #4
 800d89e:	4004      	ands	r4, r0
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f7fc fb3b 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d8a6:	b2e4      	uxtb	r4, r4
 800d8a8:	4020      	ands	r0, r4
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}

0800d8ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	460e      	mov	r6, r1
 800d8b4:	f7fd f94c 	bl	800ab50 <ucdr_deserialize_int32_t>
 800d8b8:	1d31      	adds	r1, r6, #4
 800d8ba:	4607      	mov	r7, r0
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f7fc fe5d 	bl	800a57c <ucdr_deserialize_uint32_t>
 800d8c2:	f106 0108 	add.w	r1, r6, #8
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f7fd f941 	bl	800ab50 <ucdr_deserialize_int32_t>
 800d8ce:	f106 010c 	add.w	r1, r6, #12
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7fc fe51 	bl	800a57c <ucdr_deserialize_uint32_t>
 800d8da:	ea07 0708 	and.w	r7, r7, r8
 800d8de:	403c      	ands	r4, r7
 800d8e0:	f106 0110 	add.w	r1, r6, #16
 800d8e4:	4004      	ands	r4, r0
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7fd f932 	bl	800ab50 <ucdr_deserialize_int32_t>
 800d8ec:	f106 0114 	add.w	r1, r6, #20
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	461d      	mov	r5, r3
 800d8f6:	f7fc fe41 	bl	800a57c <ucdr_deserialize_uint32_t>
 800d8fa:	b2e4      	uxtb	r4, r4
 800d8fc:	402c      	ands	r4, r5
 800d8fe:	4020      	ands	r0, r4
 800d900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d904 <uxr_deserialize_SampleIdentity>:
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	220c      	movs	r2, #12
 800d90a:	4604      	mov	r4, r0
 800d90c:	460d      	mov	r5, r1
 800d90e:	f002 f97d 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d912:	2203      	movs	r2, #3
 800d914:	f105 010c 	add.w	r1, r5, #12
 800d918:	4607      	mov	r7, r0
 800d91a:	4620      	mov	r0, r4
 800d91c:	f002 f976 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 800d920:	f105 010f 	add.w	r1, r5, #15
 800d924:	4680      	mov	r8, r0
 800d926:	4620      	mov	r0, r4
 800d928:	f7fc faf8 	bl	8009f1c <ucdr_deserialize_uint8_t>
 800d92c:	f105 0110 	add.w	r1, r5, #16
 800d930:	4606      	mov	r6, r0
 800d932:	4620      	mov	r0, r4
 800d934:	f7fd f90c 	bl	800ab50 <ucdr_deserialize_int32_t>
 800d938:	f105 0114 	add.w	r1, r5, #20
 800d93c:	4603      	mov	r3, r0
 800d93e:	4620      	mov	r0, r4
 800d940:	ea07 0708 	and.w	r7, r7, r8
 800d944:	461c      	mov	r4, r3
 800d946:	f7fc fe19 	bl	800a57c <ucdr_deserialize_uint32_t>
 800d94a:	403e      	ands	r6, r7
 800d94c:	4034      	ands	r4, r6
 800d94e:	4020      	ands	r0, r4
 800d950:	b2c0      	uxtb	r0, r0
 800d952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d956:	bf00      	nop

0800d958 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d958:	280b      	cmp	r0, #11
 800d95a:	dc0d      	bgt.n	800d978 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	db09      	blt.n	800d974 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d960:	280b      	cmp	r0, #11
 800d962:	d807      	bhi.n	800d974 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d964:	e8df f000 	tbb	[pc, r0]
 800d968:	07060607 	.word	0x07060607
 800d96c:	06060606 	.word	0x06060606
 800d970:	07070606 	.word	0x07070606
 800d974:	2001      	movs	r0, #1
 800d976:	4770      	bx	lr
 800d978:	28cb      	cmp	r0, #203	@ 0xcb
 800d97a:	bf18      	it	ne
 800d97c:	2001      	movne	r0, #1
 800d97e:	4770      	bx	lr

0800d980 <rcl_get_zero_initialized_context>:
 800d980:	4a03      	ldr	r2, [pc, #12]	@ (800d990 <rcl_get_zero_initialized_context+0x10>)
 800d982:	4603      	mov	r3, r0
 800d984:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d988:	e883 0003 	stmia.w	r3, {r0, r1}
 800d98c:	4618      	mov	r0, r3
 800d98e:	4770      	bx	lr
 800d990:	08013190 	.word	0x08013190

0800d994 <rcl_context_is_valid>:
 800d994:	b118      	cbz	r0, 800d99e <rcl_context_is_valid+0xa>
 800d996:	6840      	ldr	r0, [r0, #4]
 800d998:	3800      	subs	r0, #0
 800d99a:	bf18      	it	ne
 800d99c:	2001      	movne	r0, #1
 800d99e:	4770      	bx	lr

0800d9a0 <__cleanup_context>:
 800d9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	6800      	ldr	r0, [r0, #0]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	6073      	str	r3, [r6, #4]
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d04d      	beq.n	800da4c <__cleanup_context+0xac>
 800d9b0:	6947      	ldr	r7, [r0, #20]
 800d9b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d9b6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d9ba:	b137      	cbz	r7, 800d9ca <__cleanup_context+0x2a>
 800d9bc:	3014      	adds	r0, #20
 800d9be:	f000 fb1d 	bl	800dffc <rcl_init_options_fini>
 800d9c2:	4607      	mov	r7, r0
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d148      	bne.n	800da5a <__cleanup_context+0xba>
 800d9c8:	6830      	ldr	r0, [r6, #0]
 800d9ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d9cc:	b143      	cbz	r3, 800d9e0 <__cleanup_context+0x40>
 800d9ce:	3028      	adds	r0, #40	@ 0x28
 800d9d0:	f001 fdd4 	bl	800f57c <rmw_context_fini>
 800d9d4:	b118      	cbz	r0, 800d9de <__cleanup_context+0x3e>
 800d9d6:	2f00      	cmp	r7, #0
 800d9d8:	d042      	beq.n	800da60 <__cleanup_context+0xc0>
 800d9da:	f7fb fbb5 	bl	8009148 <rcutils_reset_error>
 800d9de:	6830      	ldr	r0, [r6, #0]
 800d9e0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800d9e4:	f1bc 0f00 	cmp.w	ip, #0
 800d9e8:	d01c      	beq.n	800da24 <__cleanup_context+0x84>
 800d9ea:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d9ee:	2a01      	cmp	r2, #1
 800d9f0:	f173 0100 	sbcs.w	r1, r3, #0
 800d9f4:	db12      	blt.n	800da1c <__cleanup_context+0x7c>
 800d9f6:	2400      	movs	r4, #0
 800d9f8:	2500      	movs	r5, #0
 800d9fa:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800d9fe:	4649      	mov	r1, r9
 800da00:	b1c0      	cbz	r0, 800da34 <__cleanup_context+0x94>
 800da02:	47c0      	blx	r8
 800da04:	6831      	ldr	r1, [r6, #0]
 800da06:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800da0a:	3401      	adds	r4, #1
 800da0c:	f145 0500 	adc.w	r5, r5, #0
 800da10:	4294      	cmp	r4, r2
 800da12:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800da16:	eb75 0103 	sbcs.w	r1, r5, r3
 800da1a:	dbee      	blt.n	800d9fa <__cleanup_context+0x5a>
 800da1c:	4660      	mov	r0, ip
 800da1e:	4649      	mov	r1, r9
 800da20:	47c0      	blx	r8
 800da22:	6830      	ldr	r0, [r6, #0]
 800da24:	4649      	mov	r1, r9
 800da26:	47c0      	blx	r8
 800da28:	2300      	movs	r3, #0
 800da2a:	e9c6 3300 	strd	r3, r3, [r6]
 800da2e:	4638      	mov	r0, r7
 800da30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da34:	3401      	adds	r4, #1
 800da36:	f145 0500 	adc.w	r5, r5, #0
 800da3a:	4294      	cmp	r4, r2
 800da3c:	eb75 0103 	sbcs.w	r1, r5, r3
 800da40:	dbdb      	blt.n	800d9fa <__cleanup_context+0x5a>
 800da42:	4660      	mov	r0, ip
 800da44:	4649      	mov	r1, r9
 800da46:	47c0      	blx	r8
 800da48:	6830      	ldr	r0, [r6, #0]
 800da4a:	e7eb      	b.n	800da24 <__cleanup_context+0x84>
 800da4c:	4607      	mov	r7, r0
 800da4e:	2300      	movs	r3, #0
 800da50:	e9c6 3300 	strd	r3, r3, [r6]
 800da54:	4638      	mov	r0, r7
 800da56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da5a:	f7fb fb75 	bl	8009148 <rcutils_reset_error>
 800da5e:	e7b3      	b.n	800d9c8 <__cleanup_context+0x28>
 800da60:	f7ff ff7a 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800da64:	4607      	mov	r7, r0
 800da66:	e7b8      	b.n	800d9da <__cleanup_context+0x3a>

0800da68 <rcl_expand_topic_name>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	b08b      	sub	sp, #44	@ 0x2c
 800da6e:	9306      	str	r3, [sp, #24]
 800da70:	2800      	cmp	r0, #0
 800da72:	f000 80d2 	beq.w	800dc1a <rcl_expand_topic_name+0x1b2>
 800da76:	460e      	mov	r6, r1
 800da78:	2900      	cmp	r1, #0
 800da7a:	f000 80ce 	beq.w	800dc1a <rcl_expand_topic_name+0x1b2>
 800da7e:	4617      	mov	r7, r2
 800da80:	2a00      	cmp	r2, #0
 800da82:	f000 80ca 	beq.w	800dc1a <rcl_expand_topic_name+0x1b2>
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80c7 	beq.w	800dc1a <rcl_expand_topic_name+0x1b2>
 800da8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 80c3 	beq.w	800dc1a <rcl_expand_topic_name+0x1b2>
 800da94:	a909      	add	r1, sp, #36	@ 0x24
 800da96:	2200      	movs	r2, #0
 800da98:	4680      	mov	r8, r0
 800da9a:	f000 ff67 	bl	800e96c <rcl_validate_topic_name>
 800da9e:	4604      	mov	r4, r0
 800daa0:	2800      	cmp	r0, #0
 800daa2:	f040 80b6 	bne.w	800dc12 <rcl_expand_topic_name+0x1aa>
 800daa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f040 80bf 	bne.w	800dc2c <rcl_expand_topic_name+0x1c4>
 800daae:	4602      	mov	r2, r0
 800dab0:	a909      	add	r1, sp, #36	@ 0x24
 800dab2:	4630      	mov	r0, r6
 800dab4:	f001 fac8 	bl	800f048 <rmw_validate_node_name>
 800dab8:	2800      	cmp	r0, #0
 800daba:	f040 80b3 	bne.w	800dc24 <rcl_expand_topic_name+0x1bc>
 800dabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dac0:	2a00      	cmp	r2, #0
 800dac2:	f040 80b8 	bne.w	800dc36 <rcl_expand_topic_name+0x1ce>
 800dac6:	a909      	add	r1, sp, #36	@ 0x24
 800dac8:	4638      	mov	r0, r7
 800daca:	f001 fa9f 	bl	800f00c <rmw_validate_namespace>
 800dace:	2800      	cmp	r0, #0
 800dad0:	f040 80a8 	bne.w	800dc24 <rcl_expand_topic_name+0x1bc>
 800dad4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dad6:	2c00      	cmp	r4, #0
 800dad8:	f040 80f6 	bne.w	800dcc8 <rcl_expand_topic_name+0x260>
 800dadc:	217b      	movs	r1, #123	@ 0x7b
 800dade:	4640      	mov	r0, r8
 800dae0:	f004 fac0 	bl	8012064 <strchr>
 800dae4:	f898 3000 	ldrb.w	r3, [r8]
 800dae8:	2b2f      	cmp	r3, #47	@ 0x2f
 800daea:	4605      	mov	r5, r0
 800daec:	f000 80c4 	beq.w	800dc78 <rcl_expand_topic_name+0x210>
 800daf0:	2b7e      	cmp	r3, #126	@ 0x7e
 800daf2:	d16f      	bne.n	800dbd4 <rcl_expand_topic_name+0x16c>
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7f2 fb7d 	bl	80001f4 <strlen>
 800dafa:	4b87      	ldr	r3, [pc, #540]	@ (800dd18 <rcl_expand_topic_name+0x2b0>)
 800dafc:	4987      	ldr	r1, [pc, #540]	@ (800dd1c <rcl_expand_topic_name+0x2b4>)
 800dafe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800db00:	9604      	str	r6, [sp, #16]
 800db02:	2801      	cmp	r0, #1
 800db04:	bf0c      	ite	eq
 800db06:	4618      	moveq	r0, r3
 800db08:	4608      	movne	r0, r1
 800db0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db0e:	e9cd 2300 	strd	r2, r3, [sp]
 800db12:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800db16:	f108 0101 	add.w	r1, r8, #1
 800db1a:	9105      	str	r1, [sp, #20]
 800db1c:	ab14      	add	r3, sp, #80	@ 0x50
 800db1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db20:	f001 f852 	bl	800ebc8 <rcutils_format_string_limit>
 800db24:	4682      	mov	sl, r0
 800db26:	2800      	cmp	r0, #0
 800db28:	f000 80d0 	beq.w	800dccc <rcl_expand_topic_name+0x264>
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	f000 80aa 	beq.w	800dc86 <rcl_expand_topic_name+0x21e>
 800db32:	217b      	movs	r1, #123	@ 0x7b
 800db34:	f004 fa96 	bl	8012064 <strchr>
 800db38:	46d1      	mov	r9, sl
 800db3a:	4605      	mov	r5, r0
 800db3c:	9407      	str	r4, [sp, #28]
 800db3e:	46d3      	mov	fp, sl
 800db40:	464c      	mov	r4, r9
 800db42:	2d00      	cmp	r5, #0
 800db44:	f000 80c7 	beq.w	800dcd6 <rcl_expand_topic_name+0x26e>
 800db48:	217d      	movs	r1, #125	@ 0x7d
 800db4a:	4620      	mov	r0, r4
 800db4c:	f004 fa8a 	bl	8012064 <strchr>
 800db50:	eba0 0905 	sub.w	r9, r0, r5
 800db54:	f109 0a01 	add.w	sl, r9, #1
 800db58:	4871      	ldr	r0, [pc, #452]	@ (800dd20 <rcl_expand_topic_name+0x2b8>)
 800db5a:	4652      	mov	r2, sl
 800db5c:	4629      	mov	r1, r5
 800db5e:	f004 fa8e 	bl	801207e <strncmp>
 800db62:	2800      	cmp	r0, #0
 800db64:	f000 808d 	beq.w	800dc82 <rcl_expand_topic_name+0x21a>
 800db68:	486e      	ldr	r0, [pc, #440]	@ (800dd24 <rcl_expand_topic_name+0x2bc>)
 800db6a:	4652      	mov	r2, sl
 800db6c:	4629      	mov	r1, r5
 800db6e:	f004 fa86 	bl	801207e <strncmp>
 800db72:	b130      	cbz	r0, 800db82 <rcl_expand_topic_name+0x11a>
 800db74:	486c      	ldr	r0, [pc, #432]	@ (800dd28 <rcl_expand_topic_name+0x2c0>)
 800db76:	4652      	mov	r2, sl
 800db78:	4629      	mov	r1, r5
 800db7a:	f004 fa80 	bl	801207e <strncmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d15b      	bne.n	800dc3a <rcl_expand_topic_name+0x1d2>
 800db82:	46b9      	mov	r9, r7
 800db84:	ab16      	add	r3, sp, #88	@ 0x58
 800db86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db8a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800db8e:	ab14      	add	r3, sp, #80	@ 0x50
 800db90:	4628      	mov	r0, r5
 800db92:	cb0c      	ldmia	r3, {r2, r3}
 800db94:	4651      	mov	r1, sl
 800db96:	f001 f963 	bl	800ee60 <rcutils_strndup>
 800db9a:	4605      	mov	r5, r0
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f000 80a4 	beq.w	800dcea <rcl_expand_topic_name+0x282>
 800dba2:	464a      	mov	r2, r9
 800dba4:	4620      	mov	r0, r4
 800dba6:	ab14      	add	r3, sp, #80	@ 0x50
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f001 f85f 	bl	800ec6c <rcutils_repl_str>
 800dbae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbb0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	4798      	blx	r3
 800dbb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dbba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dbbc:	4658      	mov	r0, fp
 800dbbe:	4798      	blx	r3
 800dbc0:	2c00      	cmp	r4, #0
 800dbc2:	f000 8083 	beq.w	800dccc <rcl_expand_topic_name+0x264>
 800dbc6:	217b      	movs	r1, #123	@ 0x7b
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f004 fa4b 	bl	8012064 <strchr>
 800dbce:	46a3      	mov	fp, r4
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	e7b6      	b.n	800db42 <rcl_expand_topic_name+0xda>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d151      	bne.n	800dc7c <rcl_expand_topic_name+0x214>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7f2 fb0b 	bl	80001f4 <strlen>
 800dbde:	4b53      	ldr	r3, [pc, #332]	@ (800dd2c <rcl_expand_topic_name+0x2c4>)
 800dbe0:	4a53      	ldr	r2, [pc, #332]	@ (800dd30 <rcl_expand_topic_name+0x2c8>)
 800dbe2:	f8cd 8010 	str.w	r8, [sp, #16]
 800dbe6:	2801      	cmp	r0, #1
 800dbe8:	bf0c      	ite	eq
 800dbea:	4618      	moveq	r0, r3
 800dbec:	4610      	movne	r0, r2
 800dbee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800dbf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbf4:	e9cd 3200 	strd	r3, r2, [sp]
 800dbf8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800dbfc:	ab14      	add	r3, sp, #80	@ 0x50
 800dbfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc00:	f000 ffe2 	bl	800ebc8 <rcutils_format_string_limit>
 800dc04:	4682      	mov	sl, r0
 800dc06:	4653      	mov	r3, sl
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d05f      	beq.n	800dccc <rcl_expand_topic_name+0x264>
 800dc0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc0e:	f8c3 a000 	str.w	sl, [r3]
 800dc12:	4620      	mov	r0, r4
 800dc14:	b00b      	add	sp, #44	@ 0x2c
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1a:	240b      	movs	r4, #11
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	b00b      	add	sp, #44	@ 0x2c
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	f7ff fe98 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	e7f2      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dc2c:	2467      	movs	r4, #103	@ 0x67
 800dc2e:	4620      	mov	r0, r4
 800dc30:	b00b      	add	sp, #44	@ 0x2c
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	24c9      	movs	r4, #201	@ 0xc9
 800dc38:	e7eb      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dc3a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800dc3e:	9806      	ldr	r0, [sp, #24]
 800dc40:	1c69      	adds	r1, r5, #1
 800dc42:	f7fb fb97 	bl	8009374 <rcutils_string_map_getn>
 800dc46:	4681      	mov	r9, r0
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d19b      	bne.n	800db84 <rcl_expand_topic_name+0x11c>
 800dc4c:	aa16      	add	r2, sp, #88	@ 0x58
 800dc4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc52:	f8c3 9000 	str.w	r9, [r3]
 800dc56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dc5a:	ab14      	add	r3, sp, #80	@ 0x50
 800dc5c:	cb0c      	ldmia	r3, {r2, r3}
 800dc5e:	4651      	mov	r1, sl
 800dc60:	4628      	mov	r0, r5
 800dc62:	f001 f8fd 	bl	800ee60 <rcutils_strndup>
 800dc66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dc68:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dc6a:	4798      	blx	r3
 800dc6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dc6e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dc70:	4658      	mov	r0, fp
 800dc72:	4798      	blx	r3
 800dc74:	2469      	movs	r4, #105	@ 0x69
 800dc76:	e7cc      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d03e      	beq.n	800dcfa <rcl_expand_topic_name+0x292>
 800dc7c:	46c1      	mov	r9, r8
 800dc7e:	46a2      	mov	sl, r4
 800dc80:	e75c      	b.n	800db3c <rcl_expand_topic_name+0xd4>
 800dc82:	46b1      	mov	r9, r6
 800dc84:	e77e      	b.n	800db84 <rcl_expand_topic_name+0x11c>
 800dc86:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8a:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc8c:	d0be      	beq.n	800dc0c <rcl_expand_topic_name+0x1a4>
 800dc8e:	4638      	mov	r0, r7
 800dc90:	f7f2 fab0 	bl	80001f4 <strlen>
 800dc94:	4b25      	ldr	r3, [pc, #148]	@ (800dd2c <rcl_expand_topic_name+0x2c4>)
 800dc96:	4926      	ldr	r1, [pc, #152]	@ (800dd30 <rcl_expand_topic_name+0x2c8>)
 800dc98:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800dc9a:	f8cd a010 	str.w	sl, [sp, #16]
 800dc9e:	2801      	cmp	r0, #1
 800dca0:	bf0c      	ite	eq
 800dca2:	4618      	moveq	r0, r3
 800dca4:	4608      	movne	r0, r1
 800dca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dcaa:	e9cd 2300 	strd	r2, r3, [sp]
 800dcae:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800dcb2:	ab14      	add	r3, sp, #80	@ 0x50
 800dcb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcb6:	f000 ff87 	bl	800ebc8 <rcutils_format_string_limit>
 800dcba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800dcbc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	4650      	mov	r0, sl
 800dcc2:	469a      	mov	sl, r3
 800dcc4:	4790      	blx	r2
 800dcc6:	e79e      	b.n	800dc06 <rcl_expand_topic_name+0x19e>
 800dcc8:	24ca      	movs	r4, #202	@ 0xca
 800dcca:	e7a2      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dccc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcce:	2300      	movs	r3, #0
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	240a      	movs	r4, #10
 800dcd4:	e79d      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dcd6:	465b      	mov	r3, fp
 800dcd8:	9c07      	ldr	r4, [sp, #28]
 800dcda:	46da      	mov	sl, fp
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1d2      	bne.n	800dc86 <rcl_expand_topic_name+0x21e>
 800dce0:	f898 3000 	ldrb.w	r3, [r8]
 800dce4:	2b2f      	cmp	r3, #47	@ 0x2f
 800dce6:	d091      	beq.n	800dc0c <rcl_expand_topic_name+0x1a4>
 800dce8:	e776      	b.n	800dbd8 <rcl_expand_topic_name+0x170>
 800dcea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800dcee:	601d      	str	r5, [r3, #0]
 800dcf0:	4658      	mov	r0, fp
 800dcf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dcf4:	4798      	blx	r3
 800dcf6:	240a      	movs	r4, #10
 800dcf8:	e78b      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dcfa:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 800dcfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dd02:	ab14      	add	r3, sp, #80	@ 0x50
 800dd04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd06:	4640      	mov	r0, r8
 800dd08:	f001 f888 	bl	800ee1c <rcutils_strdup>
 800dd0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	bf08      	it	eq
 800dd12:	240a      	moveq	r4, #10
 800dd14:	6018      	str	r0, [r3, #0]
 800dd16:	e77c      	b.n	800dc12 <rcl_expand_topic_name+0x1aa>
 800dd18:	08013158 	.word	0x08013158
 800dd1c:	08013198 	.word	0x08013198
 800dd20:	080131a8 	.word	0x080131a8
 800dd24:	080131b0 	.word	0x080131b0
 800dd28:	080131b8 	.word	0x080131b8
 800dd2c:	08013168 	.word	0x08013168
 800dd30:	080131a0 	.word	0x080131a0

0800dd34 <rcl_get_default_topic_name_substitutions>:
 800dd34:	2800      	cmp	r0, #0
 800dd36:	bf0c      	ite	eq
 800dd38:	200b      	moveq	r0, #11
 800dd3a:	2000      	movne	r0, #0
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop

0800dd40 <rcl_init>:
 800dd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd44:	1e07      	subs	r7, r0, #0
 800dd46:	b09f      	sub	sp, #124	@ 0x7c
 800dd48:	4688      	mov	r8, r1
 800dd4a:	4692      	mov	sl, r2
 800dd4c:	4699      	mov	r9, r3
 800dd4e:	f340 8097 	ble.w	800de80 <rcl_init+0x140>
 800dd52:	2900      	cmp	r1, #0
 800dd54:	f000 8097 	beq.w	800de86 <rcl_init+0x146>
 800dd58:	1f0d      	subs	r5, r1, #4
 800dd5a:	2400      	movs	r4, #0
 800dd5c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800dd60:	3401      	adds	r4, #1
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	f000 808f 	beq.w	800de86 <rcl_init+0x146>
 800dd68:	42a7      	cmp	r7, r4
 800dd6a:	d1f7      	bne.n	800dd5c <rcl_init+0x1c>
 800dd6c:	f1ba 0f00 	cmp.w	sl, #0
 800dd70:	f000 8089 	beq.w	800de86 <rcl_init+0x146>
 800dd74:	f8da 4000 	ldr.w	r4, [sl]
 800dd78:	2c00      	cmp	r4, #0
 800dd7a:	f000 8084 	beq.w	800de86 <rcl_init+0x146>
 800dd7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd80:	ad19      	add	r5, sp, #100	@ 0x64
 800dd82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	a819      	add	r0, sp, #100	@ 0x64
 800dd8a:	f7fb f9b9 	bl	8009100 <rcutils_allocator_is_valid>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d079      	beq.n	800de86 <rcl_init+0x146>
 800dd92:	f1b9 0f00 	cmp.w	r9, #0
 800dd96:	d076      	beq.n	800de86 <rcl_init+0x146>
 800dd98:	f8d9 3000 	ldr.w	r3, [r9]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d177      	bne.n	800de90 <rcl_init+0x150>
 800dda0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800dda4:	2178      	movs	r1, #120	@ 0x78
 800dda6:	2001      	movs	r0, #1
 800dda8:	4798      	blx	r3
 800ddaa:	4604      	mov	r4, r0
 800ddac:	f8c9 0000 	str.w	r0, [r9]
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	f000 80ba 	beq.w	800df2a <rcl_init+0x1ea>
 800ddb6:	a802      	add	r0, sp, #8
 800ddb8:	f001 f8be 	bl	800ef38 <rmw_get_zero_initialized_context>
 800ddbc:	a902      	add	r1, sp, #8
 800ddbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ddc2:	2250      	movs	r2, #80	@ 0x50
 800ddc4:	ac19      	add	r4, sp, #100	@ 0x64
 800ddc6:	f004 fa0e 	bl	80121e6 <memcpy>
 800ddca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddcc:	f8d9 5000 	ldr.w	r5, [r9]
 800ddd0:	6826      	ldr	r6, [r4, #0]
 800ddd2:	462c      	mov	r4, r5
 800ddd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddd6:	f105 0114 	add.w	r1, r5, #20
 800ddda:	6026      	str	r6, [r4, #0]
 800dddc:	4650      	mov	r0, sl
 800ddde:	f000 f931 	bl	800e044 <rcl_init_options_copy>
 800dde2:	4606      	mov	r6, r0
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d144      	bne.n	800de72 <rcl_init+0x132>
 800dde8:	f8d9 a000 	ldr.w	sl, [r9]
 800ddec:	463c      	mov	r4, r7
 800ddee:	17fd      	asrs	r5, r7, #31
 800ddf0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800ddf4:	f8ca 0020 	str.w	r0, [sl, #32]
 800ddf8:	2f00      	cmp	r7, #0
 800ddfa:	d050      	beq.n	800de9e <rcl_init+0x15e>
 800ddfc:	f1b8 0f00 	cmp.w	r8, #0
 800de00:	d04d      	beq.n	800de9e <rcl_init+0x15e>
 800de02:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800de06:	4638      	mov	r0, r7
 800de08:	2104      	movs	r1, #4
 800de0a:	4798      	blx	r3
 800de0c:	f8ca 0020 	str.w	r0, [sl, #32]
 800de10:	f8d9 a000 	ldr.w	sl, [r9]
 800de14:	f8da 3020 	ldr.w	r3, [sl, #32]
 800de18:	46d3      	mov	fp, sl
 800de1a:	b34b      	cbz	r3, 800de70 <rcl_init+0x130>
 800de1c:	2f01      	cmp	r7, #1
 800de1e:	f175 0300 	sbcs.w	r3, r5, #0
 800de22:	db3c      	blt.n	800de9e <rcl_init+0x15e>
 800de24:	f1a8 0804 	sub.w	r8, r8, #4
 800de28:	2600      	movs	r6, #0
 800de2a:	2700      	movs	r7, #0
 800de2c:	e00c      	b.n	800de48 <rcl_init+0x108>
 800de2e:	f8d8 1000 	ldr.w	r1, [r8]
 800de32:	f004 f9d8 	bl	80121e6 <memcpy>
 800de36:	3601      	adds	r6, #1
 800de38:	f147 0700 	adc.w	r7, r7, #0
 800de3c:	42bd      	cmp	r5, r7
 800de3e:	bf08      	it	eq
 800de40:	42b4      	cmpeq	r4, r6
 800de42:	d02a      	beq.n	800de9a <rcl_init+0x15a>
 800de44:	f8d9 b000 	ldr.w	fp, [r9]
 800de48:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800de4c:	f7f2 f9d2 	bl	80001f4 <strlen>
 800de50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de52:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800de54:	f8db a020 	ldr.w	sl, [fp, #32]
 800de58:	9001      	str	r0, [sp, #4]
 800de5a:	4798      	blx	r3
 800de5c:	f8d9 1000 	ldr.w	r1, [r9]
 800de60:	9a01      	ldr	r2, [sp, #4]
 800de62:	6a09      	ldr	r1, [r1, #32]
 800de64:	00b3      	lsls	r3, r6, #2
 800de66:	f84a 0003 	str.w	r0, [sl, r3]
 800de6a:	58c8      	ldr	r0, [r1, r3]
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d1de      	bne.n	800de2e <rcl_init+0xee>
 800de70:	260a      	movs	r6, #10
 800de72:	4648      	mov	r0, r9
 800de74:	f7ff fd94 	bl	800d9a0 <__cleanup_context>
 800de78:	4630      	mov	r0, r6
 800de7a:	b01f      	add	sp, #124	@ 0x7c
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	2900      	cmp	r1, #0
 800de82:	f43f af73 	beq.w	800dd6c <rcl_init+0x2c>
 800de86:	260b      	movs	r6, #11
 800de88:	4630      	mov	r0, r6
 800de8a:	b01f      	add	sp, #124	@ 0x7c
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	2664      	movs	r6, #100	@ 0x64
 800de92:	4630      	mov	r0, r6
 800de94:	b01f      	add	sp, #124	@ 0x7c
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	f8d9 a000 	ldr.w	sl, [r9]
 800de9e:	4a2c      	ldr	r2, [pc, #176]	@ (800df50 <rcl_init+0x210>)
 800dea0:	6813      	ldr	r3, [r2, #0]
 800dea2:	3301      	adds	r3, #1
 800dea4:	d03b      	beq.n	800df1e <rcl_init+0x1de>
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	4619      	mov	r1, r3
 800deaa:	2000      	movs	r0, #0
 800deac:	f8da 4014 	ldr.w	r4, [sl, #20]
 800deb0:	f8c9 3004 	str.w	r3, [r9, #4]
 800deb4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800deb6:	3301      	adds	r3, #1
 800deb8:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800debc:	d039      	beq.n	800df32 <rcl_init+0x1f2>
 800debe:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800dec2:	b94b      	cbnz	r3, 800ded8 <rcl_init+0x198>
 800dec4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800dec8:	f000 f962 	bl	800e190 <rcl_get_localhost_only>
 800decc:	4606      	mov	r6, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	d1cf      	bne.n	800de72 <rcl_init+0x132>
 800ded2:	f8d9 3000 	ldr.w	r3, [r9]
 800ded6:	695c      	ldr	r4, [r3, #20]
 800ded8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800deda:	aa18      	add	r2, sp, #96	@ 0x60
 800dedc:	a917      	add	r1, sp, #92	@ 0x5c
 800dede:	f000 fd33 	bl	800e948 <rcl_validate_enclave_name>
 800dee2:	4606      	mov	r6, r0
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d1c4      	bne.n	800de72 <rcl_init+0x132>
 800dee8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800deea:	bb03      	cbnz	r3, 800df2e <rcl_init+0x1ee>
 800deec:	f8d9 1000 	ldr.w	r1, [r9]
 800def0:	694b      	ldr	r3, [r1, #20]
 800def2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800def4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800def8:	f000 fbf2 	bl	800e6e0 <rcl_get_security_options_from_environment>
 800defc:	4606      	mov	r6, r0
 800defe:	2800      	cmp	r0, #0
 800df00:	d1b7      	bne.n	800de72 <rcl_init+0x132>
 800df02:	f8d9 1000 	ldr.w	r1, [r9]
 800df06:	6948      	ldr	r0, [r1, #20]
 800df08:	3128      	adds	r1, #40	@ 0x28
 800df0a:	3018      	adds	r0, #24
 800df0c:	f001 f9fe 	bl	800f30c <rmw_init>
 800df10:	4606      	mov	r6, r0
 800df12:	2800      	cmp	r0, #0
 800df14:	d0b8      	beq.n	800de88 <rcl_init+0x148>
 800df16:	f7ff fd1f 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800df1a:	4606      	mov	r6, r0
 800df1c:	e7a9      	b.n	800de72 <rcl_init+0x132>
 800df1e:	2401      	movs	r4, #1
 800df20:	4618      	mov	r0, r3
 800df22:	4621      	mov	r1, r4
 800df24:	6014      	str	r4, [r2, #0]
 800df26:	4623      	mov	r3, r4
 800df28:	e7c0      	b.n	800deac <rcl_init+0x16c>
 800df2a:	260a      	movs	r6, #10
 800df2c:	e7ac      	b.n	800de88 <rcl_init+0x148>
 800df2e:	2601      	movs	r6, #1
 800df30:	e79f      	b.n	800de72 <rcl_init+0x132>
 800df32:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800df36:	f003 fab9 	bl	80114ac <rcl_get_default_domain_id>
 800df3a:	4606      	mov	r6, r0
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d198      	bne.n	800de72 <rcl_init+0x132>
 800df40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800df42:	3301      	adds	r3, #1
 800df44:	f8d9 3000 	ldr.w	r3, [r9]
 800df48:	bf08      	it	eq
 800df4a:	6260      	streq	r0, [r4, #36]	@ 0x24
 800df4c:	695c      	ldr	r4, [r3, #20]
 800df4e:	e7b6      	b.n	800debe <rcl_init+0x17e>
 800df50:	200091e8 	.word	0x200091e8

0800df54 <rcl_get_zero_initialized_init_options>:
 800df54:	2000      	movs	r0, #0
 800df56:	4770      	bx	lr

0800df58 <rcl_init_options_init>:
 800df58:	b084      	sub	sp, #16
 800df5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df5c:	b091      	sub	sp, #68	@ 0x44
 800df5e:	af17      	add	r7, sp, #92	@ 0x5c
 800df60:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800df64:	2800      	cmp	r0, #0
 800df66:	d044      	beq.n	800dff2 <rcl_init_options_init+0x9a>
 800df68:	6803      	ldr	r3, [r0, #0]
 800df6a:	4606      	mov	r6, r0
 800df6c:	b133      	cbz	r3, 800df7c <rcl_init_options_init+0x24>
 800df6e:	2464      	movs	r4, #100	@ 0x64
 800df70:	4620      	mov	r0, r4
 800df72:	b011      	add	sp, #68	@ 0x44
 800df74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df78:	b004      	add	sp, #16
 800df7a:	4770      	bx	lr
 800df7c:	4638      	mov	r0, r7
 800df7e:	f7fb f8bf 	bl	8009100 <rcutils_allocator_is_valid>
 800df82:	2800      	cmp	r0, #0
 800df84:	d035      	beq.n	800dff2 <rcl_init_options_init+0x9a>
 800df86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800df88:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800df8a:	2050      	movs	r0, #80	@ 0x50
 800df8c:	4798      	blx	r3
 800df8e:	4604      	mov	r4, r0
 800df90:	6030      	str	r0, [r6, #0]
 800df92:	2800      	cmp	r0, #0
 800df94:	d02f      	beq.n	800dff6 <rcl_init_options_init+0x9e>
 800df96:	46bc      	mov	ip, r7
 800df98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df9c:	4625      	mov	r5, r4
 800df9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfa0:	f8dc 3000 	ldr.w	r3, [ip]
 800dfa4:	602b      	str	r3, [r5, #0]
 800dfa6:	a802      	add	r0, sp, #8
 800dfa8:	ad02      	add	r5, sp, #8
 800dfaa:	f000 ffcd 	bl	800ef48 <rmw_get_zero_initialized_init_options>
 800dfae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfb0:	3418      	adds	r4, #24
 800dfb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dfc0:	6833      	ldr	r3, [r6, #0]
 800dfc2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dfc6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800dfca:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dfce:	f103 0018 	add.w	r0, r3, #24
 800dfd2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dfd6:	f001 f8bf 	bl	800f158 <rmw_init_options_init>
 800dfda:	4604      	mov	r4, r0
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d0c7      	beq.n	800df70 <rcl_init_options_init+0x18>
 800dfe0:	6830      	ldr	r0, [r6, #0]
 800dfe2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800dfe4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800dfe6:	4798      	blx	r3
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7ff fcb5 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800dfee:	4604      	mov	r4, r0
 800dff0:	e7be      	b.n	800df70 <rcl_init_options_init+0x18>
 800dff2:	240b      	movs	r4, #11
 800dff4:	e7bc      	b.n	800df70 <rcl_init_options_init+0x18>
 800dff6:	240a      	movs	r4, #10
 800dff8:	e7ba      	b.n	800df70 <rcl_init_options_init+0x18>
 800dffa:	bf00      	nop

0800dffc <rcl_init_options_fini>:
 800dffc:	b570      	push	{r4, r5, r6, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	b1c0      	cbz	r0, 800e034 <rcl_init_options_fini+0x38>
 800e002:	6804      	ldr	r4, [r0, #0]
 800e004:	4606      	mov	r6, r0
 800e006:	b1ac      	cbz	r4, 800e034 <rcl_init_options_fini+0x38>
 800e008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e00a:	ad01      	add	r5, sp, #4
 800e00c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	a801      	add	r0, sp, #4
 800e014:	f7fb f874 	bl	8009100 <rcutils_allocator_is_valid>
 800e018:	b160      	cbz	r0, 800e034 <rcl_init_options_fini+0x38>
 800e01a:	6830      	ldr	r0, [r6, #0]
 800e01c:	3018      	adds	r0, #24
 800e01e:	f001 f935 	bl	800f28c <rmw_init_options_fini>
 800e022:	4604      	mov	r4, r0
 800e024:	b950      	cbnz	r0, 800e03c <rcl_init_options_fini+0x40>
 800e026:	6830      	ldr	r0, [r6, #0]
 800e028:	9b02      	ldr	r3, [sp, #8]
 800e02a:	9905      	ldr	r1, [sp, #20]
 800e02c:	4798      	blx	r3
 800e02e:	4620      	mov	r0, r4
 800e030:	b006      	add	sp, #24
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	240b      	movs	r4, #11
 800e036:	4620      	mov	r0, r4
 800e038:	b006      	add	sp, #24
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	f7ff fc8c 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800e040:	4604      	mov	r4, r0
 800e042:	e7f8      	b.n	800e036 <rcl_init_options_fini+0x3a>

0800e044 <rcl_init_options_copy>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	b096      	sub	sp, #88	@ 0x58
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d063      	beq.n	800e116 <rcl_init_options_copy+0xd2>
 800e04e:	6806      	ldr	r6, [r0, #0]
 800e050:	4605      	mov	r5, r0
 800e052:	2e00      	cmp	r6, #0
 800e054:	d05f      	beq.n	800e116 <rcl_init_options_copy+0xd2>
 800e056:	460c      	mov	r4, r1
 800e058:	2900      	cmp	r1, #0
 800e05a:	d05c      	beq.n	800e116 <rcl_init_options_copy+0xd2>
 800e05c:	680b      	ldr	r3, [r1, #0]
 800e05e:	b123      	cbz	r3, 800e06a <rcl_init_options_copy+0x26>
 800e060:	2664      	movs	r6, #100	@ 0x64
 800e062:	4630      	mov	r0, r6
 800e064:	b016      	add	sp, #88	@ 0x58
 800e066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e06a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e06c:	af11      	add	r7, sp, #68	@ 0x44
 800e06e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e070:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800e074:	6833      	ldr	r3, [r6, #0]
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	4640      	mov	r0, r8
 800e07a:	f7fb f841 	bl	8009100 <rcutils_allocator_is_valid>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d049      	beq.n	800e116 <rcl_init_options_copy+0xd2>
 800e082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e084:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800e086:	2050      	movs	r0, #80	@ 0x50
 800e088:	4798      	blx	r3
 800e08a:	4606      	mov	r6, r0
 800e08c:	6020      	str	r0, [r4, #0]
 800e08e:	2800      	cmp	r0, #0
 800e090:	d077      	beq.n	800e182 <rcl_init_options_copy+0x13e>
 800e092:	46c4      	mov	ip, r8
 800e094:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e098:	4637      	mov	r7, r6
 800e09a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e09c:	f8dc 3000 	ldr.w	r3, [ip]
 800e0a0:	603b      	str	r3, [r7, #0]
 800e0a2:	a802      	add	r0, sp, #8
 800e0a4:	af02      	add	r7, sp, #8
 800e0a6:	f000 ff4f 	bl	800ef48 <rmw_get_zero_initialized_init_options>
 800e0aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0ac:	3618      	adds	r6, #24
 800e0ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e0bc:	ab16      	add	r3, sp, #88	@ 0x58
 800e0be:	e886 0003 	stmia.w	r6, {r0, r1}
 800e0c2:	e913 0003 	ldmdb	r3, {r0, r1}
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e0cc:	f103 0018 	add.w	r0, r3, #24
 800e0d0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e0d4:	f001 f840 	bl	800f158 <rmw_init_options_init>
 800e0d8:	4606      	mov	r6, r0
 800e0da:	bb08      	cbnz	r0, 800e120 <rcl_init_options_copy+0xdc>
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	f8d4 c000 	ldr.w	ip, [r4]
 800e0e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e0e4:	4666      	mov	r6, ip
 800e0e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	6033      	str	r3, [r6, #0]
 800e0ec:	f10c 0018 	add.w	r0, ip, #24
 800e0f0:	f001 f8cc 	bl	800f28c <rmw_init_options_fini>
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	b1f0      	cbz	r0, 800e136 <rcl_init_options_copy+0xf2>
 800e0f8:	f7fb f810 	bl	800911c <rcutils_get_error_string>
 800e0fc:	f7fb f824 	bl	8009148 <rcutils_reset_error>
 800e100:	4620      	mov	r0, r4
 800e102:	f7ff ff7b 	bl	800dffc <rcl_init_options_fini>
 800e106:	4606      	mov	r6, r0
 800e108:	2800      	cmp	r0, #0
 800e10a:	d1aa      	bne.n	800e062 <rcl_init_options_copy+0x1e>
 800e10c:	4638      	mov	r0, r7
 800e10e:	f7ff fc23 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800e112:	4606      	mov	r6, r0
 800e114:	e7a5      	b.n	800e062 <rcl_init_options_copy+0x1e>
 800e116:	260b      	movs	r6, #11
 800e118:	4630      	mov	r0, r6
 800e11a:	b016      	add	sp, #88	@ 0x58
 800e11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e120:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e122:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800e124:	6820      	ldr	r0, [r4, #0]
 800e126:	4798      	blx	r3
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff fc15 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800e12e:	4606      	mov	r6, r0
 800e130:	2800      	cmp	r0, #0
 800e132:	d0d3      	beq.n	800e0dc <rcl_init_options_copy+0x98>
 800e134:	e795      	b.n	800e062 <rcl_init_options_copy+0x1e>
 800e136:	a802      	add	r0, sp, #8
 800e138:	ae02      	add	r6, sp, #8
 800e13a:	6827      	ldr	r7, [r4, #0]
 800e13c:	f000 ff04 	bl	800ef48 <rmw_get_zero_initialized_init_options>
 800e140:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e142:	3718      	adds	r7, #24
 800e144:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e148:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e14a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e14c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e14e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e152:	682a      	ldr	r2, [r5, #0]
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	e887 0003 	stmia.w	r7, {r0, r1}
 800e15a:	f102 0018 	add.w	r0, r2, #24
 800e15e:	f103 0118 	add.w	r1, r3, #24
 800e162:	f001 f851 	bl	800f208 <rmw_init_options_copy>
 800e166:	4606      	mov	r6, r0
 800e168:	2800      	cmp	r0, #0
 800e16a:	f43f af7a 	beq.w	800e062 <rcl_init_options_copy+0x1e>
 800e16e:	f7fa ffd5 	bl	800911c <rcutils_get_error_string>
 800e172:	f7fa ffe9 	bl	8009148 <rcutils_reset_error>
 800e176:	4620      	mov	r0, r4
 800e178:	f7ff ff40 	bl	800dffc <rcl_init_options_fini>
 800e17c:	b118      	cbz	r0, 800e186 <rcl_init_options_copy+0x142>
 800e17e:	4606      	mov	r6, r0
 800e180:	e76f      	b.n	800e062 <rcl_init_options_copy+0x1e>
 800e182:	260a      	movs	r6, #10
 800e184:	e76d      	b.n	800e062 <rcl_init_options_copy+0x1e>
 800e186:	4630      	mov	r0, r6
 800e188:	f7ff fbe6 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800e18c:	4606      	mov	r6, r0
 800e18e:	e768      	b.n	800e062 <rcl_init_options_copy+0x1e>

0800e190 <rcl_get_localhost_only>:
 800e190:	b510      	push	{r4, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	2300      	movs	r3, #0
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	b1b8      	cbz	r0, 800e1ca <rcl_get_localhost_only+0x3a>
 800e19a:	4604      	mov	r4, r0
 800e19c:	a901      	add	r1, sp, #4
 800e19e:	480c      	ldr	r0, [pc, #48]	@ (800e1d0 <rcl_get_localhost_only+0x40>)
 800e1a0:	f000 fd4c 	bl	800ec3c <rcutils_get_env>
 800e1a4:	b110      	cbz	r0, 800e1ac <rcl_get_localhost_only+0x1c>
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd10      	pop	{r4, pc}
 800e1ac:	9b01      	ldr	r3, [sp, #4]
 800e1ae:	b113      	cbz	r3, 800e1b6 <rcl_get_localhost_only+0x26>
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	2a31      	cmp	r2, #49	@ 0x31
 800e1b4:	d004      	beq.n	800e1c0 <rcl_get_localhost_only+0x30>
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	7023      	strb	r3, [r4, #0]
 800e1bc:	b002      	add	sp, #8
 800e1be:	bd10      	pop	{r4, pc}
 800e1c0:	785b      	ldrb	r3, [r3, #1]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1f7      	bne.n	800e1b6 <rcl_get_localhost_only+0x26>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e7f6      	b.n	800e1b8 <rcl_get_localhost_only+0x28>
 800e1ca:	200b      	movs	r0, #11
 800e1cc:	b002      	add	sp, #8
 800e1ce:	bd10      	pop	{r4, pc}
 800e1d0:	080131c4 	.word	0x080131c4

0800e1d4 <rcl_get_zero_initialized_node>:
 800e1d4:	4a03      	ldr	r2, [pc, #12]	@ (800e1e4 <rcl_get_zero_initialized_node+0x10>)
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e1dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	4770      	bx	lr
 800e1e4:	080131e4 	.word	0x080131e4

0800e1e8 <rcl_node_init>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	b09b      	sub	sp, #108	@ 0x6c
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 800e1f4:	f04f 0c00 	mov.w	ip, #0
 800e1f8:	a815      	add	r0, sp, #84	@ 0x54
 800e1fa:	460e      	mov	r6, r1
 800e1fc:	4615      	mov	r5, r2
 800e1fe:	461f      	mov	r7, r3
 800e200:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800e204:	f003 fa0e 	bl	8011624 <rcl_guard_condition_get_default_options>
 800e208:	f1b8 0f00 	cmp.w	r8, #0
 800e20c:	f000 80fd 	beq.w	800e40a <rcl_node_init+0x222>
 800e210:	f108 0b04 	add.w	fp, r8, #4
 800e214:	4658      	mov	r0, fp
 800e216:	f7fa ff73 	bl	8009100 <rcutils_allocator_is_valid>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f000 80f5 	beq.w	800e40a <rcl_node_init+0x222>
 800e220:	2e00      	cmp	r6, #0
 800e222:	f000 80f2 	beq.w	800e40a <rcl_node_init+0x222>
 800e226:	2d00      	cmp	r5, #0
 800e228:	f000 80ef 	beq.w	800e40a <rcl_node_init+0x222>
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	f000 80ec 	beq.w	800e40a <rcl_node_init+0x222>
 800e232:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e236:	f1b9 0f00 	cmp.w	r9, #0
 800e23a:	f040 8112 	bne.w	800e462 <rcl_node_init+0x27a>
 800e23e:	2f00      	cmp	r7, #0
 800e240:	f000 80e3 	beq.w	800e40a <rcl_node_init+0x222>
 800e244:	4638      	mov	r0, r7
 800e246:	f7ff fba5 	bl	800d994 <rcl_context_is_valid>
 800e24a:	4682      	mov	sl, r0
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f000 80e2 	beq.w	800e416 <rcl_node_init+0x22e>
 800e252:	464a      	mov	r2, r9
 800e254:	a914      	add	r1, sp, #80	@ 0x50
 800e256:	4630      	mov	r0, r6
 800e258:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 800e25c:	f000 fef4 	bl	800f048 <rmw_validate_node_name>
 800e260:	4681      	mov	r9, r0
 800e262:	2800      	cmp	r0, #0
 800e264:	f040 80d3 	bne.w	800e40e <rcl_node_init+0x226>
 800e268:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f040 8105 	bne.w	800e47a <rcl_node_init+0x292>
 800e270:	4628      	mov	r0, r5
 800e272:	f7f1 ffbf 	bl	80001f4 <strlen>
 800e276:	2800      	cmp	r0, #0
 800e278:	f040 80d0 	bne.w	800e41c <rcl_node_init+0x234>
 800e27c:	4d8e      	ldr	r5, [pc, #568]	@ (800e4b8 <rcl_node_init+0x2d0>)
 800e27e:	a914      	add	r1, sp, #80	@ 0x50
 800e280:	2200      	movs	r2, #0
 800e282:	4628      	mov	r0, r5
 800e284:	f000 fec2 	bl	800f00c <rmw_validate_namespace>
 800e288:	4681      	mov	r9, r0
 800e28a:	2800      	cmp	r0, #0
 800e28c:	f040 80bf 	bne.w	800e40e <rcl_node_init+0x226>
 800e290:	4682      	mov	sl, r0
 800e292:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e294:	2b00      	cmp	r3, #0
 800e296:	f040 80f5 	bne.w	800e484 <rcl_node_init+0x29c>
 800e29a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e29e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e2a2:	9307      	str	r3, [sp, #28]
 800e2a4:	2030      	movs	r0, #48	@ 0x30
 800e2a6:	4790      	blx	r2
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	6060      	str	r0, [r4, #4]
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	f000 80de 	beq.w	800e46e <rcl_node_init+0x286>
 800e2b2:	9b07      	ldr	r3, [sp, #28]
 800e2b4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800e2b8:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800e2bc:	a80a      	add	r0, sp, #40	@ 0x28
 800e2be:	f000 f92b 	bl	800e518 <rcl_node_get_default_options>
 800e2c2:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 800e2c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2ca:	46cc      	mov	ip, r9
 800e2cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2d0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800e2d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800e2d8:	6861      	ldr	r1, [r4, #4]
 800e2da:	6027      	str	r7, [r4, #0]
 800e2dc:	4640      	mov	r0, r8
 800e2de:	f000 f937 	bl	800e550 <rcl_node_options_copy>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d167      	bne.n	800e3b6 <rcl_node_init+0x1ce>
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f7f1 ff84 	bl	80001f4 <strlen>
 800e2ec:	4428      	add	r0, r5
 800e2ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2f2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e2f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2f8:	bf08      	it	eq
 800e2fa:	4970      	ldreq	r1, [pc, #448]	@ (800e4bc <rcl_node_init+0x2d4>)
 800e2fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e300:	bf18      	it	ne
 800e302:	496f      	ldrne	r1, [pc, #444]	@ (800e4c0 <rcl_node_init+0x2d8>)
 800e304:	9604      	str	r6, [sp, #16]
 800e306:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800e30a:	e9cd 3200 	strd	r3, r2, [sp]
 800e30e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800e312:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e316:	f000 fc57 	bl	800ebc8 <rcutils_format_string_limit>
 800e31a:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 800e31e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e322:	f8d9 3000 	ldr.w	r3, [r9]
 800e326:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e328:	1c59      	adds	r1, r3, #1
 800e32a:	f000 80b7 	beq.w	800e49c <rcl_node_init+0x2b4>
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	f8c9 301c 	str.w	r3, [r9, #28]
 800e334:	6952      	ldr	r2, [r2, #20]
 800e336:	6821      	ldr	r1, [r4, #0]
 800e338:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800e33c:	6808      	ldr	r0, [r1, #0]
 800e33e:	f1a2 0201 	sub.w	r2, r2, #1
 800e342:	fab2 f282 	clz	r2, r2
 800e346:	0952      	lsrs	r2, r2, #5
 800e348:	9200      	str	r2, [sp, #0]
 800e34a:	4631      	mov	r1, r6
 800e34c:	3028      	adds	r0, #40	@ 0x28
 800e34e:	462a      	mov	r2, r5
 800e350:	f001 fa32 	bl	800f7b8 <rmw_create_node>
 800e354:	6863      	ldr	r3, [r4, #4]
 800e356:	f8c9 0020 	str.w	r0, [r9, #32]
 800e35a:	6a18      	ldr	r0, [r3, #32]
 800e35c:	b368      	cbz	r0, 800e3ba <rcl_node_init+0x1d2>
 800e35e:	f001 fabf 	bl	800f8e0 <rmw_node_get_graph_guard_condition>
 800e362:	4681      	mov	r9, r0
 800e364:	b338      	cbz	r0, 800e3b6 <rcl_node_init+0x1ce>
 800e366:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e36a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e36e:	6866      	ldr	r6, [r4, #4]
 800e370:	2008      	movs	r0, #8
 800e372:	4798      	blx	r3
 800e374:	6863      	ldr	r3, [r4, #4]
 800e376:	6270      	str	r0, [r6, #36]	@ 0x24
 800e378:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800e37a:	b1f6      	cbz	r6, 800e3ba <rcl_node_init+0x1d2>
 800e37c:	a808      	add	r0, sp, #32
 800e37e:	f003 f8c9 	bl	8011514 <rcl_get_zero_initialized_guard_condition>
 800e382:	a808      	add	r0, sp, #32
 800e384:	c803      	ldmia	r0, {r0, r1}
 800e386:	e886 0003 	stmia.w	r6, {r0, r1}
 800e38a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e38e:	ae15      	add	r6, sp, #84	@ 0x54
 800e390:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e392:	f8db 3000 	ldr.w	r3, [fp]
 800e396:	6033      	str	r3, [r6, #0]
 800e398:	ab1a      	add	r3, sp, #104	@ 0x68
 800e39a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e39e:	6866      	ldr	r6, [r4, #4]
 800e3a0:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 800e3a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e3a6:	4649      	mov	r1, r9
 800e3a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	f003 f8bb 	bl	8011528 <rcl_guard_condition_init_from_rmw>
 800e3b2:	4681      	mov	r9, r0
 800e3b4:	b328      	cbz	r0, 800e402 <rcl_node_init+0x21a>
 800e3b6:	6863      	ldr	r3, [r4, #4]
 800e3b8:	b1f3      	cbz	r3, 800e3f8 <rcl_node_init+0x210>
 800e3ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e3bc:	b128      	cbz	r0, 800e3ca <rcl_node_init+0x1e2>
 800e3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3c2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e3c6:	4798      	blx	r3
 800e3c8:	6863      	ldr	r3, [r4, #4]
 800e3ca:	6a18      	ldr	r0, [r3, #32]
 800e3cc:	b110      	cbz	r0, 800e3d4 <rcl_node_init+0x1ec>
 800e3ce:	f001 fa0b 	bl	800f7e8 <rmw_destroy_node>
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e3d6:	b148      	cbz	r0, 800e3ec <rcl_node_init+0x204>
 800e3d8:	f003 f8fe 	bl	80115d8 <rcl_guard_condition_fini>
 800e3dc:	6862      	ldr	r2, [r4, #4]
 800e3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3e2:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800e3e4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e3e8:	4798      	blx	r3
 800e3ea:	6863      	ldr	r3, [r4, #4]
 800e3ec:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e3f0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	4790      	blx	r2
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e9c4 3300 	strd	r3, r3, [r4]
 800e3fe:	f04f 0901 	mov.w	r9, #1
 800e402:	f1ba 0f00 	cmp.w	sl, #0
 800e406:	d125      	bne.n	800e454 <rcl_node_init+0x26c>
 800e408:	e001      	b.n	800e40e <rcl_node_init+0x226>
 800e40a:	f04f 090b 	mov.w	r9, #11
 800e40e:	4648      	mov	r0, r9
 800e410:	b01b      	add	sp, #108	@ 0x6c
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800e41a:	e7f8      	b.n	800e40e <rcl_node_init+0x226>
 800e41c:	782b      	ldrb	r3, [r5, #0]
 800e41e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e420:	f43f af2d 	beq.w	800e27e <rcl_node_init+0x96>
 800e424:	4927      	ldr	r1, [pc, #156]	@ (800e4c4 <rcl_node_init+0x2dc>)
 800e426:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e430:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e434:	9503      	str	r5, [sp, #12]
 800e436:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800e43a:	f000 fbc5 	bl	800ebc8 <rcutils_format_string_limit>
 800e43e:	4605      	mov	r5, r0
 800e440:	b348      	cbz	r0, 800e496 <rcl_node_init+0x2ae>
 800e442:	2200      	movs	r2, #0
 800e444:	a914      	add	r1, sp, #80	@ 0x50
 800e446:	9214      	str	r2, [sp, #80]	@ 0x50
 800e448:	f000 fde0 	bl	800f00c <rmw_validate_namespace>
 800e44c:	4681      	mov	r9, r0
 800e44e:	2800      	cmp	r0, #0
 800e450:	f43f af1f 	beq.w	800e292 <rcl_node_init+0xaa>
 800e454:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e458:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e45c:	4628      	mov	r0, r5
 800e45e:	4798      	blx	r3
 800e460:	e7d5      	b.n	800e40e <rcl_node_init+0x226>
 800e462:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800e466:	4648      	mov	r0, r9
 800e468:	b01b      	add	sp, #108	@ 0x6c
 800e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46e:	f04f 090a 	mov.w	r9, #10
 800e472:	f1ba 0f00 	cmp.w	sl, #0
 800e476:	d1ed      	bne.n	800e454 <rcl_node_init+0x26c>
 800e478:	e7c9      	b.n	800e40e <rcl_node_init+0x226>
 800e47a:	f000 fe37 	bl	800f0ec <rmw_node_name_validation_result_string>
 800e47e:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800e482:	e7c4      	b.n	800e40e <rcl_node_init+0x226>
 800e484:	4618      	mov	r0, r3
 800e486:	f000 fdd3 	bl	800f030 <rmw_namespace_validation_result_string>
 800e48a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800e48e:	f1ba 0f00 	cmp.w	sl, #0
 800e492:	d1df      	bne.n	800e454 <rcl_node_init+0x26c>
 800e494:	e7bb      	b.n	800e40e <rcl_node_init+0x226>
 800e496:	f04f 090a 	mov.w	r9, #10
 800e49a:	e7b8      	b.n	800e40e <rcl_node_init+0x226>
 800e49c:	a813      	add	r0, sp, #76	@ 0x4c
 800e49e:	f003 f805 	bl	80114ac <rcl_get_default_domain_id>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d187      	bne.n	800e3b6 <rcl_node_init+0x1ce>
 800e4a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e4a8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	bf04      	itt	eq
 800e4b0:	9013      	streq	r0, [sp, #76]	@ 0x4c
 800e4b2:	4603      	moveq	r3, r0
 800e4b4:	e73b      	b.n	800e32e <rcl_node_init+0x146>
 800e4b6:	bf00      	nop
 800e4b8:	080131dc 	.word	0x080131dc
 800e4bc:	08013168 	.word	0x08013168
 800e4c0:	080131a0 	.word	0x080131a0
 800e4c4:	080131e0 	.word	0x080131e0

0800e4c8 <rcl_node_is_valid>:
 800e4c8:	b130      	cbz	r0, 800e4d8 <rcl_node_is_valid+0x10>
 800e4ca:	6843      	ldr	r3, [r0, #4]
 800e4cc:	b123      	cbz	r3, 800e4d8 <rcl_node_is_valid+0x10>
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	b113      	cbz	r3, 800e4d8 <rcl_node_is_valid+0x10>
 800e4d2:	6800      	ldr	r0, [r0, #0]
 800e4d4:	f7ff ba5e 	b.w	800d994 <rcl_context_is_valid>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	4770      	bx	lr

0800e4dc <rcl_node_get_name>:
 800e4dc:	b120      	cbz	r0, 800e4e8 <rcl_node_get_name+0xc>
 800e4de:	6840      	ldr	r0, [r0, #4]
 800e4e0:	b110      	cbz	r0, 800e4e8 <rcl_node_get_name+0xc>
 800e4e2:	6a00      	ldr	r0, [r0, #32]
 800e4e4:	b100      	cbz	r0, 800e4e8 <rcl_node_get_name+0xc>
 800e4e6:	6880      	ldr	r0, [r0, #8]
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <rcl_node_get_namespace>:
 800e4ec:	b120      	cbz	r0, 800e4f8 <rcl_node_get_namespace+0xc>
 800e4ee:	6840      	ldr	r0, [r0, #4]
 800e4f0:	b110      	cbz	r0, 800e4f8 <rcl_node_get_namespace+0xc>
 800e4f2:	6a00      	ldr	r0, [r0, #32]
 800e4f4:	b100      	cbz	r0, 800e4f8 <rcl_node_get_namespace+0xc>
 800e4f6:	68c0      	ldr	r0, [r0, #12]
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop

0800e4fc <rcl_node_get_options>:
 800e4fc:	b128      	cbz	r0, 800e50a <rcl_node_get_options+0xe>
 800e4fe:	6840      	ldr	r0, [r0, #4]
 800e500:	b118      	cbz	r0, 800e50a <rcl_node_get_options+0xe>
 800e502:	6a03      	ldr	r3, [r0, #32]
 800e504:	2b00      	cmp	r3, #0
 800e506:	bf08      	it	eq
 800e508:	2000      	moveq	r0, #0
 800e50a:	4770      	bx	lr

0800e50c <rcl_node_get_rmw_handle>:
 800e50c:	b110      	cbz	r0, 800e514 <rcl_node_get_rmw_handle+0x8>
 800e50e:	6840      	ldr	r0, [r0, #4]
 800e510:	b100      	cbz	r0, 800e514 <rcl_node_get_rmw_handle+0x8>
 800e512:	6a00      	ldr	r0, [r0, #32]
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop

0800e518 <rcl_node_get_default_options>:
 800e518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e51a:	b087      	sub	sp, #28
 800e51c:	4607      	mov	r7, r0
 800e51e:	466d      	mov	r5, sp
 800e520:	4668      	mov	r0, sp
 800e522:	f7fa fddf 	bl	80090e4 <rcutils_get_default_allocator>
 800e526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e528:	4c08      	ldr	r4, [pc, #32]	@ (800e54c <rcl_node_get_default_options+0x34>)
 800e52a:	f8d5 c000 	ldr.w	ip, [r5]
 800e52e:	1d26      	adds	r6, r4, #4
 800e530:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e534:	463d      	mov	r5, r7
 800e536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e538:	f8c6 c000 	str.w	ip, [r6]
 800e53c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e540:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e544:	4638      	mov	r0, r7
 800e546:	b007      	add	sp, #28
 800e548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e54a:	bf00      	nop
 800e54c:	20000054 	.word	0x20000054

0800e550 <rcl_node_options_copy>:
 800e550:	b1c8      	cbz	r0, 800e586 <rcl_node_options_copy+0x36>
 800e552:	b4f0      	push	{r4, r5, r6, r7}
 800e554:	460f      	mov	r7, r1
 800e556:	b199      	cbz	r1, 800e580 <rcl_node_options_copy+0x30>
 800e558:	4288      	cmp	r0, r1
 800e55a:	4606      	mov	r6, r0
 800e55c:	d010      	beq.n	800e580 <rcl_node_options_copy+0x30>
 800e55e:	4605      	mov	r5, r0
 800e560:	460c      	mov	r4, r1
 800e562:	f855 3b04 	ldr.w	r3, [r5], #4
 800e566:	f844 3b04 	str.w	r3, [r4], #4
 800e56a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e56c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e56e:	7e32      	ldrb	r2, [r6, #24]
 800e570:	6829      	ldr	r1, [r5, #0]
 800e572:	7e73      	ldrb	r3, [r6, #25]
 800e574:	6021      	str	r1, [r4, #0]
 800e576:	2000      	movs	r0, #0
 800e578:	763a      	strb	r2, [r7, #24]
 800e57a:	767b      	strb	r3, [r7, #25]
 800e57c:	bcf0      	pop	{r4, r5, r6, r7}
 800e57e:	4770      	bx	lr
 800e580:	200b      	movs	r0, #11
 800e582:	bcf0      	pop	{r4, r5, r6, r7}
 800e584:	4770      	bx	lr
 800e586:	200b      	movs	r0, #11
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop

0800e58c <exact_match_lookup>:
 800e58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e58e:	f102 0708 	add.w	r7, r2, #8
 800e592:	460b      	mov	r3, r1
 800e594:	4614      	mov	r4, r2
 800e596:	4606      	mov	r6, r0
 800e598:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e59c:	b085      	sub	sp, #20
 800e59e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	4918      	ldr	r1, [pc, #96]	@ (800e608 <exact_match_lookup+0x7c>)
 800e5a6:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e5aa:	f000 faff 	bl	800ebac <rcutils_join_path>
 800e5ae:	7833      	ldrb	r3, [r6, #0]
 800e5b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	d021      	beq.n	800e5fa <exact_match_lookup+0x6e>
 800e5b6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800e5ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e5be:	1c70      	adds	r0, r6, #1
 800e5c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e5c4:	f000 faf8 	bl	800ebb8 <rcutils_to_native_path>
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e5ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e5d2:	4631      	mov	r1, r6
 800e5d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f000 fae7 	bl	800ebac <rcutils_join_path>
 800e5de:	6862      	ldr	r2, [r4, #4]
 800e5e0:	6921      	ldr	r1, [r4, #16]
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	461e      	mov	r6, r3
 800e5e8:	4790      	blx	r2
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	6863      	ldr	r3, [r4, #4]
 800e5ee:	6921      	ldr	r1, [r4, #16]
 800e5f0:	4798      	blx	r3
 800e5f2:	4635      	mov	r5, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	b005      	add	sp, #20
 800e5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fa:	7873      	ldrb	r3, [r6, #1]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1da      	bne.n	800e5b6 <exact_match_lookup+0x2a>
 800e600:	4628      	mov	r0, r5
 800e602:	b005      	add	sp, #20
 800e604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e606:	bf00      	nop
 800e608:	08013228 	.word	0x08013228

0800e60c <rcl_get_secure_root>:
 800e60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e610:	b085      	sub	sp, #20
 800e612:	b168      	cbz	r0, 800e630 <rcl_get_secure_root+0x24>
 800e614:	4607      	mov	r7, r0
 800e616:	4608      	mov	r0, r1
 800e618:	460c      	mov	r4, r1
 800e61a:	f7fa fd71 	bl	8009100 <rcutils_allocator_is_valid>
 800e61e:	b138      	cbz	r0, 800e630 <rcl_get_secure_root+0x24>
 800e620:	2300      	movs	r3, #0
 800e622:	482d      	ldr	r0, [pc, #180]	@ (800e6d8 <rcl_get_secure_root+0xcc>)
 800e624:	9303      	str	r3, [sp, #12]
 800e626:	a903      	add	r1, sp, #12
 800e628:	f000 fb08 	bl	800ec3c <rcutils_get_env>
 800e62c:	4605      	mov	r5, r0
 800e62e:	b120      	cbz	r0, 800e63a <rcl_get_secure_root+0x2e>
 800e630:	2500      	movs	r5, #0
 800e632:	4628      	mov	r0, r5
 800e634:	b005      	add	sp, #20
 800e636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e63a:	9b03      	ldr	r3, [sp, #12]
 800e63c:	781a      	ldrb	r2, [r3, #0]
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d0f6      	beq.n	800e630 <rcl_get_secure_root+0x24>
 800e642:	f104 090c 	add.w	r9, r4, #12
 800e646:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e64a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e64e:	4618      	mov	r0, r3
 800e650:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e654:	f000 fbe2 	bl	800ee1c <rcutils_strdup>
 800e658:	4680      	mov	r8, r0
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d0e8      	beq.n	800e630 <rcl_get_secure_root+0x24>
 800e65e:	481f      	ldr	r0, [pc, #124]	@ (800e6dc <rcl_get_secure_root+0xd0>)
 800e660:	9503      	str	r5, [sp, #12]
 800e662:	a903      	add	r1, sp, #12
 800e664:	f000 faea 	bl	800ec3c <rcutils_get_env>
 800e668:	b160      	cbz	r0, 800e684 <rcl_get_secure_root+0x78>
 800e66a:	2600      	movs	r6, #0
 800e66c:	6863      	ldr	r3, [r4, #4]
 800e66e:	6921      	ldr	r1, [r4, #16]
 800e670:	4630      	mov	r0, r6
 800e672:	4798      	blx	r3
 800e674:	4640      	mov	r0, r8
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	6921      	ldr	r1, [r4, #16]
 800e67a:	4798      	blx	r3
 800e67c:	4628      	mov	r0, r5
 800e67e:	b005      	add	sp, #20
 800e680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e684:	9b03      	ldr	r3, [sp, #12]
 800e686:	781e      	ldrb	r6, [r3, #0]
 800e688:	b1f6      	cbz	r6, 800e6c8 <rcl_get_secure_root+0xbc>
 800e68a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e68e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e692:	4618      	mov	r0, r3
 800e694:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e698:	f000 fbc0 	bl	800ee1c <rcutils_strdup>
 800e69c:	4606      	mov	r6, r0
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d0e3      	beq.n	800e66a <rcl_get_secure_root+0x5e>
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	4641      	mov	r1, r8
 800e6a6:	f7ff ff71 	bl	800e58c <exact_match_lookup>
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	2d00      	cmp	r5, #0
 800e6ae:	d0dd      	beq.n	800e66c <rcl_get_secure_root+0x60>
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f000 fa79 	bl	800eba8 <rcutils_is_directory>
 800e6b6:	4607      	mov	r7, r0
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d1d7      	bne.n	800e66c <rcl_get_secure_root+0x60>
 800e6bc:	4628      	mov	r0, r5
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	6921      	ldr	r1, [r4, #16]
 800e6c2:	4798      	blx	r3
 800e6c4:	463d      	mov	r5, r7
 800e6c6:	e7d1      	b.n	800e66c <rcl_get_secure_root+0x60>
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4641      	mov	r1, r8
 800e6ce:	f7ff ff5d 	bl	800e58c <exact_match_lookup>
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	e7ea      	b.n	800e6ac <rcl_get_secure_root+0xa0>
 800e6d6:	bf00      	nop
 800e6d8:	08013234 	.word	0x08013234
 800e6dc:	0801324c 	.word	0x0801324c

0800e6e0 <rcl_get_security_options_from_environment>:
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	4607      	mov	r7, r0
 800e6e8:	4688      	mov	r8, r1
 800e6ea:	2400      	movs	r4, #0
 800e6ec:	481d      	ldr	r0, [pc, #116]	@ (800e764 <rcl_get_security_options_from_environment+0x84>)
 800e6ee:	9401      	str	r4, [sp, #4]
 800e6f0:	a901      	add	r1, sp, #4
 800e6f2:	4616      	mov	r6, r2
 800e6f4:	f000 faa2 	bl	800ec3c <rcutils_get_env>
 800e6f8:	b120      	cbz	r0, 800e704 <rcl_get_security_options_from_environment+0x24>
 800e6fa:	2501      	movs	r5, #1
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	b002      	add	sp, #8
 800e700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e704:	4918      	ldr	r1, [pc, #96]	@ (800e768 <rcl_get_security_options_from_environment+0x88>)
 800e706:	4604      	mov	r4, r0
 800e708:	9801      	ldr	r0, [sp, #4]
 800e70a:	f7f1 fd69 	bl	80001e0 <strcmp>
 800e70e:	4605      	mov	r5, r0
 800e710:	b9c8      	cbnz	r0, 800e746 <rcl_get_security_options_from_environment+0x66>
 800e712:	9001      	str	r0, [sp, #4]
 800e714:	b1ee      	cbz	r6, 800e752 <rcl_get_security_options_from_environment+0x72>
 800e716:	4815      	ldr	r0, [pc, #84]	@ (800e76c <rcl_get_security_options_from_environment+0x8c>)
 800e718:	a901      	add	r1, sp, #4
 800e71a:	f000 fa8f 	bl	800ec3c <rcutils_get_env>
 800e71e:	2800      	cmp	r0, #0
 800e720:	d1eb      	bne.n	800e6fa <rcl_get_security_options_from_environment+0x1a>
 800e722:	4913      	ldr	r1, [pc, #76]	@ (800e770 <rcl_get_security_options_from_environment+0x90>)
 800e724:	9801      	ldr	r0, [sp, #4]
 800e726:	f7f1 fd5b 	bl	80001e0 <strcmp>
 800e72a:	fab0 f080 	clz	r0, r0
 800e72e:	0940      	lsrs	r0, r0, #5
 800e730:	7030      	strb	r0, [r6, #0]
 800e732:	4641      	mov	r1, r8
 800e734:	4638      	mov	r0, r7
 800e736:	f7ff ff69 	bl	800e60c <rcl_get_secure_root>
 800e73a:	b160      	cbz	r0, 800e756 <rcl_get_security_options_from_environment+0x76>
 800e73c:	6070      	str	r0, [r6, #4]
 800e73e:	4628      	mov	r0, r5
 800e740:	b002      	add	sp, #8
 800e742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e746:	4625      	mov	r5, r4
 800e748:	4628      	mov	r0, r5
 800e74a:	7034      	strb	r4, [r6, #0]
 800e74c:	b002      	add	sp, #8
 800e74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e752:	250b      	movs	r5, #11
 800e754:	e7d2      	b.n	800e6fc <rcl_get_security_options_from_environment+0x1c>
 800e756:	7835      	ldrb	r5, [r6, #0]
 800e758:	f1a5 0501 	sub.w	r5, r5, #1
 800e75c:	fab5 f585 	clz	r5, r5
 800e760:	096d      	lsrs	r5, r5, #5
 800e762:	e7cb      	b.n	800e6fc <rcl_get_security_options_from_environment+0x1c>
 800e764:	080131ec 	.word	0x080131ec
 800e768:	08013200 	.word	0x08013200
 800e76c:	08013208 	.word	0x08013208
 800e770:	08013220 	.word	0x08013220

0800e774 <rcl_get_system_time>:
 800e774:	4608      	mov	r0, r1
 800e776:	f000 bb8f 	b.w	800ee98 <rcutils_system_time_now>
 800e77a:	bf00      	nop

0800e77c <rcl_get_steady_time>:
 800e77c:	4608      	mov	r0, r1
 800e77e:	f000 bbb3 	b.w	800eee8 <rcutils_steady_time_now>
 800e782:	bf00      	nop

0800e784 <rcl_get_ros_time>:
 800e784:	7a03      	ldrb	r3, [r0, #8]
 800e786:	b510      	push	{r4, lr}
 800e788:	460c      	mov	r4, r1
 800e78a:	b133      	cbz	r3, 800e79a <rcl_get_ros_time+0x16>
 800e78c:	2105      	movs	r1, #5
 800e78e:	f000 f9d7 	bl	800eb40 <__atomic_load_8>
 800e792:	e9c4 0100 	strd	r0, r1, [r4]
 800e796:	2000      	movs	r0, #0
 800e798:	bd10      	pop	{r4, pc}
 800e79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e79e:	4608      	mov	r0, r1
 800e7a0:	f000 bb7a 	b.w	800ee98 <rcutils_system_time_now>

0800e7a4 <rcl_clock_init>:
 800e7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	4614      	mov	r4, r2
 800e7ae:	460d      	mov	r5, r1
 800e7b0:	f7fa fca6 	bl	8009100 <rcutils_allocator_is_valid>
 800e7b4:	b128      	cbz	r0, 800e7c2 <rcl_clock_init+0x1e>
 800e7b6:	2e03      	cmp	r6, #3
 800e7b8:	d803      	bhi.n	800e7c2 <rcl_clock_init+0x1e>
 800e7ba:	e8df f006 	tbb	[pc, r6]
 800e7be:	2c1b      	.short	0x2c1b
 800e7c0:	0554      	.short	0x0554
 800e7c2:	200b      	movs	r0, #11
 800e7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7c8:	2d00      	cmp	r5, #0
 800e7ca:	d0fa      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e7cc:	2c00      	cmp	r4, #0
 800e7ce:	d0f8      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e7d0:	2600      	movs	r6, #0
 800e7d2:	702e      	strb	r6, [r5, #0]
 800e7d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7d6:	f105 0714 	add.w	r7, r5, #20
 800e7da:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e7de:	612e      	str	r6, [r5, #16]
 800e7e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	603b      	str	r3, [r7, #0]
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	4a2b      	ldr	r2, [pc, #172]	@ (800e898 <rcl_clock_init+0xf4>)
 800e7ea:	702b      	strb	r3, [r5, #0]
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	60ea      	str	r2, [r5, #12]
 800e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f4:	2d00      	cmp	r5, #0
 800e7f6:	d0e4      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e7f8:	2600      	movs	r6, #0
 800e7fa:	702e      	strb	r6, [r5, #0]
 800e7fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7fe:	f105 0714 	add.w	r7, r5, #20
 800e802:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e806:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e80a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	603b      	str	r3, [r7, #0]
 800e810:	4630      	mov	r0, r6
 800e812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e816:	2d00      	cmp	r5, #0
 800e818:	d0d3      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e81a:	2c00      	cmp	r4, #0
 800e81c:	d0d1      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e81e:	2600      	movs	r6, #0
 800e820:	702e      	strb	r6, [r5, #0]
 800e822:	46a4      	mov	ip, r4
 800e824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e828:	f105 0714 	add.w	r7, r5, #20
 800e82c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e830:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e834:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e836:	f8dc 3000 	ldr.w	r3, [ip]
 800e83a:	603b      	str	r3, [r7, #0]
 800e83c:	6921      	ldr	r1, [r4, #16]
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	2010      	movs	r0, #16
 800e842:	4798      	blx	r3
 800e844:	4603      	mov	r3, r0
 800e846:	6128      	str	r0, [r5, #16]
 800e848:	b318      	cbz	r0, 800e892 <rcl_clock_init+0xee>
 800e84a:	f04f 0800 	mov.w	r8, #0
 800e84e:	f04f 0900 	mov.w	r9, #0
 800e852:	7206      	strb	r6, [r0, #8]
 800e854:	e9c3 8900 	strd	r8, r9, [r3]
 800e858:	2301      	movs	r3, #1
 800e85a:	4a10      	ldr	r2, [pc, #64]	@ (800e89c <rcl_clock_init+0xf8>)
 800e85c:	702b      	strb	r3, [r5, #0]
 800e85e:	4630      	mov	r0, r6
 800e860:	60ea      	str	r2, [r5, #12]
 800e862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e866:	2d00      	cmp	r5, #0
 800e868:	d0ab      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e86a:	2c00      	cmp	r4, #0
 800e86c:	d0a9      	beq.n	800e7c2 <rcl_clock_init+0x1e>
 800e86e:	2600      	movs	r6, #0
 800e870:	702e      	strb	r6, [r5, #0]
 800e872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e874:	f105 0714 	add.w	r7, r5, #20
 800e878:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e87c:	612e      	str	r6, [r5, #16]
 800e87e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	2302      	movs	r3, #2
 800e886:	4a06      	ldr	r2, [pc, #24]	@ (800e8a0 <rcl_clock_init+0xfc>)
 800e888:	702b      	strb	r3, [r5, #0]
 800e88a:	4630      	mov	r0, r6
 800e88c:	60ea      	str	r2, [r5, #12]
 800e88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e892:	200a      	movs	r0, #10
 800e894:	e796      	b.n	800e7c4 <rcl_clock_init+0x20>
 800e896:	bf00      	nop
 800e898:	0800e77d 	.word	0x0800e77d
 800e89c:	0800e785 	.word	0x0800e785
 800e8a0:	0800e775 	.word	0x0800e775

0800e8a4 <rcl_validate_enclave_name_with_size>:
 800e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a6:	b0c3      	sub	sp, #268	@ 0x10c
 800e8a8:	b1d0      	cbz	r0, 800e8e0 <rcl_validate_enclave_name_with_size+0x3c>
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	b1c2      	cbz	r2, 800e8e0 <rcl_validate_enclave_name_with_size+0x3c>
 800e8ae:	461f      	mov	r7, r3
 800e8b0:	466a      	mov	r2, sp
 800e8b2:	ab01      	add	r3, sp, #4
 800e8b4:	460e      	mov	r6, r1
 800e8b6:	f000 fb5b 	bl	800ef70 <rmw_validate_namespace_with_size>
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	b9e0      	cbnz	r0, 800e8f8 <rcl_validate_enclave_name_with_size+0x54>
 800e8be:	9b00      	ldr	r3, [sp, #0]
 800e8c0:	b923      	cbnz	r3, 800e8cc <rcl_validate_enclave_name_with_size+0x28>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	602b      	str	r3, [r5, #0]
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	b043      	add	sp, #268	@ 0x10c
 800e8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8cc:	2b07      	cmp	r3, #7
 800e8ce:	d00b      	beq.n	800e8e8 <rcl_validate_enclave_name_with_size+0x44>
 800e8d0:	1e5a      	subs	r2, r3, #1
 800e8d2:	2a05      	cmp	r2, #5
 800e8d4:	d82e      	bhi.n	800e934 <rcl_validate_enclave_name_with_size+0x90>
 800e8d6:	e8df f002 	tbb	[pc, r2]
 800e8da:	211e      	.short	0x211e
 800e8dc:	152a2724 	.word	0x152a2724
 800e8e0:	240b      	movs	r4, #11
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	b043      	add	sp, #268	@ 0x10c
 800e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e8:	2eff      	cmp	r6, #255	@ 0xff
 800e8ea:	d9ea      	bls.n	800e8c2 <rcl_validate_enclave_name_with_size+0x1e>
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	2f00      	cmp	r7, #0
 800e8f0:	d0e9      	beq.n	800e8c6 <rcl_validate_enclave_name_with_size+0x22>
 800e8f2:	23fe      	movs	r3, #254	@ 0xfe
 800e8f4:	603b      	str	r3, [r7, #0]
 800e8f6:	e7e6      	b.n	800e8c6 <rcl_validate_enclave_name_with_size+0x22>
 800e8f8:	f7ff f82e 	bl	800d958 <rcl_convert_rmw_ret_to_rcl_ret>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	4620      	mov	r0, r4
 800e900:	b043      	add	sp, #268	@ 0x10c
 800e902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e904:	2306      	movs	r3, #6
 800e906:	602b      	str	r3, [r5, #0]
 800e908:	2f00      	cmp	r7, #0
 800e90a:	d0dc      	beq.n	800e8c6 <rcl_validate_enclave_name_with_size+0x22>
 800e90c:	9b01      	ldr	r3, [sp, #4]
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	4620      	mov	r0, r4
 800e912:	b043      	add	sp, #268	@ 0x10c
 800e914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e916:	2301      	movs	r3, #1
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	e7f5      	b.n	800e908 <rcl_validate_enclave_name_with_size+0x64>
 800e91c:	2302      	movs	r3, #2
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	e7f2      	b.n	800e908 <rcl_validate_enclave_name_with_size+0x64>
 800e922:	2303      	movs	r3, #3
 800e924:	602b      	str	r3, [r5, #0]
 800e926:	e7ef      	b.n	800e908 <rcl_validate_enclave_name_with_size+0x64>
 800e928:	2304      	movs	r3, #4
 800e92a:	602b      	str	r3, [r5, #0]
 800e92c:	e7ec      	b.n	800e908 <rcl_validate_enclave_name_with_size+0x64>
 800e92e:	2305      	movs	r3, #5
 800e930:	602b      	str	r3, [r5, #0]
 800e932:	e7e9      	b.n	800e908 <rcl_validate_enclave_name_with_size+0x64>
 800e934:	4a03      	ldr	r2, [pc, #12]	@ (800e944 <rcl_validate_enclave_name_with_size+0xa0>)
 800e936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e93a:	a802      	add	r0, sp, #8
 800e93c:	f000 fa42 	bl	800edc4 <rcutils_snprintf>
 800e940:	2401      	movs	r4, #1
 800e942:	e7c0      	b.n	800e8c6 <rcl_validate_enclave_name_with_size+0x22>
 800e944:	0801326c 	.word	0x0801326c

0800e948 <rcl_validate_enclave_name>:
 800e948:	b168      	cbz	r0, 800e966 <rcl_validate_enclave_name+0x1e>
 800e94a:	b570      	push	{r4, r5, r6, lr}
 800e94c:	460d      	mov	r5, r1
 800e94e:	4616      	mov	r6, r2
 800e950:	4604      	mov	r4, r0
 800e952:	f7f1 fc4f 	bl	80001f4 <strlen>
 800e956:	4633      	mov	r3, r6
 800e958:	4601      	mov	r1, r0
 800e95a:	462a      	mov	r2, r5
 800e95c:	4620      	mov	r0, r4
 800e95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e962:	f7ff bf9f 	b.w	800e8a4 <rcl_validate_enclave_name_with_size>
 800e966:	200b      	movs	r0, #11
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop

0800e96c <rcl_validate_topic_name>:
 800e96c:	2800      	cmp	r0, #0
 800e96e:	f000 808b 	beq.w	800ea88 <rcl_validate_topic_name+0x11c>
 800e972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e976:	460e      	mov	r6, r1
 800e978:	2900      	cmp	r1, #0
 800e97a:	f000 808c 	beq.w	800ea96 <rcl_validate_topic_name+0x12a>
 800e97e:	4617      	mov	r7, r2
 800e980:	4605      	mov	r5, r0
 800e982:	f7f1 fc37 	bl	80001f4 <strlen>
 800e986:	b1b0      	cbz	r0, 800e9b6 <rcl_validate_topic_name+0x4a>
 800e988:	f895 9000 	ldrb.w	r9, [r5]
 800e98c:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800eb3c <rcl_validate_topic_name+0x1d0>
 800e990:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800e994:	f013 0304 	ands.w	r3, r3, #4
 800e998:	d178      	bne.n	800ea8c <rcl_validate_topic_name+0x120>
 800e99a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800e99e:	f815 2008 	ldrb.w	r2, [r5, r8]
 800e9a2:	2a2f      	cmp	r2, #47	@ 0x2f
 800e9a4:	d10e      	bne.n	800e9c4 <rcl_validate_topic_name+0x58>
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	6032      	str	r2, [r6, #0]
 800e9aa:	b36f      	cbz	r7, 800ea08 <rcl_validate_topic_name+0x9c>
 800e9ac:	f8c7 8000 	str.w	r8, [r7]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	6033      	str	r3, [r6, #0]
 800e9ba:	b32f      	cbz	r7, 800ea08 <rcl_validate_topic_name+0x9c>
 800e9bc:	2000      	movs	r0, #0
 800e9be:	6038      	str	r0, [r7, #0]
 800e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c4:	461c      	mov	r4, r3
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800e9cc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800e9d0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e9d4:	f1be 0f09 	cmp.w	lr, #9
 800e9d8:	d946      	bls.n	800ea68 <rcl_validate_topic_name+0xfc>
 800e9da:	f022 0e20 	bic.w	lr, r2, #32
 800e9de:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800e9e2:	f1be 0f19 	cmp.w	lr, #25
 800e9e6:	d93f      	bls.n	800ea68 <rcl_validate_topic_name+0xfc>
 800e9e8:	2a5f      	cmp	r2, #95	@ 0x5f
 800e9ea:	d014      	beq.n	800ea16 <rcl_validate_topic_name+0xaa>
 800e9ec:	2a2f      	cmp	r2, #47	@ 0x2f
 800e9ee:	d05b      	beq.n	800eaa8 <rcl_validate_topic_name+0x13c>
 800e9f0:	2a7e      	cmp	r2, #126	@ 0x7e
 800e9f2:	d052      	beq.n	800ea9a <rcl_validate_topic_name+0x12e>
 800e9f4:	2a7b      	cmp	r2, #123	@ 0x7b
 800e9f6:	d00a      	beq.n	800ea0e <rcl_validate_topic_name+0xa2>
 800e9f8:	2a7d      	cmp	r2, #125	@ 0x7d
 800e9fa:	d16f      	bne.n	800eadc <rcl_validate_topic_name+0x170>
 800e9fc:	2c00      	cmp	r4, #0
 800e9fe:	d15e      	bne.n	800eabe <rcl_validate_topic_name+0x152>
 800ea00:	2305      	movs	r3, #5
 800ea02:	6033      	str	r3, [r6, #0]
 800ea04:	b107      	cbz	r7, 800ea08 <rcl_validate_topic_name+0x9c>
 800ea06:	6039      	str	r1, [r7, #0]
 800ea08:	2000      	movs	r0, #0
 800ea0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea0e:	2c00      	cmp	r4, #0
 800ea10:	d14c      	bne.n	800eaac <rcl_validate_topic_name+0x140>
 800ea12:	460b      	mov	r3, r1
 800ea14:	2401      	movs	r4, #1
 800ea16:	3101      	adds	r1, #1
 800ea18:	4288      	cmp	r0, r1
 800ea1a:	d1d7      	bne.n	800e9cc <rcl_validate_topic_name+0x60>
 800ea1c:	2c00      	cmp	r4, #0
 800ea1e:	d156      	bne.n	800eace <rcl_validate_topic_name+0x162>
 800ea20:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800ea24:	4620      	mov	r0, r4
 800ea26:	d061      	beq.n	800eaec <rcl_validate_topic_name+0x180>
 800ea28:	f108 0e01 	add.w	lr, r8, #1
 800ea2c:	e007      	b.n	800ea3e <rcl_validate_topic_name+0xd2>
 800ea2e:	2801      	cmp	r0, #1
 800ea30:	d047      	beq.n	800eac2 <rcl_validate_topic_name+0x156>
 800ea32:	461a      	mov	r2, r3
 800ea34:	4291      	cmp	r1, r2
 800ea36:	4618      	mov	r0, r3
 800ea38:	f105 0501 	add.w	r5, r5, #1
 800ea3c:	d944      	bls.n	800eac8 <rcl_validate_topic_name+0x15c>
 800ea3e:	4580      	cmp	r8, r0
 800ea40:	f100 0301 	add.w	r3, r0, #1
 800ea44:	d037      	beq.n	800eab6 <rcl_validate_topic_name+0x14a>
 800ea46:	782a      	ldrb	r2, [r5, #0]
 800ea48:	2a2f      	cmp	r2, #47	@ 0x2f
 800ea4a:	d1f0      	bne.n	800ea2e <rcl_validate_topic_name+0xc2>
 800ea4c:	786b      	ldrb	r3, [r5, #1]
 800ea4e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800ea52:	1c43      	adds	r3, r0, #1
 800ea54:	0760      	lsls	r0, r4, #29
 800ea56:	461a      	mov	r2, r3
 800ea58:	d5ec      	bpl.n	800ea34 <rcl_validate_topic_name+0xc8>
 800ea5a:	2304      	movs	r3, #4
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	2f00      	cmp	r7, #0
 800ea60:	d0d2      	beq.n	800ea08 <rcl_validate_topic_name+0x9c>
 800ea62:	603a      	str	r2, [r7, #0]
 800ea64:	2000      	movs	r0, #0
 800ea66:	e7ab      	b.n	800e9c0 <rcl_validate_topic_name+0x54>
 800ea68:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800ea6c:	0752      	lsls	r2, r2, #29
 800ea6e:	d5d2      	bpl.n	800ea16 <rcl_validate_topic_name+0xaa>
 800ea70:	2c00      	cmp	r4, #0
 800ea72:	d0d0      	beq.n	800ea16 <rcl_validate_topic_name+0xaa>
 800ea74:	2900      	cmp	r1, #0
 800ea76:	d0ce      	beq.n	800ea16 <rcl_validate_topic_name+0xaa>
 800ea78:	1e4a      	subs	r2, r1, #1
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d1cb      	bne.n	800ea16 <rcl_validate_topic_name+0xaa>
 800ea7e:	2309      	movs	r3, #9
 800ea80:	6033      	str	r3, [r6, #0]
 800ea82:	2f00      	cmp	r7, #0
 800ea84:	d1bf      	bne.n	800ea06 <rcl_validate_topic_name+0x9a>
 800ea86:	e7bf      	b.n	800ea08 <rcl_validate_topic_name+0x9c>
 800ea88:	200b      	movs	r0, #11
 800ea8a:	4770      	bx	lr
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	6033      	str	r3, [r6, #0]
 800ea90:	2f00      	cmp	r7, #0
 800ea92:	d193      	bne.n	800e9bc <rcl_validate_topic_name+0x50>
 800ea94:	e7b8      	b.n	800ea08 <rcl_validate_topic_name+0x9c>
 800ea96:	200b      	movs	r0, #11
 800ea98:	e792      	b.n	800e9c0 <rcl_validate_topic_name+0x54>
 800ea9a:	2900      	cmp	r1, #0
 800ea9c:	d0bb      	beq.n	800ea16 <rcl_validate_topic_name+0xaa>
 800ea9e:	2306      	movs	r3, #6
 800eaa0:	6033      	str	r3, [r6, #0]
 800eaa2:	2f00      	cmp	r7, #0
 800eaa4:	d1af      	bne.n	800ea06 <rcl_validate_topic_name+0x9a>
 800eaa6:	e7af      	b.n	800ea08 <rcl_validate_topic_name+0x9c>
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	d0b4      	beq.n	800ea16 <rcl_validate_topic_name+0xaa>
 800eaac:	2308      	movs	r3, #8
 800eaae:	6033      	str	r3, [r6, #0]
 800eab0:	2f00      	cmp	r7, #0
 800eab2:	d1a8      	bne.n	800ea06 <rcl_validate_topic_name+0x9a>
 800eab4:	e7a8      	b.n	800ea08 <rcl_validate_topic_name+0x9c>
 800eab6:	4672      	mov	r2, lr
 800eab8:	f108 0301 	add.w	r3, r8, #1
 800eabc:	e7ba      	b.n	800ea34 <rcl_validate_topic_name+0xc8>
 800eabe:	2400      	movs	r4, #0
 800eac0:	e7a9      	b.n	800ea16 <rcl_validate_topic_name+0xaa>
 800eac2:	2202      	movs	r2, #2
 800eac4:	4613      	mov	r3, r2
 800eac6:	e7b5      	b.n	800ea34 <rcl_validate_topic_name+0xc8>
 800eac8:	2000      	movs	r0, #0
 800eaca:	6030      	str	r0, [r6, #0]
 800eacc:	e778      	b.n	800e9c0 <rcl_validate_topic_name+0x54>
 800eace:	2205      	movs	r2, #5
 800ead0:	6032      	str	r2, [r6, #0]
 800ead2:	2f00      	cmp	r7, #0
 800ead4:	d098      	beq.n	800ea08 <rcl_validate_topic_name+0x9c>
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	2000      	movs	r0, #0
 800eada:	e771      	b.n	800e9c0 <rcl_validate_topic_name+0x54>
 800eadc:	2c00      	cmp	r4, #0
 800eade:	bf14      	ite	ne
 800eae0:	2308      	movne	r3, #8
 800eae2:	2303      	moveq	r3, #3
 800eae4:	6033      	str	r3, [r6, #0]
 800eae6:	2f00      	cmp	r7, #0
 800eae8:	d18d      	bne.n	800ea06 <rcl_validate_topic_name+0x9a>
 800eaea:	e78d      	b.n	800ea08 <rcl_validate_topic_name+0x9c>
 800eaec:	f108 0401 	add.w	r4, r8, #1
 800eaf0:	e007      	b.n	800eb02 <rcl_validate_topic_name+0x196>
 800eaf2:	2801      	cmp	r0, #1
 800eaf4:	d019      	beq.n	800eb2a <rcl_validate_topic_name+0x1be>
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	4291      	cmp	r1, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f105 0501 	add.w	r5, r5, #1
 800eb00:	d9e2      	bls.n	800eac8 <rcl_validate_topic_name+0x15c>
 800eb02:	4580      	cmp	r8, r0
 800eb04:	f100 0301 	add.w	r3, r0, #1
 800eb08:	d00b      	beq.n	800eb22 <rcl_validate_topic_name+0x1b6>
 800eb0a:	782a      	ldrb	r2, [r5, #0]
 800eb0c:	2a2f      	cmp	r2, #47	@ 0x2f
 800eb0e:	d1f0      	bne.n	800eaf2 <rcl_validate_topic_name+0x186>
 800eb10:	786b      	ldrb	r3, [r5, #1]
 800eb12:	f81c e003 	ldrb.w	lr, [ip, r3]
 800eb16:	1c43      	adds	r3, r0, #1
 800eb18:	f01e 0f04 	tst.w	lr, #4
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	d0eb      	beq.n	800eaf8 <rcl_validate_topic_name+0x18c>
 800eb20:	e79b      	b.n	800ea5a <rcl_validate_topic_name+0xee>
 800eb22:	4622      	mov	r2, r4
 800eb24:	f108 0301 	add.w	r3, r8, #1
 800eb28:	e7e6      	b.n	800eaf8 <rcl_validate_topic_name+0x18c>
 800eb2a:	2307      	movs	r3, #7
 800eb2c:	6033      	str	r3, [r6, #0]
 800eb2e:	2f00      	cmp	r7, #0
 800eb30:	f43f af6a 	beq.w	800ea08 <rcl_validate_topic_name+0x9c>
 800eb34:	6038      	str	r0, [r7, #0]
 800eb36:	2000      	movs	r0, #0
 800eb38:	e742      	b.n	800e9c0 <rcl_validate_topic_name+0x54>
 800eb3a:	bf00      	nop
 800eb3c:	080138c0 	.word	0x080138c0

0800eb40 <__atomic_load_8>:
 800eb40:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800eb44:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800eb48:	4b14      	ldr	r3, [pc, #80]	@ (800eb9c <__atomic_load_8+0x5c>)
 800eb4a:	4a15      	ldr	r2, [pc, #84]	@ (800eba0 <__atomic_load_8+0x60>)
 800eb4c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800eb50:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800eb54:	fb03 f301 	mul.w	r3, r3, r1
 800eb58:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800eb5c:	fba2 1203 	umull	r1, r2, r2, r3
 800eb60:	0912      	lsrs	r2, r2, #4
 800eb62:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800eb66:	b430      	push	{r4, r5}
 800eb68:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800eb6c:	4c0d      	ldr	r4, [pc, #52]	@ (800eba4 <__atomic_load_8+0x64>)
 800eb6e:	1a9b      	subs	r3, r3, r2
 800eb70:	18e1      	adds	r1, r4, r3
 800eb72:	f04f 0501 	mov.w	r5, #1
 800eb76:	e8d1 2f4f 	ldrexb	r2, [r1]
 800eb7a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800eb7e:	f1bc 0f00 	cmp.w	ip, #0
 800eb82:	d1f8      	bne.n	800eb76 <__atomic_load_8+0x36>
 800eb84:	f3bf 8f5b 	dmb	ish
 800eb88:	b2d2      	uxtb	r2, r2
 800eb8a:	2a00      	cmp	r2, #0
 800eb8c:	d1f3      	bne.n	800eb76 <__atomic_load_8+0x36>
 800eb8e:	e9d0 0100 	ldrd	r0, r1, [r0]
 800eb92:	f3bf 8f5b 	dmb	ish
 800eb96:	54e2      	strb	r2, [r4, r3]
 800eb98:	bc30      	pop	{r4, r5}
 800eb9a:	4770      	bx	lr
 800eb9c:	27d4eb2d 	.word	0x27d4eb2d
 800eba0:	b21642c9 	.word	0xb21642c9
 800eba4:	200091ec 	.word	0x200091ec

0800eba8 <rcutils_is_directory>:
 800eba8:	2000      	movs	r0, #0
 800ebaa:	4770      	bx	lr

0800ebac <rcutils_join_path>:
 800ebac:	b082      	sub	sp, #8
 800ebae:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	b002      	add	sp, #8
 800ebb6:	4770      	bx	lr

0800ebb8 <rcutils_to_native_path>:
 800ebb8:	b084      	sub	sp, #16
 800ebba:	a801      	add	r0, sp, #4
 800ebbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ebc0:	b004      	add	sp, #16
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop

0800ebc8 <rcutils_format_string_limit>:
 800ebc8:	b40f      	push	{r0, r1, r2, r3}
 800ebca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	ac08      	add	r4, sp, #32
 800ebd0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ebd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ebd6:	b34e      	cbz	r6, 800ec2c <rcutils_format_string_limit+0x64>
 800ebd8:	a808      	add	r0, sp, #32
 800ebda:	f7fa fa91 	bl	8009100 <rcutils_allocator_is_valid>
 800ebde:	b328      	cbz	r0, 800ec2c <rcutils_format_string_limit+0x64>
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ebe4:	4608      	mov	r0, r1
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	e9cd 3300 	strd	r3, r3, [sp]
 800ebec:	f000 f904 	bl	800edf8 <rcutils_vsnprintf>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	d01a      	beq.n	800ec2c <rcutils_format_string_limit+0x64>
 800ebf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ebf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ebfa:	1c47      	adds	r7, r0, #1
 800ebfc:	429f      	cmp	r7, r3
 800ebfe:	bf84      	itt	hi
 800ec00:	461f      	movhi	r7, r3
 800ec02:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ec06:	4638      	mov	r0, r7
 800ec08:	9b08      	ldr	r3, [sp, #32]
 800ec0a:	4798      	blx	r3
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	b168      	cbz	r0, 800ec2c <rcutils_format_string_limit+0x64>
 800ec10:	9b01      	ldr	r3, [sp, #4]
 800ec12:	4632      	mov	r2, r6
 800ec14:	4639      	mov	r1, r7
 800ec16:	f000 f8ef 	bl	800edf8 <rcutils_vsnprintf>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	db02      	blt.n	800ec24 <rcutils_format_string_limit+0x5c>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	5563      	strb	r3, [r4, r5]
 800ec22:	e004      	b.n	800ec2e <rcutils_format_string_limit+0x66>
 800ec24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec26:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ec28:	4620      	mov	r0, r4
 800ec2a:	4798      	blx	r3
 800ec2c:	2400      	movs	r4, #0
 800ec2e:	4620      	mov	r0, r4
 800ec30:	b003      	add	sp, #12
 800ec32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec36:	b004      	add	sp, #16
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop

0800ec3c <rcutils_get_env>:
 800ec3c:	b168      	cbz	r0, 800ec5a <rcutils_get_env+0x1e>
 800ec3e:	b510      	push	{r4, lr}
 800ec40:	460c      	mov	r4, r1
 800ec42:	b129      	cbz	r1, 800ec50 <rcutils_get_env+0x14>
 800ec44:	f002 fe74 	bl	8011930 <getenv>
 800ec48:	b120      	cbz	r0, 800ec54 <rcutils_get_env+0x18>
 800ec4a:	6020      	str	r0, [r4, #0]
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	bd10      	pop	{r4, pc}
 800ec50:	4803      	ldr	r0, [pc, #12]	@ (800ec60 <rcutils_get_env+0x24>)
 800ec52:	bd10      	pop	{r4, pc}
 800ec54:	4b03      	ldr	r3, [pc, #12]	@ (800ec64 <rcutils_get_env+0x28>)
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	4803      	ldr	r0, [pc, #12]	@ (800ec68 <rcutils_get_env+0x2c>)
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	080132e8 	.word	0x080132e8
 800ec64:	0801340c 	.word	0x0801340c
 800ec68:	080132cc 	.word	0x080132cc

0800ec6c <rcutils_repl_str>:
 800ec6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec70:	ed2d 8b02 	vpush	{d8}
 800ec74:	b087      	sub	sp, #28
 800ec76:	4680      	mov	r8, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	f8cd 8000 	str.w	r8, [sp]
 800ec7e:	ee08 2a10 	vmov	s16, r2
 800ec82:	468a      	mov	sl, r1
 800ec84:	4699      	mov	r9, r3
 800ec86:	f7f1 fab5 	bl	80001f4 <strlen>
 800ec8a:	2600      	movs	r6, #0
 800ec8c:	4647      	mov	r7, r8
 800ec8e:	9001      	str	r0, [sp, #4]
 800ec90:	46b3      	mov	fp, r6
 800ec92:	2510      	movs	r5, #16
 800ec94:	46b0      	mov	r8, r6
 800ec96:	e01d      	b.n	800ecd4 <rcutils_repl_str+0x68>
 800ec98:	f10b 0b01 	add.w	fp, fp, #1
 800ec9c:	455e      	cmp	r6, fp
 800ec9e:	d211      	bcs.n	800ecc4 <rcutils_repl_str+0x58>
 800eca0:	442e      	add	r6, r5
 800eca2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800eca6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ecaa:	00b1      	lsls	r1, r6, #2
 800ecac:	4798      	blx	r3
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f000 8084 	beq.w	800edbc <rcutils_repl_str+0x150>
 800ecb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecb8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800ecbc:	bf28      	it	cs
 800ecbe:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	9a00      	ldr	r2, [sp, #0]
 800ecc6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ecca:	1aa2      	subs	r2, r4, r2
 800eccc:	f843 2c04 	str.w	r2, [r3, #-4]
 800ecd0:	9b01      	ldr	r3, [sp, #4]
 800ecd2:	18e7      	adds	r7, r4, r3
 800ecd4:	4651      	mov	r1, sl
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	f003 f9e3 	bl	80120a2 <strstr>
 800ecdc:	4604      	mov	r4, r0
 800ecde:	4640      	mov	r0, r8
 800ece0:	2c00      	cmp	r4, #0
 800ece2:	d1d9      	bne.n	800ec98 <rcutils_repl_str+0x2c>
 800ece4:	46b8      	mov	r8, r7
 800ece6:	4607      	mov	r7, r0
 800ece8:	4640      	mov	r0, r8
 800ecea:	f7f1 fa83 	bl	80001f4 <strlen>
 800ecee:	9b00      	ldr	r3, [sp, #0]
 800ecf0:	eba8 0303 	sub.w	r3, r8, r3
 800ecf4:	181d      	adds	r5, r3, r0
 800ecf6:	9504      	str	r5, [sp, #16]
 800ecf8:	f1bb 0f00 	cmp.w	fp, #0
 800ecfc:	d03d      	beq.n	800ed7a <rcutils_repl_str+0x10e>
 800ecfe:	ee18 0a10 	vmov	r0, s16
 800ed02:	f7f1 fa77 	bl	80001f4 <strlen>
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ed0c:	1ac3      	subs	r3, r0, r3
 800ed0e:	fb0b 5303 	mla	r3, fp, r3, r5
 800ed12:	9305      	str	r3, [sp, #20]
 800ed14:	4606      	mov	r6, r0
 800ed16:	1c58      	adds	r0, r3, #1
 800ed18:	f8d9 3000 	ldr.w	r3, [r9]
 800ed1c:	4798      	blx	r3
 800ed1e:	9003      	str	r0, [sp, #12]
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d04c      	beq.n	800edbe <rcutils_repl_str+0x152>
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	9900      	ldr	r1, [sp, #0]
 800ed28:	f003 fa5d 	bl	80121e6 <memcpy>
 800ed2c:	9b03      	ldr	r3, [sp, #12]
 800ed2e:	683d      	ldr	r5, [r7, #0]
 800ed30:	ee18 8a10 	vmov	r8, s16
 800ed34:	441d      	add	r5, r3
 800ed36:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800ed3a:	9302      	str	r3, [sp, #8]
 800ed3c:	46ba      	mov	sl, r7
 800ed3e:	4632      	mov	r2, r6
 800ed40:	4641      	mov	r1, r8
 800ed42:	4628      	mov	r0, r5
 800ed44:	f003 fa4f 	bl	80121e6 <memcpy>
 800ed48:	9b01      	ldr	r3, [sp, #4]
 800ed4a:	f85a 2b04 	ldr.w	r2, [sl], #4
 800ed4e:	441a      	add	r2, r3
 800ed50:	9b00      	ldr	r3, [sp, #0]
 800ed52:	1899      	adds	r1, r3, r2
 800ed54:	9b02      	ldr	r3, [sp, #8]
 800ed56:	4435      	add	r5, r6
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	d025      	beq.n	800edaa <rcutils_repl_str+0x13e>
 800ed5e:	f8da 3000 	ldr.w	r3, [sl]
 800ed62:	3401      	adds	r4, #1
 800ed64:	1a9a      	subs	r2, r3, r2
 800ed66:	4415      	add	r5, r2
 800ed68:	f003 fa3d 	bl	80121e6 <memcpy>
 800ed6c:	455c      	cmp	r4, fp
 800ed6e:	d3e6      	bcc.n	800ed3e <rcutils_repl_str+0xd2>
 800ed70:	9a03      	ldr	r2, [sp, #12]
 800ed72:	9905      	ldr	r1, [sp, #20]
 800ed74:	2300      	movs	r3, #0
 800ed76:	5453      	strb	r3, [r2, r1]
 800ed78:	e00b      	b.n	800ed92 <rcutils_repl_str+0x126>
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f8d9 3000 	ldr.w	r3, [r9]
 800ed80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ed84:	3001      	adds	r0, #1
 800ed86:	4798      	blx	r3
 800ed88:	9003      	str	r0, [sp, #12]
 800ed8a:	b110      	cbz	r0, 800ed92 <rcutils_repl_str+0x126>
 800ed8c:	9900      	ldr	r1, [sp, #0]
 800ed8e:	f003 fa22 	bl	80121d6 <strcpy>
 800ed92:	4638      	mov	r0, r7
 800ed94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ed98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ed9c:	4798      	blx	r3
 800ed9e:	9803      	ldr	r0, [sp, #12]
 800eda0:	b007      	add	sp, #28
 800eda2:	ecbd 8b02 	vpop	{d8}
 800eda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edaa:	9b04      	ldr	r3, [sp, #16]
 800edac:	3401      	adds	r4, #1
 800edae:	1a9a      	subs	r2, r3, r2
 800edb0:	4415      	add	r5, r2
 800edb2:	f003 fa18 	bl	80121e6 <memcpy>
 800edb6:	455c      	cmp	r4, fp
 800edb8:	d3c1      	bcc.n	800ed3e <rcutils_repl_str+0xd2>
 800edba:	e7d9      	b.n	800ed70 <rcutils_repl_str+0x104>
 800edbc:	4647      	mov	r7, r8
 800edbe:	2300      	movs	r3, #0
 800edc0:	9303      	str	r3, [sp, #12]
 800edc2:	e7e6      	b.n	800ed92 <rcutils_repl_str+0x126>

0800edc4 <rcutils_snprintf>:
 800edc4:	b40c      	push	{r2, r3}
 800edc6:	b530      	push	{r4, r5, lr}
 800edc8:	b083      	sub	sp, #12
 800edca:	ab06      	add	r3, sp, #24
 800edcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800edd0:	9301      	str	r3, [sp, #4]
 800edd2:	b152      	cbz	r2, 800edea <rcutils_snprintf+0x26>
 800edd4:	b138      	cbz	r0, 800ede6 <rcutils_snprintf+0x22>
 800edd6:	b141      	cbz	r1, 800edea <rcutils_snprintf+0x26>
 800edd8:	f003 f92e 	bl	8012038 <vsniprintf>
 800eddc:	b003      	add	sp, #12
 800edde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ede2:	b002      	add	sp, #8
 800ede4:	4770      	bx	lr
 800ede6:	2900      	cmp	r1, #0
 800ede8:	d0f6      	beq.n	800edd8 <rcutils_snprintf+0x14>
 800edea:	f003 f9c7 	bl	801217c <__errno>
 800edee:	2316      	movs	r3, #22
 800edf0:	6003      	str	r3, [r0, #0]
 800edf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800edf6:	e7f1      	b.n	800eddc <rcutils_snprintf+0x18>

0800edf8 <rcutils_vsnprintf>:
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	b13a      	cbz	r2, 800ee0c <rcutils_vsnprintf+0x14>
 800edfc:	b120      	cbz	r0, 800ee08 <rcutils_vsnprintf+0x10>
 800edfe:	b129      	cbz	r1, 800ee0c <rcutils_vsnprintf+0x14>
 800ee00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee04:	f003 b918 	b.w	8012038 <vsniprintf>
 800ee08:	2900      	cmp	r1, #0
 800ee0a:	d0f9      	beq.n	800ee00 <rcutils_vsnprintf+0x8>
 800ee0c:	f003 f9b6 	bl	801217c <__errno>
 800ee10:	2316      	movs	r3, #22
 800ee12:	6003      	str	r3, [r0, #0]
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee18:	bd70      	pop	{r4, r5, r6, pc}
 800ee1a:	bf00      	nop

0800ee1c <rcutils_strdup>:
 800ee1c:	b084      	sub	sp, #16
 800ee1e:	b570      	push	{r4, r5, r6, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	ac07      	add	r4, sp, #28
 800ee24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ee28:	4605      	mov	r5, r0
 800ee2a:	b1b0      	cbz	r0, 800ee5a <rcutils_strdup+0x3e>
 800ee2c:	f7f1 f9e2 	bl	80001f4 <strlen>
 800ee30:	1c42      	adds	r2, r0, #1
 800ee32:	9b07      	ldr	r3, [sp, #28]
 800ee34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee36:	9201      	str	r2, [sp, #4]
 800ee38:	4606      	mov	r6, r0
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	4798      	blx	r3
 800ee3e:	4604      	mov	r4, r0
 800ee40:	b128      	cbz	r0, 800ee4e <rcutils_strdup+0x32>
 800ee42:	9a01      	ldr	r2, [sp, #4]
 800ee44:	4629      	mov	r1, r5
 800ee46:	f003 f9ce 	bl	80121e6 <memcpy>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	55a3      	strb	r3, [r4, r6]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	b002      	add	sp, #8
 800ee52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee56:	b004      	add	sp, #16
 800ee58:	4770      	bx	lr
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	e7f7      	b.n	800ee4e <rcutils_strdup+0x32>
 800ee5e:	bf00      	nop

0800ee60 <rcutils_strndup>:
 800ee60:	b082      	sub	sp, #8
 800ee62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee64:	460e      	mov	r6, r1
 800ee66:	a906      	add	r1, sp, #24
 800ee68:	e881 000c 	stmia.w	r1, {r2, r3}
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	b180      	cbz	r0, 800ee92 <rcutils_strndup+0x32>
 800ee70:	1c77      	adds	r7, r6, #1
 800ee72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee74:	4638      	mov	r0, r7
 800ee76:	4790      	blx	r2
 800ee78:	4604      	mov	r4, r0
 800ee7a:	b128      	cbz	r0, 800ee88 <rcutils_strndup+0x28>
 800ee7c:	463a      	mov	r2, r7
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f003 f9b1 	bl	80121e6 <memcpy>
 800ee84:	2300      	movs	r3, #0
 800ee86:	55a3      	strb	r3, [r4, r6]
 800ee88:	4620      	mov	r0, r4
 800ee8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ee8e:	b002      	add	sp, #8
 800ee90:	4770      	bx	lr
 800ee92:	4604      	mov	r4, r0
 800ee94:	e7f8      	b.n	800ee88 <rcutils_strndup+0x28>
 800ee96:	bf00      	nop

0800ee98 <rcutils_system_time_now>:
 800ee98:	b310      	cbz	r0, 800eee0 <rcutils_system_time_now+0x48>
 800ee9a:	b570      	push	{r4, r5, r6, lr}
 800ee9c:	b084      	sub	sp, #16
 800ee9e:	4669      	mov	r1, sp
 800eea0:	4604      	mov	r4, r0
 800eea2:	2001      	movs	r0, #1
 800eea4:	f7f2 ff08 	bl	8001cb8 <clock_gettime>
 800eea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f171 0300 	sbcs.w	r3, r1, #0
 800eeb2:	db12      	blt.n	800eeda <rcutils_system_time_now+0x42>
 800eeb4:	9d02      	ldr	r5, [sp, #8]
 800eeb6:	2d00      	cmp	r5, #0
 800eeb8:	db0c      	blt.n	800eed4 <rcutils_system_time_now+0x3c>
 800eeba:	4e0a      	ldr	r6, [pc, #40]	@ (800eee4 <rcutils_system_time_now+0x4c>)
 800eebc:	fba0 2306 	umull	r2, r3, r0, r6
 800eec0:	1952      	adds	r2, r2, r5
 800eec2:	fb06 3301 	mla	r3, r6, r1, r3
 800eec6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800eeca:	2000      	movs	r0, #0
 800eecc:	e9c4 2300 	strd	r2, r3, [r4]
 800eed0:	b004      	add	sp, #16
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
 800eed4:	ea50 0301 	orrs.w	r3, r0, r1
 800eed8:	d1ef      	bne.n	800eeba <rcutils_system_time_now+0x22>
 800eeda:	2002      	movs	r0, #2
 800eedc:	b004      	add	sp, #16
 800eede:	bd70      	pop	{r4, r5, r6, pc}
 800eee0:	200b      	movs	r0, #11
 800eee2:	4770      	bx	lr
 800eee4:	3b9aca00 	.word	0x3b9aca00

0800eee8 <rcutils_steady_time_now>:
 800eee8:	b310      	cbz	r0, 800ef30 <rcutils_steady_time_now+0x48>
 800eeea:	b570      	push	{r4, r5, r6, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	4669      	mov	r1, sp
 800eef0:	4604      	mov	r4, r0
 800eef2:	2000      	movs	r0, #0
 800eef4:	f7f2 fee0 	bl	8001cb8 <clock_gettime>
 800eef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eefc:	2800      	cmp	r0, #0
 800eefe:	f171 0300 	sbcs.w	r3, r1, #0
 800ef02:	db12      	blt.n	800ef2a <rcutils_steady_time_now+0x42>
 800ef04:	9d02      	ldr	r5, [sp, #8]
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	db0c      	blt.n	800ef24 <rcutils_steady_time_now+0x3c>
 800ef0a:	4e0a      	ldr	r6, [pc, #40]	@ (800ef34 <rcutils_steady_time_now+0x4c>)
 800ef0c:	fba0 2306 	umull	r2, r3, r0, r6
 800ef10:	1952      	adds	r2, r2, r5
 800ef12:	fb06 3301 	mla	r3, r6, r1, r3
 800ef16:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ef20:	b004      	add	sp, #16
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	ea50 0301 	orrs.w	r3, r0, r1
 800ef28:	d1ef      	bne.n	800ef0a <rcutils_steady_time_now+0x22>
 800ef2a:	2002      	movs	r0, #2
 800ef2c:	b004      	add	sp, #16
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}
 800ef30:	200b      	movs	r0, #11
 800ef32:	4770      	bx	lr
 800ef34:	3b9aca00 	.word	0x3b9aca00

0800ef38 <rmw_get_zero_initialized_context>:
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	2250      	movs	r2, #80	@ 0x50
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	2100      	movs	r1, #0
 800ef40:	f003 f888 	bl	8012054 <memset>
 800ef44:	4620      	mov	r0, r4
 800ef46:	bd10      	pop	{r4, pc}

0800ef48 <rmw_get_zero_initialized_init_options>:
 800ef48:	b510      	push	{r4, lr}
 800ef4a:	2238      	movs	r2, #56	@ 0x38
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	f003 f880 	bl	8012054 <memset>
 800ef54:	f104 0010 	add.w	r0, r4, #16
 800ef58:	f000 f806 	bl	800ef68 <rmw_get_default_security_options>
 800ef5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef60:	60e3      	str	r3, [r4, #12]
 800ef62:	4620      	mov	r0, r4
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	bf00      	nop

0800ef68 <rmw_get_default_security_options>:
 800ef68:	2200      	movs	r2, #0
 800ef6a:	7002      	strb	r2, [r0, #0]
 800ef6c:	6042      	str	r2, [r0, #4]
 800ef6e:	4770      	bx	lr

0800ef70 <rmw_validate_namespace_with_size>:
 800ef70:	b340      	cbz	r0, 800efc4 <rmw_validate_namespace_with_size+0x54>
 800ef72:	b5d0      	push	{r4, r6, r7, lr}
 800ef74:	4614      	mov	r4, r2
 800ef76:	b0c2      	sub	sp, #264	@ 0x108
 800ef78:	b332      	cbz	r2, 800efc8 <rmw_validate_namespace_with_size+0x58>
 800ef7a:	2901      	cmp	r1, #1
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	461e      	mov	r6, r3
 800ef80:	d102      	bne.n	800ef88 <rmw_validate_namespace_with_size+0x18>
 800ef82:	7803      	ldrb	r3, [r0, #0]
 800ef84:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef86:	d019      	beq.n	800efbc <rmw_validate_namespace_with_size+0x4c>
 800ef88:	aa01      	add	r2, sp, #4
 800ef8a:	4669      	mov	r1, sp
 800ef8c:	f7fa fa26 	bl	80093dc <rmw_validate_full_topic_name>
 800ef90:	b990      	cbnz	r0, 800efb8 <rmw_validate_namespace_with_size+0x48>
 800ef92:	9b00      	ldr	r3, [sp, #0]
 800ef94:	b14b      	cbz	r3, 800efaa <rmw_validate_namespace_with_size+0x3a>
 800ef96:	2b07      	cmp	r3, #7
 800ef98:	d007      	beq.n	800efaa <rmw_validate_namespace_with_size+0x3a>
 800ef9a:	1e5a      	subs	r2, r3, #1
 800ef9c:	2a05      	cmp	r2, #5
 800ef9e:	d82b      	bhi.n	800eff8 <rmw_validate_namespace_with_size+0x88>
 800efa0:	e8df f002 	tbb	[pc, r2]
 800efa4:	24211e1b 	.word	0x24211e1b
 800efa8:	1427      	.short	0x1427
 800efaa:	2ff5      	cmp	r7, #245	@ 0xf5
 800efac:	d906      	bls.n	800efbc <rmw_validate_namespace_with_size+0x4c>
 800efae:	2307      	movs	r3, #7
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	b10e      	cbz	r6, 800efb8 <rmw_validate_namespace_with_size+0x48>
 800efb4:	23f4      	movs	r3, #244	@ 0xf4
 800efb6:	6033      	str	r3, [r6, #0]
 800efb8:	b042      	add	sp, #264	@ 0x108
 800efba:	bdd0      	pop	{r4, r6, r7, pc}
 800efbc:	2000      	movs	r0, #0
 800efbe:	6020      	str	r0, [r4, #0]
 800efc0:	b042      	add	sp, #264	@ 0x108
 800efc2:	bdd0      	pop	{r4, r6, r7, pc}
 800efc4:	200b      	movs	r0, #11
 800efc6:	4770      	bx	lr
 800efc8:	200b      	movs	r0, #11
 800efca:	e7f5      	b.n	800efb8 <rmw_validate_namespace_with_size+0x48>
 800efcc:	2306      	movs	r3, #6
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	d0f1      	beq.n	800efb8 <rmw_validate_namespace_with_size+0x48>
 800efd4:	9b01      	ldr	r3, [sp, #4]
 800efd6:	6033      	str	r3, [r6, #0]
 800efd8:	e7ee      	b.n	800efb8 <rmw_validate_namespace_with_size+0x48>
 800efda:	2301      	movs	r3, #1
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	e7f7      	b.n	800efd0 <rmw_validate_namespace_with_size+0x60>
 800efe0:	2302      	movs	r3, #2
 800efe2:	6023      	str	r3, [r4, #0]
 800efe4:	e7f4      	b.n	800efd0 <rmw_validate_namespace_with_size+0x60>
 800efe6:	2303      	movs	r3, #3
 800efe8:	6023      	str	r3, [r4, #0]
 800efea:	e7f1      	b.n	800efd0 <rmw_validate_namespace_with_size+0x60>
 800efec:	2304      	movs	r3, #4
 800efee:	6023      	str	r3, [r4, #0]
 800eff0:	e7ee      	b.n	800efd0 <rmw_validate_namespace_with_size+0x60>
 800eff2:	2305      	movs	r3, #5
 800eff4:	6023      	str	r3, [r4, #0]
 800eff6:	e7eb      	b.n	800efd0 <rmw_validate_namespace_with_size+0x60>
 800eff8:	4a03      	ldr	r2, [pc, #12]	@ (800f008 <rmw_validate_namespace_with_size+0x98>)
 800effa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800effe:	a802      	add	r0, sp, #8
 800f000:	f7ff fee0 	bl	800edc4 <rcutils_snprintf>
 800f004:	2001      	movs	r0, #1
 800f006:	e7d7      	b.n	800efb8 <rmw_validate_namespace_with_size+0x48>
 800f008:	08013304 	.word	0x08013304

0800f00c <rmw_validate_namespace>:
 800f00c:	b168      	cbz	r0, 800f02a <rmw_validate_namespace+0x1e>
 800f00e:	b570      	push	{r4, r5, r6, lr}
 800f010:	460d      	mov	r5, r1
 800f012:	4616      	mov	r6, r2
 800f014:	4604      	mov	r4, r0
 800f016:	f7f1 f8ed 	bl	80001f4 <strlen>
 800f01a:	4633      	mov	r3, r6
 800f01c:	4601      	mov	r1, r0
 800f01e:	462a      	mov	r2, r5
 800f020:	4620      	mov	r0, r4
 800f022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f026:	f7ff bfa3 	b.w	800ef70 <rmw_validate_namespace_with_size>
 800f02a:	200b      	movs	r0, #11
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <rmw_namespace_validation_result_string>:
 800f030:	2807      	cmp	r0, #7
 800f032:	bf9a      	itte	ls
 800f034:	4b02      	ldrls	r3, [pc, #8]	@ (800f040 <rmw_namespace_validation_result_string+0x10>)
 800f036:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f03a:	4802      	ldrhi	r0, [pc, #8]	@ (800f044 <rmw_namespace_validation_result_string+0x14>)
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	080134fc 	.word	0x080134fc
 800f044:	08013354 	.word	0x08013354

0800f048 <rmw_validate_node_name>:
 800f048:	2800      	cmp	r0, #0
 800f04a:	d03b      	beq.n	800f0c4 <rmw_validate_node_name+0x7c>
 800f04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f050:	460f      	mov	r7, r1
 800f052:	2900      	cmp	r1, #0
 800f054:	d038      	beq.n	800f0c8 <rmw_validate_node_name+0x80>
 800f056:	4615      	mov	r5, r2
 800f058:	4604      	mov	r4, r0
 800f05a:	f7f1 f8cb 	bl	80001f4 <strlen>
 800f05e:	b1e0      	cbz	r0, 800f09a <rmw_validate_node_name+0x52>
 800f060:	1e63      	subs	r3, r4, #1
 800f062:	eb03 0e00 	add.w	lr, r3, r0
 800f066:	f1c4 0c01 	rsb	ip, r4, #1
 800f06a:	eb0c 0803 	add.w	r8, ip, r3
 800f06e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800f072:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 800f076:	f026 0220 	bic.w	r2, r6, #32
 800f07a:	2909      	cmp	r1, #9
 800f07c:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 800f080:	d913      	bls.n	800f0aa <rmw_validate_node_name+0x62>
 800f082:	2a19      	cmp	r2, #25
 800f084:	d911      	bls.n	800f0aa <rmw_validate_node_name+0x62>
 800f086:	2e5f      	cmp	r6, #95	@ 0x5f
 800f088:	d00f      	beq.n	800f0aa <rmw_validate_node_name+0x62>
 800f08a:	2302      	movs	r3, #2
 800f08c:	603b      	str	r3, [r7, #0]
 800f08e:	b10d      	cbz	r5, 800f094 <rmw_validate_node_name+0x4c>
 800f090:	f8c5 8000 	str.w	r8, [r5]
 800f094:	2000      	movs	r0, #0
 800f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f09a:	2301      	movs	r3, #1
 800f09c:	603b      	str	r3, [r7, #0]
 800f09e:	2d00      	cmp	r5, #0
 800f0a0:	d0f8      	beq.n	800f094 <rmw_validate_node_name+0x4c>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	6028      	str	r0, [r5, #0]
 800f0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0aa:	4573      	cmp	r3, lr
 800f0ac:	d1dd      	bne.n	800f06a <rmw_validate_node_name+0x22>
 800f0ae:	7822      	ldrb	r2, [r4, #0]
 800f0b0:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e8 <rmw_validate_node_name+0xa0>)
 800f0b2:	5cd3      	ldrb	r3, [r2, r3]
 800f0b4:	f013 0304 	ands.w	r3, r3, #4
 800f0b8:	d110      	bne.n	800f0dc <rmw_validate_node_name+0x94>
 800f0ba:	28ff      	cmp	r0, #255	@ 0xff
 800f0bc:	d806      	bhi.n	800f0cc <rmw_validate_node_name+0x84>
 800f0be:	603b      	str	r3, [r7, #0]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	e7e8      	b.n	800f096 <rmw_validate_node_name+0x4e>
 800f0c4:	200b      	movs	r0, #11
 800f0c6:	4770      	bx	lr
 800f0c8:	200b      	movs	r0, #11
 800f0ca:	e7e4      	b.n	800f096 <rmw_validate_node_name+0x4e>
 800f0cc:	2204      	movs	r2, #4
 800f0ce:	603a      	str	r2, [r7, #0]
 800f0d0:	2d00      	cmp	r5, #0
 800f0d2:	d0df      	beq.n	800f094 <rmw_validate_node_name+0x4c>
 800f0d4:	22fe      	movs	r2, #254	@ 0xfe
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	602a      	str	r2, [r5, #0]
 800f0da:	e7dc      	b.n	800f096 <rmw_validate_node_name+0x4e>
 800f0dc:	2303      	movs	r3, #3
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	d1de      	bne.n	800f0a2 <rmw_validate_node_name+0x5a>
 800f0e4:	e7d6      	b.n	800f094 <rmw_validate_node_name+0x4c>
 800f0e6:	bf00      	nop
 800f0e8:	080138c0 	.word	0x080138c0

0800f0ec <rmw_node_name_validation_result_string>:
 800f0ec:	2804      	cmp	r0, #4
 800f0ee:	bf9a      	itte	ls
 800f0f0:	4b02      	ldrls	r3, [pc, #8]	@ (800f0fc <rmw_node_name_validation_result_string+0x10>)
 800f0f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800f0f6:	4802      	ldrhi	r0, [pc, #8]	@ (800f100 <rmw_node_name_validation_result_string+0x14>)
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	08013608 	.word	0x08013608
 800f100:	0801351c 	.word	0x0801351c

0800f104 <get_memory>:
 800f104:	4603      	mov	r3, r0
 800f106:	6840      	ldr	r0, [r0, #4]
 800f108:	b158      	cbz	r0, 800f122 <get_memory+0x1e>
 800f10a:	6882      	ldr	r2, [r0, #8]
 800f10c:	605a      	str	r2, [r3, #4]
 800f10e:	b10a      	cbz	r2, 800f114 <get_memory+0x10>
 800f110:	2100      	movs	r1, #0
 800f112:	6051      	str	r1, [r2, #4]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	6082      	str	r2, [r0, #8]
 800f118:	b102      	cbz	r2, 800f11c <get_memory+0x18>
 800f11a:	6050      	str	r0, [r2, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	6042      	str	r2, [r0, #4]
 800f120:	6018      	str	r0, [r3, #0]
 800f122:	4770      	bx	lr

0800f124 <put_memory>:
 800f124:	684b      	ldr	r3, [r1, #4]
 800f126:	b10b      	cbz	r3, 800f12c <put_memory+0x8>
 800f128:	688a      	ldr	r2, [r1, #8]
 800f12a:	609a      	str	r2, [r3, #8]
 800f12c:	688a      	ldr	r2, [r1, #8]
 800f12e:	b102      	cbz	r2, 800f132 <put_memory+0xe>
 800f130:	6053      	str	r3, [r2, #4]
 800f132:	6803      	ldr	r3, [r0, #0]
 800f134:	428b      	cmp	r3, r1
 800f136:	6843      	ldr	r3, [r0, #4]
 800f138:	bf08      	it	eq
 800f13a:	6002      	streq	r2, [r0, #0]
 800f13c:	608b      	str	r3, [r1, #8]
 800f13e:	b103      	cbz	r3, 800f142 <put_memory+0x1e>
 800f140:	6059      	str	r1, [r3, #4]
 800f142:	2300      	movs	r3, #0
 800f144:	604b      	str	r3, [r1, #4]
 800f146:	6041      	str	r1, [r0, #4]
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <rmw_get_implementation_identifier>:
 800f14c:	4b01      	ldr	r3, [pc, #4]	@ (800f154 <rmw_get_implementation_identifier+0x8>)
 800f14e:	6818      	ldr	r0, [r3, #0]
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	08013634 	.word	0x08013634

0800f158 <rmw_init_options_init>:
 800f158:	b084      	sub	sp, #16
 800f15a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f15e:	ad09      	add	r5, sp, #36	@ 0x24
 800f160:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f164:	b130      	cbz	r0, 800f174 <rmw_init_options_init+0x1c>
 800f166:	4604      	mov	r4, r0
 800f168:	4628      	mov	r0, r5
 800f16a:	f7f9 ffc9 	bl	8009100 <rcutils_allocator_is_valid>
 800f16e:	b108      	cbz	r0, 800f174 <rmw_init_options_init+0x1c>
 800f170:	68a3      	ldr	r3, [r4, #8]
 800f172:	b123      	cbz	r3, 800f17e <rmw_init_options_init+0x26>
 800f174:	200b      	movs	r0, #11
 800f176:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17a:	b004      	add	sp, #16
 800f17c:	4770      	bx	lr
 800f17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f180:	4f1c      	ldr	r7, [pc, #112]	@ (800f1f4 <rmw_init_options_init+0x9c>)
 800f182:	682e      	ldr	r6, [r5, #0]
 800f184:	683d      	ldr	r5, [r7, #0]
 800f186:	60a5      	str	r5, [r4, #8]
 800f188:	f04f 0800 	mov.w	r8, #0
 800f18c:	f04f 0900 	mov.w	r9, #0
 800f190:	f104 0520 	add.w	r5, r4, #32
 800f194:	e9c4 8900 	strd	r8, r9, [r4]
 800f198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f19a:	4b17      	ldr	r3, [pc, #92]	@ (800f1f8 <rmw_init_options_init+0xa0>)
 800f19c:	4817      	ldr	r0, [pc, #92]	@ (800f1fc <rmw_init_options_init+0xa4>)
 800f19e:	602e      	str	r6, [r5, #0]
 800f1a0:	4917      	ldr	r1, [pc, #92]	@ (800f200 <rmw_init_options_init+0xa8>)
 800f1a2:	61e3      	str	r3, [r4, #28]
 800f1a4:	2203      	movs	r2, #3
 800f1a6:	f7fa fc2b 	bl	8009a00 <rmw_uxrce_init_init_options_impl_memory>
 800f1aa:	4814      	ldr	r0, [pc, #80]	@ (800f1fc <rmw_init_options_init+0xa4>)
 800f1ac:	f7ff ffaa 	bl	800f104 <get_memory>
 800f1b0:	b1e8      	cbz	r0, 800f1ee <rmw_init_options_init+0x96>
 800f1b2:	4a14      	ldr	r2, [pc, #80]	@ (800f204 <rmw_init_options_init+0xac>)
 800f1b4:	68c3      	ldr	r3, [r0, #12]
 800f1b6:	6851      	ldr	r1, [r2, #4]
 800f1b8:	7810      	ldrb	r0, [r2, #0]
 800f1ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1bc:	7418      	strb	r0, [r3, #16]
 800f1be:	6159      	str	r1, [r3, #20]
 800f1c0:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800f1c4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800f1c8:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800f1cc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800f1d0:	f7fd fac6 	bl	800c760 <uxr_nanos>
 800f1d4:	f002 fcb2 	bl	8011b3c <srand>
 800f1d8:	f002 fcde 	bl	8011b98 <rand>
 800f1dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1de:	6298      	str	r0, [r3, #40]	@ 0x28
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d0f9      	beq.n	800f1d8 <rmw_init_options_init+0x80>
 800f1e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	b004      	add	sp, #16
 800f1ec:	4770      	bx	lr
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	e7c1      	b.n	800f176 <rmw_init_options_init+0x1e>
 800f1f2:	bf00      	nop
 800f1f4:	08013634 	.word	0x08013634
 800f1f8:	080131dc 	.word	0x080131dc
 800f1fc:	2000c77c 	.word	0x2000c77c
 800f200:	2000c3d0 	.word	0x2000c3d0
 800f204:	20009460 	.word	0x20009460

0800f208 <rmw_init_options_copy>:
 800f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20a:	b158      	cbz	r0, 800f224 <rmw_init_options_copy+0x1c>
 800f20c:	460e      	mov	r6, r1
 800f20e:	b149      	cbz	r1, 800f224 <rmw_init_options_copy+0x1c>
 800f210:	4604      	mov	r4, r0
 800f212:	6880      	ldr	r0, [r0, #8]
 800f214:	b120      	cbz	r0, 800f220 <rmw_init_options_copy+0x18>
 800f216:	4b1b      	ldr	r3, [pc, #108]	@ (800f284 <rmw_init_options_copy+0x7c>)
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	f7f0 ffe1 	bl	80001e0 <strcmp>
 800f21e:	bb60      	cbnz	r0, 800f27a <rmw_init_options_copy+0x72>
 800f220:	68b3      	ldr	r3, [r6, #8]
 800f222:	b113      	cbz	r3, 800f22a <rmw_init_options_copy+0x22>
 800f224:	230b      	movs	r3, #11
 800f226:	4618      	mov	r0, r3
 800f228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22a:	4623      	mov	r3, r4
 800f22c:	4632      	mov	r2, r6
 800f22e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800f232:	681d      	ldr	r5, [r3, #0]
 800f234:	6858      	ldr	r0, [r3, #4]
 800f236:	6899      	ldr	r1, [r3, #8]
 800f238:	68df      	ldr	r7, [r3, #12]
 800f23a:	60d7      	str	r7, [r2, #12]
 800f23c:	3310      	adds	r3, #16
 800f23e:	4563      	cmp	r3, ip
 800f240:	6015      	str	r5, [r2, #0]
 800f242:	6050      	str	r0, [r2, #4]
 800f244:	6091      	str	r1, [r2, #8]
 800f246:	f102 0210 	add.w	r2, r2, #16
 800f24a:	d1f2      	bne.n	800f232 <rmw_init_options_copy+0x2a>
 800f24c:	6819      	ldr	r1, [r3, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	480d      	ldr	r0, [pc, #52]	@ (800f288 <rmw_init_options_copy+0x80>)
 800f252:	6053      	str	r3, [r2, #4]
 800f254:	6011      	str	r1, [r2, #0]
 800f256:	f7ff ff55 	bl	800f104 <get_memory>
 800f25a:	b188      	cbz	r0, 800f280 <rmw_init_options_copy+0x78>
 800f25c:	68c5      	ldr	r5, [r0, #12]
 800f25e:	6375      	str	r5, [r6, #52]	@ 0x34
 800f260:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800f262:	3610      	adds	r6, #16
 800f264:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f266:	f105 0410 	add.w	r4, r5, #16
 800f26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f26c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f270:	2300      	movs	r3, #0
 800f272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f276:	4618      	mov	r0, r3
 800f278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27a:	230c      	movs	r3, #12
 800f27c:	4618      	mov	r0, r3
 800f27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f280:	2301      	movs	r3, #1
 800f282:	e7d0      	b.n	800f226 <rmw_init_options_copy+0x1e>
 800f284:	08013634 	.word	0x08013634
 800f288:	2000c77c 	.word	0x2000c77c

0800f28c <rmw_init_options_fini>:
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d036      	beq.n	800f2fe <rmw_init_options_fini+0x72>
 800f290:	b530      	push	{r4, r5, lr}
 800f292:	4604      	mov	r4, r0
 800f294:	b08f      	sub	sp, #60	@ 0x3c
 800f296:	3020      	adds	r0, #32
 800f298:	f7f9 ff32 	bl	8009100 <rcutils_allocator_is_valid>
 800f29c:	b328      	cbz	r0, 800f2ea <rmw_init_options_fini+0x5e>
 800f29e:	68a0      	ldr	r0, [r4, #8]
 800f2a0:	b120      	cbz	r0, 800f2ac <rmw_init_options_fini+0x20>
 800f2a2:	4b18      	ldr	r3, [pc, #96]	@ (800f304 <rmw_init_options_fini+0x78>)
 800f2a4:	6819      	ldr	r1, [r3, #0]
 800f2a6:	f7f0 ff9b 	bl	80001e0 <strcmp>
 800f2aa:	bb30      	cbnz	r0, 800f2fa <rmw_init_options_fini+0x6e>
 800f2ac:	4b16      	ldr	r3, [pc, #88]	@ (800f308 <rmw_init_options_fini+0x7c>)
 800f2ae:	6819      	ldr	r1, [r3, #0]
 800f2b0:	b1f9      	cbz	r1, 800f2f2 <rmw_init_options_fini+0x66>
 800f2b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f2b4:	e001      	b.n	800f2ba <rmw_init_options_fini+0x2e>
 800f2b6:	6889      	ldr	r1, [r1, #8]
 800f2b8:	b1d9      	cbz	r1, 800f2f2 <rmw_init_options_fini+0x66>
 800f2ba:	68cb      	ldr	r3, [r1, #12]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d1fa      	bne.n	800f2b6 <rmw_init_options_fini+0x2a>
 800f2c0:	4811      	ldr	r0, [pc, #68]	@ (800f308 <rmw_init_options_fini+0x7c>)
 800f2c2:	f7ff ff2f 	bl	800f124 <put_memory>
 800f2c6:	466d      	mov	r5, sp
 800f2c8:	4668      	mov	r0, sp
 800f2ca:	f7ff fe3d 	bl	800ef48 <rmw_get_zero_initialized_init_options>
 800f2ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f2de:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	b00f      	add	sp, #60	@ 0x3c
 800f2e8:	bd30      	pop	{r4, r5, pc}
 800f2ea:	230b      	movs	r3, #11
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	b00f      	add	sp, #60	@ 0x3c
 800f2f0:	bd30      	pop	{r4, r5, pc}
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	b00f      	add	sp, #60	@ 0x3c
 800f2f8:	bd30      	pop	{r4, r5, pc}
 800f2fa:	230c      	movs	r3, #12
 800f2fc:	e7f2      	b.n	800f2e4 <rmw_init_options_fini+0x58>
 800f2fe:	230b      	movs	r3, #11
 800f300:	4618      	mov	r0, r3
 800f302:	4770      	bx	lr
 800f304:	08013634 	.word	0x08013634
 800f308:	2000c77c 	.word	0x2000c77c

0800f30c <rmw_init>:
 800f30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f310:	b082      	sub	sp, #8
 800f312:	2800      	cmp	r0, #0
 800f314:	f000 80d6 	beq.w	800f4c4 <rmw_init+0x1b8>
 800f318:	460e      	mov	r6, r1
 800f31a:	2900      	cmp	r1, #0
 800f31c:	f000 80d2 	beq.w	800f4c4 <rmw_init+0x1b8>
 800f320:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f322:	4605      	mov	r5, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	f000 80cd 	beq.w	800f4c4 <rmw_init+0x1b8>
 800f32a:	4b79      	ldr	r3, [pc, #484]	@ (800f510 <rmw_init+0x204>)
 800f32c:	6880      	ldr	r0, [r0, #8]
 800f32e:	f8d3 9000 	ldr.w	r9, [r3]
 800f332:	b128      	cbz	r0, 800f340 <rmw_init+0x34>
 800f334:	4649      	mov	r1, r9
 800f336:	f7f0 ff53 	bl	80001e0 <strcmp>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	f040 80cc 	bne.w	800f4d8 <rmw_init+0x1cc>
 800f340:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f344:	68eb      	ldr	r3, [r5, #12]
 800f346:	61f3      	str	r3, [r6, #28]
 800f348:	e9c6 0100 	strd	r0, r1, [r6]
 800f34c:	2201      	movs	r2, #1
 800f34e:	4971      	ldr	r1, [pc, #452]	@ (800f514 <rmw_init+0x208>)
 800f350:	4871      	ldr	r0, [pc, #452]	@ (800f518 <rmw_init+0x20c>)
 800f352:	f8c6 9008 	str.w	r9, [r6, #8]
 800f356:	f7fa fafb 	bl	8009950 <rmw_uxrce_init_session_memory>
 800f35a:	4870      	ldr	r0, [pc, #448]	@ (800f51c <rmw_init+0x210>)
 800f35c:	4970      	ldr	r1, [pc, #448]	@ (800f520 <rmw_init+0x214>)
 800f35e:	2204      	movs	r2, #4
 800f360:	f7fa fb30 	bl	80099c4 <rmw_uxrce_init_static_input_buffer_memory>
 800f364:	486c      	ldr	r0, [pc, #432]	@ (800f518 <rmw_init+0x20c>)
 800f366:	f7ff fecd 	bl	800f104 <get_memory>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	f000 80af 	beq.w	800f4ce <rmw_init+0x1c2>
 800f370:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800f372:	68c4      	ldr	r4, [r0, #12]
 800f374:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f376:	7c39      	ldrb	r1, [r7, #16]
 800f378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f37c:	9001      	str	r0, [sp, #4]
 800f37e:	6a38      	ldr	r0, [r7, #32]
 800f380:	9000      	str	r0, [sp, #0]
 800f382:	f104 0a10 	add.w	sl, r4, #16
 800f386:	4650      	mov	r0, sl
 800f388:	f000 fd90 	bl	800feac <uxr_set_custom_transport_callbacks>
 800f38c:	f241 5294 	movw	r2, #5524	@ 0x1594
 800f390:	f241 5398 	movw	r3, #5528	@ 0x1598
 800f394:	f04f 0800 	mov.w	r8, #0
 800f398:	f241 509c 	movw	r0, #5532	@ 0x159c
 800f39c:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800f3a0:	f844 8002 	str.w	r8, [r4, r2]
 800f3a4:	f844 8003 	str.w	r8, [r4, r3]
 800f3a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f3ac:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800f3b0:	f844 8000 	str.w	r8, [r4, r0]
 800f3b4:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800f3b8:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f3bc:	4859      	ldr	r0, [pc, #356]	@ (800f524 <rmw_init+0x218>)
 800f3be:	f8c1 8000 	str.w	r8, [r1]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800f3c8:	4957      	ldr	r1, [pc, #348]	@ (800f528 <rmw_init+0x21c>)
 800f3ca:	64b4      	str	r4, [r6, #72]	@ 0x48
 800f3cc:	f7fa faa6 	bl	800991c <rmw_uxrce_init_node_memory>
 800f3d0:	4956      	ldr	r1, [pc, #344]	@ (800f52c <rmw_init+0x220>)
 800f3d2:	4857      	ldr	r0, [pc, #348]	@ (800f530 <rmw_init+0x224>)
 800f3d4:	2205      	movs	r2, #5
 800f3d6:	f7fa fa87 	bl	80098e8 <rmw_uxrce_init_subscription_memory>
 800f3da:	4956      	ldr	r1, [pc, #344]	@ (800f534 <rmw_init+0x228>)
 800f3dc:	4856      	ldr	r0, [pc, #344]	@ (800f538 <rmw_init+0x22c>)
 800f3de:	220a      	movs	r2, #10
 800f3e0:	f7fa fa68 	bl	80098b4 <rmw_uxrce_init_publisher_memory>
 800f3e4:	4955      	ldr	r1, [pc, #340]	@ (800f53c <rmw_init+0x230>)
 800f3e6:	4856      	ldr	r0, [pc, #344]	@ (800f540 <rmw_init+0x234>)
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f7fa fa2f 	bl	800984c <rmw_uxrce_init_service_memory>
 800f3ee:	4955      	ldr	r1, [pc, #340]	@ (800f544 <rmw_init+0x238>)
 800f3f0:	4855      	ldr	r0, [pc, #340]	@ (800f548 <rmw_init+0x23c>)
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f7fa fa44 	bl	8009880 <rmw_uxrce_init_client_memory>
 800f3f8:	4954      	ldr	r1, [pc, #336]	@ (800f54c <rmw_init+0x240>)
 800f3fa:	4855      	ldr	r0, [pc, #340]	@ (800f550 <rmw_init+0x244>)
 800f3fc:	220f      	movs	r2, #15
 800f3fe:	f7fa fac5 	bl	800998c <rmw_uxrce_init_topic_memory>
 800f402:	4954      	ldr	r1, [pc, #336]	@ (800f554 <rmw_init+0x248>)
 800f404:	4854      	ldr	r0, [pc, #336]	@ (800f558 <rmw_init+0x24c>)
 800f406:	2203      	movs	r2, #3
 800f408:	f7fa fafa 	bl	8009a00 <rmw_uxrce_init_init_options_impl_memory>
 800f40c:	4953      	ldr	r1, [pc, #332]	@ (800f55c <rmw_init+0x250>)
 800f40e:	4854      	ldr	r0, [pc, #336]	@ (800f560 <rmw_init+0x254>)
 800f410:	2204      	movs	r2, #4
 800f412:	f7fa fb0f 	bl	8009a34 <rmw_uxrce_init_wait_set_memory>
 800f416:	4953      	ldr	r1, [pc, #332]	@ (800f564 <rmw_init+0x258>)
 800f418:	4853      	ldr	r0, [pc, #332]	@ (800f568 <rmw_init+0x25c>)
 800f41a:	2204      	movs	r2, #4
 800f41c:	f7fa fb26 	bl	8009a6c <rmw_uxrce_init_guard_condition_memory>
 800f420:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f422:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800f424:	4642      	mov	r2, r8
 800f426:	f000 fb03 	bl	800fa30 <rmw_uxrce_transport_init>
 800f42a:	4607      	mov	r7, r0
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d158      	bne.n	800f4e2 <rmw_init+0x1d6>
 800f430:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f432:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f438:	4628      	mov	r0, r5
 800f43a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f43e:	f7fc f815 	bl	800b46c <uxr_init_session>
 800f442:	494a      	ldr	r1, [pc, #296]	@ (800f56c <rmw_init+0x260>)
 800f444:	4622      	mov	r2, r4
 800f446:	4628      	mov	r0, r5
 800f448:	f7fc f832 	bl	800b4b0 <uxr_set_topic_callback>
 800f44c:	4948      	ldr	r1, [pc, #288]	@ (800f570 <rmw_init+0x264>)
 800f44e:	463a      	mov	r2, r7
 800f450:	4628      	mov	r0, r5
 800f452:	f7fc f829 	bl	800b4a8 <uxr_set_status_callback>
 800f456:	4947      	ldr	r1, [pc, #284]	@ (800f574 <rmw_init+0x268>)
 800f458:	463a      	mov	r2, r7
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7fc f82c 	bl	800b4b8 <uxr_set_request_callback>
 800f460:	4945      	ldr	r1, [pc, #276]	@ (800f578 <rmw_init+0x26c>)
 800f462:	463a      	mov	r2, r7
 800f464:	4628      	mov	r0, r5
 800f466:	f7fc f82b 	bl	800b4c0 <uxr_set_reply_callback>
 800f46a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f46e:	2304      	movs	r3, #4
 800f470:	0092      	lsls	r2, r2, #2
 800f472:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f476:	4628      	mov	r0, r5
 800f478:	f7fc f862 	bl	800b540 <uxr_create_input_reliable_stream>
 800f47c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f480:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f484:	0092      	lsls	r2, r2, #2
 800f486:	2304      	movs	r3, #4
 800f488:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f48c:	4628      	mov	r0, r5
 800f48e:	f7fc f82d 	bl	800b4ec <uxr_create_output_reliable_stream>
 800f492:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f496:	4628      	mov	r0, r5
 800f498:	f7fc f84c 	bl	800b534 <uxr_create_input_best_effort_stream>
 800f49c:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f4a0:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f4a4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	3114      	adds	r1, #20
 800f4ac:	f7fc f80c 	bl	800b4c8 <uxr_create_output_best_effort_stream>
 800f4b0:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f7fc fc63 	bl	800bd80 <uxr_create_session>
 800f4ba:	b1f8      	cbz	r0, 800f4fc <rmw_init+0x1f0>
 800f4bc:	4638      	mov	r0, r7
 800f4be:	b002      	add	sp, #8
 800f4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c4:	270b      	movs	r7, #11
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	b002      	add	sp, #8
 800f4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ce:	2701      	movs	r7, #1
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	b002      	add	sp, #8
 800f4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d8:	270c      	movs	r7, #12
 800f4da:	4638      	mov	r0, r7
 800f4dc:	b002      	add	sp, #8
 800f4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e2:	4650      	mov	r0, sl
 800f4e4:	f000 fd22 	bl	800ff2c <uxr_close_custom_transport>
 800f4e8:	480b      	ldr	r0, [pc, #44]	@ (800f518 <rmw_init+0x20c>)
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	f7ff fe1a 	bl	800f124 <put_memory>
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800f4f6:	b002      	add	sp, #8
 800f4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fc:	4650      	mov	r0, sl
 800f4fe:	f000 fd15 	bl	800ff2c <uxr_close_custom_transport>
 800f502:	4805      	ldr	r0, [pc, #20]	@ (800f518 <rmw_init+0x20c>)
 800f504:	4621      	mov	r1, r4
 800f506:	f7ff fe0d 	bl	800f124 <put_memory>
 800f50a:	64b7      	str	r7, [r6, #72]	@ 0x48
 800f50c:	2701      	movs	r7, #1
 800f50e:	e7d5      	b.n	800f4bc <rmw_init+0x1b0>
 800f510:	08013634 	.word	0x08013634
 800f514:	2000c858 	.word	0x2000c858
 800f518:	2000c628 	.word	0x2000c628
 800f51c:	20009480 	.word	0x20009480
 800f520:	2000a260 	.word	0x2000a260
 800f524:	2000c454 	.word	0x2000c454
 800f528:	2000c638 	.word	0x2000c638
 800f52c:	20009d88 	.word	0x20009d88
 800f530:	2000c6ec 	.word	0x2000c6ec
 800f534:	200094a0 	.word	0x200094a0
 800f538:	20009490 	.word	0x20009490
 800f53c:	2000c790 	.word	0x2000c790
 800f540:	2000c6dc 	.word	0x2000c6dc
 800f544:	2000a198 	.word	0x2000a198
 800f548:	20009d10 	.word	0x20009d10
 800f54c:	2000c464 	.word	0x2000c464
 800f550:	2000c618 	.word	0x2000c618
 800f554:	2000c3d0 	.word	0x2000c3d0
 800f558:	2000c77c 	.word	0x2000c77c
 800f55c:	2000c360 	.word	0x2000c360
 800f560:	2000de00 	.word	0x2000de00
 800f564:	2000c6fc 	.word	0x2000c6fc
 800f568:	2000c608 	.word	0x2000c608
 800f56c:	08011661 	.word	0x08011661
 800f570:	08011659 	.word	0x08011659
 800f574:	080116f5 	.word	0x080116f5
 800f578:	0801178d 	.word	0x0801178d

0800f57c <rmw_context_fini>:
 800f57c:	4b17      	ldr	r3, [pc, #92]	@ (800f5dc <rmw_context_fini+0x60>)
 800f57e:	b570      	push	{r4, r5, r6, lr}
 800f580:	681c      	ldr	r4, [r3, #0]
 800f582:	4605      	mov	r5, r0
 800f584:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800f586:	b33c      	cbz	r4, 800f5d8 <rmw_context_fini+0x5c>
 800f588:	2600      	movs	r6, #0
 800f58a:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f58e:	691a      	ldr	r2, [r3, #16]
 800f590:	4282      	cmp	r2, r0
 800f592:	d018      	beq.n	800f5c6 <rmw_context_fini+0x4a>
 800f594:	2c00      	cmp	r4, #0
 800f596:	d1f8      	bne.n	800f58a <rmw_context_fini+0xe>
 800f598:	b188      	cbz	r0, 800f5be <rmw_context_fini+0x42>
 800f59a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f59e:	789b      	ldrb	r3, [r3, #2]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	bf14      	ite	ne
 800f5a4:	210a      	movne	r1, #10
 800f5a6:	2100      	moveq	r1, #0
 800f5a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5ac:	f7fc fdaa 	bl	800c104 <uxr_delete_session_retries>
 800f5b0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5b2:	f7fa fa75 	bl	8009aa0 <rmw_uxrce_fini_session_memory>
 800f5b6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5b8:	3010      	adds	r0, #16
 800f5ba:	f000 fcb7 	bl	800ff2c <uxr_close_custom_transport>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	64ab      	str	r3, [r5, #72]	@ 0x48
 800f5c4:	bd70      	pop	{r4, r5, r6, pc}
 800f5c6:	f103 0018 	add.w	r0, r3, #24
 800f5ca:	f000 f90d 	bl	800f7e8 <rmw_destroy_node>
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5d2:	2c00      	cmp	r4, #0
 800f5d4:	d1d9      	bne.n	800f58a <rmw_context_fini+0xe>
 800f5d6:	e7df      	b.n	800f598 <rmw_context_fini+0x1c>
 800f5d8:	4626      	mov	r6, r4
 800f5da:	e7dd      	b.n	800f598 <rmw_context_fini+0x1c>
 800f5dc:	2000c454 	.word	0x2000c454

0800f5e0 <create_topic>:
 800f5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	4822      	ldr	r0, [pc, #136]	@ (800f674 <create_topic+0x94>)
 800f5ea:	4689      	mov	r9, r1
 800f5ec:	4690      	mov	r8, r2
 800f5ee:	f7ff fd89 	bl	800f104 <get_memory>
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d038      	beq.n	800f66a <create_topic+0x8a>
 800f5f8:	693e      	ldr	r6, [r7, #16]
 800f5fa:	68c4      	ldr	r4, [r0, #12]
 800f5fc:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f67c <create_topic+0x9c>
 800f600:	61a7      	str	r7, [r4, #24]
 800f602:	f241 5596 	movw	r5, #5526	@ 0x1596
 800f606:	f8c4 8014 	str.w	r8, [r4, #20]
 800f60a:	5b70      	ldrh	r0, [r6, r5]
 800f60c:	1c42      	adds	r2, r0, #1
 800f60e:	5372      	strh	r2, [r6, r5]
 800f610:	2102      	movs	r1, #2
 800f612:	f7fb fe6f 	bl	800b2f4 <uxr_object_id>
 800f616:	4651      	mov	r1, sl
 800f618:	6120      	str	r0, [r4, #16]
 800f61a:	223c      	movs	r2, #60	@ 0x3c
 800f61c:	4648      	mov	r0, r9
 800f61e:	f7fa fb73 	bl	8009d08 <generate_topic_name>
 800f622:	b1f0      	cbz	r0, 800f662 <create_topic+0x82>
 800f624:	4d14      	ldr	r5, [pc, #80]	@ (800f678 <create_topic+0x98>)
 800f626:	4640      	mov	r0, r8
 800f628:	4629      	mov	r1, r5
 800f62a:	2264      	movs	r2, #100	@ 0x64
 800f62c:	f7fa fb3c 	bl	8009ca8 <generate_type_name>
 800f630:	b1b8      	cbz	r0, 800f662 <create_topic+0x82>
 800f632:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 800f636:	2106      	movs	r1, #6
 800f638:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f63c:	9501      	str	r5, [sp, #4]
 800f63e:	f8cd a000 	str.w	sl, [sp]
 800f642:	9102      	str	r1, [sp, #8]
 800f644:	6811      	ldr	r1, [r2, #0]
 800f646:	6922      	ldr	r2, [r4, #16]
 800f648:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f64c:	f7fb fd78 	bl	800b140 <uxr_buffer_create_topic_bin>
 800f650:	4602      	mov	r2, r0
 800f652:	6938      	ldr	r0, [r7, #16]
 800f654:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f658:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f65c:	f7fa faee 	bl	8009c3c <run_xrce_session>
 800f660:	b918      	cbnz	r0, 800f66a <create_topic+0x8a>
 800f662:	4620      	mov	r0, r4
 800f664:	f7fa fa92 	bl	8009b8c <rmw_uxrce_fini_topic_memory>
 800f668:	2400      	movs	r4, #0
 800f66a:	4620      	mov	r0, r4
 800f66c:	b004      	add	sp, #16
 800f66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f672:	bf00      	nop
 800f674:	2000c618 	.word	0x2000c618
 800f678:	20009240 	.word	0x20009240
 800f67c:	20009204 	.word	0x20009204

0800f680 <destroy_topic>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	6985      	ldr	r5, [r0, #24]
 800f684:	b1d5      	cbz	r5, 800f6bc <destroy_topic+0x3c>
 800f686:	4604      	mov	r4, r0
 800f688:	6928      	ldr	r0, [r5, #16]
 800f68a:	6922      	ldr	r2, [r4, #16]
 800f68c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f690:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f694:	6819      	ldr	r1, [r3, #0]
 800f696:	f7fb fcd5 	bl	800b044 <uxr_buffer_delete_entity>
 800f69a:	4602      	mov	r2, r0
 800f69c:	6928      	ldr	r0, [r5, #16]
 800f69e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f6a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f6a6:	f7fa fac9 	bl	8009c3c <run_xrce_session>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	bf14      	ite	ne
 800f6b0:	2400      	movne	r4, #0
 800f6b2:	2402      	moveq	r4, #2
 800f6b4:	f7fa fa6a 	bl	8009b8c <rmw_uxrce_fini_topic_memory>
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
 800f6bc:	2401      	movs	r4, #1
 800f6be:	4620      	mov	r0, r4
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
 800f6c2:	bf00      	nop

0800f6c4 <create_node>:
 800f6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6c8:	b083      	sub	sp, #12
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d05f      	beq.n	800f78e <create_node+0xca>
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	4835      	ldr	r0, [pc, #212]	@ (800f7a8 <create_node+0xe4>)
 800f6d2:	460f      	mov	r7, r1
 800f6d4:	4690      	mov	r8, r2
 800f6d6:	461d      	mov	r5, r3
 800f6d8:	f7ff fd14 	bl	800f104 <get_memory>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d056      	beq.n	800f78e <create_node+0xca>
 800f6e0:	68c4      	ldr	r4, [r0, #12]
 800f6e2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	f7ff fd31 	bl	800f14c <rmw_get_implementation_identifier>
 800f6ea:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f6ee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f6f2:	f8c4 9020 	str.w	r9, [r4, #32]
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f7f0 fd7c 	bl	80001f4 <strlen>
 800f6fc:	1c42      	adds	r2, r0, #1
 800f6fe:	2a3c      	cmp	r2, #60	@ 0x3c
 800f700:	f104 0518 	add.w	r5, r4, #24
 800f704:	d840      	bhi.n	800f788 <create_node+0xc4>
 800f706:	4648      	mov	r0, r9
 800f708:	4631      	mov	r1, r6
 800f70a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f70e:	f002 fd6a 	bl	80121e6 <memcpy>
 800f712:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f716:	4638      	mov	r0, r7
 800f718:	f7f0 fd6c 	bl	80001f4 <strlen>
 800f71c:	1c42      	adds	r2, r0, #1
 800f71e:	2a3c      	cmp	r2, #60	@ 0x3c
 800f720:	d832      	bhi.n	800f788 <create_node+0xc4>
 800f722:	4639      	mov	r1, r7
 800f724:	4648      	mov	r0, r9
 800f726:	f002 fd5e 	bl	80121e6 <memcpy>
 800f72a:	f241 5394 	movw	r3, #5524	@ 0x1594
 800f72e:	6922      	ldr	r2, [r4, #16]
 800f730:	5ad0      	ldrh	r0, [r2, r3]
 800f732:	2101      	movs	r1, #1
 800f734:	eb00 0c01 	add.w	ip, r0, r1
 800f738:	f822 c003 	strh.w	ip, [r2, r3]
 800f73c:	f7fb fdda 	bl	800b2f4 <uxr_object_id>
 800f740:	6160      	str	r0, [r4, #20]
 800f742:	783b      	ldrb	r3, [r7, #0]
 800f744:	2b2f      	cmp	r3, #47	@ 0x2f
 800f746:	d127      	bne.n	800f798 <create_node+0xd4>
 800f748:	787b      	ldrb	r3, [r7, #1]
 800f74a:	bb2b      	cbnz	r3, 800f798 <create_node+0xd4>
 800f74c:	4a17      	ldr	r2, [pc, #92]	@ (800f7ac <create_node+0xe8>)
 800f74e:	4818      	ldr	r0, [pc, #96]	@ (800f7b0 <create_node+0xec>)
 800f750:	4633      	mov	r3, r6
 800f752:	213c      	movs	r1, #60	@ 0x3c
 800f754:	f002 fbce 	bl	8011ef4 <sniprintf>
 800f758:	6920      	ldr	r0, [r4, #16]
 800f75a:	4b15      	ldr	r3, [pc, #84]	@ (800f7b0 <create_node+0xec>)
 800f75c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	2306      	movs	r3, #6
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	6811      	ldr	r1, [r2, #0]
 800f768:	6962      	ldr	r2, [r4, #20]
 800f76a:	fa1f f388 	uxth.w	r3, r8
 800f76e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f772:	f7fb fcb3 	bl	800b0dc <uxr_buffer_create_participant_bin>
 800f776:	4602      	mov	r2, r0
 800f778:	6920      	ldr	r0, [r4, #16]
 800f77a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f77e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f782:	f7fa fa5b 	bl	8009c3c <run_xrce_session>
 800f786:	b918      	cbnz	r0, 800f790 <create_node+0xcc>
 800f788:	4628      	mov	r0, r5
 800f78a:	f7fa f98f 	bl	8009aac <rmw_uxrce_fini_node_memory>
 800f78e:	2500      	movs	r5, #0
 800f790:	4628      	mov	r0, r5
 800f792:	b003      	add	sp, #12
 800f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f798:	4a06      	ldr	r2, [pc, #24]	@ (800f7b4 <create_node+0xf0>)
 800f79a:	9600      	str	r6, [sp, #0]
 800f79c:	463b      	mov	r3, r7
 800f79e:	213c      	movs	r1, #60	@ 0x3c
 800f7a0:	4803      	ldr	r0, [pc, #12]	@ (800f7b0 <create_node+0xec>)
 800f7a2:	f002 fba7 	bl	8011ef4 <sniprintf>
 800f7a6:	e7d7      	b.n	800f758 <create_node+0x94>
 800f7a8:	2000c454 	.word	0x2000c454
 800f7ac:	0801315c 	.word	0x0801315c
 800f7b0:	200092a4 	.word	0x200092a4
 800f7b4:	080131a0 	.word	0x080131a0

0800f7b8 <rmw_create_node>:
 800f7b8:	b199      	cbz	r1, 800f7e2 <rmw_create_node+0x2a>
 800f7ba:	b430      	push	{r4, r5}
 800f7bc:	4615      	mov	r5, r2
 800f7be:	461a      	mov	r2, r3
 800f7c0:	780b      	ldrb	r3, [r1, #0]
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	b153      	cbz	r3, 800f7dc <rmw_create_node+0x24>
 800f7c6:	b14d      	cbz	r5, 800f7dc <rmw_create_node+0x24>
 800f7c8:	782b      	ldrb	r3, [r5, #0]
 800f7ca:	b13b      	cbz	r3, 800f7dc <rmw_create_node+0x24>
 800f7cc:	b902      	cbnz	r2, 800f7d0 <rmw_create_node+0x18>
 800f7ce:	69c2      	ldr	r2, [r0, #28]
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	bc30      	pop	{r4, r5}
 800f7d8:	f7ff bf74 	b.w	800f6c4 <create_node>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	bc30      	pop	{r4, r5}
 800f7e0:	4770      	bx	lr
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop

0800f7e8 <rmw_destroy_node>:
 800f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ea:	b328      	cbz	r0, 800f838 <rmw_destroy_node+0x50>
 800f7ec:	4607      	mov	r7, r0
 800f7ee:	6800      	ldr	r0, [r0, #0]
 800f7f0:	b120      	cbz	r0, 800f7fc <rmw_destroy_node+0x14>
 800f7f2:	4b36      	ldr	r3, [pc, #216]	@ (800f8cc <rmw_destroy_node+0xe4>)
 800f7f4:	6819      	ldr	r1, [r3, #0]
 800f7f6:	f7f0 fcf3 	bl	80001e0 <strcmp>
 800f7fa:	b9e8      	cbnz	r0, 800f838 <rmw_destroy_node+0x50>
 800f7fc:	687d      	ldr	r5, [r7, #4]
 800f7fe:	b1dd      	cbz	r5, 800f838 <rmw_destroy_node+0x50>
 800f800:	4b33      	ldr	r3, [pc, #204]	@ (800f8d0 <rmw_destroy_node+0xe8>)
 800f802:	681c      	ldr	r4, [r3, #0]
 800f804:	2c00      	cmp	r4, #0
 800f806:	d05f      	beq.n	800f8c8 <rmw_destroy_node+0xe0>
 800f808:	2600      	movs	r6, #0
 800f80a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f80e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f812:	429d      	cmp	r5, r3
 800f814:	d013      	beq.n	800f83e <rmw_destroy_node+0x56>
 800f816:	2c00      	cmp	r4, #0
 800f818:	d1f7      	bne.n	800f80a <rmw_destroy_node+0x22>
 800f81a:	4b2e      	ldr	r3, [pc, #184]	@ (800f8d4 <rmw_destroy_node+0xec>)
 800f81c:	681c      	ldr	r4, [r3, #0]
 800f81e:	b1c4      	cbz	r4, 800f852 <rmw_destroy_node+0x6a>
 800f820:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f824:	6a0b      	ldr	r3, [r1, #32]
 800f826:	429d      	cmp	r5, r3
 800f828:	d1f9      	bne.n	800f81e <rmw_destroy_node+0x36>
 800f82a:	317c      	adds	r1, #124	@ 0x7c
 800f82c:	4638      	mov	r0, r7
 800f82e:	f000 f8a1 	bl	800f974 <rmw_destroy_subscription>
 800f832:	2801      	cmp	r0, #1
 800f834:	4606      	mov	r6, r0
 800f836:	d1f2      	bne.n	800f81e <rmw_destroy_node+0x36>
 800f838:	2601      	movs	r6, #1
 800f83a:	4630      	mov	r0, r6
 800f83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f83e:	3184      	adds	r1, #132	@ 0x84
 800f840:	4638      	mov	r0, r7
 800f842:	f7f9 ffb3 	bl	80097ac <rmw_destroy_publisher>
 800f846:	2801      	cmp	r0, #1
 800f848:	4606      	mov	r6, r0
 800f84a:	d0f5      	beq.n	800f838 <rmw_destroy_node+0x50>
 800f84c:	2c00      	cmp	r4, #0
 800f84e:	d1dc      	bne.n	800f80a <rmw_destroy_node+0x22>
 800f850:	e7e3      	b.n	800f81a <rmw_destroy_node+0x32>
 800f852:	4b21      	ldr	r3, [pc, #132]	@ (800f8d8 <rmw_destroy_node+0xf0>)
 800f854:	681c      	ldr	r4, [r3, #0]
 800f856:	b16c      	cbz	r4, 800f874 <rmw_destroy_node+0x8c>
 800f858:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f85c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f85e:	429d      	cmp	r5, r3
 800f860:	d1f9      	bne.n	800f856 <rmw_destroy_node+0x6e>
 800f862:	317c      	adds	r1, #124	@ 0x7c
 800f864:	4638      	mov	r0, r7
 800f866:	f000 f841 	bl	800f8ec <rmw_destroy_service>
 800f86a:	2801      	cmp	r0, #1
 800f86c:	4606      	mov	r6, r0
 800f86e:	d0e3      	beq.n	800f838 <rmw_destroy_node+0x50>
 800f870:	2c00      	cmp	r4, #0
 800f872:	d1f1      	bne.n	800f858 <rmw_destroy_node+0x70>
 800f874:	4b19      	ldr	r3, [pc, #100]	@ (800f8dc <rmw_destroy_node+0xf4>)
 800f876:	681c      	ldr	r4, [r3, #0]
 800f878:	b16c      	cbz	r4, 800f896 <rmw_destroy_node+0xae>
 800f87a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f87e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f880:	429d      	cmp	r5, r3
 800f882:	d1f9      	bne.n	800f878 <rmw_destroy_node+0x90>
 800f884:	317c      	adds	r1, #124	@ 0x7c
 800f886:	4638      	mov	r0, r7
 800f888:	f001 ffca 	bl	8011820 <rmw_destroy_client>
 800f88c:	2801      	cmp	r0, #1
 800f88e:	4606      	mov	r6, r0
 800f890:	d0d2      	beq.n	800f838 <rmw_destroy_node+0x50>
 800f892:	2c00      	cmp	r4, #0
 800f894:	d1f1      	bne.n	800f87a <rmw_destroy_node+0x92>
 800f896:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800f89a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f89e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8a2:	6819      	ldr	r1, [r3, #0]
 800f8a4:	f7fb fbce 	bl	800b044 <uxr_buffer_delete_entity>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	6928      	ldr	r0, [r5, #16]
 800f8ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f8b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f8b4:	f7fa f9c2 	bl	8009c3c <run_xrce_session>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	bf08      	it	eq
 800f8bc:	2602      	moveq	r6, #2
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f7fa f8f4 	bl	8009aac <rmw_uxrce_fini_node_memory>
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c8:	4626      	mov	r6, r4
 800f8ca:	e7a6      	b.n	800f81a <rmw_destroy_node+0x32>
 800f8cc:	08013634 	.word	0x08013634
 800f8d0:	20009490 	.word	0x20009490
 800f8d4:	2000c6ec 	.word	0x2000c6ec
 800f8d8:	2000c6dc 	.word	0x2000c6dc
 800f8dc:	20009d10 	.word	0x20009d10

0800f8e0 <rmw_node_get_graph_guard_condition>:
 800f8e0:	6843      	ldr	r3, [r0, #4]
 800f8e2:	6918      	ldr	r0, [r3, #16]
 800f8e4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop

0800f8ec <rmw_destroy_service>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	b128      	cbz	r0, 800f8fc <rmw_destroy_service+0x10>
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	6800      	ldr	r0, [r0, #0]
 800f8f4:	460d      	mov	r5, r1
 800f8f6:	f7fa fa21 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 800f8fa:	b910      	cbnz	r0, 800f902 <rmw_destroy_service+0x16>
 800f8fc:	2401      	movs	r4, #1
 800f8fe:	4620      	mov	r0, r4
 800f900:	bd70      	pop	{r4, r5, r6, pc}
 800f902:	6863      	ldr	r3, [r4, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d0f9      	beq.n	800f8fc <rmw_destroy_service+0x10>
 800f908:	2d00      	cmp	r5, #0
 800f90a:	d0f7      	beq.n	800f8fc <rmw_destroy_service+0x10>
 800f90c:	6828      	ldr	r0, [r5, #0]
 800f90e:	f7fa fa15 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 800f912:	2800      	cmp	r0, #0
 800f914:	d0f2      	beq.n	800f8fc <rmw_destroy_service+0x10>
 800f916:	686e      	ldr	r6, [r5, #4]
 800f918:	2e00      	cmp	r6, #0
 800f91a:	d0ef      	beq.n	800f8fc <rmw_destroy_service+0x10>
 800f91c:	6864      	ldr	r4, [r4, #4]
 800f91e:	6932      	ldr	r2, [r6, #16]
 800f920:	6920      	ldr	r0, [r4, #16]
 800f922:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f926:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f92a:	6819      	ldr	r1, [r3, #0]
 800f92c:	f001 f834 	bl	8010998 <uxr_buffer_cancel_data>
 800f930:	4602      	mov	r2, r0
 800f932:	6920      	ldr	r0, [r4, #16]
 800f934:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f938:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f93c:	f7fa f97e 	bl	8009c3c <run_xrce_session>
 800f940:	6920      	ldr	r0, [r4, #16]
 800f942:	6932      	ldr	r2, [r6, #16]
 800f944:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f948:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f94c:	6819      	ldr	r1, [r3, #0]
 800f94e:	f7fb fb79 	bl	800b044 <uxr_buffer_delete_entity>
 800f952:	4602      	mov	r2, r0
 800f954:	6920      	ldr	r0, [r4, #16]
 800f956:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f95a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f95e:	f7fa f96d 	bl	8009c3c <run_xrce_session>
 800f962:	2800      	cmp	r0, #0
 800f964:	4628      	mov	r0, r5
 800f966:	bf14      	ite	ne
 800f968:	2400      	movne	r4, #0
 800f96a:	2402      	moveq	r4, #2
 800f96c:	f7fa f8e2 	bl	8009b34 <rmw_uxrce_fini_service_memory>
 800f970:	e7c5      	b.n	800f8fe <rmw_destroy_service+0x12>
 800f972:	bf00      	nop

0800f974 <rmw_destroy_subscription>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	b128      	cbz	r0, 800f984 <rmw_destroy_subscription+0x10>
 800f978:	4604      	mov	r4, r0
 800f97a:	6800      	ldr	r0, [r0, #0]
 800f97c:	460d      	mov	r5, r1
 800f97e:	f7fa f9dd 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 800f982:	b910      	cbnz	r0, 800f98a <rmw_destroy_subscription+0x16>
 800f984:	2401      	movs	r4, #1
 800f986:	4620      	mov	r0, r4
 800f988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f98a:	6863      	ldr	r3, [r4, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d0f9      	beq.n	800f984 <rmw_destroy_subscription+0x10>
 800f990:	2d00      	cmp	r5, #0
 800f992:	d0f7      	beq.n	800f984 <rmw_destroy_subscription+0x10>
 800f994:	6828      	ldr	r0, [r5, #0]
 800f996:	f7fa f9d1 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d0f2      	beq.n	800f984 <rmw_destroy_subscription+0x10>
 800f99e:	686c      	ldr	r4, [r5, #4]
 800f9a0:	2c00      	cmp	r4, #0
 800f9a2:	d0ef      	beq.n	800f984 <rmw_destroy_subscription+0x10>
 800f9a4:	6a26      	ldr	r6, [r4, #32]
 800f9a6:	6962      	ldr	r2, [r4, #20]
 800f9a8:	6930      	ldr	r0, [r6, #16]
 800f9aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9b2:	6819      	ldr	r1, [r3, #0]
 800f9b4:	f000 fff0 	bl	8010998 <uxr_buffer_cancel_data>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	6930      	ldr	r0, [r6, #16]
 800f9bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f9c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f9c4:	f7fa f93a 	bl	8009c3c <run_xrce_session>
 800f9c8:	69e0      	ldr	r0, [r4, #28]
 800f9ca:	f7ff fe59 	bl	800f680 <destroy_topic>
 800f9ce:	6a23      	ldr	r3, [r4, #32]
 800f9d0:	6962      	ldr	r2, [r4, #20]
 800f9d2:	6918      	ldr	r0, [r3, #16]
 800f9d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9dc:	6819      	ldr	r1, [r3, #0]
 800f9de:	f7fb fb31 	bl	800b044 <uxr_buffer_delete_entity>
 800f9e2:	6a21      	ldr	r1, [r4, #32]
 800f9e4:	6922      	ldr	r2, [r4, #16]
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	6908      	ldr	r0, [r1, #16]
 800f9ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f9ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9f2:	6809      	ldr	r1, [r1, #0]
 800f9f4:	461c      	mov	r4, r3
 800f9f6:	f7fb fb25 	bl	800b044 <uxr_buffer_delete_entity>
 800f9fa:	4607      	mov	r7, r0
 800f9fc:	6930      	ldr	r0, [r6, #16]
 800f9fe:	4622      	mov	r2, r4
 800fa00:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa04:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa08:	f7fa f918 	bl	8009c3c <run_xrce_session>
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	6930      	ldr	r0, [r6, #16]
 800fa10:	463a      	mov	r2, r7
 800fa12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa1a:	f7fa f90f 	bl	8009c3c <run_xrce_session>
 800fa1e:	b12c      	cbz	r4, 800fa2c <rmw_destroy_subscription+0xb8>
 800fa20:	b120      	cbz	r0, 800fa2c <rmw_destroy_subscription+0xb8>
 800fa22:	2400      	movs	r4, #0
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7fa f86f 	bl	8009b08 <rmw_uxrce_fini_subscription_memory>
 800fa2a:	e7ac      	b.n	800f986 <rmw_destroy_subscription+0x12>
 800fa2c:	2402      	movs	r4, #2
 800fa2e:	e7f9      	b.n	800fa24 <rmw_destroy_subscription+0xb0>

0800fa30 <rmw_uxrce_transport_init>:
 800fa30:	b508      	push	{r3, lr}
 800fa32:	b108      	cbz	r0, 800fa38 <rmw_uxrce_transport_init+0x8>
 800fa34:	f100 0210 	add.w	r2, r0, #16
 800fa38:	b139      	cbz	r1, 800fa4a <rmw_uxrce_transport_init+0x1a>
 800fa3a:	6949      	ldr	r1, [r1, #20]
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	f000 fa41 	bl	800fec4 <uxr_init_custom_transport>
 800fa42:	f080 0001 	eor.w	r0, r0, #1
 800fa46:	b2c0      	uxtb	r0, r0
 800fa48:	bd08      	pop	{r3, pc}
 800fa4a:	4b04      	ldr	r3, [pc, #16]	@ (800fa5c <rmw_uxrce_transport_init+0x2c>)
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	6859      	ldr	r1, [r3, #4]
 800fa50:	f000 fa38 	bl	800fec4 <uxr_init_custom_transport>
 800fa54:	f080 0001 	eor.w	r0, r0, #1
 800fa58:	b2c0      	uxtb	r0, r0
 800fa5a:	bd08      	pop	{r3, pc}
 800fa5c:	20009460 	.word	0x20009460

0800fa60 <rmw_uros_epoch_nanos>:
 800fa60:	4b05      	ldr	r3, [pc, #20]	@ (800fa78 <rmw_uros_epoch_nanos+0x18>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	b123      	cbz	r3, 800fa70 <rmw_uros_epoch_nanos+0x10>
 800fa66:	68d8      	ldr	r0, [r3, #12]
 800fa68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa6c:	f7fb bd84 	b.w	800b578 <uxr_epoch_nanos>
 800fa70:	2000      	movs	r0, #0
 800fa72:	2100      	movs	r1, #0
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	2000c628 	.word	0x2000c628

0800fa7c <ucdr_serialize_endian_array_char>:
 800fa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa80:	4619      	mov	r1, r3
 800fa82:	461e      	mov	r6, r3
 800fa84:	4690      	mov	r8, r2
 800fa86:	4604      	mov	r4, r0
 800fa88:	f7fb fa1a 	bl	800aec0 <ucdr_check_buffer_available_for>
 800fa8c:	b9e0      	cbnz	r0, 800fac8 <ucdr_serialize_endian_array_char+0x4c>
 800fa8e:	4637      	mov	r7, r6
 800fa90:	e009      	b.n	800faa6 <ucdr_serialize_endian_array_char+0x2a>
 800fa92:	68a0      	ldr	r0, [r4, #8]
 800fa94:	f002 fba7 	bl	80121e6 <memcpy>
 800fa98:	68a2      	ldr	r2, [r4, #8]
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	442a      	add	r2, r5
 800fa9e:	442b      	add	r3, r5
 800faa0:	1b7f      	subs	r7, r7, r5
 800faa2:	60a2      	str	r2, [r4, #8]
 800faa4:	6123      	str	r3, [r4, #16]
 800faa6:	2201      	movs	r2, #1
 800faa8:	4639      	mov	r1, r7
 800faaa:	4620      	mov	r0, r4
 800faac:	f7fb fa8e 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fab0:	1bf1      	subs	r1, r6, r7
 800fab2:	4441      	add	r1, r8
 800fab4:	4605      	mov	r5, r0
 800fab6:	4602      	mov	r2, r0
 800fab8:	2800      	cmp	r0, #0
 800faba:	d1ea      	bne.n	800fa92 <ucdr_serialize_endian_array_char+0x16>
 800fabc:	2301      	movs	r3, #1
 800fabe:	7da0      	ldrb	r0, [r4, #22]
 800fac0:	7563      	strb	r3, [r4, #21]
 800fac2:	4058      	eors	r0, r3
 800fac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac8:	4632      	mov	r2, r6
 800faca:	68a0      	ldr	r0, [r4, #8]
 800facc:	4641      	mov	r1, r8
 800face:	f002 fb8a 	bl	80121e6 <memcpy>
 800fad2:	68a2      	ldr	r2, [r4, #8]
 800fad4:	6923      	ldr	r3, [r4, #16]
 800fad6:	4432      	add	r2, r6
 800fad8:	4433      	add	r3, r6
 800fada:	60a2      	str	r2, [r4, #8]
 800fadc:	6123      	str	r3, [r4, #16]
 800fade:	e7ed      	b.n	800fabc <ucdr_serialize_endian_array_char+0x40>

0800fae0 <ucdr_deserialize_endian_array_char>:
 800fae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae4:	4619      	mov	r1, r3
 800fae6:	461e      	mov	r6, r3
 800fae8:	4690      	mov	r8, r2
 800faea:	4604      	mov	r4, r0
 800faec:	f7fb f9e8 	bl	800aec0 <ucdr_check_buffer_available_for>
 800faf0:	b9e0      	cbnz	r0, 800fb2c <ucdr_deserialize_endian_array_char+0x4c>
 800faf2:	4637      	mov	r7, r6
 800faf4:	e009      	b.n	800fb0a <ucdr_deserialize_endian_array_char+0x2a>
 800faf6:	68a1      	ldr	r1, [r4, #8]
 800faf8:	f002 fb75 	bl	80121e6 <memcpy>
 800fafc:	68a2      	ldr	r2, [r4, #8]
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	442a      	add	r2, r5
 800fb02:	442b      	add	r3, r5
 800fb04:	1b7f      	subs	r7, r7, r5
 800fb06:	60a2      	str	r2, [r4, #8]
 800fb08:	6123      	str	r3, [r4, #16]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	4639      	mov	r1, r7
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f7fb fa5c 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fb14:	4605      	mov	r5, r0
 800fb16:	1bf0      	subs	r0, r6, r7
 800fb18:	4440      	add	r0, r8
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	2d00      	cmp	r5, #0
 800fb1e:	d1ea      	bne.n	800faf6 <ucdr_deserialize_endian_array_char+0x16>
 800fb20:	2301      	movs	r3, #1
 800fb22:	7da0      	ldrb	r0, [r4, #22]
 800fb24:	7563      	strb	r3, [r4, #21]
 800fb26:	4058      	eors	r0, r3
 800fb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb2c:	4632      	mov	r2, r6
 800fb2e:	68a1      	ldr	r1, [r4, #8]
 800fb30:	4640      	mov	r0, r8
 800fb32:	f002 fb58 	bl	80121e6 <memcpy>
 800fb36:	68a2      	ldr	r2, [r4, #8]
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	4432      	add	r2, r6
 800fb3c:	4433      	add	r3, r6
 800fb3e:	60a2      	str	r2, [r4, #8]
 800fb40:	6123      	str	r3, [r4, #16]
 800fb42:	e7ed      	b.n	800fb20 <ucdr_deserialize_endian_array_char+0x40>

0800fb44 <ucdr_serialize_array_uint8_t>:
 800fb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb48:	4688      	mov	r8, r1
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4616      	mov	r6, r2
 800fb4e:	4604      	mov	r4, r0
 800fb50:	f7fb f9b6 	bl	800aec0 <ucdr_check_buffer_available_for>
 800fb54:	b9e0      	cbnz	r0, 800fb90 <ucdr_serialize_array_uint8_t+0x4c>
 800fb56:	4637      	mov	r7, r6
 800fb58:	e009      	b.n	800fb6e <ucdr_serialize_array_uint8_t+0x2a>
 800fb5a:	68a0      	ldr	r0, [r4, #8]
 800fb5c:	f002 fb43 	bl	80121e6 <memcpy>
 800fb60:	68a2      	ldr	r2, [r4, #8]
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	442a      	add	r2, r5
 800fb66:	442b      	add	r3, r5
 800fb68:	1b7f      	subs	r7, r7, r5
 800fb6a:	60a2      	str	r2, [r4, #8]
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	4639      	mov	r1, r7
 800fb72:	4620      	mov	r0, r4
 800fb74:	f7fb fa2a 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fb78:	1bf1      	subs	r1, r6, r7
 800fb7a:	4441      	add	r1, r8
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	4602      	mov	r2, r0
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d1ea      	bne.n	800fb5a <ucdr_serialize_array_uint8_t+0x16>
 800fb84:	2301      	movs	r3, #1
 800fb86:	7da0      	ldrb	r0, [r4, #22]
 800fb88:	7563      	strb	r3, [r4, #21]
 800fb8a:	4058      	eors	r0, r3
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	4632      	mov	r2, r6
 800fb92:	68a0      	ldr	r0, [r4, #8]
 800fb94:	4641      	mov	r1, r8
 800fb96:	f002 fb26 	bl	80121e6 <memcpy>
 800fb9a:	68a3      	ldr	r3, [r4, #8]
 800fb9c:	6922      	ldr	r2, [r4, #16]
 800fb9e:	4433      	add	r3, r6
 800fba0:	4432      	add	r2, r6
 800fba2:	60a3      	str	r3, [r4, #8]
 800fba4:	6122      	str	r2, [r4, #16]
 800fba6:	e7ed      	b.n	800fb84 <ucdr_serialize_array_uint8_t+0x40>

0800fba8 <ucdr_serialize_endian_array_uint8_t>:
 800fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbac:	4619      	mov	r1, r3
 800fbae:	461e      	mov	r6, r3
 800fbb0:	4690      	mov	r8, r2
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	f7fb f984 	bl	800aec0 <ucdr_check_buffer_available_for>
 800fbb8:	b9e0      	cbnz	r0, 800fbf4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fbba:	4637      	mov	r7, r6
 800fbbc:	e009      	b.n	800fbd2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800fbbe:	68a0      	ldr	r0, [r4, #8]
 800fbc0:	f002 fb11 	bl	80121e6 <memcpy>
 800fbc4:	68a2      	ldr	r2, [r4, #8]
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	442a      	add	r2, r5
 800fbca:	442b      	add	r3, r5
 800fbcc:	1b7f      	subs	r7, r7, r5
 800fbce:	60a2      	str	r2, [r4, #8]
 800fbd0:	6123      	str	r3, [r4, #16]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f7fb f9f8 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fbdc:	1bf1      	subs	r1, r6, r7
 800fbde:	4441      	add	r1, r8
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d1ea      	bne.n	800fbbe <ucdr_serialize_endian_array_uint8_t+0x16>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	7da0      	ldrb	r0, [r4, #22]
 800fbec:	7563      	strb	r3, [r4, #21]
 800fbee:	4058      	eors	r0, r3
 800fbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf4:	4632      	mov	r2, r6
 800fbf6:	68a0      	ldr	r0, [r4, #8]
 800fbf8:	4641      	mov	r1, r8
 800fbfa:	f002 faf4 	bl	80121e6 <memcpy>
 800fbfe:	68a2      	ldr	r2, [r4, #8]
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	4432      	add	r2, r6
 800fc04:	4433      	add	r3, r6
 800fc06:	60a2      	str	r2, [r4, #8]
 800fc08:	6123      	str	r3, [r4, #16]
 800fc0a:	e7ed      	b.n	800fbe8 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fc0c <ucdr_deserialize_array_uint8_t>:
 800fc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc10:	4688      	mov	r8, r1
 800fc12:	4611      	mov	r1, r2
 800fc14:	4616      	mov	r6, r2
 800fc16:	4604      	mov	r4, r0
 800fc18:	f7fb f952 	bl	800aec0 <ucdr_check_buffer_available_for>
 800fc1c:	b9e0      	cbnz	r0, 800fc58 <ucdr_deserialize_array_uint8_t+0x4c>
 800fc1e:	4637      	mov	r7, r6
 800fc20:	e009      	b.n	800fc36 <ucdr_deserialize_array_uint8_t+0x2a>
 800fc22:	68a1      	ldr	r1, [r4, #8]
 800fc24:	f002 fadf 	bl	80121e6 <memcpy>
 800fc28:	68a2      	ldr	r2, [r4, #8]
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	442a      	add	r2, r5
 800fc2e:	442b      	add	r3, r5
 800fc30:	1b7f      	subs	r7, r7, r5
 800fc32:	60a2      	str	r2, [r4, #8]
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	2201      	movs	r2, #1
 800fc38:	4639      	mov	r1, r7
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f7fb f9c6 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fc40:	4605      	mov	r5, r0
 800fc42:	1bf0      	subs	r0, r6, r7
 800fc44:	4440      	add	r0, r8
 800fc46:	462a      	mov	r2, r5
 800fc48:	2d00      	cmp	r5, #0
 800fc4a:	d1ea      	bne.n	800fc22 <ucdr_deserialize_array_uint8_t+0x16>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	7da0      	ldrb	r0, [r4, #22]
 800fc50:	7563      	strb	r3, [r4, #21]
 800fc52:	4058      	eors	r0, r3
 800fc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc58:	4632      	mov	r2, r6
 800fc5a:	68a1      	ldr	r1, [r4, #8]
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	f002 fac2 	bl	80121e6 <memcpy>
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	6922      	ldr	r2, [r4, #16]
 800fc66:	4433      	add	r3, r6
 800fc68:	4432      	add	r2, r6
 800fc6a:	60a3      	str	r3, [r4, #8]
 800fc6c:	6122      	str	r2, [r4, #16]
 800fc6e:	e7ed      	b.n	800fc4c <ucdr_deserialize_array_uint8_t+0x40>

0800fc70 <ucdr_deserialize_endian_array_uint8_t>:
 800fc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc74:	4619      	mov	r1, r3
 800fc76:	461e      	mov	r6, r3
 800fc78:	4690      	mov	r8, r2
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	f7fb f920 	bl	800aec0 <ucdr_check_buffer_available_for>
 800fc80:	b9e0      	cbnz	r0, 800fcbc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800fc82:	4637      	mov	r7, r6
 800fc84:	e009      	b.n	800fc9a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800fc86:	68a1      	ldr	r1, [r4, #8]
 800fc88:	f002 faad 	bl	80121e6 <memcpy>
 800fc8c:	68a2      	ldr	r2, [r4, #8]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	442a      	add	r2, r5
 800fc92:	442b      	add	r3, r5
 800fc94:	1b7f      	subs	r7, r7, r5
 800fc96:	60a2      	str	r2, [r4, #8]
 800fc98:	6123      	str	r3, [r4, #16]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	4639      	mov	r1, r7
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f7fb f994 	bl	800afcc <ucdr_check_final_buffer_behavior_array>
 800fca4:	4605      	mov	r5, r0
 800fca6:	1bf0      	subs	r0, r6, r7
 800fca8:	4440      	add	r0, r8
 800fcaa:	462a      	mov	r2, r5
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	d1ea      	bne.n	800fc86 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	7da0      	ldrb	r0, [r4, #22]
 800fcb4:	7563      	strb	r3, [r4, #21]
 800fcb6:	4058      	eors	r0, r3
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcbc:	4632      	mov	r2, r6
 800fcbe:	68a1      	ldr	r1, [r4, #8]
 800fcc0:	4640      	mov	r0, r8
 800fcc2:	f002 fa90 	bl	80121e6 <memcpy>
 800fcc6:	68a2      	ldr	r2, [r4, #8]
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	4432      	add	r2, r6
 800fccc:	4433      	add	r3, r6
 800fcce:	60a2      	str	r2, [r4, #8]
 800fcd0:	6123      	str	r3, [r4, #16]
 800fcd2:	e7ed      	b.n	800fcb0 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800fcd4 <ucdr_serialize_sequence_char>:
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	460e      	mov	r6, r1
 800fcd8:	4615      	mov	r5, r2
 800fcda:	7d01      	ldrb	r1, [r0, #20]
 800fcdc:	4604      	mov	r4, r0
 800fcde:	f7fa fbb5 	bl	800a44c <ucdr_serialize_endian_uint32_t>
 800fce2:	b90d      	cbnz	r5, 800fce8 <ucdr_serialize_sequence_char+0x14>
 800fce4:	2001      	movs	r0, #1
 800fce6:	bd70      	pop	{r4, r5, r6, pc}
 800fce8:	7d21      	ldrb	r1, [r4, #20]
 800fcea:	462b      	mov	r3, r5
 800fcec:	4632      	mov	r2, r6
 800fcee:	4620      	mov	r0, r4
 800fcf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcf4:	f7ff bec2 	b.w	800fa7c <ucdr_serialize_endian_array_char>

0800fcf8 <ucdr_deserialize_sequence_char>:
 800fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfc:	461d      	mov	r5, r3
 800fcfe:	4616      	mov	r6, r2
 800fd00:	460f      	mov	r7, r1
 800fd02:	461a      	mov	r2, r3
 800fd04:	7d01      	ldrb	r1, [r0, #20]
 800fd06:	4604      	mov	r4, r0
 800fd08:	f7fa fcc8 	bl	800a69c <ucdr_deserialize_endian_uint32_t>
 800fd0c:	682b      	ldr	r3, [r5, #0]
 800fd0e:	429e      	cmp	r6, r3
 800fd10:	bf3c      	itt	cc
 800fd12:	2201      	movcc	r2, #1
 800fd14:	75a2      	strbcc	r2, [r4, #22]
 800fd16:	b913      	cbnz	r3, 800fd1e <ucdr_deserialize_sequence_char+0x26>
 800fd18:	2001      	movs	r0, #1
 800fd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd1e:	7d21      	ldrb	r1, [r4, #20]
 800fd20:	463a      	mov	r2, r7
 800fd22:	4620      	mov	r0, r4
 800fd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd28:	f7ff beda 	b.w	800fae0 <ucdr_deserialize_endian_array_char>

0800fd2c <ucdr_serialize_sequence_uint8_t>:
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	460e      	mov	r6, r1
 800fd30:	4615      	mov	r5, r2
 800fd32:	7d01      	ldrb	r1, [r0, #20]
 800fd34:	4604      	mov	r4, r0
 800fd36:	f7fa fb89 	bl	800a44c <ucdr_serialize_endian_uint32_t>
 800fd3a:	b90d      	cbnz	r5, 800fd40 <ucdr_serialize_sequence_uint8_t+0x14>
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	7d21      	ldrb	r1, [r4, #20]
 800fd42:	462b      	mov	r3, r5
 800fd44:	4632      	mov	r2, r6
 800fd46:	4620      	mov	r0, r4
 800fd48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd4c:	f7ff bf2c 	b.w	800fba8 <ucdr_serialize_endian_array_uint8_t>

0800fd50 <ucdr_deserialize_sequence_uint8_t>:
 800fd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd54:	461d      	mov	r5, r3
 800fd56:	4616      	mov	r6, r2
 800fd58:	460f      	mov	r7, r1
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	7d01      	ldrb	r1, [r0, #20]
 800fd5e:	4604      	mov	r4, r0
 800fd60:	f7fa fc9c 	bl	800a69c <ucdr_deserialize_endian_uint32_t>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	429e      	cmp	r6, r3
 800fd68:	bf3c      	itt	cc
 800fd6a:	2201      	movcc	r2, #1
 800fd6c:	75a2      	strbcc	r2, [r4, #22]
 800fd6e:	b913      	cbnz	r3, 800fd76 <ucdr_deserialize_sequence_uint8_t+0x26>
 800fd70:	2001      	movs	r0, #1
 800fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd76:	7d21      	ldrb	r1, [r4, #20]
 800fd78:	463a      	mov	r2, r7
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	f7ff bf76 	b.w	800fc70 <ucdr_deserialize_endian_array_uint8_t>

0800fd84 <ucdr_serialize_string>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	4604      	mov	r4, r0
 800fd8a:	4608      	mov	r0, r1
 800fd8c:	9101      	str	r1, [sp, #4]
 800fd8e:	f7f0 fa31 	bl	80001f4 <strlen>
 800fd92:	9901      	ldr	r1, [sp, #4]
 800fd94:	4602      	mov	r2, r0
 800fd96:	3201      	adds	r2, #1
 800fd98:	4620      	mov	r0, r4
 800fd9a:	b002      	add	sp, #8
 800fd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fda0:	f7ff bf98 	b.w	800fcd4 <ucdr_serialize_sequence_char>

0800fda4 <ucdr_deserialize_string>:
 800fda4:	b500      	push	{lr}
 800fda6:	b083      	sub	sp, #12
 800fda8:	ab01      	add	r3, sp, #4
 800fdaa:	f7ff ffa5 	bl	800fcf8 <ucdr_deserialize_sequence_char>
 800fdae:	b003      	add	sp, #12
 800fdb0:	f85d fb04 	ldr.w	pc, [sp], #4

0800fdb4 <get_custom_error>:
 800fdb4:	4b01      	ldr	r3, [pc, #4]	@ (800fdbc <get_custom_error+0x8>)
 800fdb6:	7818      	ldrb	r0, [r3, #0]
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	200092e0 	.word	0x200092e0

0800fdc0 <recv_custom_msg>:
 800fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800fdc8:	b089      	sub	sp, #36	@ 0x24
 800fdca:	2600      	movs	r6, #0
 800fdcc:	4604      	mov	r4, r0
 800fdce:	9305      	str	r3, [sp, #20]
 800fdd0:	468a      	mov	sl, r1
 800fdd2:	4693      	mov	fp, r2
 800fdd4:	f88d 601e 	strb.w	r6, [sp, #30]
 800fdd8:	b325      	cbz	r5, 800fe24 <recv_custom_msg+0x64>
 800fdda:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fdde:	f10d 081f 	add.w	r8, sp, #31
 800fde2:	af05      	add	r7, sp, #20
 800fde4:	f10d 061e 	add.w	r6, sp, #30
 800fde8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fdec:	e002      	b.n	800fdf4 <recv_custom_msg+0x34>
 800fdee:	9b05      	ldr	r3, [sp, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	dd0f      	ble.n	800fe14 <recv_custom_msg+0x54>
 800fdf4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fdf8:	e9cd 5600 	strd	r5, r6, [sp]
 800fdfc:	4623      	mov	r3, r4
 800fdfe:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fe02:	4622      	mov	r2, r4
 800fe04:	4648      	mov	r0, r9
 800fe06:	f001 f8c1 	bl	8010f8c <uxr_read_framed_msg>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d0ef      	beq.n	800fdee <recv_custom_msg+0x2e>
 800fe0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe12:	b1b3      	cbz	r3, 800fe42 <recv_custom_msg+0x82>
 800fe14:	4b0f      	ldr	r3, [pc, #60]	@ (800fe54 <recv_custom_msg+0x94>)
 800fe16:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	b009      	add	sp, #36	@ 0x24
 800fe20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe24:	f10d 021f 	add.w	r2, sp, #31
 800fe28:	9200      	str	r2, [sp, #0]
 800fe2a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fe2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe32:	4601      	mov	r1, r0
 800fe34:	47a8      	blx	r5
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d0ec      	beq.n	800fe14 <recv_custom_msg+0x54>
 800fe3a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e8      	bne.n	800fe14 <recv_custom_msg+0x54>
 800fe42:	f8cb 0000 	str.w	r0, [fp]
 800fe46:	2001      	movs	r0, #1
 800fe48:	f8ca 4000 	str.w	r4, [sl]
 800fe4c:	b009      	add	sp, #36	@ 0x24
 800fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe52:	bf00      	nop
 800fe54:	200092e0 	.word	0x200092e0

0800fe58 <send_custom_msg>:
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800fe5e:	b086      	sub	sp, #24
 800fe60:	4616      	mov	r6, r2
 800fe62:	b975      	cbnz	r5, 800fe82 <send_custom_msg+0x2a>
 800fe64:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fe68:	f10d 0317 	add.w	r3, sp, #23
 800fe6c:	47a0      	blx	r4
 800fe6e:	b108      	cbz	r0, 800fe74 <send_custom_msg+0x1c>
 800fe70:	42b0      	cmp	r0, r6
 800fe72:	d015      	beq.n	800fea0 <send_custom_msg+0x48>
 800fe74:	4b0c      	ldr	r3, [pc, #48]	@ (800fea8 <send_custom_msg+0x50>)
 800fe76:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fe7a:	701a      	strb	r2, [r3, #0]
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	b006      	add	sp, #24
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	460b      	mov	r3, r1
 800fe84:	2200      	movs	r2, #0
 800fe86:	f10d 0117 	add.w	r1, sp, #23
 800fe8a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fe8e:	9600      	str	r6, [sp, #0]
 800fe90:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800fe94:	4602      	mov	r2, r0
 800fe96:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fe9a:	f000 fe8f 	bl	8010bbc <uxr_write_framed_msg>
 800fe9e:	e7e6      	b.n	800fe6e <send_custom_msg+0x16>
 800fea0:	2001      	movs	r0, #1
 800fea2:	b006      	add	sp, #24
 800fea4:	bd70      	pop	{r4, r5, r6, pc}
 800fea6:	bf00      	nop
 800fea8:	200092e0 	.word	0x200092e0

0800feac <uxr_set_custom_transport_callbacks>:
 800feac:	b430      	push	{r4, r5}
 800feae:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800feb2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800feb6:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 800feba:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800febe:	bc30      	pop	{r4, r5}
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop

0800fec4 <uxr_init_custom_transport>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800feca:	b303      	cbz	r3, 800ff0e <uxr_init_custom_transport+0x4a>
 800fecc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fed0:	4604      	mov	r4, r0
 800fed2:	b1e2      	cbz	r2, 800ff0e <uxr_init_custom_transport+0x4a>
 800fed4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fed8:	b1ca      	cbz	r2, 800ff0e <uxr_init_custom_transport+0x4a>
 800feda:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fede:	b1b2      	cbz	r2, 800ff0e <uxr_init_custom_transport+0x4a>
 800fee0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fee4:	4798      	blx	r3
 800fee6:	4605      	mov	r5, r0
 800fee8:	b188      	cbz	r0, 800ff0e <uxr_init_custom_transport+0x4a>
 800feea:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800feee:	b98b      	cbnz	r3, 800ff14 <uxr_init_custom_transport+0x50>
 800fef0:	480b      	ldr	r0, [pc, #44]	@ (800ff20 <uxr_init_custom_transport+0x5c>)
 800fef2:	490c      	ldr	r1, [pc, #48]	@ (800ff24 <uxr_init_custom_transport+0x60>)
 800fef4:	4a0c      	ldr	r2, [pc, #48]	@ (800ff28 <uxr_init_custom_transport+0x64>)
 800fef6:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 800fefa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fefe:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 800ff02:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ff06:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	bd38      	pop	{r3, r4, r5, pc}
 800ff0e:	2500      	movs	r5, #0
 800ff10:	4628      	mov	r0, r5
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	2100      	movs	r1, #0
 800ff16:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ff1a:	f000 fe49 	bl	8010bb0 <uxr_init_framing_io>
 800ff1e:	e7e7      	b.n	800fef0 <uxr_init_custom_transport+0x2c>
 800ff20:	0800fe59 	.word	0x0800fe59
 800ff24:	0800fdc1 	.word	0x0800fdc1
 800ff28:	0800fdb5 	.word	0x0800fdb5

0800ff2c <uxr_close_custom_transport>:
 800ff2c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ff30:	4718      	bx	r3
 800ff32:	bf00      	nop

0800ff34 <uxr_init_input_best_effort_stream>:
 800ff34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff38:	8003      	strh	r3, [r0, #0]
 800ff3a:	4770      	bx	lr

0800ff3c <uxr_reset_input_best_effort_stream>:
 800ff3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff40:	8003      	strh	r3, [r0, #0]
 800ff42:	4770      	bx	lr

0800ff44 <uxr_receive_best_effort_message>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4604      	mov	r4, r0
 800ff48:	8800      	ldrh	r0, [r0, #0]
 800ff4a:	460d      	mov	r5, r1
 800ff4c:	f000 fe18 	bl	8010b80 <uxr_seq_num_cmp>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800ff58:	bfb8      	it	lt
 800ff5a:	8025      	strhlt	r5, [r4, #0]
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	bf00      	nop

0800ff60 <on_full_input_buffer>:
 800ff60:	b570      	push	{r4, r5, r6, lr}
 800ff62:	6802      	ldr	r2, [r0, #0]
 800ff64:	460d      	mov	r5, r1
 800ff66:	6809      	ldr	r1, [r1, #0]
 800ff68:	686c      	ldr	r4, [r5, #4]
 800ff6a:	1a53      	subs	r3, r2, r1
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	8928      	ldrh	r0, [r5, #8]
 800ff70:	fbb4 f4f0 	udiv	r4, r4, r0
 800ff74:	fbb3 f3f4 	udiv	r3, r3, r4
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	fbb3 f2f0 	udiv	r2, r3, r0
 800ff80:	fb00 3312 	mls	r3, r0, r2, r3
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	fb04 f403 	mul.w	r4, r4, r3
 800ff8a:	1d23      	adds	r3, r4, #4
 800ff8c:	440b      	add	r3, r1
 800ff8e:	7d28      	ldrb	r0, [r5, #20]
 800ff90:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ff94:	b110      	cbz	r0, 800ff9c <on_full_input_buffer+0x3c>
 800ff96:	2000      	movs	r0, #0
 800ff98:	f843 0c04 	str.w	r0, [r3, #-4]
 800ff9c:	2a03      	cmp	r2, #3
 800ff9e:	d801      	bhi.n	800ffa4 <on_full_input_buffer+0x44>
 800ffa0:	2001      	movs	r0, #1
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	3408      	adds	r4, #8
 800ffa6:	6933      	ldr	r3, [r6, #16]
 800ffa8:	4421      	add	r1, r4
 800ffaa:	4630      	mov	r0, r6
 800ffac:	3a04      	subs	r2, #4
 800ffae:	f7fa ffd1 	bl	800af54 <ucdr_init_buffer_origin>
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	4902      	ldr	r1, [pc, #8]	@ (800ffc0 <on_full_input_buffer+0x60>)
 800ffb6:	462a      	mov	r2, r5
 800ffb8:	f7fa ffaa 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 800ffbc:	2000      	movs	r0, #0
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}
 800ffc0:	0800ff61 	.word	0x0800ff61

0800ffc4 <uxr_init_input_reliable_stream>:
 800ffc4:	b470      	push	{r4, r5, r6}
 800ffc6:	9c03      	ldr	r4, [sp, #12]
 800ffc8:	6001      	str	r1, [r0, #0]
 800ffca:	2600      	movs	r6, #0
 800ffcc:	8103      	strh	r3, [r0, #8]
 800ffce:	6042      	str	r2, [r0, #4]
 800ffd0:	6104      	str	r4, [r0, #16]
 800ffd2:	7506      	strb	r6, [r0, #20]
 800ffd4:	b1ab      	cbz	r3, 8010002 <uxr_init_input_reliable_stream+0x3e>
 800ffd6:	600e      	str	r6, [r1, #0]
 800ffd8:	8901      	ldrh	r1, [r0, #8]
 800ffda:	2901      	cmp	r1, #1
 800ffdc:	d911      	bls.n	8010002 <uxr_init_input_reliable_stream+0x3e>
 800ffde:	2201      	movs	r2, #1
 800ffe0:	e9d0 5400 	ldrd	r5, r4, [r0]
 800ffe4:	fbb2 f3f1 	udiv	r3, r2, r1
 800ffe8:	fb01 2313 	mls	r3, r1, r3, r2
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	fbb4 f1f1 	udiv	r1, r4, r1
 800fff2:	fb03 f301 	mul.w	r3, r3, r1
 800fff6:	3201      	adds	r2, #1
 800fff8:	50ee      	str	r6, [r5, r3]
 800fffa:	8901      	ldrh	r1, [r0, #8]
 800fffc:	b292      	uxth	r2, r2
 800fffe:	4291      	cmp	r1, r2
 8010000:	d8ee      	bhi.n	800ffe0 <uxr_init_input_reliable_stream+0x1c>
 8010002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010006:	bc70      	pop	{r4, r5, r6}
 8010008:	60c3      	str	r3, [r0, #12]
 801000a:	4770      	bx	lr

0801000c <uxr_reset_input_reliable_stream>:
 801000c:	8902      	ldrh	r2, [r0, #8]
 801000e:	b1ca      	cbz	r2, 8010044 <uxr_reset_input_reliable_stream+0x38>
 8010010:	b470      	push	{r4, r5, r6}
 8010012:	2400      	movs	r4, #0
 8010014:	4621      	mov	r1, r4
 8010016:	4626      	mov	r6, r4
 8010018:	fbb1 f3f2 	udiv	r3, r1, r2
 801001c:	fb02 1313 	mls	r3, r2, r3, r1
 8010020:	e9d0 5100 	ldrd	r5, r1, [r0]
 8010024:	b29b      	uxth	r3, r3
 8010026:	fbb1 f2f2 	udiv	r2, r1, r2
 801002a:	fb03 f302 	mul.w	r3, r3, r2
 801002e:	3401      	adds	r4, #1
 8010030:	50ee      	str	r6, [r5, r3]
 8010032:	8902      	ldrh	r2, [r0, #8]
 8010034:	b2a1      	uxth	r1, r4
 8010036:	428a      	cmp	r2, r1
 8010038:	d8ee      	bhi.n	8010018 <uxr_reset_input_reliable_stream+0xc>
 801003a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801003e:	bc70      	pop	{r4, r5, r6}
 8010040:	60c3      	str	r3, [r0, #12]
 8010042:	4770      	bx	lr
 8010044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010048:	60c3      	str	r3, [r0, #12]
 801004a:	4770      	bx	lr

0801004c <uxr_receive_reliable_message>:
 801004c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010050:	4604      	mov	r4, r0
 8010052:	460d      	mov	r5, r1
 8010054:	8901      	ldrh	r1, [r0, #8]
 8010056:	8980      	ldrh	r0, [r0, #12]
 8010058:	4690      	mov	r8, r2
 801005a:	461f      	mov	r7, r3
 801005c:	f000 fd88 	bl	8010b70 <uxr_seq_num_add>
 8010060:	4629      	mov	r1, r5
 8010062:	4606      	mov	r6, r0
 8010064:	89a0      	ldrh	r0, [r4, #12]
 8010066:	f000 fd8b 	bl	8010b80 <uxr_seq_num_cmp>
 801006a:	2800      	cmp	r0, #0
 801006c:	db0a      	blt.n	8010084 <uxr_receive_reliable_message+0x38>
 801006e:	2600      	movs	r6, #0
 8010070:	89e0      	ldrh	r0, [r4, #14]
 8010072:	4629      	mov	r1, r5
 8010074:	f000 fd84 	bl	8010b80 <uxr_seq_num_cmp>
 8010078:	2800      	cmp	r0, #0
 801007a:	bfb8      	it	lt
 801007c:	81e5      	strhlt	r5, [r4, #14]
 801007e:	4630      	mov	r0, r6
 8010080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010084:	4630      	mov	r0, r6
 8010086:	4629      	mov	r1, r5
 8010088:	f000 fd7a 	bl	8010b80 <uxr_seq_num_cmp>
 801008c:	2800      	cmp	r0, #0
 801008e:	dbee      	blt.n	801006e <uxr_receive_reliable_message+0x22>
 8010090:	6923      	ldr	r3, [r4, #16]
 8010092:	4640      	mov	r0, r8
 8010094:	4798      	blx	r3
 8010096:	2101      	movs	r1, #1
 8010098:	4681      	mov	r9, r0
 801009a:	89a0      	ldrh	r0, [r4, #12]
 801009c:	f000 fd68 	bl	8010b70 <uxr_seq_num_add>
 80100a0:	f1b9 0f00 	cmp.w	r9, #0
 80100a4:	d101      	bne.n	80100aa <uxr_receive_reliable_message+0x5e>
 80100a6:	4285      	cmp	r5, r0
 80100a8:	d049      	beq.n	801013e <uxr_receive_reliable_message+0xf2>
 80100aa:	8921      	ldrh	r1, [r4, #8]
 80100ac:	fbb5 f3f1 	udiv	r3, r5, r1
 80100b0:	fb01 5313 	mls	r3, r1, r3, r5
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	6862      	ldr	r2, [r4, #4]
 80100b8:	6820      	ldr	r0, [r4, #0]
 80100ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80100be:	fb03 f302 	mul.w	r3, r3, r2
 80100c2:	3304      	adds	r3, #4
 80100c4:	4418      	add	r0, r3
 80100c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1cf      	bne.n	801006e <uxr_receive_reliable_message+0x22>
 80100ce:	4641      	mov	r1, r8
 80100d0:	463a      	mov	r2, r7
 80100d2:	f002 f888 	bl	80121e6 <memcpy>
 80100d6:	8921      	ldrh	r1, [r4, #8]
 80100d8:	fbb5 f3f1 	udiv	r3, r5, r1
 80100dc:	fb01 5313 	mls	r3, r1, r3, r5
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	6862      	ldr	r2, [r4, #4]
 80100e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80100e8:	6821      	ldr	r1, [r4, #0]
 80100ea:	fb03 f302 	mul.w	r3, r3, r2
 80100ee:	2201      	movs	r2, #1
 80100f0:	50cf      	str	r7, [r1, r3]
 80100f2:	9b08      	ldr	r3, [sp, #32]
 80100f4:	701a      	strb	r2, [r3, #0]
 80100f6:	f1b9 0f00 	cmp.w	r9, #0
 80100fa:	d0b8      	beq.n	801006e <uxr_receive_reliable_message+0x22>
 80100fc:	89a6      	ldrh	r6, [r4, #12]
 80100fe:	e001      	b.n	8010104 <uxr_receive_reliable_message+0xb8>
 8010100:	2801      	cmp	r0, #1
 8010102:	d1b4      	bne.n	801006e <uxr_receive_reliable_message+0x22>
 8010104:	4630      	mov	r0, r6
 8010106:	2101      	movs	r1, #1
 8010108:	f000 fd32 	bl	8010b70 <uxr_seq_num_add>
 801010c:	8921      	ldrh	r1, [r4, #8]
 801010e:	fbb0 f3f1 	udiv	r3, r0, r1
 8010112:	fb01 0313 	mls	r3, r1, r3, r0
 8010116:	b29b      	uxth	r3, r3
 8010118:	6862      	ldr	r2, [r4, #4]
 801011a:	fbb2 f2f1 	udiv	r2, r2, r1
 801011e:	4606      	mov	r6, r0
 8010120:	fb03 f302 	mul.w	r3, r3, r2
 8010124:	6820      	ldr	r0, [r4, #0]
 8010126:	3304      	adds	r3, #4
 8010128:	4418      	add	r0, r3
 801012a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d09d      	beq.n	801006e <uxr_receive_reliable_message+0x22>
 8010132:	6923      	ldr	r3, [r4, #16]
 8010134:	4798      	blx	r3
 8010136:	2802      	cmp	r0, #2
 8010138:	d1e2      	bne.n	8010100 <uxr_receive_reliable_message+0xb4>
 801013a:	2601      	movs	r6, #1
 801013c:	e798      	b.n	8010070 <uxr_receive_reliable_message+0x24>
 801013e:	9b08      	ldr	r3, [sp, #32]
 8010140:	81a5      	strh	r5, [r4, #12]
 8010142:	2601      	movs	r6, #1
 8010144:	f883 9000 	strb.w	r9, [r3]
 8010148:	e792      	b.n	8010070 <uxr_receive_reliable_message+0x24>
 801014a:	bf00      	nop

0801014c <uxr_next_input_reliable_buffer_available>:
 801014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010150:	4604      	mov	r4, r0
 8010152:	460e      	mov	r6, r1
 8010154:	8980      	ldrh	r0, [r0, #12]
 8010156:	2101      	movs	r1, #1
 8010158:	4617      	mov	r7, r2
 801015a:	f000 fd09 	bl	8010b70 <uxr_seq_num_add>
 801015e:	8921      	ldrh	r1, [r4, #8]
 8010160:	fbb0 f3f1 	udiv	r3, r0, r1
 8010164:	fb01 0313 	mls	r3, r1, r3, r0
 8010168:	b29b      	uxth	r3, r3
 801016a:	6862      	ldr	r2, [r4, #4]
 801016c:	fbb2 f2f1 	udiv	r2, r2, r1
 8010170:	fb03 f302 	mul.w	r3, r3, r2
 8010174:	6822      	ldr	r2, [r4, #0]
 8010176:	3304      	adds	r3, #4
 8010178:	eb02 0803 	add.w	r8, r2, r3
 801017c:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8010180:	f1b9 0f00 	cmp.w	r9, #0
 8010184:	d025      	beq.n	80101d2 <uxr_next_input_reliable_buffer_available+0x86>
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	4605      	mov	r5, r0
 801018a:	4640      	mov	r0, r8
 801018c:	4798      	blx	r3
 801018e:	4682      	mov	sl, r0
 8010190:	b310      	cbz	r0, 80101d8 <uxr_next_input_reliable_buffer_available+0x8c>
 8010192:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8010196:	e005      	b.n	80101a4 <uxr_next_input_reliable_buffer_available+0x58>
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	4798      	blx	r3
 801019c:	2802      	cmp	r0, #2
 801019e:	d032      	beq.n	8010206 <uxr_next_input_reliable_buffer_available+0xba>
 80101a0:	2801      	cmp	r0, #1
 80101a2:	d116      	bne.n	80101d2 <uxr_next_input_reliable_buffer_available+0x86>
 80101a4:	4650      	mov	r0, sl
 80101a6:	2101      	movs	r1, #1
 80101a8:	f000 fce2 	bl	8010b70 <uxr_seq_num_add>
 80101ac:	8921      	ldrh	r1, [r4, #8]
 80101ae:	fbb0 f3f1 	udiv	r3, r0, r1
 80101b2:	fb01 0313 	mls	r3, r1, r3, r0
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	6862      	ldr	r2, [r4, #4]
 80101ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80101be:	4682      	mov	sl, r0
 80101c0:	fb03 f302 	mul.w	r3, r3, r2
 80101c4:	6820      	ldr	r0, [r4, #0]
 80101c6:	3304      	adds	r3, #4
 80101c8:	4418      	add	r0, r3
 80101ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e2      	bne.n	8010198 <uxr_next_input_reliable_buffer_available+0x4c>
 80101d2:	2000      	movs	r0, #0
 80101d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d8:	464a      	mov	r2, r9
 80101da:	4641      	mov	r1, r8
 80101dc:	4630      	mov	r0, r6
 80101de:	f7fa fec1 	bl	800af64 <ucdr_init_buffer>
 80101e2:	8921      	ldrh	r1, [r4, #8]
 80101e4:	fbb5 f3f1 	udiv	r3, r5, r1
 80101e8:	fb01 5313 	mls	r3, r1, r3, r5
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	6862      	ldr	r2, [r4, #4]
 80101f0:	fbb2 f2f1 	udiv	r2, r2, r1
 80101f4:	6821      	ldr	r1, [r4, #0]
 80101f6:	fb03 f302 	mul.w	r3, r3, r2
 80101fa:	2001      	movs	r0, #1
 80101fc:	f841 a003 	str.w	sl, [r1, r3]
 8010200:	81a5      	strh	r5, [r4, #12]
 8010202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010206:	8922      	ldrh	r2, [r4, #8]
 8010208:	fbb5 f0f2 	udiv	r0, r5, r2
 801020c:	fb02 5510 	mls	r5, r2, r0, r5
 8010210:	b2ad      	uxth	r5, r5
 8010212:	6863      	ldr	r3, [r4, #4]
 8010214:	fbb3 f3f2 	udiv	r3, r3, r2
 8010218:	fb05 f503 	mul.w	r5, r5, r3
 801021c:	6823      	ldr	r3, [r4, #0]
 801021e:	2000      	movs	r0, #0
 8010220:	5158      	str	r0, [r3, r5]
 8010222:	eba9 0207 	sub.w	r2, r9, r7
 8010226:	eb08 0107 	add.w	r1, r8, r7
 801022a:	4630      	mov	r0, r6
 801022c:	f7fa fe9a 	bl	800af64 <ucdr_init_buffer>
 8010230:	4630      	mov	r0, r6
 8010232:	4904      	ldr	r1, [pc, #16]	@ (8010244 <uxr_next_input_reliable_buffer_available+0xf8>)
 8010234:	4622      	mov	r2, r4
 8010236:	f7fa fe6b 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 801023a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801023e:	2001      	movs	r0, #1
 8010240:	e7c8      	b.n	80101d4 <uxr_next_input_reliable_buffer_available+0x88>
 8010242:	bf00      	nop
 8010244:	0800ff61 	.word	0x0800ff61

08010248 <uxr_process_heartbeat>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	4611      	mov	r1, r2
 801024c:	4604      	mov	r4, r0
 801024e:	89c0      	ldrh	r0, [r0, #14]
 8010250:	4615      	mov	r5, r2
 8010252:	f000 fc95 	bl	8010b80 <uxr_seq_num_cmp>
 8010256:	2800      	cmp	r0, #0
 8010258:	bfb8      	it	lt
 801025a:	81e5      	strhlt	r5, [r4, #14]
 801025c:	bd38      	pop	{r3, r4, r5, pc}
 801025e:	bf00      	nop

08010260 <uxr_compute_acknack>:
 8010260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010264:	8903      	ldrh	r3, [r0, #8]
 8010266:	8986      	ldrh	r6, [r0, #12]
 8010268:	4604      	mov	r4, r0
 801026a:	460d      	mov	r5, r1
 801026c:	b1d3      	cbz	r3, 80102a4 <uxr_compute_acknack+0x44>
 801026e:	4630      	mov	r0, r6
 8010270:	2701      	movs	r7, #1
 8010272:	e003      	b.n	801027c <uxr_compute_acknack+0x1c>
 8010274:	4567      	cmp	r7, ip
 8010276:	d215      	bcs.n	80102a4 <uxr_compute_acknack+0x44>
 8010278:	89a0      	ldrh	r0, [r4, #12]
 801027a:	3701      	adds	r7, #1
 801027c:	b2b9      	uxth	r1, r7
 801027e:	f000 fc77 	bl	8010b70 <uxr_seq_num_add>
 8010282:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010286:	fbb0 f2fc 	udiv	r2, r0, ip
 801028a:	e9d4 1300 	ldrd	r1, r3, [r4]
 801028e:	fb0c 0212 	mls	r2, ip, r2, r0
 8010292:	b292      	uxth	r2, r2
 8010294:	fbb3 f3fc 	udiv	r3, r3, ip
 8010298:	fb02 1303 	mla	r3, r2, r3, r1
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1e8      	bne.n	8010274 <uxr_compute_acknack+0x14>
 80102a2:	4606      	mov	r6, r0
 80102a4:	802e      	strh	r6, [r5, #0]
 80102a6:	4630      	mov	r0, r6
 80102a8:	2101      	movs	r1, #1
 80102aa:	89e6      	ldrh	r6, [r4, #14]
 80102ac:	f000 fc64 	bl	8010b78 <uxr_seq_num_sub>
 80102b0:	4601      	mov	r1, r0
 80102b2:	4630      	mov	r0, r6
 80102b4:	f000 fc60 	bl	8010b78 <uxr_seq_num_sub>
 80102b8:	4606      	mov	r6, r0
 80102ba:	b318      	cbz	r0, 8010304 <uxr_compute_acknack+0xa4>
 80102bc:	f04f 0900 	mov.w	r9, #0
 80102c0:	464f      	mov	r7, r9
 80102c2:	f04f 0801 	mov.w	r8, #1
 80102c6:	fa1f f189 	uxth.w	r1, r9
 80102ca:	8828      	ldrh	r0, [r5, #0]
 80102cc:	f000 fc50 	bl	8010b70 <uxr_seq_num_add>
 80102d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80102d4:	6822      	ldr	r2, [r4, #0]
 80102d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80102da:	fb01 011c 	mls	r1, r1, ip, r0
 80102de:	b289      	uxth	r1, r1
 80102e0:	6863      	ldr	r3, [r4, #4]
 80102e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80102e6:	fb01 2303 	mla	r3, r1, r3, r2
 80102ea:	fa08 f209 	lsl.w	r2, r8, r9
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f109 0901 	add.w	r9, r9, #1
 80102f4:	b90b      	cbnz	r3, 80102fa <uxr_compute_acknack+0x9a>
 80102f6:	4317      	orrs	r7, r2
 80102f8:	b2bf      	uxth	r7, r7
 80102fa:	454e      	cmp	r6, r9
 80102fc:	d1e3      	bne.n	80102c6 <uxr_compute_acknack+0x66>
 80102fe:	4638      	mov	r0, r7
 8010300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010304:	4607      	mov	r7, r0
 8010306:	4638      	mov	r0, r7
 8010308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801030c <uxr_init_output_best_effort_stream>:
 801030c:	b410      	push	{r4}
 801030e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8010312:	81c4      	strh	r4, [r0, #14]
 8010314:	e9c0 1300 	strd	r1, r3, [r0]
 8010318:	f85d 4b04 	ldr.w	r4, [sp], #4
 801031c:	7303      	strb	r3, [r0, #12]
 801031e:	6082      	str	r2, [r0, #8]
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop

08010324 <uxr_reset_output_best_effort_stream>:
 8010324:	7b02      	ldrb	r2, [r0, #12]
 8010326:	6042      	str	r2, [r0, #4]
 8010328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801032c:	81c3      	strh	r3, [r0, #14]
 801032e:	4770      	bx	lr

08010330 <uxr_prepare_best_effort_buffer_to_write>:
 8010330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010332:	4604      	mov	r4, r0
 8010334:	b083      	sub	sp, #12
 8010336:	6840      	ldr	r0, [r0, #4]
 8010338:	460d      	mov	r5, r1
 801033a:	4616      	mov	r6, r2
 801033c:	f7fc f9ee 	bl	800c71c <uxr_submessage_padding>
 8010340:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8010344:	4410      	add	r0, r2
 8010346:	1942      	adds	r2, r0, r5
 8010348:	4293      	cmp	r3, r2
 801034a:	bf2c      	ite	cs
 801034c:	2701      	movcs	r7, #1
 801034e:	2700      	movcc	r7, #0
 8010350:	d202      	bcs.n	8010358 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8010352:	4638      	mov	r0, r7
 8010354:	b003      	add	sp, #12
 8010356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010358:	9000      	str	r0, [sp, #0]
 801035a:	6821      	ldr	r1, [r4, #0]
 801035c:	4630      	mov	r0, r6
 801035e:	2300      	movs	r3, #0
 8010360:	f7fa fdee 	bl	800af40 <ucdr_init_buffer_origin_offset>
 8010364:	6861      	ldr	r1, [r4, #4]
 8010366:	4638      	mov	r0, r7
 8010368:	4429      	add	r1, r5
 801036a:	6061      	str	r1, [r4, #4]
 801036c:	b003      	add	sp, #12
 801036e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010370 <uxr_prepare_best_effort_buffer_to_send>:
 8010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010374:	6845      	ldr	r5, [r0, #4]
 8010376:	4604      	mov	r4, r0
 8010378:	7b00      	ldrb	r0, [r0, #12]
 801037a:	4285      	cmp	r5, r0
 801037c:	bf8c      	ite	hi
 801037e:	2701      	movhi	r7, #1
 8010380:	2700      	movls	r7, #0
 8010382:	d802      	bhi.n	801038a <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8010384:	4638      	mov	r0, r7
 8010386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801038a:	4688      	mov	r8, r1
 801038c:	89e0      	ldrh	r0, [r4, #14]
 801038e:	2101      	movs	r1, #1
 8010390:	4615      	mov	r5, r2
 8010392:	461e      	mov	r6, r3
 8010394:	f000 fbec 	bl	8010b70 <uxr_seq_num_add>
 8010398:	e9d4 2300 	ldrd	r2, r3, [r4]
 801039c:	81e0      	strh	r0, [r4, #14]
 801039e:	8030      	strh	r0, [r6, #0]
 80103a0:	f8c8 2000 	str.w	r2, [r8]
 80103a4:	602b      	str	r3, [r5, #0]
 80103a6:	7b23      	ldrb	r3, [r4, #12]
 80103a8:	6063      	str	r3, [r4, #4]
 80103aa:	4638      	mov	r0, r7
 80103ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103b0 <on_full_output_buffer>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	6802      	ldr	r2, [r0, #0]
 80103b4:	460d      	mov	r5, r1
 80103b6:	6809      	ldr	r1, [r1, #0]
 80103b8:	892f      	ldrh	r7, [r5, #8]
 80103ba:	686c      	ldr	r4, [r5, #4]
 80103bc:	fbb4 f4f7 	udiv	r4, r4, r7
 80103c0:	1a53      	subs	r3, r2, r1
 80103c2:	fbb3 f3f4 	udiv	r3, r3, r4
 80103c6:	3301      	adds	r3, #1
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	fbb3 f2f7 	udiv	r2, r3, r7
 80103ce:	fb07 3312 	mls	r3, r7, r2, r3
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	fb04 f403 	mul.w	r4, r4, r3
 80103d8:	7b2f      	ldrb	r7, [r5, #12]
 80103da:	590a      	ldr	r2, [r1, r4]
 80103dc:	6903      	ldr	r3, [r0, #16]
 80103de:	443c      	add	r4, r7
 80103e0:	3408      	adds	r4, #8
 80103e2:	1bd2      	subs	r2, r2, r7
 80103e4:	4606      	mov	r6, r0
 80103e6:	4421      	add	r1, r4
 80103e8:	3a04      	subs	r2, #4
 80103ea:	f7fa fdb3 	bl	800af54 <ucdr_init_buffer_origin>
 80103ee:	4630      	mov	r0, r6
 80103f0:	4902      	ldr	r1, [pc, #8]	@ (80103fc <on_full_output_buffer+0x4c>)
 80103f2:	462a      	mov	r2, r5
 80103f4:	f7fa fd8c 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 80103f8:	2000      	movs	r0, #0
 80103fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103fc:	080103b1 	.word	0x080103b1

08010400 <uxr_init_output_reliable_stream>:
 8010400:	b430      	push	{r4, r5}
 8010402:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8010406:	6001      	str	r1, [r0, #0]
 8010408:	8103      	strh	r3, [r0, #8]
 801040a:	6042      	str	r2, [r0, #4]
 801040c:	7304      	strb	r4, [r0, #12]
 801040e:	b1b3      	cbz	r3, 801043e <uxr_init_output_reliable_stream+0x3e>
 8010410:	600c      	str	r4, [r1, #0]
 8010412:	8901      	ldrh	r1, [r0, #8]
 8010414:	2901      	cmp	r1, #1
 8010416:	d912      	bls.n	801043e <uxr_init_output_reliable_stream+0x3e>
 8010418:	2201      	movs	r2, #1
 801041a:	e9d0 5400 	ldrd	r5, r4, [r0]
 801041e:	fbb2 f3f1 	udiv	r3, r2, r1
 8010422:	fb01 2313 	mls	r3, r1, r3, r2
 8010426:	b29b      	uxth	r3, r3
 8010428:	fbb4 f1f1 	udiv	r1, r4, r1
 801042c:	fb03 f301 	mul.w	r3, r3, r1
 8010430:	7b01      	ldrb	r1, [r0, #12]
 8010432:	50e9      	str	r1, [r5, r3]
 8010434:	3201      	adds	r2, #1
 8010436:	8901      	ldrh	r1, [r0, #8]
 8010438:	b292      	uxth	r2, r2
 801043a:	4291      	cmp	r1, r2
 801043c:	d8ed      	bhi.n	801041a <uxr_init_output_reliable_stream+0x1a>
 801043e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010442:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010446:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801044a:	4b05      	ldr	r3, [pc, #20]	@ (8010460 <uxr_init_output_reliable_stream+0x60>)
 801044c:	f8c0 300e 	str.w	r3, [r0, #14]
 8010450:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010454:	2300      	movs	r3, #0
 8010456:	bc30      	pop	{r4, r5}
 8010458:	8242      	strh	r2, [r0, #18]
 801045a:	8403      	strh	r3, [r0, #32]
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop
 8010460:	ffff0000 	.word	0xffff0000

08010464 <uxr_reset_output_reliable_stream>:
 8010464:	8902      	ldrh	r2, [r0, #8]
 8010466:	b430      	push	{r4, r5}
 8010468:	b19a      	cbz	r2, 8010492 <uxr_reset_output_reliable_stream+0x2e>
 801046a:	2400      	movs	r4, #0
 801046c:	4621      	mov	r1, r4
 801046e:	fbb1 f3f2 	udiv	r3, r1, r2
 8010472:	fb02 1313 	mls	r3, r2, r3, r1
 8010476:	e9d0 5100 	ldrd	r5, r1, [r0]
 801047a:	b29b      	uxth	r3, r3
 801047c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010480:	fb03 f302 	mul.w	r3, r3, r2
 8010484:	7b02      	ldrb	r2, [r0, #12]
 8010486:	50ea      	str	r2, [r5, r3]
 8010488:	3401      	adds	r4, #1
 801048a:	8902      	ldrh	r2, [r0, #8]
 801048c:	b2a1      	uxth	r1, r4
 801048e:	428a      	cmp	r2, r1
 8010490:	d8ed      	bhi.n	801046e <uxr_reset_output_reliable_stream+0xa>
 8010492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010496:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801049a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801049e:	4b05      	ldr	r3, [pc, #20]	@ (80104b4 <uxr_reset_output_reliable_stream+0x50>)
 80104a0:	f8c0 300e 	str.w	r3, [r0, #14]
 80104a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104a8:	2300      	movs	r3, #0
 80104aa:	bc30      	pop	{r4, r5}
 80104ac:	8242      	strh	r2, [r0, #18]
 80104ae:	8403      	strh	r3, [r0, #32]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	ffff0000 	.word	0xffff0000

080104b8 <uxr_prepare_reliable_buffer_to_write>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	4604      	mov	r4, r0
 80104be:	89c6      	ldrh	r6, [r0, #14]
 80104c0:	8900      	ldrh	r0, [r0, #8]
 80104c2:	f8d4 c000 	ldr.w	ip, [r4]
 80104c6:	fbb6 f3f0 	udiv	r3, r6, r0
 80104ca:	fb00 6313 	mls	r3, r0, r3, r6
 80104ce:	b091      	sub	sp, #68	@ 0x44
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	6865      	ldr	r5, [r4, #4]
 80104d4:	fbb5 f5f0 	udiv	r5, r5, r0
 80104d8:	fb05 c303 	mla	r3, r5, r3, ip
 80104dc:	9204      	str	r2, [sp, #16]
 80104de:	1d1a      	adds	r2, r3, #4
 80104e0:	f8d3 8000 	ldr.w	r8, [r3]
 80104e4:	f894 900c 	ldrb.w	r9, [r4, #12]
 80104e8:	9203      	str	r2, [sp, #12]
 80104ea:	468b      	mov	fp, r1
 80104ec:	1f2f      	subs	r7, r5, #4
 80104ee:	2800      	cmp	r0, #0
 80104f0:	f000 814e 	beq.w	8010790 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 80104f4:	f04f 0e00 	mov.w	lr, #0
 80104f8:	46f2      	mov	sl, lr
 80104fa:	4672      	mov	r2, lr
 80104fc:	fbb2 f3f0 	udiv	r3, r2, r0
 8010500:	fb00 2313 	mls	r3, r0, r3, r2
 8010504:	b29b      	uxth	r3, r3
 8010506:	fb05 c303 	mla	r3, r5, r3, ip
 801050a:	f10e 0e01 	add.w	lr, lr, #1
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	454b      	cmp	r3, r9
 8010512:	bf08      	it	eq
 8010514:	f10a 0a01 	addeq.w	sl, sl, #1
 8010518:	fa1f f28e 	uxth.w	r2, lr
 801051c:	bf08      	it	eq
 801051e:	fa1f fa8a 	uxtheq.w	sl, sl
 8010522:	4282      	cmp	r2, r0
 8010524:	d3ea      	bcc.n	80104fc <uxr_prepare_reliable_buffer_to_write+0x44>
 8010526:	4640      	mov	r0, r8
 8010528:	2104      	movs	r1, #4
 801052a:	f8cd a014 	str.w	sl, [sp, #20]
 801052e:	f7fa fd1d 	bl	800af6c <ucdr_alignment>
 8010532:	4480      	add	r8, r0
 8010534:	eb08 020b 	add.w	r2, r8, fp
 8010538:	42ba      	cmp	r2, r7
 801053a:	f240 80cf 	bls.w	80106dc <uxr_prepare_reliable_buffer_to_write+0x224>
 801053e:	7b22      	ldrb	r2, [r4, #12]
 8010540:	445a      	add	r2, fp
 8010542:	42ba      	cmp	r2, r7
 8010544:	f240 80b7 	bls.w	80106b6 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8010548:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801054c:	33fc      	adds	r3, #252	@ 0xfc
 801054e:	b2ba      	uxth	r2, r7
 8010550:	4413      	add	r3, r2
 8010552:	b29b      	uxth	r3, r3
 8010554:	fb0a f903 	mul.w	r9, sl, r3
 8010558:	45d9      	cmp	r9, fp
 801055a:	9305      	str	r3, [sp, #20]
 801055c:	9306      	str	r3, [sp, #24]
 801055e:	f0c0 80b9 	bcc.w	80106d4 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8010562:	f108 0304 	add.w	r3, r8, #4
 8010566:	42bb      	cmp	r3, r7
 8010568:	f080 80dd 	bcs.w	8010726 <uxr_prepare_reliable_buffer_to_write+0x26e>
 801056c:	f1a2 0904 	sub.w	r9, r2, #4
 8010570:	eba9 0908 	sub.w	r9, r9, r8
 8010574:	9b05      	ldr	r3, [sp, #20]
 8010576:	fa1f f989 	uxth.w	r9, r9
 801057a:	ebab 0b09 	sub.w	fp, fp, r9
 801057e:	fbbb f2f3 	udiv	r2, fp, r3
 8010582:	fb03 b312 	mls	r3, r3, r2, fp
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80ca 	beq.w	8010720 <uxr_prepare_reliable_buffer_to_write+0x268>
 801058c:	3201      	adds	r2, #1
 801058e:	b292      	uxth	r2, r2
 8010590:	4611      	mov	r1, r2
 8010592:	9306      	str	r3, [sp, #24]
 8010594:	4551      	cmp	r1, sl
 8010596:	f200 809d 	bhi.w	80106d4 <uxr_prepare_reliable_buffer_to_write+0x21c>
 801059a:	f10d 0b20 	add.w	fp, sp, #32
 801059e:	2900      	cmp	r1, #0
 80105a0:	d042      	beq.n	8010628 <uxr_prepare_reliable_buffer_to_write+0x170>
 80105a2:	f8cd 801c 	str.w	r8, [sp, #28]
 80105a6:	f04f 0a00 	mov.w	sl, #0
 80105aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80105ae:	9505      	str	r5, [sp, #20]
 80105b0:	f10d 0b20 	add.w	fp, sp, #32
 80105b4:	460d      	mov	r5, r1
 80105b6:	e000      	b.n	80105ba <uxr_prepare_reliable_buffer_to_write+0x102>
 80105b8:	46c1      	mov	r9, r8
 80105ba:	8920      	ldrh	r0, [r4, #8]
 80105bc:	fbb6 f1f0 	udiv	r1, r6, r0
 80105c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80105c4:	fb00 6111 	mls	r1, r0, r1, r6
 80105c8:	b289      	uxth	r1, r1
 80105ca:	fbb2 f2f0 	udiv	r2, r2, r0
 80105ce:	fb01 f102 	mul.w	r1, r1, r2
 80105d2:	3104      	adds	r1, #4
 80105d4:	4419      	add	r1, r3
 80105d6:	463a      	mov	r2, r7
 80105d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	4658      	mov	r0, fp
 80105e0:	2300      	movs	r3, #0
 80105e2:	f7fa fcad 	bl	800af40 <ucdr_init_buffer_origin_offset>
 80105e6:	464a      	mov	r2, r9
 80105e8:	2300      	movs	r3, #0
 80105ea:	210d      	movs	r1, #13
 80105ec:	4658      	mov	r0, fp
 80105ee:	f7fc f855 	bl	800c69c <uxr_buffer_submessage_header>
 80105f2:	8920      	ldrh	r0, [r4, #8]
 80105f4:	fbb6 f3f0 	udiv	r3, r6, r0
 80105f8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80105fc:	fb00 6313 	mls	r3, r0, r3, r6
 8010600:	b29b      	uxth	r3, r3
 8010602:	fbb1 f1f0 	udiv	r1, r1, r0
 8010606:	fb03 f301 	mul.w	r3, r3, r1
 801060a:	4630      	mov	r0, r6
 801060c:	50d7      	str	r7, [r2, r3]
 801060e:	2101      	movs	r1, #1
 8010610:	f000 faae 	bl	8010b70 <uxr_seq_num_add>
 8010614:	f10a 0a01 	add.w	sl, sl, #1
 8010618:	fa1f f38a 	uxth.w	r3, sl
 801061c:	429d      	cmp	r5, r3
 801061e:	4606      	mov	r6, r0
 8010620:	d8ca      	bhi.n	80105b8 <uxr_prepare_reliable_buffer_to_write+0x100>
 8010622:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010626:	9d05      	ldr	r5, [sp, #20]
 8010628:	8921      	ldrh	r1, [r4, #8]
 801062a:	fbb6 f3f1 	udiv	r3, r6, r1
 801062e:	fb01 6313 	mls	r3, r1, r3, r6
 8010632:	b29b      	uxth	r3, r3
 8010634:	6862      	ldr	r2, [r4, #4]
 8010636:	fbb2 f2f1 	udiv	r2, r2, r1
 801063a:	6821      	ldr	r1, [r4, #0]
 801063c:	fb03 f302 	mul.w	r3, r3, r2
 8010640:	3304      	adds	r3, #4
 8010642:	4419      	add	r1, r3
 8010644:	463a      	mov	r2, r7
 8010646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	4658      	mov	r0, fp
 801064e:	2300      	movs	r3, #0
 8010650:	f7fa fc76 	bl	800af40 <ucdr_init_buffer_origin_offset>
 8010654:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8010658:	4658      	mov	r0, fp
 801065a:	fa1f f289 	uxth.w	r2, r9
 801065e:	2302      	movs	r3, #2
 8010660:	210d      	movs	r1, #13
 8010662:	f7fc f81b 	bl	800c69c <uxr_buffer_submessage_header>
 8010666:	8921      	ldrh	r1, [r4, #8]
 8010668:	7b27      	ldrb	r7, [r4, #12]
 801066a:	fbb6 f0f1 	udiv	r0, r6, r1
 801066e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8010672:	fb01 6010 	mls	r0, r1, r0, r6
 8010676:	b280      	uxth	r0, r0
 8010678:	fbb2 f2f1 	udiv	r2, r2, r1
 801067c:	3704      	adds	r7, #4
 801067e:	fb00 f002 	mul.w	r0, r0, r2
 8010682:	f1a5 0208 	sub.w	r2, r5, #8
 8010686:	464d      	mov	r5, r9
 8010688:	443d      	add	r5, r7
 801068a:	9f03      	ldr	r7, [sp, #12]
 801068c:	501d      	str	r5, [r3, r0]
 801068e:	f108 0104 	add.w	r1, r8, #4
 8010692:	9d04      	ldr	r5, [sp, #16]
 8010694:	440f      	add	r7, r1
 8010696:	eba2 0208 	sub.w	r2, r2, r8
 801069a:	4639      	mov	r1, r7
 801069c:	4628      	mov	r0, r5
 801069e:	f7fa fc61 	bl	800af64 <ucdr_init_buffer>
 80106a2:	4628      	mov	r0, r5
 80106a4:	493b      	ldr	r1, [pc, #236]	@ (8010794 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 80106a6:	4622      	mov	r2, r4
 80106a8:	f7fa fc32 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 80106ac:	2001      	movs	r0, #1
 80106ae:	81e6      	strh	r6, [r4, #14]
 80106b0:	b011      	add	sp, #68	@ 0x44
 80106b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b6:	2101      	movs	r1, #1
 80106b8:	89e0      	ldrh	r0, [r4, #14]
 80106ba:	f000 fa59 	bl	8010b70 <uxr_seq_num_add>
 80106be:	8921      	ldrh	r1, [r4, #8]
 80106c0:	4605      	mov	r5, r0
 80106c2:	8a60      	ldrh	r0, [r4, #18]
 80106c4:	f000 fa54 	bl	8010b70 <uxr_seq_num_add>
 80106c8:	4601      	mov	r1, r0
 80106ca:	4628      	mov	r0, r5
 80106cc:	f000 fa58 	bl	8010b80 <uxr_seq_num_cmp>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	dd42      	ble.n	801075a <uxr_prepare_reliable_buffer_to_write+0x2a2>
 80106d4:	2000      	movs	r0, #0
 80106d6:	b011      	add	sp, #68	@ 0x44
 80106d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106dc:	8921      	ldrh	r1, [r4, #8]
 80106de:	8a60      	ldrh	r0, [r4, #18]
 80106e0:	9205      	str	r2, [sp, #20]
 80106e2:	f000 fa45 	bl	8010b70 <uxr_seq_num_add>
 80106e6:	4601      	mov	r1, r0
 80106e8:	4630      	mov	r0, r6
 80106ea:	f000 fa49 	bl	8010b80 <uxr_seq_num_cmp>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	9a05      	ldr	r2, [sp, #20]
 80106f2:	dcef      	bgt.n	80106d4 <uxr_prepare_reliable_buffer_to_write+0x21c>
 80106f4:	8920      	ldrh	r0, [r4, #8]
 80106f6:	fbb6 f3f0 	udiv	r3, r6, r0
 80106fa:	e9d4 4100 	ldrd	r4, r1, [r4]
 80106fe:	fb00 6313 	mls	r3, r0, r3, r6
 8010702:	b29b      	uxth	r3, r3
 8010704:	fbb1 f1f0 	udiv	r1, r1, r0
 8010708:	fb03 f301 	mul.w	r3, r3, r1
 801070c:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8010710:	50e2      	str	r2, [r4, r3]
 8010712:	f8cd 8000 	str.w	r8, [sp]
 8010716:	2300      	movs	r3, #0
 8010718:	f7fa fc12 	bl	800af40 <ucdr_init_buffer_origin_offset>
 801071c:	2001      	movs	r0, #1
 801071e:	e7da      	b.n	80106d6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8010720:	b293      	uxth	r3, r2
 8010722:	4619      	mov	r1, r3
 8010724:	e736      	b.n	8010594 <uxr_prepare_reliable_buffer_to_write+0xdc>
 8010726:	4630      	mov	r0, r6
 8010728:	2101      	movs	r1, #1
 801072a:	9207      	str	r2, [sp, #28]
 801072c:	f000 fa20 	bl	8010b70 <uxr_seq_num_add>
 8010730:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010734:	fbb0 f1fc 	udiv	r1, r0, ip
 8010738:	fb0c 0111 	mls	r1, ip, r1, r0
 801073c:	b289      	uxth	r1, r1
 801073e:	6863      	ldr	r3, [r4, #4]
 8010740:	fbb3 f3fc 	udiv	r3, r3, ip
 8010744:	fb01 f103 	mul.w	r1, r1, r3
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	9a07      	ldr	r2, [sp, #28]
 801074c:	3104      	adds	r1, #4
 801074e:	440b      	add	r3, r1
 8010750:	4606      	mov	r6, r0
 8010752:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	e708      	b.n	801056c <uxr_prepare_reliable_buffer_to_write+0xb4>
 801075a:	8920      	ldrh	r0, [r4, #8]
 801075c:	fbb5 f3f0 	udiv	r3, r5, r0
 8010760:	fb00 5313 	mls	r3, r0, r3, r5
 8010764:	b29b      	uxth	r3, r3
 8010766:	6862      	ldr	r2, [r4, #4]
 8010768:	6821      	ldr	r1, [r4, #0]
 801076a:	fbb2 f0f0 	udiv	r0, r2, r0
 801076e:	fb03 f300 	mul.w	r3, r3, r0
 8010772:	7b22      	ldrb	r2, [r4, #12]
 8010774:	9804      	ldr	r0, [sp, #16]
 8010776:	3304      	adds	r3, #4
 8010778:	4419      	add	r1, r3
 801077a:	445a      	add	r2, fp
 801077c:	f841 2c04 	str.w	r2, [r1, #-4]
 8010780:	7b23      	ldrb	r3, [r4, #12]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	2300      	movs	r3, #0
 8010786:	f7fa fbdb 	bl	800af40 <ucdr_init_buffer_origin_offset>
 801078a:	81e5      	strh	r5, [r4, #14]
 801078c:	2001      	movs	r0, #1
 801078e:	e7a2      	b.n	80106d6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8010790:	4682      	mov	sl, r0
 8010792:	e6c8      	b.n	8010526 <uxr_prepare_reliable_buffer_to_write+0x6e>
 8010794:	080103b1 	.word	0x080103b1

08010798 <uxr_prepare_next_reliable_buffer_to_send>:
 8010798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079c:	4605      	mov	r5, r0
 801079e:	4688      	mov	r8, r1
 80107a0:	8a00      	ldrh	r0, [r0, #16]
 80107a2:	2101      	movs	r1, #1
 80107a4:	4617      	mov	r7, r2
 80107a6:	461e      	mov	r6, r3
 80107a8:	f000 f9e2 	bl	8010b70 <uxr_seq_num_add>
 80107ac:	8030      	strh	r0, [r6, #0]
 80107ae:	892a      	ldrh	r2, [r5, #8]
 80107b0:	fbb0 f3f2 	udiv	r3, r0, r2
 80107b4:	fb02 0413 	mls	r4, r2, r3, r0
 80107b8:	b2a4      	uxth	r4, r4
 80107ba:	686b      	ldr	r3, [r5, #4]
 80107bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80107c0:	682b      	ldr	r3, [r5, #0]
 80107c2:	89e9      	ldrh	r1, [r5, #14]
 80107c4:	fb04 f402 	mul.w	r4, r4, r2
 80107c8:	3404      	adds	r4, #4
 80107ca:	4423      	add	r3, r4
 80107cc:	f8c8 3000 	str.w	r3, [r8]
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	441c      	add	r4, r3
 80107d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80107d8:	603b      	str	r3, [r7, #0]
 80107da:	f000 f9d1 	bl	8010b80 <uxr_seq_num_cmp>
 80107de:	2800      	cmp	r0, #0
 80107e0:	dd02      	ble.n	80107e8 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80107e2:	2000      	movs	r0, #0
 80107e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e8:	683a      	ldr	r2, [r7, #0]
 80107ea:	7b2b      	ldrb	r3, [r5, #12]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d9f8      	bls.n	80107e2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80107f0:	8a69      	ldrh	r1, [r5, #18]
 80107f2:	8a28      	ldrh	r0, [r5, #16]
 80107f4:	f000 f9c0 	bl	8010b78 <uxr_seq_num_sub>
 80107f8:	892b      	ldrh	r3, [r5, #8]
 80107fa:	4283      	cmp	r3, r0
 80107fc:	d0f1      	beq.n	80107e2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80107fe:	8830      	ldrh	r0, [r6, #0]
 8010800:	89eb      	ldrh	r3, [r5, #14]
 8010802:	8228      	strh	r0, [r5, #16]
 8010804:	4298      	cmp	r0, r3
 8010806:	d002      	beq.n	801080e <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8010808:	2001      	movs	r0, #1
 801080a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080e:	2101      	movs	r1, #1
 8010810:	f000 f9ae 	bl	8010b70 <uxr_seq_num_add>
 8010814:	81e8      	strh	r0, [r5, #14]
 8010816:	2001      	movs	r0, #1
 8010818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801081c <uxr_update_output_stream_heartbeat_timestamp>:
 801081c:	b5d0      	push	{r4, r6, r7, lr}
 801081e:	8a01      	ldrh	r1, [r0, #16]
 8010820:	4604      	mov	r4, r0
 8010822:	8a40      	ldrh	r0, [r0, #18]
 8010824:	4616      	mov	r6, r2
 8010826:	461f      	mov	r7, r3
 8010828:	f000 f9aa 	bl	8010b80 <uxr_seq_num_cmp>
 801082c:	2800      	cmp	r0, #0
 801082e:	db07      	blt.n	8010840 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8010830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010834:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010838:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801083c:	2000      	movs	r0, #0
 801083e:	bdd0      	pop	{r4, r6, r7, pc}
 8010840:	f894 0020 	ldrb.w	r0, [r4, #32]
 8010844:	b948      	cbnz	r0, 801085a <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8010846:	2301      	movs	r3, #1
 8010848:	f884 3020 	strb.w	r3, [r4, #32]
 801084c:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 8010850:	f147 0200 	adc.w	r2, r7, #0
 8010854:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8010858:	bdd0      	pop	{r4, r6, r7, pc}
 801085a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801085e:	4296      	cmp	r6, r2
 8010860:	eb77 0303 	sbcs.w	r3, r7, r3
 8010864:	bfa5      	ittet	ge
 8010866:	3001      	addge	r0, #1
 8010868:	f884 0020 	strbge.w	r0, [r4, #32]
 801086c:	2000      	movlt	r0, #0
 801086e:	2001      	movge	r0, #1
 8010870:	e7ec      	b.n	801084c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8010872:	bf00      	nop

08010874 <uxr_begin_output_nack_buffer_it>:
 8010874:	8a40      	ldrh	r0, [r0, #18]
 8010876:	4770      	bx	lr

08010878 <uxr_next_reliable_nack_buffer_to_send>:
 8010878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801087c:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8010880:	f1b9 0f00 	cmp.w	r9, #0
 8010884:	d011      	beq.n	80108aa <uxr_next_reliable_nack_buffer_to_send+0x32>
 8010886:	4605      	mov	r5, r0
 8010888:	8818      	ldrh	r0, [r3, #0]
 801088a:	460f      	mov	r7, r1
 801088c:	4690      	mov	r8, r2
 801088e:	461e      	mov	r6, r3
 8010890:	2101      	movs	r1, #1
 8010892:	f000 f96d 	bl	8010b70 <uxr_seq_num_add>
 8010896:	8030      	strh	r0, [r6, #0]
 8010898:	8a29      	ldrh	r1, [r5, #16]
 801089a:	f000 f971 	bl	8010b80 <uxr_seq_num_cmp>
 801089e:	2800      	cmp	r0, #0
 80108a0:	dd06      	ble.n	80108b0 <uxr_next_reliable_nack_buffer_to_send+0x38>
 80108a2:	f04f 0900 	mov.w	r9, #0
 80108a6:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 80108aa:	4648      	mov	r0, r9
 80108ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108b0:	892a      	ldrh	r2, [r5, #8]
 80108b2:	8830      	ldrh	r0, [r6, #0]
 80108b4:	fbb0 f4f2 	udiv	r4, r0, r2
 80108b8:	fb02 0414 	mls	r4, r2, r4, r0
 80108bc:	b2a4      	uxth	r4, r4
 80108be:	686b      	ldr	r3, [r5, #4]
 80108c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	fb04 f402 	mul.w	r4, r4, r2
 80108ca:	3404      	adds	r4, #4
 80108cc:	4423      	add	r3, r4
 80108ce:	603b      	str	r3, [r7, #0]
 80108d0:	682b      	ldr	r3, [r5, #0]
 80108d2:	441c      	add	r4, r3
 80108d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80108d8:	f8c8 3000 	str.w	r3, [r8]
 80108dc:	7b2a      	ldrb	r2, [r5, #12]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d0d6      	beq.n	8010890 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80108e2:	4648      	mov	r0, r9
 80108e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080108e8 <uxr_process_acknack>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	4604      	mov	r4, r0
 80108ec:	460e      	mov	r6, r1
 80108ee:	4610      	mov	r0, r2
 80108f0:	2101      	movs	r1, #1
 80108f2:	f000 f941 	bl	8010b78 <uxr_seq_num_sub>
 80108f6:	8a61      	ldrh	r1, [r4, #18]
 80108f8:	f000 f93e 	bl	8010b78 <uxr_seq_num_sub>
 80108fc:	b1c0      	cbz	r0, 8010930 <uxr_process_acknack+0x48>
 80108fe:	4605      	mov	r5, r0
 8010900:	2700      	movs	r7, #0
 8010902:	2101      	movs	r1, #1
 8010904:	8a60      	ldrh	r0, [r4, #18]
 8010906:	f000 f933 	bl	8010b70 <uxr_seq_num_add>
 801090a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801090e:	fbb0 f3fc 	udiv	r3, r0, ip
 8010912:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010916:	fb0c 0313 	mls	r3, ip, r3, r0
 801091a:	b29b      	uxth	r3, r3
 801091c:	fbb1 f1fc 	udiv	r1, r1, ip
 8010920:	3701      	adds	r7, #1
 8010922:	fb03 f301 	mul.w	r3, r3, r1
 8010926:	42bd      	cmp	r5, r7
 8010928:	7b21      	ldrb	r1, [r4, #12]
 801092a:	8260      	strh	r0, [r4, #18]
 801092c:	50d1      	str	r1, [r2, r3]
 801092e:	d1e8      	bne.n	8010902 <uxr_process_acknack+0x1a>
 8010930:	3e00      	subs	r6, #0
 8010932:	f04f 0300 	mov.w	r3, #0
 8010936:	bf18      	it	ne
 8010938:	2601      	movne	r6, #1
 801093a:	f884 3020 	strb.w	r3, [r4, #32]
 801093e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8010942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010944 <uxr_is_output_up_to_date>:
 8010944:	8a01      	ldrh	r1, [r0, #16]
 8010946:	8a40      	ldrh	r0, [r0, #18]
 8010948:	b508      	push	{r3, lr}
 801094a:	f000 f919 	bl	8010b80 <uxr_seq_num_cmp>
 801094e:	fab0 f080 	clz	r0, r0
 8010952:	0940      	lsrs	r0, r0, #5
 8010954:	bd08      	pop	{r3, pc}
 8010956:	bf00      	nop

08010958 <get_available_free_slots>:
 8010958:	8901      	ldrh	r1, [r0, #8]
 801095a:	b1d9      	cbz	r1, 8010994 <get_available_free_slots+0x3c>
 801095c:	b4f0      	push	{r4, r5, r6, r7}
 801095e:	2400      	movs	r4, #0
 8010960:	6845      	ldr	r5, [r0, #4]
 8010962:	6807      	ldr	r7, [r0, #0]
 8010964:	7b06      	ldrb	r6, [r0, #12]
 8010966:	fbb5 f5f1 	udiv	r5, r5, r1
 801096a:	4620      	mov	r0, r4
 801096c:	4622      	mov	r2, r4
 801096e:	fbb2 f3f1 	udiv	r3, r2, r1
 8010972:	fb01 2313 	mls	r3, r1, r3, r2
 8010976:	b29b      	uxth	r3, r3
 8010978:	fb05 7303 	mla	r3, r5, r3, r7
 801097c:	3401      	adds	r4, #1
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	429e      	cmp	r6, r3
 8010982:	bf08      	it	eq
 8010984:	3001      	addeq	r0, #1
 8010986:	b2a2      	uxth	r2, r4
 8010988:	bf08      	it	eq
 801098a:	b280      	uxtheq	r0, r0
 801098c:	428a      	cmp	r2, r1
 801098e:	d3ee      	bcc.n	801096e <get_available_free_slots+0x16>
 8010990:	bcf0      	pop	{r4, r5, r6, r7}
 8010992:	4770      	bx	lr
 8010994:	4608      	mov	r0, r1
 8010996:	4770      	bx	lr

08010998 <uxr_buffer_cancel_data>:
 8010998:	b530      	push	{r4, r5, lr}
 801099a:	b095      	sub	sp, #84	@ 0x54
 801099c:	2400      	movs	r4, #0
 801099e:	2308      	movs	r3, #8
 80109a0:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	9205      	str	r2, [sp, #20]
 80109a8:	2501      	movs	r5, #1
 80109aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80109ac:	2210      	movs	r2, #16
 80109ae:	f8ad 401c 	strh.w	r4, [sp, #28]
 80109b2:	f88d 401e 	strb.w	r4, [sp, #30]
 80109b6:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 80109ba:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 80109be:	9103      	str	r1, [sp, #12]
 80109c0:	4604      	mov	r4, r0
 80109c2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80109c6:	f7fb fbc5 	bl	800c154 <uxr_prepare_stream_to_write_submessage>
 80109ca:	b918      	cbnz	r0, 80109d4 <uxr_buffer_cancel_data+0x3c>
 80109cc:	4604      	mov	r4, r0
 80109ce:	4620      	mov	r0, r4
 80109d0:	b015      	add	sp, #84	@ 0x54
 80109d2:	bd30      	pop	{r4, r5, pc}
 80109d4:	9905      	ldr	r1, [sp, #20]
 80109d6:	aa06      	add	r2, sp, #24
 80109d8:	4620      	mov	r0, r4
 80109da:	f7fb fcf5 	bl	800c3c8 <uxr_init_base_object_request>
 80109de:	a906      	add	r1, sp, #24
 80109e0:	4604      	mov	r4, r0
 80109e2:	a80c      	add	r0, sp, #48	@ 0x30
 80109e4:	f7fc feee 	bl	800d7c4 <uxr_serialize_READ_DATA_Payload>
 80109e8:	4620      	mov	r0, r4
 80109ea:	b015      	add	sp, #84	@ 0x54
 80109ec:	bd30      	pop	{r4, r5, pc}
 80109ee:	bf00      	nop

080109f0 <read_submessage_format>:
 80109f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f4:	b095      	sub	sp, #84	@ 0x54
 80109f6:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 80109fa:	b113      	cbz	r3, 8010a02 <read_submessage_format+0x12>
 80109fc:	b015      	add	sp, #84	@ 0x54
 80109fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a02:	460c      	mov	r4, r1
 8010a04:	4616      	mov	r6, r2
 8010a06:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010a0a:	461d      	mov	r5, r3
 8010a0c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010a0e:	9304      	str	r3, [sp, #16]
 8010a10:	1a52      	subs	r2, r2, r1
 8010a12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010a14:	9305      	str	r3, [sp, #20]
 8010a16:	4607      	mov	r7, r0
 8010a18:	a80c      	add	r0, sp, #48	@ 0x30
 8010a1a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010a1e:	f7fa faa1 	bl	800af64 <ucdr_init_buffer>
 8010a22:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010a26:	a80c      	add	r0, sp, #48	@ 0x30
 8010a28:	f7fa fa72 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 8010a2c:	69e3      	ldr	r3, [r4, #28]
 8010a2e:	b193      	cbz	r3, 8010a56 <read_submessage_format+0x66>
 8010a30:	f1b8 0f07 	cmp.w	r8, #7
 8010a34:	751d      	strb	r5, [r3, #20]
 8010a36:	d03e      	beq.n	8010ab6 <read_submessage_format+0xc6>
 8010a38:	f1b8 0f08 	cmp.w	r8, #8
 8010a3c:	d02c      	beq.n	8010a98 <read_submessage_format+0xa8>
 8010a3e:	f1b8 0f06 	cmp.w	r8, #6
 8010a42:	d011      	beq.n	8010a68 <read_submessage_format+0x78>
 8010a44:	2201      	movs	r2, #1
 8010a46:	751a      	strb	r2, [r3, #20]
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	f7fa fada 	bl	800b004 <ucdr_advance_buffer>
 8010a50:	b015      	add	sp, #84	@ 0x54
 8010a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a56:	f1b8 0f07 	cmp.w	r8, #7
 8010a5a:	d02c      	beq.n	8010ab6 <read_submessage_format+0xc6>
 8010a5c:	f1b8 0f08 	cmp.w	r8, #8
 8010a60:	d01a      	beq.n	8010a98 <read_submessage_format+0xa8>
 8010a62:	f1b8 0f06 	cmp.w	r8, #6
 8010a66:	d1ef      	bne.n	8010a48 <read_submessage_format+0x58>
 8010a68:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8010a6c:	b18d      	cbz	r5, 8010a92 <read_submessage_format+0xa2>
 8010a6e:	2306      	movs	r3, #6
 8010a70:	f88d 3016 	strb.w	r3, [sp, #22]
 8010a74:	aa0c      	add	r2, sp, #48	@ 0x30
 8010a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a7a:	9302      	str	r3, [sp, #8]
 8010a7c:	9200      	str	r2, [sp, #0]
 8010a7e:	9b04      	ldr	r3, [sp, #16]
 8010a80:	9905      	ldr	r1, [sp, #20]
 8010a82:	9601      	str	r6, [sp, #4]
 8010a84:	464a      	mov	r2, r9
 8010a86:	4638      	mov	r0, r7
 8010a88:	47a8      	blx	r5
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010a90:	69e3      	ldr	r3, [r4, #28]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1d6      	bne.n	8010a44 <read_submessage_format+0x54>
 8010a96:	e7d7      	b.n	8010a48 <read_submessage_format+0x58>
 8010a98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010a9c:	2a00      	cmp	r2, #0
 8010a9e:	d0f8      	beq.n	8010a92 <read_submessage_format+0xa2>
 8010aa0:	a906      	add	r1, sp, #24
 8010aa2:	a80c      	add	r0, sp, #48	@ 0x30
 8010aa4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010aa6:	f7fc ff2d 	bl	800d904 <uxr_deserialize_SampleIdentity>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d13c      	bne.n	8010b28 <read_submessage_format+0x138>
 8010aae:	69e3      	ldr	r3, [r4, #28]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1c7      	bne.n	8010a44 <read_submessage_format+0x54>
 8010ab4:	e7c8      	b.n	8010a48 <read_submessage_format+0x58>
 8010ab6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010aba:	b132      	cbz	r2, 8010aca <read_submessage_format+0xda>
 8010abc:	a906      	add	r1, sp, #24
 8010abe:	a80c      	add	r0, sp, #48	@ 0x30
 8010ac0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010ac2:	f7fc fc03 	bl	800d2cc <uxr_deserialize_BaseObjectRequest>
 8010ac6:	b930      	cbnz	r0, 8010ad6 <read_submessage_format+0xe6>
 8010ac8:	69e3      	ldr	r3, [r4, #28]
 8010aca:	68a2      	ldr	r2, [r4, #8]
 8010acc:	4432      	add	r2, r6
 8010ace:	60a2      	str	r2, [r4, #8]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1b7      	bne.n	8010a44 <read_submessage_format+0x54>
 8010ad4:	e7b8      	b.n	8010a48 <read_submessage_format+0x58>
 8010ad6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010ada:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010adc:	1a52      	subs	r2, r2, r1
 8010ade:	a80c      	add	r0, sp, #48	@ 0x30
 8010ae0:	1aed      	subs	r5, r5, r3
 8010ae2:	f7fa fa3f 	bl	800af64 <ucdr_init_buffer>
 8010ae6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010aea:	a80c      	add	r0, sp, #48	@ 0x30
 8010aec:	f7fa fa10 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 8010af0:	4435      	add	r5, r6
 8010af2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010af6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010afa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8010afe:	9002      	str	r0, [sp, #8]
 8010b00:	2207      	movs	r2, #7
 8010b02:	f88d 2016 	strb.w	r2, [sp, #22]
 8010b06:	b2ad      	uxth	r5, r5
 8010b08:	aa0c      	add	r2, sp, #48	@ 0x30
 8010b0a:	9200      	str	r2, [sp, #0]
 8010b0c:	9501      	str	r5, [sp, #4]
 8010b0e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	9905      	ldr	r1, [sp, #20]
 8010b16:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 8010b1a:	464a      	mov	r2, r9
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	47a8      	blx	r5
 8010b20:	2301      	movs	r3, #1
 8010b22:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b26:	e7cf      	b.n	8010ac8 <read_submessage_format+0xd8>
 8010b28:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b2e:	1a52      	subs	r2, r2, r1
 8010b30:	a80c      	add	r0, sp, #48	@ 0x30
 8010b32:	1aed      	subs	r5, r5, r3
 8010b34:	f7fa fa16 	bl	800af64 <ucdr_init_buffer>
 8010b38:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b3c:	a80c      	add	r0, sp, #48	@ 0x30
 8010b3e:	f7fa f9e7 	bl	800af10 <ucdr_set_on_full_buffer_callback>
 8010b42:	4435      	add	r5, r6
 8010b44:	2308      	movs	r3, #8
 8010b46:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8010b4a:	f88d 3016 	strb.w	r3, [sp, #22]
 8010b4e:	b2ad      	uxth	r5, r5
 8010b50:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	9002      	str	r0, [sp, #8]
 8010b56:	9501      	str	r5, [sp, #4]
 8010b58:	ab06      	add	r3, sp, #24
 8010b5a:	9905      	ldr	r1, [sp, #20]
 8010b5c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 8010b60:	464a      	mov	r2, r9
 8010b62:	4638      	mov	r0, r7
 8010b64:	47a8      	blx	r5
 8010b66:	2301      	movs	r3, #1
 8010b68:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b6c:	e79f      	b.n	8010aae <read_submessage_format+0xbe>
 8010b6e:	bf00      	nop

08010b70 <uxr_seq_num_add>:
 8010b70:	4408      	add	r0, r1
 8010b72:	b280      	uxth	r0, r0
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop

08010b78 <uxr_seq_num_sub>:
 8010b78:	1a40      	subs	r0, r0, r1
 8010b7a:	b280      	uxth	r0, r0
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop

08010b80 <uxr_seq_num_cmp>:
 8010b80:	4288      	cmp	r0, r1
 8010b82:	d011      	beq.n	8010ba8 <uxr_seq_num_cmp+0x28>
 8010b84:	d309      	bcc.n	8010b9a <uxr_seq_num_cmp+0x1a>
 8010b86:	4288      	cmp	r0, r1
 8010b88:	d910      	bls.n	8010bac <uxr_seq_num_cmp+0x2c>
 8010b8a:	1a40      	subs	r0, r0, r1
 8010b8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8010b90:	bfd4      	ite	le
 8010b92:	2001      	movle	r0, #1
 8010b94:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8010b98:	4770      	bx	lr
 8010b9a:	1a0b      	subs	r3, r1, r0
 8010b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ba0:	daf1      	bge.n	8010b86 <uxr_seq_num_cmp+0x6>
 8010ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ba6:	4770      	bx	lr
 8010ba8:	2000      	movs	r0, #0
 8010baa:	4770      	bx	lr
 8010bac:	2001      	movs	r0, #1
 8010bae:	4770      	bx	lr

08010bb0 <uxr_init_framing_io>:
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	7041      	strb	r1, [r0, #1]
 8010bb4:	7003      	strb	r3, [r0, #0]
 8010bb6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <uxr_write_framed_msg>:
 8010bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc0:	7845      	ldrb	r5, [r0, #1]
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8010bca:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 8010bce:	f1bc 0f01 	cmp.w	ip, #1
 8010bd2:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8010bd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010bda:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 8010bde:	460e      	mov	r6, r1
 8010be0:	4617      	mov	r7, r2
 8010be2:	469b      	mov	fp, r3
 8010be4:	f240 8116 	bls.w	8010e14 <uxr_write_framed_msg+0x258>
 8010be8:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8010bec:	2302      	movs	r3, #2
 8010bee:	2a01      	cmp	r2, #1
 8010bf0:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8010bf4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010bf8:	f240 8091 	bls.w	8010d1e <uxr_write_framed_msg+0x162>
 8010bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bfe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010c02:	b2d9      	uxtb	r1, r3
 8010c04:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010c08:	2203      	movs	r2, #3
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010c10:	f240 809a 	bls.w	8010d48 <uxr_write_framed_msg+0x18c>
 8010c14:	18a3      	adds	r3, r4, r2
 8010c16:	3201      	adds	r2, #1
 8010c18:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8010c1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010c26:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010c2a:	2901      	cmp	r1, #1
 8010c2c:	eb04 0102 	add.w	r1, r4, r2
 8010c30:	f240 8101 	bls.w	8010e36 <uxr_write_framed_msg+0x27a>
 8010c34:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010c38:	3201      	adds	r2, #1
 8010c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c3c:	b2d2      	uxtb	r2, r2
 8010c3e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f000 8106 	beq.w	8010e54 <uxr_write_framed_msg+0x298>
 8010c48:	f04f 0a00 	mov.w	sl, #0
 8010c4c:	46d1      	mov	r9, sl
 8010c4e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010c52:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010c56:	2901      	cmp	r1, #1
 8010c58:	f240 80a3 	bls.w	8010da2 <uxr_write_framed_msg+0x1e6>
 8010c5c:	2a29      	cmp	r2, #41	@ 0x29
 8010c5e:	d87f      	bhi.n	8010d60 <uxr_write_framed_msg+0x1a4>
 8010c60:	18a1      	adds	r1, r4, r2
 8010c62:	3201      	adds	r2, #1
 8010c64:	b2d2      	uxtb	r2, r2
 8010c66:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010c6a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010c6e:	ea8a 0303 	eor.w	r3, sl, r3
 8010c72:	4984      	ldr	r1, [pc, #528]	@ (8010e84 <uxr_write_framed_msg+0x2c8>)
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f109 0901 	add.w	r9, r9, #1
 8010c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c7e:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8010c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c84:	454b      	cmp	r3, r9
 8010c86:	d8e2      	bhi.n	8010c4e <uxr_write_framed_msg+0x92>
 8010c88:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8010c8c:	fa5f f98a 	uxtb.w	r9, sl
 8010c90:	9301      	str	r3, [sp, #4]
 8010c92:	f04f 0b00 	mov.w	fp, #0
 8010c96:	f88d 900c 	strb.w	r9, [sp, #12]
 8010c9a:	f88d 300d 	strb.w	r3, [sp, #13]
 8010c9e:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8010ca2:	fa5f f18a 	uxtb.w	r1, sl
 8010ca6:	2901      	cmp	r1, #1
 8010ca8:	d920      	bls.n	8010cec <uxr_write_framed_msg+0x130>
 8010caa:	2a29      	cmp	r2, #41	@ 0x29
 8010cac:	f240 808b 	bls.w	8010dc6 <uxr_write_framed_msg+0x20a>
 8010cb0:	2500      	movs	r5, #0
 8010cb2:	e000      	b.n	8010cb6 <uxr_write_framed_msg+0xfa>
 8010cb4:	b160      	cbz	r0, 8010cd0 <uxr_write_framed_msg+0x114>
 8010cb6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010cba:	1b52      	subs	r2, r2, r5
 8010cbc:	4421      	add	r1, r4
 8010cbe:	4643      	mov	r3, r8
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	47b0      	blx	r6
 8010cc4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010cc8:	4405      	add	r5, r0
 8010cca:	4295      	cmp	r5, r2
 8010ccc:	d3f2      	bcc.n	8010cb4 <uxr_write_framed_msg+0xf8>
 8010cce:	d003      	beq.n	8010cd8 <uxr_write_framed_msg+0x11c>
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	b005      	add	sp, #20
 8010cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd8:	fa5f f18a 	uxtb.w	r1, sl
 8010cdc:	f04f 0300 	mov.w	r3, #0
 8010ce0:	2901      	cmp	r1, #1
 8010ce2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010ce6:	f04f 0200 	mov.w	r2, #0
 8010cea:	d86c      	bhi.n	8010dc6 <uxr_write_framed_msg+0x20a>
 8010cec:	1c51      	adds	r1, r2, #1
 8010cee:	b2c9      	uxtb	r1, r1
 8010cf0:	2929      	cmp	r1, #41	@ 0x29
 8010cf2:	d8dd      	bhi.n	8010cb0 <uxr_write_framed_msg+0xf4>
 8010cf4:	18a0      	adds	r0, r4, r2
 8010cf6:	3202      	adds	r2, #2
 8010cf8:	f089 0920 	eor.w	r9, r9, #32
 8010cfc:	b2d2      	uxtb	r2, r2
 8010cfe:	4659      	mov	r1, fp
 8010d00:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010d04:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8010d08:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010d0c:	f04f 0b01 	mov.w	fp, #1
 8010d10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d14:	2900      	cmp	r1, #0
 8010d16:	d162      	bne.n	8010dde <uxr_write_framed_msg+0x222>
 8010d18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010d1c:	e7bf      	b.n	8010c9e <uxr_write_framed_msg+0xe2>
 8010d1e:	2204      	movs	r2, #4
 8010d20:	2503      	movs	r5, #3
 8010d22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010d24:	4423      	add	r3, r4
 8010d26:	b2c9      	uxtb	r1, r1
 8010d28:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010d2c:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8010d30:	4425      	add	r5, r4
 8010d32:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010d36:	f080 0020 	eor.w	r0, r0, #32
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8010d40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d44:	f63f af66 	bhi.w	8010c14 <uxr_write_framed_msg+0x58>
 8010d48:	18a3      	adds	r3, r4, r2
 8010d4a:	f081 0120 	eor.w	r1, r1, #32
 8010d4e:	3202      	adds	r2, #2
 8010d50:	207d      	movs	r0, #125	@ 0x7d
 8010d52:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8010d56:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 8010d5a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d5e:	e75f      	b.n	8010c20 <uxr_write_framed_msg+0x64>
 8010d60:	2500      	movs	r5, #0
 8010d62:	e001      	b.n	8010d68 <uxr_write_framed_msg+0x1ac>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d0b3      	beq.n	8010cd0 <uxr_write_framed_msg+0x114>
 8010d68:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010d6c:	1b52      	subs	r2, r2, r5
 8010d6e:	4421      	add	r1, r4
 8010d70:	4643      	mov	r3, r8
 8010d72:	4638      	mov	r0, r7
 8010d74:	47b0      	blx	r6
 8010d76:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010d7a:	4405      	add	r5, r0
 8010d7c:	4295      	cmp	r5, r2
 8010d7e:	d3f1      	bcc.n	8010d64 <uxr_write_framed_msg+0x1a8>
 8010d80:	d1a6      	bne.n	8010cd0 <uxr_write_framed_msg+0x114>
 8010d82:	f04f 0300 	mov.w	r3, #0
 8010d86:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d8c:	454b      	cmp	r3, r9
 8010d8e:	d971      	bls.n	8010e74 <uxr_write_framed_msg+0x2b8>
 8010d90:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010d94:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010d98:	2901      	cmp	r1, #1
 8010d9a:	f04f 0200 	mov.w	r2, #0
 8010d9e:	f63f af5d 	bhi.w	8010c5c <uxr_write_framed_msg+0xa0>
 8010da2:	1c51      	adds	r1, r2, #1
 8010da4:	b2c9      	uxtb	r1, r1
 8010da6:	2929      	cmp	r1, #41	@ 0x29
 8010da8:	d8da      	bhi.n	8010d60 <uxr_write_framed_msg+0x1a4>
 8010daa:	18a0      	adds	r0, r4, r2
 8010dac:	3202      	adds	r2, #2
 8010dae:	b2d2      	uxtb	r2, r2
 8010db0:	f083 0120 	eor.w	r1, r3, #32
 8010db4:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010db8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8010dbc:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8010dc0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010dc4:	e753      	b.n	8010c6e <uxr_write_framed_msg+0xb2>
 8010dc6:	18a0      	adds	r0, r4, r2
 8010dc8:	3201      	adds	r2, #1
 8010dca:	b2d2      	uxtb	r2, r2
 8010dcc:	4659      	mov	r1, fp
 8010dce:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 8010dd2:	f04f 0b01 	mov.w	fp, #1
 8010dd6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010dda:	2900      	cmp	r1, #0
 8010ddc:	d09c      	beq.n	8010d18 <uxr_write_framed_msg+0x15c>
 8010dde:	2500      	movs	r5, #0
 8010de0:	e002      	b.n	8010de8 <uxr_write_framed_msg+0x22c>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f43f af74 	beq.w	8010cd0 <uxr_write_framed_msg+0x114>
 8010de8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010dec:	1b52      	subs	r2, r2, r5
 8010dee:	4421      	add	r1, r4
 8010df0:	4643      	mov	r3, r8
 8010df2:	4638      	mov	r0, r7
 8010df4:	47b0      	blx	r6
 8010df6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010dfa:	4405      	add	r5, r0
 8010dfc:	4295      	cmp	r5, r2
 8010dfe:	d3f0      	bcc.n	8010de2 <uxr_write_framed_msg+0x226>
 8010e00:	f47f af66 	bne.w	8010cd0 <uxr_write_framed_msg+0x114>
 8010e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e06:	2300      	movs	r3, #0
 8010e08:	b290      	uxth	r0, r2
 8010e0a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010e0e:	b005      	add	sp, #20
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8010e18:	f085 0520 	eor.w	r5, r5, #32
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	217d      	movs	r1, #125	@ 0x7d
 8010e20:	2a01      	cmp	r2, #1
 8010e22:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8010e26:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010e2a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010e2e:	d814      	bhi.n	8010e5a <uxr_write_framed_msg+0x29e>
 8010e30:	2205      	movs	r2, #5
 8010e32:	2504      	movs	r5, #4
 8010e34:	e775      	b.n	8010d22 <uxr_write_framed_msg+0x166>
 8010e36:	f083 0320 	eor.w	r3, r3, #32
 8010e3a:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 8010e3e:	3202      	adds	r2, #2
 8010e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e42:	b2d2      	uxtb	r2, r2
 8010e44:	207d      	movs	r0, #125	@ 0x7d
 8010e46:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010e4a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f47f aefa 	bne.w	8010c48 <uxr_write_framed_msg+0x8c>
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	4699      	mov	r9, r3
 8010e58:	e71b      	b.n	8010c92 <uxr_write_framed_msg+0xd6>
 8010e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e5c:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8010e60:	b2d9      	uxtb	r1, r3
 8010e62:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010e66:	2204      	movs	r2, #4
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e6e:	f63f aed1 	bhi.w	8010c14 <uxr_write_framed_msg+0x58>
 8010e72:	e769      	b.n	8010d48 <uxr_write_framed_msg+0x18c>
 8010e74:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8010e78:	fa5f f98a 	uxtb.w	r9, sl
 8010e7c:	9301      	str	r3, [sp, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	e707      	b.n	8010c92 <uxr_write_framed_msg+0xd6>
 8010e82:	bf00      	nop
 8010e84:	08013638 	.word	0x08013638

08010e88 <uxr_framing_read_transport>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	b083      	sub	sp, #12
 8010e90:	461f      	mov	r7, r3
 8010e92:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8010e96:	4689      	mov	r9, r1
 8010e98:	4692      	mov	sl, r2
 8010e9a:	f7fb fc45 	bl	800c728 <uxr_millis>
 8010e9e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010ea2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8010ea6:	42b3      	cmp	r3, r6
 8010ea8:	4680      	mov	r8, r0
 8010eaa:	d05f      	beq.n	8010f6c <uxr_framing_read_transport+0xe4>
 8010eac:	d81b      	bhi.n	8010ee6 <uxr_framing_read_transport+0x5e>
 8010eae:	1e75      	subs	r5, r6, #1
 8010eb0:	1aed      	subs	r5, r5, r3
 8010eb2:	b2ed      	uxtb	r5, r5
 8010eb4:	2600      	movs	r6, #0
 8010eb6:	455d      	cmp	r5, fp
 8010eb8:	d81e      	bhi.n	8010ef8 <uxr_framing_read_transport+0x70>
 8010eba:	19ab      	adds	r3, r5, r6
 8010ebc:	455b      	cmp	r3, fp
 8010ebe:	bf84      	itt	hi
 8010ec0:	ebab 0605 	subhi.w	r6, fp, r5
 8010ec4:	b2f6      	uxtbhi	r6, r6
 8010ec6:	b9e5      	cbnz	r5, 8010f02 <uxr_framing_read_transport+0x7a>
 8010ec8:	f04f 0b00 	mov.w	fp, #0
 8010ecc:	f7fb fc2c 	bl	800c728 <uxr_millis>
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	eba0 0008 	sub.w	r0, r0, r8
 8010ed6:	1a1b      	subs	r3, r3, r0
 8010ed8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010edc:	4658      	mov	r0, fp
 8010ede:	603b      	str	r3, [r7, #0]
 8010ee0:	b003      	add	sp, #12
 8010ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee6:	2e00      	cmp	r6, #0
 8010ee8:	d048      	beq.n	8010f7c <uxr_framing_read_transport+0xf4>
 8010eea:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010eee:	b2ed      	uxtb	r5, r5
 8010ef0:	3e01      	subs	r6, #1
 8010ef2:	455d      	cmp	r5, fp
 8010ef4:	b2f6      	uxtb	r6, r6
 8010ef6:	d9e0      	bls.n	8010eba <uxr_framing_read_transport+0x32>
 8010ef8:	fa5f f58b 	uxtb.w	r5, fp
 8010efc:	2600      	movs	r6, #0
 8010efe:	2d00      	cmp	r5, #0
 8010f00:	d0e2      	beq.n	8010ec8 <uxr_framing_read_transport+0x40>
 8010f02:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010f06:	3102      	adds	r1, #2
 8010f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	4421      	add	r1, r4
 8010f10:	462a      	mov	r2, r5
 8010f12:	4650      	mov	r0, sl
 8010f14:	47c8      	blx	r9
 8010f16:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8010f88 <uxr_framing_read_transport+0x100>)
 8010f1c:	4403      	add	r3, r0
 8010f1e:	0859      	lsrs	r1, r3, #1
 8010f20:	fba2 2101 	umull	r2, r1, r2, r1
 8010f24:	0889      	lsrs	r1, r1, #2
 8010f26:	222a      	movs	r2, #42	@ 0x2a
 8010f28:	fb02 3111 	mls	r1, r2, r1, r3
 8010f2c:	4683      	mov	fp, r0
 8010f2e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d0c8      	beq.n	8010ec8 <uxr_framing_read_transport+0x40>
 8010f36:	42a8      	cmp	r0, r5
 8010f38:	d1c8      	bne.n	8010ecc <uxr_framing_read_transport+0x44>
 8010f3a:	b31e      	cbz	r6, 8010f84 <uxr_framing_read_transport+0xfc>
 8010f3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	3102      	adds	r1, #2
 8010f42:	4421      	add	r1, r4
 8010f44:	4632      	mov	r2, r6
 8010f46:	2300      	movs	r3, #0
 8010f48:	4650      	mov	r0, sl
 8010f4a:	47c8      	blx	r9
 8010f4c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010f50:	490d      	ldr	r1, [pc, #52]	@ (8010f88 <uxr_framing_read_transport+0x100>)
 8010f52:	181a      	adds	r2, r3, r0
 8010f54:	0853      	lsrs	r3, r2, #1
 8010f56:	fba1 1303 	umull	r1, r3, r1, r3
 8010f5a:	089b      	lsrs	r3, r3, #2
 8010f5c:	212a      	movs	r1, #42	@ 0x2a
 8010f5e:	fb01 2313 	mls	r3, r1, r3, r2
 8010f62:	eb00 0b05 	add.w	fp, r0, r5
 8010f66:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010f6a:	e7af      	b.n	8010ecc <uxr_framing_read_transport+0x44>
 8010f6c:	2600      	movs	r6, #0
 8010f6e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8010f72:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010f74:	d9c0      	bls.n	8010ef8 <uxr_framing_read_transport+0x70>
 8010f76:	2102      	movs	r1, #2
 8010f78:	2529      	movs	r5, #41	@ 0x29
 8010f7a:	e7c5      	b.n	8010f08 <uxr_framing_read_transport+0x80>
 8010f7c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8010f80:	b2ed      	uxtb	r5, r5
 8010f82:	e798      	b.n	8010eb6 <uxr_framing_read_transport+0x2e>
 8010f84:	46ab      	mov	fp, r5
 8010f86:	e7a1      	b.n	8010ecc <uxr_framing_read_transport+0x44>
 8010f88:	30c30c31 	.word	0x30c30c31

08010f8c <uxr_read_framed_msg>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8010f94:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8010f98:	42ae      	cmp	r6, r5
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	461f      	mov	r7, r3
 8010fa0:	4689      	mov	r9, r1
 8010fa2:	4692      	mov	sl, r2
 8010fa4:	f000 817d 	beq.w	80112a2 <uxr_read_framed_msg+0x316>
 8010fa8:	7823      	ldrb	r3, [r4, #0]
 8010faa:	4ecc      	ldr	r6, [pc, #816]	@ (80112dc <uxr_read_framed_msg+0x350>)
 8010fac:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 80112e0 <uxr_read_framed_msg+0x354>
 8010fb0:	2b07      	cmp	r3, #7
 8010fb2:	d8fd      	bhi.n	8010fb0 <uxr_read_framed_msg+0x24>
 8010fb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010fb8:	00f40113 	.word	0x00f40113
 8010fbc:	00b700d4 	.word	0x00b700d4
 8010fc0:	004d008e 	.word	0x004d008e
 8010fc4:	00080030 	.word	0x00080030
 8010fc8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010fcc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010fd0:	4298      	cmp	r0, r3
 8010fd2:	f000 8141 	beq.w	8011258 <uxr_read_framed_msg+0x2cc>
 8010fd6:	18e2      	adds	r2, r4, r3
 8010fd8:	7891      	ldrb	r1, [r2, #2]
 8010fda:	297d      	cmp	r1, #125	@ 0x7d
 8010fdc:	f000 81a2 	beq.w	8011324 <uxr_read_framed_msg+0x398>
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	085a      	lsrs	r2, r3, #1
 8010fe4:	fba6 0202 	umull	r0, r2, r6, r2
 8010fe8:	0892      	lsrs	r2, r2, #2
 8010fea:	202a      	movs	r0, #42	@ 0x2a
 8010fec:	fb00 3312 	mls	r3, r0, r2, r3
 8010ff0:	297e      	cmp	r1, #126	@ 0x7e
 8010ff2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010ff6:	f000 8251 	beq.w	801149c <uxr_read_framed_msg+0x510>
 8010ffa:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010ffc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8010ffe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011002:	b29b      	uxth	r3, r3
 8011004:	2100      	movs	r1, #0
 8011006:	429a      	cmp	r2, r3
 8011008:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801100a:	7021      	strb	r1, [r4, #0]
 801100c:	f000 8182 	beq.w	8011314 <uxr_read_framed_msg+0x388>
 8011010:	2000      	movs	r0, #0
 8011012:	b003      	add	sp, #12
 8011014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011018:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801101c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011020:	4298      	cmp	r0, r3
 8011022:	f000 8128 	beq.w	8011276 <uxr_read_framed_msg+0x2ea>
 8011026:	18e2      	adds	r2, r4, r3
 8011028:	7891      	ldrb	r1, [r2, #2]
 801102a:	297d      	cmp	r1, #125	@ 0x7d
 801102c:	f000 8196 	beq.w	801135c <uxr_read_framed_msg+0x3d0>
 8011030:	3301      	adds	r3, #1
 8011032:	085a      	lsrs	r2, r3, #1
 8011034:	fba6 0202 	umull	r0, r2, r6, r2
 8011038:	0892      	lsrs	r2, r2, #2
 801103a:	202a      	movs	r0, #42	@ 0x2a
 801103c:	fb00 3312 	mls	r3, r0, r2, r3
 8011040:	297e      	cmp	r1, #126	@ 0x7e
 8011042:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011046:	f000 8219 	beq.w	801147c <uxr_read_framed_msg+0x4f0>
 801104a:	2307      	movs	r3, #7
 801104c:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801104e:	7023      	strb	r3, [r4, #0]
 8011050:	e7ae      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 8011052:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011054:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8011056:	429d      	cmp	r5, r3
 8011058:	d937      	bls.n	80110ca <uxr_read_framed_msg+0x13e>
 801105a:	ee07 9a90 	vmov	s15, r9
 801105e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011062:	e01e      	b.n	80110a2 <uxr_read_framed_msg+0x116>
 8011064:	f89e e002 	ldrb.w	lr, [lr, #2]
 8011068:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801106c:	f000 80d2 	beq.w	8011214 <uxr_read_framed_msg+0x288>
 8011070:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011074:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011078:	f000 8214 	beq.w	80114a4 <uxr_read_framed_msg+0x518>
 801107c:	f807 e003 	strb.w	lr, [r7, r3]
 8011080:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8011082:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011084:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8011086:	ea80 010e 	eor.w	r1, r0, lr
 801108a:	b2c9      	uxtb	r1, r1
 801108c:	3301      	adds	r3, #1
 801108e:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8011092:	b29b      	uxth	r3, r3
 8011094:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8011098:	42ab      	cmp	r3, r5
 801109a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801109c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801109e:	f080 8121 	bcs.w	80112e4 <uxr_read_framed_msg+0x358>
 80110a2:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 80110a6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80110aa:	f101 0b01 	add.w	fp, r1, #1
 80110ae:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80110b2:	fba6 9202 	umull	r9, r2, r6, r2
 80110b6:	0892      	lsrs	r2, r2, #2
 80110b8:	4288      	cmp	r0, r1
 80110ba:	eb04 0e01 	add.w	lr, r4, r1
 80110be:	fb0c b212 	mls	r2, ip, r2, fp
 80110c2:	d1cf      	bne.n	8011064 <uxr_read_framed_msg+0xd8>
 80110c4:	ee17 9a90 	vmov	r9, s15
 80110c8:	429d      	cmp	r5, r3
 80110ca:	f040 8112 	bne.w	80112f2 <uxr_read_framed_msg+0x366>
 80110ce:	2306      	movs	r3, #6
 80110d0:	7023      	strb	r3, [r4, #0]
 80110d2:	e76d      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 80110d4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80110d8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80110dc:	4298      	cmp	r0, r3
 80110de:	f000 80bb 	beq.w	8011258 <uxr_read_framed_msg+0x2cc>
 80110e2:	18e2      	adds	r2, r4, r3
 80110e4:	7891      	ldrb	r1, [r2, #2]
 80110e6:	297d      	cmp	r1, #125	@ 0x7d
 80110e8:	f000 8153 	beq.w	8011392 <uxr_read_framed_msg+0x406>
 80110ec:	3301      	adds	r3, #1
 80110ee:	085a      	lsrs	r2, r3, #1
 80110f0:	fba6 0202 	umull	r0, r2, r6, r2
 80110f4:	0892      	lsrs	r2, r2, #2
 80110f6:	202a      	movs	r0, #42	@ 0x2a
 80110f8:	fb00 3212 	mls	r2, r0, r2, r3
 80110fc:	297e      	cmp	r1, #126	@ 0x7e
 80110fe:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011102:	f000 81cb 	beq.w	801149c <uxr_read_framed_msg+0x510>
 8011106:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011108:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801110c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801110e:	b29b      	uxth	r3, r3
 8011110:	2000      	movs	r0, #0
 8011112:	428b      	cmp	r3, r1
 8011114:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011116:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011118:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801111a:	f240 80db 	bls.w	80112d4 <uxr_read_framed_msg+0x348>
 801111e:	7020      	strb	r0, [r4, #0]
 8011120:	b003      	add	sp, #12
 8011122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011126:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801112a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801112e:	4298      	cmp	r0, r3
 8011130:	f000 80a1 	beq.w	8011276 <uxr_read_framed_msg+0x2ea>
 8011134:	18e2      	adds	r2, r4, r3
 8011136:	7891      	ldrb	r1, [r2, #2]
 8011138:	297d      	cmp	r1, #125	@ 0x7d
 801113a:	f000 8167 	beq.w	801140c <uxr_read_framed_msg+0x480>
 801113e:	3301      	adds	r3, #1
 8011140:	085a      	lsrs	r2, r3, #1
 8011142:	fba6 0202 	umull	r0, r2, r6, r2
 8011146:	0892      	lsrs	r2, r2, #2
 8011148:	202a      	movs	r0, #42	@ 0x2a
 801114a:	fb00 3312 	mls	r3, r0, r2, r3
 801114e:	297e      	cmp	r1, #126	@ 0x7e
 8011150:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011154:	f000 8192 	beq.w	801147c <uxr_read_framed_msg+0x4f0>
 8011158:	2304      	movs	r3, #4
 801115a:	8621      	strh	r1, [r4, #48]	@ 0x30
 801115c:	7023      	strb	r3, [r4, #0]
 801115e:	e727      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 8011160:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011164:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011168:	4290      	cmp	r0, r2
 801116a:	f000 80b1 	beq.w	80112d0 <uxr_read_framed_msg+0x344>
 801116e:	18a3      	adds	r3, r4, r2
 8011170:	7899      	ldrb	r1, [r3, #2]
 8011172:	297d      	cmp	r1, #125	@ 0x7d
 8011174:	f000 8166 	beq.w	8011444 <uxr_read_framed_msg+0x4b8>
 8011178:	3201      	adds	r2, #1
 801117a:	0850      	lsrs	r0, r2, #1
 801117c:	fba6 3000 	umull	r3, r0, r6, r0
 8011180:	0880      	lsrs	r0, r0, #2
 8011182:	232a      	movs	r3, #42	@ 0x2a
 8011184:	fb03 2210 	mls	r2, r3, r0, r2
 8011188:	297e      	cmp	r1, #126	@ 0x7e
 801118a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801118e:	f000 8187 	beq.w	80114a0 <uxr_read_framed_msg+0x514>
 8011192:	7863      	ldrb	r3, [r4, #1]
 8011194:	428b      	cmp	r3, r1
 8011196:	bf0c      	ite	eq
 8011198:	2303      	moveq	r3, #3
 801119a:	2300      	movne	r3, #0
 801119c:	7023      	strb	r3, [r4, #0]
 801119e:	e707      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 80111a0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80111a4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80111a8:	2200      	movs	r2, #0
 80111aa:	4299      	cmp	r1, r3
 80111ac:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80111b0:	d063      	beq.n	801127a <uxr_read_framed_msg+0x2ee>
 80111b2:	18e2      	adds	r2, r4, r3
 80111b4:	7892      	ldrb	r2, [r2, #2]
 80111b6:	2a7d      	cmp	r2, #125	@ 0x7d
 80111b8:	f000 8107 	beq.w	80113ca <uxr_read_framed_msg+0x43e>
 80111bc:	1c59      	adds	r1, r3, #1
 80111be:	084b      	lsrs	r3, r1, #1
 80111c0:	fba6 0303 	umull	r0, r3, r6, r3
 80111c4:	089b      	lsrs	r3, r3, #2
 80111c6:	202a      	movs	r0, #42	@ 0x2a
 80111c8:	fb00 1313 	mls	r3, r0, r3, r1
 80111cc:	2a7e      	cmp	r2, #126	@ 0x7e
 80111ce:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80111d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80111d6:	d050      	beq.n	801127a <uxr_read_framed_msg+0x2ee>
 80111d8:	2302      	movs	r3, #2
 80111da:	7023      	strb	r3, [r4, #0]
 80111dc:	e6e8      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 80111de:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 80111e2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80111e6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80111ea:	1c51      	adds	r1, r2, #1
 80111ec:	084b      	lsrs	r3, r1, #1
 80111ee:	fba6 5303 	umull	r5, r3, r6, r3
 80111f2:	089b      	lsrs	r3, r3, #2
 80111f4:	fb0c 1313 	mls	r3, ip, r3, r1
 80111f8:	4596      	cmp	lr, r2
 80111fa:	eb04 0002 	add.w	r0, r4, r2
 80111fe:	b2da      	uxtb	r2, r3
 8011200:	f43f af06 	beq.w	8011010 <uxr_read_framed_msg+0x84>
 8011204:	7883      	ldrb	r3, [r0, #2]
 8011206:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801120a:	2b7e      	cmp	r3, #126	@ 0x7e
 801120c:	d1ed      	bne.n	80111ea <uxr_read_framed_msg+0x25e>
 801120e:	2301      	movs	r3, #1
 8011210:	7023      	strb	r3, [r4, #0]
 8011212:	e6cd      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 8011214:	f101 0b01 	add.w	fp, r1, #1
 8011218:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801121c:	fba6 e202 	umull	lr, r2, r6, r2
 8011220:	3102      	adds	r1, #2
 8011222:	0892      	lsrs	r2, r2, #2
 8011224:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8011228:	fb0c b212 	mls	r2, ip, r2, fp
 801122c:	fba6 9e0e 	umull	r9, lr, r6, lr
 8011230:	eb04 0b02 	add.w	fp, r4, r2
 8011234:	b2d2      	uxtb	r2, r2
 8011236:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801123a:	4290      	cmp	r0, r2
 801123c:	fb0c 111e 	mls	r1, ip, lr, r1
 8011240:	f43f af40 	beq.w	80110c4 <uxr_read_framed_msg+0x138>
 8011244:	f89b e002 	ldrb.w	lr, [fp, #2]
 8011248:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801124c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011250:	d036      	beq.n	80112c0 <uxr_read_framed_msg+0x334>
 8011252:	f08e 0e20 	eor.w	lr, lr, #32
 8011256:	e711      	b.n	801107c <uxr_read_framed_msg+0xf0>
 8011258:	2301      	movs	r3, #1
 801125a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801125c:	4649      	mov	r1, r9
 801125e:	e9cd 2300 	strd	r2, r3, [sp]
 8011262:	4620      	mov	r0, r4
 8011264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011266:	4652      	mov	r2, sl
 8011268:	f7ff fe0e 	bl	8010e88 <uxr_framing_read_transport>
 801126c:	2800      	cmp	r0, #0
 801126e:	f43f aecf 	beq.w	8011010 <uxr_read_framed_msg+0x84>
 8011272:	7823      	ldrb	r3, [r4, #0]
 8011274:	e69c      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 8011276:	2302      	movs	r3, #2
 8011278:	e7ef      	b.n	801125a <uxr_read_framed_msg+0x2ce>
 801127a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801127c:	2304      	movs	r3, #4
 801127e:	e9cd 2300 	strd	r2, r3, [sp]
 8011282:	4649      	mov	r1, r9
 8011284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011286:	4652      	mov	r2, sl
 8011288:	4620      	mov	r0, r4
 801128a:	f7ff fdfd 	bl	8010e88 <uxr_framing_read_transport>
 801128e:	2800      	cmp	r0, #0
 8011290:	d1ef      	bne.n	8011272 <uxr_read_framed_msg+0x2e6>
 8011292:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8011296:	387e      	subs	r0, #126	@ 0x7e
 8011298:	bf18      	it	ne
 801129a:	2001      	movne	r0, #1
 801129c:	2800      	cmp	r0, #0
 801129e:	d0e8      	beq.n	8011272 <uxr_read_framed_msg+0x2e6>
 80112a0:	e6b6      	b.n	8011010 <uxr_read_framed_msg+0x84>
 80112a2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80112a4:	2305      	movs	r3, #5
 80112a6:	e9cd 5300 	strd	r5, r3, [sp]
 80112aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112ac:	f7ff fdec 	bl	8010e88 <uxr_framing_read_transport>
 80112b0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80112b4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80112b8:	429a      	cmp	r2, r3
 80112ba:	f43f aea9 	beq.w	8011010 <uxr_read_framed_msg+0x84>
 80112be:	e673      	b.n	8010fa8 <uxr_read_framed_msg+0x1c>
 80112c0:	429d      	cmp	r5, r3
 80112c2:	ee17 9a90 	vmov	r9, s15
 80112c6:	f43f af02 	beq.w	80110ce <uxr_read_framed_msg+0x142>
 80112ca:	2301      	movs	r3, #1
 80112cc:	7023      	strb	r3, [r4, #0]
 80112ce:	e66f      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 80112d0:	2303      	movs	r3, #3
 80112d2:	e7c2      	b.n	801125a <uxr_read_framed_msg+0x2ce>
 80112d4:	2305      	movs	r3, #5
 80112d6:	7023      	strb	r3, [r4, #0]
 80112d8:	e66a      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 80112da:	bf00      	nop
 80112dc:	30c30c31 	.word	0x30c30c31
 80112e0:	08013638 	.word	0x08013638
 80112e4:	ee17 9a90 	vmov	r9, s15
 80112e8:	f43f aef1 	beq.w	80110ce <uxr_read_framed_msg+0x142>
 80112ec:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80112f0:	d08d      	beq.n	801120e <uxr_read_framed_msg+0x282>
 80112f2:	1aeb      	subs	r3, r5, r3
 80112f4:	3302      	adds	r3, #2
 80112f6:	9301      	str	r3, [sp, #4]
 80112f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	4652      	mov	r2, sl
 80112fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011300:	4649      	mov	r1, r9
 8011302:	4620      	mov	r0, r4
 8011304:	f7ff fdc0 	bl	8010e88 <uxr_framing_read_transport>
 8011308:	fab0 f080 	clz	r0, r0
 801130c:	0940      	lsrs	r0, r0, #5
 801130e:	2800      	cmp	r0, #0
 8011310:	d0af      	beq.n	8011272 <uxr_read_framed_msg+0x2e6>
 8011312:	e67d      	b.n	8011010 <uxr_read_framed_msg+0x84>
 8011314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011316:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801131a:	7013      	strb	r3, [r2, #0]
 801131c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801131e:	b003      	add	sp, #12
 8011320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011324:	1c59      	adds	r1, r3, #1
 8011326:	084a      	lsrs	r2, r1, #1
 8011328:	fba6 5202 	umull	r5, r2, r6, r2
 801132c:	0892      	lsrs	r2, r2, #2
 801132e:	252a      	movs	r5, #42	@ 0x2a
 8011330:	fb05 1212 	mls	r2, r5, r2, r1
 8011334:	b2d1      	uxtb	r1, r2
 8011336:	4288      	cmp	r0, r1
 8011338:	d08e      	beq.n	8011258 <uxr_read_framed_msg+0x2cc>
 801133a:	3302      	adds	r3, #2
 801133c:	4422      	add	r2, r4
 801133e:	0858      	lsrs	r0, r3, #1
 8011340:	fba6 1000 	umull	r1, r0, r6, r0
 8011344:	7891      	ldrb	r1, [r2, #2]
 8011346:	0882      	lsrs	r2, r0, #2
 8011348:	fb05 3312 	mls	r3, r5, r2, r3
 801134c:	297e      	cmp	r1, #126	@ 0x7e
 801134e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011352:	f000 80a3 	beq.w	801149c <uxr_read_framed_msg+0x510>
 8011356:	f081 0120 	eor.w	r1, r1, #32
 801135a:	e64e      	b.n	8010ffa <uxr_read_framed_msg+0x6e>
 801135c:	1c59      	adds	r1, r3, #1
 801135e:	084a      	lsrs	r2, r1, #1
 8011360:	fba6 5202 	umull	r5, r2, r6, r2
 8011364:	0892      	lsrs	r2, r2, #2
 8011366:	252a      	movs	r5, #42	@ 0x2a
 8011368:	fb05 1212 	mls	r2, r5, r2, r1
 801136c:	b2d1      	uxtb	r1, r2
 801136e:	4288      	cmp	r0, r1
 8011370:	d081      	beq.n	8011276 <uxr_read_framed_msg+0x2ea>
 8011372:	3302      	adds	r3, #2
 8011374:	4422      	add	r2, r4
 8011376:	0858      	lsrs	r0, r3, #1
 8011378:	fba6 1000 	umull	r1, r0, r6, r0
 801137c:	7891      	ldrb	r1, [r2, #2]
 801137e:	0882      	lsrs	r2, r0, #2
 8011380:	fb05 3312 	mls	r3, r5, r2, r3
 8011384:	297e      	cmp	r1, #126	@ 0x7e
 8011386:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801138a:	d077      	beq.n	801147c <uxr_read_framed_msg+0x4f0>
 801138c:	f081 0120 	eor.w	r1, r1, #32
 8011390:	e65b      	b.n	801104a <uxr_read_framed_msg+0xbe>
 8011392:	1c59      	adds	r1, r3, #1
 8011394:	084a      	lsrs	r2, r1, #1
 8011396:	fba6 5202 	umull	r5, r2, r6, r2
 801139a:	0892      	lsrs	r2, r2, #2
 801139c:	252a      	movs	r5, #42	@ 0x2a
 801139e:	fb05 1212 	mls	r2, r5, r2, r1
 80113a2:	b2d1      	uxtb	r1, r2
 80113a4:	4288      	cmp	r0, r1
 80113a6:	f43f af57 	beq.w	8011258 <uxr_read_framed_msg+0x2cc>
 80113aa:	3302      	adds	r3, #2
 80113ac:	4422      	add	r2, r4
 80113ae:	0858      	lsrs	r0, r3, #1
 80113b0:	fba6 1000 	umull	r1, r0, r6, r0
 80113b4:	7891      	ldrb	r1, [r2, #2]
 80113b6:	0882      	lsrs	r2, r0, #2
 80113b8:	fb05 3312 	mls	r3, r5, r2, r3
 80113bc:	297e      	cmp	r1, #126	@ 0x7e
 80113be:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80113c2:	d06b      	beq.n	801149c <uxr_read_framed_msg+0x510>
 80113c4:	f081 0120 	eor.w	r1, r1, #32
 80113c8:	e69d      	b.n	8011106 <uxr_read_framed_msg+0x17a>
 80113ca:	1c5d      	adds	r5, r3, #1
 80113cc:	086a      	lsrs	r2, r5, #1
 80113ce:	fba6 0202 	umull	r0, r2, r6, r2
 80113d2:	0892      	lsrs	r2, r2, #2
 80113d4:	202a      	movs	r0, #42	@ 0x2a
 80113d6:	fb00 5212 	mls	r2, r0, r2, r5
 80113da:	b2d5      	uxtb	r5, r2
 80113dc:	42a9      	cmp	r1, r5
 80113de:	f43f af4c 	beq.w	801127a <uxr_read_framed_msg+0x2ee>
 80113e2:	3302      	adds	r3, #2
 80113e4:	4422      	add	r2, r4
 80113e6:	0859      	lsrs	r1, r3, #1
 80113e8:	fba6 5101 	umull	r5, r1, r6, r1
 80113ec:	7895      	ldrb	r5, [r2, #2]
 80113ee:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 80113f2:	088a      	lsrs	r2, r1, #2
 80113f4:	fb00 3312 	mls	r3, r0, r2, r3
 80113f8:	2d7e      	cmp	r5, #126	@ 0x7e
 80113fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80113fe:	f43f af3c 	beq.w	801127a <uxr_read_framed_msg+0x2ee>
 8011402:	f085 0520 	eor.w	r5, r5, #32
 8011406:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 801140a:	e6e5      	b.n	80111d8 <uxr_read_framed_msg+0x24c>
 801140c:	1c59      	adds	r1, r3, #1
 801140e:	084a      	lsrs	r2, r1, #1
 8011410:	fba6 5202 	umull	r5, r2, r6, r2
 8011414:	0892      	lsrs	r2, r2, #2
 8011416:	252a      	movs	r5, #42	@ 0x2a
 8011418:	fb05 1212 	mls	r2, r5, r2, r1
 801141c:	b2d1      	uxtb	r1, r2
 801141e:	4288      	cmp	r0, r1
 8011420:	f43f af29 	beq.w	8011276 <uxr_read_framed_msg+0x2ea>
 8011424:	3302      	adds	r3, #2
 8011426:	4422      	add	r2, r4
 8011428:	0858      	lsrs	r0, r3, #1
 801142a:	fba6 1000 	umull	r1, r0, r6, r0
 801142e:	7891      	ldrb	r1, [r2, #2]
 8011430:	0882      	lsrs	r2, r0, #2
 8011432:	fb05 3312 	mls	r3, r5, r2, r3
 8011436:	297e      	cmp	r1, #126	@ 0x7e
 8011438:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801143c:	d01e      	beq.n	801147c <uxr_read_framed_msg+0x4f0>
 801143e:	f081 0120 	eor.w	r1, r1, #32
 8011442:	e689      	b.n	8011158 <uxr_read_framed_msg+0x1cc>
 8011444:	1c51      	adds	r1, r2, #1
 8011446:	084b      	lsrs	r3, r1, #1
 8011448:	fba6 5303 	umull	r5, r3, r6, r3
 801144c:	089b      	lsrs	r3, r3, #2
 801144e:	252a      	movs	r5, #42	@ 0x2a
 8011450:	fb05 1313 	mls	r3, r5, r3, r1
 8011454:	b2d9      	uxtb	r1, r3
 8011456:	4288      	cmp	r0, r1
 8011458:	f43f af3a 	beq.w	80112d0 <uxr_read_framed_msg+0x344>
 801145c:	3202      	adds	r2, #2
 801145e:	4423      	add	r3, r4
 8011460:	0850      	lsrs	r0, r2, #1
 8011462:	789b      	ldrb	r3, [r3, #2]
 8011464:	fba6 1000 	umull	r1, r0, r6, r0
 8011468:	0880      	lsrs	r0, r0, #2
 801146a:	fb05 2210 	mls	r2, r5, r0, r2
 801146e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011470:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011474:	d014      	beq.n	80114a0 <uxr_read_framed_msg+0x514>
 8011476:	f083 0120 	eor.w	r1, r3, #32
 801147a:	e68a      	b.n	8011192 <uxr_read_framed_msg+0x206>
 801147c:	2302      	movs	r3, #2
 801147e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011480:	4649      	mov	r1, r9
 8011482:	e9cd 2300 	strd	r2, r3, [sp]
 8011486:	4620      	mov	r0, r4
 8011488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801148a:	4652      	mov	r2, sl
 801148c:	f7ff fcfc 	bl	8010e88 <uxr_framing_read_transport>
 8011490:	2800      	cmp	r0, #0
 8011492:	f47f aeee 	bne.w	8011272 <uxr_read_framed_msg+0x2e6>
 8011496:	2301      	movs	r3, #1
 8011498:	7023      	strb	r3, [r4, #0]
 801149a:	e589      	b.n	8010fb0 <uxr_read_framed_msg+0x24>
 801149c:	2301      	movs	r3, #1
 801149e:	e7ee      	b.n	801147e <uxr_read_framed_msg+0x4f2>
 80114a0:	2303      	movs	r3, #3
 80114a2:	e7ec      	b.n	801147e <uxr_read_framed_msg+0x4f2>
 80114a4:	ee17 9a90 	vmov	r9, s15
 80114a8:	e6b1      	b.n	801120e <uxr_read_framed_msg+0x282>
 80114aa:	bf00      	nop

080114ac <rcl_get_default_domain_id>:
 80114ac:	b530      	push	{r4, r5, lr}
 80114ae:	b083      	sub	sp, #12
 80114b0:	2300      	movs	r3, #0
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	b1d0      	cbz	r0, 80114ec <rcl_get_default_domain_id+0x40>
 80114b6:	4604      	mov	r4, r0
 80114b8:	4669      	mov	r1, sp
 80114ba:	4815      	ldr	r0, [pc, #84]	@ (8011510 <rcl_get_default_domain_id+0x64>)
 80114bc:	f7fd fbbe 	bl	800ec3c <rcutils_get_env>
 80114c0:	4602      	mov	r2, r0
 80114c2:	b110      	cbz	r0, 80114ca <rcl_get_default_domain_id+0x1e>
 80114c4:	2001      	movs	r0, #1
 80114c6:	b003      	add	sp, #12
 80114c8:	bd30      	pop	{r4, r5, pc}
 80114ca:	9b00      	ldr	r3, [sp, #0]
 80114cc:	b18b      	cbz	r3, 80114f2 <rcl_get_default_domain_id+0x46>
 80114ce:	7818      	ldrb	r0, [r3, #0]
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d0f8      	beq.n	80114c6 <rcl_get_default_domain_id+0x1a>
 80114d4:	4618      	mov	r0, r3
 80114d6:	a901      	add	r1, sp, #4
 80114d8:	9201      	str	r2, [sp, #4]
 80114da:	f000 fc3f 	bl	8011d5c <strtoul>
 80114de:	4605      	mov	r5, r0
 80114e0:	b150      	cbz	r0, 80114f8 <rcl_get_default_domain_id+0x4c>
 80114e2:	1c43      	adds	r3, r0, #1
 80114e4:	d00d      	beq.n	8011502 <rcl_get_default_domain_id+0x56>
 80114e6:	6025      	str	r5, [r4, #0]
 80114e8:	2000      	movs	r0, #0
 80114ea:	e7ec      	b.n	80114c6 <rcl_get_default_domain_id+0x1a>
 80114ec:	200b      	movs	r0, #11
 80114ee:	b003      	add	sp, #12
 80114f0:	bd30      	pop	{r4, r5, pc}
 80114f2:	4618      	mov	r0, r3
 80114f4:	b003      	add	sp, #12
 80114f6:	bd30      	pop	{r4, r5, pc}
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d0f2      	beq.n	80114e6 <rcl_get_default_domain_id+0x3a>
 8011500:	e7e0      	b.n	80114c4 <rcl_get_default_domain_id+0x18>
 8011502:	f000 fe3b 	bl	801217c <__errno>
 8011506:	6803      	ldr	r3, [r0, #0]
 8011508:	2b22      	cmp	r3, #34	@ 0x22
 801150a:	d1ec      	bne.n	80114e6 <rcl_get_default_domain_id+0x3a>
 801150c:	e7da      	b.n	80114c4 <rcl_get_default_domain_id+0x18>
 801150e:	bf00      	nop
 8011510:	08013838 	.word	0x08013838

08011514 <rcl_get_zero_initialized_guard_condition>:
 8011514:	4a03      	ldr	r2, [pc, #12]	@ (8011524 <rcl_get_zero_initialized_guard_condition+0x10>)
 8011516:	4603      	mov	r3, r0
 8011518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801151c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011520:	4618      	mov	r0, r3
 8011522:	4770      	bx	lr
 8011524:	08013848 	.word	0x08013848

08011528 <rcl_guard_condition_init_from_rmw>:
 8011528:	b082      	sub	sp, #8
 801152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	ac0c      	add	r4, sp, #48	@ 0x30
 8011532:	4684      	mov	ip, r0
 8011534:	f844 3f04 	str.w	r3, [r4, #4]!
 8011538:	460f      	mov	r7, r1
 801153a:	4690      	mov	r8, r2
 801153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801153e:	ad01      	add	r5, sp, #4
 8011540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	602b      	str	r3, [r5, #0]
 8011546:	a801      	add	r0, sp, #4
 8011548:	4664      	mov	r4, ip
 801154a:	f7f7 fdd9 	bl	8009100 <rcutils_allocator_is_valid>
 801154e:	b328      	cbz	r0, 801159c <rcl_guard_condition_init_from_rmw+0x74>
 8011550:	b324      	cbz	r4, 801159c <rcl_guard_condition_init_from_rmw+0x74>
 8011552:	6866      	ldr	r6, [r4, #4]
 8011554:	b9e6      	cbnz	r6, 8011590 <rcl_guard_condition_init_from_rmw+0x68>
 8011556:	f1b8 0f00 	cmp.w	r8, #0
 801155a:	d01f      	beq.n	801159c <rcl_guard_condition_init_from_rmw+0x74>
 801155c:	4640      	mov	r0, r8
 801155e:	f7fc fa19 	bl	800d994 <rcl_context_is_valid>
 8011562:	b308      	cbz	r0, 80115a8 <rcl_guard_condition_init_from_rmw+0x80>
 8011564:	9b01      	ldr	r3, [sp, #4]
 8011566:	9905      	ldr	r1, [sp, #20]
 8011568:	201c      	movs	r0, #28
 801156a:	4798      	blx	r3
 801156c:	4605      	mov	r5, r0
 801156e:	6060      	str	r0, [r4, #4]
 8011570:	b340      	cbz	r0, 80115c4 <rcl_guard_condition_init_from_rmw+0x9c>
 8011572:	b1df      	cbz	r7, 80115ac <rcl_guard_condition_init_from_rmw+0x84>
 8011574:	6007      	str	r7, [r0, #0]
 8011576:	7106      	strb	r6, [r0, #4]
 8011578:	ac01      	add	r4, sp, #4
 801157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801157c:	3508      	adds	r5, #8
 801157e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	602b      	str	r3, [r5, #0]
 8011584:	2000      	movs	r0, #0
 8011586:	b006      	add	sp, #24
 8011588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801158c:	b002      	add	sp, #8
 801158e:	4770      	bx	lr
 8011590:	2064      	movs	r0, #100	@ 0x64
 8011592:	b006      	add	sp, #24
 8011594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	b002      	add	sp, #8
 801159a:	4770      	bx	lr
 801159c:	200b      	movs	r0, #11
 801159e:	b006      	add	sp, #24
 80115a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115a4:	b002      	add	sp, #8
 80115a6:	4770      	bx	lr
 80115a8:	2065      	movs	r0, #101	@ 0x65
 80115aa:	e7f2      	b.n	8011592 <rcl_guard_condition_init_from_rmw+0x6a>
 80115ac:	f8d8 0000 	ldr.w	r0, [r8]
 80115b0:	3028      	adds	r0, #40	@ 0x28
 80115b2:	f000 f979 	bl	80118a8 <rmw_create_guard_condition>
 80115b6:	6028      	str	r0, [r5, #0]
 80115b8:	6865      	ldr	r5, [r4, #4]
 80115ba:	682e      	ldr	r6, [r5, #0]
 80115bc:	b126      	cbz	r6, 80115c8 <rcl_guard_condition_init_from_rmw+0xa0>
 80115be:	2301      	movs	r3, #1
 80115c0:	712b      	strb	r3, [r5, #4]
 80115c2:	e7d9      	b.n	8011578 <rcl_guard_condition_init_from_rmw+0x50>
 80115c4:	200a      	movs	r0, #10
 80115c6:	e7e4      	b.n	8011592 <rcl_guard_condition_init_from_rmw+0x6a>
 80115c8:	4628      	mov	r0, r5
 80115ca:	9b02      	ldr	r3, [sp, #8]
 80115cc:	9905      	ldr	r1, [sp, #20]
 80115ce:	4798      	blx	r3
 80115d0:	6066      	str	r6, [r4, #4]
 80115d2:	2001      	movs	r0, #1
 80115d4:	e7dd      	b.n	8011592 <rcl_guard_condition_init_from_rmw+0x6a>
 80115d6:	bf00      	nop

080115d8 <rcl_guard_condition_fini>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	b1f0      	cbz	r0, 801161c <rcl_guard_condition_fini+0x44>
 80115de:	4604      	mov	r4, r0
 80115e0:	6840      	ldr	r0, [r0, #4]
 80115e2:	b158      	cbz	r0, 80115fc <rcl_guard_condition_fini+0x24>
 80115e4:	6803      	ldr	r3, [r0, #0]
 80115e6:	68c6      	ldr	r6, [r0, #12]
 80115e8:	6981      	ldr	r1, [r0, #24]
 80115ea:	b15b      	cbz	r3, 8011604 <rcl_guard_condition_fini+0x2c>
 80115ec:	7905      	ldrb	r5, [r0, #4]
 80115ee:	b95d      	cbnz	r5, 8011608 <rcl_guard_condition_fini+0x30>
 80115f0:	47b0      	blx	r6
 80115f2:	2300      	movs	r3, #0
 80115f4:	4628      	mov	r0, r5
 80115f6:	6063      	str	r3, [r4, #4]
 80115f8:	b002      	add	sp, #8
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	4605      	mov	r5, r0
 80115fe:	4628      	mov	r0, r5
 8011600:	b002      	add	sp, #8
 8011602:	bd70      	pop	{r4, r5, r6, pc}
 8011604:	461d      	mov	r5, r3
 8011606:	e7f3      	b.n	80115f0 <rcl_guard_condition_fini+0x18>
 8011608:	4618      	mov	r0, r3
 801160a:	9101      	str	r1, [sp, #4]
 801160c:	f000 f960 	bl	80118d0 <rmw_destroy_guard_condition>
 8011610:	1e05      	subs	r5, r0, #0
 8011612:	9901      	ldr	r1, [sp, #4]
 8011614:	6860      	ldr	r0, [r4, #4]
 8011616:	bf18      	it	ne
 8011618:	2501      	movne	r5, #1
 801161a:	e7e9      	b.n	80115f0 <rcl_guard_condition_fini+0x18>
 801161c:	250b      	movs	r5, #11
 801161e:	4628      	mov	r0, r5
 8011620:	b002      	add	sp, #8
 8011622:	bd70      	pop	{r4, r5, r6, pc}

08011624 <rcl_guard_condition_get_default_options>:
 8011624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011626:	b087      	sub	sp, #28
 8011628:	4607      	mov	r7, r0
 801162a:	466c      	mov	r4, sp
 801162c:	4668      	mov	r0, sp
 801162e:	f7f7 fd59 	bl	80090e4 <rcutils_get_default_allocator>
 8011632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011634:	4d07      	ldr	r5, [pc, #28]	@ (8011654 <rcl_guard_condition_get_default_options+0x30>)
 8011636:	f8d4 c000 	ldr.w	ip, [r4]
 801163a:	462e      	mov	r6, r5
 801163c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801163e:	462c      	mov	r4, r5
 8011640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011642:	463c      	mov	r4, r7
 8011644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011646:	4638      	mov	r0, r7
 8011648:	f8c6 c000 	str.w	ip, [r6]
 801164c:	f8c4 c000 	str.w	ip, [r4]
 8011650:	b007      	add	sp, #28
 8011652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011654:	200092e4 	.word	0x200092e4

08011658 <on_status>:
 8011658:	b082      	sub	sp, #8
 801165a:	b002      	add	sp, #8
 801165c:	4770      	bx	lr
 801165e:	bf00      	nop

08011660 <on_topic>:
 8011660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011664:	4a21      	ldr	r2, [pc, #132]	@ (80116ec <on_topic+0x8c>)
 8011666:	b094      	sub	sp, #80	@ 0x50
 8011668:	6812      	ldr	r2, [r2, #0]
 801166a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801166c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8011670:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011672:	9312      	str	r3, [sp, #72]	@ 0x48
 8011674:	b3ba      	cbz	r2, 80116e6 <on_topic+0x86>
 8011676:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801167a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801167e:	e001      	b.n	8011684 <on_topic+0x24>
 8011680:	6892      	ldr	r2, [r2, #8]
 8011682:	b382      	cbz	r2, 80116e6 <on_topic+0x86>
 8011684:	68d4      	ldr	r4, [r2, #12]
 8011686:	8aa3      	ldrh	r3, [r4, #20]
 8011688:	428b      	cmp	r3, r1
 801168a:	d1f9      	bne.n	8011680 <on_topic+0x20>
 801168c:	7da3      	ldrb	r3, [r4, #22]
 801168e:	4283      	cmp	r3, r0
 8011690:	d1f6      	bne.n	8011680 <on_topic+0x20>
 8011692:	2248      	movs	r2, #72	@ 0x48
 8011694:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011698:	4668      	mov	r0, sp
 801169a:	f000 fda4 	bl	80121e6 <memcpy>
 801169e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 80116a2:	4620      	mov	r0, r4
 80116a4:	f7f8 fa7e 	bl	8009ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80116a8:	4607      	mov	r7, r0
 80116aa:	b1e0      	cbz	r0, 80116e6 <on_topic+0x86>
 80116ac:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80116b0:	462a      	mov	r2, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	f108 0110 	add.w	r1, r8, #16
 80116b8:	f7fe faa8 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 80116bc:	b930      	cbnz	r0, 80116cc <on_topic+0x6c>
 80116be:	480c      	ldr	r0, [pc, #48]	@ (80116f0 <on_topic+0x90>)
 80116c0:	4639      	mov	r1, r7
 80116c2:	b014      	add	sp, #80	@ 0x50
 80116c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116c8:	f7fd bd2c 	b.w	800f124 <put_memory>
 80116cc:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80116d0:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80116d4:	f7fe f9c4 	bl	800fa60 <rmw_uros_epoch_nanos>
 80116d8:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 80116dc:	2305      	movs	r3, #5
 80116de:	e9c2 0100 	strd	r0, r1, [r2]
 80116e2:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80116e6:	b014      	add	sp, #80	@ 0x50
 80116e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ec:	2000c6ec 	.word	0x2000c6ec
 80116f0:	20009480 	.word	0x20009480

080116f4 <on_request>:
 80116f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116f8:	4822      	ldr	r0, [pc, #136]	@ (8011784 <on_request+0x90>)
 80116fa:	b095      	sub	sp, #84	@ 0x54
 80116fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80116fe:	6801      	ldr	r1, [r0, #0]
 8011700:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8011702:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8011706:	2900      	cmp	r1, #0
 8011708:	d039      	beq.n	801177e <on_request+0x8a>
 801170a:	461d      	mov	r5, r3
 801170c:	e001      	b.n	8011712 <on_request+0x1e>
 801170e:	6889      	ldr	r1, [r1, #8]
 8011710:	b3a9      	cbz	r1, 801177e <on_request+0x8a>
 8011712:	68cc      	ldr	r4, [r1, #12]
 8011714:	8b20      	ldrh	r0, [r4, #24]
 8011716:	4290      	cmp	r0, r2
 8011718:	d1f9      	bne.n	801170e <on_request+0x1a>
 801171a:	2248      	movs	r2, #72	@ 0x48
 801171c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011720:	4668      	mov	r0, sp
 8011722:	f000 fd60 	bl	80121e6 <memcpy>
 8011726:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801172a:	4620      	mov	r0, r4
 801172c:	f7f8 fa3a 	bl	8009ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011730:	4680      	mov	r8, r0
 8011732:	b320      	cbz	r0, 801177e <on_request+0x8a>
 8011734:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8011738:	4632      	mov	r2, r6
 801173a:	4638      	mov	r0, r7
 801173c:	f109 0110 	add.w	r1, r9, #16
 8011740:	f7fe fa64 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 8011744:	b930      	cbnz	r0, 8011754 <on_request+0x60>
 8011746:	4810      	ldr	r0, [pc, #64]	@ (8011788 <on_request+0x94>)
 8011748:	4641      	mov	r1, r8
 801174a:	b015      	add	sp, #84	@ 0x54
 801174c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011750:	f7fd bce8 	b.w	800f124 <put_memory>
 8011754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011756:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 801175a:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 801175e:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8011762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011768:	e884 0003 	stmia.w	r4, {r0, r1}
 801176c:	f7fe f978 	bl	800fa60 <rmw_uros_epoch_nanos>
 8011770:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8011774:	2303      	movs	r3, #3
 8011776:	e9c2 0100 	strd	r0, r1, [r2]
 801177a:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 801177e:	b015      	add	sp, #84	@ 0x54
 8011780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011784:	2000c6dc 	.word	0x2000c6dc
 8011788:	20009480 	.word	0x20009480

0801178c <on_reply>:
 801178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011790:	4821      	ldr	r0, [pc, #132]	@ (8011818 <on_reply+0x8c>)
 8011792:	b095      	sub	sp, #84	@ 0x54
 8011794:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011796:	6801      	ldr	r1, [r0, #0]
 8011798:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 801179a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 801179e:	b3b9      	cbz	r1, 8011810 <on_reply+0x84>
 80117a0:	461d      	mov	r5, r3
 80117a2:	e001      	b.n	80117a8 <on_reply+0x1c>
 80117a4:	6889      	ldr	r1, [r1, #8]
 80117a6:	b399      	cbz	r1, 8011810 <on_reply+0x84>
 80117a8:	68cc      	ldr	r4, [r1, #12]
 80117aa:	8b20      	ldrh	r0, [r4, #24]
 80117ac:	4290      	cmp	r0, r2
 80117ae:	d1f9      	bne.n	80117a4 <on_reply+0x18>
 80117b0:	2248      	movs	r2, #72	@ 0x48
 80117b2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80117b6:	4668      	mov	r0, sp
 80117b8:	f000 fd15 	bl	80121e6 <memcpy>
 80117bc:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80117c0:	4620      	mov	r0, r4
 80117c2:	f7f8 f9ef 	bl	8009ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80117c6:	4680      	mov	r8, r0
 80117c8:	b310      	cbz	r0, 8011810 <on_reply+0x84>
 80117ca:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80117ce:	4632      	mov	r2, r6
 80117d0:	4638      	mov	r0, r7
 80117d2:	f109 0110 	add.w	r1, r9, #16
 80117d6:	f7fe fa19 	bl	800fc0c <ucdr_deserialize_array_uint8_t>
 80117da:	b930      	cbnz	r0, 80117ea <on_reply+0x5e>
 80117dc:	480f      	ldr	r0, [pc, #60]	@ (801181c <on_reply+0x90>)
 80117de:	4641      	mov	r1, r8
 80117e0:	b015      	add	sp, #84	@ 0x54
 80117e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117e6:	f7fd bc9d 	b.w	800f124 <put_memory>
 80117ea:	b2aa      	uxth	r2, r5
 80117ec:	2300      	movs	r3, #0
 80117ee:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 80117f2:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 80117f6:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 80117fa:	e9c1 2300 	strd	r2, r3, [r1]
 80117fe:	f7fe f92f 	bl	800fa60 <rmw_uros_epoch_nanos>
 8011802:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8011806:	2304      	movs	r3, #4
 8011808:	e9c2 0100 	strd	r0, r1, [r2]
 801180c:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8011810:	b015      	add	sp, #84	@ 0x54
 8011812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011816:	bf00      	nop
 8011818:	20009d10 	.word	0x20009d10
 801181c:	20009480 	.word	0x20009480

08011820 <rmw_destroy_client>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	b128      	cbz	r0, 8011830 <rmw_destroy_client+0x10>
 8011824:	4604      	mov	r4, r0
 8011826:	6800      	ldr	r0, [r0, #0]
 8011828:	460d      	mov	r5, r1
 801182a:	f7f8 fa87 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 801182e:	b910      	cbnz	r0, 8011836 <rmw_destroy_client+0x16>
 8011830:	2401      	movs	r4, #1
 8011832:	4620      	mov	r0, r4
 8011834:	bd70      	pop	{r4, r5, r6, pc}
 8011836:	6863      	ldr	r3, [r4, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0f9      	beq.n	8011830 <rmw_destroy_client+0x10>
 801183c:	2d00      	cmp	r5, #0
 801183e:	d0f7      	beq.n	8011830 <rmw_destroy_client+0x10>
 8011840:	6828      	ldr	r0, [r5, #0]
 8011842:	f7f8 fa7b 	bl	8009d3c <is_uxrce_rmw_identifier_valid>
 8011846:	2800      	cmp	r0, #0
 8011848:	d0f2      	beq.n	8011830 <rmw_destroy_client+0x10>
 801184a:	686e      	ldr	r6, [r5, #4]
 801184c:	2e00      	cmp	r6, #0
 801184e:	d0ef      	beq.n	8011830 <rmw_destroy_client+0x10>
 8011850:	6864      	ldr	r4, [r4, #4]
 8011852:	6932      	ldr	r2, [r6, #16]
 8011854:	6920      	ldr	r0, [r4, #16]
 8011856:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801185a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801185e:	6819      	ldr	r1, [r3, #0]
 8011860:	f7ff f89a 	bl	8010998 <uxr_buffer_cancel_data>
 8011864:	4602      	mov	r2, r0
 8011866:	6920      	ldr	r0, [r4, #16]
 8011868:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801186c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011870:	f7f8 f9e4 	bl	8009c3c <run_xrce_session>
 8011874:	6920      	ldr	r0, [r4, #16]
 8011876:	6932      	ldr	r2, [r6, #16]
 8011878:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801187c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011880:	6819      	ldr	r1, [r3, #0]
 8011882:	f7f9 fbdf 	bl	800b044 <uxr_buffer_delete_entity>
 8011886:	4602      	mov	r2, r0
 8011888:	6920      	ldr	r0, [r4, #16]
 801188a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801188e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011892:	f7f8 f9d3 	bl	8009c3c <run_xrce_session>
 8011896:	2800      	cmp	r0, #0
 8011898:	4628      	mov	r0, r5
 801189a:	bf14      	ite	ne
 801189c:	2400      	movne	r4, #0
 801189e:	2402      	moveq	r4, #2
 80118a0:	f7f8 f95e 	bl	8009b60 <rmw_uxrce_fini_client_memory>
 80118a4:	e7c5      	b.n	8011832 <rmw_destroy_client+0x12>
 80118a6:	bf00      	nop

080118a8 <rmw_create_guard_condition>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4605      	mov	r5, r0
 80118ac:	4807      	ldr	r0, [pc, #28]	@ (80118cc <rmw_create_guard_condition+0x24>)
 80118ae:	f7fd fc29 	bl	800f104 <get_memory>
 80118b2:	b148      	cbz	r0, 80118c8 <rmw_create_guard_condition+0x20>
 80118b4:	68c4      	ldr	r4, [r0, #12]
 80118b6:	2300      	movs	r3, #0
 80118b8:	61e5      	str	r5, [r4, #28]
 80118ba:	7423      	strb	r3, [r4, #16]
 80118bc:	f7fd fc46 	bl	800f14c <rmw_get_implementation_identifier>
 80118c0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80118c4:	f104 0014 	add.w	r0, r4, #20
 80118c8:	bd38      	pop	{r3, r4, r5, pc}
 80118ca:	bf00      	nop
 80118cc:	2000c608 	.word	0x2000c608

080118d0 <rmw_destroy_guard_condition>:
 80118d0:	b508      	push	{r3, lr}
 80118d2:	4b08      	ldr	r3, [pc, #32]	@ (80118f4 <rmw_destroy_guard_condition+0x24>)
 80118d4:	6819      	ldr	r1, [r3, #0]
 80118d6:	b911      	cbnz	r1, 80118de <rmw_destroy_guard_condition+0xe>
 80118d8:	e00a      	b.n	80118f0 <rmw_destroy_guard_condition+0x20>
 80118da:	6889      	ldr	r1, [r1, #8]
 80118dc:	b141      	cbz	r1, 80118f0 <rmw_destroy_guard_condition+0x20>
 80118de:	68cb      	ldr	r3, [r1, #12]
 80118e0:	3314      	adds	r3, #20
 80118e2:	4298      	cmp	r0, r3
 80118e4:	d1f9      	bne.n	80118da <rmw_destroy_guard_condition+0xa>
 80118e6:	4803      	ldr	r0, [pc, #12]	@ (80118f4 <rmw_destroy_guard_condition+0x24>)
 80118e8:	f7fd fc1c 	bl	800f124 <put_memory>
 80118ec:	2000      	movs	r0, #0
 80118ee:	bd08      	pop	{r3, pc}
 80118f0:	2001      	movs	r0, #1
 80118f2:	bd08      	pop	{r3, pc}
 80118f4:	2000c608 	.word	0x2000c608

080118f8 <calloc>:
 80118f8:	4b02      	ldr	r3, [pc, #8]	@ (8011904 <calloc+0xc>)
 80118fa:	460a      	mov	r2, r1
 80118fc:	4601      	mov	r1, r0
 80118fe:	6818      	ldr	r0, [r3, #0]
 8011900:	f000 b802 	b.w	8011908 <_calloc_r>
 8011904:	2000007c 	.word	0x2000007c

08011908 <_calloc_r>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	fba1 5402 	umull	r5, r4, r1, r2
 801190e:	b93c      	cbnz	r4, 8011920 <_calloc_r+0x18>
 8011910:	4629      	mov	r1, r5
 8011912:	f000 f887 	bl	8011a24 <_malloc_r>
 8011916:	4606      	mov	r6, r0
 8011918:	b928      	cbnz	r0, 8011926 <_calloc_r+0x1e>
 801191a:	2600      	movs	r6, #0
 801191c:	4630      	mov	r0, r6
 801191e:	bd70      	pop	{r4, r5, r6, pc}
 8011920:	220c      	movs	r2, #12
 8011922:	6002      	str	r2, [r0, #0]
 8011924:	e7f9      	b.n	801191a <_calloc_r+0x12>
 8011926:	462a      	mov	r2, r5
 8011928:	4621      	mov	r1, r4
 801192a:	f000 fb93 	bl	8012054 <memset>
 801192e:	e7f5      	b.n	801191c <_calloc_r+0x14>

08011930 <getenv>:
 8011930:	b507      	push	{r0, r1, r2, lr}
 8011932:	4b04      	ldr	r3, [pc, #16]	@ (8011944 <getenv+0x14>)
 8011934:	4601      	mov	r1, r0
 8011936:	aa01      	add	r2, sp, #4
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	f000 f805 	bl	8011948 <_findenv_r>
 801193e:	b003      	add	sp, #12
 8011940:	f85d fb04 	ldr.w	pc, [sp], #4
 8011944:	2000007c 	.word	0x2000007c

08011948 <_findenv_r>:
 8011948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80119bc <_findenv_r+0x74>
 8011950:	4606      	mov	r6, r0
 8011952:	4689      	mov	r9, r1
 8011954:	4617      	mov	r7, r2
 8011956:	f000 fc73 	bl	8012240 <__env_lock>
 801195a:	f8da 4000 	ldr.w	r4, [sl]
 801195e:	b134      	cbz	r4, 801196e <_findenv_r+0x26>
 8011960:	464b      	mov	r3, r9
 8011962:	4698      	mov	r8, r3
 8011964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011968:	b13a      	cbz	r2, 801197a <_findenv_r+0x32>
 801196a:	2a3d      	cmp	r2, #61	@ 0x3d
 801196c:	d1f9      	bne.n	8011962 <_findenv_r+0x1a>
 801196e:	4630      	mov	r0, r6
 8011970:	f000 fc6c 	bl	801224c <__env_unlock>
 8011974:	2000      	movs	r0, #0
 8011976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197a:	eba8 0809 	sub.w	r8, r8, r9
 801197e:	46a3      	mov	fp, r4
 8011980:	f854 0b04 	ldr.w	r0, [r4], #4
 8011984:	2800      	cmp	r0, #0
 8011986:	d0f2      	beq.n	801196e <_findenv_r+0x26>
 8011988:	4642      	mov	r2, r8
 801198a:	4649      	mov	r1, r9
 801198c:	f000 fb77 	bl	801207e <strncmp>
 8011990:	2800      	cmp	r0, #0
 8011992:	d1f4      	bne.n	801197e <_findenv_r+0x36>
 8011994:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011998:	eb03 0508 	add.w	r5, r3, r8
 801199c:	f813 3008 	ldrb.w	r3, [r3, r8]
 80119a0:	2b3d      	cmp	r3, #61	@ 0x3d
 80119a2:	d1ec      	bne.n	801197e <_findenv_r+0x36>
 80119a4:	f8da 3000 	ldr.w	r3, [sl]
 80119a8:	ebab 0303 	sub.w	r3, fp, r3
 80119ac:	109b      	asrs	r3, r3, #2
 80119ae:	4630      	mov	r0, r6
 80119b0:	603b      	str	r3, [r7, #0]
 80119b2:	f000 fc4b 	bl	801224c <__env_unlock>
 80119b6:	1c68      	adds	r0, r5, #1
 80119b8:	e7dd      	b.n	8011976 <_findenv_r+0x2e>
 80119ba:	bf00      	nop
 80119bc:	20000004 	.word	0x20000004

080119c0 <malloc>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	@ (80119cc <malloc+0xc>)
 80119c2:	4601      	mov	r1, r0
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f000 b82d 	b.w	8011a24 <_malloc_r>
 80119ca:	bf00      	nop
 80119cc:	2000007c 	.word	0x2000007c

080119d0 <free>:
 80119d0:	4b02      	ldr	r3, [pc, #8]	@ (80119dc <free+0xc>)
 80119d2:	4601      	mov	r1, r0
 80119d4:	6818      	ldr	r0, [r3, #0]
 80119d6:	f000 bc3f 	b.w	8012258 <_free_r>
 80119da:	bf00      	nop
 80119dc:	2000007c 	.word	0x2000007c

080119e0 <sbrk_aligned>:
 80119e0:	b570      	push	{r4, r5, r6, lr}
 80119e2:	4e0f      	ldr	r6, [pc, #60]	@ (8011a20 <sbrk_aligned+0x40>)
 80119e4:	460c      	mov	r4, r1
 80119e6:	6831      	ldr	r1, [r6, #0]
 80119e8:	4605      	mov	r5, r0
 80119ea:	b911      	cbnz	r1, 80119f2 <sbrk_aligned+0x12>
 80119ec:	f000 fba4 	bl	8012138 <_sbrk_r>
 80119f0:	6030      	str	r0, [r6, #0]
 80119f2:	4621      	mov	r1, r4
 80119f4:	4628      	mov	r0, r5
 80119f6:	f000 fb9f 	bl	8012138 <_sbrk_r>
 80119fa:	1c43      	adds	r3, r0, #1
 80119fc:	d103      	bne.n	8011a06 <sbrk_aligned+0x26>
 80119fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011a02:	4620      	mov	r0, r4
 8011a04:	bd70      	pop	{r4, r5, r6, pc}
 8011a06:	1cc4      	adds	r4, r0, #3
 8011a08:	f024 0403 	bic.w	r4, r4, #3
 8011a0c:	42a0      	cmp	r0, r4
 8011a0e:	d0f8      	beq.n	8011a02 <sbrk_aligned+0x22>
 8011a10:	1a21      	subs	r1, r4, r0
 8011a12:	4628      	mov	r0, r5
 8011a14:	f000 fb90 	bl	8012138 <_sbrk_r>
 8011a18:	3001      	adds	r0, #1
 8011a1a:	d1f2      	bne.n	8011a02 <sbrk_aligned+0x22>
 8011a1c:	e7ef      	b.n	80119fe <sbrk_aligned+0x1e>
 8011a1e:	bf00      	nop
 8011a20:	200092f8 	.word	0x200092f8

08011a24 <_malloc_r>:
 8011a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a28:	1ccd      	adds	r5, r1, #3
 8011a2a:	f025 0503 	bic.w	r5, r5, #3
 8011a2e:	3508      	adds	r5, #8
 8011a30:	2d0c      	cmp	r5, #12
 8011a32:	bf38      	it	cc
 8011a34:	250c      	movcc	r5, #12
 8011a36:	2d00      	cmp	r5, #0
 8011a38:	4606      	mov	r6, r0
 8011a3a:	db01      	blt.n	8011a40 <_malloc_r+0x1c>
 8011a3c:	42a9      	cmp	r1, r5
 8011a3e:	d904      	bls.n	8011a4a <_malloc_r+0x26>
 8011a40:	230c      	movs	r3, #12
 8011a42:	6033      	str	r3, [r6, #0]
 8011a44:	2000      	movs	r0, #0
 8011a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b20 <_malloc_r+0xfc>
 8011a4e:	f000 f869 	bl	8011b24 <__malloc_lock>
 8011a52:	f8d8 3000 	ldr.w	r3, [r8]
 8011a56:	461c      	mov	r4, r3
 8011a58:	bb44      	cbnz	r4, 8011aac <_malloc_r+0x88>
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f7ff ffbf 	bl	80119e0 <sbrk_aligned>
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	4604      	mov	r4, r0
 8011a66:	d158      	bne.n	8011b1a <_malloc_r+0xf6>
 8011a68:	f8d8 4000 	ldr.w	r4, [r8]
 8011a6c:	4627      	mov	r7, r4
 8011a6e:	2f00      	cmp	r7, #0
 8011a70:	d143      	bne.n	8011afa <_malloc_r+0xd6>
 8011a72:	2c00      	cmp	r4, #0
 8011a74:	d04b      	beq.n	8011b0e <_malloc_r+0xea>
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	4639      	mov	r1, r7
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	eb04 0903 	add.w	r9, r4, r3
 8011a80:	f000 fb5a 	bl	8012138 <_sbrk_r>
 8011a84:	4581      	cmp	r9, r0
 8011a86:	d142      	bne.n	8011b0e <_malloc_r+0xea>
 8011a88:	6821      	ldr	r1, [r4, #0]
 8011a8a:	1a6d      	subs	r5, r5, r1
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f7ff ffa6 	bl	80119e0 <sbrk_aligned>
 8011a94:	3001      	adds	r0, #1
 8011a96:	d03a      	beq.n	8011b0e <_malloc_r+0xea>
 8011a98:	6823      	ldr	r3, [r4, #0]
 8011a9a:	442b      	add	r3, r5
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8011aa2:	685a      	ldr	r2, [r3, #4]
 8011aa4:	bb62      	cbnz	r2, 8011b00 <_malloc_r+0xdc>
 8011aa6:	f8c8 7000 	str.w	r7, [r8]
 8011aaa:	e00f      	b.n	8011acc <_malloc_r+0xa8>
 8011aac:	6822      	ldr	r2, [r4, #0]
 8011aae:	1b52      	subs	r2, r2, r5
 8011ab0:	d420      	bmi.n	8011af4 <_malloc_r+0xd0>
 8011ab2:	2a0b      	cmp	r2, #11
 8011ab4:	d917      	bls.n	8011ae6 <_malloc_r+0xc2>
 8011ab6:	1961      	adds	r1, r4, r5
 8011ab8:	42a3      	cmp	r3, r4
 8011aba:	6025      	str	r5, [r4, #0]
 8011abc:	bf18      	it	ne
 8011abe:	6059      	strne	r1, [r3, #4]
 8011ac0:	6863      	ldr	r3, [r4, #4]
 8011ac2:	bf08      	it	eq
 8011ac4:	f8c8 1000 	streq.w	r1, [r8]
 8011ac8:	5162      	str	r2, [r4, r5]
 8011aca:	604b      	str	r3, [r1, #4]
 8011acc:	4630      	mov	r0, r6
 8011ace:	f000 f82f 	bl	8011b30 <__malloc_unlock>
 8011ad2:	f104 000b 	add.w	r0, r4, #11
 8011ad6:	1d23      	adds	r3, r4, #4
 8011ad8:	f020 0007 	bic.w	r0, r0, #7
 8011adc:	1ac2      	subs	r2, r0, r3
 8011ade:	bf1c      	itt	ne
 8011ae0:	1a1b      	subne	r3, r3, r0
 8011ae2:	50a3      	strne	r3, [r4, r2]
 8011ae4:	e7af      	b.n	8011a46 <_malloc_r+0x22>
 8011ae6:	6862      	ldr	r2, [r4, #4]
 8011ae8:	42a3      	cmp	r3, r4
 8011aea:	bf0c      	ite	eq
 8011aec:	f8c8 2000 	streq.w	r2, [r8]
 8011af0:	605a      	strne	r2, [r3, #4]
 8011af2:	e7eb      	b.n	8011acc <_malloc_r+0xa8>
 8011af4:	4623      	mov	r3, r4
 8011af6:	6864      	ldr	r4, [r4, #4]
 8011af8:	e7ae      	b.n	8011a58 <_malloc_r+0x34>
 8011afa:	463c      	mov	r4, r7
 8011afc:	687f      	ldr	r7, [r7, #4]
 8011afe:	e7b6      	b.n	8011a6e <_malloc_r+0x4a>
 8011b00:	461a      	mov	r2, r3
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	42a3      	cmp	r3, r4
 8011b06:	d1fb      	bne.n	8011b00 <_malloc_r+0xdc>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	6053      	str	r3, [r2, #4]
 8011b0c:	e7de      	b.n	8011acc <_malloc_r+0xa8>
 8011b0e:	230c      	movs	r3, #12
 8011b10:	6033      	str	r3, [r6, #0]
 8011b12:	4630      	mov	r0, r6
 8011b14:	f000 f80c 	bl	8011b30 <__malloc_unlock>
 8011b18:	e794      	b.n	8011a44 <_malloc_r+0x20>
 8011b1a:	6005      	str	r5, [r0, #0]
 8011b1c:	e7d6      	b.n	8011acc <_malloc_r+0xa8>
 8011b1e:	bf00      	nop
 8011b20:	200092fc 	.word	0x200092fc

08011b24 <__malloc_lock>:
 8011b24:	4801      	ldr	r0, [pc, #4]	@ (8011b2c <__malloc_lock+0x8>)
 8011b26:	f000 bb54 	b.w	80121d2 <__retarget_lock_acquire_recursive>
 8011b2a:	bf00      	nop
 8011b2c:	20009441 	.word	0x20009441

08011b30 <__malloc_unlock>:
 8011b30:	4801      	ldr	r0, [pc, #4]	@ (8011b38 <__malloc_unlock+0x8>)
 8011b32:	f000 bb4f 	b.w	80121d4 <__retarget_lock_release_recursive>
 8011b36:	bf00      	nop
 8011b38:	20009441 	.word	0x20009441

08011b3c <srand>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	4b10      	ldr	r3, [pc, #64]	@ (8011b80 <srand+0x44>)
 8011b40:	681d      	ldr	r5, [r3, #0]
 8011b42:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b44:	4604      	mov	r4, r0
 8011b46:	b9b3      	cbnz	r3, 8011b76 <srand+0x3a>
 8011b48:	2018      	movs	r0, #24
 8011b4a:	f7ff ff39 	bl	80119c0 <malloc>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	6328      	str	r0, [r5, #48]	@ 0x30
 8011b52:	b920      	cbnz	r0, 8011b5e <srand+0x22>
 8011b54:	4b0b      	ldr	r3, [pc, #44]	@ (8011b84 <srand+0x48>)
 8011b56:	480c      	ldr	r0, [pc, #48]	@ (8011b88 <srand+0x4c>)
 8011b58:	2146      	movs	r1, #70	@ 0x46
 8011b5a:	f000 fb53 	bl	8012204 <__assert_func>
 8011b5e:	490b      	ldr	r1, [pc, #44]	@ (8011b8c <srand+0x50>)
 8011b60:	4b0b      	ldr	r3, [pc, #44]	@ (8011b90 <srand+0x54>)
 8011b62:	e9c0 1300 	strd	r1, r3, [r0]
 8011b66:	4b0b      	ldr	r3, [pc, #44]	@ (8011b94 <srand+0x58>)
 8011b68:	6083      	str	r3, [r0, #8]
 8011b6a:	230b      	movs	r3, #11
 8011b6c:	8183      	strh	r3, [r0, #12]
 8011b6e:	2100      	movs	r1, #0
 8011b70:	2001      	movs	r0, #1
 8011b72:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011b76:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b78:	2200      	movs	r2, #0
 8011b7a:	611c      	str	r4, [r3, #16]
 8011b7c:	615a      	str	r2, [r3, #20]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	2000007c 	.word	0x2000007c
 8011b84:	08013850 	.word	0x08013850
 8011b88:	08013867 	.word	0x08013867
 8011b8c:	abcd330e 	.word	0xabcd330e
 8011b90:	e66d1234 	.word	0xe66d1234
 8011b94:	0005deec 	.word	0x0005deec

08011b98 <rand>:
 8011b98:	4b16      	ldr	r3, [pc, #88]	@ (8011bf4 <rand+0x5c>)
 8011b9a:	b510      	push	{r4, lr}
 8011b9c:	681c      	ldr	r4, [r3, #0]
 8011b9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ba0:	b9b3      	cbnz	r3, 8011bd0 <rand+0x38>
 8011ba2:	2018      	movs	r0, #24
 8011ba4:	f7ff ff0c 	bl	80119c0 <malloc>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	6320      	str	r0, [r4, #48]	@ 0x30
 8011bac:	b920      	cbnz	r0, 8011bb8 <rand+0x20>
 8011bae:	4b12      	ldr	r3, [pc, #72]	@ (8011bf8 <rand+0x60>)
 8011bb0:	4812      	ldr	r0, [pc, #72]	@ (8011bfc <rand+0x64>)
 8011bb2:	2152      	movs	r1, #82	@ 0x52
 8011bb4:	f000 fb26 	bl	8012204 <__assert_func>
 8011bb8:	4911      	ldr	r1, [pc, #68]	@ (8011c00 <rand+0x68>)
 8011bba:	4b12      	ldr	r3, [pc, #72]	@ (8011c04 <rand+0x6c>)
 8011bbc:	e9c0 1300 	strd	r1, r3, [r0]
 8011bc0:	4b11      	ldr	r3, [pc, #68]	@ (8011c08 <rand+0x70>)
 8011bc2:	6083      	str	r3, [r0, #8]
 8011bc4:	230b      	movs	r3, #11
 8011bc6:	8183      	strh	r3, [r0, #12]
 8011bc8:	2100      	movs	r1, #0
 8011bca:	2001      	movs	r0, #1
 8011bcc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011bd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011bd2:	480e      	ldr	r0, [pc, #56]	@ (8011c0c <rand+0x74>)
 8011bd4:	690b      	ldr	r3, [r1, #16]
 8011bd6:	694c      	ldr	r4, [r1, #20]
 8011bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8011c10 <rand+0x78>)
 8011bda:	4358      	muls	r0, r3
 8011bdc:	fb02 0004 	mla	r0, r2, r4, r0
 8011be0:	fba3 3202 	umull	r3, r2, r3, r2
 8011be4:	3301      	adds	r3, #1
 8011be6:	eb40 0002 	adc.w	r0, r0, r2
 8011bea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011bee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011bf2:	bd10      	pop	{r4, pc}
 8011bf4:	2000007c 	.word	0x2000007c
 8011bf8:	08013850 	.word	0x08013850
 8011bfc:	08013867 	.word	0x08013867
 8011c00:	abcd330e 	.word	0xabcd330e
 8011c04:	e66d1234 	.word	0xe66d1234
 8011c08:	0005deec 	.word	0x0005deec
 8011c0c:	5851f42d 	.word	0x5851f42d
 8011c10:	4c957f2d 	.word	0x4c957f2d

08011c14 <realloc>:
 8011c14:	4b02      	ldr	r3, [pc, #8]	@ (8011c20 <realloc+0xc>)
 8011c16:	460a      	mov	r2, r1
 8011c18:	4601      	mov	r1, r0
 8011c1a:	6818      	ldr	r0, [r3, #0]
 8011c1c:	f000 b802 	b.w	8011c24 <_realloc_r>
 8011c20:	2000007c 	.word	0x2000007c

08011c24 <_realloc_r>:
 8011c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c28:	4680      	mov	r8, r0
 8011c2a:	4615      	mov	r5, r2
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	b921      	cbnz	r1, 8011c3a <_realloc_r+0x16>
 8011c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c34:	4611      	mov	r1, r2
 8011c36:	f7ff bef5 	b.w	8011a24 <_malloc_r>
 8011c3a:	b92a      	cbnz	r2, 8011c48 <_realloc_r+0x24>
 8011c3c:	f000 fb0c 	bl	8012258 <_free_r>
 8011c40:	2400      	movs	r4, #0
 8011c42:	4620      	mov	r0, r4
 8011c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c48:	f000 fb50 	bl	80122ec <_malloc_usable_size_r>
 8011c4c:	4285      	cmp	r5, r0
 8011c4e:	4606      	mov	r6, r0
 8011c50:	d802      	bhi.n	8011c58 <_realloc_r+0x34>
 8011c52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c56:	d8f4      	bhi.n	8011c42 <_realloc_r+0x1e>
 8011c58:	4629      	mov	r1, r5
 8011c5a:	4640      	mov	r0, r8
 8011c5c:	f7ff fee2 	bl	8011a24 <_malloc_r>
 8011c60:	4607      	mov	r7, r0
 8011c62:	2800      	cmp	r0, #0
 8011c64:	d0ec      	beq.n	8011c40 <_realloc_r+0x1c>
 8011c66:	42b5      	cmp	r5, r6
 8011c68:	462a      	mov	r2, r5
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	bf28      	it	cs
 8011c6e:	4632      	movcs	r2, r6
 8011c70:	f000 fab9 	bl	80121e6 <memcpy>
 8011c74:	4621      	mov	r1, r4
 8011c76:	4640      	mov	r0, r8
 8011c78:	f000 faee 	bl	8012258 <_free_r>
 8011c7c:	463c      	mov	r4, r7
 8011c7e:	e7e0      	b.n	8011c42 <_realloc_r+0x1e>

08011c80 <_strtoul_l.constprop.0>:
 8011c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c84:	4e34      	ldr	r6, [pc, #208]	@ (8011d58 <_strtoul_l.constprop.0+0xd8>)
 8011c86:	4686      	mov	lr, r0
 8011c88:	460d      	mov	r5, r1
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c90:	5d37      	ldrb	r7, [r6, r4]
 8011c92:	f017 0708 	ands.w	r7, r7, #8
 8011c96:	d1f8      	bne.n	8011c8a <_strtoul_l.constprop.0+0xa>
 8011c98:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c9a:	d12f      	bne.n	8011cfc <_strtoul_l.constprop.0+0x7c>
 8011c9c:	782c      	ldrb	r4, [r5, #0]
 8011c9e:	2701      	movs	r7, #1
 8011ca0:	1c85      	adds	r5, r0, #2
 8011ca2:	f033 0010 	bics.w	r0, r3, #16
 8011ca6:	d109      	bne.n	8011cbc <_strtoul_l.constprop.0+0x3c>
 8011ca8:	2c30      	cmp	r4, #48	@ 0x30
 8011caa:	d12c      	bne.n	8011d06 <_strtoul_l.constprop.0+0x86>
 8011cac:	7828      	ldrb	r0, [r5, #0]
 8011cae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011cb2:	2858      	cmp	r0, #88	@ 0x58
 8011cb4:	d127      	bne.n	8011d06 <_strtoul_l.constprop.0+0x86>
 8011cb6:	786c      	ldrb	r4, [r5, #1]
 8011cb8:	2310      	movs	r3, #16
 8011cba:	3502      	adds	r5, #2
 8011cbc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011cc0:	2600      	movs	r6, #0
 8011cc2:	fbb8 f8f3 	udiv	r8, r8, r3
 8011cc6:	fb03 f908 	mul.w	r9, r3, r8
 8011cca:	ea6f 0909 	mvn.w	r9, r9
 8011cce:	4630      	mov	r0, r6
 8011cd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011cd4:	f1bc 0f09 	cmp.w	ip, #9
 8011cd8:	d81c      	bhi.n	8011d14 <_strtoul_l.constprop.0+0x94>
 8011cda:	4664      	mov	r4, ip
 8011cdc:	42a3      	cmp	r3, r4
 8011cde:	dd2a      	ble.n	8011d36 <_strtoul_l.constprop.0+0xb6>
 8011ce0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011ce4:	d007      	beq.n	8011cf6 <_strtoul_l.constprop.0+0x76>
 8011ce6:	4580      	cmp	r8, r0
 8011ce8:	d322      	bcc.n	8011d30 <_strtoul_l.constprop.0+0xb0>
 8011cea:	d101      	bne.n	8011cf0 <_strtoul_l.constprop.0+0x70>
 8011cec:	45a1      	cmp	r9, r4
 8011cee:	db1f      	blt.n	8011d30 <_strtoul_l.constprop.0+0xb0>
 8011cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8011cf4:	2601      	movs	r6, #1
 8011cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cfa:	e7e9      	b.n	8011cd0 <_strtoul_l.constprop.0+0x50>
 8011cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8011cfe:	bf04      	itt	eq
 8011d00:	782c      	ldrbeq	r4, [r5, #0]
 8011d02:	1c85      	addeq	r5, r0, #2
 8011d04:	e7cd      	b.n	8011ca2 <_strtoul_l.constprop.0+0x22>
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d1d8      	bne.n	8011cbc <_strtoul_l.constprop.0+0x3c>
 8011d0a:	2c30      	cmp	r4, #48	@ 0x30
 8011d0c:	bf0c      	ite	eq
 8011d0e:	2308      	moveq	r3, #8
 8011d10:	230a      	movne	r3, #10
 8011d12:	e7d3      	b.n	8011cbc <_strtoul_l.constprop.0+0x3c>
 8011d14:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011d18:	f1bc 0f19 	cmp.w	ip, #25
 8011d1c:	d801      	bhi.n	8011d22 <_strtoul_l.constprop.0+0xa2>
 8011d1e:	3c37      	subs	r4, #55	@ 0x37
 8011d20:	e7dc      	b.n	8011cdc <_strtoul_l.constprop.0+0x5c>
 8011d22:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011d26:	f1bc 0f19 	cmp.w	ip, #25
 8011d2a:	d804      	bhi.n	8011d36 <_strtoul_l.constprop.0+0xb6>
 8011d2c:	3c57      	subs	r4, #87	@ 0x57
 8011d2e:	e7d5      	b.n	8011cdc <_strtoul_l.constprop.0+0x5c>
 8011d30:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011d34:	e7df      	b.n	8011cf6 <_strtoul_l.constprop.0+0x76>
 8011d36:	1c73      	adds	r3, r6, #1
 8011d38:	d106      	bne.n	8011d48 <_strtoul_l.constprop.0+0xc8>
 8011d3a:	2322      	movs	r3, #34	@ 0x22
 8011d3c:	f8ce 3000 	str.w	r3, [lr]
 8011d40:	4630      	mov	r0, r6
 8011d42:	b932      	cbnz	r2, 8011d52 <_strtoul_l.constprop.0+0xd2>
 8011d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d48:	b107      	cbz	r7, 8011d4c <_strtoul_l.constprop.0+0xcc>
 8011d4a:	4240      	negs	r0, r0
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	d0f9      	beq.n	8011d44 <_strtoul_l.constprop.0+0xc4>
 8011d50:	b106      	cbz	r6, 8011d54 <_strtoul_l.constprop.0+0xd4>
 8011d52:	1e69      	subs	r1, r5, #1
 8011d54:	6011      	str	r1, [r2, #0]
 8011d56:	e7f5      	b.n	8011d44 <_strtoul_l.constprop.0+0xc4>
 8011d58:	080138c0 	.word	0x080138c0

08011d5c <strtoul>:
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	460a      	mov	r2, r1
 8011d60:	4601      	mov	r1, r0
 8011d62:	4802      	ldr	r0, [pc, #8]	@ (8011d6c <strtoul+0x10>)
 8011d64:	6800      	ldr	r0, [r0, #0]
 8011d66:	f7ff bf8b 	b.w	8011c80 <_strtoul_l.constprop.0>
 8011d6a:	bf00      	nop
 8011d6c:	2000007c 	.word	0x2000007c

08011d70 <std>:
 8011d70:	2300      	movs	r3, #0
 8011d72:	b510      	push	{r4, lr}
 8011d74:	4604      	mov	r4, r0
 8011d76:	e9c0 3300 	strd	r3, r3, [r0]
 8011d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d7e:	6083      	str	r3, [r0, #8]
 8011d80:	8181      	strh	r1, [r0, #12]
 8011d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d84:	81c2      	strh	r2, [r0, #14]
 8011d86:	6183      	str	r3, [r0, #24]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	2208      	movs	r2, #8
 8011d8c:	305c      	adds	r0, #92	@ 0x5c
 8011d8e:	f000 f961 	bl	8012054 <memset>
 8011d92:	4b0d      	ldr	r3, [pc, #52]	@ (8011dc8 <std+0x58>)
 8011d94:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d96:	4b0d      	ldr	r3, [pc, #52]	@ (8011dcc <std+0x5c>)
 8011d98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd0 <std+0x60>)
 8011d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd4 <std+0x64>)
 8011da0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011da2:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd8 <std+0x68>)
 8011da4:	6224      	str	r4, [r4, #32]
 8011da6:	429c      	cmp	r4, r3
 8011da8:	d006      	beq.n	8011db8 <std+0x48>
 8011daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011dae:	4294      	cmp	r4, r2
 8011db0:	d002      	beq.n	8011db8 <std+0x48>
 8011db2:	33d0      	adds	r3, #208	@ 0xd0
 8011db4:	429c      	cmp	r4, r3
 8011db6:	d105      	bne.n	8011dc4 <std+0x54>
 8011db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc0:	f000 ba06 	b.w	80121d0 <__retarget_lock_init_recursive>
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	bf00      	nop
 8011dc8:	08011f5d 	.word	0x08011f5d
 8011dcc:	08011f7f 	.word	0x08011f7f
 8011dd0:	08011fb7 	.word	0x08011fb7
 8011dd4:	08011fdb 	.word	0x08011fdb
 8011dd8:	20009300 	.word	0x20009300

08011ddc <stdio_exit_handler>:
 8011ddc:	4a02      	ldr	r2, [pc, #8]	@ (8011de8 <stdio_exit_handler+0xc>)
 8011dde:	4903      	ldr	r1, [pc, #12]	@ (8011dec <stdio_exit_handler+0x10>)
 8011de0:	4803      	ldr	r0, [pc, #12]	@ (8011df0 <stdio_exit_handler+0x14>)
 8011de2:	f000 b869 	b.w	8011eb8 <_fwalk_sglue>
 8011de6:	bf00      	nop
 8011de8:	20000070 	.word	0x20000070
 8011dec:	080129d1 	.word	0x080129d1
 8011df0:	20000080 	.word	0x20000080

08011df4 <cleanup_stdio>:
 8011df4:	6841      	ldr	r1, [r0, #4]
 8011df6:	4b0c      	ldr	r3, [pc, #48]	@ (8011e28 <cleanup_stdio+0x34>)
 8011df8:	4299      	cmp	r1, r3
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	d001      	beq.n	8011e04 <cleanup_stdio+0x10>
 8011e00:	f000 fde6 	bl	80129d0 <_fflush_r>
 8011e04:	68a1      	ldr	r1, [r4, #8]
 8011e06:	4b09      	ldr	r3, [pc, #36]	@ (8011e2c <cleanup_stdio+0x38>)
 8011e08:	4299      	cmp	r1, r3
 8011e0a:	d002      	beq.n	8011e12 <cleanup_stdio+0x1e>
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f000 fddf 	bl	80129d0 <_fflush_r>
 8011e12:	68e1      	ldr	r1, [r4, #12]
 8011e14:	4b06      	ldr	r3, [pc, #24]	@ (8011e30 <cleanup_stdio+0x3c>)
 8011e16:	4299      	cmp	r1, r3
 8011e18:	d004      	beq.n	8011e24 <cleanup_stdio+0x30>
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e20:	f000 bdd6 	b.w	80129d0 <_fflush_r>
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	bf00      	nop
 8011e28:	20009300 	.word	0x20009300
 8011e2c:	20009368 	.word	0x20009368
 8011e30:	200093d0 	.word	0x200093d0

08011e34 <global_stdio_init.part.0>:
 8011e34:	b510      	push	{r4, lr}
 8011e36:	4b0b      	ldr	r3, [pc, #44]	@ (8011e64 <global_stdio_init.part.0+0x30>)
 8011e38:	4c0b      	ldr	r4, [pc, #44]	@ (8011e68 <global_stdio_init.part.0+0x34>)
 8011e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e6c <global_stdio_init.part.0+0x38>)
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	4620      	mov	r0, r4
 8011e40:	2200      	movs	r2, #0
 8011e42:	2104      	movs	r1, #4
 8011e44:	f7ff ff94 	bl	8011d70 <std>
 8011e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	2109      	movs	r1, #9
 8011e50:	f7ff ff8e 	bl	8011d70 <std>
 8011e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e58:	2202      	movs	r2, #2
 8011e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e5e:	2112      	movs	r1, #18
 8011e60:	f7ff bf86 	b.w	8011d70 <std>
 8011e64:	20009438 	.word	0x20009438
 8011e68:	20009300 	.word	0x20009300
 8011e6c:	08011ddd 	.word	0x08011ddd

08011e70 <__sfp_lock_acquire>:
 8011e70:	4801      	ldr	r0, [pc, #4]	@ (8011e78 <__sfp_lock_acquire+0x8>)
 8011e72:	f000 b9ae 	b.w	80121d2 <__retarget_lock_acquire_recursive>
 8011e76:	bf00      	nop
 8011e78:	20009442 	.word	0x20009442

08011e7c <__sfp_lock_release>:
 8011e7c:	4801      	ldr	r0, [pc, #4]	@ (8011e84 <__sfp_lock_release+0x8>)
 8011e7e:	f000 b9a9 	b.w	80121d4 <__retarget_lock_release_recursive>
 8011e82:	bf00      	nop
 8011e84:	20009442 	.word	0x20009442

08011e88 <__sinit>:
 8011e88:	b510      	push	{r4, lr}
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	f7ff fff0 	bl	8011e70 <__sfp_lock_acquire>
 8011e90:	6a23      	ldr	r3, [r4, #32]
 8011e92:	b11b      	cbz	r3, 8011e9c <__sinit+0x14>
 8011e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e98:	f7ff bff0 	b.w	8011e7c <__sfp_lock_release>
 8011e9c:	4b04      	ldr	r3, [pc, #16]	@ (8011eb0 <__sinit+0x28>)
 8011e9e:	6223      	str	r3, [r4, #32]
 8011ea0:	4b04      	ldr	r3, [pc, #16]	@ (8011eb4 <__sinit+0x2c>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1f5      	bne.n	8011e94 <__sinit+0xc>
 8011ea8:	f7ff ffc4 	bl	8011e34 <global_stdio_init.part.0>
 8011eac:	e7f2      	b.n	8011e94 <__sinit+0xc>
 8011eae:	bf00      	nop
 8011eb0:	08011df5 	.word	0x08011df5
 8011eb4:	20009438 	.word	0x20009438

08011eb8 <_fwalk_sglue>:
 8011eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	4688      	mov	r8, r1
 8011ec0:	4614      	mov	r4, r2
 8011ec2:	2600      	movs	r6, #0
 8011ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8011ecc:	d505      	bpl.n	8011eda <_fwalk_sglue+0x22>
 8011ece:	6824      	ldr	r4, [r4, #0]
 8011ed0:	2c00      	cmp	r4, #0
 8011ed2:	d1f7      	bne.n	8011ec4 <_fwalk_sglue+0xc>
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eda:	89ab      	ldrh	r3, [r5, #12]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d907      	bls.n	8011ef0 <_fwalk_sglue+0x38>
 8011ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	d003      	beq.n	8011ef0 <_fwalk_sglue+0x38>
 8011ee8:	4629      	mov	r1, r5
 8011eea:	4638      	mov	r0, r7
 8011eec:	47c0      	blx	r8
 8011eee:	4306      	orrs	r6, r0
 8011ef0:	3568      	adds	r5, #104	@ 0x68
 8011ef2:	e7e9      	b.n	8011ec8 <_fwalk_sglue+0x10>

08011ef4 <sniprintf>:
 8011ef4:	b40c      	push	{r2, r3}
 8011ef6:	b530      	push	{r4, r5, lr}
 8011ef8:	4b17      	ldr	r3, [pc, #92]	@ (8011f58 <sniprintf+0x64>)
 8011efa:	1e0c      	subs	r4, r1, #0
 8011efc:	681d      	ldr	r5, [r3, #0]
 8011efe:	b09d      	sub	sp, #116	@ 0x74
 8011f00:	da08      	bge.n	8011f14 <sniprintf+0x20>
 8011f02:	238b      	movs	r3, #139	@ 0x8b
 8011f04:	602b      	str	r3, [r5, #0]
 8011f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f0a:	b01d      	add	sp, #116	@ 0x74
 8011f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f10:	b002      	add	sp, #8
 8011f12:	4770      	bx	lr
 8011f14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011f18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f1c:	bf14      	ite	ne
 8011f1e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011f22:	4623      	moveq	r3, r4
 8011f24:	9304      	str	r3, [sp, #16]
 8011f26:	9307      	str	r3, [sp, #28]
 8011f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f2c:	9002      	str	r0, [sp, #8]
 8011f2e:	9006      	str	r0, [sp, #24]
 8011f30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011f36:	ab21      	add	r3, sp, #132	@ 0x84
 8011f38:	a902      	add	r1, sp, #8
 8011f3a:	4628      	mov	r0, r5
 8011f3c:	9301      	str	r3, [sp, #4]
 8011f3e:	f000 fa39 	bl	80123b4 <_svfiprintf_r>
 8011f42:	1c43      	adds	r3, r0, #1
 8011f44:	bfbc      	itt	lt
 8011f46:	238b      	movlt	r3, #139	@ 0x8b
 8011f48:	602b      	strlt	r3, [r5, #0]
 8011f4a:	2c00      	cmp	r4, #0
 8011f4c:	d0dd      	beq.n	8011f0a <sniprintf+0x16>
 8011f4e:	9b02      	ldr	r3, [sp, #8]
 8011f50:	2200      	movs	r2, #0
 8011f52:	701a      	strb	r2, [r3, #0]
 8011f54:	e7d9      	b.n	8011f0a <sniprintf+0x16>
 8011f56:	bf00      	nop
 8011f58:	2000007c 	.word	0x2000007c

08011f5c <__sread>:
 8011f5c:	b510      	push	{r4, lr}
 8011f5e:	460c      	mov	r4, r1
 8011f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f64:	f000 f8d6 	bl	8012114 <_read_r>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	bfab      	itete	ge
 8011f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f70:	181b      	addge	r3, r3, r0
 8011f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f76:	bfac      	ite	ge
 8011f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f7a:	81a3      	strhlt	r3, [r4, #12]
 8011f7c:	bd10      	pop	{r4, pc}

08011f7e <__swrite>:
 8011f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f82:	461f      	mov	r7, r3
 8011f84:	898b      	ldrh	r3, [r1, #12]
 8011f86:	05db      	lsls	r3, r3, #23
 8011f88:	4605      	mov	r5, r0
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	4616      	mov	r6, r2
 8011f8e:	d505      	bpl.n	8011f9c <__swrite+0x1e>
 8011f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f94:	2302      	movs	r3, #2
 8011f96:	2200      	movs	r2, #0
 8011f98:	f000 f8aa 	bl	80120f0 <_lseek_r>
 8011f9c:	89a3      	ldrh	r3, [r4, #12]
 8011f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011fa6:	81a3      	strh	r3, [r4, #12]
 8011fa8:	4632      	mov	r2, r6
 8011faa:	463b      	mov	r3, r7
 8011fac:	4628      	mov	r0, r5
 8011fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb2:	f000 b8d1 	b.w	8012158 <_write_r>

08011fb6 <__sseek>:
 8011fb6:	b510      	push	{r4, lr}
 8011fb8:	460c      	mov	r4, r1
 8011fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fbe:	f000 f897 	bl	80120f0 <_lseek_r>
 8011fc2:	1c43      	adds	r3, r0, #1
 8011fc4:	89a3      	ldrh	r3, [r4, #12]
 8011fc6:	bf15      	itete	ne
 8011fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011fd2:	81a3      	strheq	r3, [r4, #12]
 8011fd4:	bf18      	it	ne
 8011fd6:	81a3      	strhne	r3, [r4, #12]
 8011fd8:	bd10      	pop	{r4, pc}

08011fda <__sclose>:
 8011fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fde:	f000 b877 	b.w	80120d0 <_close_r>

08011fe2 <_vsniprintf_r>:
 8011fe2:	b530      	push	{r4, r5, lr}
 8011fe4:	4614      	mov	r4, r2
 8011fe6:	2c00      	cmp	r4, #0
 8011fe8:	b09b      	sub	sp, #108	@ 0x6c
 8011fea:	4605      	mov	r5, r0
 8011fec:	461a      	mov	r2, r3
 8011fee:	da05      	bge.n	8011ffc <_vsniprintf_r+0x1a>
 8011ff0:	238b      	movs	r3, #139	@ 0x8b
 8011ff2:	6003      	str	r3, [r0, #0]
 8011ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ff8:	b01b      	add	sp, #108	@ 0x6c
 8011ffa:	bd30      	pop	{r4, r5, pc}
 8011ffc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012000:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012004:	bf14      	ite	ne
 8012006:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801200a:	4623      	moveq	r3, r4
 801200c:	9302      	str	r3, [sp, #8]
 801200e:	9305      	str	r3, [sp, #20]
 8012010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012014:	9100      	str	r1, [sp, #0]
 8012016:	9104      	str	r1, [sp, #16]
 8012018:	f8ad 300e 	strh.w	r3, [sp, #14]
 801201c:	4669      	mov	r1, sp
 801201e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012020:	f000 f9c8 	bl	80123b4 <_svfiprintf_r>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	bfbc      	itt	lt
 8012028:	238b      	movlt	r3, #139	@ 0x8b
 801202a:	602b      	strlt	r3, [r5, #0]
 801202c:	2c00      	cmp	r4, #0
 801202e:	d0e3      	beq.n	8011ff8 <_vsniprintf_r+0x16>
 8012030:	9b00      	ldr	r3, [sp, #0]
 8012032:	2200      	movs	r2, #0
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	e7df      	b.n	8011ff8 <_vsniprintf_r+0x16>

08012038 <vsniprintf>:
 8012038:	b507      	push	{r0, r1, r2, lr}
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	4613      	mov	r3, r2
 801203e:	460a      	mov	r2, r1
 8012040:	4601      	mov	r1, r0
 8012042:	4803      	ldr	r0, [pc, #12]	@ (8012050 <vsniprintf+0x18>)
 8012044:	6800      	ldr	r0, [r0, #0]
 8012046:	f7ff ffcc 	bl	8011fe2 <_vsniprintf_r>
 801204a:	b003      	add	sp, #12
 801204c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012050:	2000007c 	.word	0x2000007c

08012054 <memset>:
 8012054:	4402      	add	r2, r0
 8012056:	4603      	mov	r3, r0
 8012058:	4293      	cmp	r3, r2
 801205a:	d100      	bne.n	801205e <memset+0xa>
 801205c:	4770      	bx	lr
 801205e:	f803 1b01 	strb.w	r1, [r3], #1
 8012062:	e7f9      	b.n	8012058 <memset+0x4>

08012064 <strchr>:
 8012064:	b2c9      	uxtb	r1, r1
 8012066:	4603      	mov	r3, r0
 8012068:	4618      	mov	r0, r3
 801206a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801206e:	b112      	cbz	r2, 8012076 <strchr+0x12>
 8012070:	428a      	cmp	r2, r1
 8012072:	d1f9      	bne.n	8012068 <strchr+0x4>
 8012074:	4770      	bx	lr
 8012076:	2900      	cmp	r1, #0
 8012078:	bf18      	it	ne
 801207a:	2000      	movne	r0, #0
 801207c:	4770      	bx	lr

0801207e <strncmp>:
 801207e:	b510      	push	{r4, lr}
 8012080:	b16a      	cbz	r2, 801209e <strncmp+0x20>
 8012082:	3901      	subs	r1, #1
 8012084:	1884      	adds	r4, r0, r2
 8012086:	f810 2b01 	ldrb.w	r2, [r0], #1
 801208a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801208e:	429a      	cmp	r2, r3
 8012090:	d103      	bne.n	801209a <strncmp+0x1c>
 8012092:	42a0      	cmp	r0, r4
 8012094:	d001      	beq.n	801209a <strncmp+0x1c>
 8012096:	2a00      	cmp	r2, #0
 8012098:	d1f5      	bne.n	8012086 <strncmp+0x8>
 801209a:	1ad0      	subs	r0, r2, r3
 801209c:	bd10      	pop	{r4, pc}
 801209e:	4610      	mov	r0, r2
 80120a0:	e7fc      	b.n	801209c <strncmp+0x1e>

080120a2 <strstr>:
 80120a2:	780a      	ldrb	r2, [r1, #0]
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	b96a      	cbnz	r2, 80120c4 <strstr+0x22>
 80120a8:	bd70      	pop	{r4, r5, r6, pc}
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d109      	bne.n	80120c2 <strstr+0x20>
 80120ae:	460c      	mov	r4, r1
 80120b0:	4605      	mov	r5, r0
 80120b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d0f6      	beq.n	80120a8 <strstr+0x6>
 80120ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80120be:	429e      	cmp	r6, r3
 80120c0:	d0f7      	beq.n	80120b2 <strstr+0x10>
 80120c2:	3001      	adds	r0, #1
 80120c4:	7803      	ldrb	r3, [r0, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1ef      	bne.n	80120aa <strstr+0x8>
 80120ca:	4618      	mov	r0, r3
 80120cc:	e7ec      	b.n	80120a8 <strstr+0x6>
	...

080120d0 <_close_r>:
 80120d0:	b538      	push	{r3, r4, r5, lr}
 80120d2:	4d06      	ldr	r5, [pc, #24]	@ (80120ec <_close_r+0x1c>)
 80120d4:	2300      	movs	r3, #0
 80120d6:	4604      	mov	r4, r0
 80120d8:	4608      	mov	r0, r1
 80120da:	602b      	str	r3, [r5, #0]
 80120dc:	f7f0 f9c6 	bl	800246c <_close>
 80120e0:	1c43      	adds	r3, r0, #1
 80120e2:	d102      	bne.n	80120ea <_close_r+0x1a>
 80120e4:	682b      	ldr	r3, [r5, #0]
 80120e6:	b103      	cbz	r3, 80120ea <_close_r+0x1a>
 80120e8:	6023      	str	r3, [r4, #0]
 80120ea:	bd38      	pop	{r3, r4, r5, pc}
 80120ec:	2000943c 	.word	0x2000943c

080120f0 <_lseek_r>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	4d07      	ldr	r5, [pc, #28]	@ (8012110 <_lseek_r+0x20>)
 80120f4:	4604      	mov	r4, r0
 80120f6:	4608      	mov	r0, r1
 80120f8:	4611      	mov	r1, r2
 80120fa:	2200      	movs	r2, #0
 80120fc:	602a      	str	r2, [r5, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	f7f0 f9db 	bl	80024ba <_lseek>
 8012104:	1c43      	adds	r3, r0, #1
 8012106:	d102      	bne.n	801210e <_lseek_r+0x1e>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	b103      	cbz	r3, 801210e <_lseek_r+0x1e>
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	bd38      	pop	{r3, r4, r5, pc}
 8012110:	2000943c 	.word	0x2000943c

08012114 <_read_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d07      	ldr	r5, [pc, #28]	@ (8012134 <_read_r+0x20>)
 8012118:	4604      	mov	r4, r0
 801211a:	4608      	mov	r0, r1
 801211c:	4611      	mov	r1, r2
 801211e:	2200      	movs	r2, #0
 8012120:	602a      	str	r2, [r5, #0]
 8012122:	461a      	mov	r2, r3
 8012124:	f7f0 f969 	bl	80023fa <_read>
 8012128:	1c43      	adds	r3, r0, #1
 801212a:	d102      	bne.n	8012132 <_read_r+0x1e>
 801212c:	682b      	ldr	r3, [r5, #0]
 801212e:	b103      	cbz	r3, 8012132 <_read_r+0x1e>
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	2000943c 	.word	0x2000943c

08012138 <_sbrk_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	4d06      	ldr	r5, [pc, #24]	@ (8012154 <_sbrk_r+0x1c>)
 801213c:	2300      	movs	r3, #0
 801213e:	4604      	mov	r4, r0
 8012140:	4608      	mov	r0, r1
 8012142:	602b      	str	r3, [r5, #0]
 8012144:	f7f0 f9c6 	bl	80024d4 <_sbrk>
 8012148:	1c43      	adds	r3, r0, #1
 801214a:	d102      	bne.n	8012152 <_sbrk_r+0x1a>
 801214c:	682b      	ldr	r3, [r5, #0]
 801214e:	b103      	cbz	r3, 8012152 <_sbrk_r+0x1a>
 8012150:	6023      	str	r3, [r4, #0]
 8012152:	bd38      	pop	{r3, r4, r5, pc}
 8012154:	2000943c 	.word	0x2000943c

08012158 <_write_r>:
 8012158:	b538      	push	{r3, r4, r5, lr}
 801215a:	4d07      	ldr	r5, [pc, #28]	@ (8012178 <_write_r+0x20>)
 801215c:	4604      	mov	r4, r0
 801215e:	4608      	mov	r0, r1
 8012160:	4611      	mov	r1, r2
 8012162:	2200      	movs	r2, #0
 8012164:	602a      	str	r2, [r5, #0]
 8012166:	461a      	mov	r2, r3
 8012168:	f7f0 f964 	bl	8002434 <_write>
 801216c:	1c43      	adds	r3, r0, #1
 801216e:	d102      	bne.n	8012176 <_write_r+0x1e>
 8012170:	682b      	ldr	r3, [r5, #0]
 8012172:	b103      	cbz	r3, 8012176 <_write_r+0x1e>
 8012174:	6023      	str	r3, [r4, #0]
 8012176:	bd38      	pop	{r3, r4, r5, pc}
 8012178:	2000943c 	.word	0x2000943c

0801217c <__errno>:
 801217c:	4b01      	ldr	r3, [pc, #4]	@ (8012184 <__errno+0x8>)
 801217e:	6818      	ldr	r0, [r3, #0]
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop
 8012184:	2000007c 	.word	0x2000007c

08012188 <__libc_init_array>:
 8012188:	b570      	push	{r4, r5, r6, lr}
 801218a:	4d0d      	ldr	r5, [pc, #52]	@ (80121c0 <__libc_init_array+0x38>)
 801218c:	4c0d      	ldr	r4, [pc, #52]	@ (80121c4 <__libc_init_array+0x3c>)
 801218e:	1b64      	subs	r4, r4, r5
 8012190:	10a4      	asrs	r4, r4, #2
 8012192:	2600      	movs	r6, #0
 8012194:	42a6      	cmp	r6, r4
 8012196:	d109      	bne.n	80121ac <__libc_init_array+0x24>
 8012198:	4d0b      	ldr	r5, [pc, #44]	@ (80121c8 <__libc_init_array+0x40>)
 801219a:	4c0c      	ldr	r4, [pc, #48]	@ (80121cc <__libc_init_array+0x44>)
 801219c:	f000 ff10 	bl	8012fc0 <_init>
 80121a0:	1b64      	subs	r4, r4, r5
 80121a2:	10a4      	asrs	r4, r4, #2
 80121a4:	2600      	movs	r6, #0
 80121a6:	42a6      	cmp	r6, r4
 80121a8:	d105      	bne.n	80121b6 <__libc_init_array+0x2e>
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80121b0:	4798      	blx	r3
 80121b2:	3601      	adds	r6, #1
 80121b4:	e7ee      	b.n	8012194 <__libc_init_array+0xc>
 80121b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ba:	4798      	blx	r3
 80121bc:	3601      	adds	r6, #1
 80121be:	e7f2      	b.n	80121a6 <__libc_init_array+0x1e>
 80121c0:	08013a38 	.word	0x08013a38
 80121c4:	08013a38 	.word	0x08013a38
 80121c8:	08013a38 	.word	0x08013a38
 80121cc:	08013a3c 	.word	0x08013a3c

080121d0 <__retarget_lock_init_recursive>:
 80121d0:	4770      	bx	lr

080121d2 <__retarget_lock_acquire_recursive>:
 80121d2:	4770      	bx	lr

080121d4 <__retarget_lock_release_recursive>:
 80121d4:	4770      	bx	lr

080121d6 <strcpy>:
 80121d6:	4603      	mov	r3, r0
 80121d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121dc:	f803 2b01 	strb.w	r2, [r3], #1
 80121e0:	2a00      	cmp	r2, #0
 80121e2:	d1f9      	bne.n	80121d8 <strcpy+0x2>
 80121e4:	4770      	bx	lr

080121e6 <memcpy>:
 80121e6:	440a      	add	r2, r1
 80121e8:	4291      	cmp	r1, r2
 80121ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80121ee:	d100      	bne.n	80121f2 <memcpy+0xc>
 80121f0:	4770      	bx	lr
 80121f2:	b510      	push	{r4, lr}
 80121f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121fc:	4291      	cmp	r1, r2
 80121fe:	d1f9      	bne.n	80121f4 <memcpy+0xe>
 8012200:	bd10      	pop	{r4, pc}
	...

08012204 <__assert_func>:
 8012204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012206:	4614      	mov	r4, r2
 8012208:	461a      	mov	r2, r3
 801220a:	4b09      	ldr	r3, [pc, #36]	@ (8012230 <__assert_func+0x2c>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	4605      	mov	r5, r0
 8012210:	68d8      	ldr	r0, [r3, #12]
 8012212:	b954      	cbnz	r4, 801222a <__assert_func+0x26>
 8012214:	4b07      	ldr	r3, [pc, #28]	@ (8012234 <__assert_func+0x30>)
 8012216:	461c      	mov	r4, r3
 8012218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801221c:	9100      	str	r1, [sp, #0]
 801221e:	462b      	mov	r3, r5
 8012220:	4905      	ldr	r1, [pc, #20]	@ (8012238 <__assert_func+0x34>)
 8012222:	f000 fbfd 	bl	8012a20 <fiprintf>
 8012226:	f000 fc27 	bl	8012a78 <abort>
 801222a:	4b04      	ldr	r3, [pc, #16]	@ (801223c <__assert_func+0x38>)
 801222c:	e7f4      	b.n	8012218 <__assert_func+0x14>
 801222e:	bf00      	nop
 8012230:	2000007c 	.word	0x2000007c
 8012234:	080139fb 	.word	0x080139fb
 8012238:	080139cd 	.word	0x080139cd
 801223c:	080139c0 	.word	0x080139c0

08012240 <__env_lock>:
 8012240:	4801      	ldr	r0, [pc, #4]	@ (8012248 <__env_lock+0x8>)
 8012242:	f7ff bfc6 	b.w	80121d2 <__retarget_lock_acquire_recursive>
 8012246:	bf00      	nop
 8012248:	20009440 	.word	0x20009440

0801224c <__env_unlock>:
 801224c:	4801      	ldr	r0, [pc, #4]	@ (8012254 <__env_unlock+0x8>)
 801224e:	f7ff bfc1 	b.w	80121d4 <__retarget_lock_release_recursive>
 8012252:	bf00      	nop
 8012254:	20009440 	.word	0x20009440

08012258 <_free_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4605      	mov	r5, r0
 801225c:	2900      	cmp	r1, #0
 801225e:	d041      	beq.n	80122e4 <_free_r+0x8c>
 8012260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012264:	1f0c      	subs	r4, r1, #4
 8012266:	2b00      	cmp	r3, #0
 8012268:	bfb8      	it	lt
 801226a:	18e4      	addlt	r4, r4, r3
 801226c:	f7ff fc5a 	bl	8011b24 <__malloc_lock>
 8012270:	4a1d      	ldr	r2, [pc, #116]	@ (80122e8 <_free_r+0x90>)
 8012272:	6813      	ldr	r3, [r2, #0]
 8012274:	b933      	cbnz	r3, 8012284 <_free_r+0x2c>
 8012276:	6063      	str	r3, [r4, #4]
 8012278:	6014      	str	r4, [r2, #0]
 801227a:	4628      	mov	r0, r5
 801227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012280:	f7ff bc56 	b.w	8011b30 <__malloc_unlock>
 8012284:	42a3      	cmp	r3, r4
 8012286:	d908      	bls.n	801229a <_free_r+0x42>
 8012288:	6820      	ldr	r0, [r4, #0]
 801228a:	1821      	adds	r1, r4, r0
 801228c:	428b      	cmp	r3, r1
 801228e:	bf01      	itttt	eq
 8012290:	6819      	ldreq	r1, [r3, #0]
 8012292:	685b      	ldreq	r3, [r3, #4]
 8012294:	1809      	addeq	r1, r1, r0
 8012296:	6021      	streq	r1, [r4, #0]
 8012298:	e7ed      	b.n	8012276 <_free_r+0x1e>
 801229a:	461a      	mov	r2, r3
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	b10b      	cbz	r3, 80122a4 <_free_r+0x4c>
 80122a0:	42a3      	cmp	r3, r4
 80122a2:	d9fa      	bls.n	801229a <_free_r+0x42>
 80122a4:	6811      	ldr	r1, [r2, #0]
 80122a6:	1850      	adds	r0, r2, r1
 80122a8:	42a0      	cmp	r0, r4
 80122aa:	d10b      	bne.n	80122c4 <_free_r+0x6c>
 80122ac:	6820      	ldr	r0, [r4, #0]
 80122ae:	4401      	add	r1, r0
 80122b0:	1850      	adds	r0, r2, r1
 80122b2:	4283      	cmp	r3, r0
 80122b4:	6011      	str	r1, [r2, #0]
 80122b6:	d1e0      	bne.n	801227a <_free_r+0x22>
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	6053      	str	r3, [r2, #4]
 80122be:	4408      	add	r0, r1
 80122c0:	6010      	str	r0, [r2, #0]
 80122c2:	e7da      	b.n	801227a <_free_r+0x22>
 80122c4:	d902      	bls.n	80122cc <_free_r+0x74>
 80122c6:	230c      	movs	r3, #12
 80122c8:	602b      	str	r3, [r5, #0]
 80122ca:	e7d6      	b.n	801227a <_free_r+0x22>
 80122cc:	6820      	ldr	r0, [r4, #0]
 80122ce:	1821      	adds	r1, r4, r0
 80122d0:	428b      	cmp	r3, r1
 80122d2:	bf04      	itt	eq
 80122d4:	6819      	ldreq	r1, [r3, #0]
 80122d6:	685b      	ldreq	r3, [r3, #4]
 80122d8:	6063      	str	r3, [r4, #4]
 80122da:	bf04      	itt	eq
 80122dc:	1809      	addeq	r1, r1, r0
 80122de:	6021      	streq	r1, [r4, #0]
 80122e0:	6054      	str	r4, [r2, #4]
 80122e2:	e7ca      	b.n	801227a <_free_r+0x22>
 80122e4:	bd38      	pop	{r3, r4, r5, pc}
 80122e6:	bf00      	nop
 80122e8:	200092fc 	.word	0x200092fc

080122ec <_malloc_usable_size_r>:
 80122ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122f0:	1f18      	subs	r0, r3, #4
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	bfbc      	itt	lt
 80122f6:	580b      	ldrlt	r3, [r1, r0]
 80122f8:	18c0      	addlt	r0, r0, r3
 80122fa:	4770      	bx	lr

080122fc <__ssputs_r>:
 80122fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012300:	688e      	ldr	r6, [r1, #8]
 8012302:	461f      	mov	r7, r3
 8012304:	42be      	cmp	r6, r7
 8012306:	680b      	ldr	r3, [r1, #0]
 8012308:	4682      	mov	sl, r0
 801230a:	460c      	mov	r4, r1
 801230c:	4690      	mov	r8, r2
 801230e:	d82d      	bhi.n	801236c <__ssputs_r+0x70>
 8012310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012314:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012318:	d026      	beq.n	8012368 <__ssputs_r+0x6c>
 801231a:	6965      	ldr	r5, [r4, #20]
 801231c:	6909      	ldr	r1, [r1, #16]
 801231e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012322:	eba3 0901 	sub.w	r9, r3, r1
 8012326:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801232a:	1c7b      	adds	r3, r7, #1
 801232c:	444b      	add	r3, r9
 801232e:	106d      	asrs	r5, r5, #1
 8012330:	429d      	cmp	r5, r3
 8012332:	bf38      	it	cc
 8012334:	461d      	movcc	r5, r3
 8012336:	0553      	lsls	r3, r2, #21
 8012338:	d527      	bpl.n	801238a <__ssputs_r+0x8e>
 801233a:	4629      	mov	r1, r5
 801233c:	f7ff fb72 	bl	8011a24 <_malloc_r>
 8012340:	4606      	mov	r6, r0
 8012342:	b360      	cbz	r0, 801239e <__ssputs_r+0xa2>
 8012344:	6921      	ldr	r1, [r4, #16]
 8012346:	464a      	mov	r2, r9
 8012348:	f7ff ff4d 	bl	80121e6 <memcpy>
 801234c:	89a3      	ldrh	r3, [r4, #12]
 801234e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012356:	81a3      	strh	r3, [r4, #12]
 8012358:	6126      	str	r6, [r4, #16]
 801235a:	6165      	str	r5, [r4, #20]
 801235c:	444e      	add	r6, r9
 801235e:	eba5 0509 	sub.w	r5, r5, r9
 8012362:	6026      	str	r6, [r4, #0]
 8012364:	60a5      	str	r5, [r4, #8]
 8012366:	463e      	mov	r6, r7
 8012368:	42be      	cmp	r6, r7
 801236a:	d900      	bls.n	801236e <__ssputs_r+0x72>
 801236c:	463e      	mov	r6, r7
 801236e:	6820      	ldr	r0, [r4, #0]
 8012370:	4632      	mov	r2, r6
 8012372:	4641      	mov	r1, r8
 8012374:	f000 fb66 	bl	8012a44 <memmove>
 8012378:	68a3      	ldr	r3, [r4, #8]
 801237a:	1b9b      	subs	r3, r3, r6
 801237c:	60a3      	str	r3, [r4, #8]
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	4433      	add	r3, r6
 8012382:	6023      	str	r3, [r4, #0]
 8012384:	2000      	movs	r0, #0
 8012386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801238a:	462a      	mov	r2, r5
 801238c:	f7ff fc4a 	bl	8011c24 <_realloc_r>
 8012390:	4606      	mov	r6, r0
 8012392:	2800      	cmp	r0, #0
 8012394:	d1e0      	bne.n	8012358 <__ssputs_r+0x5c>
 8012396:	6921      	ldr	r1, [r4, #16]
 8012398:	4650      	mov	r0, sl
 801239a:	f7ff ff5d 	bl	8012258 <_free_r>
 801239e:	230c      	movs	r3, #12
 80123a0:	f8ca 3000 	str.w	r3, [sl]
 80123a4:	89a3      	ldrh	r3, [r4, #12]
 80123a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123aa:	81a3      	strh	r3, [r4, #12]
 80123ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123b0:	e7e9      	b.n	8012386 <__ssputs_r+0x8a>
	...

080123b4 <_svfiprintf_r>:
 80123b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b8:	4698      	mov	r8, r3
 80123ba:	898b      	ldrh	r3, [r1, #12]
 80123bc:	061b      	lsls	r3, r3, #24
 80123be:	b09d      	sub	sp, #116	@ 0x74
 80123c0:	4607      	mov	r7, r0
 80123c2:	460d      	mov	r5, r1
 80123c4:	4614      	mov	r4, r2
 80123c6:	d510      	bpl.n	80123ea <_svfiprintf_r+0x36>
 80123c8:	690b      	ldr	r3, [r1, #16]
 80123ca:	b973      	cbnz	r3, 80123ea <_svfiprintf_r+0x36>
 80123cc:	2140      	movs	r1, #64	@ 0x40
 80123ce:	f7ff fb29 	bl	8011a24 <_malloc_r>
 80123d2:	6028      	str	r0, [r5, #0]
 80123d4:	6128      	str	r0, [r5, #16]
 80123d6:	b930      	cbnz	r0, 80123e6 <_svfiprintf_r+0x32>
 80123d8:	230c      	movs	r3, #12
 80123da:	603b      	str	r3, [r7, #0]
 80123dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123e0:	b01d      	add	sp, #116	@ 0x74
 80123e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e6:	2340      	movs	r3, #64	@ 0x40
 80123e8:	616b      	str	r3, [r5, #20]
 80123ea:	2300      	movs	r3, #0
 80123ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80123ee:	2320      	movs	r3, #32
 80123f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80123f8:	2330      	movs	r3, #48	@ 0x30
 80123fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012598 <_svfiprintf_r+0x1e4>
 80123fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012402:	f04f 0901 	mov.w	r9, #1
 8012406:	4623      	mov	r3, r4
 8012408:	469a      	mov	sl, r3
 801240a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801240e:	b10a      	cbz	r2, 8012414 <_svfiprintf_r+0x60>
 8012410:	2a25      	cmp	r2, #37	@ 0x25
 8012412:	d1f9      	bne.n	8012408 <_svfiprintf_r+0x54>
 8012414:	ebba 0b04 	subs.w	fp, sl, r4
 8012418:	d00b      	beq.n	8012432 <_svfiprintf_r+0x7e>
 801241a:	465b      	mov	r3, fp
 801241c:	4622      	mov	r2, r4
 801241e:	4629      	mov	r1, r5
 8012420:	4638      	mov	r0, r7
 8012422:	f7ff ff6b 	bl	80122fc <__ssputs_r>
 8012426:	3001      	adds	r0, #1
 8012428:	f000 80a7 	beq.w	801257a <_svfiprintf_r+0x1c6>
 801242c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801242e:	445a      	add	r2, fp
 8012430:	9209      	str	r2, [sp, #36]	@ 0x24
 8012432:	f89a 3000 	ldrb.w	r3, [sl]
 8012436:	2b00      	cmp	r3, #0
 8012438:	f000 809f 	beq.w	801257a <_svfiprintf_r+0x1c6>
 801243c:	2300      	movs	r3, #0
 801243e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012446:	f10a 0a01 	add.w	sl, sl, #1
 801244a:	9304      	str	r3, [sp, #16]
 801244c:	9307      	str	r3, [sp, #28]
 801244e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012452:	931a      	str	r3, [sp, #104]	@ 0x68
 8012454:	4654      	mov	r4, sl
 8012456:	2205      	movs	r2, #5
 8012458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801245c:	484e      	ldr	r0, [pc, #312]	@ (8012598 <_svfiprintf_r+0x1e4>)
 801245e:	f7ed fed7 	bl	8000210 <memchr>
 8012462:	9a04      	ldr	r2, [sp, #16]
 8012464:	b9d8      	cbnz	r0, 801249e <_svfiprintf_r+0xea>
 8012466:	06d0      	lsls	r0, r2, #27
 8012468:	bf44      	itt	mi
 801246a:	2320      	movmi	r3, #32
 801246c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012470:	0711      	lsls	r1, r2, #28
 8012472:	bf44      	itt	mi
 8012474:	232b      	movmi	r3, #43	@ 0x2b
 8012476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801247a:	f89a 3000 	ldrb.w	r3, [sl]
 801247e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012480:	d015      	beq.n	80124ae <_svfiprintf_r+0xfa>
 8012482:	9a07      	ldr	r2, [sp, #28]
 8012484:	4654      	mov	r4, sl
 8012486:	2000      	movs	r0, #0
 8012488:	f04f 0c0a 	mov.w	ip, #10
 801248c:	4621      	mov	r1, r4
 801248e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012492:	3b30      	subs	r3, #48	@ 0x30
 8012494:	2b09      	cmp	r3, #9
 8012496:	d94b      	bls.n	8012530 <_svfiprintf_r+0x17c>
 8012498:	b1b0      	cbz	r0, 80124c8 <_svfiprintf_r+0x114>
 801249a:	9207      	str	r2, [sp, #28]
 801249c:	e014      	b.n	80124c8 <_svfiprintf_r+0x114>
 801249e:	eba0 0308 	sub.w	r3, r0, r8
 80124a2:	fa09 f303 	lsl.w	r3, r9, r3
 80124a6:	4313      	orrs	r3, r2
 80124a8:	9304      	str	r3, [sp, #16]
 80124aa:	46a2      	mov	sl, r4
 80124ac:	e7d2      	b.n	8012454 <_svfiprintf_r+0xa0>
 80124ae:	9b03      	ldr	r3, [sp, #12]
 80124b0:	1d19      	adds	r1, r3, #4
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	9103      	str	r1, [sp, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	bfbb      	ittet	lt
 80124ba:	425b      	neglt	r3, r3
 80124bc:	f042 0202 	orrlt.w	r2, r2, #2
 80124c0:	9307      	strge	r3, [sp, #28]
 80124c2:	9307      	strlt	r3, [sp, #28]
 80124c4:	bfb8      	it	lt
 80124c6:	9204      	strlt	r2, [sp, #16]
 80124c8:	7823      	ldrb	r3, [r4, #0]
 80124ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80124cc:	d10a      	bne.n	80124e4 <_svfiprintf_r+0x130>
 80124ce:	7863      	ldrb	r3, [r4, #1]
 80124d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80124d2:	d132      	bne.n	801253a <_svfiprintf_r+0x186>
 80124d4:	9b03      	ldr	r3, [sp, #12]
 80124d6:	1d1a      	adds	r2, r3, #4
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	9203      	str	r2, [sp, #12]
 80124dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124e0:	3402      	adds	r4, #2
 80124e2:	9305      	str	r3, [sp, #20]
 80124e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80125a8 <_svfiprintf_r+0x1f4>
 80124e8:	7821      	ldrb	r1, [r4, #0]
 80124ea:	2203      	movs	r2, #3
 80124ec:	4650      	mov	r0, sl
 80124ee:	f7ed fe8f 	bl	8000210 <memchr>
 80124f2:	b138      	cbz	r0, 8012504 <_svfiprintf_r+0x150>
 80124f4:	9b04      	ldr	r3, [sp, #16]
 80124f6:	eba0 000a 	sub.w	r0, r0, sl
 80124fa:	2240      	movs	r2, #64	@ 0x40
 80124fc:	4082      	lsls	r2, r0
 80124fe:	4313      	orrs	r3, r2
 8012500:	3401      	adds	r4, #1
 8012502:	9304      	str	r3, [sp, #16]
 8012504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012508:	4824      	ldr	r0, [pc, #144]	@ (801259c <_svfiprintf_r+0x1e8>)
 801250a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801250e:	2206      	movs	r2, #6
 8012510:	f7ed fe7e 	bl	8000210 <memchr>
 8012514:	2800      	cmp	r0, #0
 8012516:	d036      	beq.n	8012586 <_svfiprintf_r+0x1d2>
 8012518:	4b21      	ldr	r3, [pc, #132]	@ (80125a0 <_svfiprintf_r+0x1ec>)
 801251a:	bb1b      	cbnz	r3, 8012564 <_svfiprintf_r+0x1b0>
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	3307      	adds	r3, #7
 8012520:	f023 0307 	bic.w	r3, r3, #7
 8012524:	3308      	adds	r3, #8
 8012526:	9303      	str	r3, [sp, #12]
 8012528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801252a:	4433      	add	r3, r6
 801252c:	9309      	str	r3, [sp, #36]	@ 0x24
 801252e:	e76a      	b.n	8012406 <_svfiprintf_r+0x52>
 8012530:	fb0c 3202 	mla	r2, ip, r2, r3
 8012534:	460c      	mov	r4, r1
 8012536:	2001      	movs	r0, #1
 8012538:	e7a8      	b.n	801248c <_svfiprintf_r+0xd8>
 801253a:	2300      	movs	r3, #0
 801253c:	3401      	adds	r4, #1
 801253e:	9305      	str	r3, [sp, #20]
 8012540:	4619      	mov	r1, r3
 8012542:	f04f 0c0a 	mov.w	ip, #10
 8012546:	4620      	mov	r0, r4
 8012548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801254c:	3a30      	subs	r2, #48	@ 0x30
 801254e:	2a09      	cmp	r2, #9
 8012550:	d903      	bls.n	801255a <_svfiprintf_r+0x1a6>
 8012552:	2b00      	cmp	r3, #0
 8012554:	d0c6      	beq.n	80124e4 <_svfiprintf_r+0x130>
 8012556:	9105      	str	r1, [sp, #20]
 8012558:	e7c4      	b.n	80124e4 <_svfiprintf_r+0x130>
 801255a:	fb0c 2101 	mla	r1, ip, r1, r2
 801255e:	4604      	mov	r4, r0
 8012560:	2301      	movs	r3, #1
 8012562:	e7f0      	b.n	8012546 <_svfiprintf_r+0x192>
 8012564:	ab03      	add	r3, sp, #12
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	462a      	mov	r2, r5
 801256a:	4b0e      	ldr	r3, [pc, #56]	@ (80125a4 <_svfiprintf_r+0x1f0>)
 801256c:	a904      	add	r1, sp, #16
 801256e:	4638      	mov	r0, r7
 8012570:	f3af 8000 	nop.w
 8012574:	1c42      	adds	r2, r0, #1
 8012576:	4606      	mov	r6, r0
 8012578:	d1d6      	bne.n	8012528 <_svfiprintf_r+0x174>
 801257a:	89ab      	ldrh	r3, [r5, #12]
 801257c:	065b      	lsls	r3, r3, #25
 801257e:	f53f af2d 	bmi.w	80123dc <_svfiprintf_r+0x28>
 8012582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012584:	e72c      	b.n	80123e0 <_svfiprintf_r+0x2c>
 8012586:	ab03      	add	r3, sp, #12
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	462a      	mov	r2, r5
 801258c:	4b05      	ldr	r3, [pc, #20]	@ (80125a4 <_svfiprintf_r+0x1f0>)
 801258e:	a904      	add	r1, sp, #16
 8012590:	4638      	mov	r0, r7
 8012592:	f000 f879 	bl	8012688 <_printf_i>
 8012596:	e7ed      	b.n	8012574 <_svfiprintf_r+0x1c0>
 8012598:	080139fc 	.word	0x080139fc
 801259c:	08013a06 	.word	0x08013a06
 80125a0:	00000000 	.word	0x00000000
 80125a4:	080122fd 	.word	0x080122fd
 80125a8:	08013a02 	.word	0x08013a02

080125ac <_printf_common>:
 80125ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b0:	4616      	mov	r6, r2
 80125b2:	4698      	mov	r8, r3
 80125b4:	688a      	ldr	r2, [r1, #8]
 80125b6:	690b      	ldr	r3, [r1, #16]
 80125b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80125bc:	4293      	cmp	r3, r2
 80125be:	bfb8      	it	lt
 80125c0:	4613      	movlt	r3, r2
 80125c2:	6033      	str	r3, [r6, #0]
 80125c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80125c8:	4607      	mov	r7, r0
 80125ca:	460c      	mov	r4, r1
 80125cc:	b10a      	cbz	r2, 80125d2 <_printf_common+0x26>
 80125ce:	3301      	adds	r3, #1
 80125d0:	6033      	str	r3, [r6, #0]
 80125d2:	6823      	ldr	r3, [r4, #0]
 80125d4:	0699      	lsls	r1, r3, #26
 80125d6:	bf42      	ittt	mi
 80125d8:	6833      	ldrmi	r3, [r6, #0]
 80125da:	3302      	addmi	r3, #2
 80125dc:	6033      	strmi	r3, [r6, #0]
 80125de:	6825      	ldr	r5, [r4, #0]
 80125e0:	f015 0506 	ands.w	r5, r5, #6
 80125e4:	d106      	bne.n	80125f4 <_printf_common+0x48>
 80125e6:	f104 0a19 	add.w	sl, r4, #25
 80125ea:	68e3      	ldr	r3, [r4, #12]
 80125ec:	6832      	ldr	r2, [r6, #0]
 80125ee:	1a9b      	subs	r3, r3, r2
 80125f0:	42ab      	cmp	r3, r5
 80125f2:	dc26      	bgt.n	8012642 <_printf_common+0x96>
 80125f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80125f8:	6822      	ldr	r2, [r4, #0]
 80125fa:	3b00      	subs	r3, #0
 80125fc:	bf18      	it	ne
 80125fe:	2301      	movne	r3, #1
 8012600:	0692      	lsls	r2, r2, #26
 8012602:	d42b      	bmi.n	801265c <_printf_common+0xb0>
 8012604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012608:	4641      	mov	r1, r8
 801260a:	4638      	mov	r0, r7
 801260c:	47c8      	blx	r9
 801260e:	3001      	adds	r0, #1
 8012610:	d01e      	beq.n	8012650 <_printf_common+0xa4>
 8012612:	6823      	ldr	r3, [r4, #0]
 8012614:	6922      	ldr	r2, [r4, #16]
 8012616:	f003 0306 	and.w	r3, r3, #6
 801261a:	2b04      	cmp	r3, #4
 801261c:	bf02      	ittt	eq
 801261e:	68e5      	ldreq	r5, [r4, #12]
 8012620:	6833      	ldreq	r3, [r6, #0]
 8012622:	1aed      	subeq	r5, r5, r3
 8012624:	68a3      	ldr	r3, [r4, #8]
 8012626:	bf0c      	ite	eq
 8012628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801262c:	2500      	movne	r5, #0
 801262e:	4293      	cmp	r3, r2
 8012630:	bfc4      	itt	gt
 8012632:	1a9b      	subgt	r3, r3, r2
 8012634:	18ed      	addgt	r5, r5, r3
 8012636:	2600      	movs	r6, #0
 8012638:	341a      	adds	r4, #26
 801263a:	42b5      	cmp	r5, r6
 801263c:	d11a      	bne.n	8012674 <_printf_common+0xc8>
 801263e:	2000      	movs	r0, #0
 8012640:	e008      	b.n	8012654 <_printf_common+0xa8>
 8012642:	2301      	movs	r3, #1
 8012644:	4652      	mov	r2, sl
 8012646:	4641      	mov	r1, r8
 8012648:	4638      	mov	r0, r7
 801264a:	47c8      	blx	r9
 801264c:	3001      	adds	r0, #1
 801264e:	d103      	bne.n	8012658 <_printf_common+0xac>
 8012650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012658:	3501      	adds	r5, #1
 801265a:	e7c6      	b.n	80125ea <_printf_common+0x3e>
 801265c:	18e1      	adds	r1, r4, r3
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	2030      	movs	r0, #48	@ 0x30
 8012662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012666:	4422      	add	r2, r4
 8012668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801266c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012670:	3302      	adds	r3, #2
 8012672:	e7c7      	b.n	8012604 <_printf_common+0x58>
 8012674:	2301      	movs	r3, #1
 8012676:	4622      	mov	r2, r4
 8012678:	4641      	mov	r1, r8
 801267a:	4638      	mov	r0, r7
 801267c:	47c8      	blx	r9
 801267e:	3001      	adds	r0, #1
 8012680:	d0e6      	beq.n	8012650 <_printf_common+0xa4>
 8012682:	3601      	adds	r6, #1
 8012684:	e7d9      	b.n	801263a <_printf_common+0x8e>
	...

08012688 <_printf_i>:
 8012688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801268c:	7e0f      	ldrb	r7, [r1, #24]
 801268e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012690:	2f78      	cmp	r7, #120	@ 0x78
 8012692:	4691      	mov	r9, r2
 8012694:	4680      	mov	r8, r0
 8012696:	460c      	mov	r4, r1
 8012698:	469a      	mov	sl, r3
 801269a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801269e:	d807      	bhi.n	80126b0 <_printf_i+0x28>
 80126a0:	2f62      	cmp	r7, #98	@ 0x62
 80126a2:	d80a      	bhi.n	80126ba <_printf_i+0x32>
 80126a4:	2f00      	cmp	r7, #0
 80126a6:	f000 80d2 	beq.w	801284e <_printf_i+0x1c6>
 80126aa:	2f58      	cmp	r7, #88	@ 0x58
 80126ac:	f000 80b9 	beq.w	8012822 <_printf_i+0x19a>
 80126b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80126b8:	e03a      	b.n	8012730 <_printf_i+0xa8>
 80126ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80126be:	2b15      	cmp	r3, #21
 80126c0:	d8f6      	bhi.n	80126b0 <_printf_i+0x28>
 80126c2:	a101      	add	r1, pc, #4	@ (adr r1, 80126c8 <_printf_i+0x40>)
 80126c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126c8:	08012721 	.word	0x08012721
 80126cc:	08012735 	.word	0x08012735
 80126d0:	080126b1 	.word	0x080126b1
 80126d4:	080126b1 	.word	0x080126b1
 80126d8:	080126b1 	.word	0x080126b1
 80126dc:	080126b1 	.word	0x080126b1
 80126e0:	08012735 	.word	0x08012735
 80126e4:	080126b1 	.word	0x080126b1
 80126e8:	080126b1 	.word	0x080126b1
 80126ec:	080126b1 	.word	0x080126b1
 80126f0:	080126b1 	.word	0x080126b1
 80126f4:	08012835 	.word	0x08012835
 80126f8:	0801275f 	.word	0x0801275f
 80126fc:	080127ef 	.word	0x080127ef
 8012700:	080126b1 	.word	0x080126b1
 8012704:	080126b1 	.word	0x080126b1
 8012708:	08012857 	.word	0x08012857
 801270c:	080126b1 	.word	0x080126b1
 8012710:	0801275f 	.word	0x0801275f
 8012714:	080126b1 	.word	0x080126b1
 8012718:	080126b1 	.word	0x080126b1
 801271c:	080127f7 	.word	0x080127f7
 8012720:	6833      	ldr	r3, [r6, #0]
 8012722:	1d1a      	adds	r2, r3, #4
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	6032      	str	r2, [r6, #0]
 8012728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801272c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012730:	2301      	movs	r3, #1
 8012732:	e09d      	b.n	8012870 <_printf_i+0x1e8>
 8012734:	6833      	ldr	r3, [r6, #0]
 8012736:	6820      	ldr	r0, [r4, #0]
 8012738:	1d19      	adds	r1, r3, #4
 801273a:	6031      	str	r1, [r6, #0]
 801273c:	0606      	lsls	r6, r0, #24
 801273e:	d501      	bpl.n	8012744 <_printf_i+0xbc>
 8012740:	681d      	ldr	r5, [r3, #0]
 8012742:	e003      	b.n	801274c <_printf_i+0xc4>
 8012744:	0645      	lsls	r5, r0, #25
 8012746:	d5fb      	bpl.n	8012740 <_printf_i+0xb8>
 8012748:	f9b3 5000 	ldrsh.w	r5, [r3]
 801274c:	2d00      	cmp	r5, #0
 801274e:	da03      	bge.n	8012758 <_printf_i+0xd0>
 8012750:	232d      	movs	r3, #45	@ 0x2d
 8012752:	426d      	negs	r5, r5
 8012754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012758:	4859      	ldr	r0, [pc, #356]	@ (80128c0 <_printf_i+0x238>)
 801275a:	230a      	movs	r3, #10
 801275c:	e011      	b.n	8012782 <_printf_i+0xfa>
 801275e:	6821      	ldr	r1, [r4, #0]
 8012760:	6833      	ldr	r3, [r6, #0]
 8012762:	0608      	lsls	r0, r1, #24
 8012764:	f853 5b04 	ldr.w	r5, [r3], #4
 8012768:	d402      	bmi.n	8012770 <_printf_i+0xe8>
 801276a:	0649      	lsls	r1, r1, #25
 801276c:	bf48      	it	mi
 801276e:	b2ad      	uxthmi	r5, r5
 8012770:	2f6f      	cmp	r7, #111	@ 0x6f
 8012772:	4853      	ldr	r0, [pc, #332]	@ (80128c0 <_printf_i+0x238>)
 8012774:	6033      	str	r3, [r6, #0]
 8012776:	bf14      	ite	ne
 8012778:	230a      	movne	r3, #10
 801277a:	2308      	moveq	r3, #8
 801277c:	2100      	movs	r1, #0
 801277e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012782:	6866      	ldr	r6, [r4, #4]
 8012784:	60a6      	str	r6, [r4, #8]
 8012786:	2e00      	cmp	r6, #0
 8012788:	bfa2      	ittt	ge
 801278a:	6821      	ldrge	r1, [r4, #0]
 801278c:	f021 0104 	bicge.w	r1, r1, #4
 8012790:	6021      	strge	r1, [r4, #0]
 8012792:	b90d      	cbnz	r5, 8012798 <_printf_i+0x110>
 8012794:	2e00      	cmp	r6, #0
 8012796:	d04b      	beq.n	8012830 <_printf_i+0x1a8>
 8012798:	4616      	mov	r6, r2
 801279a:	fbb5 f1f3 	udiv	r1, r5, r3
 801279e:	fb03 5711 	mls	r7, r3, r1, r5
 80127a2:	5dc7      	ldrb	r7, [r0, r7]
 80127a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127a8:	462f      	mov	r7, r5
 80127aa:	42bb      	cmp	r3, r7
 80127ac:	460d      	mov	r5, r1
 80127ae:	d9f4      	bls.n	801279a <_printf_i+0x112>
 80127b0:	2b08      	cmp	r3, #8
 80127b2:	d10b      	bne.n	80127cc <_printf_i+0x144>
 80127b4:	6823      	ldr	r3, [r4, #0]
 80127b6:	07df      	lsls	r7, r3, #31
 80127b8:	d508      	bpl.n	80127cc <_printf_i+0x144>
 80127ba:	6923      	ldr	r3, [r4, #16]
 80127bc:	6861      	ldr	r1, [r4, #4]
 80127be:	4299      	cmp	r1, r3
 80127c0:	bfde      	ittt	le
 80127c2:	2330      	movle	r3, #48	@ 0x30
 80127c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80127cc:	1b92      	subs	r2, r2, r6
 80127ce:	6122      	str	r2, [r4, #16]
 80127d0:	f8cd a000 	str.w	sl, [sp]
 80127d4:	464b      	mov	r3, r9
 80127d6:	aa03      	add	r2, sp, #12
 80127d8:	4621      	mov	r1, r4
 80127da:	4640      	mov	r0, r8
 80127dc:	f7ff fee6 	bl	80125ac <_printf_common>
 80127e0:	3001      	adds	r0, #1
 80127e2:	d14a      	bne.n	801287a <_printf_i+0x1f2>
 80127e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127e8:	b004      	add	sp, #16
 80127ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	f043 0320 	orr.w	r3, r3, #32
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	4833      	ldr	r0, [pc, #204]	@ (80128c4 <_printf_i+0x23c>)
 80127f8:	2778      	movs	r7, #120	@ 0x78
 80127fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	6831      	ldr	r1, [r6, #0]
 8012802:	061f      	lsls	r7, r3, #24
 8012804:	f851 5b04 	ldr.w	r5, [r1], #4
 8012808:	d402      	bmi.n	8012810 <_printf_i+0x188>
 801280a:	065f      	lsls	r7, r3, #25
 801280c:	bf48      	it	mi
 801280e:	b2ad      	uxthmi	r5, r5
 8012810:	6031      	str	r1, [r6, #0]
 8012812:	07d9      	lsls	r1, r3, #31
 8012814:	bf44      	itt	mi
 8012816:	f043 0320 	orrmi.w	r3, r3, #32
 801281a:	6023      	strmi	r3, [r4, #0]
 801281c:	b11d      	cbz	r5, 8012826 <_printf_i+0x19e>
 801281e:	2310      	movs	r3, #16
 8012820:	e7ac      	b.n	801277c <_printf_i+0xf4>
 8012822:	4827      	ldr	r0, [pc, #156]	@ (80128c0 <_printf_i+0x238>)
 8012824:	e7e9      	b.n	80127fa <_printf_i+0x172>
 8012826:	6823      	ldr	r3, [r4, #0]
 8012828:	f023 0320 	bic.w	r3, r3, #32
 801282c:	6023      	str	r3, [r4, #0]
 801282e:	e7f6      	b.n	801281e <_printf_i+0x196>
 8012830:	4616      	mov	r6, r2
 8012832:	e7bd      	b.n	80127b0 <_printf_i+0x128>
 8012834:	6833      	ldr	r3, [r6, #0]
 8012836:	6825      	ldr	r5, [r4, #0]
 8012838:	6961      	ldr	r1, [r4, #20]
 801283a:	1d18      	adds	r0, r3, #4
 801283c:	6030      	str	r0, [r6, #0]
 801283e:	062e      	lsls	r6, r5, #24
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	d501      	bpl.n	8012848 <_printf_i+0x1c0>
 8012844:	6019      	str	r1, [r3, #0]
 8012846:	e002      	b.n	801284e <_printf_i+0x1c6>
 8012848:	0668      	lsls	r0, r5, #25
 801284a:	d5fb      	bpl.n	8012844 <_printf_i+0x1bc>
 801284c:	8019      	strh	r1, [r3, #0]
 801284e:	2300      	movs	r3, #0
 8012850:	6123      	str	r3, [r4, #16]
 8012852:	4616      	mov	r6, r2
 8012854:	e7bc      	b.n	80127d0 <_printf_i+0x148>
 8012856:	6833      	ldr	r3, [r6, #0]
 8012858:	1d1a      	adds	r2, r3, #4
 801285a:	6032      	str	r2, [r6, #0]
 801285c:	681e      	ldr	r6, [r3, #0]
 801285e:	6862      	ldr	r2, [r4, #4]
 8012860:	2100      	movs	r1, #0
 8012862:	4630      	mov	r0, r6
 8012864:	f7ed fcd4 	bl	8000210 <memchr>
 8012868:	b108      	cbz	r0, 801286e <_printf_i+0x1e6>
 801286a:	1b80      	subs	r0, r0, r6
 801286c:	6060      	str	r0, [r4, #4]
 801286e:	6863      	ldr	r3, [r4, #4]
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	2300      	movs	r3, #0
 8012874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012878:	e7aa      	b.n	80127d0 <_printf_i+0x148>
 801287a:	6923      	ldr	r3, [r4, #16]
 801287c:	4632      	mov	r2, r6
 801287e:	4649      	mov	r1, r9
 8012880:	4640      	mov	r0, r8
 8012882:	47d0      	blx	sl
 8012884:	3001      	adds	r0, #1
 8012886:	d0ad      	beq.n	80127e4 <_printf_i+0x15c>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	079b      	lsls	r3, r3, #30
 801288c:	d413      	bmi.n	80128b6 <_printf_i+0x22e>
 801288e:	68e0      	ldr	r0, [r4, #12]
 8012890:	9b03      	ldr	r3, [sp, #12]
 8012892:	4298      	cmp	r0, r3
 8012894:	bfb8      	it	lt
 8012896:	4618      	movlt	r0, r3
 8012898:	e7a6      	b.n	80127e8 <_printf_i+0x160>
 801289a:	2301      	movs	r3, #1
 801289c:	4632      	mov	r2, r6
 801289e:	4649      	mov	r1, r9
 80128a0:	4640      	mov	r0, r8
 80128a2:	47d0      	blx	sl
 80128a4:	3001      	adds	r0, #1
 80128a6:	d09d      	beq.n	80127e4 <_printf_i+0x15c>
 80128a8:	3501      	adds	r5, #1
 80128aa:	68e3      	ldr	r3, [r4, #12]
 80128ac:	9903      	ldr	r1, [sp, #12]
 80128ae:	1a5b      	subs	r3, r3, r1
 80128b0:	42ab      	cmp	r3, r5
 80128b2:	dcf2      	bgt.n	801289a <_printf_i+0x212>
 80128b4:	e7eb      	b.n	801288e <_printf_i+0x206>
 80128b6:	2500      	movs	r5, #0
 80128b8:	f104 0619 	add.w	r6, r4, #25
 80128bc:	e7f5      	b.n	80128aa <_printf_i+0x222>
 80128be:	bf00      	nop
 80128c0:	08013a0d 	.word	0x08013a0d
 80128c4:	08013a1e 	.word	0x08013a1e

080128c8 <__sflush_r>:
 80128c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d0:	0716      	lsls	r6, r2, #28
 80128d2:	4605      	mov	r5, r0
 80128d4:	460c      	mov	r4, r1
 80128d6:	d454      	bmi.n	8012982 <__sflush_r+0xba>
 80128d8:	684b      	ldr	r3, [r1, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	dc02      	bgt.n	80128e4 <__sflush_r+0x1c>
 80128de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	dd48      	ble.n	8012976 <__sflush_r+0xae>
 80128e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d045      	beq.n	8012976 <__sflush_r+0xae>
 80128ea:	2300      	movs	r3, #0
 80128ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80128f0:	682f      	ldr	r7, [r5, #0]
 80128f2:	6a21      	ldr	r1, [r4, #32]
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	d030      	beq.n	801295a <__sflush_r+0x92>
 80128f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80128fa:	89a3      	ldrh	r3, [r4, #12]
 80128fc:	0759      	lsls	r1, r3, #29
 80128fe:	d505      	bpl.n	801290c <__sflush_r+0x44>
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	1ad2      	subs	r2, r2, r3
 8012904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012906:	b10b      	cbz	r3, 801290c <__sflush_r+0x44>
 8012908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801290a:	1ad2      	subs	r2, r2, r3
 801290c:	2300      	movs	r3, #0
 801290e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012910:	6a21      	ldr	r1, [r4, #32]
 8012912:	4628      	mov	r0, r5
 8012914:	47b0      	blx	r6
 8012916:	1c43      	adds	r3, r0, #1
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	d106      	bne.n	801292a <__sflush_r+0x62>
 801291c:	6829      	ldr	r1, [r5, #0]
 801291e:	291d      	cmp	r1, #29
 8012920:	d82b      	bhi.n	801297a <__sflush_r+0xb2>
 8012922:	4a2a      	ldr	r2, [pc, #168]	@ (80129cc <__sflush_r+0x104>)
 8012924:	410a      	asrs	r2, r1
 8012926:	07d6      	lsls	r6, r2, #31
 8012928:	d427      	bmi.n	801297a <__sflush_r+0xb2>
 801292a:	2200      	movs	r2, #0
 801292c:	6062      	str	r2, [r4, #4]
 801292e:	04d9      	lsls	r1, r3, #19
 8012930:	6922      	ldr	r2, [r4, #16]
 8012932:	6022      	str	r2, [r4, #0]
 8012934:	d504      	bpl.n	8012940 <__sflush_r+0x78>
 8012936:	1c42      	adds	r2, r0, #1
 8012938:	d101      	bne.n	801293e <__sflush_r+0x76>
 801293a:	682b      	ldr	r3, [r5, #0]
 801293c:	b903      	cbnz	r3, 8012940 <__sflush_r+0x78>
 801293e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012942:	602f      	str	r7, [r5, #0]
 8012944:	b1b9      	cbz	r1, 8012976 <__sflush_r+0xae>
 8012946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801294a:	4299      	cmp	r1, r3
 801294c:	d002      	beq.n	8012954 <__sflush_r+0x8c>
 801294e:	4628      	mov	r0, r5
 8012950:	f7ff fc82 	bl	8012258 <_free_r>
 8012954:	2300      	movs	r3, #0
 8012956:	6363      	str	r3, [r4, #52]	@ 0x34
 8012958:	e00d      	b.n	8012976 <__sflush_r+0xae>
 801295a:	2301      	movs	r3, #1
 801295c:	4628      	mov	r0, r5
 801295e:	47b0      	blx	r6
 8012960:	4602      	mov	r2, r0
 8012962:	1c50      	adds	r0, r2, #1
 8012964:	d1c9      	bne.n	80128fa <__sflush_r+0x32>
 8012966:	682b      	ldr	r3, [r5, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d0c6      	beq.n	80128fa <__sflush_r+0x32>
 801296c:	2b1d      	cmp	r3, #29
 801296e:	d001      	beq.n	8012974 <__sflush_r+0xac>
 8012970:	2b16      	cmp	r3, #22
 8012972:	d11e      	bne.n	80129b2 <__sflush_r+0xea>
 8012974:	602f      	str	r7, [r5, #0]
 8012976:	2000      	movs	r0, #0
 8012978:	e022      	b.n	80129c0 <__sflush_r+0xf8>
 801297a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801297e:	b21b      	sxth	r3, r3
 8012980:	e01b      	b.n	80129ba <__sflush_r+0xf2>
 8012982:	690f      	ldr	r7, [r1, #16]
 8012984:	2f00      	cmp	r7, #0
 8012986:	d0f6      	beq.n	8012976 <__sflush_r+0xae>
 8012988:	0793      	lsls	r3, r2, #30
 801298a:	680e      	ldr	r6, [r1, #0]
 801298c:	bf08      	it	eq
 801298e:	694b      	ldreq	r3, [r1, #20]
 8012990:	600f      	str	r7, [r1, #0]
 8012992:	bf18      	it	ne
 8012994:	2300      	movne	r3, #0
 8012996:	eba6 0807 	sub.w	r8, r6, r7
 801299a:	608b      	str	r3, [r1, #8]
 801299c:	f1b8 0f00 	cmp.w	r8, #0
 80129a0:	dde9      	ble.n	8012976 <__sflush_r+0xae>
 80129a2:	6a21      	ldr	r1, [r4, #32]
 80129a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129a6:	4643      	mov	r3, r8
 80129a8:	463a      	mov	r2, r7
 80129aa:	4628      	mov	r0, r5
 80129ac:	47b0      	blx	r6
 80129ae:	2800      	cmp	r0, #0
 80129b0:	dc08      	bgt.n	80129c4 <__sflush_r+0xfc>
 80129b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129ba:	81a3      	strh	r3, [r4, #12]
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c4:	4407      	add	r7, r0
 80129c6:	eba8 0800 	sub.w	r8, r8, r0
 80129ca:	e7e7      	b.n	801299c <__sflush_r+0xd4>
 80129cc:	dfbffffe 	.word	0xdfbffffe

080129d0 <_fflush_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	690b      	ldr	r3, [r1, #16]
 80129d4:	4605      	mov	r5, r0
 80129d6:	460c      	mov	r4, r1
 80129d8:	b913      	cbnz	r3, 80129e0 <_fflush_r+0x10>
 80129da:	2500      	movs	r5, #0
 80129dc:	4628      	mov	r0, r5
 80129de:	bd38      	pop	{r3, r4, r5, pc}
 80129e0:	b118      	cbz	r0, 80129ea <_fflush_r+0x1a>
 80129e2:	6a03      	ldr	r3, [r0, #32]
 80129e4:	b90b      	cbnz	r3, 80129ea <_fflush_r+0x1a>
 80129e6:	f7ff fa4f 	bl	8011e88 <__sinit>
 80129ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d0f3      	beq.n	80129da <_fflush_r+0xa>
 80129f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80129f4:	07d0      	lsls	r0, r2, #31
 80129f6:	d404      	bmi.n	8012a02 <_fflush_r+0x32>
 80129f8:	0599      	lsls	r1, r3, #22
 80129fa:	d402      	bmi.n	8012a02 <_fflush_r+0x32>
 80129fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129fe:	f7ff fbe8 	bl	80121d2 <__retarget_lock_acquire_recursive>
 8012a02:	4628      	mov	r0, r5
 8012a04:	4621      	mov	r1, r4
 8012a06:	f7ff ff5f 	bl	80128c8 <__sflush_r>
 8012a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a0c:	07da      	lsls	r2, r3, #31
 8012a0e:	4605      	mov	r5, r0
 8012a10:	d4e4      	bmi.n	80129dc <_fflush_r+0xc>
 8012a12:	89a3      	ldrh	r3, [r4, #12]
 8012a14:	059b      	lsls	r3, r3, #22
 8012a16:	d4e1      	bmi.n	80129dc <_fflush_r+0xc>
 8012a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a1a:	f7ff fbdb 	bl	80121d4 <__retarget_lock_release_recursive>
 8012a1e:	e7dd      	b.n	80129dc <_fflush_r+0xc>

08012a20 <fiprintf>:
 8012a20:	b40e      	push	{r1, r2, r3}
 8012a22:	b503      	push	{r0, r1, lr}
 8012a24:	4601      	mov	r1, r0
 8012a26:	ab03      	add	r3, sp, #12
 8012a28:	4805      	ldr	r0, [pc, #20]	@ (8012a40 <fiprintf+0x20>)
 8012a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a2e:	6800      	ldr	r0, [r0, #0]
 8012a30:	9301      	str	r3, [sp, #4]
 8012a32:	f000 f851 	bl	8012ad8 <_vfiprintf_r>
 8012a36:	b002      	add	sp, #8
 8012a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a3c:	b003      	add	sp, #12
 8012a3e:	4770      	bx	lr
 8012a40:	2000007c 	.word	0x2000007c

08012a44 <memmove>:
 8012a44:	4288      	cmp	r0, r1
 8012a46:	b510      	push	{r4, lr}
 8012a48:	eb01 0402 	add.w	r4, r1, r2
 8012a4c:	d902      	bls.n	8012a54 <memmove+0x10>
 8012a4e:	4284      	cmp	r4, r0
 8012a50:	4623      	mov	r3, r4
 8012a52:	d807      	bhi.n	8012a64 <memmove+0x20>
 8012a54:	1e43      	subs	r3, r0, #1
 8012a56:	42a1      	cmp	r1, r4
 8012a58:	d008      	beq.n	8012a6c <memmove+0x28>
 8012a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a62:	e7f8      	b.n	8012a56 <memmove+0x12>
 8012a64:	4402      	add	r2, r0
 8012a66:	4601      	mov	r1, r0
 8012a68:	428a      	cmp	r2, r1
 8012a6a:	d100      	bne.n	8012a6e <memmove+0x2a>
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a76:	e7f7      	b.n	8012a68 <memmove+0x24>

08012a78 <abort>:
 8012a78:	b508      	push	{r3, lr}
 8012a7a:	2006      	movs	r0, #6
 8012a7c:	f000 fa00 	bl	8012e80 <raise>
 8012a80:	2001      	movs	r0, #1
 8012a82:	f7ef fcaf 	bl	80023e4 <_exit>

08012a86 <__sfputc_r>:
 8012a86:	6893      	ldr	r3, [r2, #8]
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	b410      	push	{r4}
 8012a8e:	6093      	str	r3, [r2, #8]
 8012a90:	da08      	bge.n	8012aa4 <__sfputc_r+0x1e>
 8012a92:	6994      	ldr	r4, [r2, #24]
 8012a94:	42a3      	cmp	r3, r4
 8012a96:	db01      	blt.n	8012a9c <__sfputc_r+0x16>
 8012a98:	290a      	cmp	r1, #10
 8012a9a:	d103      	bne.n	8012aa4 <__sfputc_r+0x1e>
 8012a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aa0:	f000 b932 	b.w	8012d08 <__swbuf_r>
 8012aa4:	6813      	ldr	r3, [r2, #0]
 8012aa6:	1c58      	adds	r0, r3, #1
 8012aa8:	6010      	str	r0, [r2, #0]
 8012aaa:	7019      	strb	r1, [r3, #0]
 8012aac:	4608      	mov	r0, r1
 8012aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <__sfputs_r>:
 8012ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab6:	4606      	mov	r6, r0
 8012ab8:	460f      	mov	r7, r1
 8012aba:	4614      	mov	r4, r2
 8012abc:	18d5      	adds	r5, r2, r3
 8012abe:	42ac      	cmp	r4, r5
 8012ac0:	d101      	bne.n	8012ac6 <__sfputs_r+0x12>
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	e007      	b.n	8012ad6 <__sfputs_r+0x22>
 8012ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aca:	463a      	mov	r2, r7
 8012acc:	4630      	mov	r0, r6
 8012ace:	f7ff ffda 	bl	8012a86 <__sfputc_r>
 8012ad2:	1c43      	adds	r3, r0, #1
 8012ad4:	d1f3      	bne.n	8012abe <__sfputs_r+0xa>
 8012ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ad8 <_vfiprintf_r>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	460d      	mov	r5, r1
 8012ade:	b09d      	sub	sp, #116	@ 0x74
 8012ae0:	4614      	mov	r4, r2
 8012ae2:	4698      	mov	r8, r3
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	b118      	cbz	r0, 8012af0 <_vfiprintf_r+0x18>
 8012ae8:	6a03      	ldr	r3, [r0, #32]
 8012aea:	b90b      	cbnz	r3, 8012af0 <_vfiprintf_r+0x18>
 8012aec:	f7ff f9cc 	bl	8011e88 <__sinit>
 8012af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012af2:	07d9      	lsls	r1, r3, #31
 8012af4:	d405      	bmi.n	8012b02 <_vfiprintf_r+0x2a>
 8012af6:	89ab      	ldrh	r3, [r5, #12]
 8012af8:	059a      	lsls	r2, r3, #22
 8012afa:	d402      	bmi.n	8012b02 <_vfiprintf_r+0x2a>
 8012afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012afe:	f7ff fb68 	bl	80121d2 <__retarget_lock_acquire_recursive>
 8012b02:	89ab      	ldrh	r3, [r5, #12]
 8012b04:	071b      	lsls	r3, r3, #28
 8012b06:	d501      	bpl.n	8012b0c <_vfiprintf_r+0x34>
 8012b08:	692b      	ldr	r3, [r5, #16]
 8012b0a:	b99b      	cbnz	r3, 8012b34 <_vfiprintf_r+0x5c>
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	4630      	mov	r0, r6
 8012b10:	f000 f938 	bl	8012d84 <__swsetup_r>
 8012b14:	b170      	cbz	r0, 8012b34 <_vfiprintf_r+0x5c>
 8012b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b18:	07dc      	lsls	r4, r3, #31
 8012b1a:	d504      	bpl.n	8012b26 <_vfiprintf_r+0x4e>
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b20:	b01d      	add	sp, #116	@ 0x74
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	89ab      	ldrh	r3, [r5, #12]
 8012b28:	0598      	lsls	r0, r3, #22
 8012b2a:	d4f7      	bmi.n	8012b1c <_vfiprintf_r+0x44>
 8012b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b2e:	f7ff fb51 	bl	80121d4 <__retarget_lock_release_recursive>
 8012b32:	e7f3      	b.n	8012b1c <_vfiprintf_r+0x44>
 8012b34:	2300      	movs	r3, #0
 8012b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b38:	2320      	movs	r3, #32
 8012b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b42:	2330      	movs	r3, #48	@ 0x30
 8012b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012cf4 <_vfiprintf_r+0x21c>
 8012b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b4c:	f04f 0901 	mov.w	r9, #1
 8012b50:	4623      	mov	r3, r4
 8012b52:	469a      	mov	sl, r3
 8012b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b58:	b10a      	cbz	r2, 8012b5e <_vfiprintf_r+0x86>
 8012b5a:	2a25      	cmp	r2, #37	@ 0x25
 8012b5c:	d1f9      	bne.n	8012b52 <_vfiprintf_r+0x7a>
 8012b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8012b62:	d00b      	beq.n	8012b7c <_vfiprintf_r+0xa4>
 8012b64:	465b      	mov	r3, fp
 8012b66:	4622      	mov	r2, r4
 8012b68:	4629      	mov	r1, r5
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f7ff ffa2 	bl	8012ab4 <__sfputs_r>
 8012b70:	3001      	adds	r0, #1
 8012b72:	f000 80a7 	beq.w	8012cc4 <_vfiprintf_r+0x1ec>
 8012b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b78:	445a      	add	r2, fp
 8012b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	f000 809f 	beq.w	8012cc4 <_vfiprintf_r+0x1ec>
 8012b86:	2300      	movs	r3, #0
 8012b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b90:	f10a 0a01 	add.w	sl, sl, #1
 8012b94:	9304      	str	r3, [sp, #16]
 8012b96:	9307      	str	r3, [sp, #28]
 8012b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b9e:	4654      	mov	r4, sl
 8012ba0:	2205      	movs	r2, #5
 8012ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ba6:	4853      	ldr	r0, [pc, #332]	@ (8012cf4 <_vfiprintf_r+0x21c>)
 8012ba8:	f7ed fb32 	bl	8000210 <memchr>
 8012bac:	9a04      	ldr	r2, [sp, #16]
 8012bae:	b9d8      	cbnz	r0, 8012be8 <_vfiprintf_r+0x110>
 8012bb0:	06d1      	lsls	r1, r2, #27
 8012bb2:	bf44      	itt	mi
 8012bb4:	2320      	movmi	r3, #32
 8012bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bba:	0713      	lsls	r3, r2, #28
 8012bbc:	bf44      	itt	mi
 8012bbe:	232b      	movmi	r3, #43	@ 0x2b
 8012bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8012bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bca:	d015      	beq.n	8012bf8 <_vfiprintf_r+0x120>
 8012bcc:	9a07      	ldr	r2, [sp, #28]
 8012bce:	4654      	mov	r4, sl
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	f04f 0c0a 	mov.w	ip, #10
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bdc:	3b30      	subs	r3, #48	@ 0x30
 8012bde:	2b09      	cmp	r3, #9
 8012be0:	d94b      	bls.n	8012c7a <_vfiprintf_r+0x1a2>
 8012be2:	b1b0      	cbz	r0, 8012c12 <_vfiprintf_r+0x13a>
 8012be4:	9207      	str	r2, [sp, #28]
 8012be6:	e014      	b.n	8012c12 <_vfiprintf_r+0x13a>
 8012be8:	eba0 0308 	sub.w	r3, r0, r8
 8012bec:	fa09 f303 	lsl.w	r3, r9, r3
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	9304      	str	r3, [sp, #16]
 8012bf4:	46a2      	mov	sl, r4
 8012bf6:	e7d2      	b.n	8012b9e <_vfiprintf_r+0xc6>
 8012bf8:	9b03      	ldr	r3, [sp, #12]
 8012bfa:	1d19      	adds	r1, r3, #4
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	9103      	str	r1, [sp, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	bfbb      	ittet	lt
 8012c04:	425b      	neglt	r3, r3
 8012c06:	f042 0202 	orrlt.w	r2, r2, #2
 8012c0a:	9307      	strge	r3, [sp, #28]
 8012c0c:	9307      	strlt	r3, [sp, #28]
 8012c0e:	bfb8      	it	lt
 8012c10:	9204      	strlt	r2, [sp, #16]
 8012c12:	7823      	ldrb	r3, [r4, #0]
 8012c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c16:	d10a      	bne.n	8012c2e <_vfiprintf_r+0x156>
 8012c18:	7863      	ldrb	r3, [r4, #1]
 8012c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c1c:	d132      	bne.n	8012c84 <_vfiprintf_r+0x1ac>
 8012c1e:	9b03      	ldr	r3, [sp, #12]
 8012c20:	1d1a      	adds	r2, r3, #4
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	9203      	str	r2, [sp, #12]
 8012c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c2a:	3402      	adds	r4, #2
 8012c2c:	9305      	str	r3, [sp, #20]
 8012c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d04 <_vfiprintf_r+0x22c>
 8012c32:	7821      	ldrb	r1, [r4, #0]
 8012c34:	2203      	movs	r2, #3
 8012c36:	4650      	mov	r0, sl
 8012c38:	f7ed faea 	bl	8000210 <memchr>
 8012c3c:	b138      	cbz	r0, 8012c4e <_vfiprintf_r+0x176>
 8012c3e:	9b04      	ldr	r3, [sp, #16]
 8012c40:	eba0 000a 	sub.w	r0, r0, sl
 8012c44:	2240      	movs	r2, #64	@ 0x40
 8012c46:	4082      	lsls	r2, r0
 8012c48:	4313      	orrs	r3, r2
 8012c4a:	3401      	adds	r4, #1
 8012c4c:	9304      	str	r3, [sp, #16]
 8012c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c52:	4829      	ldr	r0, [pc, #164]	@ (8012cf8 <_vfiprintf_r+0x220>)
 8012c54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c58:	2206      	movs	r2, #6
 8012c5a:	f7ed fad9 	bl	8000210 <memchr>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d03f      	beq.n	8012ce2 <_vfiprintf_r+0x20a>
 8012c62:	4b26      	ldr	r3, [pc, #152]	@ (8012cfc <_vfiprintf_r+0x224>)
 8012c64:	bb1b      	cbnz	r3, 8012cae <_vfiprintf_r+0x1d6>
 8012c66:	9b03      	ldr	r3, [sp, #12]
 8012c68:	3307      	adds	r3, #7
 8012c6a:	f023 0307 	bic.w	r3, r3, #7
 8012c6e:	3308      	adds	r3, #8
 8012c70:	9303      	str	r3, [sp, #12]
 8012c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c74:	443b      	add	r3, r7
 8012c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c78:	e76a      	b.n	8012b50 <_vfiprintf_r+0x78>
 8012c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c7e:	460c      	mov	r4, r1
 8012c80:	2001      	movs	r0, #1
 8012c82:	e7a8      	b.n	8012bd6 <_vfiprintf_r+0xfe>
 8012c84:	2300      	movs	r3, #0
 8012c86:	3401      	adds	r4, #1
 8012c88:	9305      	str	r3, [sp, #20]
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	f04f 0c0a 	mov.w	ip, #10
 8012c90:	4620      	mov	r0, r4
 8012c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c96:	3a30      	subs	r2, #48	@ 0x30
 8012c98:	2a09      	cmp	r2, #9
 8012c9a:	d903      	bls.n	8012ca4 <_vfiprintf_r+0x1cc>
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d0c6      	beq.n	8012c2e <_vfiprintf_r+0x156>
 8012ca0:	9105      	str	r1, [sp, #20]
 8012ca2:	e7c4      	b.n	8012c2e <_vfiprintf_r+0x156>
 8012ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ca8:	4604      	mov	r4, r0
 8012caa:	2301      	movs	r3, #1
 8012cac:	e7f0      	b.n	8012c90 <_vfiprintf_r+0x1b8>
 8012cae:	ab03      	add	r3, sp, #12
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	462a      	mov	r2, r5
 8012cb4:	4b12      	ldr	r3, [pc, #72]	@ (8012d00 <_vfiprintf_r+0x228>)
 8012cb6:	a904      	add	r1, sp, #16
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f3af 8000 	nop.w
 8012cbe:	4607      	mov	r7, r0
 8012cc0:	1c78      	adds	r0, r7, #1
 8012cc2:	d1d6      	bne.n	8012c72 <_vfiprintf_r+0x19a>
 8012cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cc6:	07d9      	lsls	r1, r3, #31
 8012cc8:	d405      	bmi.n	8012cd6 <_vfiprintf_r+0x1fe>
 8012cca:	89ab      	ldrh	r3, [r5, #12]
 8012ccc:	059a      	lsls	r2, r3, #22
 8012cce:	d402      	bmi.n	8012cd6 <_vfiprintf_r+0x1fe>
 8012cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cd2:	f7ff fa7f 	bl	80121d4 <__retarget_lock_release_recursive>
 8012cd6:	89ab      	ldrh	r3, [r5, #12]
 8012cd8:	065b      	lsls	r3, r3, #25
 8012cda:	f53f af1f 	bmi.w	8012b1c <_vfiprintf_r+0x44>
 8012cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ce0:	e71e      	b.n	8012b20 <_vfiprintf_r+0x48>
 8012ce2:	ab03      	add	r3, sp, #12
 8012ce4:	9300      	str	r3, [sp, #0]
 8012ce6:	462a      	mov	r2, r5
 8012ce8:	4b05      	ldr	r3, [pc, #20]	@ (8012d00 <_vfiprintf_r+0x228>)
 8012cea:	a904      	add	r1, sp, #16
 8012cec:	4630      	mov	r0, r6
 8012cee:	f7ff fccb 	bl	8012688 <_printf_i>
 8012cf2:	e7e4      	b.n	8012cbe <_vfiprintf_r+0x1e6>
 8012cf4:	080139fc 	.word	0x080139fc
 8012cf8:	08013a06 	.word	0x08013a06
 8012cfc:	00000000 	.word	0x00000000
 8012d00:	08012ab5 	.word	0x08012ab5
 8012d04:	08013a02 	.word	0x08013a02

08012d08 <__swbuf_r>:
 8012d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0a:	460e      	mov	r6, r1
 8012d0c:	4614      	mov	r4, r2
 8012d0e:	4605      	mov	r5, r0
 8012d10:	b118      	cbz	r0, 8012d1a <__swbuf_r+0x12>
 8012d12:	6a03      	ldr	r3, [r0, #32]
 8012d14:	b90b      	cbnz	r3, 8012d1a <__swbuf_r+0x12>
 8012d16:	f7ff f8b7 	bl	8011e88 <__sinit>
 8012d1a:	69a3      	ldr	r3, [r4, #24]
 8012d1c:	60a3      	str	r3, [r4, #8]
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	071a      	lsls	r2, r3, #28
 8012d22:	d501      	bpl.n	8012d28 <__swbuf_r+0x20>
 8012d24:	6923      	ldr	r3, [r4, #16]
 8012d26:	b943      	cbnz	r3, 8012d3a <__swbuf_r+0x32>
 8012d28:	4621      	mov	r1, r4
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	f000 f82a 	bl	8012d84 <__swsetup_r>
 8012d30:	b118      	cbz	r0, 8012d3a <__swbuf_r+0x32>
 8012d32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012d36:	4638      	mov	r0, r7
 8012d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3a:	6823      	ldr	r3, [r4, #0]
 8012d3c:	6922      	ldr	r2, [r4, #16]
 8012d3e:	1a98      	subs	r0, r3, r2
 8012d40:	6963      	ldr	r3, [r4, #20]
 8012d42:	b2f6      	uxtb	r6, r6
 8012d44:	4283      	cmp	r3, r0
 8012d46:	4637      	mov	r7, r6
 8012d48:	dc05      	bgt.n	8012d56 <__swbuf_r+0x4e>
 8012d4a:	4621      	mov	r1, r4
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f7ff fe3f 	bl	80129d0 <_fflush_r>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1ed      	bne.n	8012d32 <__swbuf_r+0x2a>
 8012d56:	68a3      	ldr	r3, [r4, #8]
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	60a3      	str	r3, [r4, #8]
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	1c5a      	adds	r2, r3, #1
 8012d60:	6022      	str	r2, [r4, #0]
 8012d62:	701e      	strb	r6, [r3, #0]
 8012d64:	6962      	ldr	r2, [r4, #20]
 8012d66:	1c43      	adds	r3, r0, #1
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d004      	beq.n	8012d76 <__swbuf_r+0x6e>
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	07db      	lsls	r3, r3, #31
 8012d70:	d5e1      	bpl.n	8012d36 <__swbuf_r+0x2e>
 8012d72:	2e0a      	cmp	r6, #10
 8012d74:	d1df      	bne.n	8012d36 <__swbuf_r+0x2e>
 8012d76:	4621      	mov	r1, r4
 8012d78:	4628      	mov	r0, r5
 8012d7a:	f7ff fe29 	bl	80129d0 <_fflush_r>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d0d9      	beq.n	8012d36 <__swbuf_r+0x2e>
 8012d82:	e7d6      	b.n	8012d32 <__swbuf_r+0x2a>

08012d84 <__swsetup_r>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4b29      	ldr	r3, [pc, #164]	@ (8012e2c <__swsetup_r+0xa8>)
 8012d88:	4605      	mov	r5, r0
 8012d8a:	6818      	ldr	r0, [r3, #0]
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	b118      	cbz	r0, 8012d98 <__swsetup_r+0x14>
 8012d90:	6a03      	ldr	r3, [r0, #32]
 8012d92:	b90b      	cbnz	r3, 8012d98 <__swsetup_r+0x14>
 8012d94:	f7ff f878 	bl	8011e88 <__sinit>
 8012d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9c:	0719      	lsls	r1, r3, #28
 8012d9e:	d422      	bmi.n	8012de6 <__swsetup_r+0x62>
 8012da0:	06da      	lsls	r2, r3, #27
 8012da2:	d407      	bmi.n	8012db4 <__swsetup_r+0x30>
 8012da4:	2209      	movs	r2, #9
 8012da6:	602a      	str	r2, [r5, #0]
 8012da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dac:	81a3      	strh	r3, [r4, #12]
 8012dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012db2:	e033      	b.n	8012e1c <__swsetup_r+0x98>
 8012db4:	0758      	lsls	r0, r3, #29
 8012db6:	d512      	bpl.n	8012dde <__swsetup_r+0x5a>
 8012db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012dba:	b141      	cbz	r1, 8012dce <__swsetup_r+0x4a>
 8012dbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012dc0:	4299      	cmp	r1, r3
 8012dc2:	d002      	beq.n	8012dca <__swsetup_r+0x46>
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	f7ff fa47 	bl	8012258 <_free_r>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012dce:	89a3      	ldrh	r3, [r4, #12]
 8012dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012dd4:	81a3      	strh	r3, [r4, #12]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	6063      	str	r3, [r4, #4]
 8012dda:	6923      	ldr	r3, [r4, #16]
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	89a3      	ldrh	r3, [r4, #12]
 8012de0:	f043 0308 	orr.w	r3, r3, #8
 8012de4:	81a3      	strh	r3, [r4, #12]
 8012de6:	6923      	ldr	r3, [r4, #16]
 8012de8:	b94b      	cbnz	r3, 8012dfe <__swsetup_r+0x7a>
 8012dea:	89a3      	ldrh	r3, [r4, #12]
 8012dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012df4:	d003      	beq.n	8012dfe <__swsetup_r+0x7a>
 8012df6:	4621      	mov	r1, r4
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f000 f883 	bl	8012f04 <__smakebuf_r>
 8012dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e02:	f013 0201 	ands.w	r2, r3, #1
 8012e06:	d00a      	beq.n	8012e1e <__swsetup_r+0x9a>
 8012e08:	2200      	movs	r2, #0
 8012e0a:	60a2      	str	r2, [r4, #8]
 8012e0c:	6962      	ldr	r2, [r4, #20]
 8012e0e:	4252      	negs	r2, r2
 8012e10:	61a2      	str	r2, [r4, #24]
 8012e12:	6922      	ldr	r2, [r4, #16]
 8012e14:	b942      	cbnz	r2, 8012e28 <__swsetup_r+0xa4>
 8012e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012e1a:	d1c5      	bne.n	8012da8 <__swsetup_r+0x24>
 8012e1c:	bd38      	pop	{r3, r4, r5, pc}
 8012e1e:	0799      	lsls	r1, r3, #30
 8012e20:	bf58      	it	pl
 8012e22:	6962      	ldrpl	r2, [r4, #20]
 8012e24:	60a2      	str	r2, [r4, #8]
 8012e26:	e7f4      	b.n	8012e12 <__swsetup_r+0x8e>
 8012e28:	2000      	movs	r0, #0
 8012e2a:	e7f7      	b.n	8012e1c <__swsetup_r+0x98>
 8012e2c:	2000007c 	.word	0x2000007c

08012e30 <_raise_r>:
 8012e30:	291f      	cmp	r1, #31
 8012e32:	b538      	push	{r3, r4, r5, lr}
 8012e34:	4605      	mov	r5, r0
 8012e36:	460c      	mov	r4, r1
 8012e38:	d904      	bls.n	8012e44 <_raise_r+0x14>
 8012e3a:	2316      	movs	r3, #22
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e42:	bd38      	pop	{r3, r4, r5, pc}
 8012e44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012e46:	b112      	cbz	r2, 8012e4e <_raise_r+0x1e>
 8012e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e4c:	b94b      	cbnz	r3, 8012e62 <_raise_r+0x32>
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f000 f830 	bl	8012eb4 <_getpid_r>
 8012e54:	4622      	mov	r2, r4
 8012e56:	4601      	mov	r1, r0
 8012e58:	4628      	mov	r0, r5
 8012e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e5e:	f000 b817 	b.w	8012e90 <_kill_r>
 8012e62:	2b01      	cmp	r3, #1
 8012e64:	d00a      	beq.n	8012e7c <_raise_r+0x4c>
 8012e66:	1c59      	adds	r1, r3, #1
 8012e68:	d103      	bne.n	8012e72 <_raise_r+0x42>
 8012e6a:	2316      	movs	r3, #22
 8012e6c:	6003      	str	r3, [r0, #0]
 8012e6e:	2001      	movs	r0, #1
 8012e70:	e7e7      	b.n	8012e42 <_raise_r+0x12>
 8012e72:	2100      	movs	r1, #0
 8012e74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e78:	4620      	mov	r0, r4
 8012e7a:	4798      	blx	r3
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	e7e0      	b.n	8012e42 <_raise_r+0x12>

08012e80 <raise>:
 8012e80:	4b02      	ldr	r3, [pc, #8]	@ (8012e8c <raise+0xc>)
 8012e82:	4601      	mov	r1, r0
 8012e84:	6818      	ldr	r0, [r3, #0]
 8012e86:	f7ff bfd3 	b.w	8012e30 <_raise_r>
 8012e8a:	bf00      	nop
 8012e8c:	2000007c 	.word	0x2000007c

08012e90 <_kill_r>:
 8012e90:	b538      	push	{r3, r4, r5, lr}
 8012e92:	4d07      	ldr	r5, [pc, #28]	@ (8012eb0 <_kill_r+0x20>)
 8012e94:	2300      	movs	r3, #0
 8012e96:	4604      	mov	r4, r0
 8012e98:	4608      	mov	r0, r1
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	602b      	str	r3, [r5, #0]
 8012e9e:	f7ef fa91 	bl	80023c4 <_kill>
 8012ea2:	1c43      	adds	r3, r0, #1
 8012ea4:	d102      	bne.n	8012eac <_kill_r+0x1c>
 8012ea6:	682b      	ldr	r3, [r5, #0]
 8012ea8:	b103      	cbz	r3, 8012eac <_kill_r+0x1c>
 8012eaa:	6023      	str	r3, [r4, #0]
 8012eac:	bd38      	pop	{r3, r4, r5, pc}
 8012eae:	bf00      	nop
 8012eb0:	2000943c 	.word	0x2000943c

08012eb4 <_getpid_r>:
 8012eb4:	f7ef ba7e 	b.w	80023b4 <_getpid>

08012eb8 <__swhatbuf_r>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	460c      	mov	r4, r1
 8012ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec0:	2900      	cmp	r1, #0
 8012ec2:	b096      	sub	sp, #88	@ 0x58
 8012ec4:	4615      	mov	r5, r2
 8012ec6:	461e      	mov	r6, r3
 8012ec8:	da0d      	bge.n	8012ee6 <__swhatbuf_r+0x2e>
 8012eca:	89a3      	ldrh	r3, [r4, #12]
 8012ecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ed0:	f04f 0100 	mov.w	r1, #0
 8012ed4:	bf14      	ite	ne
 8012ed6:	2340      	movne	r3, #64	@ 0x40
 8012ed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012edc:	2000      	movs	r0, #0
 8012ede:	6031      	str	r1, [r6, #0]
 8012ee0:	602b      	str	r3, [r5, #0]
 8012ee2:	b016      	add	sp, #88	@ 0x58
 8012ee4:	bd70      	pop	{r4, r5, r6, pc}
 8012ee6:	466a      	mov	r2, sp
 8012ee8:	f000 f848 	bl	8012f7c <_fstat_r>
 8012eec:	2800      	cmp	r0, #0
 8012eee:	dbec      	blt.n	8012eca <__swhatbuf_r+0x12>
 8012ef0:	9901      	ldr	r1, [sp, #4]
 8012ef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012ef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012efa:	4259      	negs	r1, r3
 8012efc:	4159      	adcs	r1, r3
 8012efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f02:	e7eb      	b.n	8012edc <__swhatbuf_r+0x24>

08012f04 <__smakebuf_r>:
 8012f04:	898b      	ldrh	r3, [r1, #12]
 8012f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f08:	079d      	lsls	r5, r3, #30
 8012f0a:	4606      	mov	r6, r0
 8012f0c:	460c      	mov	r4, r1
 8012f0e:	d507      	bpl.n	8012f20 <__smakebuf_r+0x1c>
 8012f10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012f14:	6023      	str	r3, [r4, #0]
 8012f16:	6123      	str	r3, [r4, #16]
 8012f18:	2301      	movs	r3, #1
 8012f1a:	6163      	str	r3, [r4, #20]
 8012f1c:	b003      	add	sp, #12
 8012f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f20:	ab01      	add	r3, sp, #4
 8012f22:	466a      	mov	r2, sp
 8012f24:	f7ff ffc8 	bl	8012eb8 <__swhatbuf_r>
 8012f28:	9f00      	ldr	r7, [sp, #0]
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7fe fd78 	bl	8011a24 <_malloc_r>
 8012f34:	b948      	cbnz	r0, 8012f4a <__smakebuf_r+0x46>
 8012f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f3a:	059a      	lsls	r2, r3, #22
 8012f3c:	d4ee      	bmi.n	8012f1c <__smakebuf_r+0x18>
 8012f3e:	f023 0303 	bic.w	r3, r3, #3
 8012f42:	f043 0302 	orr.w	r3, r3, #2
 8012f46:	81a3      	strh	r3, [r4, #12]
 8012f48:	e7e2      	b.n	8012f10 <__smakebuf_r+0xc>
 8012f4a:	89a3      	ldrh	r3, [r4, #12]
 8012f4c:	6020      	str	r0, [r4, #0]
 8012f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f52:	81a3      	strh	r3, [r4, #12]
 8012f54:	9b01      	ldr	r3, [sp, #4]
 8012f56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012f5a:	b15b      	cbz	r3, 8012f74 <__smakebuf_r+0x70>
 8012f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f60:	4630      	mov	r0, r6
 8012f62:	f000 f81d 	bl	8012fa0 <_isatty_r>
 8012f66:	b128      	cbz	r0, 8012f74 <__smakebuf_r+0x70>
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	f023 0303 	bic.w	r3, r3, #3
 8012f6e:	f043 0301 	orr.w	r3, r3, #1
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	89a3      	ldrh	r3, [r4, #12]
 8012f76:	431d      	orrs	r5, r3
 8012f78:	81a5      	strh	r5, [r4, #12]
 8012f7a:	e7cf      	b.n	8012f1c <__smakebuf_r+0x18>

08012f7c <_fstat_r>:
 8012f7c:	b538      	push	{r3, r4, r5, lr}
 8012f7e:	4d07      	ldr	r5, [pc, #28]	@ (8012f9c <_fstat_r+0x20>)
 8012f80:	2300      	movs	r3, #0
 8012f82:	4604      	mov	r4, r0
 8012f84:	4608      	mov	r0, r1
 8012f86:	4611      	mov	r1, r2
 8012f88:	602b      	str	r3, [r5, #0]
 8012f8a:	f7ef fa7b 	bl	8002484 <_fstat>
 8012f8e:	1c43      	adds	r3, r0, #1
 8012f90:	d102      	bne.n	8012f98 <_fstat_r+0x1c>
 8012f92:	682b      	ldr	r3, [r5, #0]
 8012f94:	b103      	cbz	r3, 8012f98 <_fstat_r+0x1c>
 8012f96:	6023      	str	r3, [r4, #0]
 8012f98:	bd38      	pop	{r3, r4, r5, pc}
 8012f9a:	bf00      	nop
 8012f9c:	2000943c 	.word	0x2000943c

08012fa0 <_isatty_r>:
 8012fa0:	b538      	push	{r3, r4, r5, lr}
 8012fa2:	4d06      	ldr	r5, [pc, #24]	@ (8012fbc <_isatty_r+0x1c>)
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	4608      	mov	r0, r1
 8012faa:	602b      	str	r3, [r5, #0]
 8012fac:	f7ef fa7a 	bl	80024a4 <_isatty>
 8012fb0:	1c43      	adds	r3, r0, #1
 8012fb2:	d102      	bne.n	8012fba <_isatty_r+0x1a>
 8012fb4:	682b      	ldr	r3, [r5, #0]
 8012fb6:	b103      	cbz	r3, 8012fba <_isatty_r+0x1a>
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	bd38      	pop	{r3, r4, r5, pc}
 8012fbc:	2000943c 	.word	0x2000943c

08012fc0 <_init>:
 8012fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc2:	bf00      	nop
 8012fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fc6:	bc08      	pop	{r3}
 8012fc8:	469e      	mov	lr, r3
 8012fca:	4770      	bx	lr

08012fcc <_fini>:
 8012fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fce:	bf00      	nop
 8012fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fd2:	bc08      	pop	{r3}
 8012fd4:	469e      	mov	lr, r3
 8012fd6:	4770      	bx	lr
