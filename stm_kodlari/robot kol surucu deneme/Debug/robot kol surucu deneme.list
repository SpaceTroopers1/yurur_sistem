
robot kol surucu deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e8  080046e8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ec  080046ec  000056ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  080046fc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080046fc  00006208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a13  00000000  00000000  000125f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00014008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000957  00000000  00000000  00014be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001625b  00000000  00000000  00015537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c951  00000000  00000000  0002b792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5bc  00000000  00000000  000380e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c669f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000c66e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c99fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046b0 	.word	0x080046b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080046b0 	.word	0x080046b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80005a4:	f000 b96a 	b.w	800087c <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	460c      	mov	r4, r1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d14e      	bne.n	800066a <__udivmoddi4+0xaa>
 80005cc:	4694      	mov	ip, r2
 80005ce:	458c      	cmp	ip, r1
 80005d0:	4686      	mov	lr, r0
 80005d2:	fab2 f282 	clz	r2, r2
 80005d6:	d962      	bls.n	800069e <__udivmoddi4+0xde>
 80005d8:	b14a      	cbz	r2, 80005ee <__udivmoddi4+0x2e>
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	4091      	lsls	r1, r2
 80005e0:	fa20 f303 	lsr.w	r3, r0, r3
 80005e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e8:	4319      	orrs	r1, r3
 80005ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80005ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f2:	fa1f f68c 	uxth.w	r6, ip
 80005f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000606:	fb04 f106 	mul.w	r1, r4, r6
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000616:	f080 8112 	bcs.w	800083e <__udivmoddi4+0x27e>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 810f 	bls.w	800083e <__udivmoddi4+0x27e>
 8000620:	3c02      	subs	r4, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a59      	subs	r1, r3, r1
 8000626:	fa1f f38e 	uxth.w	r3, lr
 800062a:	fbb1 f0f7 	udiv	r0, r1, r7
 800062e:	fb07 1110 	mls	r1, r7, r0, r1
 8000632:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000636:	fb00 f606 	mul.w	r6, r0, r6
 800063a:	429e      	cmp	r6, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x94>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000646:	f080 80fc 	bcs.w	8000842 <__udivmoddi4+0x282>
 800064a:	429e      	cmp	r6, r3
 800064c:	f240 80f9 	bls.w	8000842 <__udivmoddi4+0x282>
 8000650:	4463      	add	r3, ip
 8000652:	3802      	subs	r0, #2
 8000654:	1b9b      	subs	r3, r3, r6
 8000656:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800065a:	2100      	movs	r1, #0
 800065c:	b11d      	cbz	r5, 8000666 <__udivmoddi4+0xa6>
 800065e:	40d3      	lsrs	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	e9c5 3200 	strd	r3, r2, [r5]
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d905      	bls.n	800067a <__udivmoddi4+0xba>
 800066e:	b10d      	cbz	r5, 8000674 <__udivmoddi4+0xb4>
 8000670:	e9c5 0100 	strd	r0, r1, [r5]
 8000674:	2100      	movs	r1, #0
 8000676:	4608      	mov	r0, r1
 8000678:	e7f5      	b.n	8000666 <__udivmoddi4+0xa6>
 800067a:	fab3 f183 	clz	r1, r3
 800067e:	2900      	cmp	r1, #0
 8000680:	d146      	bne.n	8000710 <__udivmoddi4+0x150>
 8000682:	42a3      	cmp	r3, r4
 8000684:	d302      	bcc.n	800068c <__udivmoddi4+0xcc>
 8000686:	4290      	cmp	r0, r2
 8000688:	f0c0 80f0 	bcc.w	800086c <__udivmoddi4+0x2ac>
 800068c:	1a86      	subs	r6, r0, r2
 800068e:	eb64 0303 	sbc.w	r3, r4, r3
 8000692:	2001      	movs	r0, #1
 8000694:	2d00      	cmp	r5, #0
 8000696:	d0e6      	beq.n	8000666 <__udivmoddi4+0xa6>
 8000698:	e9c5 6300 	strd	r6, r3, [r5]
 800069c:	e7e3      	b.n	8000666 <__udivmoddi4+0xa6>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	f040 8090 	bne.w	80007c4 <__udivmoddi4+0x204>
 80006a4:	eba1 040c 	sub.w	r4, r1, ip
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	fa1f f78c 	uxth.w	r7, ip
 80006b0:	2101      	movs	r1, #1
 80006b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006ba:	fb08 4416 	mls	r4, r8, r6, r4
 80006be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006c2:	fb07 f006 	mul.w	r0, r7, r6
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0x11c>
 80006ca:	eb1c 0303 	adds.w	r3, ip, r3
 80006ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80006d2:	d202      	bcs.n	80006da <__udivmoddi4+0x11a>
 80006d4:	4298      	cmp	r0, r3
 80006d6:	f200 80cd 	bhi.w	8000874 <__udivmoddi4+0x2b4>
 80006da:	4626      	mov	r6, r4
 80006dc:	1a1c      	subs	r4, r3, r0
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006e6:	fb08 4410 	mls	r4, r8, r0, r4
 80006ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006ee:	fb00 f707 	mul.w	r7, r0, r7
 80006f2:	429f      	cmp	r7, r3
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x148>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x146>
 8000700:	429f      	cmp	r7, r3
 8000702:	f200 80b0 	bhi.w	8000866 <__udivmoddi4+0x2a6>
 8000706:	4620      	mov	r0, r4
 8000708:	1bdb      	subs	r3, r3, r7
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	e7a5      	b.n	800065c <__udivmoddi4+0x9c>
 8000710:	f1c1 0620 	rsb	r6, r1, #32
 8000714:	408b      	lsls	r3, r1
 8000716:	fa22 f706 	lsr.w	r7, r2, r6
 800071a:	431f      	orrs	r7, r3
 800071c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000720:	fa04 f301 	lsl.w	r3, r4, r1
 8000724:	ea43 030c 	orr.w	r3, r3, ip
 8000728:	40f4      	lsrs	r4, r6
 800072a:	fa00 f801 	lsl.w	r8, r0, r1
 800072e:	0c38      	lsrs	r0, r7, #16
 8000730:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000734:	fbb4 fef0 	udiv	lr, r4, r0
 8000738:	fa1f fc87 	uxth.w	ip, r7
 800073c:	fb00 441e 	mls	r4, r0, lr, r4
 8000740:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000744:	fb0e f90c 	mul.w	r9, lr, ip
 8000748:	45a1      	cmp	r9, r4
 800074a:	fa02 f201 	lsl.w	r2, r2, r1
 800074e:	d90a      	bls.n	8000766 <__udivmoddi4+0x1a6>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000756:	f080 8084 	bcs.w	8000862 <__udivmoddi4+0x2a2>
 800075a:	45a1      	cmp	r9, r4
 800075c:	f240 8081 	bls.w	8000862 <__udivmoddi4+0x2a2>
 8000760:	f1ae 0e02 	sub.w	lr, lr, #2
 8000764:	443c      	add	r4, r7
 8000766:	eba4 0409 	sub.w	r4, r4, r9
 800076a:	fa1f f983 	uxth.w	r9, r3
 800076e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000772:	fb00 4413 	mls	r4, r0, r3, r4
 8000776:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800077a:	fb03 fc0c 	mul.w	ip, r3, ip
 800077e:	45a4      	cmp	ip, r4
 8000780:	d907      	bls.n	8000792 <__udivmoddi4+0x1d2>
 8000782:	193c      	adds	r4, r7, r4
 8000784:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000788:	d267      	bcs.n	800085a <__udivmoddi4+0x29a>
 800078a:	45a4      	cmp	ip, r4
 800078c:	d965      	bls.n	800085a <__udivmoddi4+0x29a>
 800078e:	3b02      	subs	r3, #2
 8000790:	443c      	add	r4, r7
 8000792:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000796:	fba0 9302 	umull	r9, r3, r0, r2
 800079a:	eba4 040c 	sub.w	r4, r4, ip
 800079e:	429c      	cmp	r4, r3
 80007a0:	46ce      	mov	lr, r9
 80007a2:	469c      	mov	ip, r3
 80007a4:	d351      	bcc.n	800084a <__udivmoddi4+0x28a>
 80007a6:	d04e      	beq.n	8000846 <__udivmoddi4+0x286>
 80007a8:	b155      	cbz	r5, 80007c0 <__udivmoddi4+0x200>
 80007aa:	ebb8 030e 	subs.w	r3, r8, lr
 80007ae:	eb64 040c 	sbc.w	r4, r4, ip
 80007b2:	fa04 f606 	lsl.w	r6, r4, r6
 80007b6:	40cb      	lsrs	r3, r1
 80007b8:	431e      	orrs	r6, r3
 80007ba:	40cc      	lsrs	r4, r1
 80007bc:	e9c5 6400 	strd	r6, r4, [r5]
 80007c0:	2100      	movs	r1, #0
 80007c2:	e750      	b.n	8000666 <__udivmoddi4+0xa6>
 80007c4:	f1c2 0320 	rsb	r3, r2, #32
 80007c8:	fa20 f103 	lsr.w	r1, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	fa24 f303 	lsr.w	r3, r4, r3
 80007d4:	4094      	lsls	r4, r2
 80007d6:	430c      	orrs	r4, r1
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e0:	fa1f f78c 	uxth.w	r7, ip
 80007e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e8:	fb08 3110 	mls	r1, r8, r0, r3
 80007ec:	0c23      	lsrs	r3, r4, #16
 80007ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f2:	fb00 f107 	mul.w	r1, r0, r7
 80007f6:	4299      	cmp	r1, r3
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x24c>
 80007fa:	eb1c 0303 	adds.w	r3, ip, r3
 80007fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000802:	d22c      	bcs.n	800085e <__udivmoddi4+0x29e>
 8000804:	4299      	cmp	r1, r3
 8000806:	d92a      	bls.n	800085e <__udivmoddi4+0x29e>
 8000808:	3802      	subs	r0, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f1f8 	udiv	r1, r3, r8
 8000814:	fb08 3311 	mls	r3, r8, r1, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb01 f307 	mul.w	r3, r1, r7
 8000820:	42a3      	cmp	r3, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x276>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800082c:	d213      	bcs.n	8000856 <__udivmoddi4+0x296>
 800082e:	42a3      	cmp	r3, r4
 8000830:	d911      	bls.n	8000856 <__udivmoddi4+0x296>
 8000832:	3902      	subs	r1, #2
 8000834:	4464      	add	r4, ip
 8000836:	1ae4      	subs	r4, r4, r3
 8000838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800083c:	e739      	b.n	80006b2 <__udivmoddi4+0xf2>
 800083e:	4604      	mov	r4, r0
 8000840:	e6f0      	b.n	8000624 <__udivmoddi4+0x64>
 8000842:	4608      	mov	r0, r1
 8000844:	e706      	b.n	8000654 <__udivmoddi4+0x94>
 8000846:	45c8      	cmp	r8, r9
 8000848:	d2ae      	bcs.n	80007a8 <__udivmoddi4+0x1e8>
 800084a:	ebb9 0e02 	subs.w	lr, r9, r2
 800084e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000852:	3801      	subs	r0, #1
 8000854:	e7a8      	b.n	80007a8 <__udivmoddi4+0x1e8>
 8000856:	4631      	mov	r1, r6
 8000858:	e7ed      	b.n	8000836 <__udivmoddi4+0x276>
 800085a:	4603      	mov	r3, r0
 800085c:	e799      	b.n	8000792 <__udivmoddi4+0x1d2>
 800085e:	4630      	mov	r0, r6
 8000860:	e7d4      	b.n	800080c <__udivmoddi4+0x24c>
 8000862:	46d6      	mov	lr, sl
 8000864:	e77f      	b.n	8000766 <__udivmoddi4+0x1a6>
 8000866:	4463      	add	r3, ip
 8000868:	3802      	subs	r0, #2
 800086a:	e74d      	b.n	8000708 <__udivmoddi4+0x148>
 800086c:	4606      	mov	r6, r0
 800086e:	4623      	mov	r3, r4
 8000870:	4608      	mov	r0, r1
 8000872:	e70f      	b.n	8000694 <__udivmoddi4+0xd4>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	e730      	b.n	80006dc <__udivmoddi4+0x11c>
 800087a:	bf00      	nop

0800087c <__aeabi_idiv0>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN PV */
int32_t frequency1, duty_cycle1, capture_value1;
int32_t capture_value2,frequency2, duty_cycle2;
int32_t  duty_cycle3,capture_value3,frequency3;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {// -250 ile 250 arasında veriyo olması lazım
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {  // For forward and backwards
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a48      	ldr	r2, [pc, #288]	@ (80009b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12a      	bne.n	80008e8 <HAL_TIM_IC_CaptureCallback+0x68>
		        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7f1b      	ldrb	r3, [r3, #28]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d126      	bne.n	80008e8 <HAL_TIM_IC_CaptureCallback+0x68>
		            capture_value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800089a:	2100      	movs	r1, #0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f002 fea1 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b43      	ldr	r3, [pc, #268]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80008a8:	601a      	str	r2, [r3, #0]
		            if (capture_value1) {
 80008aa:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d01a      	beq.n	80008e8 <HAL_TIM_IC_CaptureCallback+0x68>
		                frequency1 = SystemCoreClock / capture_value1;
 80008b2:	4b41      	ldr	r3, [pc, #260]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3f      	ldr	r2, [pc, #252]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80008be:	461a      	mov	r2, r3
 80008c0:	4b3e      	ldr	r3, [pc, #248]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80008c2:	601a      	str	r2, [r3, #0]
		                duty_cycle1 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value1) -750;
 80008c4:	2104      	movs	r1, #4
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f002 fe8c 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	4a37      	ldr	r2, [pc, #220]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	fbb3 f3f2 	udiv	r3, r3, r2
 80008de:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <HAL_TIM_IC_CaptureCallback+0x140>)
 80008e6:	601a      	str	r2, [r3, #0]
		            }
		        }
		    }
	if (htim->Instance == TIM2) {  // For left and right
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008f0:	d12a      	bne.n	8000948 <HAL_TIM_IC_CaptureCallback+0xc8>
		        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7f1b      	ldrb	r3, [r3, #28]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d126      	bne.n	8000948 <HAL_TIM_IC_CaptureCallback+0xc8>
		            capture_value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f002 fe71 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000908:	601a      	str	r2, [r3, #0]
		            if (capture_value2) {
 800090a:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d01a      	beq.n	8000948 <HAL_TIM_IC_CaptureCallback+0xc8>
		                frequency2 = SystemCoreClock / capture_value2;
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a2b      	ldr	r2, [pc, #172]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	fbb3 f3f2 	udiv	r3, r3, r2
 800091e:	461a      	mov	r2, r3
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000922:	601a      	str	r2, [r3, #0]
		                duty_cycle2 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value2) -750;
 8000924:	2104      	movs	r1, #4
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f002 fe5c 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 800092c:	4603      	mov	r3, r0
 800092e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	4a23      	ldr	r2, [pc, #140]	@ (80009c4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	fbb3 f3f2 	udiv	r3, r3, r2
 800093e:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 8000942:	461a      	mov	r2, r3
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000946:	601a      	str	r2, [r3, #0]
		            }
		        }
		    }
	if (htim->Instance == TIM3) {  // For left and right
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a20      	ldr	r2, [pc, #128]	@ (80009d0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12a      	bne.n	80009a8 <HAL_TIM_IC_CaptureCallback+0x128>
			        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7f1b      	ldrb	r3, [r3, #28]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d126      	bne.n	80009a8 <HAL_TIM_IC_CaptureCallback+0x128>
			            capture_value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f002 fe41 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000968:	601a      	str	r2, [r3, #0]
			            if (capture_value3) {
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01a      	beq.n	80009a8 <HAL_TIM_IC_CaptureCallback+0x128>
			                frequency3 = SystemCoreClock / capture_value3;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	fbb3 f3f2 	udiv	r3, r3, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000982:	601a      	str	r2, [r3, #0]
			                duty_cycle3 = ((10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) / capture_value3) -750;
 8000984:	2104      	movs	r1, #4
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f002 fe2c 	bl	80035e4 <HAL_TIM_ReadCapturedValue>
 800098c:	4603      	mov	r3, r0
 800098e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	fbb3 f3f2 	udiv	r3, r3, r2
 800099e:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_TIM_IC_CaptureCallback+0x15c>)
 80009a6:	601a      	str	r2, [r3, #0]
			            }
			        }
			    }
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40010000 	.word	0x40010000
 80009b4:	200001e0 	.word	0x200001e0
 80009b8:	20000000 	.word	0x20000000
 80009bc:	200001d8 	.word	0x200001d8
 80009c0:	200001dc 	.word	0x200001dc
 80009c4:	200001e4 	.word	0x200001e4
 80009c8:	200001e8 	.word	0x200001e8
 80009cc:	200001ec 	.word	0x200001ec
 80009d0:	40000400 	.word	0x40000400
 80009d4:	200001f4 	.word	0x200001f4
 80009d8:	200001f8 	.word	0x200001f8
 80009dc:	200001f0 	.word	0x200001f0

080009e0 <setPWM>:
/* --- PWM Ayarı --- */
void setPWM(TIM_HandleTypeDef *htim1, uint32_t channel1, uint32_t channel2, int16_t pwmvalue) {
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	b08f      	sub	sp, #60	@ 0x3c
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ea:	6339      	str	r1, [r7, #48]	@ 0x30
 80009ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80009ee:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (pwmvalue >= 10 && pwmvalue <= 1000) {
 80009f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80009f4:	2b09      	cmp	r3, #9
 80009f6:	dd79      	ble.n	8000aec <setPWM+0x10c>
 80009f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80009fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a00:	dc74      	bgt.n	8000aec <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(htim1, channel1, fabs(pwmvalue));
 8000a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d113      	bne.n	8000a30 <setPWM+0x50>
 8000a08:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fd35 	bl	800047c <__aeabi_i2d>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	623a      	str	r2, [r7, #32]
 8000a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a20:	681c      	ldr	r4, [r3, #0]
 8000a22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000a26:	f7ff fd93 	bl	8000550 <__aeabi_d2uiz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a2e:	e040      	b.n	8000ab2 <setPWM+0xd2>
 8000a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d113      	bne.n	8000a5e <setPWM+0x7e>
 8000a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd1e 	bl	800047c <__aeabi_i2d>
 8000a40:	4602      	mov	r2, r0
 8000a42:	460b      	mov	r3, r1
 8000a44:	61ba      	str	r2, [r7, #24]
 8000a46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4e:	681c      	ldr	r4, [r3, #0]
 8000a50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a54:	f7ff fd7c 	bl	8000550 <__aeabi_d2uiz>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000a5c:	e029      	b.n	8000ab2 <setPWM+0xd2>
 8000a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	d113      	bne.n	8000a8c <setPWM+0xac>
 8000a64:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fd07 	bl	800047c <__aeabi_i2d>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	460b      	mov	r3, r1
 8000a72:	613a      	str	r2, [r7, #16]
 8000a74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7c:	681c      	ldr	r4, [r3, #0]
 8000a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a82:	f7ff fd65 	bl	8000550 <__aeabi_d2uiz>
 8000a86:	4603      	mov	r3, r0
 8000a88:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000a8a:	e012      	b.n	8000ab2 <setPWM+0xd2>
 8000a8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fcf3 	bl	800047c <__aeabi_i2d>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa4:	681c      	ldr	r4, [r3, #0]
 8000aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000aaa:	f7ff fd51 	bl	8000550 <__aeabi_d2uiz>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim1, channel2, 0);
 8000ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d104      	bne.n	8000ac2 <setPWM+0xe2>
 8000ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac0:	e114      	b.n	8000cec <setPWM+0x30c>
 8000ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d104      	bne.n	8000ad2 <setPWM+0xf2>
 8000ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ad0:	e10c      	b.n	8000cec <setPWM+0x30c>
 8000ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d104      	bne.n	8000ae2 <setPWM+0x102>
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ae0:	e104      	b.n	8000cec <setPWM+0x30c>
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	e0ff      	b.n	8000cec <setPWM+0x30c>
    }

    else if(pwmvalue >= -1000 && pwmvalue < -10 ) {
 8000aec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000af0:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000af4:	db76      	blt.n	8000be4 <setPWM+0x204>
 8000af6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000afa:	f113 0f0a 	cmn.w	r3, #10
 8000afe:	da71      	bge.n	8000be4 <setPWM+0x204>
        __HAL_TIM_SET_COMPARE(htim1, channel1, 0);
 8000b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d104      	bne.n	8000b10 <setPWM+0x130>
 8000b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0e:	e013      	b.n	8000b38 <setPWM+0x158>
 8000b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d104      	bne.n	8000b20 <setPWM+0x140>
 8000b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b1e:	e00b      	b.n	8000b38 <setPWM+0x158>
 8000b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d104      	bne.n	8000b30 <setPWM+0x150>
 8000b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b2e:	e003      	b.n	8000b38 <setPWM+0x158>
 8000b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim1, channel2, fabs(pwmvalue));
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d113      	bne.n	8000b66 <setPWM+0x186>
 8000b3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc9a 	bl	800047c <__aeabi_i2d>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	603a      	str	r2, [r7, #0]
 8000b4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b5c:	f7ff fcf8 	bl	8000550 <__aeabi_d2uiz>
 8000b60:	4603      	mov	r3, r0
 8000b62:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b64:	e0c2      	b.n	8000cec <setPWM+0x30c>
 8000b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d112      	bne.n	8000b92 <setPWM+0x1b2>
 8000b6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fc83 	bl	800047c <__aeabi_i2d>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4615      	mov	r5, r2
 8000b7c:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8000b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b82:	681c      	ldr	r4, [r3, #0]
 8000b84:	4628      	mov	r0, r5
 8000b86:	4631      	mov	r1, r6
 8000b88:	f7ff fce2 	bl	8000550 <__aeabi_d2uiz>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000b90:	e0ac      	b.n	8000cec <setPWM+0x30c>
 8000b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d112      	bne.n	8000bbe <setPWM+0x1de>
 8000b98:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fc6d 	bl	800047c <__aeabi_i2d>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4692      	mov	sl, r2
 8000ba8:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8000bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	4650      	mov	r0, sl
 8000bb2:	4659      	mov	r1, fp
 8000bb4:	f7ff fccc 	bl	8000550 <__aeabi_d2uiz>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000bbc:	e096      	b.n	8000cec <setPWM+0x30c>
 8000bbe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc5a 	bl	800047c <__aeabi_i2d>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4690      	mov	r8, r2
 8000bce:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bd4:	681c      	ldr	r4, [r3, #0]
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	4649      	mov	r1, r9
 8000bda:	f7ff fcb9 	bl	8000550 <__aeabi_d2uiz>
 8000bde:	4603      	mov	r3, r0
 8000be0:	6423      	str	r3, [r4, #64]	@ 0x40
 8000be2:	e083      	b.n	8000cec <setPWM+0x30c>
    }

    else if(pwmvalue > 1000 ) {
 8000be4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bec:	dd3c      	ble.n	8000c68 <setPWM+0x288>
        __HAL_TIM_SET_COMPARE(htim1, channel1, 1000);
 8000bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <setPWM+0x220>
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfe:	e016      	b.n	8000c2e <setPWM+0x24e>
 8000c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d105      	bne.n	8000c12 <setPWM+0x232>
 8000c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c10:	e00d      	b.n	8000c2e <setPWM+0x24e>
 8000c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c14:	2b08      	cmp	r3, #8
 8000c16:	d105      	bne.n	8000c24 <setPWM+0x244>
 8000c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c20:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c22:	e004      	b.n	8000c2e <setPWM+0x24e>
 8000c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim1, channel2, 0);
 8000c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <setPWM+0x25e>
 8000c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 8000c3c:	e056      	b.n	8000cec <setPWM+0x30c>
        __HAL_TIM_SET_COMPARE(htim1, channel2, 0);
 8000c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d104      	bne.n	8000c4e <setPWM+0x26e>
 8000c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c4c:	e04e      	b.n	8000cec <setPWM+0x30c>
 8000c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d104      	bne.n	8000c5e <setPWM+0x27e>
 8000c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c5c:	e046      	b.n	8000cec <setPWM+0x30c>
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c66:	e041      	b.n	8000cec <setPWM+0x30c>
    else if(pwmvalue < -1000 ) {
 8000c68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000c6c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000c70:	da3c      	bge.n	8000cec <setPWM+0x30c>
        __HAL_TIM_SET_COMPARE(htim1, channel1, 0);
 8000c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <setPWM+0x2a2>
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c80:	e013      	b.n	8000caa <setPWM+0x2ca>
 8000c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d104      	bne.n	8000c92 <setPWM+0x2b2>
 8000c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c90:	e00b      	b.n	8000caa <setPWM+0x2ca>
 8000c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d104      	bne.n	8000ca2 <setPWM+0x2c2>
 8000c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ca0:	e003      	b.n	8000caa <setPWM+0x2ca>
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim1, channel2, 1000);
 8000caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d105      	bne.n	8000cbc <setPWM+0x2dc>
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cba:	e017      	b.n	8000cec <setPWM+0x30c>
        __HAL_TIM_SET_COMPARE(htim1, channel2, 1000);
 8000cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d105      	bne.n	8000cce <setPWM+0x2ee>
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ccc:	e00e      	b.n	8000cec <setPWM+0x30c>
        __HAL_TIM_SET_COMPARE(htim1, channel2, 1000);
 8000cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d105      	bne.n	8000ce0 <setPWM+0x300>
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cdc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000cde:	e005      	b.n	8000cec <setPWM+0x30c>
        __HAL_TIM_SET_COMPARE(htim1, channel2, 1000);
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cea:	e7ff      	b.n	8000cec <setPWM+0x30c>
 8000cec:	bf00      	nop
 8000cee:	373c      	adds	r7, #60	@ 0x3c
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fe9e 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f850 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 fbca 	bl	800149c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 fb9e 	bl	8001448 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d0c:	f000 f8b4 	bl	8000e78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d10:	f000 f95a 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d14:	f000 f9fc 	bl	8001110 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d18:	f000 faa0 	bl	800125c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d1c:	f000 fb28 	bl	8001370 <MX_TIM5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  B_PWM = duty_cycle1*2;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <main+0x8c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <main+0x90>)
 8000d2e:	801a      	strh	r2, [r3, #0]
	  S_PWM = duty_cycle3*2;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <main+0x94>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <main+0x98>)
 8000d3e:	801a      	strh	r2, [r3, #0]
	  E_PWM = duty_cycle2*2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <main+0x9c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <main+0xa0>)
 8000d4e:	801a      	strh	r2, [r3, #0]



	  //BASE
	  setPWM(&htim4, TIM_CHANNEL_1, TIM_CHANNEL_2, B_PWM);
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <main+0x90>)
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	2204      	movs	r2, #4
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <main+0xa4>)
 8000d5c:	f7ff fe40 	bl	80009e0 <setPWM>

	  //SHOULDER
	  setPWM(&htim4, TIM_CHANNEL_3, TIM_CHANNEL_4, S_PWM);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <main+0x98>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	220c      	movs	r2, #12
 8000d68:	2108      	movs	r1, #8
 8000d6a:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <main+0xa4>)
 8000d6c:	f7ff fe38 	bl	80009e0 <setPWM>

	  //ELBOW
	  setPWM(&htim5, TIM_CHANNEL_1, TIM_CHANNEL_2, E_PWM);
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <main+0xa0>)
 8000d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d76:	2204      	movs	r2, #4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <main+0xa8>)
 8000d7c:	f7ff fe30 	bl	80009e0 <setPWM>
	  B_PWM = duty_cycle1*2;
 8000d80:	bf00      	nop
 8000d82:	e7cd      	b.n	8000d20 <main+0x28>
 8000d84:	200001dc 	.word	0x200001dc
 8000d88:	200001fc 	.word	0x200001fc
 8000d8c:	200001f0 	.word	0x200001f0
 8000d90:	200001fe 	.word	0x200001fe
 8000d94:	200001ec 	.word	0x200001ec
 8000d98:	20000200 	.word	0x20000200
 8000d9c:	20000100 	.word	0x20000100
 8000da0:	20000148 	.word	0x20000148

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	@ 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	@ 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fc50 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a27      	ldr	r2, [pc, #156]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e14:	2310      	movs	r3, #16
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e22:	2304      	movs	r3, #4
 8000e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 f928 	bl	8002080 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e36:	f000 fb9f 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fb8a 	bl	8002570 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e62:	f000 fb89 	bl	8001578 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	@ 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	@ 0x40
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb2:	4b43      	ldr	r3, [pc, #268]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000eb4:	4a43      	ldr	r2, [pc, #268]	@ (8000fc4 <MX_TIM1_Init+0x14c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8000eb8:	4b41      	ldr	r3, [pc, #260]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000eba:	2231      	movs	r2, #49	@ 0x31
 8000ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ede:	4838      	ldr	r0, [pc, #224]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000ee0:	f001 fd66 	bl	80029b0 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000eea:	f000 fb45 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4831      	ldr	r0, [pc, #196]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000efc:	f002 fa68 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000f06:	f000 fb37 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f0a:	482d      	ldr	r0, [pc, #180]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000f0c:	f001 fe9e 	bl	8002c4c <HAL_TIM_IC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000f16:	f000 fb2f 	bl	8001578 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f1e:	2350      	movs	r3, #80	@ 0x50
 8000f20:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4822      	ldr	r0, [pc, #136]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000f36:	f002 fb12 	bl	800355e <HAL_TIM_SlaveConfigSynchro>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000f40:	f000 fb1a 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4818      	ldr	r0, [pc, #96]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000f5e:	f002 f8d9 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f68:	f000 fb06 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000f7e:	f002 f8c9 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f88:	f000 faf6 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000f9a:	f003 f817 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000fa4:	f000 fae8 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000fac:	f001 fea8 	bl	8002d00 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <MX_TIM1_Init+0x148>)
 8000fb4:	f001 fea4 	bl	8002d00 <HAL_TIM_IC_Start_IT>

  /* USER CODE END TIM1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3740      	adds	r7, #64	@ 0x40
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	@ 0x40
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001002:	4b42      	ldr	r3, [pc, #264]	@ (800110c <MX_TIM2_Init+0x144>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001008:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800100a:	4b40      	ldr	r3, [pc, #256]	@ (800110c <MX_TIM2_Init+0x144>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <MX_TIM2_Init+0x144>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001016:	4b3d      	ldr	r3, [pc, #244]	@ (800110c <MX_TIM2_Init+0x144>)
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800101c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <MX_TIM2_Init+0x144>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b39      	ldr	r3, [pc, #228]	@ (800110c <MX_TIM2_Init+0x144>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102a:	4838      	ldr	r0, [pc, #224]	@ (800110c <MX_TIM2_Init+0x144>)
 800102c:	f001 fcc0 	bl	80029b0 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001036:	f000 fa9f 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001044:	4619      	mov	r1, r3
 8001046:	4831      	ldr	r0, [pc, #196]	@ (800110c <MX_TIM2_Init+0x144>)
 8001048:	f002 f9c2 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001052:	f000 fa91 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001056:	482d      	ldr	r0, [pc, #180]	@ (800110c <MX_TIM2_Init+0x144>)
 8001058:	f001 fdf8 	bl	8002c4c <HAL_TIM_IC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001062:	f000 fa89 	bl	8001578 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001066:	2304      	movs	r3, #4
 8001068:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800106a:	2350      	movs	r3, #80	@ 0x50
 800106c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4822      	ldr	r0, [pc, #136]	@ (800110c <MX_TIM2_Init+0x144>)
 8001082:	f002 fa6c 	bl	800355e <HAL_TIM_SlaveConfigSynchro>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 800108c:	f000 fa74 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	4818      	ldr	r0, [pc, #96]	@ (800110c <MX_TIM2_Init+0x144>)
 80010aa:	f002 f833 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010b4:	f000 fa60 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2204      	movs	r2, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4810      	ldr	r0, [pc, #64]	@ (800110c <MX_TIM2_Init+0x144>)
 80010ca:	f002 f823 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80010d4:	f000 fa50 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <MX_TIM2_Init+0x144>)
 80010e6:	f002 ff71 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80010f0:	f000 fa42 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_TIM2_Init+0x144>)
 80010f8:	f001 fe02 	bl	8002d00 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80010fc:	2104      	movs	r1, #4
 80010fe:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_TIM2_Init+0x144>)
 8001100:	f001 fdfe 	bl	8002d00 <HAL_TIM_IC_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	@ 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000070 	.word	0x20000070

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b090      	sub	sp, #64	@ 0x40
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114a:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <MX_TIM3_Init+0x144>)
 800114c:	4a42      	ldr	r2, [pc, #264]	@ (8001258 <MX_TIM3_Init+0x148>)
 800114e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 8001150:	4b40      	ldr	r3, [pc, #256]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001152:	2231      	movs	r2, #49	@ 0x31
 8001154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <MX_TIM3_Init+0x144>)
 800115e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <MX_TIM3_Init+0x144>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001170:	4838      	ldr	r0, [pc, #224]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001172:	f001 fc1d 	bl	80029b0 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f9fc 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800118a:	4619      	mov	r1, r3
 800118c:	4831      	ldr	r0, [pc, #196]	@ (8001254 <MX_TIM3_Init+0x144>)
 800118e:	f002 f91f 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f9ee 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800119c:	482d      	ldr	r0, [pc, #180]	@ (8001254 <MX_TIM3_Init+0x144>)
 800119e:	f001 fd55 	bl	8002c4c <HAL_TIM_IC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011a8:	f000 f9e6 	bl	8001578 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011ac:	2304      	movs	r3, #4
 80011ae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011b0:	2350      	movs	r3, #80	@ 0x50
 80011b2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4823      	ldr	r0, [pc, #140]	@ (8001254 <MX_TIM3_Init+0x144>)
 80011c8:	f002 f9c9 	bl	800355e <HAL_TIM_SlaveConfigSynchro>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80011d2:	f000 f9d1 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011da:	2301      	movs	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <MX_TIM3_Init+0x144>)
 80011f0:	f001 ff90 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80011fa:	f000 f9bd 	bl	8001578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2204      	movs	r2, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001210:	f001 ff80 	bl	8003114 <HAL_TIM_IC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800121a:	f000 f9ad 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	480a      	ldr	r0, [pc, #40]	@ (8001254 <MX_TIM3_Init+0x144>)
 800122c:	f002 fece 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8001236:	f000 f99f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_TIM3_Init+0x144>)
 800123e:	f001 fd5f 	bl	8002d00 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001242:	2104      	movs	r1, #4
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM3_Init+0x144>)
 8001246:	f001 fd5b 	bl	8002d00 <HAL_TIM_IC_Start_IT>

  /* USER CODE END TIM3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3740      	adds	r7, #64	@ 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000b8 	.word	0x200000b8
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127e:	4b3a      	ldr	r3, [pc, #232]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001280:	4a3a      	ldr	r2, [pc, #232]	@ (800136c <MX_TIM4_Init+0x110>)
 8001282:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001284:	4b38      	ldr	r3, [pc, #224]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001286:	2253      	movs	r2, #83	@ 0x53
 8001288:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b37      	ldr	r3, [pc, #220]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001290:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001292:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <MX_TIM4_Init+0x10c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a4:	4830      	ldr	r0, [pc, #192]	@ (8001368 <MX_TIM4_Init+0x10c>)
 80012a6:	f001 fbd2 	bl	8002a4e <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012b0:	f000 f962 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4619      	mov	r1, r3
 80012c2:	4829      	ldr	r0, [pc, #164]	@ (8001368 <MX_TIM4_Init+0x10c>)
 80012c4:	f002 fe82 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012ce:	f000 f953 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	@ 0x60
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <MX_TIM4_Init+0x10c>)
 80012ea:	f001 ffaf 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012f4:	f000 f940 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2204      	movs	r2, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	481a      	ldr	r0, [pc, #104]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001300:	f001 ffa4 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800130a:	f000 f935 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001316:	f001 ff99 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001320:	f000 f92a 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	220c      	movs	r2, #12
 8001328:	4619      	mov	r1, r3
 800132a:	480f      	ldr	r0, [pc, #60]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800132c:	f001 ff8e 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001336:	f000 f91f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800133a:	2100      	movs	r1, #0
 800133c:	480a      	ldr	r0, [pc, #40]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800133e:	f001 fbd5 	bl	8002aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001342:	2104      	movs	r1, #4
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001346:	f001 fbd1 	bl	8002aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800134a:	2108      	movs	r1, #8
 800134c:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800134e:	f001 fbcd 	bl	8002aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001352:	210c      	movs	r1, #12
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_TIM4_Init+0x10c>)
 8001356:	f001 fbc9 	bl	8002aec <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM4_Init+0x10c>)
 800135c:	f000 fa3a 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000100 	.word	0x20000100
 800136c:	40000800 	.word	0x40000800

08001370 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <MX_TIM5_Init+0xd0>)
 8001394:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <MX_TIM5_Init+0xd4>)
 8001396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <MX_TIM5_Init+0xd0>)
 800139a:	2253      	movs	r2, #83	@ 0x53
 800139c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013b8:	4821      	ldr	r0, [pc, #132]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013ba:	f001 fb48 	bl	8002a4e <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80013c4:	f000 f8d8 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4619      	mov	r1, r3
 80013d6:	481a      	ldr	r0, [pc, #104]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013d8:	f002 fdf8 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80013e2:	f000 f8c9 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	@ 0x60
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4810      	ldr	r0, [pc, #64]	@ (8001440 <MX_TIM5_Init+0xd0>)
 80013fe:	f001 ff25 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001408:	f000 f8b6 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2204      	movs	r2, #4
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_TIM5_Init+0xd0>)
 8001414:	f001 ff1a 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800141e:	f000 f8ab 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	4806      	ldr	r0, [pc, #24]	@ (8001440 <MX_TIM5_Init+0xd0>)
 8001426:	f001 fb61 	bl	8002aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800142a:	2104      	movs	r1, #4
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_TIM5_Init+0xd0>)
 800142e:	f001 fb5d 	bl	8002aec <HAL_TIM_PWM_Start>


  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001432:	4803      	ldr	r0, [pc, #12]	@ (8001440 <MX_TIM5_Init+0xd0>)
 8001434:	f000 f9ce 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	@ 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000148 	.word	0x20000148
 8001444:	40000c00 	.word	0x40000c00

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fe26 	bl	80040d0 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f875 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000190 	.word	0x20000190
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a2c      	ldr	r2, [pc, #176]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a25      	ldr	r2, [pc, #148]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <MX_GPIO_Init+0xd0>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_GPIO_Init+0xd4>)
 8001528:	f000 fd90 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_GPIO_Init+0xd8>)
 8001544:	f000 fbfe 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001548:	2320      	movs	r3, #32
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_GPIO_Init+0xd4>)
 8001560:	f000 fbf0 	bl	8001d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020800 	.word	0x40020800

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fb7c 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <HAL_TIM_Base_MspInit+0x180>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d135      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	4b57      	ldr	r3, [pc, #348]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a56      	ldr	r2, [pc, #344]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a4f      	ldr	r2, [pc, #316]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800162e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001640:	2301      	movs	r3, #1
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4844      	ldr	r0, [pc, #272]	@ (800175c <HAL_TIM_Base_MspInit+0x188>)
 800164c:	f000 fb7a 	bl	8001d44 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	201b      	movs	r0, #27
 8001656:	f000 fb3e 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800165a:	201b      	movs	r0, #27
 800165c:	f000 fb57 	bl	8001d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001660:	e073      	b.n	800174a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166a:	d135      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a38      	ldr	r2, [pc, #224]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40
 800167c:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a31      	ldr	r2, [pc, #196]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b6:	2301      	movs	r3, #1
 80016b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4826      	ldr	r0, [pc, #152]	@ (800175c <HAL_TIM_Base_MspInit+0x188>)
 80016c2:	f000 fb3f 	bl	8001d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	201c      	movs	r0, #28
 80016cc:	f000 fb03 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d0:	201c      	movs	r0, #28
 80016d2:	f000 fb1c 	bl	8001d0e <HAL_NVIC_EnableIRQ>
}
 80016d6:	e038      	b.n	800174a <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a20      	ldr	r2, [pc, #128]	@ (8001760 <HAL_TIM_Base_MspInit+0x18c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d133      	bne.n	800174a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_TIM_Base_MspInit+0x184>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800171a:	2340      	movs	r3, #64	@ 0x40
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172a:	2302      	movs	r3, #2
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4809      	ldr	r0, [pc, #36]	@ (800175c <HAL_TIM_Base_MspInit+0x188>)
 8001736:	f000 fb05 	bl	8001d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201d      	movs	r0, #29
 8001740:	f000 fac9 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001744:	201d      	movs	r0, #29
 8001746:	f000 fae2 	bl	8001d0e <HAL_NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3738      	adds	r7, #56	@ 0x38
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40000400 	.word	0x40000400

08001764 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <HAL_TIM_PWM_MspInit+0x64>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10e      	bne.n	8001794 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001792:	e012      	b.n	80017ba <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <HAL_TIM_PWM_MspInit+0x6c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10d      	bne.n	80017ba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <HAL_TIM_PWM_MspInit+0x68>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40000800 	.word	0x40000800
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40000c00 	.word	0x40000c00

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a24      	ldr	r2, [pc, #144]	@ (8001884 <HAL_TIM_MspPostInit+0xb0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d11f      	bne.n	8001836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001812:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001824:	2302      	movs	r3, #2
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4817      	ldr	r0, [pc, #92]	@ (800188c <HAL_TIM_MspPostInit+0xb8>)
 8001830:	f000 fa88 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001834:	e022      	b.n	800187c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <HAL_TIM_MspPostInit+0xbc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d11d      	bne.n	800187c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_TIM_MspPostInit+0xb4>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800185c:	2303      	movs	r3, #3
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800186c:	2302      	movs	r3, #2
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <HAL_TIM_MspPostInit+0xc0>)
 8001878:	f000 fa64 	bl	8001d44 <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40000800 	.word	0x40000800
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400
 8001890:	40000c00 	.word	0x40000c00
 8001894:	40020000 	.word	0x40020000

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_UART_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12b      	bne.n	8001912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f2:	230c      	movs	r3, #12
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_UART_MspInit+0x8c>)
 800190e:	f000 fa19 	bl	8001d44 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004400 	.word	0x40004400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <NMI_Handler+0x4>

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <MemManage_Handler+0x4>

08001940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <UsageFault_Handler+0x4>

08001950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197e:	f000 f8af 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <TIM1_CC_IRQHandler+0x10>)
 800198e:	f001 fad1 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000028 	.word	0x20000028

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f001 fac7 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000070 	.word	0x20000070

080019b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM3_IRQHandler+0x10>)
 80019b6:	f001 fabd 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000b8 	.word	0x200000b8

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <SystemInit+0x20>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <SystemInit+0x20>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ec:	f7ff ffea 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f0:	480c      	ldr	r0, [pc, #48]	@ (8001a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f2:	490d      	ldr	r1, [pc, #52]	@ (8001a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f8:	e002      	b.n	8001a00 <LoopCopyDataInit>

080019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fe:	3304      	adds	r3, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a04:	d3f9      	bcc.n	80019fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a08:	4c0a      	ldr	r4, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a0c:	e001      	b.n	8001a12 <LoopFillZerobss>

08001a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a10:	3204      	adds	r2, #4

08001a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a14:	d3fb      	bcc.n	8001a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a16:	f002 fe27 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1a:	f7ff f96d 	bl	8000cf8 <main>
  bx  lr    
 8001a1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a2c:	080046f0 	.word	0x080046f0
  ldr r2, =_sbss
 8001a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a34:	20000208 	.word	0x20000208

08001a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_Init+0x40>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <HAL_Init+0x40>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <HAL_Init+0x40>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f92b 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fd88 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f943 	bl	8001d2a <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001abc:	f000 f90b 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x20>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_IncTick+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_IncTick+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000204 	.word	0x20000204

08001b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <HAL_GetTick+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000204 	.word	0x20000204

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4907      	ldr	r1, [pc, #28]	@ (8001bbc <__NVIC_EnableIRQ+0x38>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff29 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff3e 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff8e 	bl	8001c14 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5d 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff31 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e159      	b.n	8002014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8148 	bne.w	800200e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a2 	beq.w	800200e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b57      	ldr	r3, [pc, #348]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eda:	4b54      	ldr	r3, [pc, #336]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_GPIO_Init+0x2ec>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a49      	ldr	r2, [pc, #292]	@ (8002034 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x202>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <HAL_GPIO_Init+0x2f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x1fe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a47      	ldr	r2, [pc, #284]	@ (800203c <HAL_GPIO_Init+0x2f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a46      	ldr	r2, [pc, #280]	@ (8002040 <HAL_GPIO_Init+0x2fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x1f6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	@ (8002044 <HAL_GPIO_Init+0x300>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x1f2>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	@ (8002030 <HAL_GPIO_Init+0x2ec>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <HAL_GPIO_Init+0x304>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f aea2 	bls.w	8001d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e267      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d075      	beq.n	800218a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800209e:	4b88      	ldr	r3, [pc, #544]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4b85      	ldr	r3, [pc, #532]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d112      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b82      	ldr	r3, [pc, #520]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b7e      	ldr	r3, [pc, #504]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d05b      	beq.n	8002188 <HAL_RCC_OscConfig+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d157      	bne.n	8002188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e242      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x74>
 80020e6:	4b76      	ldr	r3, [pc, #472]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a75      	ldr	r2, [pc, #468]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b70      	ldr	r3, [pc, #448]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6f      	ldr	r2, [pc, #444]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6d      	ldr	r3, [pc, #436]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6c      	ldr	r2, [pc, #432]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 8002118:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a68      	ldr	r2, [pc, #416]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b66      	ldr	r3, [pc, #408]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a65      	ldr	r2, [pc, #404]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fce6 	bl	8001b08 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fce2 	bl	8001b08 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	@ 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e207      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5b      	ldr	r3, [pc, #364]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xc0>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fcd2 	bl	8001b08 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fcce 	bl	8001b08 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	@ 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1f3      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b51      	ldr	r3, [pc, #324]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0xe8>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002196:	4b4a      	ldr	r3, [pc, #296]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b44      	ldr	r3, [pc, #272]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b41      	ldr	r3, [pc, #260]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1c7      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3b      	ldr	r3, [pc, #236]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4937      	ldr	r1, [pc, #220]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <HAL_RCC_OscConfig+0x244>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff fc87 	bl	8001b08 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff fc83 	bl	8001b08 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1a8      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4925      	ldr	r1, [pc, #148]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <HAL_RCC_OscConfig+0x244>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fc66 	bl	8001b08 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff fc62 	bl	8001b08 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e187      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d036      	beq.n	80022d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_RCC_OscConfig+0x248>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff fc46 	bl	8001b08 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fc42 	bl	8001b08 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e167      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 800229e:	e01b      	b.n	80022d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_OscConfig+0x248>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fc2f 	bl	8001b08 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e00e      	b.n	80022cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff fc2b 	bl	8001b08 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d907      	bls.n	80022cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e150      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	42470000 	.word	0x42470000
 80022c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ea      	bne.n	80022ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8097 	beq.w	8002414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b81      	ldr	r3, [pc, #516]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b7d      	ldr	r3, [pc, #500]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	4a7c      	ldr	r2, [pc, #496]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	@ 0x40
 8002306:	4b7a      	ldr	r3, [pc, #488]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b77      	ldr	r3, [pc, #476]	@ (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b74      	ldr	r3, [pc, #464]	@ (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a73      	ldr	r2, [pc, #460]	@ (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff fbeb 	bl	8001b08 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7ff fbe7 	bl	8001b08 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e10c      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b6a      	ldr	r3, [pc, #424]	@ (80024f4 <HAL_RCC_OscConfig+0x474>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x2ea>
 800235c:	4b64      	ldr	r3, [pc, #400]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	4a63      	ldr	r2, [pc, #396]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	@ 0x70
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x324>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x30c>
 8002372:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	4a5e      	ldr	r2, [pc, #376]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	@ 0x70
 800237e:	4b5c      	ldr	r3, [pc, #368]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002382:	4a5b      	ldr	r2, [pc, #364]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	@ 0x70
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x324>
 800238c:	4b58      	ldr	r3, [pc, #352]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4a57      	ldr	r2, [pc, #348]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	@ 0x70
 8002398:	4b55      	ldr	r3, [pc, #340]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 0304 	bic.w	r3, r3, #4
 80023a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff fbac 	bl	8001b08 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff fba8 	bl	8001b08 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0cb      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4b49      	ldr	r3, [pc, #292]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0ee      	beq.n	80023b4 <HAL_RCC_OscConfig+0x334>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fb96 	bl	8001b08 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb92 	bl	8001b08 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0b5      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ee      	bne.n	80023e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	4a38      	ldr	r2, [pc, #224]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a1 	beq.w	8002560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800241e:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d05c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d141      	bne.n	80024b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_RCC_OscConfig+0x478>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fb66 	bl	8001b08 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff fb62 	bl	8001b08 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e087      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	491b      	ldr	r1, [pc, #108]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCC_OscConfig+0x478>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fb3b 	bl	8001b08 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff fb37 	bl	8001b08 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e05c      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x416>
 80024b4:	e054      	b.n	8002560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_RCC_OscConfig+0x478>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fb24 	bl	8001b08 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff fb20 	bl	8001b08 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e045      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x444>
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e038      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_RCC_OscConfig+0x4ec>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d028      	beq.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d121      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d11a      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cc      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b68      	ldr	r3, [pc, #416]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d90c      	bls.n	80025ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b65      	ldr	r3, [pc, #404]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a58      	ldr	r2, [pc, #352]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a52      	ldr	r2, [pc, #328]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d044      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d003      	beq.n	800262e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e067      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4934      	ldr	r1, [pc, #208]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7ff fa52 	bl	8001b08 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7ff fa4e 	bl	8001b08 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d20c      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f9b2 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00
 800272c:	40023800 	.word	0x40023800
 8002730:	080046c8 	.word	0x080046c8
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b094      	sub	sp, #80	@ 0x50
 8002742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002754:	4b79      	ldr	r3, [pc, #484]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d00d      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x40>
 8002760:	2b08      	cmp	r3, #8
 8002762:	f200 80e1 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x34>
 800276a:	2b04      	cmp	r3, #4
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x3a>
 800276e:	e0db      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x204>)
 8002772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002774:	e0db      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002776:	4b73      	ldr	r3, [pc, #460]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x208>)
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800277a:	e0d8      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800277c:	4b6f      	ldr	r3, [pc, #444]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002784:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	2200      	movs	r2, #0
 800279a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800279c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027a6:	2300      	movs	r3, #0
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80027aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027ae:	4622      	mov	r2, r4
 80027b0:	462b      	mov	r3, r5
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	0159      	lsls	r1, r3, #5
 80027bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c0:	0150      	lsls	r0, r2, #5
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4621      	mov	r1, r4
 80027c8:	1a51      	subs	r1, r2, r1
 80027ca:	6139      	str	r1, [r7, #16]
 80027cc:	4629      	mov	r1, r5
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e0:	4659      	mov	r1, fp
 80027e2:	018b      	lsls	r3, r1, #6
 80027e4:	4651      	mov	r1, sl
 80027e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ea:	4651      	mov	r1, sl
 80027ec:	018a      	lsls	r2, r1, #6
 80027ee:	4651      	mov	r1, sl
 80027f0:	ebb2 0801 	subs.w	r8, r2, r1
 80027f4:	4659      	mov	r1, fp
 80027f6:	eb63 0901 	sbc.w	r9, r3, r1
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	4623      	mov	r3, r4
 8002814:	eb18 0303 	adds.w	r3, r8, r3
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	462b      	mov	r3, r5
 800281c:	eb49 0303 	adc.w	r3, r9, r3
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800282e:	4629      	mov	r1, r5
 8002830:	024b      	lsls	r3, r1, #9
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002838:	4621      	mov	r1, r4
 800283a:	024a      	lsls	r2, r1, #9
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800284c:	f7fd fea0 	bl	8000590 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002858:	e058      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285a:	4b38      	ldr	r3, [pc, #224]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	099b      	lsrs	r3, r3, #6
 8002860:	2200      	movs	r2, #0
 8002862:	4618      	mov	r0, r3
 8002864:	4611      	mov	r1, r2
 8002866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002874:	4642      	mov	r2, r8
 8002876:	464b      	mov	r3, r9
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002886:	0150      	lsls	r0, r2, #5
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4641      	mov	r1, r8
 800288e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb63 0b01 	sbc.w	fp, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028ac:	ebb2 040a 	subs.w	r4, r2, sl
 80028b0:	eb63 050b 	sbc.w	r5, r3, fp
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	00eb      	lsls	r3, r5, #3
 80028be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c2:	00e2      	lsls	r2, r4, #3
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	18e3      	adds	r3, r4, r3
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	464b      	mov	r3, r9
 80028d0:	eb45 0303 	adc.w	r3, r5, r3
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e2:	4629      	mov	r1, r5
 80028e4:	028b      	lsls	r3, r1, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ec:	4621      	mov	r1, r4
 80028ee:	028a      	lsls	r2, r1, #10
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f6:	2200      	movs	r2, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	61fa      	str	r2, [r7, #28]
 80028fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002900:	f7fd fe46 	bl	8000590 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800291c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800291e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x204>)
 800292a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002930:	4618      	mov	r0, r3
 8002932:	3750      	adds	r7, #80	@ 0x50
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200

08002948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002964:	f7ff fff0 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	080046d8 	.word	0x080046d8

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800298c:	f7ff ffdc 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0b5b      	lsrs	r3, r3, #13
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	@ (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	080046d8 	.word	0x080046d8

080029b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fdfc 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fe64 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e041      	b.n	8002ae4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe fe75 	bl	8001764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f000 fe15 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_TIM_PWM_Start+0x24>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e022      	b.n	8002b56 <HAL_TIM_PWM_Start+0x6a>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d109      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x3e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e015      	b.n	8002b56 <HAL_TIM_PWM_Start+0x6a>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d109      	bne.n	8002b44 <HAL_TIM_PWM_Start+0x58>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e008      	b.n	8002b56 <HAL_TIM_PWM_Start+0x6a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e068      	b.n	8002c30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x82>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6c:	e013      	b.n	8002b96 <HAL_TIM_PWM_Start+0xaa>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_PWM_Start+0x92>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b7c:	e00b      	b.n	8002b96 <HAL_TIM_PWM_Start+0xaa>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start+0xa2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b8c:	e003      	b.n	8002b96 <HAL_TIM_PWM_Start+0xaa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f9ee 	bl	8003f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <HAL_TIM_PWM_Start+0x14c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <HAL_TIM_PWM_Start+0x14c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x10e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd0:	d013      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x10e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_TIM_PWM_Start+0x150>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x10e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <HAL_TIM_PWM_Start+0x154>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x10e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <HAL_TIM_PWM_Start+0x158>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x10e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_TIM_PWM_Start+0x15c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d111      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d010      	beq.n	8002c2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	e007      	b.n	8002c2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40014000 	.word	0x40014000

08002c4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e041      	b.n	8002ce2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f839 	bl	8002cea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 fd16 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0x1e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e013      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x46>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0x2e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e00b      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x46>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_IC_Start_IT+0x3e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e003      	b.n	8002d46 <HAL_TIM_IC_Start_IT+0x46>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_TIM_IC_Start_IT+0x58>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e013      	b.n	8002d80 <HAL_TIM_IC_Start_IT+0x80>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d104      	bne.n	8002d68 <HAL_TIM_IC_Start_IT+0x68>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e00b      	b.n	8002d80 <HAL_TIM_IC_Start_IT+0x80>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d104      	bne.n	8002d78 <HAL_TIM_IC_Start_IT+0x78>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e003      	b.n	8002d80 <HAL_TIM_IC_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0c2      	b.n	8002f18 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xa2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da0:	e013      	b.n	8002dca <HAL_TIM_IC_Start_IT+0xca>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0xb2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_IC_Start_IT+0xca>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_IC_Start_IT+0xc2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc0:	e003      	b.n	8002dca <HAL_TIM_IC_Start_IT+0xca>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_IC_Start_IT+0xda>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_IC_Start_IT+0x102>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Start_IT+0xea>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002de8:	e00b      	b.n	8002e02 <HAL_TIM_IC_Start_IT+0x102>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Start_IT+0xfa>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_IC_Start_IT+0x102>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d841      	bhi.n	8002e8c <HAL_TIM_IC_Start_IT+0x18c>
 8002e08:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <HAL_TIM_IC_Start_IT+0x110>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e57 	.word	0x08002e57
 8002e24:	08002e8d 	.word	0x08002e8d
 8002e28:	08002e8d 	.word	0x08002e8d
 8002e2c:	08002e8d 	.word	0x08002e8d
 8002e30:	08002e69 	.word	0x08002e69
 8002e34:	08002e8d 	.word	0x08002e8d
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e7b 	.word	0x08002e7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0202 	orr.w	r2, r2, #2
 8002e52:	60da      	str	r2, [r3, #12]
      break;
 8002e54:	e01d      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0204 	orr.w	r2, r2, #4
 8002e64:	60da      	str	r2, [r3, #12]
      break;
 8002e66:	e014      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	60da      	str	r2, [r3, #12]
      break;
 8002e78:	e00b      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0210 	orr.w	r2, r2, #16
 8002e88:	60da      	str	r2, [r3, #12]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d13e      	bne.n	8002f16 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f86d 	bl	8003f80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_TIM_IC_Start_IT+0x220>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d018      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb8:	d013      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_TIM_IC_Start_IT+0x224>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <HAL_TIM_IC_Start_IT+0x228>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	@ (8002f2c <HAL_TIM_IC_Start_IT+0x22c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <HAL_TIM_IC_Start_IT+0x230>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d111      	bne.n	8002f06 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b06      	cmp	r3, #6
 8002ef2:	d010      	beq.n	8002f16 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	e007      	b.n	8002f16 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d020      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0202 	mvn.w	r2, #2
 8002f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fc7e 	bl	8000880 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fb7a 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb81 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0204 	mvn.w	r2, #4
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fc58 	bl	8000880 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fb54 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb5b 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0208 	mvn.w	r2, #8
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2204      	movs	r2, #4
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fc32 	bl	8000880 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb2e 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fb35 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0210 	mvn.w	r2, #16
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2208      	movs	r2, #8
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fc0c 	bl	8000880 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb08 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fb0f 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0201 	mvn.w	r2, #1
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fae6 	bl	800366c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fffc 	bl	80040bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fae0 	bl	80036a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0220 	mvn.w	r2, #32
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 ffce 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_IC_ConfigChannel+0x1e>
 800312e:	2302      	movs	r3, #2
 8003130:	e088      	b.n	8003244 <HAL_TIM_IC_ConfigChannel+0x130>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003150:	f000 fd5e 	bl	8003c10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 020c 	bic.w	r2, r2, #12
 8003162:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	619a      	str	r2, [r3, #24]
 8003176:	e060      	b.n	800323a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d11c      	bne.n	80031b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800318e:	f000 fdd6 	bl	8003d3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6999      	ldr	r1, [r3, #24]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	e040      	b.n	800323a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11b      	bne.n	80031f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031ce:	f000 fe23 	bl	8003e18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 020c 	bic.w	r2, r2, #12
 80031e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69d9      	ldr	r1, [r3, #28]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	61da      	str	r2, [r3, #28]
 80031f4:	e021      	b.n	800323a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d11c      	bne.n	8003236 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800320c:	f000 fe40 	bl	8003e90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800321e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69d9      	ldr	r1, [r3, #28]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	021a      	lsls	r2, r3, #8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
 8003234:	e001      	b.n	800323a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ae      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 809f 	bhi.w	80033b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327a:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080033b9 	.word	0x080033b9
 8003288:	080033b9 	.word	0x080033b9
 800328c:	080033b9 	.word	0x080033b9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b9 	.word	0x080033b9
 800329c:	080033b9 	.word	0x080033b9
 80032a0:	08003337 	.word	0x08003337
 80032a4:	080033b9 	.word	0x080033b9
 80032a8:	080033b9 	.word	0x080033b9
 80032ac:	080033b9 	.word	0x080033b9
 80032b0:	08003377 	.word	0x08003377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa8a 	bl	80037d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e064      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fad0 	bl	80038a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e043      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb1b 	bl	8003978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e023      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fb65 	bl	8003a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	f000 fd5b 	bl	8003f40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	f000 fd44 	bl	8003f40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fc02 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	@ 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fd11 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fc5e 	bl	8003db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	@ 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fd01 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fbe2 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	@ 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fcf1 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 fce8 	bl	8003f0a <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003572:	2302      	movs	r3, #2
 8003574:	e031      	b.n	80035da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 faaf 	bl	8003aec <TIM_SlaveTimer_SetConfig>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e018      	b.n	80035da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d831      	bhi.n	800365c <HAL_TIM_ReadCapturedValue+0x78>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003635 	.word	0x08003635
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800363f 	.word	0x0800363f
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	08003649 	.word	0x08003649
 8003624:	0800365d 	.word	0x0800365d
 8003628:	0800365d 	.word	0x0800365d
 800362c:	0800365d 	.word	0x0800365d
 8003630:	08003653 	.word	0x08003653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363a:	60fb      	str	r3, [r7, #12]

      break;
 800363c:	e00f      	b.n	800365e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	60fb      	str	r3, [r7, #12]

      break;
 8003646:	e00a      	b.n	800365e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364e:	60fb      	str	r3, [r7, #12]

      break;
 8003650:	e005      	b.n	800365e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	60fb      	str	r3, [r7, #12]

      break;
 800365a:	e000      	b.n	800365e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800365c:	bf00      	nop
  }

  return tmpreg;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3a      	ldr	r2, [pc, #232]	@ (80037b8 <TIM_Base_SetConfig+0xfc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00f      	beq.n	80036f4 <TIM_Base_SetConfig+0x38>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036da:	d00b      	beq.n	80036f4 <TIM_Base_SetConfig+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a37      	ldr	r2, [pc, #220]	@ (80037bc <TIM_Base_SetConfig+0x100>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_Base_SetConfig+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a36      	ldr	r2, [pc, #216]	@ (80037c0 <TIM_Base_SetConfig+0x104>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a35      	ldr	r2, [pc, #212]	@ (80037c4 <TIM_Base_SetConfig+0x108>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d108      	bne.n	8003706 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <TIM_Base_SetConfig+0xfc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01b      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003714:	d017      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a28      	ldr	r2, [pc, #160]	@ (80037bc <TIM_Base_SetConfig+0x100>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <TIM_Base_SetConfig+0x104>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00f      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a26      	ldr	r2, [pc, #152]	@ (80037c4 <TIM_Base_SetConfig+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00b      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a25      	ldr	r2, [pc, #148]	@ (80037c8 <TIM_Base_SetConfig+0x10c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a24      	ldr	r2, [pc, #144]	@ (80037cc <TIM_Base_SetConfig+0x110>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_Base_SetConfig+0x8a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a23      	ldr	r2, [pc, #140]	@ (80037d0 <TIM_Base_SetConfig+0x114>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0e      	ldr	r2, [pc, #56]	@ (80037b8 <TIM_Base_SetConfig+0xfc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]
  }
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800

080037d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f023 0201 	bic.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <TIM_OC1_SetConfig+0xc8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10c      	bne.n	800384a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0308 	bic.w	r3, r3, #8
 8003836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a13      	ldr	r2, [pc, #76]	@ (800389c <TIM_OC1_SetConfig+0xc8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d111      	bne.n	8003876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40010000 	.word	0x40010000

080038a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0210 	bic.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0320 	bic.w	r3, r3, #32
 80038ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003974 <TIM_OC2_SetConfig+0xd4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10d      	bne.n	800391c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800391a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a15      	ldr	r2, [pc, #84]	@ (8003974 <TIM_OC2_SetConfig+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d113      	bne.n	800394c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800392a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000

08003978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a48 <TIM_OC3_SetConfig+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10d      	bne.n	80039f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <TIM_OC3_SetConfig+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d113      	bne.n	8003a22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40010000 	.word	0x40010000

08003a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	031b      	lsls	r3, r3, #12
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a10      	ldr	r2, [pc, #64]	@ (8003ae8 <TIM_OC4_SetConfig+0x9c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d109      	bne.n	8003ac0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	019b      	lsls	r3, r3, #6
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40010000 	.word	0x40010000

08003aec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b70      	cmp	r3, #112	@ 0x70
 8003b34:	d01a      	beq.n	8003b6c <TIM_SlaveTimer_SetConfig+0x80>
 8003b36:	2b70      	cmp	r3, #112	@ 0x70
 8003b38:	d860      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b3a:	2b60      	cmp	r3, #96	@ 0x60
 8003b3c:	d054      	beq.n	8003be8 <TIM_SlaveTimer_SetConfig+0xfc>
 8003b3e:	2b60      	cmp	r3, #96	@ 0x60
 8003b40:	d85c      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b42:	2b50      	cmp	r3, #80	@ 0x50
 8003b44:	d046      	beq.n	8003bd4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003b46:	2b50      	cmp	r3, #80	@ 0x50
 8003b48:	d858      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d019      	beq.n	8003b82 <TIM_SlaveTimer_SetConfig+0x96>
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d854      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b52:	2b30      	cmp	r3, #48	@ 0x30
 8003b54:	d055      	beq.n	8003c02 <TIM_SlaveTimer_SetConfig+0x116>
 8003b56:	2b30      	cmp	r3, #48	@ 0x30
 8003b58:	d850      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d051      	beq.n	8003c02 <TIM_SlaveTimer_SetConfig+0x116>
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d84c      	bhi.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04d      	beq.n	8003c02 <TIM_SlaveTimer_SetConfig+0x116>
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d04b      	beq.n	8003c02 <TIM_SlaveTimer_SetConfig+0x116>
 8003b6a:	e047      	b.n	8003bfc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	f000 f9e0 	bl	8003f40 <TIM_ETR_SetConfig>
      break;
 8003b80:	e040      	b.n	8003c04 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d101      	bne.n	8003b8e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03b      	b.n	8003c06 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
      break;
 8003bd2:	e017      	b.n	8003c04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be0:	461a      	mov	r2, r3
 8003be2:	f000 f87d 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      break;
 8003be6:	e00d      	b.n	8003c04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f000 f8df 	bl	8003db8 <TIM_TI2_ConfigInputStage>
      break;
 8003bfa:	e003      	b.n	8003c04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003c00:	e000      	b.n	8003c04 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003c02:	bf00      	nop
  }

  return status;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 0201 	bic.w	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <TIM_TI1_SetConfig+0xbc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <TIM_TI1_SetConfig+0x56>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c44:	d00f      	beq.n	8003c66 <TIM_TI1_SetConfig+0x56>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a21      	ldr	r2, [pc, #132]	@ (8003cd0 <TIM_TI1_SetConfig+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <TIM_TI1_SetConfig+0x56>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a20      	ldr	r2, [pc, #128]	@ (8003cd4 <TIM_TI1_SetConfig+0xc4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <TIM_TI1_SetConfig+0x56>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <TIM_TI1_SetConfig+0xc8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_TI1_SetConfig+0x56>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	@ (8003cdc <TIM_TI1_SetConfig+0xcc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <TIM_TI1_SetConfig+0x5a>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <TIM_TI1_SetConfig+0x5c>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e003      	b.n	8003c8a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f023 030a 	bic.w	r3, r3, #10
 8003ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 030a 	and.w	r3, r3, #10
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40014000 	.word	0x40014000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0210 	bic.w	r2, r3, #16
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0210 	bic.w	r2, r3, #16
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f023 0303 	bic.w	r3, r3, #3
 8003e44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	031b      	lsls	r3, r3, #12
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f043 0307 	orr.w	r3, r3, #7
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	021a      	lsls	r2, r3, #8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2201      	movs	r2, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e050      	b.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004030:	d013      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10c      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40014000 	.word	0x40014000

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e042      	b.n	8004168 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fbce 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	@ 0x24
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f82b 	bl	8004170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b0c0      	sub	sp, #256	@ 0x100
 8004176:	af00      	add	r7, sp, #0
 8004178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	ea40 0301 	orr.w	r3, r0, r1
 8004198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041c8:	f021 010c 	bic.w	r1, r1, #12
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041d6:	430b      	orrs	r3, r1
 80041d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	6999      	ldr	r1, [r3, #24]
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	ea40 0301 	orr.w	r3, r0, r1
 80041f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b8f      	ldr	r3, [pc, #572]	@ (800443c <UART_SetConfig+0x2cc>)
 8004200:	429a      	cmp	r2, r3
 8004202:	d005      	beq.n	8004210 <UART_SetConfig+0xa0>
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b8d      	ldr	r3, [pc, #564]	@ (8004440 <UART_SetConfig+0x2d0>)
 800420c:	429a      	cmp	r2, r3
 800420e:	d104      	bne.n	800421a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fbba 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8004214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004218:	e003      	b.n	8004222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421a:	f7fe fba1 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 800421e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422c:	f040 810c 	bne.w	8004448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800423a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800423e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	1891      	adds	r1, r2, r2
 8004248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800424a:	415b      	adcs	r3, r3
 800424c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800424e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004252:	4621      	mov	r1, r4
 8004254:	eb12 0801 	adds.w	r8, r2, r1
 8004258:	4629      	mov	r1, r5
 800425a:	eb43 0901 	adc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004280:	462b      	mov	r3, r5
 8004282:	eb49 0303 	adc.w	r3, r9, r3
 8004286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800429a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800429e:	460b      	mov	r3, r1
 80042a0:	18db      	adds	r3, r3, r3
 80042a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042a4:	4613      	mov	r3, r2
 80042a6:	eb42 0303 	adc.w	r3, r2, r3
 80042aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042b4:	f7fc f96c 	bl	8000590 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4b61      	ldr	r3, [pc, #388]	@ (8004444 <UART_SetConfig+0x2d4>)
 80042be:	fba3 2302 	umull	r2, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	011c      	lsls	r4, r3, #4
 80042c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042e0:	415b      	adcs	r3, r3
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e8:	4641      	mov	r1, r8
 80042ea:	eb12 0a01 	adds.w	sl, r2, r1
 80042ee:	4649      	mov	r1, r9
 80042f0:	eb43 0b01 	adc.w	fp, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004308:	4692      	mov	sl, r2
 800430a:	469b      	mov	fp, r3
 800430c:	4643      	mov	r3, r8
 800430e:	eb1a 0303 	adds.w	r3, sl, r3
 8004312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004316:	464b      	mov	r3, r9
 8004318:	eb4b 0303 	adc.w	r3, fp, r3
 800431c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800432c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004334:	460b      	mov	r3, r1
 8004336:	18db      	adds	r3, r3, r3
 8004338:	643b      	str	r3, [r7, #64]	@ 0x40
 800433a:	4613      	mov	r3, r2
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800434a:	f7fc f921 	bl	8000590 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4611      	mov	r1, r2
 8004354:	4b3b      	ldr	r3, [pc, #236]	@ (8004444 <UART_SetConfig+0x2d4>)
 8004356:	fba3 2301 	umull	r2, r3, r3, r1
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2264      	movs	r2, #100	@ 0x64
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	1acb      	subs	r3, r1, r3
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800436a:	4b36      	ldr	r3, [pc, #216]	@ (8004444 <UART_SetConfig+0x2d4>)
 800436c:	fba3 2302 	umull	r2, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004378:	441c      	add	r4, r3
 800437a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437e:	2200      	movs	r2, #0
 8004380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	1891      	adds	r1, r2, r2
 8004392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004394:	415b      	adcs	r3, r3
 8004396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800439c:	4641      	mov	r1, r8
 800439e:	1851      	adds	r1, r2, r1
 80043a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80043a2:	4649      	mov	r1, r9
 80043a4:	414b      	adcs	r3, r1
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043b4:	4659      	mov	r1, fp
 80043b6:	00cb      	lsls	r3, r1, #3
 80043b8:	4651      	mov	r1, sl
 80043ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043be:	4651      	mov	r1, sl
 80043c0:	00ca      	lsls	r2, r1, #3
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	4642      	mov	r2, r8
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043d0:	464b      	mov	r3, r9
 80043d2:	460a      	mov	r2, r1
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043f0:	460b      	mov	r3, r1
 80043f2:	18db      	adds	r3, r3, r3
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f6:	4613      	mov	r3, r2
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004406:	f7fc f8c3 	bl	8000590 <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <UART_SetConfig+0x2d4>)
 8004410:	fba3 1302 	umull	r1, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2164      	movs	r1, #100	@ 0x64
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	3332      	adds	r3, #50	@ 0x32
 8004422:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <UART_SetConfig+0x2d4>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 0207 	and.w	r2, r3, #7
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4422      	add	r2, r4
 8004436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004438:	e106      	b.n	8004648 <UART_SetConfig+0x4d8>
 800443a:	bf00      	nop
 800443c:	40011000 	.word	0x40011000
 8004440:	40011400 	.word	0x40011400
 8004444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800445a:	4642      	mov	r2, r8
 800445c:	464b      	mov	r3, r9
 800445e:	1891      	adds	r1, r2, r2
 8004460:	6239      	str	r1, [r7, #32]
 8004462:	415b      	adcs	r3, r3
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
 8004466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800446a:	4641      	mov	r1, r8
 800446c:	1854      	adds	r4, r2, r1
 800446e:	4649      	mov	r1, r9
 8004470:	eb43 0501 	adc.w	r5, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	00eb      	lsls	r3, r5, #3
 800447e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004482:	00e2      	lsls	r2, r4, #3
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
 8004488:	4643      	mov	r3, r8
 800448a:	18e3      	adds	r3, r4, r3
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004490:	464b      	mov	r3, r9
 8004492:	eb45 0303 	adc.w	r3, r5, r3
 8004496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044b6:	4629      	mov	r1, r5
 80044b8:	008b      	lsls	r3, r1, #2
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c0:	4621      	mov	r1, r4
 80044c2:	008a      	lsls	r2, r1, #2
 80044c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044c8:	f7fc f862 	bl	8000590 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4b60      	ldr	r3, [pc, #384]	@ (8004654 <UART_SetConfig+0x4e4>)
 80044d2:	fba3 2302 	umull	r2, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	011c      	lsls	r4, r3, #4
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	61b9      	str	r1, [r7, #24]
 80044f4:	415b      	adcs	r3, r3
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fc:	4641      	mov	r1, r8
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	6139      	str	r1, [r7, #16]
 8004502:	4649      	mov	r1, r9
 8004504:	414b      	adcs	r3, r1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004514:	4659      	mov	r1, fp
 8004516:	00cb      	lsls	r3, r1, #3
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451e:	4651      	mov	r1, sl
 8004520:	00ca      	lsls	r2, r1, #3
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	4603      	mov	r3, r0
 8004528:	4642      	mov	r2, r8
 800452a:	189b      	adds	r3, r3, r2
 800452c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004530:	464b      	mov	r3, r9
 8004532:	460a      	mov	r2, r1
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004554:	4649      	mov	r1, r9
 8004556:	008b      	lsls	r3, r1, #2
 8004558:	4641      	mov	r1, r8
 800455a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455e:	4641      	mov	r1, r8
 8004560:	008a      	lsls	r2, r1, #2
 8004562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004566:	f7fc f813 	bl	8000590 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4611      	mov	r1, r2
 8004570:	4b38      	ldr	r3, [pc, #224]	@ (8004654 <UART_SetConfig+0x4e4>)
 8004572:	fba3 2301 	umull	r2, r3, r3, r1
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2264      	movs	r2, #100	@ 0x64
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	1acb      	subs	r3, r1, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	@ 0x32
 8004584:	4a33      	ldr	r2, [pc, #204]	@ (8004654 <UART_SetConfig+0x4e4>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004590:	441c      	add	r4, r3
 8004592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004596:	2200      	movs	r2, #0
 8004598:	673b      	str	r3, [r7, #112]	@ 0x70
 800459a:	677a      	str	r2, [r7, #116]	@ 0x74
 800459c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	415b      	adcs	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b0:	4641      	mov	r1, r8
 80045b2:	1851      	adds	r1, r2, r1
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	4649      	mov	r1, r9
 80045b8:	414b      	adcs	r3, r1
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c8:	4659      	mov	r1, fp
 80045ca:	00cb      	lsls	r3, r1, #3
 80045cc:	4651      	mov	r1, sl
 80045ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d2:	4651      	mov	r1, sl
 80045d4:	00ca      	lsls	r2, r1, #3
 80045d6:	4610      	mov	r0, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	4642      	mov	r2, r8
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e2:	464b      	mov	r3, r9
 80045e4:	460a      	mov	r2, r1
 80045e6:	eb42 0303 	adc.w	r3, r2, r3
 80045ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004604:	4649      	mov	r1, r9
 8004606:	008b      	lsls	r3, r1, #2
 8004608:	4641      	mov	r1, r8
 800460a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460e:	4641      	mov	r1, r8
 8004610:	008a      	lsls	r2, r1, #2
 8004612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004616:	f7fb ffbb 	bl	8000590 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4b0d      	ldr	r3, [pc, #52]	@ (8004654 <UART_SetConfig+0x4e4>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	2164      	movs	r1, #100	@ 0x64
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	3332      	adds	r3, #50	@ 0x32
 8004632:	4a08      	ldr	r2, [pc, #32]	@ (8004654 <UART_SetConfig+0x4e4>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4422      	add	r2, r4
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800464e:	46bd      	mov	sp, r7
 8004650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004654:	51eb851f 	.word	0x51eb851f

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	@ (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	@ (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	@ (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	@ (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f818 	bl	80046b0 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	080046e8 	.word	0x080046e8
 80046a4:	080046e8 	.word	0x080046e8
 80046a8:	080046e8 	.word	0x080046e8
 80046ac:	080046ec 	.word	0x080046ec

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
