
custom_msgs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016658  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  080167f8  080167f8  000177f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080175c4  080175c4  00019534  2**0
                  CONTENTS
  4 .ARM          00000008  080175c4  080175c4  000185c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080175cc  080175cc  00019534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080175cc  080175cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080175d8  080175d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000534  20000000  080175dc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc10  20000538  08017b10  00019538  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e148  08017b10  0001a148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019534  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a631  00000000  00000000  00019564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c0b  00000000  00000000  00033b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001160  00000000  00000000  00038e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000089b4  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f07  00000000  00000000  0004291c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a430d  00000000  00000000  0005c823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00100b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  00100ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010784c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000538 	.word	0x20000538
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080167e0 	.word	0x080167e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000053c 	.word	0x2000053c
 80001dc:	080167e0 	.word	0x080167e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2uiz>:
 8000628:	004a      	lsls	r2, r1, #1
 800062a:	d211      	bcs.n	8000650 <__aeabi_d2uiz+0x28>
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000630:	d211      	bcs.n	8000656 <__aeabi_d2uiz+0x2e>
 8000632:	d50d      	bpl.n	8000650 <__aeabi_d2uiz+0x28>
 8000634:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d40e      	bmi.n	800065c <__aeabi_d2uiz+0x34>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	fa23 f002 	lsr.w	r0, r3, r2
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065a:	d102      	bne.n	8000662 <__aeabi_d2uiz+0x3a>
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000660:	4770      	bx	lr
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	4770      	bx	lr

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000a04:	f006 ff54 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a08:	4b5a      	ldr	r3, [pc, #360]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a10:	f000 f986 	bl	8000d20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a14:	4b58      	ldr	r3, [pc, #352]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f040 8090 	bne.w	8000b42 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01e      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d015      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f023 0307 	bic.w	r3, r3, #7
 8000a40:	3308      	adds	r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00b      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d06a      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
 8000a6c:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d865      	bhi.n	8000b42 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a76:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a80:	e004      	b.n	8000a8c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d903      	bls.n	8000a9e <pvPortMallocMicroROS+0xa6>
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f1      	bne.n	8000a82 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d04c      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2208      	movs	r2, #8
 8000aae:	4413      	add	r3, r2
 8000ab0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d920      	bls.n	8000b0c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	613b      	str	r3, [r7, #16]
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b06:	69b8      	ldr	r0, [r7, #24]
 8000b08:	f000 f96c 	bl	8000de4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d203      	bcs.n	8000b2e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b42:	f006 fec3 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	60fb      	str	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b68:	69fb      	ldr	r3, [r7, #28]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000415c 	.word	0x2000415c
 8000b78:	20004168 	.word	0x20004168
 8000b7c:	20004160 	.word	0x20004160
 8000b80:	20004154 	.word	0x20004154
 8000b84:	20004164 	.word	0x20004164

08000b88 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d04a      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <vPortFreeMicroROS+0x46>
	__asm volatile
 8000bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	60fb      	str	r3, [r7, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	60bb      	str	r3, [r7, #8]
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d019      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d115      	bne.n	8000c30 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c14:	f006 fe4c 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f000 f8dc 	bl	8000de4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c2c:	f006 fe4e 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20004168 	.word	0x20004168
 8000c3c:	20004160 	.word	0x20004160

08000c40 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	425b      	negs	r3, r3
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4413      	add	r3, r2
 8000c54:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <getBlockSize+0x38>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

	return count;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20004168 	.word	0x20004168

08000c7c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c86:	f006 fe13 	bl	80078b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f7ff feb4 	bl	80009f8 <pvPortMallocMicroROS>
 8000c90:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d017      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d014      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffce 	bl	8000c40 <getBlockSize>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d201      	bcs.n	8000cb8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f014 febc 	bl	8015a3a <memcpy>

		vPortFreeMicroROS(pv);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff60 	bl	8000b88 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cc8:	f006 fe00 	bl	80078cc <xTaskResumeAll>

	return newmem;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ce0:	f006 fde6 	bl	80078b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff fe82 	bl	80009f8 <pvPortMallocMicroROS>
 8000cf4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cfa:	e004      	b.n	8000d06 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	613a      	str	r2, [r7, #16]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	617a      	str	r2, [r7, #20]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f5      	bne.n	8000cfc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d10:	f006 fddc 	bl	80078cc <xTaskResumeAll>
  	return mem;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <prvHeapInit+0xac>)
 8000d2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00c      	beq.n	8000d54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f023 0307 	bic.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <prvHeapInit+0xac>)
 8000d50:	4413      	add	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 0307 	bic.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <prvHeapInit+0xb8>)
 8000dae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <prvHeapInit+0xbc>)
 8000db6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <prvHeapInit+0xc0>)
 8000dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20000554 	.word	0x20000554
 8000dd0:	20004154 	.word	0x20004154
 8000dd4:	2000415c 	.word	0x2000415c
 8000dd8:	20004164 	.word	0x20004164
 8000ddc:	20004160 	.word	0x20004160
 8000de0:	20004168 	.word	0x20004168

08000de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <prvInsertBlockIntoFreeList+0xac>)
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e002      	b.n	8000df8 <prvInsertBlockIntoFreeList+0x14>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8f7      	bhi.n	8000df2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d108      	bne.n	8000e26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	441a      	add	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d118      	bne.n	8000e6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d00d      	beq.n	8000e62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e008      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e003      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d002      	beq.n	8000e82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20004154 	.word	0x20004154
 8000e94:	2000415c 	.word	0x2000415c

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 ff1e 	bl	8002cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f844 	bl	8000f2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb00 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fad6 	bl	8001458 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 faaa 	bl	8001404 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f8a8 	bl	8001004 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb4:	f000 f97a 	bl	80011ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb8:	f000 fa0c 	bl	80012d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4816      	ldr	r0, [pc, #88]	@ (8000f18 <main+0x80>)
 8000ec0:	f003 fb70 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <main+0x80>)
 8000ec8:	f003 fb6c 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <main+0x80>)
 8000ed0:	f003 fb68 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <main+0x80>)
 8000ed8:	f003 fb64 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <main+0x84>)
 8000ee0:	f003 fb60 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <main+0x84>)
 8000ee8:	f003 fb5c 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000eec:	2108      	movs	r1, #8
 8000eee:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <main+0x84>)
 8000ef0:	f003 fb58 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <main+0x84>)
 8000ef8:	f003 fb54 	bl	80045a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000efc:	f005 fbba 	bl	8006674 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <main+0x88>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <main+0x8c>)
 8000f06:	f005 fbff 	bl	8006708 <osThreadNew>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <main+0x90>)
 8000f0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f10:	f005 fbd4 	bl	80066bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <main+0x7c>
 8000f18:	20004170 	.word	0x20004170
 8000f1c:	20004200 	.word	0x20004200
 8000f20:	08016864 	.word	0x08016864
 8000f24:	08002065 	.word	0x08002065
 8000f28:	20004350 	.word	0x20004350

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	@ 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	@ 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f014 fcb4 	bl	80158a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f60:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fdb4 	bl	8003b24 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fc2:	f001 f937 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f816 	bl	8004014 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fee:	f001 f921 	bl	8002234 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	@ 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2220      	movs	r2, #32
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f014 fc33 	bl	80158a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b58      	ldr	r3, [pc, #352]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001044:	4a58      	ldr	r2, [pc, #352]	@ (80011a8 <MX_TIM1_Init+0x1a4>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001048:	4b56      	ldr	r3, [pc, #344]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800104a:	2206      	movs	r2, #6
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b55      	ldr	r3, [pc, #340]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001054:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001056:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800105a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b51      	ldr	r3, [pc, #324]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001062:	4b50      	ldr	r3, [pc, #320]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b4e      	ldr	r3, [pc, #312]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	484d      	ldr	r0, [pc, #308]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001070:	f003 f9f0 	bl	8004454 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800107a:	f001 f8db 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001088:	4619      	mov	r1, r3
 800108a:	4846      	ldr	r0, [pc, #280]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800108c:	f003 fbfc 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001096:	f001 f8cd 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800109a:	4842      	ldr	r0, [pc, #264]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800109c:	f003 fa29 	bl	80044f2 <HAL_TIM_PWM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010a6:	f001 f8c5 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b6:	4619      	mov	r1, r3
 80010b8:	483a      	ldr	r0, [pc, #232]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 80010ba:	f003 ff85 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010c4:	f001 f8b6 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c8:	2360      	movs	r3, #96	@ 0x60
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	482d      	ldr	r0, [pc, #180]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 80010ee:	f003 fb09 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010f8:	f001 f89c 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4827      	ldr	r0, [pc, #156]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001106:	f003 fafd 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001110:	f001 f890 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001118:	2208      	movs	r2, #8
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800111e:	f003 faf1 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001128:	f001 f884 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	220c      	movs	r2, #12
 8001132:	4619      	mov	r1, r3
 8001134:	481b      	ldr	r0, [pc, #108]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001136:	f003 fae5 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001140:	f001 f878 	bl	8002234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001168:	f003 ff9c 	bl	80050a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001172:	f001 f85f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001176:	2100      	movs	r1, #0
 8001178:	480a      	ldr	r0, [pc, #40]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800117a:	f003 fa13 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800117e:	2104      	movs	r1, #4
 8001180:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001182:	f003 fa0f 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001186:	2108      	movs	r1, #8
 8001188:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 800118a:	f003 fa0b 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800118e:	210c      	movs	r1, #12
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001192:	f003 fa07 	bl	80045a4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <MX_TIM1_Init+0x1a0>)
 8001198:	f001 fa2e 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 800119c:	bf00      	nop
 800119e:	3758      	adds	r7, #88	@ 0x58
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20004170 	.word	0x20004170
 80011a8:	40010000 	.word	0x40010000

080011ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	@ 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b3c      	ldr	r3, [pc, #240]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80011e6:	2253      	movs	r2, #83	@ 0x53
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80011f0:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80011f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001204:	4832      	ldr	r0, [pc, #200]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001206:	f003 f925 	bl	8004454 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001210:	f001 f810 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	482b      	ldr	r0, [pc, #172]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001222:	f003 fb31 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800122c:	f001 f802 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001230:	4827      	ldr	r0, [pc, #156]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001232:	f003 f95e 	bl	80044f2 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800123c:	f000 fffa 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4619      	mov	r1, r3
 800124e:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001250:	f003 feba 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800125a:	f000 ffeb 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4816      	ldr	r0, [pc, #88]	@ (80012d0 <MX_TIM2_Init+0x124>)
 8001276:	f003 fa45 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001280:	f000 ffd8 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2204      	movs	r2, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <MX_TIM2_Init+0x124>)
 800128c:	f003 fa3a 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001296:	f000 ffcd 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2208      	movs	r2, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80012a2:	f003 fa2f 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80012ac:	f000 ffc2 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80012b4:	f003 f976 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012b8:	2104      	movs	r1, #4
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80012bc:	f003 f972 	bl	80045a4 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <MX_TIM2_Init+0x124>)
 80012c2:	f001 f999 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3738      	adds	r7, #56	@ 0x38
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200041b8 	.word	0x200041b8

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	@ 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001306:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <MX_TIM3_Init+0x12c>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 800130a:	4b3c      	ldr	r3, [pc, #240]	@ (80013fc <MX_TIM3_Init+0x128>)
 800130c:	2206      	movs	r2, #6
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b3a      	ldr	r3, [pc, #232]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001316:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001318:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800131c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132a:	4834      	ldr	r0, [pc, #208]	@ (80013fc <MX_TIM3_Init+0x128>)
 800132c:	f003 f892 	bl	8004454 <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001336:	f000 ff7d 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001344:	4619      	mov	r1, r3
 8001346:	482d      	ldr	r0, [pc, #180]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001348:	f003 fa9e 	bl	8004888 <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001352:	f000 ff6f 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001356:	4829      	ldr	r0, [pc, #164]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001358:	f003 f8cb 	bl	80044f2 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001362:	f000 ff67 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4619      	mov	r1, r3
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <MX_TIM3_Init+0x128>)
 8001376:	f003 fe27 	bl	8004fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001380:	f000 ff58 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	@ 0x60
 8001386:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4818      	ldr	r0, [pc, #96]	@ (80013fc <MX_TIM3_Init+0x128>)
 800139c:	f003 f9b2 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013a6:	f000 ff45 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2204      	movs	r2, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	@ (80013fc <MX_TIM3_Init+0x128>)
 80013b2:	f003 f9a7 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013bc:	f000 ff3a 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2208      	movs	r2, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM3_Init+0x128>)
 80013c8:	f003 f99c 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80013d2:	f000 ff2f 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	220c      	movs	r2, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	@ (80013fc <MX_TIM3_Init+0x128>)
 80013de:	f003 f991 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80013e8:	f000 ff24 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <MX_TIM3_Init+0x128>)
 80013ee:	f001 f903 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	@ 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20004200 	.word	0x20004200
 8001400:	40000400 	.word	0x40000400

08001404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <MX_USART2_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800143c:	f003 fe84 	bl	8005148 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 fef5 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20004248 	.word	0x20004248
 8001454:	40004400 	.word	0x40004400

08001458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <MX_DMA_Init+0x4c>)
 8001468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <MX_DMA_Init+0x4c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2105      	movs	r1, #5
 800147e:	2010      	movs	r0, #16
 8001480:	f001 fd79 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001484:	2010      	movs	r0, #16
 8001486:	f001 fd92 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2011      	movs	r0, #17
 8001490:	f001 fd71 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001494:	2011      	movs	r0, #17
 8001496:	f001 fd8a 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <MX_GPIO_Init+0xd0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <MX_GPIO_Init+0xd0>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	4812      	ldr	r0, [pc, #72]	@ (800157c <MX_GPIO_Init+0xd4>)
 8001534:	f002 fadc 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	@ (8001580 <MX_GPIO_Init+0xd8>)
 8001550:	f002 f94a 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001554:	2320      	movs	r3, #32
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_GPIO_Init+0xd4>)
 800156c:	f002 f93c 	bl	80037e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020800 	.word	0x40020800

08001584 <SetServoPosition>:
bool connection_lost = false;


//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CAMERA KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
void SetServoPosition(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t* position, uint8_t step, uint8_t servoDirection, uint16_t camera) {
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	70fb      	strb	r3, [r7, #3]
    if (servoDirection > 0) {
 8001592:	7e3b      	ldrb	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00d      	beq.n	80015b4 <SetServoPosition+0x30>
        *position = (*position + step <= DEGREE_MAX) ? *position + step : DEGREE_MAX;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	4413      	add	r3, r2
 80015a2:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015a6:	4293      	cmp	r3, r2
 80015a8:	bfa8      	it	ge
 80015aa:	4613      	movge	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	e013      	b.n	80015dc <SetServoPosition+0x58>
    }
    	else if (servoDirection < 0) {
        *position = (*position - step >= DEGREE_MIN) ? *position - step : DEGREE_MIN;
    }
    	else if (servoDirection == 0) {
 80015b4:	7e3b      	ldrb	r3, [r7, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d110      	bne.n	80015dc <SetServoPosition+0x58>
    	*position = (camera > DEGREE_MAX) ? DEGREE_MAX : (camera < DEGREE_MIN) ? DEGREE_MIN : camera;
 80015ba:	8bbb      	ldrh	r3, [r7, #28]
 80015bc:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d807      	bhi.n	80015d4 <SetServoPosition+0x50>
 80015c4:	8bbb      	ldrh	r3, [r7, #28]
 80015c6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015ca:	bf38      	it	cc
 80015cc:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	e001      	b.n	80015d8 <SetServoPosition+0x54>
 80015d4:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <SetServoPosition+0x6a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	881a      	ldrh	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015ec:	e019      	b.n	8001622 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d106      	bne.n	8001602 <SetServoPosition+0x7e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	8819      	ldrh	r1, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	460b      	mov	r3, r1
 80015fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001600:	e00f      	b.n	8001622 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d106      	bne.n	8001616 <SetServoPosition+0x92>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8819      	ldrh	r1, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	460b      	mov	r3, r1
 8001612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001614:	e005      	b.n	8001622 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8819      	ldrh	r1, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	460b      	mov	r3, r1
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <KameraKontrol>:

void KameraKontrol()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af02      	add	r7, sp, #8
    static uint16_t degreey = 2200;
    static uint16_t degreex = 1500;

    degreex = (degreex > DEGREE_MAX) ? DEGREE_MAX : (degreex < DEGREE_MIN) ? DEGREE_MIN : degreex;
 8001636:	4b35      	ldr	r3, [pc, #212]	@ (800170c <KameraKontrol+0xdc>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f640 2228 	movw	r2, #2600	@ 0xa28
 800163e:	4293      	cmp	r3, r2
 8001640:	d808      	bhi.n	8001654 <KameraKontrol+0x24>
 8001642:	4b32      	ldr	r3, [pc, #200]	@ (800170c <KameraKontrol+0xdc>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800164a:	bf38      	it	cc
 800164c:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 8001650:	b29b      	uxth	r3, r3
 8001652:	e001      	b.n	8001658 <KameraKontrol+0x28>
 8001654:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001658:	4a2c      	ldr	r2, [pc, #176]	@ (800170c <KameraKontrol+0xdc>)
 800165a:	8013      	strh	r3, [r2, #0]
    degreey = (degreey > DEGREE_MAX) ? DEGREE_MAX : (degreey < DEGREE_MIN) ? DEGREE_MIN : degreey;
 800165c:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <KameraKontrol+0xe0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001664:	4293      	cmp	r3, r2
 8001666:	d808      	bhi.n	800167a <KameraKontrol+0x4a>
 8001668:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <KameraKontrol+0xe0>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001670:	bf38      	it	cc
 8001672:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 8001676:	b29b      	uxth	r3, r3
 8001678:	e001      	b.n	800167e <KameraKontrol+0x4e>
 800167a:	f640 2328 	movw	r3, #2600	@ 0xa28
 800167e:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <KameraKontrol+0xe0>)
 8001680:	8013      	strh	r3, [r2, #0]



    		SetServoPosition(&htim2, TIM_CHANNEL_2, &degreey, DEGREE_STEP, 0, rcjoystick.cameray);
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <KameraKontrol+0xe4>)
 8001684:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001688:	b29b      	uxth	r3, r3
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	230a      	movs	r3, #10
 8001692:	4a1f      	ldr	r2, [pc, #124]	@ (8001710 <KameraKontrol+0xe0>)
 8001694:	2104      	movs	r1, #4
 8001696:	4820      	ldr	r0, [pc, #128]	@ (8001718 <KameraKontrol+0xe8>)
 8001698:	f7ff ff74 	bl	8001584 <SetServoPosition>


    switch (rcjoystick.camerax)
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <KameraKontrol+0xe4>)
 800169e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d011      	beq.n	80016ca <KameraKontrol+0x9a>
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	dc2b      	bgt.n	8001702 <KameraKontrol+0xd2>
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ae:	d01a      	beq.n	80016e6 <KameraKontrol+0xb6>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d126      	bne.n	8001702 <KameraKontrol+0xd2>
    {
    	case 0: // Dur
    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, degreex);
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <KameraKontrol+0xdc>)
 80016b6:	881a      	ldrh	r2, [r3, #0]
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <KameraKontrol+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	2120      	movs	r1, #32
 80016c2:	4816      	ldr	r0, [pc, #88]	@ (800171c <KameraKontrol+0xec>)
 80016c4:	f002 fa14 	bl	8003af0 <HAL_GPIO_WritePin>
    		break;
 80016c8:	e01c      	b.n	8001704 <KameraKontrol+0xd4>

        case 1: // Sağa
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, 1, rcjoystick.camerax);
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <KameraKontrol+0xe4>)
 80016cc:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	230a      	movs	r3, #10
 80016da:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <KameraKontrol+0xdc>)
 80016dc:	2100      	movs	r1, #0
 80016de:	480e      	ldr	r0, [pc, #56]	@ (8001718 <KameraKontrol+0xe8>)
 80016e0:	f7ff ff50 	bl	8001584 <SetServoPosition>
            break;
 80016e4:	e00e      	b.n	8001704 <KameraKontrol+0xd4>

        case -1: // Sola
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, -1, rcjoystick.camerax);
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <KameraKontrol+0xe4>)
 80016e8:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	23ff      	movs	r3, #255	@ 0xff
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	230a      	movs	r3, #10
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <KameraKontrol+0xdc>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4807      	ldr	r0, [pc, #28]	@ (8001718 <KameraKontrol+0xe8>)
 80016fc:	f7ff ff42 	bl	8001584 <SetServoPosition>
            break;
 8001700:	e000      	b.n	8001704 <KameraKontrol+0xd4>

        default:
            // Geçersiz joystick z değeri
            break;
 8001702:	bf00      	nop
    }
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000090 	.word	0x20000090
 8001710:	20000092 	.word	0x20000092
 8001714:	20000000 	.word	0x20000000
 8001718:	200041b8 	.word	0x200041b8
 800171c:	40020000 	.word	0x40020000

08001720 <speedToPWM>:

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< MOTOR KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
/* --- Hız-PWM Uyumluluğu --- */
int16_t speedToPWM(int16_t speed, int16_t max_speed) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	460a      	mov	r2, r1
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	80bb      	strh	r3, [r7, #4]
    return speed;
 8001730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <setPWM>:

/* --- PWM Ayarı --- */
void setPWM(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, uint32_t channel, int16_t pwmvalue) {
 8001740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001744:	b08f      	sub	sp, #60	@ 0x3c
 8001746:	af00      	add	r7, sp, #0
 8001748:	6378      	str	r0, [r7, #52]	@ 0x34
 800174a:	6339      	str	r1, [r7, #48]	@ 0x30
 800174c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800174e:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 8001750:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001754:	2b00      	cmp	r3, #0
 8001756:	db79      	blt.n	800184c <setPWM+0x10c>
 8001758:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800175c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001760:	dc74      	bgt.n	800184c <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(htim1, channel, fabs(pwmvalue));
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d113      	bne.n	8001790 <setPWM+0x50>
 8001768:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fef1 	bl	8000554 <__aeabi_i2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	623a      	str	r2, [r7, #32]
 8001778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
 800177e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001780:	681c      	ldr	r4, [r3, #0]
 8001782:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001786:	f7fe ff4f 	bl	8000628 <__aeabi_d2uiz>
 800178a:	4603      	mov	r3, r0
 800178c:	6363      	str	r3, [r4, #52]	@ 0x34
 800178e:	e040      	b.n	8001812 <setPWM+0xd2>
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	2b04      	cmp	r3, #4
 8001794:	d113      	bne.n	80017be <setPWM+0x7e>
 8001796:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe feda 	bl	8000554 <__aeabi_i2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	61ba      	str	r2, [r7, #24]
 80017a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ae:	681c      	ldr	r4, [r3, #0]
 80017b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b4:	f7fe ff38 	bl	8000628 <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	63a3      	str	r3, [r4, #56]	@ 0x38
 80017bc:	e029      	b.n	8001812 <setPWM+0xd2>
 80017be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d113      	bne.n	80017ec <setPWM+0xac>
 80017c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fec3 	bl	8000554 <__aeabi_i2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	613a      	str	r2, [r7, #16]
 80017d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017dc:	681c      	ldr	r4, [r3, #0]
 80017de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017e2:	f7fe ff21 	bl	8000628 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80017ea:	e012      	b.n	8001812 <setPWM+0xd2>
 80017ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe feaf 	bl	8000554 <__aeabi_i2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001804:	681c      	ldr	r4, [r3, #0]
 8001806:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800180a:	f7fe ff0d 	bl	8000628 <__aeabi_d2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 8001812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d104      	bne.n	8001822 <setPWM+0xe2>
 8001818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001820:	e113      	b.n	8001a4a <setPWM+0x30a>
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	2b04      	cmp	r3, #4
 8001826:	d104      	bne.n	8001832 <setPWM+0xf2>
 8001828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2300      	movs	r3, #0
 800182e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001830:	e10b      	b.n	8001a4a <setPWM+0x30a>
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	2b08      	cmp	r3, #8
 8001836:	d104      	bne.n	8001842 <setPWM+0x102>
 8001838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001840:	e103      	b.n	8001a4a <setPWM+0x30a>
 8001842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	e0fe      	b.n	8001a4a <setPWM+0x30a>
    }

    else if(pwmvalue >= -1000 && pwmvalue < 0 ) {
 800184c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001850:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001854:	db75      	blt.n	8001942 <setPWM+0x202>
 8001856:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800185a:	2b00      	cmp	r3, #0
 800185c:	da71      	bge.n	8001942 <setPWM+0x202>
        __HAL_TIM_SET_COMPARE(htim1, channel, 0);
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <setPWM+0x12e>
 8001864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	@ 0x34
 800186c:	e013      	b.n	8001896 <setPWM+0x156>
 800186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001870:	2b04      	cmp	r3, #4
 8001872:	d104      	bne.n	800187e <setPWM+0x13e>
 8001874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	6393      	str	r3, [r2, #56]	@ 0x38
 800187c:	e00b      	b.n	8001896 <setPWM+0x156>
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	2b08      	cmp	r3, #8
 8001882:	d104      	bne.n	800188e <setPWM+0x14e>
 8001884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800188c:	e003      	b.n	8001896 <setPWM+0x156>
 800188e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2300      	movs	r3, #0
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, fabs(pwmvalue));
 8001896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d113      	bne.n	80018c4 <setPWM+0x184>
 800189c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe57 	bl	8000554 <__aeabi_i2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	603a      	str	r2, [r7, #0]
 80018ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	681c      	ldr	r4, [r3, #0]
 80018b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ba:	f7fe feb5 	bl	8000628 <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80018c2:	e0c2      	b.n	8001a4a <setPWM+0x30a>
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d112      	bne.n	80018f0 <setPWM+0x1b0>
 80018ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe40 	bl	8000554 <__aeabi_i2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4615      	mov	r5, r2
 80018da:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80018de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e0:	681c      	ldr	r4, [r3, #0]
 80018e2:	4628      	mov	r0, r5
 80018e4:	4631      	mov	r1, r6
 80018e6:	f7fe fe9f 	bl	8000628 <__aeabi_d2uiz>
 80018ea:	4603      	mov	r3, r0
 80018ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018ee:	e0ac      	b.n	8001a4a <setPWM+0x30a>
 80018f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d112      	bne.n	800191c <setPWM+0x1dc>
 80018f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe2a 	bl	8000554 <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4692      	mov	sl, r2
 8001906:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190c:	681c      	ldr	r4, [r3, #0]
 800190e:	4650      	mov	r0, sl
 8001910:	4659      	mov	r1, fp
 8001912:	f7fe fe89 	bl	8000628 <__aeabi_d2uiz>
 8001916:	4603      	mov	r3, r0
 8001918:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800191a:	e096      	b.n	8001a4a <setPWM+0x30a>
 800191c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe17 	bl	8000554 <__aeabi_i2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4690      	mov	r8, r2
 800192c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	4640      	mov	r0, r8
 8001936:	4649      	mov	r1, r9
 8001938:	f7fe fe76 	bl	8000628 <__aeabi_d2uiz>
 800193c:	4603      	mov	r3, r0
 800193e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001940:	e083      	b.n	8001a4a <setPWM+0x30a>
    }

    else if(pwmvalue > 1000 ) {
 8001942:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800194a:	dd3c      	ble.n	80019c6 <setPWM+0x286>
        __HAL_TIM_SET_COMPARE(htim1, channel, 1000);
 800194c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <setPWM+0x21e>
 8001952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800195a:	635a      	str	r2, [r3, #52]	@ 0x34
 800195c:	e016      	b.n	800198c <setPWM+0x24c>
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	2b04      	cmp	r3, #4
 8001962:	d105      	bne.n	8001970 <setPWM+0x230>
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196c:	6393      	str	r3, [r2, #56]	@ 0x38
 800196e:	e00d      	b.n	800198c <setPWM+0x24c>
 8001970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001972:	2b08      	cmp	r3, #8
 8001974:	d105      	bne.n	8001982 <setPWM+0x242>
 8001976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001980:	e004      	b.n	800198c <setPWM+0x24c>
 8001982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 800198c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d104      	bne.n	800199c <setPWM+0x25c>
 8001992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 800199a:	e056      	b.n	8001a4a <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d104      	bne.n	80019ac <setPWM+0x26c>
 80019a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80019aa:	e04e      	b.n	8001a4a <setPWM+0x30a>
 80019ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d104      	bne.n	80019bc <setPWM+0x27c>
 80019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019ba:	e046      	b.n	8001a4a <setPWM+0x30a>
 80019bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019c4:	e041      	b.n	8001a4a <setPWM+0x30a>
    else if(pwmvalue < -1000 ) {
 80019c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80019ca:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80019ce:	da3c      	bge.n	8001a4a <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim1, channel, 0);
 80019d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d104      	bne.n	80019e0 <setPWM+0x2a0>
 80019d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019de:	e013      	b.n	8001a08 <setPWM+0x2c8>
 80019e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d104      	bne.n	80019f0 <setPWM+0x2b0>
 80019e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80019ee:	e00b      	b.n	8001a08 <setPWM+0x2c8>
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d104      	bne.n	8001a00 <setPWM+0x2c0>
 80019f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2300      	movs	r3, #0
 80019fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019fe:	e003      	b.n	8001a08 <setPWM+0x2c8>
 8001a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2300      	movs	r3, #0
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <setPWM+0x2da>
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a16:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a18:	e017      	b.n	8001a4a <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d105      	bne.n	8001a2c <setPWM+0x2ec>
 8001a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a28:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a2a:	e00e      	b.n	8001a4a <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d105      	bne.n	8001a3e <setPWM+0x2fe>
 8001a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a3c:	e005      	b.n	8001a4a <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a46:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a48:	e7ff      	b.n	8001a4a <setPWM+0x30a>
 8001a4a:	bf00      	nop
 8001a4c:	373c      	adds	r7, #60	@ 0x3c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a54 <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Wheel *wheel, int max_pwm, int min_pwm, int dt) {
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]


	float error = wheel->targetSpeed-wheel->currentSpeed;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	edc7 7a06 	vstr	s15, [r7, #24]
    wheel->integralSpeed += error / dt;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a94:	ed97 6a06 	vldr	s12, [r7, #24]
 8001a98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa4:	ee17 2a90 	vmov	r2, s15
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed > wheel->integralLimit) wheel->integralSpeed = max_pwm / wheel->KP;  // Anti-windup
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 7a06 	vldr	s15, [r3, #24]
 8001abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd0f      	ble.n	8001ae8 <calculatePID+0x94>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed < -wheel->integralLimit) wheel->integralSpeed = min_pwm / wheel->KP;  // Anti-windup
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001afa:	eef1 7a67 	vneg.f32	s15, s15
 8001afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	d50f      	bpl.n	8001b28 <calculatePID+0xd4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	ee17 2a90 	vmov	r2, s15
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]

    float derivative = (error - wheel->previousErrorSpeed) * dt;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel->previousErrorSpeed = error;
 8001b50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b58:	ee17 3a90 	vmov	r3, s15
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	809a      	strh	r2, [r3, #4]

    float output = wheel->KP * error + wheel->KI * wheel->integralSpeed + wheel->KD * derivative;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	edc7 7a07 	vstr	s15, [r7, #28]

    if (output > max_pwm) output = max_pwm;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd06      	ble.n	8001bc6 <calculatePID+0x172>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc2:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output < min_pwm) output = min_pwm;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d506      	bpl.n	8001bec <calculatePID+0x198>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	ee07 3a90 	vmov	s15, r3
}
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	3724      	adds	r7, #36	@ 0x24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <limitSpeedToPWM>:


/* --- Hız Sınırlandırma --- */
int16_t limitSpeedToPWM(int16_t speed, GroundType groundType, int16_t max_speed) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	717b      	strb	r3, [r7, #5]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	807b      	strh	r3, [r7, #2]

	if(rcjoystick.light==1){
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <limitSpeedToPWM+0xf0>)
 8001c14:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10f      	bne.n	8001c3c <limitSpeedToPWM+0x3c>
		speed=speed*(MAX_SPEED_S/1000);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	0052      	lsls	r2, r2, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	80fb      	strh	r3, [r7, #6]
		if (speed > MAX_SPEED_S) {speed = MAX_SPEED_S;}/*rgb yak*/
 8001c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001c30:	4293      	cmp	r3, r2
 8001c32:	dd0b      	ble.n	8001c4c <limitSpeedToPWM+0x4c>
 8001c34:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c38:	80fb      	strh	r3, [r7, #6]
 8001c3a:	e007      	b.n	8001c4c <limitSpeedToPWM+0x4c>
	}/*rgb yak*/

	else{
		if (speed > max_speed) {speed = max_speed;}/*rgb yak*/
 8001c3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dd01      	ble.n	8001c4c <limitSpeedToPWM+0x4c>
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	80fb      	strh	r3, [r7, #6]
	}

	if (speed < MIN_SPEED_D) {speed = MIN_SPEED_D;}/*rgb yak*/
 8001c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c50:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c54:	da02      	bge.n	8001c5c <limitSpeedToPWM+0x5c>
 8001c56:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8001c5a:	80fb      	strh	r3, [r7, #6]





	if (speed < MIN_SPEED_D) {speed = MIN_SPEED_D;}/*rgb yak*/
 8001c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c60:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c64:	da02      	bge.n	8001c6c <limitSpeedToPWM+0x6c>
 8001c66:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8001c6a:	80fb      	strh	r3, [r7, #6]


	switch (groundType) {
 8001c6c:	797b      	ldrb	r3, [r7, #5]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d002      	beq.n	8001c78 <limitSpeedToPWM+0x78>
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d017      	beq.n	8001ca6 <limitSpeedToPWM+0xa6>
 8001c76:	e02d      	b.n	8001cd4 <limitSpeedToPWM+0xd4>
        case GROUND_SLIPPERY:
            return speedToPWM(speed, max_speed)*0.5f; // Kaygan zemin: %50 hız
 8001c78:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fd4c 	bl	8001720 <speedToPWM>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9e:	ee17 3a90 	vmov	r3, s15
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	e01f      	b.n	8001ce6 <limitSpeedToPWM+0xe6>
        case GROUND_ROUGH:
            return speedToPWM(speed, max_speed)*0.8f; // Engebeli zemin: %80 hız
 8001ca6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fd35 	bl	8001720 <speedToPWM>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001cf4 <limitSpeedToPWM+0xf4>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	e008      	b.n	8001ce6 <limitSpeedToPWM+0xe6>
        default:
            return speedToPWM(speed, max_speed);        // Normal zemin: Tam hız
 8001cd4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd1e 	bl	8001720 <speedToPWM>
 8001ce4:	4603      	mov	r3, r0
		}
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	3f4ccccd 	.word	0x3f4ccccd

08001cf8 <controlWheel>:

uint64_t now;
/* --- Tekerlek Kontrolü --- */
void controlWheel(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, uint32_t channel, Wheel *wheel) {
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]

	now = HAL_GetTick();
 8001d06:	f001 f84f 	bl	8002da8 <HAL_GetTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	461c      	mov	r4, r3
 8001d10:	4615      	mov	r5, r2
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <controlWheel+0x70>)
 8001d14:	e9c3 4500 	strd	r4, r5, [r3]
	dt = now - last_heartbeat_time;
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <controlWheel+0x70>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <controlWheel+0x74>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <controlWheel+0x78>)
 8001d28:	601a      	str	r2, [r3, #0]

	int16_t pwmValue = calculatePID(wheel, MAX_SPEED_PWM, MIN_SPEED_PWM, dt);
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <controlWheel+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <controlWheel+0x7c>)
 8001d30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff fe8d 	bl	8001a54 <calculatePID>
 8001d3a:	eef0 7a40 	vmov.f32	s15, s0
 8001d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d42:	ee17 3a90 	vmov	r3, s15
 8001d46:	82fb      	strh	r3, [r7, #22]
	last_heartbeat_time = HAL_GetTick();
 8001d48:	f001 f82e 	bl	8002da8 <HAL_GetTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <controlWheel+0x74>)
 8001d50:	6013      	str	r3, [r2, #0]
	setPWM(htim1, htim3, channel, pwmValue);
 8001d52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fcf0 	bl	8001740 <setPWM>

}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bdb0      	pop	{r4, r5, r7, pc}
 8001d68:	20004380 	.word	0x20004380
 8001d6c:	2000436c 	.word	0x2000436c
 8001d70:	20004368 	.word	0x20004368
 8001d74:	fffffc18 	.word	0xfffffc18

08001d78 <controlDirection>:

/* --- Yon Kontrolü --- */
void controlDirection(int16_t Y, int16_t X, Direction *direction, int16_t *rotation_speedL, int16_t *rotation_speedR, uint8_t Gear){
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	81fb      	strh	r3, [r7, #14]
 8001d86:	460b      	mov	r3, r1
 8001d88:	81bb      	strh	r3, [r7, #12]
    int16_t derivative = (error - direction->previousErrorDirection);
    direction->previousErrorDirection = error;

    int16_t output = Direction_KP * error + Direction_KI * direction->integralDirection + Direction_KD * derivative;*/

    int16_t output = X;
 8001d8a:	89bb      	ldrh	r3, [r7, #12]
 8001d8c:	82fb      	strh	r3, [r7, #22]
    if (output > MAX_DIRECTION_SPEED) output = MAX_DIRECTION_SPEED;
 8001d8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d92:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d96:	dd02      	ble.n	8001d9e <controlDirection+0x26>
 8001d98:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d9c:	82fb      	strh	r3, [r7, #22]
    if (output < MIN_DIRECTION_SPEED) output = MIN_DIRECTION_SPEED;
 8001d9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001da2:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001da6:	da02      	bge.n	8001dae <controlDirection+0x36>
 8001da8:	f64f 63d4 	movw	r3, #65236	@ 0xfed4
 8001dac:	82fb      	strh	r3, [r7, #22]


		*rotation_speedL=-output;
 8001dae:	8afb      	ldrh	r3, [r7, #22]
 8001db0:	425b      	negs	r3, r3
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=output;
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	8afa      	ldrh	r2, [r7, #22]
 8001dbe:	801a      	strh	r2, [r3, #0]




}
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <controlRover>:


/* --- Rover Kontrol Fonksiyonu --- */
void controlRover(TIM_HandleTypeDef *htim1,TIM_HandleTypeDef *htim3 , int16_t rotation_speedL, int16_t rotation_speedR, uint16_t throttle) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	80fb      	strh	r3, [r7, #6]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80bb      	strh	r3, [r7, #4]


	    leftFrontWheel.targetSpeed  = (limitSpeedToPWM(throttle+rotation_speedL , currentGround, MAX_SPEED_D));
 8001de2:	88fa      	ldrh	r2, [r7, #6]
 8001de4:	8b3b      	ldrh	r3, [r7, #24]
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4a2b      	ldr	r2, [pc, #172]	@ (8001e9c <controlRover+0xd0>)
 8001dee:	7811      	ldrb	r1, [r2, #0]
 8001df0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff03 	bl	8001c00 <limitSpeedToPWM>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <controlRover+0xd4>)
 8001e00:	801a      	strh	r2, [r3, #0]
	    leftBackWheel.targetSpeed   = (limitSpeedToPWM(throttle+rotation_speedL , currentGround, MAX_SPEED_D));
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <controlRover+0xd0>)
 8001e0e:	7811      	ldrb	r1, [r2, #0]
 8001e10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fef3 	bl	8001c00 <limitSpeedToPWM>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <controlRover+0xd8>)
 8001e20:	801a      	strh	r2, [r3, #0]
	    rightFrontWheel.targetSpeed = (limitSpeedToPWM(throttle+rotation_speedR , currentGround, MAX_SPEED_D));
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	4413      	add	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <controlRover+0xd0>)
 8001e2e:	7811      	ldrb	r1, [r2, #0]
 8001e30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fee3 	bl	8001c00 <limitSpeedToPWM>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <controlRover+0xdc>)
 8001e40:	801a      	strh	r2, [r3, #0]
	    rightBackWheel.targetSpeed  = (limitSpeedToPWM(throttle+rotation_speedR , currentGround, MAX_SPEED_D));
 8001e42:	88ba      	ldrh	r2, [r7, #4]
 8001e44:	8b3b      	ldrh	r3, [r7, #24]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4a13      	ldr	r2, [pc, #76]	@ (8001e9c <controlRover+0xd0>)
 8001e4e:	7811      	ldrb	r1, [r2, #0]
 8001e50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fed3 	bl	8001c00 <limitSpeedToPWM>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <controlRover+0xe0>)
 8001e60:	801a      	strh	r2, [r3, #0]


	    controlWheel(htim1, htim3, TIM_CHANNEL_1, &leftFrontWheel);
 8001e62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <controlRover+0xd4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff ff45 	bl	8001cf8 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_2, &rightFrontWheel);
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <controlRover+0xdc>)
 8001e70:	2204      	movs	r2, #4
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff ff3f 	bl	8001cf8 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_3, &leftBackWheel);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <controlRover+0xd8>)
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff ff39 	bl	8001cf8 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_4, &rightBackWheel);
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <controlRover+0xe0>)
 8001e88:	220c      	movs	r2, #12
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff ff33 	bl	8001cf8 <controlWheel>



}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000416c 	.word	0x2000416c
 8001ea0:	20000014 	.word	0x20000014
 8001ea4:	2000004c 	.word	0x2000004c
 8001ea8:	20000030 	.word	0x20000030
 8001eac:	20000068 	.word	0x20000068

08001eb0 <subscription_callback_encoder>:



void subscription_callback_encoder(const void * msgin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	const rover_msgs__msg__EncoderMsg * incoming_msg = (const rover_msgs__msg__EncoderMsg *)msgin;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60fb      	str	r3, [r7, #12]

	leftFrontWheel.currentSpeed = incoming_msg->m1*2.6f ;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f38 <subscription_callback_encoder+0x88>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <subscription_callback_encoder+0x8c>)
 8001ed6:	805a      	strh	r2, [r3, #2]
	rightFrontWheel.currentSpeed = incoming_msg->m2*2.6f;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ede:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001f38 <subscription_callback_encoder+0x88>
 8001ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <subscription_callback_encoder+0x90>)
 8001ef2:	805a      	strh	r2, [r3, #2]
	leftBackWheel.currentSpeed = incoming_msg->m3*2.6f;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001efa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001f38 <subscription_callback_encoder+0x88>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <subscription_callback_encoder+0x94>)
 8001f0e:	805a      	strh	r2, [r3, #2]
	rightBackWheel.currentSpeed = incoming_msg->m4*2.6f;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f16:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f38 <subscription_callback_encoder+0x88>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f22:	ee17 3a90 	vmov	r3, s15
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <subscription_callback_encoder+0x98>)
 8001f2a:	805a      	strh	r2, [r3, #2]

}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40266666 	.word	0x40266666
 8001f3c:	20000014 	.word	0x20000014
 8001f40:	20000030 	.word	0x20000030
 8001f44:	2000004c 	.word	0x2000004c
 8001f48:	20000068 	.word	0x20000068

08001f4c <subscription_callback_controller>:


void subscription_callback_controller(const void * msgin){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	6078      	str	r0, [r7, #4]


	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4839      	ldr	r0, [pc, #228]	@ (8002044 <subscription_callback_controller+0xf8>)
 8001f5e:	f001 fdc7 	bl	8003af0 <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_message_time = HAL_GetTick();
 8001f62:	f000 ff21 	bl	8002da8 <HAL_GetTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a37      	ldr	r2, [pc, #220]	@ (8002048 <subscription_callback_controller+0xfc>)
 8001f6a:	6013      	str	r3, [r2, #0]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2120      	movs	r1, #32
 8001f70:	4834      	ldr	r0, [pc, #208]	@ (8002044 <subscription_callback_controller+0xf8>)
 8001f72:	f001 fdbd 	bl	8003af0 <HAL_GPIO_WritePin>
	rcjoystick.x = (int)incoming_msg->x;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f84:	4b31      	ldr	r3, [pc, #196]	@ (800204c <subscription_callback_controller+0x100>)
 8001f86:	edc3 7a00 	vstr	s15, [r3]
	rcjoystick.y = (int)incoming_msg->y;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <subscription_callback_controller+0x100>)
 8001f9a:	edc3 7a01 	vstr	s15, [r3, #4]
	rcjoystick.throttle = (int)incoming_msg->throttle;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	4b27      	ldr	r3, [pc, #156]	@ (800204c <subscription_callback_controller+0x100>)
 8001fb0:	811a      	strh	r2, [r3, #8]
	rcjoystick.camerax = (int)incoming_msg->camerax;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <subscription_callback_controller+0x100>)
 8001fba:	735a      	strb	r2, [r3, #13]
	rcjoystick.cameray = (int)incoming_msg->cameray;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	4b22      	ldr	r3, [pc, #136]	@ (800204c <subscription_callback_controller+0x100>)
 8001fc4:	815a      	strh	r2, [r3, #10]
	rcjoystick.light = (uint8_t)incoming_msg->light;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <subscription_callback_controller+0x100>)
 8001fce:	731a      	strb	r2, [r3, #12]
	rcjoystick.gear = incoming_msg->gear;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <subscription_callback_controller+0x100>)
 8001fda:	741a      	strb	r2, [r3, #16]
	roverDirection.currentDirection = incoming_msg->yaw;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <subscription_callback_controller+0x104>)
 8001fe4:	805a      	strh	r2, [r3, #2]

    // Rover'ı kontrol et
    controlDirection(rcjoystick.y, rcjoystick.x, &roverDirection, &rotation_speedL, &rotation_speedR, rcjoystick.gear);
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <subscription_callback_controller+0x100>)
 8001fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	b218      	sxth	r0, r3
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <subscription_callback_controller+0x100>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b219      	sxth	r1, r3
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <subscription_callback_controller+0x100>)
 8002008:	7c1b      	ldrb	r3, [r3, #16]
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <subscription_callback_controller+0x108>)
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <subscription_callback_controller+0x10c>)
 8002012:	4a0f      	ldr	r2, [pc, #60]	@ (8002050 <subscription_callback_controller+0x104>)
 8002014:	f7ff feb0 	bl	8001d78 <controlDirection>
    controlRover(&htim1, &htim3, rotation_speedL, rotation_speedR, rcjoystick.throttle);
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <subscription_callback_controller+0x10c>)
 800201a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <subscription_callback_controller+0x108>)
 8002020:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <subscription_callback_controller+0x100>)
 8002026:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800202a:	b29b      	uxth	r3, r3
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	490a      	ldr	r1, [pc, #40]	@ (800205c <subscription_callback_controller+0x110>)
 8002032:	480b      	ldr	r0, [pc, #44]	@ (8002060 <subscription_callback_controller+0x114>)
 8002034:	f7ff feca 	bl	8001dcc <controlRover>
    KameraKontrol();
 8002038:	f7ff fafa 	bl	8001630 <KameraKontrol>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40020000 	.word	0x40020000
 8002048:	20004374 	.word	0x20004374
 800204c:	20000000 	.word	0x20000000
 8002050:	20000084 	.word	0x20000084
 8002054:	20004366 	.word	0x20004366
 8002058:	20004364 	.word	0x20004364
 800205c:	20004200 	.word	0x20004200
 8002060:	20004170 	.word	0x20004170

08002064 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b0d4      	sub	sp, #336	@ 0x150
 8002068:	af02      	add	r7, sp, #8
 800206a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800206e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002072:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8002074:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <StartDefaultTask+0x170>)
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <StartDefaultTask+0x174>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4b57      	ldr	r3, [pc, #348]	@ (80021dc <StartDefaultTask+0x178>)
 800207e:	4a58      	ldr	r2, [pc, #352]	@ (80021e0 <StartDefaultTask+0x17c>)
 8002080:	4958      	ldr	r1, [pc, #352]	@ (80021e4 <StartDefaultTask+0x180>)
 8002082:	2001      	movs	r0, #1
 8002084:	f008 f820 	bl	800a0c8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002088:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800208c:	4618      	mov	r0, r3
 800208e:	f007 ff6d 	bl	8009f6c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8002092:	4b55      	ldr	r3, [pc, #340]	@ (80021e8 <StartDefaultTask+0x184>)
 8002094:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8002098:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <StartDefaultTask+0x188>)
 800209a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800209e:	4b54      	ldr	r3, [pc, #336]	@ (80021f0 <StartDefaultTask+0x18c>)
 80020a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80020a4:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <StartDefaultTask+0x190>)
 80020a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	      rclc_support_t support;
	      rclc_executor_t executor;
	      rcl_allocator_t allocator;


	      allocator = rcl_get_default_allocator();
 80020aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020ae:	f5a3 7492 	sub.w	r4, r3, #292	@ 0x124
 80020b2:	463b      	mov	r3, r7
 80020b4:	4618      	mov	r0, r3
 80020b6:	f007 ff67 	bl	8009f88 <rcutils_get_default_allocator>
 80020ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020c2:	461d      	mov	r5, r3
 80020c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 80020cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d0:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	f007 fe86 	bl	8009de8 <rclc_support_init>


	      	    // create node
	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 80020dc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80020e0:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <StartDefaultTask+0x194>)
 80020e2:	4946      	ldr	r1, [pc, #280]	@ (80021fc <StartDefaultTask+0x198>)
 80020e4:	4846      	ldr	r0, [pc, #280]	@ (8002200 <StartDefaultTask+0x19c>)
 80020e6:	f007 fec9 	bl	8009e7c <rclc_node_init_default>
	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 80020ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ee:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80020f2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80020f6:	2202      	movs	r2, #2
 80020f8:	f007 fbae 	bl	8009858 <rclc_executor_init>


	      	    // create subscription
	      rclc_subscription_init_default(
 80020fc:	f007 fffa 	bl	800a0f4 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8002100:	4602      	mov	r2, r0
 8002102:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <StartDefaultTask+0x1a0>)
 8002104:	493e      	ldr	r1, [pc, #248]	@ (8002200 <StartDefaultTask+0x19c>)
 8002106:	4840      	ldr	r0, [pc, #256]	@ (8002208 <StartDefaultTask+0x1a4>)
 8002108:	f007 fef4 	bl	8009ef4 <rclc_subscription_init_default>
	      	        &subscriber,
	      	        &nodesub,
	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	      	        "joystick_cmd");

	      rclc_subscription_init_default(
 800210c:	f008 f80a 	bl	800a124 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8002110:	4602      	mov	r2, r0
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <StartDefaultTask+0x1a8>)
 8002114:	493a      	ldr	r1, [pc, #232]	@ (8002200 <StartDefaultTask+0x19c>)
 8002116:	483e      	ldr	r0, [pc, #248]	@ (8002210 <StartDefaultTask+0x1ac>)
 8002118:	f007 feec 	bl	8009ef4 <rclc_subscription_init_default>
	      	      	        &subscriber2,
	      	      	        &nodesub,
	      	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, EncoderMsg),
	      	      	        "encoder");

	      rclc_executor_add_subscription(
 800211c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8002120:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002124:	2300      	movs	r3, #0
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <StartDefaultTask+0x1b0>)
 800212a:	4939      	ldr	r1, [pc, #228]	@ (8002210 <StartDefaultTask+0x1ac>)
 800212c:	f007 fc04 	bl	8009938 <rclc_executor_add_subscription>
	      	      	      &executor, &subscriber2, &encodermsg,
	      	      	      &subscription_callback_encoder, ON_NEW_DATA);



	      rclc_executor_add_subscription(
 8002130:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8002134:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <StartDefaultTask+0x1b4>)
 800213e:	4932      	ldr	r1, [pc, #200]	@ (8002208 <StartDefaultTask+0x1a4>)
 8002140:	f007 fbfa 	bl	8009938 <rclc_executor_add_subscription>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 8002144:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002148:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	4608      	mov	r0, r1
 8002152:	f007 fe11 	bl	8009d78 <rclc_executor_spin_some>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 8002156:	f000 fe27 	bl	8002da8 <HAL_GetTick>
 800215a:	4603      	mov	r3, r0
 800215c:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <StartDefaultTask+0x1b8>)
 800215e:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_message_time > 250) {
 8002160:	f000 fe22 	bl	8002da8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <StartDefaultTask+0x1bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2bfa      	cmp	r3, #250	@ 0xfa
 800216e:	d903      	bls.n	8002178 <StartDefaultTask+0x114>
		      connection_lost = true;
 8002170:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <StartDefaultTask+0x1c0>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e002      	b.n	800217e <StartDefaultTask+0x11a>
		  }
		  else {
		      connection_lost = false;
 8002178:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <StartDefaultTask+0x1c0>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <StartDefaultTask+0x1c0>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0de      	beq.n	8002144 <StartDefaultTask+0xe0>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <StartDefaultTask+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <StartDefaultTask+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <StartDefaultTask+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2200      	movs	r2, #0
 800219c:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800219e:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <StartDefaultTask+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40

		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <StartDefaultTask+0x1c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <StartDefaultTask+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <StartDefaultTask+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80021be:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <StartDefaultTask+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2120      	movs	r1, #32
 80021ca:	4819      	ldr	r0, [pc, #100]	@ (8002230 <StartDefaultTask+0x1cc>)
 80021cc:	f001 fc90 	bl	8003af0 <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 80021d0:	e7b8      	b.n	8002144 <StartDefaultTask+0xe0>
 80021d2:	bf00      	nop
 80021d4:	08002be1 	.word	0x08002be1
 80021d8:	08002b79 	.word	0x08002b79
 80021dc:	08002b59 	.word	0x08002b59
 80021e0:	08002b2d 	.word	0x08002b2d
 80021e4:	20004248 	.word	0x20004248
 80021e8:	0800223d 	.word	0x0800223d
 80021ec:	08002281 	.word	0x08002281
 80021f0:	080022b9 	.word	0x080022b9
 80021f4:	08002325 	.word	0x08002325
 80021f8:	08016804 	.word	0x08016804
 80021fc:	08016808 	.word	0x08016808
 8002200:	20004354 	.word	0x20004354
 8002204:	08016814 	.word	0x08016814
 8002208:	2000435c 	.word	0x2000435c
 800220c:	08016824 	.word	0x08016824
 8002210:	20004360 	.word	0x20004360
 8002214:	08001eb1 	.word	0x08001eb1
 8002218:	08001f4d 	.word	0x08001f4d
 800221c:	20004370 	.word	0x20004370
 8002220:	20004374 	.word	0x20004374
 8002224:	20004378 	.word	0x20004378
 8002228:	20004170 	.word	0x20004170
 800222c:	20004200 	.word	0x20004200
 8002230:	40020000 	.word	0x40020000

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <Error_Handler+0x4>

0800223c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <microros_allocate+0x3c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <microros_allocate+0x3c>)
 8002254:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <microros_allocate+0x40>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <microros_allocate+0x40>)
 8002264:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fbc6 	bl	80009f8 <pvPortMallocMicroROS>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004388 	.word	0x20004388
 800227c:	2000438c 	.word	0x2000438c

08002280 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe fcd5 	bl	8000c40 <getBlockSize>
 8002296:	4603      	mov	r3, r0
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <microros_deallocate+0x34>)
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <microros_deallocate+0x34>)
 80022a2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe fc6f 	bl	8000b88 <vPortFreeMicroROS>
  }
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000438c 	.word	0x2000438c

080022b8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022c4:	4b15      	ldr	r3, [pc, #84]	@ (800231c <microros_reallocate+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4413      	add	r3, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <microros_reallocate+0x64>)
 80022d2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <microros_reallocate+0x68>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	461a      	mov	r2, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <microros_reallocate+0x68>)
 80022e2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80022ea:	68b8      	ldr	r0, [r7, #8]
 80022ec:	f7fe fb84 	bl	80009f8 <pvPortMallocMicroROS>
 80022f0:	4603      	mov	r3, r0
 80022f2:	e00e      	b.n	8002312 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7fe fca3 	bl	8000c40 <getBlockSize>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <microros_reallocate+0x68>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <microros_reallocate+0x68>)
 8002306:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7fe fcb6 	bl	8000c7c <pvPortReallocMicroROS>
 8002310:	4603      	mov	r3, r0
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20004388 	.word	0x20004388
 8002320:	2000438c 	.word	0x2000438c

08002324 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <microros_zero_allocate+0x48>)
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	461a      	mov	r2, r3
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <microros_zero_allocate+0x48>)
 8002342:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <microros_zero_allocate+0x4c>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	461a      	mov	r2, r3
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <microros_zero_allocate+0x4c>)
 8002356:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7fe fcbb 	bl	8000cd6 <pvPortCallocMicroROS>
 8002360:	4603      	mov	r3, r0
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20004388 	.word	0x20004388
 8002370:	2000438c 	.word	0x2000438c
 8002374:	00000000 	.word	0x00000000

08002378 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800238a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800238e:	a320      	add	r3, pc, #128	@ (adr r3, 8002410 <UTILS_NanosecondsToTimespec+0x98>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f968 	bl	8000668 <__aeabi_ldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80023a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002410 <UTILS_NanosecondsToTimespec+0x98>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f95c 	bl	8000668 <__aeabi_ldivmod>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da20      	bge.n	80023fe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <UTILS_NanosecondsToTimespec+0x90>)
 80023c2:	fb82 1203 	smull	r1, r2, r2, r3
 80023c6:	1712      	asrs	r2, r2, #28
 80023c8:	17db      	asrs	r3, r3, #31
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	17c8      	asrs	r0, r1, #31
 80023da:	460c      	mov	r4, r1
 80023dc:	4605      	mov	r5, r0
 80023de:	ebb2 0804 	subs.w	r8, r2, r4
 80023e2:	eb63 0905 	sbc.w	r9, r3, r5
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4906      	ldr	r1, [pc, #24]	@ (800240c <UTILS_NanosecondsToTimespec+0x94>)
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]
    }
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002408:	44b82fa1 	.word	0x44b82fa1
 800240c:	3b9aca00 	.word	0x3b9aca00
 8002410:	3b9aca00 	.word	0x3b9aca00
 8002414:	00000000 	.word	0x00000000

08002418 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b08e      	sub	sp, #56	@ 0x38
 800241e:	af00      	add	r7, sp, #0
 8002420:	6278      	str	r0, [r7, #36]	@ 0x24
 8002422:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002424:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002428:	2300      	movs	r3, #0
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800243a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800243e:	4618      	mov	r0, r3
 8002440:	f005 fcc0 	bl	8007dc4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	17da      	asrs	r2, r3, #31
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	61fa      	str	r2, [r7, #28]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	69b9      	ldr	r1, [r7, #24]
 8002456:	000b      	movs	r3, r1
 8002458:	2200      	movs	r2, #0
 800245a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	2200      	movs	r2, #0
 8002462:	461c      	mov	r4, r3
 8002464:	4615      	mov	r5, r2
 8002466:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800246a:	1911      	adds	r1, r2, r4
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	416b      	adcs	r3, r5
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002476:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800247a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	f04f 0400 	mov.w	r4, #0
 8002486:	f04f 0500 	mov.w	r5, #0
 800248a:	015d      	lsls	r5, r3, #5
 800248c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002490:	0154      	lsls	r4, r2, #5
 8002492:	4622      	mov	r2, r4
 8002494:	462b      	mov	r3, r5
 8002496:	ebb2 0800 	subs.w	r8, r2, r0
 800249a:	eb63 0901 	sbc.w	r9, r3, r1
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024aa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80024ae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80024b2:	4690      	mov	r8, r2
 80024b4:	4699      	mov	r9, r3
 80024b6:	eb18 0a00 	adds.w	sl, r8, r0
 80024ba:	eb49 0b01 	adc.w	fp, r9, r1
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024d2:	ebb2 040a 	subs.w	r4, r2, sl
 80024d6:	603c      	str	r4, [r7, #0]
 80024d8:	eb63 030b 	sbc.w	r3, r3, fp
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e2:	4623      	mov	r3, r4
 80024e4:	181b      	adds	r3, r3, r0
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	462b      	mov	r3, r5
 80024ea:	eb41 0303 	adc.w	r3, r1, r3
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f6:	f7ff ff3f 	bl	8002378 <UTILS_NanosecondsToTimespec>

    return 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	3738      	adds	r7, #56	@ 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_MspInit+0x54>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_MspInit+0x54>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_MspInit+0x54>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_MspInit+0x54>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_MspInit+0x54>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_MspInit+0x54>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	210f      	movs	r1, #15
 800254a:	f06f 0001 	mvn.w	r0, #1
 800254e:	f000 fd12 	bl	8002f76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1f      	ldr	r2, [pc, #124]	@ (80025ec <HAL_TIM_Base_MspInit+0x8c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800258e:	e026      	b.n	80025de <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
}
 80025b6:	e012      	b.n	80025de <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_TIM_Base_MspInit+0x94>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10d      	bne.n	80025de <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_TIM_Base_MspInit+0x90>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40000400 	.word	0x40000400

080025f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a55      	ldr	r2, [pc, #340]	@ (800276c <HAL_TIM_MspPostInit+0x174>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11f      	bne.n	800265a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	4b54      	ldr	r3, [pc, #336]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b51      	ldr	r3, [pc, #324]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002636:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002648:	2301      	movs	r3, #1
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4848      	ldr	r0, [pc, #288]	@ (8002774 <HAL_TIM_MspPostInit+0x17c>)
 8002654:	f001 f8c8 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002658:	e083      	b.n	8002762 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d13d      	bne.n	80026e0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a40      	ldr	r2, [pc, #256]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	4a39      	ldr	r2, [pc, #228]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002690:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Camera_X_Pin|Camera_Y_Pin;
 800269c:	2303      	movs	r3, #3
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ac:	2301      	movs	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	4619      	mov	r1, r3
 80026b6:	482f      	ldr	r0, [pc, #188]	@ (8002774 <HAL_TIM_MspPostInit+0x17c>)
 80026b8:	f001 f896 	bl	80037e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ce:	2301      	movs	r3, #1
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4619      	mov	r1, r3
 80026d8:	4827      	ldr	r0, [pc, #156]	@ (8002778 <HAL_TIM_MspPostInit+0x180>)
 80026da:	f001 f885 	bl	80037e8 <HAL_GPIO_Init>
}
 80026de:	e040      	b.n	8002762 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a25      	ldr	r2, [pc, #148]	@ (800277c <HAL_TIM_MspPostInit+0x184>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13b      	bne.n	8002762 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_TIM_MspPostInit+0x178>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002722:	23c0      	movs	r3, #192	@ 0xc0
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002732:	2302      	movs	r3, #2
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	480d      	ldr	r0, [pc, #52]	@ (8002774 <HAL_TIM_MspPostInit+0x17c>)
 800273e:	f001 f853 	bl	80037e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002742:	2303      	movs	r3, #3
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002752:	2302      	movs	r3, #2
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	4806      	ldr	r0, [pc, #24]	@ (8002778 <HAL_TIM_MspPostInit+0x180>)
 800275e:	f001 f843 	bl	80037e8 <HAL_GPIO_Init>
}
 8002762:	bf00      	nop
 8002764:	3730      	adds	r7, #48	@ 0x30
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40000400 	.word	0x40000400

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a4d      	ldr	r2, [pc, #308]	@ (80028d4 <HAL_UART_MspInit+0x154>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f040 8093 	bne.w	80028ca <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	4b4b      	ldr	r3, [pc, #300]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	4a4a      	ldr	r2, [pc, #296]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b4:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4b44      	ldr	r3, [pc, #272]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a43      	ldr	r2, [pc, #268]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_UART_MspInit+0x158>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027dc:	230c      	movs	r3, #12
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ec:	2307      	movs	r3, #7
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	4839      	ldr	r0, [pc, #228]	@ (80028dc <HAL_UART_MspInit+0x15c>)
 80027f8:	f000 fff6 	bl	80037e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80027fc:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 80027fe:	4a39      	ldr	r2, [pc, #228]	@ (80028e4 <HAL_UART_MspInit+0x164>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002802:	4b37      	ldr	r3, [pc, #220]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002804:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002808:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280a:	4b35      	ldr	r3, [pc, #212]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002810:	4b33      	ldr	r3, [pc, #204]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002816:	4b32      	ldr	r3, [pc, #200]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002818:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800281c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281e:	4b30      	ldr	r3, [pc, #192]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002824:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800282a:	4b2d      	ldr	r3, [pc, #180]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 800282c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002830:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002832:	4b2b      	ldr	r3, [pc, #172]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002834:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002838:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800283a:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002840:	4827      	ldr	r0, [pc, #156]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002842:	f000 fbcf 	bl	8002fe4 <HAL_DMA_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800284c:	f7ff fcf2 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002854:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002856:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <HAL_UART_MspInit+0x160>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800285c:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 800285e:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_UART_MspInit+0x16c>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002862:	4b21      	ldr	r3, [pc, #132]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002864:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002868:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002876:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800287c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002884:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002890:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 8002892:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002896:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800289e:	4812      	ldr	r0, [pc, #72]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 80028a0:	f000 fba0 	bl	8002fe4 <HAL_DMA_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80028aa:	f7ff fcc3 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80028b4:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <HAL_UART_MspInit+0x168>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	2026      	movs	r0, #38	@ 0x26
 80028c0:	f000 fb59 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028c4:	2026      	movs	r0, #38	@ 0x26
 80028c6:	f000 fb72 	bl	8002fae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	@ 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	20004290 	.word	0x20004290
 80028e4:	40026088 	.word	0x40026088
 80028e8:	200042f0 	.word	0x200042f0
 80028ec:	400260a0 	.word	0x400260a0

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <NMI_Handler+0x4>

080028f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <HardFault_Handler+0x4>

08002900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <MemManage_Handler+0x4>

08002908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <BusFault_Handler+0x4>

08002910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <UsageFault_Handler+0x4>

08002918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292a:	f000 fa29 	bl	8002d80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800292e:	f005 fbcd 	bl	80080cc <xTaskGetSchedulerState>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002938:	f006 f9c6 	bl	8008cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <DMA1_Stream5_IRQHandler+0x10>)
 8002946:	f000 fce5 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20004290 	.word	0x20004290

08002954 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <DMA1_Stream6_IRQHandler+0x10>)
 800295a:	f000 fcdb 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200042f0 	.word	0x200042f0

08002968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <USART2_IRQHandler+0x10>)
 800296e:	f002 fd4f 	bl	8005410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20004248 	.word	0x20004248

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_kill>:

int _kill(int pid, int sig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002996:	f013 f81b 	bl	80159d0 <__errno>
 800299a:	4603      	mov	r3, r0
 800299c:	2216      	movs	r2, #22
 800299e:	601a      	str	r2, [r3, #0]
  return -1;
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_exit>:

void _exit (int status)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffe7 	bl	800298c <_kill>
  while (1) {}    /* Make sure we hang here */
 80029be:	bf00      	nop
 80029c0:	e7fd      	b.n	80029be <_exit+0x12>

080029c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e00a      	b.n	80029ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d4:	f3af 8000 	nop.w
 80029d8:	4601      	mov	r1, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	60ba      	str	r2, [r7, #8]
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dbf0      	blt.n	80029d4 <_read+0x12>
  }

  return len;
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e009      	b.n	8002a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	60ba      	str	r2, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dbf1      	blt.n	8002a0e <_write+0x12>
  }
  return len;
 8002a2a:	687b      	ldr	r3, [r7, #4]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_close>:

int _close(int file)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_isatty>:

int _isatty(int file)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f012 ff80 	bl	80159d0 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20018000 	.word	0x20018000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	20004394 	.word	0x20004394
 8002b04:	2000e148 	.word	0x2000e148

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b3a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002b3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b40:	4904      	ldr	r1, [pc, #16]	@ (8002b54 <cubemx_transport_open+0x28>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f002 fbc0 	bl	80052c8 <HAL_UART_Receive_DMA>
    return true;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20004398 	.word	0x20004398

08002b58 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b66:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f002 fbd2 	bl	8005312 <HAL_UART_DMAStop>
    return true;
 8002b6e:	2301      	movs	r3, #1
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b8c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d11c      	bne.n	8002bd4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f002 fb20 	bl	80051e8 <HAL_UART_Transmit_DMA>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bac:	e002      	b.n	8002bb4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f003 fe3c 	bl	800682c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <cubemx_transport_write+0x4e>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d1f3      	bne.n	8002bae <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <cubemx_transport_write+0x58>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	e002      	b.n	8002bd6 <cubemx_transport_write+0x5e>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002bd4:	2300      	movs	r3, #0
    }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002bf4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfa:	b672      	cpsid	i
}
 8002bfc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <cubemx_transport_read+0x9c>)
 8002c0c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c0e:	b662      	cpsie	i
}
 8002c10:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f003 fe07 	bl	800682c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c1e:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <cubemx_transport_read+0xa0>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <cubemx_transport_read+0x9c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d103      	bne.n	8002c32 <cubemx_transport_read+0x52>
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbe3      	blt.n	8002bfa <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c36:	e011      	b.n	8002c5c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <cubemx_transport_read+0xa0>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	440b      	add	r3, r1
 8002c42:	4910      	ldr	r1, [pc, #64]	@ (8002c84 <cubemx_transport_read+0xa4>)
 8002c44:	5c8a      	ldrb	r2, [r1, r2]
 8002c46:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002c48:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <cubemx_transport_read+0xa0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c52:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <cubemx_transport_read+0xa0>)
 8002c54:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <cubemx_transport_read+0xa0>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <cubemx_transport_read+0x9c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d003      	beq.n	8002c70 <cubemx_transport_read+0x90>
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3e3      	bcc.n	8002c38 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002c70:	69bb      	ldr	r3, [r7, #24]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20004b9c 	.word	0x20004b9c
 8002c80:	20004b98 	.word	0x20004b98
 8002c84:	20004398 	.word	0x20004398

08002c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c8c:	f7ff ff3c 	bl	8002b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c90:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c92:	490d      	ldr	r1, [pc, #52]	@ (8002cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c98:	e002      	b.n	8002ca0 <LoopCopyDataInit>

08002c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9e:	3304      	adds	r3, #4

08002ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca4:	d3f9      	bcc.n	8002c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cac:	e001      	b.n	8002cb2 <LoopFillZerobss>

08002cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb0:	3204      	adds	r2, #4

08002cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb4:	d3fb      	bcc.n	8002cae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002cb6:	f012 fe91 	bl	80159dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cba:	f7fe f8ed 	bl	8000e98 <main>
  bx  lr    
 8002cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc8:	20000534 	.word	0x20000534
  ldr r2, =_sidata
 8002ccc:	080175dc 	.word	0x080175dc
  ldr r2, =_sbss
 8002cd0:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 8002cd4:	2000e148 	.word	0x2000e148

08002cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd8:	e7fe      	b.n	8002cd8 <ADC_IRQHandler>
	...

08002cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d1c <HAL_Init+0x40>)
 8002ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_Init+0x40>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <HAL_Init+0x40>)
 8002cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <HAL_Init+0x40>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a07      	ldr	r2, [pc, #28]	@ (8002d1c <HAL_Init+0x40>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f000 f92b 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d0a:	200f      	movs	r0, #15
 8002d0c:	f000 f808 	bl	8002d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d10:	f7ff fbfa 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_InitTick+0x54>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_InitTick+0x58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f943 	bl	8002fca <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d5c:	f000 f90b 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	@ (8002d7c <HAL_InitTick+0x5c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000098 	.word	0x20000098
 8002d78:	200000a0 	.word	0x200000a0
 8002d7c:	2000009c 	.word	0x2000009c

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200000a0 	.word	0x200000a0
 8002da4:	20004ba0 	.word	0x20004ba0

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20004ba0 	.word	0x20004ba0

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	@ (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	@ (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff feda 	bl	8002da8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff fec1 	bl	8002da8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	@ (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb01 	bl	80036f0 <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fab8 	bl	8003684 <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	223f      	movs	r2, #63	@ 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Start_IT+0x26>
 8003162:	2302      	movs	r3, #2
 8003164:	e040      	b.n	80031e8 <HAL_DMA_Start_IT+0xa8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d12f      	bne.n	80031da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa4a 	bl	8003628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	223f      	movs	r2, #63	@ 0x3f
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0216 	orr.w	r2, r2, #22
 80031ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e005      	b.n	80031e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031fe:	f7ff fdd3 	bl	8002da8 <HAL_GetTick>
 8003202:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d008      	beq.n	8003222 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e052      	b.n	80032c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0216 	bic.w	r2, r2, #22
 8003230:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003240:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_DMA_Abort+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0208 	bic.w	r2, r2, #8
 8003260:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	e013      	b.n	800329c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003274:	f7ff fd98 	bl	8002da8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b05      	cmp	r3, #5
 8003280:	d90c      	bls.n	800329c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2203      	movs	r2, #3
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e015      	b.n	80032c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e4      	bne.n	8003274 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	223f      	movs	r2, #63	@ 0x3f
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2280      	movs	r2, #128	@ 0x80
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00c      	b.n	8003308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003320:	4b8e      	ldr	r3, [pc, #568]	@ (800355c <HAL_DMA_IRQHandler+0x248>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a8e      	ldr	r2, [pc, #568]	@ (8003560 <HAL_DMA_IRQHandler+0x24c>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	2208      	movs	r2, #8
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	2208      	movs	r2, #8
 800336e:	409a      	lsls	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	2201      	movs	r2, #1
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	2201      	movs	r2, #1
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	2204      	movs	r2, #4
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d012      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	2204      	movs	r2, #4
 80033da:	409a      	lsls	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2210      	movs	r2, #16
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	2210      	movs	r2, #16
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d018      	beq.n	8003456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
 8003442:	e01f      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e016      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0208 	bic.w	r2, r2, #8
 8003472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	2220      	movs	r2, #32
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 808f 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8087 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	2220      	movs	r2, #32
 80034ac:	409a      	lsls	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d136      	bne.n	800352c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0216 	bic.w	r2, r2, #22
 80034cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_DMA_IRQHandler+0x1da>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0208 	bic.w	r2, r2, #8
 80034fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	223f      	movs	r2, #63	@ 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	2b00      	cmp	r3, #0
 8003520:	d07e      	beq.n	8003620 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
        }
        return;
 800352a:	e079      	b.n	8003620 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01d      	beq.n	8003576 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	2b00      	cmp	r3, #0
 800354e:	d031      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e02c      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
 800355a:	bf00      	nop
 800355c:	20000098 	.word	0x20000098
 8003560:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e01e      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d032      	beq.n	8003622 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d022      	beq.n	800360e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2205      	movs	r2, #5
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d307      	bcc.n	80035fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f2      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x2cc>
 80035fa:	e000      	b.n	80035fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003620:	bf00      	nop
    }
  }
}
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d108      	bne.n	8003668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003666:	e007      	b.n	8003678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3b10      	subs	r3, #16
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800369e:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <DMA_CalcBaseAndBitshift+0x68>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d909      	bls.n	80036c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036c4:	e007      	b.n	80036d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	aaaaaaab 	.word	0xaaaaaaab
 80036ec:	080168a0 	.word	0x080168a0

080036f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11f      	bne.n	800374a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d856      	bhi.n	80037be <DMA_CheckFifoParam+0xce>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <DMA_CheckFifoParam+0x28>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	0800373b 	.word	0x0800373b
 8003720:	08003729 	.word	0x08003729
 8003724:	080037bf 	.word	0x080037bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d046      	beq.n	80037c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e043      	b.n	80037c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003742:	d140      	bne.n	80037c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e03d      	b.n	80037c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003752:	d121      	bne.n	8003798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d837      	bhi.n	80037ca <DMA_CheckFifoParam+0xda>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <DMA_CheckFifoParam+0x70>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003771 	.word	0x08003771
 8003764:	08003777 	.word	0x08003777
 8003768:	08003771 	.word	0x08003771
 800376c:	08003789 	.word	0x08003789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e030      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d025      	beq.n	80037ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003786:	e022      	b.n	80037ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003790:	d11f      	bne.n	80037d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003796:	e01c      	b.n	80037d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d903      	bls.n	80037a6 <DMA_CheckFifoParam+0xb6>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d003      	beq.n	80037ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037a4:	e018      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      break;
 80037aa:	e015      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e00b      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037be:	bf00      	nop
 80037c0:	e00a      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e008      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e006      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e004      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
    }
  } 
  
  return status; 
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e159      	b.n	8003ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8148 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800397c:	6453      	str	r3, [r2, #68]	@ 0x44
 800397e:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	@ (8003ad8 <HAL_GPIO_Init+0x2f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x202>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_GPIO_Init+0x2f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x1fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a47      	ldr	r2, [pc, #284]	@ (8003ae0 <HAL_GPIO_Init+0x2f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x1fa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a46      	ldr	r2, [pc, #280]	@ (8003ae4 <HAL_GPIO_Init+0x2fc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x1f6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a45      	ldr	r2, [pc, #276]	@ (8003ae8 <HAL_GPIO_Init+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x1f2>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039da:	2307      	movs	r3, #7
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a24      	ldr	r2, [pc, #144]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f aea2 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b00:	787b      	ldrb	r3, [r7, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b0c:	e003      	b.n	8003b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e267      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d075      	beq.n	8003c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b42:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4e:	4b85      	ldr	r3, [pc, #532]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d112      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4b82      	ldr	r3, [pc, #520]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b68:	4b7e      	ldr	r3, [pc, #504]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x108>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d157      	bne.n	8003c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e242      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b88:	d106      	bne.n	8003b98 <HAL_RCC_OscConfig+0x74>
 8003b8a:	4b76      	ldr	r3, [pc, #472]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a75      	ldr	r2, [pc, #468]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x98>
 8003ba2:	4b70      	ldr	r3, [pc, #448]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b6d      	ldr	r3, [pc, #436]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003bbc:	4b69      	ldr	r3, [pc, #420]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a68      	ldr	r2, [pc, #416]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b66      	ldr	r3, [pc, #408]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a65      	ldr	r2, [pc, #404]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7ff f8e4 	bl	8002da8 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7ff f8e0 	bl	8002da8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e207      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xc0>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7ff f8d0 	bl	8002da8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7ff f8cc 	bl	8002da8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1f3      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b51      	ldr	r3, [pc, #324]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0xe8>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b44      	ldr	r3, [pc, #272]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1c7      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4937      	ldr	r1, [pc, #220]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e03a      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b34      	ldr	r3, [pc, #208]	@ (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7ff f885 	bl	8002da8 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7ff f881 	bl	8002da8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1a8      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b28      	ldr	r3, [pc, #160]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4925      	ldr	r1, [pc, #148]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff f864 	bl	8002da8 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7ff f860 	bl	8002da8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e187      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7ff f844 	bl	8002da8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d24:	f7ff f840 	bl	8002da8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e167      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x200>
 8003d42:	e01b      	b.n	8003d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7ff f82d 	bl	8002da8 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	e00e      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d52:	f7ff f829 	bl	8002da8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d907      	bls.n	8003d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e150      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470000 	.word	0x42470000
 8003d6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b88      	ldr	r3, [pc, #544]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ea      	bne.n	8003d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8097 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b81      	ldr	r3, [pc, #516]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	4a7c      	ldr	r2, [pc, #496]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003daa:	4b7a      	ldr	r3, [pc, #488]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b77      	ldr	r3, [pc, #476]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b74      	ldr	r3, [pc, #464]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a73      	ldr	r2, [pc, #460]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe ffe9 	bl	8002da8 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe ffe5 	bl	8002da8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e10c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2ea>
 8003e00:	4b64      	ldr	r3, [pc, #400]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e04:	4a63      	ldr	r2, [pc, #396]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x30c>
 8003e16:	4b5f      	ldr	r3, [pc, #380]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e22:	4b5c      	ldr	r3, [pc, #368]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	4a5b      	ldr	r2, [pc, #364]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e30:	4b58      	ldr	r3, [pc, #352]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a57      	ldr	r2, [pc, #348]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	4b55      	ldr	r3, [pc, #340]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	4a54      	ldr	r2, [pc, #336]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fe ffaa 	bl	8002da8 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe ffa6 	bl	8002da8 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0cb      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	4b49      	ldr	r3, [pc, #292]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <HAL_RCC_OscConfig+0x334>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe ff94 	bl	8002da8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fe ff90 	bl	8002da8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0b5      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ee      	bne.n	8003e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	4a38      	ldr	r2, [pc, #224]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a1 	beq.w	8004004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d05c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d141      	bne.n	8003f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe ff64 	bl	8002da8 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe ff60 	bl	8002da8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e087      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	491b      	ldr	r1, [pc, #108]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe ff39 	bl	8002da8 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe ff35 	bl	8002da8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e05c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x416>
 8003f58:	e054      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe ff22 	bl	8002da8 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe ff1e 	bl	8002da8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e045      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x444>
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e038      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x4ec>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d028      	beq.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fe fe50 	bl	8002da8 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fe fe4c 	bl	8002da8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4602      	mov	r2, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	490a      	ldr	r1, [pc, #40]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5ccb      	ldrb	r3, [r1, r3]
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fdb0 	bl	8002d20 <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08016888 	.word	0x08016888
 80041d8:	20000098 	.word	0x20000098
 80041dc:	2000009c 	.word	0x2000009c

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b094      	sub	sp, #80	@ 0x50
 80041e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f8:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	d00d      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x40>
 8004204:	2b08      	cmp	r3, #8
 8004206:	f200 80e1 	bhi.w	80043cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x34>
 800420e:	2b04      	cmp	r3, #4
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x3a>
 8004212:	e0db      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b73      	ldr	r3, [pc, #460]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004218:	e0db      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421a:	4b73      	ldr	r3, [pc, #460]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800421c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800421e:	e0d8      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422a:	4b6d      	ldr	r3, [pc, #436]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	2200      	movs	r2, #0
 800423e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004240:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004248:	633b      	str	r3, [r7, #48]	@ 0x30
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
 800424e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004252:	4622      	mov	r2, r4
 8004254:	462b      	mov	r3, r5
 8004256:	f04f 0000 	mov.w	r0, #0
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	0159      	lsls	r1, r3, #5
 8004260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004264:	0150      	lsls	r0, r2, #5
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4621      	mov	r1, r4
 800426c:	1a51      	subs	r1, r2, r1
 800426e:	6139      	str	r1, [r7, #16]
 8004270:	4629      	mov	r1, r5
 8004272:	eb63 0301 	sbc.w	r3, r3, r1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004284:	4659      	mov	r1, fp
 8004286:	018b      	lsls	r3, r1, #6
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428e:	4651      	mov	r1, sl
 8004290:	018a      	lsls	r2, r1, #6
 8004292:	4651      	mov	r1, sl
 8004294:	ebb2 0801 	subs.w	r8, r2, r1
 8004298:	4659      	mov	r1, fp
 800429a:	eb63 0901 	sbc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	462b      	mov	r3, r5
 80042c0:	eb49 0303 	adc.w	r3, r9, r3
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042d2:	4629      	mov	r1, r5
 80042d4:	024b      	lsls	r3, r1, #9
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042dc:	4621      	mov	r1, r4
 80042de:	024a      	lsls	r2, r1, #9
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e6:	2200      	movs	r2, #0
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042f0:	f7fc fa0a 	bl	8000708 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042fc:	e058      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	2200      	movs	r2, #0
 8004306:	4618      	mov	r0, r3
 8004308:	4611      	mov	r1, r2
 800430a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
 8004314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0159      	lsls	r1, r3, #5
 8004326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432a:	0150      	lsls	r0, r2, #5
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4641      	mov	r1, r8
 8004332:	ebb2 0a01 	subs.w	sl, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb63 0b01 	sbc.w	fp, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800434c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004350:	ebb2 040a 	subs.w	r4, r2, sl
 8004354:	eb63 050b 	sbc.w	r5, r3, fp
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	00eb      	lsls	r3, r5, #3
 8004362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004366:	00e2      	lsls	r2, r4, #3
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	4643      	mov	r3, r8
 800436e:	18e3      	adds	r3, r4, r3
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	464b      	mov	r3, r9
 8004374:	eb45 0303 	adc.w	r3, r5, r3
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004386:	4629      	mov	r1, r5
 8004388:	028b      	lsls	r3, r1, #10
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004390:	4621      	mov	r1, r4
 8004392:	028a      	lsls	r2, r1, #10
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439a:	2200      	movs	r2, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	61fa      	str	r2, [r7, #28]
 80043a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a4:	f7fc f9b0 	bl	8000708 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3750      	adds	r7, #80	@ 0x50
 80043d8:	46bd      	mov	sp, r7
 80043da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000098 	.word	0x20000098

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08016898 	.word	0x08016898

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004430:	f7ff ffdc 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0b5b      	lsrs	r3, r3, #13
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4903      	ldr	r1, [pc, #12]	@ (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08016898 	.word	0x08016898

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe f870 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fac0 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e041      	b.n	8004588 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f839 	bl	8004590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fa71 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_PWM_Start+0x24>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e022      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d109      	bne.n	80045e2 <HAL_TIM_PWM_Start+0x3e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	e015      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d109      	bne.n	80045fc <HAL_TIM_PWM_Start+0x58>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e008      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e068      	b.n	80046e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_TIM_PWM_Start+0x82>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	e013      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0x92>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004634:	e00b      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	e003      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fc90 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a23      	ldr	r2, [pc, #140]	@ (80046f0 <HAL_TIM_PWM_Start+0x14c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d107      	bne.n	8004676 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <HAL_TIM_PWM_Start+0x14c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x10e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d013      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x10e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_TIM_PWM_Start+0x150>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x10e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <HAL_TIM_PWM_Start+0x154>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x10e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <HAL_TIM_PWM_Start+0x158>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIM_PWM_Start+0x10e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a14      	ldr	r2, [pc, #80]	@ (8004700 <HAL_TIM_PWM_Start+0x15c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d111      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d010      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d4:	e007      	b.n	80046e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40014000 	.word	0x40014000

08004704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0ae      	b.n	8004880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	f200 809f 	bhi.w	8004870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004871 	.word	0x08004871
 8004740:	08004871 	.word	0x08004871
 8004744:	08004871 	.word	0x08004871
 8004748:	080047ad 	.word	0x080047ad
 800474c:	08004871 	.word	0x08004871
 8004750:	08004871 	.word	0x08004871
 8004754:	08004871 	.word	0x08004871
 8004758:	080047ef 	.word	0x080047ef
 800475c:	08004871 	.word	0x08004871
 8004760:	08004871 	.word	0x08004871
 8004764:	08004871 	.word	0x08004871
 8004768:	0800482f 	.word	0x0800482f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f9dc 	bl	8004b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e064      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa22 	bl	8004bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
      break;
 80047ec:	e043      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fa6d 	bl	8004cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0208 	orr.w	r2, r2, #8
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0204 	bic.w	r2, r2, #4
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
      break;
 800482c:	e023      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fab7 	bl	8004da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	61da      	str	r2, [r3, #28]
      break;
 800486e:	e002      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
      break;
 8004874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0b4      	b.n	8004a0e <HAL_TIM_ConfigClockSource+0x186>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048dc:	d03e      	beq.n	800495c <HAL_TIM_ConfigClockSource+0xd4>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	f200 8087 	bhi.w	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	f000 8086 	beq.w	80049fa <HAL_TIM_ConfigClockSource+0x172>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f2:	d87f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d01a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xa6>
 80048f8:	2b70      	cmp	r3, #112	@ 0x70
 80048fa:	d87b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b60      	cmp	r3, #96	@ 0x60
 80048fe:	d050      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004900:	2b60      	cmp	r3, #96	@ 0x60
 8004902:	d877      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b50      	cmp	r3, #80	@ 0x50
 8004906:	d03c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xfa>
 8004908:	2b50      	cmp	r3, #80	@ 0x50
 800490a:	d873      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d058      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d86f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d064      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004918:	2b30      	cmp	r3, #48	@ 0x30
 800491a:	d86b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d060      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d867      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05c      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d05a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	e062      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	f000 fafd 	bl	8004f3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	609a      	str	r2, [r3, #8]
      break;
 800495a:	e04f      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	f000 fae6 	bl	8004f3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497e:	609a      	str	r2, [r3, #8]
      break;
 8004980:	e03c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	461a      	mov	r2, r3
 8004990:	f000 fa5a 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2150      	movs	r1, #80	@ 0x50
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fab3 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80049a0:	e02c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 fa79 	bl	8004ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2160      	movs	r1, #96	@ 0x60
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 faa3 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80049c0:	e01c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 fa3a 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2140      	movs	r1, #64	@ 0x40
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa93 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 fa8a 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80049f2:	e003      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      break;
 80049f8:	e000      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b14 <TIM_Base_SetConfig+0xfc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_Base_SetConfig+0x38>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d00b      	beq.n	8004a50 <TIM_Base_SetConfig+0x38>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a37      	ldr	r2, [pc, #220]	@ (8004b18 <TIM_Base_SetConfig+0x100>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0x38>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a36      	ldr	r2, [pc, #216]	@ (8004b1c <TIM_Base_SetConfig+0x104>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a35      	ldr	r2, [pc, #212]	@ (8004b20 <TIM_Base_SetConfig+0x108>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	@ (8004b14 <TIM_Base_SetConfig+0xfc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d017      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <TIM_Base_SetConfig+0x100>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a27      	ldr	r2, [pc, #156]	@ (8004b1c <TIM_Base_SetConfig+0x104>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a26      	ldr	r2, [pc, #152]	@ (8004b20 <TIM_Base_SetConfig+0x108>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	@ (8004b24 <TIM_Base_SetConfig+0x10c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a24      	ldr	r2, [pc, #144]	@ (8004b28 <TIM_Base_SetConfig+0x110>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	@ (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	@ (8004b14 <TIM_Base_SetConfig+0xfc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
  }
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 0201 	bic.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 0302 	bic.w	r3, r3, #2
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <TIM_OC1_SetConfig+0xc8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10c      	bne.n	8004ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0308 	bic.w	r3, r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a13      	ldr	r2, [pc, #76]	@ (8004bf8 <TIM_OC1_SetConfig+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d111      	bne.n	8004bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	621a      	str	r2, [r3, #32]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40010000 	.word	0x40010000

08004bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 0210 	bic.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0320 	bic.w	r3, r3, #32
 8004c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <TIM_OC2_SetConfig+0xd4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10d      	bne.n	8004c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	@ (8004cd0 <TIM_OC2_SetConfig+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d113      	bne.n	8004ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000

08004cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004da4 <TIM_OC3_SetConfig+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10d      	bne.n	8004d4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <TIM_OC3_SetConfig+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d113      	bne.n	8004d7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40010000 	.word	0x40010000

08004da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a10      	ldr	r2, [pc, #64]	@ (8004e44 <TIM_OC4_SetConfig+0x9c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d109      	bne.n	8004e1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	019b      	lsls	r3, r3, #6
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000

08004e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 030a 	bic.w	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 0210 	bic.w	r2, r3, #16
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f043 0307 	orr.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2201      	movs	r2, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e050      	b.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502c:	d013      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a13      	ldr	r2, [pc, #76]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10c      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4313      	orrs	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40010000 	.word	0x40010000
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40014000 	.word	0x40014000

080050a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050bc:	2302      	movs	r3, #2
 80050be:	e03d      	b.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e042      	b.n	80051e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd fb06 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	@ 0x24
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800518a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 ffc9 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08c      	sub	sp, #48	@ 0x30
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d156      	bne.n	80052b0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_Transmit_DMA+0x26>
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e04f      	b.n	80052b2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2221      	movs	r2, #33	@ 0x21
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	4a21      	ldr	r2, [pc, #132]	@ (80052bc <HAL_UART_Transmit_DMA+0xd4>)
 8005238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <HAL_UART_Transmit_DMA+0xd8>)
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_UART_Transmit_DMA+0xdc>)
 8005248:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	2200      	movs	r2, #0
 8005250:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3304      	adds	r3, #4
 8005266:	461a      	mov	r2, r3
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	f7fd ff69 	bl	8003140 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005276:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	617b      	str	r3, [r7, #20]
   return(result);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005298:	627a      	str	r2, [r7, #36]	@ 0x24
 800529a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6a39      	ldr	r1, [r7, #32]
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	@ 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	080059b1 	.word	0x080059b1
 80052c0:	08005a4b 	.word	0x08005a4b
 80052c4:	08005bcf 	.word	0x08005bcf

080052c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d112      	bne.n	8005308 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_UART_Receive_DMA+0x26>
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00b      	b.n	800530a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	461a      	mov	r2, r3
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fcb0 	bl	8005c64 <UART_Start_Receive_DMA>
 8005304:	4603      	mov	r3, r0
 8005306:	e000      	b.n	800530a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b090      	sub	sp, #64	@ 0x40
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b80      	cmp	r3, #128	@ 0x80
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b21      	cmp	r3, #33	@ 0x21
 800533e:	d128      	bne.n	8005392 <HAL_UART_DMAStop+0x80>
 8005340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	623b      	str	r3, [r7, #32]
   return(result);
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800535c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005366:	633a      	str	r2, [r7, #48]	@ 0x30
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800536c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd ff32 	bl	80031f0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fd03 	bl	8005d98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b22      	cmp	r3, #34	@ 0x22
 80053b2:	d128      	bne.n	8005406 <HAL_UART_DMAStop+0xf4>
 80053b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d025      	beq.n	8005406 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053da:	61fa      	str	r2, [r7, #28]
 80053dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	617b      	str	r3, [r7, #20]
   return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e5      	bne.n	80053ba <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fd fef8 	bl	80031f0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fcf1 	bl	8005de8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3740      	adds	r7, #64	@ 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b0ba      	sub	sp, #232	@ 0xe8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800544e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_UART_IRQHandler+0x66>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fd99 	bl	8005fa6 <UART_Receive_IT>
      return;
 8005474:	e25b      	b.n	800592e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80de 	beq.w	800563c <HAL_UART_IRQHandler+0x22c>
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80d1 	beq.w	800563c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xae>
 80054a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0xd2>
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f043 0202 	orr.w	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_UART_IRQHandler+0xf6>
 80054ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d011      	beq.n	8005536 <HAL_UART_IRQHandler+0x126>
 8005512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800551e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552e:	f043 0208 	orr.w	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 81f2 	beq.w	8005924 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_UART_IRQHandler+0x14e>
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fd24 	bl	8005fa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_UART_IRQHandler+0x17a>
 8005582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d04f      	beq.n	800562a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fc2c 	bl	8005de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d141      	bne.n	8005622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1d9      	bne.n	800559e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d013      	beq.n	800561a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f6:	4a7e      	ldr	r2, [pc, #504]	@ (80057f0 <HAL_UART_IRQHandler+0x3e0>)
 80055f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fd fe66 	bl	80032d0 <HAL_DMA_Abort_IT>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	e00e      	b.n	8005638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9b2 	bl	8005984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	e00a      	b.n	8005638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9ae 	bl	8005984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e006      	b.n	8005638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9aa 	bl	8005984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005636:	e175      	b.n	8005924 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	bf00      	nop
    return;
 800563a:	e173      	b.n	8005924 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	2b01      	cmp	r3, #1
 8005642:	f040 814f 	bne.w	80058e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8148 	beq.w	80058e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8141 	beq.w	80058e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005682:	2b40      	cmp	r3, #64	@ 0x40
 8005684:	f040 80b6 	bne.w	80057f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8145 	beq.w	8005928 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056a6:	429a      	cmp	r2, r3
 80056a8:	f080 813e 	bcs.w	8005928 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	f000 8088 	beq.w	80057d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1d9      	bne.n	80056c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3314      	adds	r3, #20
 8005714:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800571e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005732:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005736:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800573a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e1      	bne.n	800570e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3314      	adds	r3, #20
 8005750:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800575a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800575c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800576e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005770:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005774:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800577c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e3      	bne.n	800574a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a2:	f023 0310 	bic.w	r3, r3, #16
 80057a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e3      	bne.n	8005790 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd fd0f 	bl	80031f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8d5 	bl	8005998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ee:	e09b      	b.n	8005928 <HAL_UART_IRQHandler+0x518>
 80057f0:	08005eaf 	.word	0x08005eaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 808e 	beq.w	800592c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8089 	beq.w	800592c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800582a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800583e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800584c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e3      	bne.n	800581a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	623b      	str	r3, [r7, #32]
   return(result);
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005876:	633a      	str	r2, [r7, #48]	@ 0x30
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e3      	bne.n	8005852 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058bc:	61fa      	str	r2, [r7, #28]
 80058be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e3      	bne.n	8005898 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f85b 	bl	8005998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e2:	e023      	b.n	800592c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_UART_IRQHandler+0x4f4>
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 faea 	bl	8005ed6 <UART_Transmit_IT>
    return;
 8005902:	e014      	b.n	800592e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <HAL_UART_IRQHandler+0x51e>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb2a 	bl	8005f76 <UART_EndTransmit_IT>
    return;
 8005922:	e004      	b.n	800592e <HAL_UART_IRQHandler+0x51e>
    return;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <HAL_UART_IRQHandler+0x51e>
      return;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <HAL_UART_IRQHandler+0x51e>
      return;
 800592c:	bf00      	nop
  }
}
 800592e:	37e8      	adds	r7, #232	@ 0xe8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b090      	sub	sp, #64	@ 0x40
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d137      	bne.n	8005a3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80059cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ce:	2200      	movs	r2, #0
 80059d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	623b      	str	r3, [r7, #32]
   return(result);
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a26:	61fa      	str	r2, [r7, #28]
 8005a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	69b9      	ldr	r1, [r7, #24]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	617b      	str	r3, [r7, #20]
   return(result);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a3a:	e002      	b.n	8005a42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a3e:	f7ff ff79 	bl	8005934 <HAL_UART_TxCpltCallback>
}
 8005a42:	bf00      	nop
 8005a44:	3740      	adds	r7, #64	@ 0x40
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff ff75 	bl	8005948 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b09c      	sub	sp, #112	@ 0x70
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d172      	bne.n	8005b68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a84:	2200      	movs	r2, #0
 8005a86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005aa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aaa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005adc:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ade:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	623b      	str	r3, [r7, #32]
   return(result);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b06:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b10:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d119      	bne.n	8005b68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0310 	bic.w	r3, r3, #16
 8005b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b54:	61fa      	str	r2, [r7, #28]
 8005b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	69b9      	ldr	r1, [r7, #24]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	617b      	str	r3, [r7, #20]
   return(result);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d106      	bne.n	8005b84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b7e:	f7ff ff0b 	bl	8005998 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b82:	e002      	b.n	8005b8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b86:	f7ff fee9 	bl	800595c <HAL_UART_RxCpltCallback>
}
 8005b8a:	bf00      	nop
 8005b8c:	3770      	adds	r7, #112	@ 0x70
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff feed 	bl	8005998 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bbe:	e002      	b.n	8005bc6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fed5 	bl	8005970 <HAL_UART_RxHalfCpltCallback>
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bea:	2b80      	cmp	r3, #128	@ 0x80
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b21      	cmp	r3, #33	@ 0x21
 8005c00:	d108      	bne.n	8005c14 <UART_DMAError+0x46>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c0e:	68b8      	ldr	r0, [r7, #8]
 8005c10:	f000 f8c2 	bl	8005d98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	bf0c      	ite	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	2300      	movne	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	d108      	bne.n	8005c48 <UART_DMAError+0x7a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c42:	68b8      	ldr	r0, [r7, #8]
 8005c44:	f000 f8d0 	bl	8005de8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f7ff fe95 	bl	8005984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b098      	sub	sp, #96	@ 0x60
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2222      	movs	r2, #34	@ 0x22
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	4a3e      	ldr	r2, [pc, #248]	@ (8005d8c <UART_Start_Receive_DMA+0x128>)
 8005c92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	4a3d      	ldr	r2, [pc, #244]	@ (8005d90 <UART_Start_Receive_DMA+0x12c>)
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8005d94 <UART_Start_Receive_DMA+0x130>)
 8005ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	f7fd fa3c 	bl	8003140 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d019      	beq.n	8005d1a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d06:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3314      	adds	r3, #20
 8005d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6a39      	ldr	r1, [r7, #32]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e5      	bne.n	8005d4e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3760      	adds	r7, #96	@ 0x60
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	08005a67 	.word	0x08005a67
 8005d90:	08005b93 	.word	0x08005b93
 8005d94:	08005bcf 	.word	0x08005bcf

08005d98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	@ 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	61ba      	str	r2, [r7, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005ddc:	bf00      	nop
 8005dde:	3724      	adds	r7, #36	@ 0x24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b095      	sub	sp, #84	@ 0x54
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e10:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3314      	adds	r3, #20
 8005e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d119      	bne.n	8005e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0310 	bic.w	r3, r3, #16
 8005e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e80:	61ba      	str	r2, [r7, #24]
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ea2:	bf00      	nop
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff fd5b 	bl	8005984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b21      	cmp	r3, #33	@ 0x21
 8005ee8:	d13e      	bne.n	8005f68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef2:	d114      	bne.n	8005f1e <UART_Transmit_IT+0x48>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d110      	bne.n	8005f1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	621a      	str	r2, [r3, #32]
 8005f1c:	e008      	b.n	8005f30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	1c59      	adds	r1, r3, #1
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6211      	str	r1, [r2, #32]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10f      	bne.n	8005f64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fccc 	bl	8005934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b08c      	sub	sp, #48	@ 0x30
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b22      	cmp	r3, #34	@ 0x22
 8005fb8:	f040 80ae 	bne.w	8006118 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc4:	d117      	bne.n	8005ff6 <UART_Receive_IT+0x50>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d113      	bne.n	8005ff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ff4:	e026      	b.n	8006044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006008:	d007      	beq.n	800601a <UART_Receive_IT+0x74>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <UART_Receive_IT+0x82>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e008      	b.n	800603a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006034:	b2da      	uxtb	r2, r3
 8006036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4619      	mov	r1, r3
 8006052:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006054:	2b00      	cmp	r3, #0
 8006056:	d15d      	bne.n	8006114 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0220 	bic.w	r2, r2, #32
 8006066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	2b01      	cmp	r3, #1
 800609c:	d135      	bne.n	800610a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	623a      	str	r2, [r7, #32]
 80060c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	69f9      	ldr	r1, [r7, #28]
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e5      	bne.n	80060a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d10a      	bne.n	80060fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fc48 	bl	8005998 <HAL_UARTEx_RxEventCallback>
 8006108:	e002      	b.n	8006110 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fc26 	bl	800595c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e002      	b.n	800611a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3730      	adds	r7, #48	@ 0x30
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006128:	b0c0      	sub	sp, #256	@ 0x100
 800612a:	af00      	add	r7, sp, #0
 800612c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	68d9      	ldr	r1, [r3, #12]
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	ea40 0301 	orr.w	r3, r0, r1
 800614c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	431a      	orrs	r2, r3
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	431a      	orrs	r2, r3
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800617c:	f021 010c 	bic.w	r1, r1, #12
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800618a:	430b      	orrs	r3, r1
 800618c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	6999      	ldr	r1, [r3, #24]
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	ea40 0301 	orr.w	r3, r0, r1
 80061aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <UART_SetConfig+0x2cc>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d005      	beq.n	80061c4 <UART_SetConfig+0xa0>
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b8d      	ldr	r3, [pc, #564]	@ (80063f4 <UART_SetConfig+0x2d0>)
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d104      	bne.n	80061ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061c4:	f7fe f932 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 80061c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061cc:	e003      	b.n	80061d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ce:	f7fe f919 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80061d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e0:	f040 810c 	bne.w	80063fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	1891      	adds	r1, r2, r2
 80061fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061fe:	415b      	adcs	r3, r3
 8006200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006206:	4621      	mov	r1, r4
 8006208:	eb12 0801 	adds.w	r8, r2, r1
 800620c:	4629      	mov	r1, r5
 800620e:	eb43 0901 	adc.w	r9, r3, r1
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800621e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006226:	4690      	mov	r8, r2
 8006228:	4699      	mov	r9, r3
 800622a:	4623      	mov	r3, r4
 800622c:	eb18 0303 	adds.w	r3, r8, r3
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006234:	462b      	mov	r3, r5
 8006236:	eb49 0303 	adc.w	r3, r9, r3
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800624a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800624e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006252:	460b      	mov	r3, r1
 8006254:	18db      	adds	r3, r3, r3
 8006256:	653b      	str	r3, [r7, #80]	@ 0x50
 8006258:	4613      	mov	r3, r2
 800625a:	eb42 0303 	adc.w	r3, r2, r3
 800625e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006268:	f7fa fa4e 	bl	8000708 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4b61      	ldr	r3, [pc, #388]	@ (80063f8 <UART_SetConfig+0x2d4>)
 8006272:	fba3 2302 	umull	r2, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	011c      	lsls	r4, r3, #4
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006294:	415b      	adcs	r3, r3
 8006296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800629c:	4641      	mov	r1, r8
 800629e:	eb12 0a01 	adds.w	sl, r2, r1
 80062a2:	4649      	mov	r1, r9
 80062a4:	eb43 0b01 	adc.w	fp, r3, r1
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062bc:	4692      	mov	sl, r2
 80062be:	469b      	mov	fp, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	eb1a 0303 	adds.w	r3, sl, r3
 80062c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ca:	464b      	mov	r3, r9
 80062cc:	eb4b 0303 	adc.w	r3, fp, r3
 80062d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062fe:	f7fa fa03 	bl	8000708 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4611      	mov	r1, r2
 8006308:	4b3b      	ldr	r3, [pc, #236]	@ (80063f8 <UART_SetConfig+0x2d4>)
 800630a:	fba3 2301 	umull	r2, r3, r3, r1
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2264      	movs	r2, #100	@ 0x64
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	1acb      	subs	r3, r1, r3
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800631e:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <UART_SetConfig+0x2d4>)
 8006320:	fba3 2302 	umull	r2, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800632c:	441c      	add	r4, r3
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800633c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	1891      	adds	r1, r2, r2
 8006346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006348:	415b      	adcs	r3, r3
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800634c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006350:	4641      	mov	r1, r8
 8006352:	1851      	adds	r1, r2, r1
 8006354:	6339      	str	r1, [r7, #48]	@ 0x30
 8006356:	4649      	mov	r1, r9
 8006358:	414b      	adcs	r3, r1
 800635a:	637b      	str	r3, [r7, #52]	@ 0x34
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006368:	4659      	mov	r1, fp
 800636a:	00cb      	lsls	r3, r1, #3
 800636c:	4651      	mov	r1, sl
 800636e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006372:	4651      	mov	r1, sl
 8006374:	00ca      	lsls	r2, r1, #3
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	4603      	mov	r3, r0
 800637c:	4642      	mov	r2, r8
 800637e:	189b      	adds	r3, r3, r2
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006384:	464b      	mov	r3, r9
 8006386:	460a      	mov	r2, r1
 8006388:	eb42 0303 	adc.w	r3, r2, r3
 800638c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800639c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063a4:	460b      	mov	r3, r1
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063aa:	4613      	mov	r3, r2
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063ba:	f7fa f9a5 	bl	8000708 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <UART_SetConfig+0x2d4>)
 80063c4:	fba3 1302 	umull	r1, r3, r3, r2
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	2164      	movs	r1, #100	@ 0x64
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	3332      	adds	r3, #50	@ 0x32
 80063d6:	4a08      	ldr	r2, [pc, #32]	@ (80063f8 <UART_SetConfig+0x2d4>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f003 0207 	and.w	r2, r3, #7
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4422      	add	r2, r4
 80063ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063ec:	e106      	b.n	80065fc <UART_SetConfig+0x4d8>
 80063ee:	bf00      	nop
 80063f0:	40011000 	.word	0x40011000
 80063f4:	40011400 	.word	0x40011400
 80063f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800640a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800640e:	4642      	mov	r2, r8
 8006410:	464b      	mov	r3, r9
 8006412:	1891      	adds	r1, r2, r2
 8006414:	6239      	str	r1, [r7, #32]
 8006416:	415b      	adcs	r3, r3
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
 800641a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800641e:	4641      	mov	r1, r8
 8006420:	1854      	adds	r4, r2, r1
 8006422:	4649      	mov	r1, r9
 8006424:	eb43 0501 	adc.w	r5, r3, r1
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	00eb      	lsls	r3, r5, #3
 8006432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006436:	00e2      	lsls	r2, r4, #3
 8006438:	4614      	mov	r4, r2
 800643a:	461d      	mov	r5, r3
 800643c:	4643      	mov	r3, r8
 800643e:	18e3      	adds	r3, r4, r3
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006444:	464b      	mov	r3, r9
 8006446:	eb45 0303 	adc.w	r3, r5, r3
 800644a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800645a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800646a:	4629      	mov	r1, r5
 800646c:	008b      	lsls	r3, r1, #2
 800646e:	4621      	mov	r1, r4
 8006470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006474:	4621      	mov	r1, r4
 8006476:	008a      	lsls	r2, r1, #2
 8006478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800647c:	f7fa f944 	bl	8000708 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4b60      	ldr	r3, [pc, #384]	@ (8006608 <UART_SetConfig+0x4e4>)
 8006486:	fba3 2302 	umull	r2, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	011c      	lsls	r4, r3, #4
 800648e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800649c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	61b9      	str	r1, [r7, #24]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6139      	str	r1, [r7, #16]
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064e4:	464b      	mov	r3, r9
 80064e6:	460a      	mov	r2, r1
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006508:	4649      	mov	r1, r9
 800650a:	008b      	lsls	r3, r1, #2
 800650c:	4641      	mov	r1, r8
 800650e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006512:	4641      	mov	r1, r8
 8006514:	008a      	lsls	r2, r1, #2
 8006516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800651a:	f7fa f8f5 	bl	8000708 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4611      	mov	r1, r2
 8006524:	4b38      	ldr	r3, [pc, #224]	@ (8006608 <UART_SetConfig+0x4e4>)
 8006526:	fba3 2301 	umull	r2, r3, r3, r1
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2264      	movs	r2, #100	@ 0x64
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	1acb      	subs	r3, r1, r3
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	3332      	adds	r3, #50	@ 0x32
 8006538:	4a33      	ldr	r2, [pc, #204]	@ (8006608 <UART_SetConfig+0x4e4>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006544:	441c      	add	r4, r3
 8006546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800654a:	2200      	movs	r2, #0
 800654c:	673b      	str	r3, [r7, #112]	@ 0x70
 800654e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	1891      	adds	r1, r2, r2
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	415b      	adcs	r3, r3
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006564:	4641      	mov	r1, r8
 8006566:	1851      	adds	r1, r2, r1
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	4649      	mov	r1, r9
 800656c:	414b      	adcs	r3, r1
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800657c:	4659      	mov	r1, fp
 800657e:	00cb      	lsls	r3, r1, #3
 8006580:	4651      	mov	r1, sl
 8006582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006586:	4651      	mov	r1, sl
 8006588:	00ca      	lsls	r2, r1, #3
 800658a:	4610      	mov	r0, r2
 800658c:	4619      	mov	r1, r3
 800658e:	4603      	mov	r3, r0
 8006590:	4642      	mov	r2, r8
 8006592:	189b      	adds	r3, r3, r2
 8006594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006596:	464b      	mov	r3, r9
 8006598:	460a      	mov	r2, r1
 800659a:	eb42 0303 	adc.w	r3, r2, r3
 800659e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80065aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065b8:	4649      	mov	r1, r9
 80065ba:	008b      	lsls	r3, r1, #2
 80065bc:	4641      	mov	r1, r8
 80065be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c2:	4641      	mov	r1, r8
 80065c4:	008a      	lsls	r2, r1, #2
 80065c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065ca:	f7fa f89d 	bl	8000708 <__aeabi_uldivmod>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <UART_SetConfig+0x4e4>)
 80065d4:	fba3 1302 	umull	r1, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2164      	movs	r1, #100	@ 0x64
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	3332      	adds	r3, #50	@ 0x32
 80065e6:	4a08      	ldr	r2, [pc, #32]	@ (8006608 <UART_SetConfig+0x4e4>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4422      	add	r2, r4
 80065fa:	609a      	str	r2, [r3, #8]
}
 80065fc:	bf00      	nop
 80065fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006608:	51eb851f 	.word	0x51eb851f

0800660c <__NVIC_SetPriority>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661c:	2b00      	cmp	r3, #0
 800661e:	db0a      	blt.n	8006636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	490c      	ldr	r1, [pc, #48]	@ (8006658 <__NVIC_SetPriority+0x4c>)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	0112      	lsls	r2, r2, #4
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	440b      	add	r3, r1
 8006630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006634:	e00a      	b.n	800664c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4908      	ldr	r1, [pc, #32]	@ (800665c <__NVIC_SetPriority+0x50>)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	3b04      	subs	r3, #4
 8006644:	0112      	lsls	r2, r2, #4
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	440b      	add	r3, r1
 800664a:	761a      	strb	r2, [r3, #24]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000e100 	.word	0xe000e100
 800665c:	e000ed00 	.word	0xe000ed00

08006660 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006664:	2100      	movs	r1, #0
 8006666:	f06f 0004 	mvn.w	r0, #4
 800666a:	f7ff ffcf 	bl	800660c <__NVIC_SetPriority>
#endif
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667a:	f3ef 8305 	mrs	r3, IPSR
 800667e:	603b      	str	r3, [r7, #0]
  return(result);
 8006680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006686:	f06f 0305 	mvn.w	r3, #5
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	e00c      	b.n	80066a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <osKernelInitialize+0x44>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006696:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <osKernelInitialize+0x44>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800669c:	2300      	movs	r3, #0
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	e002      	b.n	80066a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066a8:	687b      	ldr	r3, [r7, #4]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20004ba4 	.word	0x20004ba4

080066bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c2:	f3ef 8305 	mrs	r3, IPSR
 80066c6:	603b      	str	r3, [r7, #0]
  return(result);
 80066c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80066ce:	f06f 0305 	mvn.w	r3, #5
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e010      	b.n	80066f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <osKernelStart+0x48>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d109      	bne.n	80066f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066de:	f7ff ffbf 	bl	8006660 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066e2:	4b08      	ldr	r3, [pc, #32]	@ (8006704 <osKernelStart+0x48>)
 80066e4:	2202      	movs	r2, #2
 80066e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066e8:	f001 f87a 	bl	80077e0 <vTaskStartScheduler>
      stat = osOK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e002      	b.n	80066f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066f8:	687b      	ldr	r3, [r7, #4]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20004ba4 	.word	0x20004ba4

08006708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	@ 0x38
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006718:	f3ef 8305 	mrs	r3, IPSR
 800671c:	617b      	str	r3, [r7, #20]
  return(result);
 800671e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006720:	2b00      	cmp	r3, #0
 8006722:	d17e      	bne.n	8006822 <osThreadNew+0x11a>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d07b      	beq.n	8006822 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800672e:	2318      	movs	r3, #24
 8006730:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800673a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d045      	beq.n	80067ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <osThreadNew+0x48>
        name = attr->name;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <osThreadNew+0x6e>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b38      	cmp	r3, #56	@ 0x38
 8006768:	d805      	bhi.n	8006776 <osThreadNew+0x6e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <osThreadNew+0x72>
        return (NULL);
 8006776:	2300      	movs	r3, #0
 8006778:	e054      	b.n	8006824 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <osThreadNew+0xa8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b5b      	cmp	r3, #91	@ 0x5b
 8006798:	d90a      	bls.n	80067b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <osThreadNew+0xa8>
        mem = 1;
 80067aa:	2301      	movs	r3, #1
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e010      	b.n	80067d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <osThreadNew+0xca>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <osThreadNew+0xca>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <osThreadNew+0xca>
          mem = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e001      	b.n	80067d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d110      	bne.n	80067fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067e0:	9202      	str	r2, [sp, #8]
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fe1a 	bl	8007428 <xTaskCreateStatic>
 80067f4:	4603      	mov	r3, r0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	e013      	b.n	8006822 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d110      	bne.n	8006822 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	b29a      	uxth	r2, r3
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fe68 	bl	80074e8 <xTaskCreate>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d001      	beq.n	8006822 <osThreadNew+0x11a>
            hTask = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006822:	693b      	ldr	r3, [r7, #16]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3728      	adds	r7, #40	@ 0x28
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006834:	f3ef 8305 	mrs	r3, IPSR
 8006838:	60bb      	str	r3, [r7, #8]
  return(result);
 800683a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <osDelay+0x1c>
    stat = osErrorISR;
 8006840:	f06f 0305 	mvn.w	r3, #5
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e007      	b.n	8006858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 ff8e 	bl	8007774 <vTaskDelay>
    }
  }

  return (stat);
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a07      	ldr	r2, [pc, #28]	@ (8006890 <vApplicationGetIdleTaskMemory+0x2c>)
 8006874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4a06      	ldr	r2, [pc, #24]	@ (8006894 <vApplicationGetIdleTaskMemory+0x30>)
 800687a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2280      	movs	r2, #128	@ 0x80
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20004ba8 	.word	0x20004ba8
 8006894:	20004c04 	.word	0x20004c04

08006898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a07      	ldr	r2, [pc, #28]	@ (80068c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80068a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a06      	ldr	r2, [pc, #24]	@ (80068c8 <vApplicationGetTimerTaskMemory+0x30>)
 80068ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068b6:	601a      	str	r2, [r3, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20004e04 	.word	0x20004e04
 80068c8:	20004e60 	.word	0x20004e60

080068cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f103 0208 	add.w	r2, r3, #8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f103 0208 	add.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006984:	d103      	bne.n	800698e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e00c      	b.n	80069a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3308      	adds	r3, #8
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e002      	b.n	800699c <vListInsert+0x2e>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d2f6      	bcs.n	8006996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6892      	ldr	r2, [r2, #8]
 80069f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d103      	bne.n	8006a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xQueueGenericReset+0x2c>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60bb      	str	r3, [r7, #8]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a60:	f002 f8a2 	bl	8008ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	3b01      	subs	r3, #1
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22ff      	movs	r2, #255	@ 0xff
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	22ff      	movs	r2, #255	@ 0xff
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d114      	bne.n	8006ae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01a      	beq.n	8006af4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 f91a 	bl	8007cfc <xTaskRemoveFromEventList>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d012      	beq.n	8006af4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <xQueueGenericReset+0xd0>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	e009      	b.n	8006af4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3310      	adds	r3, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fef1 	bl	80068cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3324      	adds	r3, #36	@ 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff feec 	bl	80068cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006af4:	f002 f88a 	bl	8008c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006af8:	2301      	movs	r3, #1
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <xQueueGenericCreateStatic+0x56>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <xQueueGenericCreateStatic+0x5a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericCreateStatic+0x5c>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	623b      	str	r3, [r7, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xQueueGenericCreateStatic+0x84>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <xQueueGenericCreateStatic+0x88>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <xQueueGenericCreateStatic+0x8a>
 8006b90:	2300      	movs	r3, #0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bae:	2350      	movs	r3, #80	@ 0x50
 8006bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b50      	cmp	r3, #80	@ 0x50
 8006bb6:	d00b      	beq.n	8006bd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	61bb      	str	r3, [r7, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f805 	bl	8006c02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3730      	adds	r7, #48	@ 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e002      	b.n	8006c24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c30:	2101      	movs	r1, #1
 8006c32:	69b8      	ldr	r0, [r7, #24]
 8006c34:	f7ff fefe 	bl	8006a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	@ 0x38
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c56:	2300      	movs	r3, #0
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xQueueGenericSend+0x34>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <xQueueGenericSend+0x42>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueGenericSend+0x46>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueGenericSend+0x48>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <xQueueGenericSend+0x64>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x72>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0x76>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0x78>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <xQueueGenericSend+0x94>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cdc:	f001 f9f6 	bl	80080cc <xTaskGetSchedulerState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <xQueueGenericSend+0xa4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xQueueGenericSend+0xa8>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <xQueueGenericSend+0xaa>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xQueueGenericSend+0xc6>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61fb      	str	r3, [r7, #28]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0e:	f001 ff4b 	bl	8008ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <xQueueGenericSend+0xdc>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d129      	bne.n	8006d78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2a:	f000 fa0f 	bl	800714c <prvCopyDataToQueue>
 8006d2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 ffdd 	bl	8007cfc <xTaskRemoveFromEventList>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d013      	beq.n	8006d70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d48:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	e00a      	b.n	8006d70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b39      	ldr	r3, [pc, #228]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d70:	f001 ff4c 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e063      	b.n	8006e40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7e:	f001 ff45 	bl	8008c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e05c      	b.n	8006e40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f83f 	bl	8007e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d9a:	f001 ff37 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9e:	f000 fd87 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da2:	f001 ff01 	bl	8008ba8 <vPortEnterCritical>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006db2:	d103      	bne.n	8006dbc <xQueueGenericSend+0x174>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x18a>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dd2:	f001 ff1b 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd6:	1d3a      	adds	r2, r7, #4
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f82e 	bl	8007e40 <xTaskCheckForTimeOut>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dec:	f000 faa6 	bl	800733c <prvIsQueueFull>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	3310      	adds	r3, #16
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff2a 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e06:	f000 fa31 	bl	800726c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e0a:	f000 fd5f 	bl	80078cc <xTaskResumeAll>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af7c 	bne.w	8006d0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	e772      	b.n	8006d0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e2a:	f000 fa1f 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2e:	f000 fd4d 	bl	80078cc <xTaskResumeAll>
 8006e32:	e76c      	b.n	8006d0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e36:	f000 fa19 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e3a:	f000 fd47 	bl	80078cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3738      	adds	r7, #56	@ 0x38
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b090      	sub	sp, #64	@ 0x40
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueGenericSendFromISR+0x3e>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueueGenericSendFromISR+0x42>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueueGenericSendFromISR+0x44>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	e7fd      	b.n	8006ea8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSendFromISR+0x6e>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <xQueueGenericSendFromISR+0x72>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueGenericSendFromISR+0x74>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	623b      	str	r3, [r7, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006edc:	f001 ff44 	bl	8008d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61fa      	str	r2, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <xQueueGenericSendFromISR+0xc2>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d12f      	bne.n	8006f6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f24:	f000 f912 	bl	800714c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f30:	d112      	bne.n	8006f58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d016      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	3324      	adds	r3, #36	@ 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fedc 	bl	8007cfc <xTaskRemoveFromEventList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00e      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e007      	b.n	8006f68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	b25a      	sxtb	r2, r3
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f6c:	e001      	b.n	8006f72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3740      	adds	r7, #64	@ 0x40
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	@ 0x30
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xQueueReceive+0x32>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	623b      	str	r3, [r7, #32]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <xQueueReceive+0x40>
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <xQueueReceive+0x44>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <xQueueReceive+0x46>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10b      	bne.n	8006fea <xQueueReceive+0x62>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61fb      	str	r3, [r7, #28]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fea:	f001 f86f 	bl	80080cc <xTaskGetSchedulerState>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <xQueueReceive+0x72>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <xQueueReceive+0x76>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueReceive+0x78>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <xQueueReceive+0x94>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61bb      	str	r3, [r7, #24]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800701c:	f001 fdc4 	bl	8008ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01f      	beq.n	800706c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007030:	f000 f8f6 	bl	8007220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	1e5a      	subs	r2, r3, #1
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00f      	beq.n	8007064 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	3310      	adds	r3, #16
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fe57 	bl	8007cfc <xTaskRemoveFromEventList>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007054:	4b3c      	ldr	r3, [pc, #240]	@ (8007148 <xQueueReceive+0x1c0>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007064:	f001 fdd2 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8007068:	2301      	movs	r3, #1
 800706a:	e069      	b.n	8007140 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007072:	f001 fdcb 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007076:	2300      	movs	r3, #0
 8007078:	e062      	b.n	8007140 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007080:	f107 0310 	add.w	r3, r7, #16
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fec5 	bl	8007e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800708a:	2301      	movs	r3, #1
 800708c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800708e:	f001 fdbd 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007092:	f000 fc0d 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007096:	f001 fd87 	bl	8008ba8 <vPortEnterCritical>
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a6:	d103      	bne.n	80070b0 <xQueueReceive+0x128>
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070b6:	b25b      	sxtb	r3, r3
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070bc:	d103      	bne.n	80070c6 <xQueueReceive+0x13e>
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070c6:	f001 fda1 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ca:	1d3a      	adds	r2, r7, #4
 80070cc:	f107 0310 	add.w	r3, r7, #16
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 feb4 	bl	8007e40 <xTaskCheckForTimeOut>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d123      	bne.n	8007126 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070e0:	f000 f916 	bl	8007310 <prvIsQueueEmpty>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d017      	beq.n	800711a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	3324      	adds	r3, #36	@ 0x24
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fdb0 	bl	8007c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070fa:	f000 f8b7 	bl	800726c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070fe:	f000 fbe5 	bl	80078cc <xTaskResumeAll>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d189      	bne.n	800701c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007108:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <xQueueReceive+0x1c0>)
 800710a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	e780      	b.n	800701c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800711a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800711c:	f000 f8a6 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007120:	f000 fbd4 	bl	80078cc <xTaskResumeAll>
 8007124:	e77a      	b.n	800701c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007128:	f000 f8a0 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800712c:	f000 fbce 	bl	80078cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007132:	f000 f8ed 	bl	8007310 <prvIsQueueEmpty>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	f43f af6f 	beq.w	800701c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800713e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007140:	4618      	mov	r0, r3
 8007142:	3730      	adds	r7, #48	@ 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d14d      	bne.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 ffc6 	bl	8008108 <xTaskPriorityDisinherit>
 800717c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	e043      	b.n	800720e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d119      	bne.n	80071c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6858      	ldr	r0, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007194:	461a      	mov	r2, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	f00e fc4f 	bl	8015a3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d32b      	bcc.n	800720e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e026      	b.n	800720e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68d8      	ldr	r0, [r3, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	461a      	mov	r2, r3
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	f00e fc35 	bl	8015a3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d8:	425b      	negs	r3, r3
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d207      	bcs.n	80071fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	425b      	negs	r3, r3
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d105      	bne.n	800720e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3b01      	subs	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007216:	697b      	ldr	r3, [r7, #20]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	441a      	add	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d303      	bcc.n	8007254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68d9      	ldr	r1, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	461a      	mov	r2, r3
 800725e:	6838      	ldr	r0, [r7, #0]
 8007260:	f00e fbeb 	bl	8015a3a <memcpy>
	}
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007274:	f001 fc98 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007280:	e011      	b.n	80072a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3324      	adds	r3, #36	@ 0x24
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fd34 	bl	8007cfc <xTaskRemoveFromEventList>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800729a:	f000 fe35 	bl	8007f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dce9      	bgt.n	8007282 <prvUnlockQueue+0x16>
 80072ae:	e000      	b.n	80072b2 <prvUnlockQueue+0x46>
					break;
 80072b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22ff      	movs	r2, #255	@ 0xff
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072ba:	f001 fca7 	bl	8008c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072be:	f001 fc73 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ca:	e011      	b.n	80072f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3310      	adds	r3, #16
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fd0f 	bl	8007cfc <xTaskRemoveFromEventList>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e4:	f000 fe10 	bl	8007f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dce9      	bgt.n	80072cc <prvUnlockQueue+0x60>
 80072f8:	e000      	b.n	80072fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	22ff      	movs	r2, #255	@ 0xff
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007304:	f001 fc82 	bl	8008c0c <vPortExitCritical>
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007318:	f001 fc46 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e001      	b.n	800732e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800732e:	f001 fc6d 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007344:	f001 fc30 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	429a      	cmp	r2, r3
 8007352:	d102      	bne.n	800735a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e001      	b.n	800735e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800735e:	f001 fc55 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007362:	68fb      	ldr	r3, [r7, #12]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e014      	b.n	80073a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800737c:	4a0f      	ldr	r2, [pc, #60]	@ (80073bc <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007388:	490c      	ldr	r1, [pc, #48]	@ (80073bc <vQueueAddToRegistry+0x50>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <vQueueAddToRegistry+0x50>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800739e:	e006      	b.n	80073ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b07      	cmp	r3, #7
 80073aa:	d9e7      	bls.n	800737c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20005260 	.word	0x20005260

080073c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073d0:	f001 fbea 	bl	8008ba8 <vPortEnterCritical>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e0:	d103      	bne.n	80073ea <vQueueWaitForMessageRestricted+0x2a>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f6:	d103      	bne.n	8007400 <vQueueWaitForMessageRestricted+0x40>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007400:	f001 fc04 	bl	8008c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3324      	adds	r3, #36	@ 0x24
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fc45 	bl	8007ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800741a:	6978      	ldr	r0, [r7, #20]
 800741c:	f7ff ff26 	bl	800726c <prvUnlockQueue>
	}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af04      	add	r7, sp, #16
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <xTaskCreateStatic+0x2c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	623b      	str	r3, [r7, #32]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xTaskCreateStatic+0x4a>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007472:	235c      	movs	r3, #92	@ 0x5c
 8007474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b5c      	cmp	r3, #92	@ 0x5c
 800747a:	d00b      	beq.n	8007494 <xTaskCreateStatic+0x6c>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61bb      	str	r3, [r7, #24]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <xTaskCreateStatic+0xb2>
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01b      	beq.n	80074da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074b4:	2300      	movs	r3, #0
 80074b6:	9303      	str	r3, [sp, #12]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	9302      	str	r3, [sp, #8]
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f850 	bl	8007572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074d4:	f000 f8de 	bl	8007694 <prvAddNewTaskToReadyList>
 80074d8:	e001      	b.n	80074de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074de:	697b      	ldr	r3, [r7, #20]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	@ 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08c      	sub	sp, #48	@ 0x30
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fc75 	bl	8008dec <pvPortMalloc>
 8007502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800750a:	205c      	movs	r0, #92	@ 0x5c
 800750c:	f001 fc6e 	bl	8008dec <pvPortMalloc>
 8007510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
 800751e:	e005      	b.n	800752c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f001 fd31 	bl	8008f88 <vPortFree>
 8007526:	e001      	b.n	800752c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f80e 	bl	8007572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f000 f89c 	bl	8007694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e002      	b.n	8007568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007568:	69bb      	ldr	r3, [r7, #24]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	461a      	mov	r2, r3
 800758a:	21a5      	movs	r1, #165	@ 0xa5
 800758c:	f00e f98c 	bl	80158a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759a:	3b01      	subs	r3, #1
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	617b      	str	r3, [r7, #20]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01f      	beq.n	8007612 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e012      	b.n	80075fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	7819      	ldrb	r1, [r3, #0]
 80075e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	3334      	adds	r3, #52	@ 0x34
 80075e8:	460a      	mov	r2, r1
 80075ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	2b0f      	cmp	r3, #15
 8007602:	d9e9      	bls.n	80075d8 <prvInitialiseNewTask+0x66>
 8007604:	e000      	b.n	8007608 <prvInitialiseNewTask+0x96>
			{
				break;
 8007606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007610:	e003      	b.n	800761a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761c:	2b37      	cmp	r3, #55	@ 0x37
 800761e:	d901      	bls.n	8007624 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007620:	2337      	movs	r3, #55	@ 0x37
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007628:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f966 	bl	800690c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f961 	bl	800690c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	2200      	movs	r2, #0
 8007664:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	69b8      	ldr	r0, [r7, #24]
 8007674:	f001 f966 	bl	8008944 <pxPortInitialiseStack>
 8007678:	4602      	mov	r2, r0
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800768a:	bf00      	nop
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800769c:	f001 fa84 	bl	8008ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076aa:	4b2c      	ldr	r3, [pc, #176]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076b2:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b8:	4b27      	ldr	r3, [pc, #156]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d110      	bne.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076c0:	f000 fc46 	bl	8007f50 <prvInitialiseTaskLists>
 80076c4:	e00d      	b.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076c6:	4b26      	ldr	r3, [pc, #152]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076ce:	4b23      	ldr	r3, [pc, #140]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d802      	bhi.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076dc:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076e2:	4b20      	ldr	r3, [pc, #128]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3301      	adds	r3, #1
 80076e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d903      	bls.n	8007708 <prvAddNewTaskToReadyList+0x74>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	4a18      	ldr	r2, [pc, #96]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4a15      	ldr	r2, [pc, #84]	@ (800776c <prvAddNewTaskToReadyList+0xd8>)
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7ff f901 	bl	8006926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007724:	f001 fa72 	bl	8008c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007728:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	429a      	cmp	r2, r3
 800773c:	d207      	bcs.n	800774e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <prvAddNewTaskToReadyList+0xdc>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20005774 	.word	0x20005774
 800775c:	200052a0 	.word	0x200052a0
 8007760:	20005780 	.word	0x20005780
 8007764:	20005790 	.word	0x20005790
 8007768:	2000577c 	.word	0x2000577c
 800776c:	200052a4 	.word	0x200052a4
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007786:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <vTaskDelay+0x64>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <vTaskDelay+0x32>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077a6:	f000 f883 	bl	80078b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077aa:	2100      	movs	r1, #0
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fd1b 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077b2:	f000 f88b 	bl	80078cc <xTaskResumeAll>
 80077b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <vTaskDelay+0x68>)
 80077c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	2000579c 	.word	0x2000579c
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	@ 0x28
 80077e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ee:	463a      	mov	r2, r7
 80077f0:	1d39      	adds	r1, r7, #4
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff f834 	bl	8006864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	2300      	movs	r3, #0
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	460a      	mov	r2, r1
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <vTaskStartScheduler+0xb8>)
 8007810:	4822      	ldr	r0, [pc, #136]	@ (800789c <vTaskStartScheduler+0xbc>)
 8007812:	f7ff fe09 	bl	8007428 <xTaskCreateStatic>
 8007816:	4603      	mov	r3, r0
 8007818:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800781c:	4b20      	ldr	r3, [pc, #128]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e001      	b.n	800782e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d102      	bne.n	800783a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007834:	f000 fd2c 	bl	8008290 <xTimerCreateTimerTask>
 8007838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d116      	bne.n	800786e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007854:	4b13      	ldr	r3, [pc, #76]	@ (80078a4 <vTaskStartScheduler+0xc4>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800785a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <vTaskStartScheduler+0xc8>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <vTaskStartScheduler+0xcc>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007868:	f001 f8fa 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800786c:	e00f      	b.n	800788e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007874:	d10b      	bne.n	800788e <vTaskStartScheduler+0xae>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vTaskStartScheduler+0xaa>
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	0801682c 	.word	0x0801682c
 800789c:	08007f21 	.word	0x08007f21
 80078a0:	20005798 	.word	0x20005798
 80078a4:	20005794 	.word	0x20005794
 80078a8:	20005780 	.word	0x20005780
 80078ac:	20005778 	.word	0x20005778

080078b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	4a03      	ldr	r2, [pc, #12]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	2000579c 	.word	0x2000579c

080078cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078da:	4b42      	ldr	r3, [pc, #264]	@ (80079e4 <xTaskResumeAll+0x118>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <xTaskResumeAll+0x2e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078fa:	f001 f955 	bl	8008ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3b01      	subs	r3, #1
 8007904:	4a37      	ldr	r2, [pc, #220]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b36      	ldr	r3, [pc, #216]	@ (80079e4 <xTaskResumeAll+0x118>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d162      	bne.n	80079d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007910:	4b35      	ldr	r3, [pc, #212]	@ (80079e8 <xTaskResumeAll+0x11c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d05e      	beq.n	80079d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007918:	e02f      	b.n	800797a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b34      	ldr	r3, [pc, #208]	@ (80079ec <xTaskResumeAll+0x120>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3318      	adds	r3, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f85a 	bl	80069e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff f855 	bl	80069e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793a:	4b2d      	ldr	r3, [pc, #180]	@ (80079f0 <xTaskResumeAll+0x124>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <xTaskResumeAll+0x7e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a2a      	ldr	r2, [pc, #168]	@ (80079f0 <xTaskResumeAll+0x124>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a27      	ldr	r2, [pc, #156]	@ (80079f4 <xTaskResumeAll+0x128>)
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe ffe0 	bl	8006926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	4b23      	ldr	r3, [pc, #140]	@ (80079f8 <xTaskResumeAll+0x12c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007974:	4b21      	ldr	r3, [pc, #132]	@ (80079fc <xTaskResumeAll+0x130>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800797a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <xTaskResumeAll+0x120>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007988:	f000 fb80 	bl	800808c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800798c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a00 <xTaskResumeAll+0x134>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d010      	beq.n	80079ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007998:	f000 f846 	bl	8007a28 <xTaskIncrementTick>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079a2:	4b16      	ldr	r3, [pc, #88]	@ (80079fc <xTaskResumeAll+0x130>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f1      	bne.n	8007998 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079b4:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <xTaskResumeAll+0x134>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ba:	4b10      	ldr	r3, [pc, #64]	@ (80079fc <xTaskResumeAll+0x130>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a04 <xTaskResumeAll+0x138>)
 80079c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 f919 	bl	8008c0c <vPortExitCritical>

	return xAlreadyYielded;
 80079da:	68bb      	ldr	r3, [r7, #8]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000579c 	.word	0x2000579c
 80079e8:	20005774 	.word	0x20005774
 80079ec:	20005734 	.word	0x20005734
 80079f0:	2000577c 	.word	0x2000577c
 80079f4:	200052a4 	.word	0x200052a4
 80079f8:	200052a0 	.word	0x200052a0
 80079fc:	20005788 	.word	0x20005788
 8007a00:	20005784 	.word	0x20005784
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <xTaskGetTickCount+0x1c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a14:	687b      	ldr	r3, [r7, #4]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20005778 	.word	0x20005778

08007a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a32:	4b4f      	ldr	r3, [pc, #316]	@ (8007b70 <xTaskIncrementTick+0x148>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 8090 	bne.w	8007b5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a44:	4a4b      	ldr	r2, [pc, #300]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d121      	bne.n	8007a94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a50:	4b49      	ldr	r3, [pc, #292]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xTaskIncrementTick+0x46>
 8007a72:	4b41      	ldr	r3, [pc, #260]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	4b40      	ldr	r3, [pc, #256]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4a3e      	ldr	r2, [pc, #248]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	4b3e      	ldr	r3, [pc, #248]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	f000 fafc 	bl	800808c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a94:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d349      	bcc.n	8007b32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	4b36      	ldr	r3, [pc, #216]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa8:	4b36      	ldr	r3, [pc, #216]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aae:	601a      	str	r2, [r3, #0]
					break;
 8007ab0:	e03f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b31      	ldr	r3, [pc, #196]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d203      	bcs.n	8007ad2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aca:	4a2e      	ldr	r2, [pc, #184]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ad0:	e02f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe ff82 	bl	80069e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe ff79 	bl	80069e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <xTaskIncrementTick+0xda>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	4a22      	ldr	r2, [pc, #136]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b10:	441a      	add	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe ff04 	bl	8006926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b22:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3b8      	bcc.n	8007a9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b30:	e7b5      	b.n	8007a9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b32:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4914      	ldr	r1, [pc, #80]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d901      	bls.n	8007b4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b4e:	4b11      	ldr	r3, [pc, #68]	@ (8007b94 <xTaskIncrementTick+0x16c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e004      	b.n	8007b66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3301      	adds	r3, #1
 8007b62:	4a0d      	ldr	r2, [pc, #52]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b66:	697b      	ldr	r3, [r7, #20]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	2000579c 	.word	0x2000579c
 8007b74:	20005778 	.word	0x20005778
 8007b78:	2000572c 	.word	0x2000572c
 8007b7c:	20005730 	.word	0x20005730
 8007b80:	2000578c 	.word	0x2000578c
 8007b84:	20005794 	.word	0x20005794
 8007b88:	2000577c 	.word	0x2000577c
 8007b8c:	200052a4 	.word	0x200052a4
 8007b90:	200052a0 	.word	0x200052a0
 8007b94:	20005788 	.word	0x20005788
 8007b98:	20005784 	.word	0x20005784

08007b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ba2:	4b28      	ldr	r3, [pc, #160]	@ (8007c44 <vTaskSwitchContext+0xa8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007baa:	4b27      	ldr	r3, [pc, #156]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bb0:	e042      	b.n	8007c38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bb2:	4b25      	ldr	r3, [pc, #148]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb8:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e011      	b.n	8007be4 <vTaskSwitchContext+0x48>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <vTaskSwitchContext+0x42>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	607b      	str	r3, [r7, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <vTaskSwitchContext+0x3e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	491a      	ldr	r1, [pc, #104]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0e3      	beq.n	8007bc0 <vTaskSwitchContext+0x24>
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a13      	ldr	r2, [pc, #76]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007c04:	4413      	add	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d104      	bne.n	8007c28 <vTaskSwitchContext+0x8c>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	@ (8007c54 <vTaskSwitchContext+0xb8>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4a06      	ldr	r2, [pc, #24]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6013      	str	r3, [r2, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	2000579c 	.word	0x2000579c
 8007c48:	20005788 	.word	0x20005788
 8007c4c:	2000577c 	.word	0x2000577c
 8007c50:	200052a4 	.word	0x200052a4
 8007c54:	200052a0 	.word	0x200052a0

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <vTaskPlaceOnEventList+0x48>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3318      	adds	r3, #24
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fe fe70 	bl	800696e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c8e:	2101      	movs	r1, #1
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f000 faa9 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200052a0 	.word	0x200052a0

08007ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	617b      	str	r3, [r7, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cce:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7fe fe25 	bl	8006926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ce6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 fa7c 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
	}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200052a0 	.word	0x200052a0

08007cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fe56 	bl	80069e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d34:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <xTaskRemoveFromEventList+0xb0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11d      	bne.n	8007d78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fe4d 	bl	80069e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d903      	bls.n	8007d5a <xTaskRemoveFromEventList+0x5e>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4a16      	ldr	r2, [pc, #88]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a13      	ldr	r2, [pc, #76]	@ (8007db4 <xTaskRemoveFromEventList+0xb8>)
 8007d68:	441a      	add	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7fe fdd8 	bl	8006926 <vListInsertEnd>
 8007d76:	e005      	b.n	8007d84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	480e      	ldr	r0, [pc, #56]	@ (8007db8 <xTaskRemoveFromEventList+0xbc>)
 8007d80:	f7fe fdd1 	bl	8006926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <xTaskRemoveFromEventList+0xc0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d905      	bls.n	8007d9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d96:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <xTaskRemoveFromEventList+0xc4>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e001      	b.n	8007da2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	2000579c 	.word	0x2000579c
 8007db0:	2000577c 	.word	0x2000577c
 8007db4:	200052a4 	.word	0x200052a4
 8007db8:	20005734 	.word	0x20005734
 8007dbc:	200052a0 	.word	0x200052a0
 8007dc0:	20005788 	.word	0x20005788

08007dc4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60fb      	str	r3, [r7, #12]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007dea:	f000 fedd 	bl	8008ba8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dee:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vTaskSetTimeOutState+0x48>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007df6:	4b06      	ldr	r3, [pc, #24]	@ (8007e10 <vTaskSetTimeOutState+0x4c>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007dfe:	f000 ff05 	bl	8008c0c <vPortExitCritical>
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000578c 	.word	0x2000578c
 8007e10:	20005778 	.word	0x20005778

08007e14 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <vTaskInternalSetTimeOutState+0x24>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <vTaskInternalSetTimeOutState+0x28>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	605a      	str	r2, [r3, #4]
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	2000578c 	.word	0x2000578c
 8007e3c:	20005778 	.word	0x20005778

08007e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e86:	f000 fe8f 	bl	8008ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <xTaskCheckForTimeOut+0xc0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ea2:	d102      	bne.n	8007eaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e023      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b15      	ldr	r3, [pc, #84]	@ (8007f04 <xTaskCheckForTimeOut+0xc4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d007      	beq.n	8007ec6 <xTaskCheckForTimeOut+0x86>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d302      	bcc.n	8007ec6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e015      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d20b      	bcs.n	8007ee8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ff99 	bl	8007e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e004      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ef2:	f000 fe8b 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20005778 	.word	0x20005778
 8007f04:	2000578c 	.word	0x2000578c

08007f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f0c:	4b03      	ldr	r3, [pc, #12]	@ (8007f1c <vTaskMissedYield+0x14>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20005788 	.word	0x20005788

08007f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f28:	f000 f852 	bl	8007fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f2c:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <prvIdleTask+0x28>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d9f9      	bls.n	8007f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <prvIdleTask+0x2c>)
 8007f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f44:	e7f0      	b.n	8007f28 <prvIdleTask+0x8>
 8007f46:	bf00      	nop
 8007f48:	200052a4 	.word	0x200052a4
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	e00c      	b.n	8007f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4a12      	ldr	r2, [pc, #72]	@ (8007fb0 <prvInitialiseTaskLists+0x60>)
 8007f68:	4413      	add	r3, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fcae 	bl	80068cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3301      	adds	r3, #1
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b37      	cmp	r3, #55	@ 0x37
 8007f7a:	d9ef      	bls.n	8007f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f7c:	480d      	ldr	r0, [pc, #52]	@ (8007fb4 <prvInitialiseTaskLists+0x64>)
 8007f7e:	f7fe fca5 	bl	80068cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f82:	480d      	ldr	r0, [pc, #52]	@ (8007fb8 <prvInitialiseTaskLists+0x68>)
 8007f84:	f7fe fca2 	bl	80068cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f88:	480c      	ldr	r0, [pc, #48]	@ (8007fbc <prvInitialiseTaskLists+0x6c>)
 8007f8a:	f7fe fc9f 	bl	80068cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f8e:	480c      	ldr	r0, [pc, #48]	@ (8007fc0 <prvInitialiseTaskLists+0x70>)
 8007f90:	f7fe fc9c 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f94:	480b      	ldr	r0, [pc, #44]	@ (8007fc4 <prvInitialiseTaskLists+0x74>)
 8007f96:	f7fe fc99 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc8 <prvInitialiseTaskLists+0x78>)
 8007f9c:	4a05      	ldr	r2, [pc, #20]	@ (8007fb4 <prvInitialiseTaskLists+0x64>)
 8007f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <prvInitialiseTaskLists+0x7c>)
 8007fa2:	4a05      	ldr	r2, [pc, #20]	@ (8007fb8 <prvInitialiseTaskLists+0x68>)
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200052a4 	.word	0x200052a4
 8007fb4:	20005704 	.word	0x20005704
 8007fb8:	20005718 	.word	0x20005718
 8007fbc:	20005734 	.word	0x20005734
 8007fc0:	20005748 	.word	0x20005748
 8007fc4:	20005760 	.word	0x20005760
 8007fc8:	2000572c 	.word	0x2000572c
 8007fcc:	20005730 	.word	0x20005730

08007fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd6:	e019      	b.n	800800c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd8:	f000 fde6 	bl	8008ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fdc:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <prvCheckTasksWaitingTermination+0x50>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fcf9 	bl	80069e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <prvCheckTasksWaitingTermination+0x54>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8008024 <prvCheckTasksWaitingTermination+0x54>)
 8007ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 8008000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008002:	f000 fe03 	bl	8008c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f810 	bl	800802c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800800c:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e1      	bne.n	8007fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20005748 	.word	0x20005748
 8008024:	20005774 	.word	0x20005774
 8008028:	2000575c 	.word	0x2000575c

0800802c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800803a:	2b00      	cmp	r3, #0
 800803c:	d108      	bne.n	8008050 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	4618      	mov	r0, r3
 8008044:	f000 ffa0 	bl	8008f88 <vPortFree>
				vPortFree( pxTCB );
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 ff9d 	bl	8008f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800804e:	e019      	b.n	8008084 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 ff94 	bl	8008f88 <vPortFree>
	}
 8008060:	e010      	b.n	8008084 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008068:	2b02      	cmp	r3, #2
 800806a:	d00b      	beq.n	8008084 <prvDeleteTCB+0x58>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <prvDeleteTCB+0x54>
	}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 800809e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080a4:	e008      	b.n	80080b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a04      	ldr	r2, [pc, #16]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	6013      	str	r3, [r2, #0]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	2000572c 	.word	0x2000572c
 80080c8:	20005794 	.word	0x20005794

080080cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <xTaskGetSchedulerState+0x34>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080da:	2301      	movs	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	e008      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e0:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <xTaskGetSchedulerState+0x38>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080e8:	2302      	movs	r3, #2
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	e001      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080f2:	687b      	ldr	r3, [r7, #4]
	}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20005780 	.word	0x20005780
 8008104:	2000579c 	.word	0x2000579c

08008108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d058      	beq.n	80081d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800811e:	4b2f      	ldr	r3, [pc, #188]	@ (80081dc <xTaskPriorityDisinherit+0xd4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	d00b      	beq.n	8008140 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	60bb      	str	r3, [r7, #8]
}
 800815a:	bf00      	nop
 800815c:	bf00      	nop
 800815e:	e7fd      	b.n	800815c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008164:	1e5a      	subs	r2, r3, #1
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008172:	429a      	cmp	r2, r3
 8008174:	d02c      	beq.n	80081d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817a:	2b00      	cmp	r3, #0
 800817c:	d128      	bne.n	80081d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3304      	adds	r3, #4
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fc2c 	bl	80069e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a0:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <xTaskPriorityDisinherit+0xd8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <xTaskPriorityDisinherit+0xa8>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a0c      	ldr	r2, [pc, #48]	@ (80081e0 <xTaskPriorityDisinherit+0xd8>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a09      	ldr	r2, [pc, #36]	@ (80081e4 <xTaskPriorityDisinherit+0xdc>)
 80081be:	441a      	add	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe fbad 	bl	8006926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081d0:	697b      	ldr	r3, [r7, #20]
	}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200052a0 	.word	0x200052a0
 80081e0:	2000577c 	.word	0x2000577c
 80081e4:	200052a4 	.word	0x200052a4

080081e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081f2:	4b21      	ldr	r3, [pc, #132]	@ (8008278 <prvAddCurrentTaskToDelayedList+0x90>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f8:	4b20      	ldr	r3, [pc, #128]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fbee 	bl	80069e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820a:	d10a      	bne.n	8008222 <prvAddCurrentTaskToDelayedList+0x3a>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008212:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3304      	adds	r3, #4
 8008218:	4619      	mov	r1, r3
 800821a:	4819      	ldr	r0, [pc, #100]	@ (8008280 <prvAddCurrentTaskToDelayedList+0x98>)
 800821c:	f7fe fb83 	bl	8006926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008220:	e026      	b.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800822a:	4b14      	ldr	r3, [pc, #80]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d209      	bcs.n	800824e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800823a:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b0f      	ldr	r3, [pc, #60]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe fb91 	bl	800696e <vListInsert>
}
 800824c:	e010      	b.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fe fb87 	bl	800696e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008260:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	d202      	bcs.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800826a:	4a08      	ldr	r2, [pc, #32]	@ (800828c <prvAddCurrentTaskToDelayedList+0xa4>)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20005778 	.word	0x20005778
 800827c:	200052a0 	.word	0x200052a0
 8008280:	20005760 	.word	0x20005760
 8008284:	20005730 	.word	0x20005730
 8008288:	2000572c 	.word	0x2000572c
 800828c:	20005794 	.word	0x20005794

08008290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800829a:	f000 fb13 	bl	80088c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800829e:	4b1d      	ldr	r3, [pc, #116]	@ (8008314 <xTimerCreateTimerTask+0x84>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d021      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ae:	1d3a      	adds	r2, r7, #4
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe faed 	bl	8006898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	9202      	str	r2, [sp, #8]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	2302      	movs	r3, #2
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	460a      	mov	r2, r1
 80082d0:	4911      	ldr	r1, [pc, #68]	@ (8008318 <xTimerCreateTimerTask+0x88>)
 80082d2:	4812      	ldr	r0, [pc, #72]	@ (800831c <xTimerCreateTimerTask+0x8c>)
 80082d4:	f7ff f8a8 	bl	8007428 <xTaskCreateStatic>
 80082d8:	4603      	mov	r3, r0
 80082da:	4a11      	ldr	r2, [pc, #68]	@ (8008320 <xTimerCreateTimerTask+0x90>)
 80082dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082de:	4b10      	ldr	r3, [pc, #64]	@ (8008320 <xTimerCreateTimerTask+0x90>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008308:	697b      	ldr	r3, [r7, #20]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200057d0 	.word	0x200057d0
 8008318:	08016834 	.word	0x08016834
 800831c:	0800845d 	.word	0x0800845d
 8008320:	200057d4 	.word	0x200057d4

08008324 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	@ 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008332:	2300      	movs	r3, #0
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xTimerGenericCommand+0x30>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008354:	4b19      	ldr	r3, [pc, #100]	@ (80083bc <xTimerGenericCommand+0x98>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02a      	beq.n	80083b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b05      	cmp	r3, #5
 800836c:	dc18      	bgt.n	80083a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800836e:	f7ff fead 	bl	80080cc <xTaskGetSchedulerState>
 8008372:	4603      	mov	r3, r0
 8008374:	2b02      	cmp	r3, #2
 8008376:	d109      	bne.n	800838c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008378:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <xTimerGenericCommand+0x98>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	f107 0110 	add.w	r1, r7, #16
 8008380:	2300      	movs	r3, #0
 8008382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008384:	f7fe fc60 	bl	8006c48 <xQueueGenericSend>
 8008388:	6278      	str	r0, [r7, #36]	@ 0x24
 800838a:	e012      	b.n	80083b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <xTimerGenericCommand+0x98>)
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	f107 0110 	add.w	r1, r7, #16
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	f7fe fc56 	bl	8006c48 <xQueueGenericSend>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24
 800839e:	e008      	b.n	80083b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083a0:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <xTimerGenericCommand+0x98>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	f107 0110 	add.w	r1, r7, #16
 80083a8:	2300      	movs	r3, #0
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	f7fe fd4e 	bl	8006e4c <xQueueGenericSendFromISR>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	@ 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	200057d0 	.word	0x200057d0

080083c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ca:	4b23      	ldr	r3, [pc, #140]	@ (8008458 <prvProcessExpiredTimer+0x98>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fb01 	bl	80069e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d023      	beq.n	8008434 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	18d1      	adds	r1, r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	6978      	ldr	r0, [r7, #20]
 80083fa:	f000 f8d5 	bl	80085a8 <prvInsertTimerInActiveList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d020      	beq.n	8008446 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	2100      	movs	r1, #0
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff88 	bl	8008324 <xTimerGenericCommand>
 8008414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d114      	bne.n	8008446 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	60fb      	str	r3, [r7, #12]
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	e7fd      	b.n	8008430 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	b2da      	uxtb	r2, r3
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	4798      	blx	r3
}
 800844e:	bf00      	nop
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	200057c8 	.word	0x200057c8

0800845c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008464:	f107 0308 	add.w	r3, r7, #8
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f859 	bl	8008520 <prvGetNextExpireTime>
 800846e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f805 	bl	8008484 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800847a:	f000 f8d7 	bl	800862c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800847e:	bf00      	nop
 8008480:	e7f0      	b.n	8008464 <prvTimerTask+0x8>
	...

08008484 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800848e:	f7ff fa0f 	bl	80078b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f866 	bl	8008568 <prvSampleTimeNow>
 800849c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d130      	bne.n	8008506 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <prvProcessTimerOrBlockTask+0x3c>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d806      	bhi.n	80084c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084b2:	f7ff fa0b 	bl	80078cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff ff81 	bl	80083c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084be:	e024      	b.n	800850a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d008      	beq.n	80084d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084c6:	4b13      	ldr	r3, [pc, #76]	@ (8008514 <prvProcessTimerOrBlockTask+0x90>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <prvProcessTimerOrBlockTask+0x50>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <prvProcessTimerOrBlockTask+0x52>
 80084d4:	2300      	movs	r3, #0
 80084d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <prvProcessTimerOrBlockTask+0x94>)
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	f7fe ff6b 	bl	80073c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084ea:	f7ff f9ef 	bl	80078cc <xTaskResumeAll>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084f4:	4b09      	ldr	r3, [pc, #36]	@ (800851c <prvProcessTimerOrBlockTask+0x98>)
 80084f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	f3bf 8f6f 	isb	sy
}
 8008504:	e001      	b.n	800850a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008506:	f7ff f9e1 	bl	80078cc <xTaskResumeAll>
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200057cc 	.word	0x200057cc
 8008518:	200057d0 	.word	0x200057d0
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008528:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <prvGetNextExpireTime+0x44>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <prvGetNextExpireTime+0x16>
 8008532:	2201      	movs	r2, #1
 8008534:	e000      	b.n	8008538 <prvGetNextExpireTime+0x18>
 8008536:	2200      	movs	r2, #0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008544:	4b07      	ldr	r3, [pc, #28]	@ (8008564 <prvGetNextExpireTime+0x44>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e001      	b.n	8008554 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	200057c8 	.word	0x200057c8

08008568 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008570:	f7ff fa4a 	bl	8007a08 <xTaskGetTickCount>
 8008574:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <prvSampleTimeNow+0x3c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d205      	bcs.n	800858c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008580:	f000 f93a 	bl	80087f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e002      	b.n	8008592 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008592:	4a04      	ldr	r2, [pc, #16]	@ (80085a4 <prvSampleTimeNow+0x3c>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008598:	68fb      	ldr	r3, [r7, #12]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200057d8 	.word	0x200057d8

080085a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d812      	bhi.n	80085f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	1ad2      	subs	r2, r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d302      	bcc.n	80085e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e01b      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <prvInsertTimerInActiveList+0x7c>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7fe f9be 	bl	800696e <vListInsert>
 80085f2:	e012      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d206      	bcs.n	800860a <prvInsertTimerInActiveList+0x62>
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e007      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800860a:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <prvInsertTimerInActiveList+0x80>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3304      	adds	r3, #4
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fe f9aa 	bl	800696e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200057cc 	.word	0x200057cc
 8008628:	200057c8 	.word	0x200057c8

0800862c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08e      	sub	sp, #56	@ 0x38
 8008630:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008632:	e0ce      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da19      	bge.n	800866e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800863a:	1d3b      	adds	r3, r7, #4
 800863c:	3304      	adds	r3, #4
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	61fb      	str	r3, [r7, #28]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008664:	6850      	ldr	r0, [r2, #4]
 8008666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	4611      	mov	r1, r2
 800866c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f2c0 80ae 	blt.w	80087d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	3304      	adds	r3, #4
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe f9aa 	bl	80069e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800868c:	463b      	mov	r3, r7
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff ff6a 	bl	8008568 <prvSampleTimeNow>
 8008694:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b09      	cmp	r3, #9
 800869a:	f200 8097 	bhi.w	80087cc <prvProcessReceivedCommands+0x1a0>
 800869e:	a201      	add	r2, pc, #4	@ (adr r2, 80086a4 <prvProcessReceivedCommands+0x78>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	08008743 	.word	0x08008743
 80086b4:	08008757 	.word	0x08008757
 80086b8:	080087a3 	.word	0x080087a3
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086cd 	.word	0x080086cd
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008757 	.word	0x08008757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	18d1      	adds	r1, r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ec:	f7ff ff5c 	bl	80085a8 <prvInsertTimerInActiveList>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d06c      	beq.n	80087d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d061      	beq.n	80087d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	441a      	add	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800871e:	f7ff fe01 	bl	8008324 <xTimerGenericCommand>
 8008722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d152      	bne.n	80087d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	61bb      	str	r3, [r7, #24]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	b2da      	uxtb	r2, r3
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008754:	e03d      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617b      	str	r3, [r7, #20]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	18d1      	adds	r1, r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800879a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800879c:	f7ff ff04 	bl	80085a8 <prvInsertTimerInActiveList>
					break;
 80087a0:	e017      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d103      	bne.n	80087b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b2:	f000 fbe9 	bl	8008f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087b6:	e00c      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087ca:	e002      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80087d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087d2:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <prvProcessReceivedCommands+0x1c8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	1d39      	adds	r1, r7, #4
 80087d8:	2200      	movs	r2, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fbd4 	bl	8006f88 <xQueueReceive>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f47f af26 	bne.w	8008634 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3730      	adds	r7, #48	@ 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200057d0 	.word	0x200057d0

080087f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087fe:	e049      	b.n	8008894 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008800:	4b2e      	ldr	r3, [pc, #184]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b2c      	ldr	r3, [pc, #176]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3304      	adds	r3, #4
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe f8e1 	bl	80069e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d02f      	beq.n	8008894 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90e      	bls.n	8008864 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fe f886 	bl	800696e <vListInsert>
 8008862:	e017      	b.n	8008894 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008864:	2300      	movs	r3, #0
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2300      	movs	r3, #0
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fd58 	bl	8008324 <xTimerGenericCommand>
 8008874:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	603b      	str	r3, [r7, #0]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008894:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1b0      	bne.n	8008800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800889e:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088a4:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <prvSwitchTimerLists+0xc8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a04      	ldr	r2, [pc, #16]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 80088aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088ac:	4a04      	ldr	r2, [pc, #16]	@ (80088c0 <prvSwitchTimerLists+0xc8>)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6013      	str	r3, [r2, #0]
}
 80088b2:	bf00      	nop
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	200057c8 	.word	0x200057c8
 80088c0:	200057cc 	.word	0x200057cc

080088c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ca:	f000 f96d 	bl	8008ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d120      	bne.n	8008918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088d6:	4814      	ldr	r0, [pc, #80]	@ (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088d8:	f7fd fff8 	bl	80068cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088dc:	4813      	ldr	r0, [pc, #76]	@ (800892c <prvCheckForValidListAndQueue+0x68>)
 80088de:	f7fd fff5 	bl	80068cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088e2:	4b13      	ldr	r3, [pc, #76]	@ (8008930 <prvCheckForValidListAndQueue+0x6c>)
 80088e4:	4a10      	ldr	r2, [pc, #64]	@ (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088e8:	4b12      	ldr	r3, [pc, #72]	@ (8008934 <prvCheckForValidListAndQueue+0x70>)
 80088ea:	4a10      	ldr	r2, [pc, #64]	@ (800892c <prvCheckForValidListAndQueue+0x68>)
 80088ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4b11      	ldr	r3, [pc, #68]	@ (8008938 <prvCheckForValidListAndQueue+0x74>)
 80088f4:	4a11      	ldr	r2, [pc, #68]	@ (800893c <prvCheckForValidListAndQueue+0x78>)
 80088f6:	2110      	movs	r1, #16
 80088f8:	200a      	movs	r0, #10
 80088fa:	f7fe f905 	bl	8006b08 <xQueueGenericCreateStatic>
 80088fe:	4603      	mov	r3, r0
 8008900:	4a08      	ldr	r2, [pc, #32]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	490b      	ldr	r1, [pc, #44]	@ (8008940 <prvCheckForValidListAndQueue+0x7c>)
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fd2a 	bl	800736c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008918:	f000 f978 	bl	8008c0c <vPortExitCritical>
}
 800891c:	bf00      	nop
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200057d0 	.word	0x200057d0
 8008928:	200057a0 	.word	0x200057a0
 800892c:	200057b4 	.word	0x200057b4
 8008930:	200057c8 	.word	0x200057c8
 8008934:	200057cc 	.word	0x200057cc
 8008938:	2000587c 	.word	0x2000587c
 800893c:	200057dc 	.word	0x200057dc
 8008940:	0801683c 	.word	0x0801683c

08008944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b04      	subs	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0201 	bic.w	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b04      	subs	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008974:	4a0c      	ldr	r2, [pc, #48]	@ (80089a8 <pxPortInitialiseStack+0x64>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b14      	subs	r3, #20
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f06f 0202 	mvn.w	r2, #2
 8008992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3b20      	subs	r3, #32
 8008998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	080089ad 	.word	0x080089ad

080089ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <prvTaskExitError+0x58>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089be:	d00b      	beq.n	80089d8 <prvTaskExitError+0x2c>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <prvTaskExitError+0x28>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60bb      	str	r3, [r7, #8]
}
 80089ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ec:	bf00      	nop
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0fc      	beq.n	80089ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	200000a4 	.word	0x200000a4
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	200052a0 	.word	0x200052a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b47      	ldr	r3, [pc, #284]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a47      	ldr	r2, [pc, #284]	@ (8008b88 <xPortStartScheduler+0x128>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10b      	bne.n	8008a88 <xPortStartScheduler+0x28>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a88:	4b3e      	ldr	r3, [pc, #248]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <xPortStartScheduler+0x12c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10b      	bne.n	8008aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aaa:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <xPortStartScheduler+0x130>)
 8008aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	22ff      	movs	r2, #255	@ 0xff
 8008aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad2:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad8:	e009      	b.n	8008aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b80      	cmp	r3, #128	@ 0x80
 8008af8:	d0ef      	beq.n	8008ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008afa:	4b27      	ldr	r3, [pc, #156]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1c3 0307 	rsb	r3, r3, #7
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00b      	beq.n	8008b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b30:	4a19      	ldr	r2, [pc, #100]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b3c:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a16      	ldr	r2, [pc, #88]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b48:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b54:	f000 f8da 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <xPortStartScheduler+0x140>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b5e:	f000 f8f9 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b62:	4b10      	ldr	r3, [pc, #64]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b6e:	f7ff ff63 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b72:	f7ff f813 	bl	8007b9c <vTaskSwitchContext>
	prvTaskExitError();
 8008b76:	f7ff ff19 	bl	80089ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed00 	.word	0xe000ed00
 8008b88:	410fc271 	.word	0x410fc271
 8008b8c:	410fc270 	.word	0x410fc270
 8008b90:	e000e400 	.word	0xe000e400
 8008b94:	200058cc 	.word	0x200058cc
 8008b98:	200058d0 	.word	0x200058d0
 8008b9c:	e000ed20 	.word	0xe000ed20
 8008ba0:	200000a4 	.word	0x200000a4
 8008ba4:	e000ef34 	.word	0xe000ef34

08008ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bc2:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d110      	bne.n	8008bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <vPortEnterCritical+0x60>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	603b      	str	r3, [r7, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <vPortEnterCritical+0x4a>
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200000a4 	.word	0x200000a4
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <vPortExitCritical+0x26>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <vPortExitCritical+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	200000a4 	.word	0x200000a4

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7fe ff84 	bl	8007b9c <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	200052a0 	.word	0x200052a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7fe fea1 	bl	8007a28 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <xPortSysTickHandler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000098 	.word	0x20000098
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d6e:	f3ef 8305 	mrs	r3, IPSR
 8008d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d915      	bls.n	8008da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d7a:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <vPortValidateInterruptPriority+0x74>)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d84:	4b16      	ldr	r3, [pc, #88]	@ (8008de0 <vPortValidateInterruptPriority+0x78>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	7afa      	ldrb	r2, [r7, #11]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d20b      	bcs.n	8008da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008da6:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <vPortValidateInterruptPriority+0x7c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <vPortValidateInterruptPriority+0x80>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90b      	bls.n	8008dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	603b      	str	r3, [r7, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortValidateInterruptPriority+0x62>
	}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	e000e3f0 	.word	0xe000e3f0
 8008de0:	200058cc 	.word	0x200058cc
 8008de4:	e000ed0c 	.word	0xe000ed0c
 8008de8:	200058d0 	.word	0x200058d0

08008dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008df8:	f7fe fd5a 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f70 <pvPortMalloc+0x184>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e04:	f000 f924 	bl	8009050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <pvPortMalloc+0x188>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 8095 	bne.w	8008f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01e      	beq.n	8008e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d015      	beq.n	8008e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	3308      	adds	r3, #8
 8008e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <pvPortMalloc+0x6e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d06f      	beq.n	8008f40 <pvPortMalloc+0x154>
 8008e60:	4b45      	ldr	r3, [pc, #276]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d86a      	bhi.n	8008f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e6a:	4b44      	ldr	r3, [pc, #272]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e6e:	4b43      	ldr	r3, [pc, #268]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e74:	e004      	b.n	8008e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d903      	bls.n	8008e92 <pvPortMalloc+0xa6>
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e92:	4b37      	ldr	r3, [pc, #220]	@ (8008f70 <pvPortMalloc+0x184>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d051      	beq.n	8008f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d920      	bls.n	8008f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008efa:	69b8      	ldr	r0, [r7, #24]
 8008efc:	f000 f90a 	bl	8009114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d203      	bcs.n	8008f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f1a:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x188>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f40:	f7fe fcc4 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <pvPortMalloc+0x17a>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	e7fd      	b.n	8008f62 <pvPortMalloc+0x176>
	return pvReturn;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3728      	adds	r7, #40	@ 0x28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	200094dc 	.word	0x200094dc
 8008f74:	200094f0 	.word	0x200094f0
 8008f78:	200094e0 	.word	0x200094e0
 8008f7c:	200094d4 	.word	0x200094d4
 8008f80:	200094e4 	.word	0x200094e4
 8008f84:	200094e8 	.word	0x200094e8

08008f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04f      	beq.n	800903a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <vPortFree+0xbc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <vPortFree+0x46>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <vPortFree+0x66>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <vPortFree+0xbc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01e      	beq.n	800903a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11a      	bne.n	800903a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <vPortFree+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009014:	f7fe fc4c 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <vPortFree+0xc0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	4a09      	ldr	r2, [pc, #36]	@ (8009048 <vPortFree+0xc0>)
 8009024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f000 f874 	bl	8009114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortFree+0xc4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a06      	ldr	r2, [pc, #24]	@ (800904c <vPortFree+0xc4>)
 8009034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009036:	f7fe fc49 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200094f0 	.word	0x200094f0
 8009048:	200094e0 	.word	0x200094e0
 800904c:	200094ec 	.word	0x200094ec

08009050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800905a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <prvHeapInit+0xac>)
 800905e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3307      	adds	r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <prvHeapInit+0xac>)
 8009080:	4413      	add	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <prvHeapInit+0xb0>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800908e:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <prvHeapInit+0xb0>)
 8009090:	2200      	movs	r2, #0
 8009092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800909c:	2208      	movs	r2, #8
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <prvHeapInit+0xb4>)
 80090b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <prvHeapInit+0xb4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <prvHeapInit+0xb4>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009108 <prvHeapInit+0xb8>)
 80090de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <prvHeapInit+0xbc>)
 80090e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e8:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <prvHeapInit+0xc0>)
 80090ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	200058d4 	.word	0x200058d4
 8009100:	200094d4 	.word	0x200094d4
 8009104:	200094dc 	.word	0x200094dc
 8009108:	200094e4 	.word	0x200094e4
 800910c:	200094e0 	.word	0x200094e0
 8009110:	200094f0 	.word	0x200094f0

08009114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800911c:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <prvInsertBlockIntoFreeList+0xac>)
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e002      	b.n	8009128 <prvInsertBlockIntoFreeList+0x14>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d8f7      	bhi.n	8009122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	441a      	add	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d118      	bne.n	800919c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d00d      	beq.n	8009192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e008      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e003      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d002      	beq.n	80091b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	200094d4 	.word	0x200094d4
 80091c4:	200094dc 	.word	0x200094dc

080091c8 <_rclc_check_for_new_data>:
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d046      	beq.n	800925a <_rclc_check_for_new_data+0x92>
 80091cc:	b510      	push	{r4, lr}
 80091ce:	7802      	ldrb	r2, [r0, #0]
 80091d0:	b084      	sub	sp, #16
 80091d2:	4603      	mov	r3, r0
 80091d4:	2a0a      	cmp	r2, #10
 80091d6:	d842      	bhi.n	800925e <_rclc_check_for_new_data+0x96>
 80091d8:	e8df f002 	tbb	[pc, r2]
 80091dc:	14181212 	.word	0x14181212
 80091e0:	06060614 	.word	0x06060614
 80091e4:	2e1a      	.short	0x2e1a
 80091e6:	16          	.byte	0x16
 80091e7:	00          	.byte	0x00
 80091e8:	6a0a      	ldr	r2, [r1, #32]
 80091ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80091ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80091f0:	2000      	movs	r0, #0
 80091f2:	1a12      	subs	r2, r2, r0
 80091f4:	bf18      	it	ne
 80091f6:	2201      	movne	r2, #1
 80091f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80091fc:	b004      	add	sp, #16
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	680a      	ldr	r2, [r1, #0]
 8009202:	e7f2      	b.n	80091ea <_rclc_check_for_new_data+0x22>
 8009204:	698a      	ldr	r2, [r1, #24]
 8009206:	e7f0      	b.n	80091ea <_rclc_check_for_new_data+0x22>
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	e7ee      	b.n	80091ea <_rclc_check_for_new_data+0x22>
 800920c:	690a      	ldr	r2, [r1, #16]
 800920e:	e7ec      	b.n	80091ea <_rclc_check_for_new_data+0x22>
 8009210:	685c      	ldr	r4, [r3, #4]
 8009212:	4608      	mov	r0, r1
 8009214:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009218:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800921c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009220:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800922a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800922e:	f104 0110 	add.w	r1, r4, #16
 8009232:	f004 fb19 	bl	800d868 <rcl_action_client_wait_set_get_entities_ready>
 8009236:	e7e1      	b.n	80091fc <_rclc_check_for_new_data+0x34>
 8009238:	685c      	ldr	r4, [r3, #4]
 800923a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800923e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009242:	e9cd 3200 	strd	r3, r2, [sp]
 8009246:	4608      	mov	r0, r1
 8009248:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800924c:	f104 0220 	add.w	r2, r4, #32
 8009250:	f104 0110 	add.w	r1, r4, #16
 8009254:	f004 fd20 	bl	800dc98 <rcl_action_server_wait_set_get_entities_ready>
 8009258:	e7d0      	b.n	80091fc <_rclc_check_for_new_data+0x34>
 800925a:	200b      	movs	r0, #11
 800925c:	4770      	bx	lr
 800925e:	2001      	movs	r0, #1
 8009260:	e7cc      	b.n	80091fc <_rclc_check_for_new_data+0x34>
 8009262:	bf00      	nop

08009264 <_rclc_take_new_data>:
 8009264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009266:	b09b      	sub	sp, #108	@ 0x6c
 8009268:	2800      	cmp	r0, #0
 800926a:	f000 8088 	beq.w	800937e <_rclc_take_new_data+0x11a>
 800926e:	7803      	ldrb	r3, [r0, #0]
 8009270:	4604      	mov	r4, r0
 8009272:	2b0a      	cmp	r3, #10
 8009274:	f200 8167 	bhi.w	8009546 <_rclc_take_new_data+0x2e2>
 8009278:	e8df f003 	tbb	[pc, r3]
 800927c:	44152d2d 	.word	0x44152d2d
 8009280:	19191944 	.word	0x19191944
 8009284:	065a      	.short	0x065a
 8009286:	15          	.byte	0x15
 8009287:	00          	.byte	0x00
 8009288:	6840      	ldr	r0, [r0, #4]
 800928a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 80b2 	bne.w	80093f8 <_rclc_take_new_data+0x194>
 8009294:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 80e4 	bne.w	8009466 <_rclc_take_new_data+0x202>
 800929e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d16f      	bne.n	8009386 <_rclc_take_new_data+0x122>
 80092a6:	2500      	movs	r5, #0
 80092a8:	4628      	mov	r0, r5
 80092aa:	b01b      	add	sp, #108	@ 0x6c
 80092ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80092b0:	6a0b      	ldr	r3, [r1, #32]
 80092b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0f5      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 80092ba:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80092be:	f104 0110 	add.w	r1, r4, #16
 80092c2:	f003 f817 	bl	800c2f4 <rcl_take_request>
 80092c6:	4605      	mov	r5, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d0ec      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 80092cc:	f240 2359 	movw	r3, #601	@ 0x259
 80092d0:	4298      	cmp	r0, r3
 80092d2:	d013      	beq.n	80092fc <_rclc_take_new_data+0x98>
 80092d4:	e029      	b.n	800932a <_rclc_take_new_data+0xc6>
 80092d6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80092d8:	680b      	ldr	r3, [r1, #0]
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0e1      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 80092e2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80092e6:	2300      	movs	r3, #0
 80092e8:	aa0a      	add	r2, sp, #40	@ 0x28
 80092ea:	f003 f941 	bl	800c570 <rcl_take>
 80092ee:	4605      	mov	r5, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d0d9      	beq.n	80092a8 <_rclc_take_new_data+0x44>
 80092f4:	f240 1391 	movw	r3, #401	@ 0x191
 80092f8:	4298      	cmp	r0, r3
 80092fa:	d116      	bne.n	800932a <_rclc_take_new_data+0xc6>
 80092fc:	2300      	movs	r3, #0
 80092fe:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009302:	e7d1      	b.n	80092a8 <_rclc_take_new_data+0x44>
 8009304:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009306:	698b      	ldr	r3, [r1, #24]
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0ca      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 8009310:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009314:	f104 0110 	add.w	r1, r4, #16
 8009318:	f002 faca 	bl	800b8b0 <rcl_take_response>
 800931c:	4605      	mov	r5, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d0c1      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 8009322:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009326:	4298      	cmp	r0, r3
 8009328:	d0be      	beq.n	80092a8 <_rclc_take_new_data+0x44>
 800932a:	f000 fe61 	bl	8009ff0 <rcutils_reset_error>
 800932e:	e7bb      	b.n	80092a8 <_rclc_take_new_data+0x44>
 8009330:	6840      	ldr	r0, [r0, #4]
 8009332:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009336:	2b00      	cmp	r3, #0
 8009338:	d17d      	bne.n	8009436 <_rclc_take_new_data+0x1d2>
 800933a:	69c3      	ldr	r3, [r0, #28]
 800933c:	b11b      	cbz	r3, 8009346 <_rclc_take_new_data+0xe2>
 800933e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009342:	2b00      	cmp	r3, #0
 8009344:	d144      	bne.n	80093d0 <_rclc_take_new_data+0x16c>
 8009346:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 80ac 	bne.w	80094a8 <_rclc_take_new_data+0x244>
 8009350:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0a6      	beq.n	80092a6 <_rclc_take_new_data+0x42>
 8009358:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800935a:	a90a      	add	r1, sp, #40	@ 0x28
 800935c:	3010      	adds	r0, #16
 800935e:	f004 f95b 	bl	800d618 <rcl_action_take_result_response>
 8009362:	4605      	mov	r5, r0
 8009364:	2800      	cmp	r0, #0
 8009366:	d1e0      	bne.n	800932a <_rclc_take_new_data+0xc6>
 8009368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800936c:	6860      	ldr	r0, [r4, #4]
 800936e:	f004 fdb7 	bl	800dee0 <rclc_action_find_handle_by_result_request_sequence_number>
 8009372:	2800      	cmp	r0, #0
 8009374:	d098      	beq.n	80092a8 <_rclc_take_new_data+0x44>
 8009376:	2301      	movs	r3, #1
 8009378:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800937c:	e794      	b.n	80092a8 <_rclc_take_new_data+0x44>
 800937e:	250b      	movs	r5, #11
 8009380:	4628      	mov	r0, r5
 8009382:	b01b      	add	sp, #108	@ 0x6c
 8009384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009386:	ae04      	add	r6, sp, #16
 8009388:	aa0a      	add	r2, sp, #40	@ 0x28
 800938a:	3010      	adds	r0, #16
 800938c:	4631      	mov	r1, r6
 800938e:	f004 fbb7 	bl	800db00 <rcl_action_take_cancel_request>
 8009392:	4605      	mov	r5, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	d1c8      	bne.n	800932a <_rclc_take_new_data+0xc6>
 8009398:	6860      	ldr	r0, [r4, #4]
 800939a:	a90a      	add	r1, sp, #40	@ 0x28
 800939c:	f004 fd5e 	bl	800de5c <rclc_action_find_goal_handle_by_uuid>
 80093a0:	4607      	mov	r7, r0
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f000 80bb 	beq.w	800951e <_rclc_take_new_data+0x2ba>
 80093a8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80093ac:	2101      	movs	r1, #1
 80093ae:	f004 fcdf 	bl	800dd70 <rcl_action_transition_goal_state>
 80093b2:	2803      	cmp	r0, #3
 80093b4:	4684      	mov	ip, r0
 80093b6:	f040 80a7 	bne.w	8009508 <_rclc_take_new_data+0x2a4>
 80093ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093bc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80093c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80093c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80093ca:	f887 c008 	strb.w	ip, [r7, #8]
 80093ce:	e76b      	b.n	80092a8 <_rclc_take_new_data+0x44>
 80093d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80093d2:	3010      	adds	r0, #16
 80093d4:	f004 f9a0 	bl	800d718 <rcl_action_take_feedback>
 80093d8:	4605      	mov	r5, r0
 80093da:	2800      	cmp	r0, #0
 80093dc:	d1a5      	bne.n	800932a <_rclc_take_new_data+0xc6>
 80093de:	6860      	ldr	r0, [r4, #4]
 80093e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80093e2:	f004 fd3b 	bl	800de5c <rclc_action_find_goal_handle_by_uuid>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f000 80a3 	beq.w	8009534 <_rclc_take_new_data+0x2d0>
 80093ee:	2201      	movs	r2, #1
 80093f0:	6860      	ldr	r0, [r4, #4]
 80093f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80093f6:	e7a6      	b.n	8009346 <_rclc_take_new_data+0xe2>
 80093f8:	f004 fd0a 	bl	800de10 <rclc_action_take_goal_handle>
 80093fc:	4606      	mov	r6, r0
 80093fe:	6860      	ldr	r0, [r4, #4]
 8009400:	2e00      	cmp	r6, #0
 8009402:	f43f af47 	beq.w	8009294 <_rclc_take_new_data+0x30>
 8009406:	6070      	str	r0, [r6, #4]
 8009408:	69f2      	ldr	r2, [r6, #28]
 800940a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800940e:	3010      	adds	r0, #16
 8009410:	f004 fabe 	bl	800d990 <rcl_action_take_goal_request>
 8009414:	4605      	mov	r5, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	f040 808e 	bne.w	8009538 <_rclc_take_new_data+0x2d4>
 800941c:	69f7      	ldr	r7, [r6, #28]
 800941e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009420:	7235      	strb	r5, [r6, #8]
 8009422:	f8c6 0009 	str.w	r0, [r6, #9]
 8009426:	f8c6 100d 	str.w	r1, [r6, #13]
 800942a:	6860      	ldr	r0, [r4, #4]
 800942c:	f8c6 2011 	str.w	r2, [r6, #17]
 8009430:	f8c6 3015 	str.w	r3, [r6, #21]
 8009434:	e72e      	b.n	8009294 <_rclc_take_new_data+0x30>
 8009436:	aa04      	add	r2, sp, #16
 8009438:	a90a      	add	r1, sp, #40	@ 0x28
 800943a:	3010      	adds	r0, #16
 800943c:	f004 f874 	bl	800d528 <rcl_action_take_goal_response>
 8009440:	4605      	mov	r5, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	f47f af71 	bne.w	800932a <_rclc_take_new_data+0xc6>
 8009448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800944c:	6860      	ldr	r0, [r4, #4]
 800944e:	f004 fd35 	bl	800debc <rclc_action_find_handle_by_goal_request_sequence_number>
 8009452:	b130      	cbz	r0, 8009462 <_rclc_take_new_data+0x1fe>
 8009454:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009458:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800945c:	2201      	movs	r2, #1
 800945e:	f880 2020 	strb.w	r2, [r0, #32]
 8009462:	6860      	ldr	r0, [r4, #4]
 8009464:	e769      	b.n	800933a <_rclc_take_new_data+0xd6>
 8009466:	aa04      	add	r2, sp, #16
 8009468:	3010      	adds	r0, #16
 800946a:	a90a      	add	r1, sp, #40	@ 0x28
 800946c:	f004 fb08 	bl	800da80 <rcl_action_take_result_request>
 8009470:	4605      	mov	r5, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	f47f af59 	bne.w	800932a <_rclc_take_new_data+0xc6>
 8009478:	6860      	ldr	r0, [r4, #4]
 800947a:	a904      	add	r1, sp, #16
 800947c:	f004 fcee 	bl	800de5c <rclc_action_find_goal_handle_by_uuid>
 8009480:	4607      	mov	r7, r0
 8009482:	b160      	cbz	r0, 800949e <_rclc_take_new_data+0x23a>
 8009484:	ad0a      	add	r5, sp, #40	@ 0x28
 8009486:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800948a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800948c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800948e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009492:	f04f 0c02 	mov.w	ip, #2
 8009496:	e886 0003 	stmia.w	r6, {r0, r1}
 800949a:	f887 c008 	strb.w	ip, [r7, #8]
 800949e:	6860      	ldr	r0, [r4, #4]
 80094a0:	2300      	movs	r3, #0
 80094a2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80094a6:	e6fa      	b.n	800929e <_rclc_take_new_data+0x3a>
 80094a8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80094ac:	a90a      	add	r1, sp, #40	@ 0x28
 80094ae:	3010      	adds	r0, #16
 80094b0:	f004 f8f2 	bl	800d698 <rcl_action_take_cancel_response>
 80094b4:	4605      	mov	r5, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f47f af37 	bne.w	800932a <_rclc_take_new_data+0xc6>
 80094bc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094c0:	6860      	ldr	r0, [r4, #4]
 80094c2:	f004 fd1f 	bl	800df04 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80094c6:	4606      	mov	r6, r0
 80094c8:	6860      	ldr	r0, [r4, #4]
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	f43f af40 	beq.w	8009350 <_rclc_take_new_data+0xec>
 80094d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80094d2:	2701      	movs	r7, #1
 80094d4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f43f af3a 	beq.w	8009350 <_rclc_take_new_data+0xec>
 80094dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80094de:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80094e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80094e6:	f004 fcb9 	bl	800de5c <rclc_action_find_goal_handle_by_uuid>
 80094ea:	b138      	cbz	r0, 80094fc <_rclc_take_new_data+0x298>
 80094ec:	6860      	ldr	r0, [r4, #4]
 80094ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80094f0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80094f4:	3501      	adds	r5, #1
 80094f6:	42ab      	cmp	r3, r5
 80094f8:	d8f0      	bhi.n	80094dc <_rclc_take_new_data+0x278>
 80094fa:	e729      	b.n	8009350 <_rclc_take_new_data+0xec>
 80094fc:	6860      	ldr	r0, [r4, #4]
 80094fe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009500:	3501      	adds	r5, #1
 8009502:	42ab      	cmp	r3, r5
 8009504:	d8ea      	bhi.n	80094dc <_rclc_take_new_data+0x278>
 8009506:	e723      	b.n	8009350 <_rclc_take_new_data+0xec>
 8009508:	ab06      	add	r3, sp, #24
 800950a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800950c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009510:	2103      	movs	r1, #3
 8009512:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009516:	6860      	ldr	r0, [r4, #4]
 8009518:	f004 fd6a 	bl	800dff0 <rclc_action_server_goal_cancel_reject>
 800951c:	e6c4      	b.n	80092a8 <_rclc_take_new_data+0x44>
 800951e:	ab06      	add	r3, sp, #24
 8009520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009522:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009526:	2102      	movs	r1, #2
 8009528:	e896 000c 	ldmia.w	r6, {r2, r3}
 800952c:	6860      	ldr	r0, [r4, #4]
 800952e:	f004 fd5f 	bl	800dff0 <rclc_action_server_goal_cancel_reject>
 8009532:	e6b9      	b.n	80092a8 <_rclc_take_new_data+0x44>
 8009534:	6860      	ldr	r0, [r4, #4]
 8009536:	e706      	b.n	8009346 <_rclc_take_new_data+0xe2>
 8009538:	6860      	ldr	r0, [r4, #4]
 800953a:	4631      	mov	r1, r6
 800953c:	f004 fc78 	bl	800de30 <rclc_action_remove_used_goal_handle>
 8009540:	f000 fd56 	bl	8009ff0 <rcutils_reset_error>
 8009544:	e6b0      	b.n	80092a8 <_rclc_take_new_data+0x44>
 8009546:	2501      	movs	r5, #1
 8009548:	e6ae      	b.n	80092a8 <_rclc_take_new_data+0x44>
 800954a:	bf00      	nop

0800954c <_rclc_execute.part.0>:
 800954c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954e:	7803      	ldrb	r3, [r0, #0]
 8009550:	b087      	sub	sp, #28
 8009552:	4604      	mov	r4, r0
 8009554:	2b0a      	cmp	r3, #10
 8009556:	f200 8136 	bhi.w	80097c6 <_rclc_execute.part.0+0x27a>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	435e      	.short	0x435e
 8009560:	06a1664f 	.word	0x06a1664f
 8009564:	6c1e0606 	.word	0x6c1e0606
 8009568:	59          	.byte	0x59
 8009569:	00          	.byte	0x00
 800956a:	2b06      	cmp	r3, #6
 800956c:	f000 8122 	beq.w	80097b4 <_rclc_execute.part.0+0x268>
 8009570:	2b07      	cmp	r3, #7
 8009572:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009574:	f040 8118 	bne.w	80097a8 <_rclc_execute.part.0+0x25c>
 8009578:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800957c:	6880      	ldr	r0, [r0, #8]
 800957e:	4798      	blx	r3
 8009580:	f104 0110 	add.w	r1, r4, #16
 8009584:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009586:	6860      	ldr	r0, [r4, #4]
 8009588:	f002 fef4 	bl	800c374 <rcl_send_response>
 800958c:	2800      	cmp	r0, #0
 800958e:	d033      	beq.n	80095f8 <_rclc_execute.part.0+0xac>
 8009590:	9005      	str	r0, [sp, #20]
 8009592:	f000 fd2d 	bl	8009ff0 <rcutils_reset_error>
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	e02e      	b.n	80095f8 <_rclc_execute.part.0+0xac>
 800959a:	6840      	ldr	r0, [r0, #4]
 800959c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8086 	beq.w	80096b2 <_rclc_execute.part.0+0x166>
 80095a6:	2600      	movs	r6, #0
 80095a8:	2701      	movs	r7, #1
 80095aa:	e004      	b.n	80095b6 <_rclc_execute.part.0+0x6a>
 80095ac:	f004 fc0a 	bl	800ddc4 <rclc_action_send_result_request>
 80095b0:	b998      	cbnz	r0, 80095da <_rclc_execute.part.0+0x8e>
 80095b2:	722f      	strb	r7, [r5, #8]
 80095b4:	6860      	ldr	r0, [r4, #4]
 80095b6:	f004 fcb7 	bl	800df28 <rclc_action_find_first_handle_with_goal_response>
 80095ba:	4605      	mov	r5, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	d077      	beq.n	80096b0 <_rclc_execute.part.0+0x164>
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80095ca:	f885 6020 	strb.w	r6, [r5, #32]
 80095ce:	4798      	blx	r3
 80095d0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80095d4:	4628      	mov	r0, r5
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e8      	bne.n	80095ac <_rclc_execute.part.0+0x60>
 80095da:	6860      	ldr	r0, [r4, #4]
 80095dc:	4629      	mov	r1, r5
 80095de:	f004 fc27 	bl	800de30 <rclc_action_remove_used_goal_handle>
 80095e2:	e7e7      	b.n	80095b4 <_rclc_execute.part.0+0x68>
 80095e4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80095e8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	f000 80c9 	beq.w	8009784 <_rclc_execute.part.0+0x238>
 80095f2:	6880      	ldr	r0, [r0, #8]
 80095f4:	4798      	blx	r3
 80095f6:	2000      	movs	r0, #0
 80095f8:	b007      	add	sp, #28
 80095fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fc:	6840      	ldr	r0, [r0, #4]
 80095fe:	f003 f8bb 	bl	800c778 <rcl_timer_call>
 8009602:	f240 3321 	movw	r3, #801	@ 0x321
 8009606:	4298      	cmp	r0, r3
 8009608:	d004      	beq.n	8009614 <_rclc_execute.part.0+0xc8>
 800960a:	2800      	cmp	r0, #0
 800960c:	d0f4      	beq.n	80095f8 <_rclc_execute.part.0+0xac>
 800960e:	e7bf      	b.n	8009590 <_rclc_execute.part.0+0x44>
 8009610:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009612:	4798      	blx	r3
 8009614:	2000      	movs	r0, #0
 8009616:	b007      	add	sp, #28
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800961e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009620:	b925      	cbnz	r5, 800962c <_rclc_execute.part.0+0xe0>
 8009622:	4628      	mov	r0, r5
 8009624:	4798      	blx	r3
 8009626:	4628      	mov	r0, r5
 8009628:	e7e6      	b.n	80095f8 <_rclc_execute.part.0+0xac>
 800962a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800962c:	68a0      	ldr	r0, [r4, #8]
 800962e:	4798      	blx	r3
 8009630:	2000      	movs	r0, #0
 8009632:	b007      	add	sp, #28
 8009634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009636:	6840      	ldr	r0, [r0, #4]
 8009638:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800963c:	bb3b      	cbnz	r3, 800968e <_rclc_execute.part.0+0x142>
 800963e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d07b      	beq.n	800973e <_rclc_execute.part.0+0x1f2>
 8009646:	f640 0634 	movw	r6, #2100	@ 0x834
 800964a:	2701      	movs	r7, #1
 800964c:	e007      	b.n	800965e <_rclc_execute.part.0+0x112>
 800964e:	4628      	mov	r0, r5
 8009650:	f004 fc82 	bl	800df58 <rclc_action_server_response_goal_request>
 8009654:	6860      	ldr	r0, [r4, #4]
 8009656:	4629      	mov	r1, r5
 8009658:	f004 fbea 	bl	800de30 <rclc_action_remove_used_goal_handle>
 800965c:	6860      	ldr	r0, [r4, #4]
 800965e:	2100      	movs	r1, #0
 8009660:	f004 fc14 	bl	800de8c <rclc_action_find_first_handle_by_status>
 8009664:	4605      	mov	r5, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d066      	beq.n	8009738 <_rclc_execute.part.0+0x1ec>
 800966a:	6863      	ldr	r3, [r4, #4]
 800966c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	4798      	blx	r3
 8009672:	42b0      	cmp	r0, r6
 8009674:	f04f 0100 	mov.w	r1, #0
 8009678:	d1e9      	bne.n	800964e <_rclc_execute.part.0+0x102>
 800967a:	2101      	movs	r1, #1
 800967c:	4628      	mov	r0, r5
 800967e:	f004 fc6b 	bl	800df58 <rclc_action_server_response_goal_request>
 8009682:	722f      	strb	r7, [r5, #8]
 8009684:	e7ea      	b.n	800965c <_rclc_execute.part.0+0x110>
 8009686:	6848      	ldr	r0, [r1, #4]
 8009688:	f004 fbd2 	bl	800de30 <rclc_action_remove_used_goal_handle>
 800968c:	6860      	ldr	r0, [r4, #4]
 800968e:	f004 fc09 	bl	800dea4 <rclc_action_find_first_terminated_handle>
 8009692:	4601      	mov	r1, r0
 8009694:	2800      	cmp	r0, #0
 8009696:	d1f6      	bne.n	8009686 <_rclc_execute.part.0+0x13a>
 8009698:	6860      	ldr	r0, [r4, #4]
 800969a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800969e:	e7ce      	b.n	800963e <_rclc_execute.part.0+0xf2>
 80096a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80096a2:	6880      	ldr	r0, [r0, #8]
 80096a4:	f104 0110 	add.w	r1, r4, #16
 80096a8:	4798      	blx	r3
 80096aa:	2000      	movs	r0, #0
 80096ac:	b007      	add	sp, #28
 80096ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b0:	6860      	ldr	r0, [r4, #4]
 80096b2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80096b6:	b18b      	cbz	r3, 80096dc <_rclc_execute.part.0+0x190>
 80096b8:	68c5      	ldr	r5, [r0, #12]
 80096ba:	b32d      	cbz	r5, 8009708 <_rclc_execute.part.0+0x1bc>
 80096bc:	2600      	movs	r6, #0
 80096be:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80096c2:	b143      	cbz	r3, 80096d6 <_rclc_execute.part.0+0x18a>
 80096c4:	69c3      	ldr	r3, [r0, #28]
 80096c6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80096ca:	b123      	cbz	r3, 80096d6 <_rclc_execute.part.0+0x18a>
 80096cc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80096ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80096d0:	4628      	mov	r0, r5
 80096d2:	4798      	blx	r3
 80096d4:	6860      	ldr	r0, [r4, #4]
 80096d6:	682d      	ldr	r5, [r5, #0]
 80096d8:	2d00      	cmp	r5, #0
 80096da:	d1f0      	bne.n	80096be <_rclc_execute.part.0+0x172>
 80096dc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80096e0:	b193      	cbz	r3, 8009708 <_rclc_execute.part.0+0x1bc>
 80096e2:	68c5      	ldr	r5, [r0, #12]
 80096e4:	b185      	cbz	r5, 8009708 <_rclc_execute.part.0+0x1bc>
 80096e6:	2600      	movs	r6, #0
 80096e8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80096ec:	b14b      	cbz	r3, 8009702 <_rclc_execute.part.0+0x1b6>
 80096ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80096f0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80096f4:	b12b      	cbz	r3, 8009702 <_rclc_execute.part.0+0x1b6>
 80096f6:	4628      	mov	r0, r5
 80096f8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80096fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80096fe:	4798      	blx	r3
 8009700:	6860      	ldr	r0, [r4, #4]
 8009702:	682d      	ldr	r5, [r5, #0]
 8009704:	2d00      	cmp	r5, #0
 8009706:	d1ef      	bne.n	80096e8 <_rclc_execute.part.0+0x19c>
 8009708:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800970c:	2b00      	cmp	r3, #0
 800970e:	d081      	beq.n	8009614 <_rclc_execute.part.0+0xc8>
 8009710:	2700      	movs	r7, #0
 8009712:	e00b      	b.n	800972c <_rclc_execute.part.0+0x1e0>
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009718:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800971a:	6a1e      	ldr	r6, [r3, #32]
 800971c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009720:	47b0      	blx	r6
 8009722:	6860      	ldr	r0, [r4, #4]
 8009724:	4629      	mov	r1, r5
 8009726:	f004 fb83 	bl	800de30 <rclc_action_remove_used_goal_handle>
 800972a:	6860      	ldr	r0, [r4, #4]
 800972c:	f004 fc08 	bl	800df40 <rclc_action_find_first_handle_with_result_response>
 8009730:	4605      	mov	r5, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	d1ee      	bne.n	8009714 <_rclc_execute.part.0+0x1c8>
 8009736:	e76d      	b.n	8009614 <_rclc_execute.part.0+0xc8>
 8009738:	6860      	ldr	r0, [r4, #4]
 800973a:	f880 5020 	strb.w	r5, [r0, #32]
 800973e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009742:	2b00      	cmp	r3, #0
 8009744:	f43f af66 	beq.w	8009614 <_rclc_execute.part.0+0xc8>
 8009748:	68c5      	ldr	r5, [r0, #12]
 800974a:	b1b5      	cbz	r5, 800977a <_rclc_execute.part.0+0x22e>
 800974c:	2602      	movs	r6, #2
 800974e:	e001      	b.n	8009754 <_rclc_execute.part.0+0x208>
 8009750:	682d      	ldr	r5, [r5, #0]
 8009752:	b195      	cbz	r5, 800977a <_rclc_execute.part.0+0x22e>
 8009754:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d1f9      	bne.n	8009750 <_rclc_execute.part.0+0x204>
 800975c:	69c3      	ldr	r3, [r0, #28]
 800975e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009760:	4628      	mov	r0, r5
 8009762:	4798      	blx	r3
 8009764:	4603      	mov	r3, r0
 8009766:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800976a:	4628      	mov	r0, r5
 800976c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009770:	b163      	cbz	r3, 800978c <_rclc_execute.part.0+0x240>
 8009772:	f004 fc11 	bl	800df98 <rclc_action_server_goal_cancel_accept>
 8009776:	6860      	ldr	r0, [r4, #4]
 8009778:	e7ea      	b.n	8009750 <_rclc_execute.part.0+0x204>
 800977a:	2300      	movs	r3, #0
 800977c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009780:	4618      	mov	r0, r3
 8009782:	e739      	b.n	80095f8 <_rclc_execute.part.0+0xac>
 8009784:	4628      	mov	r0, r5
 8009786:	4798      	blx	r3
 8009788:	4628      	mov	r0, r5
 800978a:	e735      	b.n	80095f8 <_rclc_execute.part.0+0xac>
 800978c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800978e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009792:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800979a:	6860      	ldr	r0, [r4, #4]
 800979c:	2101      	movs	r1, #1
 800979e:	f004 fc27 	bl	800dff0 <rclc_action_server_goal_cancel_reject>
 80097a2:	722e      	strb	r6, [r5, #8]
 80097a4:	6860      	ldr	r0, [r4, #4]
 80097a6:	e7d3      	b.n	8009750 <_rclc_execute.part.0+0x204>
 80097a8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80097aa:	6880      	ldr	r0, [r0, #8]
 80097ac:	4798      	blx	r3
 80097ae:	f104 0110 	add.w	r1, r4, #16
 80097b2:	e6e7      	b.n	8009584 <_rclc_execute.part.0+0x38>
 80097b4:	f100 0110 	add.w	r1, r0, #16
 80097b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80097ba:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80097bc:	6880      	ldr	r0, [r0, #8]
 80097be:	9105      	str	r1, [sp, #20]
 80097c0:	4798      	blx	r3
 80097c2:	9905      	ldr	r1, [sp, #20]
 80097c4:	e6de      	b.n	8009584 <_rclc_execute.part.0+0x38>
 80097c6:	2001      	movs	r0, #1
 80097c8:	e716      	b.n	80095f8 <_rclc_execute.part.0+0xac>
 80097ca:	bf00      	nop

080097cc <rclc_executor_trigger_any>:
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d03f      	beq.n	8009850 <rclc_executor_trigger_any+0x84>
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d03e      	beq.n	8009852 <rclc_executor_trigger_any+0x86>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80097da:	2200      	movs	r2, #0
 80097dc:	2800      	cmp	r0, #0
 80097de:	d037      	beq.n	8009850 <rclc_executor_trigger_any+0x84>
 80097e0:	b430      	push	{r4, r5}
 80097e2:	f893 c000 	ldrb.w	ip, [r3]
 80097e6:	f1bc 0f08 	cmp.w	ip, #8
 80097ea:	d11e      	bne.n	800982a <rclc_executor_trigger_any+0x5e>
 80097ec:	685c      	ldr	r4, [r3, #4]
 80097ee:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80097f0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80097f4:	d105      	bne.n	8009802 <rclc_executor_trigger_any+0x36>
 80097f6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80097fa:	b910      	cbnz	r0, 8009802 <rclc_executor_trigger_any+0x36>
 80097fc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009800:	b128      	cbz	r0, 800980e <rclc_executor_trigger_any+0x42>
 8009802:	bc30      	pop	{r4, r5}
 8009804:	4770      	bx	lr
 8009806:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800980a:	2800      	cmp	r0, #0
 800980c:	d1f9      	bne.n	8009802 <rclc_executor_trigger_any+0x36>
 800980e:	3201      	adds	r2, #1
 8009810:	4291      	cmp	r1, r2
 8009812:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009816:	d018      	beq.n	800984a <rclc_executor_trigger_any+0x7e>
 8009818:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800981c:	2800      	cmp	r0, #0
 800981e:	d0f0      	beq.n	8009802 <rclc_executor_trigger_any+0x36>
 8009820:	f893 c000 	ldrb.w	ip, [r3]
 8009824:	f1bc 0f08 	cmp.w	ip, #8
 8009828:	d0e0      	beq.n	80097ec <rclc_executor_trigger_any+0x20>
 800982a:	f1bc 0f09 	cmp.w	ip, #9
 800982e:	d1ea      	bne.n	8009806 <rclc_executor_trigger_any+0x3a>
 8009830:	685c      	ldr	r4, [r3, #4]
 8009832:	6a25      	ldr	r5, [r4, #32]
 8009834:	2d00      	cmp	r5, #0
 8009836:	d1e4      	bne.n	8009802 <rclc_executor_trigger_any+0x36>
 8009838:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800983c:	2800      	cmp	r0, #0
 800983e:	d1e0      	bne.n	8009802 <rclc_executor_trigger_any+0x36>
 8009840:	3201      	adds	r2, #1
 8009842:	4291      	cmp	r1, r2
 8009844:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009848:	d1e6      	bne.n	8009818 <rclc_executor_trigger_any+0x4c>
 800984a:	2000      	movs	r0, #0
 800984c:	bc30      	pop	{r4, r5}
 800984e:	4770      	bx	lr
 8009850:	4770      	bx	lr
 8009852:	4608      	mov	r0, r1
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop

08009858 <rclc_executor_init>:
 8009858:	2800      	cmp	r0, #0
 800985a:	d05f      	beq.n	800991c <rclc_executor_init+0xc4>
 800985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	b0b0      	sub	sp, #192	@ 0xc0
 8009864:	2900      	cmp	r1, #0
 8009866:	d051      	beq.n	800990c <rclc_executor_init+0xb4>
 8009868:	4605      	mov	r5, r0
 800986a:	4618      	mov	r0, r3
 800986c:	4616      	mov	r6, r2
 800986e:	461f      	mov	r7, r3
 8009870:	f000 fb98 	bl	8009fa4 <rcutils_allocator_is_valid>
 8009874:	2800      	cmp	r0, #0
 8009876:	d049      	beq.n	800990c <rclc_executor_init+0xb4>
 8009878:	2e00      	cmp	r6, #0
 800987a:	d047      	beq.n	800990c <rclc_executor_init+0xb4>
 800987c:	492c      	ldr	r1, [pc, #176]	@ (8009930 <rclc_executor_init+0xd8>)
 800987e:	2288      	movs	r2, #136	@ 0x88
 8009880:	a80e      	add	r0, sp, #56	@ 0x38
 8009882:	f00c f8da 	bl	8015a3a <memcpy>
 8009886:	a90e      	add	r1, sp, #56	@ 0x38
 8009888:	2288      	movs	r2, #136	@ 0x88
 800988a:	4628      	mov	r0, r5
 800988c:	f00c f8d5 	bl	8015a3a <memcpy>
 8009890:	602c      	str	r4, [r5, #0]
 8009892:	4668      	mov	r0, sp
 8009894:	60ae      	str	r6, [r5, #8]
 8009896:	466c      	mov	r4, sp
 8009898:	f003 f876 	bl	800c988 <rcl_get_zero_initialized_wait_set>
 800989c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800989e:	f105 0c14 	add.w	ip, r5, #20
 80098a2:	f8d7 8000 	ldr.w	r8, [r7]
 80098a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80098aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80098b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80098b6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009928 <rclc_executor_init+0xd0>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f8cc 3000 	str.w	r3, [ip]
 80098c0:	6939      	ldr	r1, [r7, #16]
 80098c2:	612f      	str	r7, [r5, #16]
 80098c4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80098c8:	01b0      	lsls	r0, r6, #6
 80098ca:	47c0      	blx	r8
 80098cc:	6068      	str	r0, [r5, #4]
 80098ce:	b338      	cbz	r0, 8009920 <rclc_executor_init+0xc8>
 80098d0:	2400      	movs	r4, #0
 80098d2:	e000      	b.n	80098d6 <rclc_executor_init+0x7e>
 80098d4:	6868      	ldr	r0, [r5, #4]
 80098d6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80098da:	4631      	mov	r1, r6
 80098dc:	3401      	adds	r4, #1
 80098de:	f000 fa6b 	bl	8009db8 <rclc_executor_handle_init>
 80098e2:	42a6      	cmp	r6, r4
 80098e4:	d1f6      	bne.n	80098d4 <rclc_executor_init+0x7c>
 80098e6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80098ea:	f000 fa5b 	bl	8009da4 <rclc_executor_handle_counters_zero_init>
 80098ee:	4a11      	ldr	r2, [pc, #68]	@ (8009934 <rclc_executor_init+0xdc>)
 80098f0:	686b      	ldr	r3, [r5, #4]
 80098f2:	2000      	movs	r0, #0
 80098f4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80098f8:	b163      	cbz	r3, 8009914 <rclc_executor_init+0xbc>
 80098fa:	692b      	ldr	r3, [r5, #16]
 80098fc:	b153      	cbz	r3, 8009914 <rclc_executor_init+0xbc>
 80098fe:	68ab      	ldr	r3, [r5, #8]
 8009900:	b143      	cbz	r3, 8009914 <rclc_executor_init+0xbc>
 8009902:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009906:	b030      	add	sp, #192	@ 0xc0
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	200b      	movs	r0, #11
 800990e:	b030      	add	sp, #192	@ 0xc0
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	4618      	mov	r0, r3
 8009916:	b030      	add	sp, #192	@ 0xc0
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991c:	200b      	movs	r0, #11
 800991e:	4770      	bx	lr
 8009920:	200a      	movs	r0, #10
 8009922:	e7f4      	b.n	800990e <rclc_executor_init+0xb6>
 8009924:	f3af 8000 	nop.w
 8009928:	3b9aca00 	.word	0x3b9aca00
 800992c:	00000000 	.word	0x00000000
 8009930:	080168a8 	.word	0x080168a8
 8009934:	080097cd 	.word	0x080097cd

08009938 <rclc_executor_add_subscription>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800993e:	b338      	cbz	r0, 8009990 <rclc_executor_add_subscription+0x58>
 8009940:	b331      	cbz	r1, 8009990 <rclc_executor_add_subscription+0x58>
 8009942:	b32a      	cbz	r2, 8009990 <rclc_executor_add_subscription+0x58>
 8009944:	b323      	cbz	r3, 8009990 <rclc_executor_add_subscription+0x58>
 8009946:	4604      	mov	r4, r0
 8009948:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800994c:	42a8      	cmp	r0, r5
 800994e:	d301      	bcc.n	8009954 <rclc_executor_add_subscription+0x1c>
 8009950:	2001      	movs	r0, #1
 8009952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009954:	6866      	ldr	r6, [r4, #4]
 8009956:	0187      	lsls	r7, r0, #6
 8009958:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800995c:	2500      	movs	r5, #0
 800995e:	55f5      	strb	r5, [r6, r7]
 8009960:	3001      	adds	r0, #1
 8009962:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009966:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800996a:	2301      	movs	r3, #1
 800996c:	f104 0514 	add.w	r5, r4, #20
 8009970:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009974:	f88c e001 	strb.w	lr, [ip, #1]
 8009978:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800997c:	60e0      	str	r0, [r4, #12]
 800997e:	4628      	mov	r0, r5
 8009980:	f003 f816 	bl	800c9b0 <rcl_wait_set_is_valid>
 8009984:	b930      	cbnz	r0, 8009994 <rclc_executor_add_subscription+0x5c>
 8009986:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009988:	3301      	adds	r3, #1
 800998a:	2000      	movs	r0, #0
 800998c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	200b      	movs	r0, #11
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009994:	4628      	mov	r0, r5
 8009996:	f003 f811 	bl	800c9bc <rcl_wait_set_fini>
 800999a:	2800      	cmp	r0, #0
 800999c:	d0f3      	beq.n	8009986 <rclc_executor_add_subscription+0x4e>
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099a0 <rclc_executor_prepare>:
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d044      	beq.n	8009a2e <rclc_executor_prepare+0x8e>
 80099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a6:	f100 0514 	add.w	r5, r0, #20
 80099aa:	b09b      	sub	sp, #108	@ 0x6c
 80099ac:	4604      	mov	r4, r0
 80099ae:	4628      	mov	r0, r5
 80099b0:	f002 fffe 	bl	800c9b0 <rcl_wait_set_is_valid>
 80099b4:	b110      	cbz	r0, 80099bc <rclc_executor_prepare+0x1c>
 80099b6:	2000      	movs	r0, #0
 80099b8:	b01b      	add	sp, #108	@ 0x6c
 80099ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099bc:	4628      	mov	r0, r5
 80099be:	f002 fffd 	bl	800c9bc <rcl_wait_set_fini>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d130      	bne.n	8009a28 <rclc_executor_prepare+0x88>
 80099c6:	a80c      	add	r0, sp, #48	@ 0x30
 80099c8:	f002 ffde 	bl	800c988 <rcl_get_zero_initialized_wait_set>
 80099cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80099d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80099d4:	46ae      	mov	lr, r5
 80099d6:	6927      	ldr	r7, [r4, #16]
 80099d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80099dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80099e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80099e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80099e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80099ec:	f8dc 3000 	ldr.w	r3, [ip]
 80099f0:	f8ce 3000 	str.w	r3, [lr]
 80099f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80099f6:	ae04      	add	r6, sp, #16
 80099f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	6033      	str	r3, [r6, #0]
 8009a00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a02:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009a04:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009a08:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009a0c:	e9cd 2100 	strd	r2, r1, [sp]
 8009a10:	4628      	mov	r0, r5
 8009a12:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009a14:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009a16:	f003 facf 	bl	800cfb8 <rcl_wait_set_init>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d0cc      	beq.n	80099b8 <rclc_executor_prepare+0x18>
 8009a1e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009a20:	f000 fae6 	bl	8009ff0 <rcutils_reset_error>
 8009a24:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009a26:	e7c7      	b.n	80099b8 <rclc_executor_prepare+0x18>
 8009a28:	f000 fae2 	bl	8009ff0 <rcutils_reset_error>
 8009a2c:	e7cb      	b.n	80099c6 <rclc_executor_prepare+0x26>
 8009a2e:	200b      	movs	r0, #11
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop

08009a34 <rclc_executor_spin_some.part.0>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	f100 0614 	add.w	r6, r0, #20
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	4691      	mov	r9, r2
 8009a40:	4698      	mov	r8, r3
 8009a42:	4605      	mov	r5, r0
 8009a44:	f7ff ffac 	bl	80099a0 <rclc_executor_prepare>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f003 f883 	bl	800cb54 <rcl_wait_set_clear>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f040 80ed 	bne.w	8009c30 <rclc_executor_spin_some.part.0+0x1fc>
 8009a56:	68ab      	ldr	r3, [r5, #8]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	b303      	cbz	r3, 8009a9e <rclc_executor_spin_some.part.0+0x6a>
 8009a5c:	6869      	ldr	r1, [r5, #4]
 8009a5e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009a62:	01a2      	lsls	r2, r4, #6
 8009a64:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009a68:	b1cb      	cbz	r3, 8009a9e <rclc_executor_spin_some.part.0+0x6a>
 8009a6a:	5c8b      	ldrb	r3, [r1, r2]
 8009a6c:	2b0a      	cmp	r3, #10
 8009a6e:	f200 80d8 	bhi.w	8009c22 <rclc_executor_spin_some.part.0+0x1ee>
 8009a72:	e8df f003 	tbb	[pc, r3]
 8009a76:	9c9c      	.short	0x9c9c
 8009a78:	068c8ca7 	.word	0x068c8ca7
 8009a7c:	bdc90606 	.word	0xbdc90606
 8009a80:	b2          	.byte	0xb2
 8009a81:	00          	.byte	0x00
 8009a82:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009a86:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f003 fbaa 	bl	800d1e4 <rcl_wait_set_add_service>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f040 8086 	bne.w	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009a96:	68ab      	ldr	r3, [r5, #8]
 8009a98:	3401      	adds	r4, #1
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	d3de      	bcc.n	8009a5c <rclc_executor_spin_some.part.0+0x28>
 8009a9e:	4643      	mov	r3, r8
 8009aa0:	464a      	mov	r2, r9
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f003 fbcc 	bl	800d240 <rcl_wait>
 8009aa8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 80c7 	beq.w	8009c40 <rclc_executor_spin_some.part.0+0x20c>
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	f040 80b5 	bne.w	8009c22 <rclc_executor_spin_some.part.0+0x1ee>
 8009ab8:	68ab      	ldr	r3, [r5, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 8159 	beq.w	8009d72 <rclc_executor_spin_some.part.0+0x33e>
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	46a0      	mov	r8, r4
 8009ac4:	f240 1991 	movw	r9, #401	@ 0x191
 8009ac8:	e00a      	b.n	8009ae0 <rclc_executor_spin_some.part.0+0xac>
 8009aca:	f7ff fb7d 	bl	80091c8 <_rclc_check_for_new_data>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	b110      	cbz	r0, 8009ad8 <rclc_executor_spin_some.part.0+0xa4>
 8009ad2:	4548      	cmp	r0, r9
 8009ad4:	f040 80b2 	bne.w	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009ad8:	68ab      	ldr	r3, [r5, #8]
 8009ada:	4598      	cmp	r8, r3
 8009adc:	f080 8126 	bcs.w	8009d2c <rclc_executor_spin_some.part.0+0x2f8>
 8009ae0:	686a      	ldr	r2, [r5, #4]
 8009ae2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009aec:	f108 0801 	add.w	r8, r8, #1
 8009af0:	f1bc 0f00 	cmp.w	ip, #0
 8009af4:	d1e9      	bne.n	8009aca <rclc_executor_spin_some.part.0+0x96>
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009afe:	4798      	blx	r3
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f000 809b 	beq.w	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009b06:	68ab      	ldr	r3, [r5, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 8097 	beq.w	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009b0e:	f04f 0800 	mov.w	r8, #0
 8009b12:	f240 1991 	movw	r9, #401	@ 0x191
 8009b16:	e009      	b.n	8009b2c <rclc_executor_spin_some.part.0+0xf8>
 8009b18:	f7ff fba4 	bl	8009264 <_rclc_take_new_data>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	b110      	cbz	r0, 8009b26 <rclc_executor_spin_some.part.0+0xf2>
 8009b20:	4548      	cmp	r0, r9
 8009b22:	f040 808b 	bne.w	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009b26:	68ab      	ldr	r3, [r5, #8]
 8009b28:	4598      	cmp	r8, r3
 8009b2a:	d209      	bcs.n	8009b40 <rclc_executor_spin_some.part.0+0x10c>
 8009b2c:	6868      	ldr	r0, [r5, #4]
 8009b2e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009b32:	4631      	mov	r1, r6
 8009b34:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009b38:	f108 0801 	add.w	r8, r8, #1
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d1eb      	bne.n	8009b18 <rclc_executor_spin_some.part.0+0xe4>
 8009b40:	2600      	movs	r6, #0
 8009b42:	b97b      	cbnz	r3, 8009b64 <rclc_executor_spin_some.part.0+0x130>
 8009b44:	e07a      	b.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009b46:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009b4a:	2a08      	cmp	r2, #8
 8009b4c:	f000 80fd 	beq.w	8009d4a <rclc_executor_spin_some.part.0+0x316>
 8009b50:	2a09      	cmp	r2, #9
 8009b52:	f000 80ef 	beq.w	8009d34 <rclc_executor_spin_some.part.0+0x300>
 8009b56:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009b5a:	b98a      	cbnz	r2, 8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009b5c:	3601      	adds	r6, #1
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	d262      	bcs.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009b62:	2400      	movs	r4, #0
 8009b64:	686a      	ldr	r2, [r5, #4]
 8009b66:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009b6a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009b6e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009b72:	2900      	cmp	r1, #0
 8009b74:	d062      	beq.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009b76:	7841      	ldrb	r1, [r0, #1]
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d0e4      	beq.n	8009b46 <rclc_executor_spin_some.part.0+0x112>
 8009b7c:	2901      	cmp	r1, #1
 8009b7e:	d1ed      	bne.n	8009b5c <rclc_executor_spin_some.part.0+0x128>
 8009b80:	f7ff fce4 	bl	800954c <_rclc_execute.part.0>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f040 80b6 	bne.w	8009cf6 <rclc_executor_spin_some.part.0+0x2c2>
 8009b8a:	68ab      	ldr	r3, [r5, #8]
 8009b8c:	e7e6      	b.n	8009b5c <rclc_executor_spin_some.part.0+0x128>
 8009b8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009b92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009b96:	4630      	mov	r0, r6
 8009b98:	f003 faf8 	bl	800d18c <rcl_wait_set_add_client>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f43f af7a 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009ba2:	9001      	str	r0, [sp, #4]
 8009ba4:	f000 fa24 	bl	8009ff0 <rcutils_reset_error>
 8009ba8:	9801      	ldr	r0, [sp, #4]
 8009baa:	4607      	mov	r7, r0
 8009bac:	e03c      	b.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009bae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009bb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f002 ffa0 	bl	800cafc <rcl_wait_set_add_subscription>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f43f af6a 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009bc2:	e7ee      	b.n	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009bc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009bc8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f003 faad 	bl	800d12c <rcl_wait_set_add_timer>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f43f af5f 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009bd8:	e7e3      	b.n	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009bda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009bde:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009be2:	4630      	mov	r0, r6
 8009be4:	f003 fa76 	bl	800d0d4 <rcl_wait_set_add_guard_condition>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f43f af54 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009bee:	e7d8      	b.n	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009bf0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009bf4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009bf8:	3110      	adds	r1, #16
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f003 fff8 	bl	800dbf0 <rcl_action_wait_set_add_action_server>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f43f af48 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009c06:	e7cc      	b.n	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009c08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009c0c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009c10:	3110      	adds	r1, #16
 8009c12:	2300      	movs	r3, #0
 8009c14:	4630      	mov	r0, r6
 8009c16:	f003 fdc3 	bl	800d7a0 <rcl_action_wait_set_add_action_client>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f43f af3b 	beq.w	8009a96 <rclc_executor_spin_some.part.0+0x62>
 8009c20:	e7bf      	b.n	8009ba2 <rclc_executor_spin_some.part.0+0x16e>
 8009c22:	f000 f9e5 	bl	8009ff0 <rcutils_reset_error>
 8009c26:	2701      	movs	r7, #1
 8009c28:	4638      	mov	r0, r7
 8009c2a:	b003      	add	sp, #12
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	f000 f9de 	bl	8009ff0 <rcutils_reset_error>
 8009c34:	4638      	mov	r0, r7
 8009c36:	b003      	add	sp, #12
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	4627      	mov	r7, r4
 8009c3e:	e7f3      	b.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009c40:	68ab      	ldr	r3, [r5, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 8092 	beq.w	8009d6c <rclc_executor_spin_some.part.0+0x338>
 8009c48:	2400      	movs	r4, #0
 8009c4a:	46a0      	mov	r8, r4
 8009c4c:	f240 1991 	movw	r9, #401	@ 0x191
 8009c50:	e008      	b.n	8009c64 <rclc_executor_spin_some.part.0+0x230>
 8009c52:	f7ff fab9 	bl	80091c8 <_rclc_check_for_new_data>
 8009c56:	4604      	mov	r4, r0
 8009c58:	b108      	cbz	r0, 8009c5e <rclc_executor_spin_some.part.0+0x22a>
 8009c5a:	4548      	cmp	r0, r9
 8009c5c:	d1ee      	bne.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009c5e:	68ab      	ldr	r3, [r5, #8]
 8009c60:	4598      	cmp	r8, r3
 8009c62:	d265      	bcs.n	8009d30 <rclc_executor_spin_some.part.0+0x2fc>
 8009c64:	686a      	ldr	r2, [r5, #4]
 8009c66:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009c70:	f108 0801 	add.w	r8, r8, #1
 8009c74:	f1bc 0f00 	cmp.w	ip, #0
 8009c78:	d1eb      	bne.n	8009c52 <rclc_executor_spin_some.part.0+0x21e>
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009c82:	4798      	blx	r3
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0d9      	beq.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009c88:	68ab      	ldr	r3, [r5, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0d6      	beq.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009c8e:	f04f 0800 	mov.w	r8, #0
 8009c92:	f240 1991 	movw	r9, #401	@ 0x191
 8009c96:	f240 2a59 	movw	sl, #601	@ 0x259
 8009c9a:	e00e      	b.n	8009cba <rclc_executor_spin_some.part.0+0x286>
 8009c9c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d033      	beq.n	8009d0c <rclc_executor_spin_some.part.0+0x2d8>
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d028      	beq.n	8009cfa <rclc_executor_spin_some.part.0+0x2c6>
 8009ca8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009cac:	b9fb      	cbnz	r3, 8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009cae:	68ab      	ldr	r3, [r5, #8]
 8009cb0:	f108 0801 	add.w	r8, r8, #1
 8009cb4:	4598      	cmp	r8, r3
 8009cb6:	d2b7      	bcs.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009cb8:	2400      	movs	r4, #0
 8009cba:	6868      	ldr	r0, [r5, #4]
 8009cbc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009cc0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009cc4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0b7      	beq.n	8009c3c <rclc_executor_spin_some.part.0+0x208>
 8009ccc:	4631      	mov	r1, r6
 8009cce:	f7ff fac9 	bl	8009264 <_rclc_take_new_data>
 8009cd2:	b118      	cbz	r0, 8009cdc <rclc_executor_spin_some.part.0+0x2a8>
 8009cd4:	4548      	cmp	r0, r9
 8009cd6:	d001      	beq.n	8009cdc <rclc_executor_spin_some.part.0+0x2a8>
 8009cd8:	4550      	cmp	r0, sl
 8009cda:	d10c      	bne.n	8009cf6 <rclc_executor_spin_some.part.0+0x2c2>
 8009cdc:	686b      	ldr	r3, [r5, #4]
 8009cde:	eb13 000b 	adds.w	r0, r3, fp
 8009ce2:	d021      	beq.n	8009d28 <rclc_executor_spin_some.part.0+0x2f4>
 8009ce4:	7842      	ldrb	r2, [r0, #1]
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	d0d8      	beq.n	8009c9c <rclc_executor_spin_some.part.0+0x268>
 8009cea:	2a01      	cmp	r2, #1
 8009cec:	d1df      	bne.n	8009cae <rclc_executor_spin_some.part.0+0x27a>
 8009cee:	f7ff fc2d 	bl	800954c <_rclc_execute.part.0>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0db      	beq.n	8009cae <rclc_executor_spin_some.part.0+0x27a>
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	e796      	b.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009cfa:	6843      	ldr	r3, [r0, #4]
 8009cfc:	6a1a      	ldr	r2, [r3, #32]
 8009cfe:	2a00      	cmp	r2, #0
 8009d00:	d1f5      	bne.n	8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0d1      	beq.n	8009cae <rclc_executor_spin_some.part.0+0x27a>
 8009d0a:	e7f0      	b.n	8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009d0c:	6843      	ldr	r3, [r0, #4]
 8009d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d10:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009d14:	d1eb      	bne.n	8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009d16:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d1e7      	bne.n	8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0c3      	beq.n	8009cae <rclc_executor_spin_some.part.0+0x27a>
 8009d26:	e7e2      	b.n	8009cee <rclc_executor_spin_some.part.0+0x2ba>
 8009d28:	270b      	movs	r7, #11
 8009d2a:	e77d      	b.n	8009c28 <rclc_executor_spin_some.part.0+0x1f4>
 8009d2c:	686a      	ldr	r2, [r5, #4]
 8009d2e:	e6e2      	b.n	8009af6 <rclc_executor_spin_some.part.0+0xc2>
 8009d30:	686a      	ldr	r2, [r5, #4]
 8009d32:	e7a2      	b.n	8009c7a <rclc_executor_spin_some.part.0+0x246>
 8009d34:	6842      	ldr	r2, [r0, #4]
 8009d36:	6a11      	ldr	r1, [r2, #32]
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	f47f af21 	bne.w	8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009d3e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009d42:	2a00      	cmp	r2, #0
 8009d44:	f43f af0a 	beq.w	8009b5c <rclc_executor_spin_some.part.0+0x128>
 8009d48:	e71a      	b.n	8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009d4a:	6842      	ldr	r2, [r0, #4]
 8009d4c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8009d4e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8009d52:	f47f af15 	bne.w	8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009d56:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	f47f af10 	bne.w	8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009d60:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	f43f aef9 	beq.w	8009b5c <rclc_executor_spin_some.part.0+0x128>
 8009d6a:	e709      	b.n	8009b80 <rclc_executor_spin_some.part.0+0x14c>
 8009d6c:	686a      	ldr	r2, [r5, #4]
 8009d6e:	461c      	mov	r4, r3
 8009d70:	e783      	b.n	8009c7a <rclc_executor_spin_some.part.0+0x246>
 8009d72:	686a      	ldr	r2, [r5, #4]
 8009d74:	461c      	mov	r4, r3
 8009d76:	e6be      	b.n	8009af6 <rclc_executor_spin_some.part.0+0xc2>

08009d78 <rclc_executor_spin_some>:
 8009d78:	b190      	cbz	r0, 8009da0 <rclc_executor_spin_some+0x28>
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	6800      	ldr	r0, [r0, #0]
 8009d80:	4616      	mov	r6, r2
 8009d82:	461d      	mov	r5, r3
 8009d84:	f001 fdf0 	bl	800b968 <rcl_context_is_valid>
 8009d88:	b130      	cbz	r0, 8009d98 <rclc_executor_spin_some+0x20>
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d94:	f7ff be4e 	b.w	8009a34 <rclc_executor_spin_some.part.0>
 8009d98:	f000 f92a 	bl	8009ff0 <rcutils_reset_error>
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	200b      	movs	r0, #11
 8009da2:	4770      	bx	lr

08009da4 <rclc_executor_handle_counters_zero_init>:
 8009da4:	b130      	cbz	r0, 8009db4 <rclc_executor_handle_counters_zero_init+0x10>
 8009da6:	b508      	push	{r3, lr}
 8009da8:	2220      	movs	r2, #32
 8009daa:	2100      	movs	r1, #0
 8009dac:	f00b fd7c 	bl	80158a8 <memset>
 8009db0:	2000      	movs	r0, #0
 8009db2:	bd08      	pop	{r3, pc}
 8009db4:	200b      	movs	r0, #11
 8009db6:	4770      	bx	lr

08009db8 <rclc_executor_handle_init>:
 8009db8:	b168      	cbz	r0, 8009dd6 <rclc_executor_handle_init+0x1e>
 8009dba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009de0 <rclc_executor_handle_init+0x28>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	220b      	movs	r2, #11
 8009dc2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8009dc6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009dca:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009dce:	8002      	strh	r2, [r0, #0]
 8009dd0:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	4770      	bx	lr
 8009dd6:	200b      	movs	r0, #11
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	f3af 8000 	nop.w
	...

08009de8 <rclc_support_init>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	b3b8      	cbz	r0, 8009e60 <rclc_support_init+0x78>
 8009df0:	461c      	mov	r4, r3
 8009df2:	b3ab      	cbz	r3, 8009e60 <rclc_support_init+0x78>
 8009df4:	460f      	mov	r7, r1
 8009df6:	4690      	mov	r8, r2
 8009df8:	4606      	mov	r6, r0
 8009dfa:	f001 ff09 	bl	800bc10 <rcl_get_zero_initialized_init_options>
 8009dfe:	f104 030c 	add.w	r3, r4, #12
 8009e02:	9005      	str	r0, [sp, #20]
 8009e04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e08:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009e0c:	a805      	add	r0, sp, #20
 8009e0e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009e12:	f001 feff 	bl	800bc14 <rcl_init_options_init>
 8009e16:	4605      	mov	r5, r0
 8009e18:	b9e0      	cbnz	r0, 8009e54 <rclc_support_init+0x6c>
 8009e1a:	ad02      	add	r5, sp, #8
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f001 fd99 	bl	800b954 <rcl_get_zero_initialized_context>
 8009e22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e26:	4633      	mov	r3, r6
 8009e28:	e886 0003 	stmia.w	r6, {r0, r1}
 8009e2c:	aa05      	add	r2, sp, #20
 8009e2e:	4641      	mov	r1, r8
 8009e30:	4638      	mov	r0, r7
 8009e32:	f001 fdff 	bl	800ba34 <rcl_init>
 8009e36:	4605      	mov	r5, r0
 8009e38:	b9b8      	cbnz	r0, 8009e6a <rclc_support_init+0x82>
 8009e3a:	60b4      	str	r4, [r6, #8]
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	f106 010c 	add.w	r1, r6, #12
 8009e42:	2003      	movs	r0, #3
 8009e44:	f002 fc14 	bl	800c670 <rcl_clock_init>
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b970      	cbnz	r0, 8009e6a <rclc_support_init+0x82>
 8009e4c:	a805      	add	r0, sp, #20
 8009e4e:	f001 ff47 	bl	800bce0 <rcl_init_options_fini>
 8009e52:	b108      	cbz	r0, 8009e58 <rclc_support_init+0x70>
 8009e54:	f000 f8cc 	bl	8009ff0 <rcutils_reset_error>
 8009e58:	4628      	mov	r0, r5
 8009e5a:	b006      	add	sp, #24
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	250b      	movs	r5, #11
 8009e62:	4628      	mov	r0, r5
 8009e64:	b006      	add	sp, #24
 8009e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6a:	f000 f8c1 	bl	8009ff0 <rcutils_reset_error>
 8009e6e:	a805      	add	r0, sp, #20
 8009e70:	f001 ff36 	bl	800bce0 <rcl_init_options_fini>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d0ef      	beq.n	8009e58 <rclc_support_init+0x70>
 8009e78:	e7ec      	b.n	8009e54 <rclc_support_init+0x6c>
 8009e7a:	bf00      	nop

08009e7c <rclc_node_init_default>:
 8009e7c:	b3b8      	cbz	r0, 8009eee <rclc_node_init_default+0x72>
 8009e7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e82:	460d      	mov	r5, r1
 8009e84:	b0a1      	sub	sp, #132	@ 0x84
 8009e86:	b329      	cbz	r1, 8009ed4 <rclc_node_init_default+0x58>
 8009e88:	4616      	mov	r6, r2
 8009e8a:	b31a      	cbz	r2, 8009ed4 <rclc_node_init_default+0x58>
 8009e8c:	461f      	mov	r7, r3
 8009e8e:	b30b      	cbz	r3, 8009ed4 <rclc_node_init_default+0x58>
 8009e90:	f10d 0810 	add.w	r8, sp, #16
 8009e94:	4604      	mov	r4, r0
 8009e96:	4640      	mov	r0, r8
 8009e98:	f001 ffda 	bl	800be50 <rcl_get_zero_initialized_node>
 8009e9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009ea0:	f10d 0918 	add.w	r9, sp, #24
 8009ea4:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ea8:	4648      	mov	r0, r9
 8009eaa:	f002 f949 	bl	800c140 <rcl_node_get_default_options>
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f001 ffce 	bl	800be50 <rcl_get_zero_initialized_node>
 8009eb4:	f8cd 9000 	str.w	r9, [sp]
 8009eb8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 ffcc 	bl	800be64 <rcl_node_init>
 8009ecc:	b930      	cbnz	r0, 8009edc <rclc_node_init_default+0x60>
 8009ece:	b021      	add	sp, #132	@ 0x84
 8009ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ed4:	200b      	movs	r0, #11
 8009ed6:	b021      	add	sp, #132	@ 0x84
 8009ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009edc:	9003      	str	r0, [sp, #12]
 8009ede:	f000 f887 	bl	8009ff0 <rcutils_reset_error>
 8009ee2:	f000 f885 	bl	8009ff0 <rcutils_reset_error>
 8009ee6:	9803      	ldr	r0, [sp, #12]
 8009ee8:	b021      	add	sp, #132	@ 0x84
 8009eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eee:	200b      	movs	r0, #11
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop

08009ef4 <rclc_subscription_init_default>:
 8009ef4:	b368      	cbz	r0, 8009f52 <rclc_subscription_init_default+0x5e>
 8009ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efa:	460d      	mov	r5, r1
 8009efc:	b0a0      	sub	sp, #128	@ 0x80
 8009efe:	b321      	cbz	r1, 8009f4a <rclc_subscription_init_default+0x56>
 8009f00:	4616      	mov	r6, r2
 8009f02:	b312      	cbz	r2, 8009f4a <rclc_subscription_init_default+0x56>
 8009f04:	461f      	mov	r7, r3
 8009f06:	b303      	cbz	r3, 8009f4a <rclc_subscription_init_default+0x56>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	f002 fa55 	bl	800c3b8 <rcl_get_zero_initialized_subscription>
 8009f0e:	f10d 0810 	add.w	r8, sp, #16
 8009f12:	6020      	str	r0, [r4, #0]
 8009f14:	4640      	mov	r0, r8
 8009f16:	f002 fafd 	bl	800c514 <rcl_subscription_get_default_options>
 8009f1a:	490f      	ldr	r1, [pc, #60]	@ (8009f58 <rclc_subscription_init_default+0x64>)
 8009f1c:	2250      	movs	r2, #80	@ 0x50
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f00b fd8b 	bl	8015a3a <memcpy>
 8009f24:	f8cd 8000 	str.w	r8, [sp]
 8009f28:	463b      	mov	r3, r7
 8009f2a:	4632      	mov	r2, r6
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f002 fa48 	bl	800c3c4 <rcl_subscription_init>
 8009f34:	b910      	cbnz	r0, 8009f3c <rclc_subscription_init_default+0x48>
 8009f36:	b020      	add	sp, #128	@ 0x80
 8009f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f3c:	9003      	str	r0, [sp, #12]
 8009f3e:	f000 f857 	bl	8009ff0 <rcutils_reset_error>
 8009f42:	9803      	ldr	r0, [sp, #12]
 8009f44:	b020      	add	sp, #128	@ 0x80
 8009f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4a:	200b      	movs	r0, #11
 8009f4c:	b020      	add	sp, #128	@ 0x80
 8009f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f52:	200b      	movs	r0, #11
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	08016930 	.word	0x08016930

08009f5c <__default_zero_allocate>:
 8009f5c:	f00b b8cc 	b.w	80150f8 <calloc>

08009f60 <__default_reallocate>:
 8009f60:	f00b ba58 	b.w	8015414 <realloc>

08009f64 <__default_deallocate>:
 8009f64:	f00b b934 	b.w	80151d0 <free>

08009f68 <__default_allocate>:
 8009f68:	f00b b92a 	b.w	80151c0 <malloc>

08009f6c <rcutils_get_zero_initialized_allocator>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	4c05      	ldr	r4, [pc, #20]	@ (8009f84 <rcutils_get_zero_initialized_allocator+0x18>)
 8009f70:	4686      	mov	lr, r0
 8009f72:	4684      	mov	ip, r0
 8009f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	f8cc 3000 	str.w	r3, [ip]
 8009f80:	4670      	mov	r0, lr
 8009f82:	bd10      	pop	{r4, pc}
 8009f84:	08016980 	.word	0x08016980

08009f88 <rcutils_get_default_allocator>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4c05      	ldr	r4, [pc, #20]	@ (8009fa0 <rcutils_get_default_allocator+0x18>)
 8009f8c:	4686      	mov	lr, r0
 8009f8e:	4684      	mov	ip, r0
 8009f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	f8cc 3000 	str.w	r3, [ip]
 8009f9c:	4670      	mov	r0, lr
 8009f9e:	bd10      	pop	{r4, pc}
 8009fa0:	200000a8 	.word	0x200000a8

08009fa4 <rcutils_allocator_is_valid>:
 8009fa4:	b158      	cbz	r0, 8009fbe <rcutils_allocator_is_valid+0x1a>
 8009fa6:	6803      	ldr	r3, [r0, #0]
 8009fa8:	b143      	cbz	r3, 8009fbc <rcutils_allocator_is_valid+0x18>
 8009faa:	6843      	ldr	r3, [r0, #4]
 8009fac:	b133      	cbz	r3, 8009fbc <rcutils_allocator_is_valid+0x18>
 8009fae:	68c3      	ldr	r3, [r0, #12]
 8009fb0:	b123      	cbz	r3, 8009fbc <rcutils_allocator_is_valid+0x18>
 8009fb2:	6880      	ldr	r0, [r0, #8]
 8009fb4:	3800      	subs	r0, #0
 8009fb6:	bf18      	it	ne
 8009fb8:	2001      	movne	r0, #1
 8009fba:	4770      	bx	lr
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	4770      	bx	lr

08009fc0 <rcutils_get_error_string>:
 8009fc0:	4b06      	ldr	r3, [pc, #24]	@ (8009fdc <rcutils_get_error_string+0x1c>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	b13b      	cbz	r3, 8009fd6 <rcutils_get_error_string+0x16>
 8009fc6:	4b06      	ldr	r3, [pc, #24]	@ (8009fe0 <rcutils_get_error_string+0x20>)
 8009fc8:	781a      	ldrb	r2, [r3, #0]
 8009fca:	b90a      	cbnz	r2, 8009fd0 <rcutils_get_error_string+0x10>
 8009fcc:	2201      	movs	r2, #1
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	4b04      	ldr	r3, [pc, #16]	@ (8009fe4 <rcutils_get_error_string+0x24>)
 8009fd2:	7818      	ldrb	r0, [r3, #0]
 8009fd4:	4770      	bx	lr
 8009fd6:	4b04      	ldr	r3, [pc, #16]	@ (8009fe8 <rcutils_get_error_string+0x28>)
 8009fd8:	7818      	ldrb	r0, [r3, #0]
 8009fda:	4770      	bx	lr
 8009fdc:	200094f4 	.word	0x200094f4
 8009fe0:	20009509 	.word	0x20009509
 8009fe4:	20009508 	.word	0x20009508
 8009fe8:	08016994 	.word	0x08016994
 8009fec:	00000000 	.word	0x00000000

08009ff0 <rcutils_reset_error>:
 8009ff0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a010 <rcutils_reset_error+0x20>
 8009ff4:	4a08      	ldr	r2, [pc, #32]	@ (800a018 <rcutils_reset_error+0x28>)
 8009ff6:	4809      	ldr	r0, [pc, #36]	@ (800a01c <rcutils_reset_error+0x2c>)
 8009ff8:	4909      	ldr	r1, [pc, #36]	@ (800a020 <rcutils_reset_error+0x30>)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	8013      	strh	r3, [r2, #0]
 8009ffe:	ed82 7b02 	vstr	d7, [r2, #8]
 800a002:	4a08      	ldr	r2, [pc, #32]	@ (800a024 <rcutils_reset_error+0x34>)
 800a004:	7003      	strb	r3, [r0, #0]
 800a006:	700b      	strb	r3, [r1, #0]
 800a008:	7013      	strb	r3, [r2, #0]
 800a00a:	4770      	bx	lr
 800a00c:	f3af 8000 	nop.w
	...
 800a018:	200094f8 	.word	0x200094f8
 800a01c:	20009509 	.word	0x20009509
 800a020:	20009508 	.word	0x20009508
 800a024:	200094f4 	.word	0x200094f4

0800a028 <rcutils_system_time_now>:
 800a028:	b308      	cbz	r0, 800a06e <rcutils_system_time_now+0x46>
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	4604      	mov	r4, r0
 800a030:	4669      	mov	r1, sp
 800a032:	2001      	movs	r0, #1
 800a034:	f7f8 f9f0 	bl	8002418 <clock_gettime>
 800a038:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a03c:	2d00      	cmp	r5, #0
 800a03e:	db13      	blt.n	800a068 <rcutils_system_time_now+0x40>
 800a040:	9902      	ldr	r1, [sp, #8]
 800a042:	2900      	cmp	r1, #0
 800a044:	db0d      	blt.n	800a062 <rcutils_system_time_now+0x3a>
 800a046:	4e0b      	ldr	r6, [pc, #44]	@ (800a074 <rcutils_system_time_now+0x4c>)
 800a048:	fba3 3206 	umull	r3, r2, r3, r6
 800a04c:	185b      	adds	r3, r3, r1
 800a04e:	fb06 2205 	mla	r2, r6, r5, r2
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a05a:	e9c4 3200 	strd	r3, r2, [r4]
 800a05e:	b004      	add	sp, #16
 800a060:	bd70      	pop	{r4, r5, r6, pc}
 800a062:	ea53 0205 	orrs.w	r2, r3, r5
 800a066:	d1ee      	bne.n	800a046 <rcutils_system_time_now+0x1e>
 800a068:	2002      	movs	r0, #2
 800a06a:	b004      	add	sp, #16
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	200b      	movs	r0, #11
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	3b9aca00 	.word	0x3b9aca00

0800a078 <rcutils_steady_time_now>:
 800a078:	b308      	cbz	r0, 800a0be <rcutils_steady_time_now+0x46>
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	4604      	mov	r4, r0
 800a080:	4669      	mov	r1, sp
 800a082:	2000      	movs	r0, #0
 800a084:	f7f8 f9c8 	bl	8002418 <clock_gettime>
 800a088:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	db13      	blt.n	800a0b8 <rcutils_steady_time_now+0x40>
 800a090:	9902      	ldr	r1, [sp, #8]
 800a092:	2900      	cmp	r1, #0
 800a094:	db0d      	blt.n	800a0b2 <rcutils_steady_time_now+0x3a>
 800a096:	4e0b      	ldr	r6, [pc, #44]	@ (800a0c4 <rcutils_steady_time_now+0x4c>)
 800a098:	fba3 3206 	umull	r3, r2, r3, r6
 800a09c:	185b      	adds	r3, r3, r1
 800a09e:	fb06 2205 	mla	r2, r6, r5, r2
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a0aa:	e9c4 3200 	strd	r3, r2, [r4]
 800a0ae:	b004      	add	sp, #16
 800a0b0:	bd70      	pop	{r4, r5, r6, pc}
 800a0b2:	ea53 0205 	orrs.w	r2, r3, r5
 800a0b6:	d1ee      	bne.n	800a096 <rcutils_steady_time_now+0x1e>
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	b004      	add	sp, #16
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
 800a0be:	200b      	movs	r0, #11
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	3b9aca00 	.word	0x3b9aca00

0800a0c8 <rmw_uros_set_custom_transport>:
 800a0c8:	b470      	push	{r4, r5, r6}
 800a0ca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a0ce:	b162      	cbz	r2, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d0:	b15b      	cbz	r3, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d2:	b155      	cbz	r5, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d4:	b14e      	cbz	r6, 800a0ea <rmw_uros_set_custom_transport+0x22>
 800a0d6:	4c06      	ldr	r4, [pc, #24]	@ (800a0f0 <rmw_uros_set_custom_transport+0x28>)
 800a0d8:	7020      	strb	r0, [r4, #0]
 800a0da:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a0de:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a0e2:	6166      	str	r6, [r4, #20]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	bc70      	pop	{r4, r5, r6}
 800a0e8:	4770      	bx	lr
 800a0ea:	200b      	movs	r0, #11
 800a0ec:	bc70      	pop	{r4, r5, r6}
 800a0ee:	4770      	bx	lr
 800a0f0:	2000950c 	.word	0x2000950c

0800a0f4 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	b10a      	cbz	r2, 800a0fe <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800a0fa:	4803      	ldr	r0, [pc, #12]	@ (800a108 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a0fc:	4770      	bx	lr
 800a0fe:	4a03      	ldr	r2, [pc, #12]	@ (800a10c <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800a100:	4801      	ldr	r0, [pc, #4]	@ (800a108 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a102:	6812      	ldr	r2, [r2, #0]
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	4770      	bx	lr
 800a108:	200000c4 	.word	0x200000c4
 800a10c:	200004d0 	.word	0x200004d0

0800a110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a110:	4a02      	ldr	r2, [pc, #8]	@ (800a11c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xc>)
 800a112:	4b03      	ldr	r3, [pc, #12]	@ (800a120 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x10>)
 800a114:	6812      	ldr	r2, [r2, #0]
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	200004d0 	.word	0x200004d0
 800a120:	200000c4 	.word	0x200000c4

0800a124 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a124:	4b04      	ldr	r3, [pc, #16]	@ (800a138 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	b10a      	cbz	r2, 800a12e <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800a12a:	4803      	ldr	r0, [pc, #12]	@ (800a138 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a12c:	4770      	bx	lr
 800a12e:	4a03      	ldr	r2, [pc, #12]	@ (800a13c <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800a130:	4801      	ldr	r0, [pc, #4]	@ (800a138 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a132:	6812      	ldr	r2, [r2, #0]
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	4770      	bx	lr
 800a138:	200000d8 	.word	0x200000d8
 800a13c:	200004d0 	.word	0x200004d0

0800a140 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a140:	4a02      	ldr	r2, [pc, #8]	@ (800a14c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xc>)
 800a142:	4b03      	ldr	r3, [pc, #12]	@ (800a150 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x10>)
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	200004d0 	.word	0x200004d0
 800a150:	200000d8 	.word	0x200000d8

0800a154 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_init_function>:
 800a154:	f006 b8fa 	b.w	801034c <rover_msgs__msg__ControllerMsg__init>

0800a158 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_fini_function>:
 800a158:	f006 b8fc 	b.w	8010354 <rover_msgs__msg__ControllerMsg__fini>

0800a15c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a15c:	4b04      	ldr	r3, [pc, #16]	@ (800a170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	b10a      	cbz	r2, 800a166 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800a162:	4803      	ldr	r0, [pc, #12]	@ (800a170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a164:	4770      	bx	lr
 800a166:	4a03      	ldr	r2, [pc, #12]	@ (800a174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800a168:	4801      	ldr	r0, [pc, #4]	@ (800a170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800a16a:	6812      	ldr	r2, [r2, #0]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	4770      	bx	lr
 800a170:	20000378 	.word	0x20000378
 800a174:	200004d4 	.word	0x200004d4

0800a178 <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_init_function>:
 800a178:	f006 b8ee 	b.w	8010358 <rover_msgs__msg__EncoderMsg__init>

0800a17c <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_fini_function>:
 800a17c:	f006 b8f0 	b.w	8010360 <rover_msgs__msg__EncoderMsg__fini>

0800a180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a180:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	b10a      	cbz	r2, 800a18a <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800a186:	4803      	ldr	r0, [pc, #12]	@ (800a194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a188:	4770      	bx	lr
 800a18a:	4a03      	ldr	r2, [pc, #12]	@ (800a198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800a18c:	4801      	ldr	r0, [pc, #4]	@ (800a194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	4770      	bx	lr
 800a194:	20000474 	.word	0x20000474
 800a198:	200004d4 	.word	0x200004d4

0800a19c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	2104      	movs	r1, #4
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	f001 fadb 	bl	800b75c <ucdr_alignment>
 800a1a6:	1d26      	adds	r6, r4, #4
 800a1a8:	4406      	add	r6, r0
 800a1aa:	2104      	movs	r1, #4
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f001 fad5 	bl	800b75c <ucdr_alignment>
 800a1b2:	1d05      	adds	r5, r0, #4
 800a1b4:	442e      	add	r6, r5
 800a1b6:	2104      	movs	r1, #4
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f001 facf 	bl	800b75c <ucdr_alignment>
 800a1be:	1d05      	adds	r5, r0, #4
 800a1c0:	4435      	add	r5, r6
 800a1c2:	2104      	movs	r1, #4
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f001 fac9 	bl	800b75c <ucdr_alignment>
 800a1ca:	3004      	adds	r0, #4
 800a1cc:	4405      	add	r5, r0
 800a1ce:	2104      	movs	r1, #4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f001 fac3 	bl	800b75c <ucdr_alignment>
 800a1d6:	3004      	adds	r0, #4
 800a1d8:	1946      	adds	r6, r0, r5
 800a1da:	2104      	movs	r1, #4
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f001 fabd 	bl	800b75c <ucdr_alignment>
 800a1e2:	1d05      	adds	r5, r0, #4
 800a1e4:	4435      	add	r5, r6
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f001 fab7 	bl	800b75c <ucdr_alignment>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	4405      	add	r5, r0
 800a1f2:	2104      	movs	r1, #4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f001 fab1 	bl	800b75c <ucdr_alignment>
 800a1fa:	3004      	adds	r0, #4
 800a1fc:	1946      	adds	r6, r0, r5
 800a1fe:	2104      	movs	r1, #4
 800a200:	4630      	mov	r0, r6
 800a202:	f001 faab 	bl	800b75c <ucdr_alignment>
 800a206:	1d05      	adds	r5, r0, #4
 800a208:	4435      	add	r5, r6
 800a20a:	2104      	movs	r1, #4
 800a20c:	4628      	mov	r0, r5
 800a20e:	f001 faa5 	bl	800b75c <ucdr_alignment>
 800a212:	3004      	adds	r0, #4
 800a214:	4405      	add	r5, r0
 800a216:	2104      	movs	r1, #4
 800a218:	4628      	mov	r0, r5
 800a21a:	f001 fa9f 	bl	800b75c <ucdr_alignment>
 800a21e:	f1c4 0404 	rsb	r4, r4, #4
 800a222:	4420      	add	r0, r4
 800a224:	4428      	add	r0, r5
 800a226:	bd70      	pop	{r4, r5, r6, pc}

0800a228 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 800a228:	b110      	cbz	r0, 800a230 <get_serialized_size_rover_msgs__msg__ControllerMsg+0x8>
 800a22a:	4608      	mov	r0, r1
 800a22c:	f7ff bfb6 	b.w	800a19c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop

0800a234 <_ControllerMsg__get_serialized_size>:
 800a234:	b110      	cbz	r0, 800a23c <_ControllerMsg__get_serialized_size+0x8>
 800a236:	2000      	movs	r0, #0
 800a238:	f7ff bfb0 	b.w	800a19c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop

0800a240 <_ControllerMsg__cdr_deserialize>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	460c      	mov	r4, r1
 800a244:	b3a9      	cbz	r1, 800a2b2 <_ControllerMsg__cdr_deserialize+0x72>
 800a246:	4605      	mov	r5, r0
 800a248:	f001 f9a0 	bl	800b58c <ucdr_deserialize_float>
 800a24c:	1d21      	adds	r1, r4, #4
 800a24e:	4628      	mov	r0, r5
 800a250:	f001 f99c 	bl	800b58c <ucdr_deserialize_float>
 800a254:	f104 0108 	add.w	r1, r4, #8
 800a258:	4628      	mov	r0, r5
 800a25a:	f001 f997 	bl	800b58c <ucdr_deserialize_float>
 800a25e:	f104 010c 	add.w	r1, r4, #12
 800a262:	4628      	mov	r0, r5
 800a264:	f001 f86a 	bl	800b33c <ucdr_deserialize_int32_t>
 800a268:	f104 0110 	add.w	r1, r4, #16
 800a26c:	4628      	mov	r0, r5
 800a26e:	f001 f865 	bl	800b33c <ucdr_deserialize_int32_t>
 800a272:	f104 0114 	add.w	r1, r4, #20
 800a276:	4628      	mov	r0, r5
 800a278:	f001 f860 	bl	800b33c <ucdr_deserialize_int32_t>
 800a27c:	f104 0118 	add.w	r1, r4, #24
 800a280:	4628      	mov	r0, r5
 800a282:	f000 feb9 	bl	800aff8 <ucdr_deserialize_int8_t>
 800a286:	f104 011c 	add.w	r1, r4, #28
 800a28a:	4628      	mov	r0, r5
 800a28c:	f001 f856 	bl	800b33c <ucdr_deserialize_int32_t>
 800a290:	f104 0120 	add.w	r1, r4, #32
 800a294:	4628      	mov	r0, r5
 800a296:	f001 f979 	bl	800b58c <ucdr_deserialize_float>
 800a29a:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f001 f974 	bl	800b58c <ucdr_deserialize_float>
 800a2a4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ae:	f001 b96d 	b.w	800b58c <ucdr_deserialize_float>
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	bf00      	nop

0800a2b8 <_ControllerMsg__cdr_serialize>:
 800a2b8:	b3b8      	cbz	r0, 800a32a <_ControllerMsg__cdr_serialize+0x72>
 800a2ba:	b538      	push	{r3, r4, r5, lr}
 800a2bc:	ed90 0a00 	vldr	s0, [r0]
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	f001 f8c9 	bl	800b45c <ucdr_serialize_float>
 800a2ca:	ed94 0a01 	vldr	s0, [r4, #4]
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f001 f8c4 	bl	800b45c <ucdr_serialize_float>
 800a2d4:	ed94 0a02 	vldr	s0, [r4, #8]
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f001 f8bf 	bl	800b45c <ucdr_serialize_float>
 800a2de:	68e1      	ldr	r1, [r4, #12]
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 ff93 	bl	800b20c <ucdr_serialize_int32_t>
 800a2e6:	6921      	ldr	r1, [r4, #16]
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 ff8f 	bl	800b20c <ucdr_serialize_int32_t>
 800a2ee:	6961      	ldr	r1, [r4, #20]
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 ff8b 	bl	800b20c <ucdr_serialize_int32_t>
 800a2f6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 fe66 	bl	800afcc <ucdr_serialize_int8_t>
 800a300:	69e1      	ldr	r1, [r4, #28]
 800a302:	4628      	mov	r0, r5
 800a304:	f000 ff82 	bl	800b20c <ucdr_serialize_int32_t>
 800a308:	ed94 0a08 	vldr	s0, [r4, #32]
 800a30c:	4628      	mov	r0, r5
 800a30e:	f001 f8a5 	bl	800b45c <ucdr_serialize_float>
 800a312:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 800a316:	4628      	mov	r0, r5
 800a318:	f001 f8a0 	bl	800b45c <ucdr_serialize_float>
 800a31c:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
 800a320:	4628      	mov	r0, r5
 800a322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a326:	f001 b899 	b.w	800b45c <ucdr_serialize_float>
 800a32a:	4770      	bx	lr

0800a32c <max_serialized_size_rover_msgs__msg__ControllerMsg>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	460c      	mov	r4, r1
 800a330:	2701      	movs	r7, #1
 800a332:	7007      	strb	r7, [r0, #0]
 800a334:	2104      	movs	r1, #4
 800a336:	4620      	mov	r0, r4
 800a338:	f001 fa10 	bl	800b75c <ucdr_alignment>
 800a33c:	1d26      	adds	r6, r4, #4
 800a33e:	4406      	add	r6, r0
 800a340:	2104      	movs	r1, #4
 800a342:	4630      	mov	r0, r6
 800a344:	f001 fa0a 	bl	800b75c <ucdr_alignment>
 800a348:	1d05      	adds	r5, r0, #4
 800a34a:	442e      	add	r6, r5
 800a34c:	2104      	movs	r1, #4
 800a34e:	4630      	mov	r0, r6
 800a350:	f001 fa04 	bl	800b75c <ucdr_alignment>
 800a354:	1d05      	adds	r5, r0, #4
 800a356:	4435      	add	r5, r6
 800a358:	2104      	movs	r1, #4
 800a35a:	4628      	mov	r0, r5
 800a35c:	f001 f9fe 	bl	800b75c <ucdr_alignment>
 800a360:	3004      	adds	r0, #4
 800a362:	4405      	add	r5, r0
 800a364:	2104      	movs	r1, #4
 800a366:	4628      	mov	r0, r5
 800a368:	f001 f9f8 	bl	800b75c <ucdr_alignment>
 800a36c:	3004      	adds	r0, #4
 800a36e:	1946      	adds	r6, r0, r5
 800a370:	2104      	movs	r1, #4
 800a372:	4630      	mov	r0, r6
 800a374:	f001 f9f2 	bl	800b75c <ucdr_alignment>
 800a378:	1d05      	adds	r5, r0, #4
 800a37a:	4435      	add	r5, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	4628      	mov	r0, r5
 800a380:	f001 f9ec 	bl	800b75c <ucdr_alignment>
 800a384:	4438      	add	r0, r7
 800a386:	4405      	add	r5, r0
 800a388:	2104      	movs	r1, #4
 800a38a:	4628      	mov	r0, r5
 800a38c:	f001 f9e6 	bl	800b75c <ucdr_alignment>
 800a390:	3004      	adds	r0, #4
 800a392:	1946      	adds	r6, r0, r5
 800a394:	2104      	movs	r1, #4
 800a396:	4630      	mov	r0, r6
 800a398:	f001 f9e0 	bl	800b75c <ucdr_alignment>
 800a39c:	1d05      	adds	r5, r0, #4
 800a39e:	4435      	add	r5, r6
 800a3a0:	2104      	movs	r1, #4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f001 f9da 	bl	800b75c <ucdr_alignment>
 800a3a8:	3004      	adds	r0, #4
 800a3aa:	4405      	add	r5, r0
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f001 f9d4 	bl	800b75c <ucdr_alignment>
 800a3b4:	f1c4 0404 	rsb	r4, r4, #4
 800a3b8:	4420      	add	r0, r4
 800a3ba:	4428      	add	r0, r5
 800a3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3be:	bf00      	nop

0800a3c0 <_ControllerMsg__max_serialized_size>:
 800a3c0:	b500      	push	{lr}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	f10d 0007 	add.w	r0, sp, #7
 800a3ca:	f7ff ffaf 	bl	800a32c <max_serialized_size_rover_msgs__msg__ControllerMsg>
 800a3ce:	b003      	add	sp, #12
 800a3d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800a3d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a3d4:	4800      	ldr	r0, [pc, #0]	@ (800a3d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 800a3d6:	4770      	bx	lr
 800a3d8:	20000480 	.word	0x20000480

0800a3dc <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 800a3dc:	b1e0      	cbz	r0, 800a418 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 800a3de:	b570      	push	{r4, r5, r6, lr}
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	2104      	movs	r1, #4
 800a3e6:	f001 f9b9 	bl	800b75c <ucdr_alignment>
 800a3ea:	1d2b      	adds	r3, r5, #4
 800a3ec:	181e      	adds	r6, r3, r0
 800a3ee:	2104      	movs	r1, #4
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f001 f9b3 	bl	800b75c <ucdr_alignment>
 800a3f6:	1d04      	adds	r4, r0, #4
 800a3f8:	4434      	add	r4, r6
 800a3fa:	2104      	movs	r1, #4
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f001 f9ad 	bl	800b75c <ucdr_alignment>
 800a402:	3004      	adds	r0, #4
 800a404:	4404      	add	r4, r0
 800a406:	2104      	movs	r1, #4
 800a408:	4620      	mov	r0, r4
 800a40a:	f001 f9a7 	bl	800b75c <ucdr_alignment>
 800a40e:	f1c5 0504 	rsb	r5, r5, #4
 800a412:	4428      	add	r0, r5
 800a414:	4420      	add	r0, r4
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop

0800a41c <_EncoderMsg__cdr_deserialize>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	460c      	mov	r4, r1
 800a420:	b191      	cbz	r1, 800a448 <_EncoderMsg__cdr_deserialize+0x2c>
 800a422:	4605      	mov	r5, r0
 800a424:	f001 f8b2 	bl	800b58c <ucdr_deserialize_float>
 800a428:	1d21      	adds	r1, r4, #4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f001 f8ae 	bl	800b58c <ucdr_deserialize_float>
 800a430:	f104 0108 	add.w	r1, r4, #8
 800a434:	4628      	mov	r0, r5
 800a436:	f001 f8a9 	bl	800b58c <ucdr_deserialize_float>
 800a43a:	f104 010c 	add.w	r1, r4, #12
 800a43e:	4628      	mov	r0, r5
 800a440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a444:	f001 b8a2 	b.w	800b58c <ucdr_deserialize_float>
 800a448:	4608      	mov	r0, r1
 800a44a:	bd38      	pop	{r3, r4, r5, pc}

0800a44c <_EncoderMsg__cdr_serialize>:
 800a44c:	b1c0      	cbz	r0, 800a480 <_EncoderMsg__cdr_serialize+0x34>
 800a44e:	b538      	push	{r3, r4, r5, lr}
 800a450:	ed90 0a00 	vldr	s0, [r0]
 800a454:	460d      	mov	r5, r1
 800a456:	4604      	mov	r4, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	f000 ffff 	bl	800b45c <ucdr_serialize_float>
 800a45e:	ed94 0a01 	vldr	s0, [r4, #4]
 800a462:	4628      	mov	r0, r5
 800a464:	f000 fffa 	bl	800b45c <ucdr_serialize_float>
 800a468:	ed94 0a02 	vldr	s0, [r4, #8]
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 fff5 	bl	800b45c <ucdr_serialize_float>
 800a472:	ed94 0a03 	vldr	s0, [r4, #12]
 800a476:	4628      	mov	r0, r5
 800a478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a47c:	f000 bfee 	b.w	800b45c <ucdr_serialize_float>
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop

0800a484 <_EncoderMsg__get_serialized_size>:
 800a484:	b1c0      	cbz	r0, 800a4b8 <_EncoderMsg__get_serialized_size+0x34>
 800a486:	b538      	push	{r3, r4, r5, lr}
 800a488:	2104      	movs	r1, #4
 800a48a:	2000      	movs	r0, #0
 800a48c:	f001 f966 	bl	800b75c <ucdr_alignment>
 800a490:	1d05      	adds	r5, r0, #4
 800a492:	2104      	movs	r1, #4
 800a494:	4628      	mov	r0, r5
 800a496:	f001 f961 	bl	800b75c <ucdr_alignment>
 800a49a:	1d04      	adds	r4, r0, #4
 800a49c:	442c      	add	r4, r5
 800a49e:	2104      	movs	r1, #4
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f001 f95b 	bl	800b75c <ucdr_alignment>
 800a4a6:	3004      	adds	r0, #4
 800a4a8:	4404      	add	r4, r0
 800a4aa:	2104      	movs	r1, #4
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f001 f955 	bl	800b75c <ucdr_alignment>
 800a4b2:	3004      	adds	r0, #4
 800a4b4:	4420      	add	r0, r4
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop

0800a4bc <_EncoderMsg__max_serialized_size>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	2104      	movs	r1, #4
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f001 f94b 	bl	800b75c <ucdr_alignment>
 800a4c6:	1d05      	adds	r5, r0, #4
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f001 f946 	bl	800b75c <ucdr_alignment>
 800a4d0:	1d04      	adds	r4, r0, #4
 800a4d2:	442c      	add	r4, r5
 800a4d4:	2104      	movs	r1, #4
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f001 f940 	bl	800b75c <ucdr_alignment>
 800a4dc:	3004      	adds	r0, #4
 800a4de:	4404      	add	r4, r0
 800a4e0:	2104      	movs	r1, #4
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f001 f93a 	bl	800b75c <ucdr_alignment>
 800a4e8:	3004      	adds	r0, #4
 800a4ea:	4420      	add	r0, r4
 800a4ec:	bd38      	pop	{r3, r4, r5, pc}
 800a4ee:	bf00      	nop

0800a4f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a4f0:	4800      	ldr	r0, [pc, #0]	@ (800a4f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 800a4f2:	4770      	bx	lr
 800a4f4:	200004a8 	.word	0x200004a8

0800a4f8 <ucdr_serialize_bool>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	4604      	mov	r4, r0
 800a500:	f001 f8e0 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a504:	b148      	cbz	r0, 800a51a <ucdr_serialize_bool+0x22>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	701d      	strb	r5, [r3, #0]
 800a50a:	68a2      	ldr	r2, [r4, #8]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	2101      	movs	r1, #1
 800a510:	440a      	add	r2, r1
 800a512:	440b      	add	r3, r1
 800a514:	60a2      	str	r2, [r4, #8]
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	7561      	strb	r1, [r4, #21]
 800a51a:	7da0      	ldrb	r0, [r4, #22]
 800a51c:	f080 0001 	eor.w	r0, r0, #1
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop

0800a524 <ucdr_deserialize_bool>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	460d      	mov	r5, r1
 800a528:	2101      	movs	r1, #1
 800a52a:	4604      	mov	r4, r0
 800a52c:	f001 f8ca 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a530:	b160      	cbz	r0, 800a54c <ucdr_deserialize_bool+0x28>
 800a532:	68a2      	ldr	r2, [r4, #8]
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a53a:	3900      	subs	r1, #0
 800a53c:	bf18      	it	ne
 800a53e:	2101      	movne	r1, #1
 800a540:	7029      	strb	r1, [r5, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	2101      	movs	r1, #1
 800a546:	60a2      	str	r2, [r4, #8]
 800a548:	6123      	str	r3, [r4, #16]
 800a54a:	7561      	strb	r1, [r4, #21]
 800a54c:	7da0      	ldrb	r0, [r4, #22]
 800a54e:	f080 0001 	eor.w	r0, r0, #1
 800a552:	bd38      	pop	{r3, r4, r5, pc}

0800a554 <ucdr_serialize_uint8_t>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	460d      	mov	r5, r1
 800a558:	2101      	movs	r1, #1
 800a55a:	4604      	mov	r4, r0
 800a55c:	f001 f8b2 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a560:	b148      	cbz	r0, 800a576 <ucdr_serialize_uint8_t+0x22>
 800a562:	68a3      	ldr	r3, [r4, #8]
 800a564:	701d      	strb	r5, [r3, #0]
 800a566:	68a2      	ldr	r2, [r4, #8]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	2101      	movs	r1, #1
 800a56c:	440a      	add	r2, r1
 800a56e:	440b      	add	r3, r1
 800a570:	60a2      	str	r2, [r4, #8]
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	7561      	strb	r1, [r4, #21]
 800a576:	7da0      	ldrb	r0, [r4, #22]
 800a578:	f080 0001 	eor.w	r0, r0, #1
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	bf00      	nop

0800a580 <ucdr_deserialize_uint8_t>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	460d      	mov	r5, r1
 800a584:	2101      	movs	r1, #1
 800a586:	4604      	mov	r4, r0
 800a588:	f001 f89c 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a58c:	b150      	cbz	r0, 800a5a4 <ucdr_deserialize_uint8_t+0x24>
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	702b      	strb	r3, [r5, #0]
 800a594:	68a2      	ldr	r2, [r4, #8]
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	2101      	movs	r1, #1
 800a59a:	440a      	add	r2, r1
 800a59c:	440b      	add	r3, r1
 800a59e:	60a2      	str	r2, [r4, #8]
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	7561      	strb	r1, [r4, #21]
 800a5a4:	7da0      	ldrb	r0, [r4, #22]
 800a5a6:	f080 0001 	eor.w	r0, r0, #1
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}

0800a5ac <ucdr_serialize_uint16_t>:
 800a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	2102      	movs	r1, #2
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a5bc:	f001 f8d6 	bl	800b76c <ucdr_buffer_alignment>
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	7d67      	ldrb	r7, [r4, #21]
 800a5c6:	f001 f915 	bl	800b7f4 <ucdr_advance_buffer>
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f001 f86d 	bl	800b6ac <ucdr_check_buffer_available_for>
 800a5d2:	bb78      	cbnz	r0, 800a634 <ucdr_serialize_uint16_t+0x88>
 800a5d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	d926      	bls.n	800a62a <ucdr_serialize_uint16_t+0x7e>
 800a5dc:	1b5e      	subs	r6, r3, r5
 800a5de:	60a3      	str	r3, [r4, #8]
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	f1c6 0802 	rsb	r8, r6, #2
 800a5e6:	4433      	add	r3, r6
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f001 f869 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d03b      	beq.n	800a66e <ucdr_serialize_uint16_t+0xc2>
 800a5f6:	7d23      	ldrb	r3, [r4, #20]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d04a      	beq.n	800a692 <ucdr_serialize_uint16_t+0xe6>
 800a5fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a600:	702b      	strb	r3, [r5, #0]
 800a602:	2e00      	cmp	r6, #0
 800a604:	d040      	beq.n	800a688 <ucdr_serialize_uint16_t+0xdc>
 800a606:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a60a:	706b      	strb	r3, [r5, #1]
 800a60c:	6923      	ldr	r3, [r4, #16]
 800a60e:	68a2      	ldr	r2, [r4, #8]
 800a610:	7da0      	ldrb	r0, [r4, #22]
 800a612:	3302      	adds	r3, #2
 800a614:	1b9e      	subs	r6, r3, r6
 800a616:	4442      	add	r2, r8
 800a618:	2302      	movs	r3, #2
 800a61a:	f080 0001 	eor.w	r0, r0, #1
 800a61e:	60a2      	str	r2, [r4, #8]
 800a620:	6126      	str	r6, [r4, #16]
 800a622:	7563      	strb	r3, [r4, #21]
 800a624:	b002      	add	sp, #8
 800a626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62a:	2102      	movs	r1, #2
 800a62c:	4620      	mov	r0, r4
 800a62e:	f001 f849 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a632:	b190      	cbz	r0, 800a65a <ucdr_serialize_uint16_t+0xae>
 800a634:	7d23      	ldrb	r3, [r4, #20]
 800a636:	2b01      	cmp	r3, #1
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	d014      	beq.n	800a666 <ucdr_serialize_uint16_t+0xba>
 800a63c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a648:	705a      	strb	r2, [r3, #1]
 800a64a:	68a2      	ldr	r2, [r4, #8]
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	3202      	adds	r2, #2
 800a650:	3302      	adds	r3, #2
 800a652:	2102      	movs	r1, #2
 800a654:	60a2      	str	r2, [r4, #8]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	7561      	strb	r1, [r4, #21]
 800a65a:	7da0      	ldrb	r0, [r4, #22]
 800a65c:	f080 0001 	eor.w	r0, r0, #1
 800a660:	b002      	add	sp, #8
 800a662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a666:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	e7ed      	b.n	800a64a <ucdr_serialize_uint16_t+0x9e>
 800a66e:	68a2      	ldr	r2, [r4, #8]
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	7da0      	ldrb	r0, [r4, #22]
 800a674:	7567      	strb	r7, [r4, #21]
 800a676:	1b92      	subs	r2, r2, r6
 800a678:	1b9b      	subs	r3, r3, r6
 800a67a:	f080 0001 	eor.w	r0, r0, #1
 800a67e:	60a2      	str	r2, [r4, #8]
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	b002      	add	sp, #8
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e7bc      	b.n	800a60c <ucdr_serialize_uint16_t+0x60>
 800a692:	4628      	mov	r0, r5
 800a694:	f10d 0506 	add.w	r5, sp, #6
 800a698:	4629      	mov	r1, r5
 800a69a:	4632      	mov	r2, r6
 800a69c:	f00b f9cd 	bl	8015a3a <memcpy>
 800a6a0:	68a0      	ldr	r0, [r4, #8]
 800a6a2:	4642      	mov	r2, r8
 800a6a4:	19a9      	adds	r1, r5, r6
 800a6a6:	f00b f9c8 	bl	8015a3a <memcpy>
 800a6aa:	e7af      	b.n	800a60c <ucdr_serialize_uint16_t+0x60>

0800a6ac <ucdr_serialize_endian_uint16_t>:
 800a6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a6bc:	f001 f856 	bl	800b76c <ucdr_buffer_alignment>
 800a6c0:	4601      	mov	r1, r0
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a6c8:	f001 f894 	bl	800b7f4 <ucdr_advance_buffer>
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 ffec 	bl	800b6ac <ucdr_check_buffer_available_for>
 800a6d4:	bb70      	cbnz	r0, 800a734 <ucdr_serialize_endian_uint16_t+0x88>
 800a6d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a6da:	42be      	cmp	r6, r7
 800a6dc:	d925      	bls.n	800a72a <ucdr_serialize_endian_uint16_t+0x7e>
 800a6de:	6923      	ldr	r3, [r4, #16]
 800a6e0:	60a6      	str	r6, [r4, #8]
 800a6e2:	1bf6      	subs	r6, r6, r7
 800a6e4:	4433      	add	r3, r6
 800a6e6:	f1c6 0902 	rsb	r9, r6, #2
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 ffe8 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d039      	beq.n	800a76c <ucdr_serialize_endian_uint16_t+0xc0>
 800a6f8:	2d01      	cmp	r5, #1
 800a6fa:	d04a      	beq.n	800a792 <ucdr_serialize_endian_uint16_t+0xe6>
 800a6fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a700:	703b      	strb	r3, [r7, #0]
 800a702:	2e00      	cmp	r6, #0
 800a704:	d040      	beq.n	800a788 <ucdr_serialize_endian_uint16_t+0xdc>
 800a706:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a70a:	707b      	strb	r3, [r7, #1]
 800a70c:	6923      	ldr	r3, [r4, #16]
 800a70e:	68a2      	ldr	r2, [r4, #8]
 800a710:	7da0      	ldrb	r0, [r4, #22]
 800a712:	3302      	adds	r3, #2
 800a714:	444a      	add	r2, r9
 800a716:	1b9b      	subs	r3, r3, r6
 800a718:	2102      	movs	r1, #2
 800a71a:	f080 0001 	eor.w	r0, r0, #1
 800a71e:	60a2      	str	r2, [r4, #8]
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	7561      	strb	r1, [r4, #21]
 800a724:	b003      	add	sp, #12
 800a726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a72a:	2102      	movs	r1, #2
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 ffc9 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a732:	b188      	cbz	r0, 800a758 <ucdr_serialize_endian_uint16_t+0xac>
 800a734:	2d01      	cmp	r5, #1
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	d014      	beq.n	800a764 <ucdr_serialize_endian_uint16_t+0xb8>
 800a73a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	68a3      	ldr	r3, [r4, #8]
 800a742:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a746:	705a      	strb	r2, [r3, #1]
 800a748:	68a2      	ldr	r2, [r4, #8]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	3202      	adds	r2, #2
 800a74e:	3302      	adds	r3, #2
 800a750:	2102      	movs	r1, #2
 800a752:	60a2      	str	r2, [r4, #8]
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	7561      	strb	r1, [r4, #21]
 800a758:	7da0      	ldrb	r0, [r4, #22]
 800a75a:	f080 0001 	eor.w	r0, r0, #1
 800a75e:	b003      	add	sp, #12
 800a760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a764:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	e7ed      	b.n	800a748 <ucdr_serialize_endian_uint16_t+0x9c>
 800a76c:	68a2      	ldr	r2, [r4, #8]
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	7da0      	ldrb	r0, [r4, #22]
 800a772:	f884 8015 	strb.w	r8, [r4, #21]
 800a776:	1b92      	subs	r2, r2, r6
 800a778:	1b9b      	subs	r3, r3, r6
 800a77a:	f080 0001 	eor.w	r0, r0, #1
 800a77e:	60a2      	str	r2, [r4, #8]
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	b003      	add	sp, #12
 800a784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a78e:	701a      	strb	r2, [r3, #0]
 800a790:	e7bc      	b.n	800a70c <ucdr_serialize_endian_uint16_t+0x60>
 800a792:	f10d 0506 	add.w	r5, sp, #6
 800a796:	4629      	mov	r1, r5
 800a798:	4632      	mov	r2, r6
 800a79a:	4638      	mov	r0, r7
 800a79c:	f00b f94d 	bl	8015a3a <memcpy>
 800a7a0:	68a0      	ldr	r0, [r4, #8]
 800a7a2:	464a      	mov	r2, r9
 800a7a4:	19a9      	adds	r1, r5, r6
 800a7a6:	f00b f948 	bl	8015a3a <memcpy>
 800a7aa:	e7af      	b.n	800a70c <ucdr_serialize_endian_uint16_t+0x60>

0800a7ac <ucdr_deserialize_uint16_t>:
 800a7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	2102      	movs	r1, #2
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	f000 ffd9 	bl	800b76c <ucdr_buffer_alignment>
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a7c2:	f001 f817 	bl	800b7f4 <ucdr_advance_buffer>
 800a7c6:	2102      	movs	r1, #2
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 ff6f 	bl	800b6ac <ucdr_check_buffer_available_for>
 800a7ce:	bb60      	cbnz	r0, 800a82a <ucdr_deserialize_uint16_t+0x7e>
 800a7d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a7d4:	42be      	cmp	r6, r7
 800a7d6:	d923      	bls.n	800a820 <ucdr_deserialize_uint16_t+0x74>
 800a7d8:	6923      	ldr	r3, [r4, #16]
 800a7da:	60a6      	str	r6, [r4, #8]
 800a7dc:	1bf6      	subs	r6, r6, r7
 800a7de:	4433      	add	r3, r6
 800a7e0:	f1c6 0902 	rsb	r9, r6, #2
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 ff6b 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d034      	beq.n	800a85c <ucdr_deserialize_uint16_t+0xb0>
 800a7f2:	7d23      	ldrb	r3, [r4, #20]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d042      	beq.n	800a87e <ucdr_deserialize_uint16_t+0xd2>
 800a7f8:	787b      	ldrb	r3, [r7, #1]
 800a7fa:	702b      	strb	r3, [r5, #0]
 800a7fc:	2e00      	cmp	r6, #0
 800a7fe:	d03a      	beq.n	800a876 <ucdr_deserialize_uint16_t+0xca>
 800a800:	783b      	ldrb	r3, [r7, #0]
 800a802:	706b      	strb	r3, [r5, #1]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	68a2      	ldr	r2, [r4, #8]
 800a808:	7da0      	ldrb	r0, [r4, #22]
 800a80a:	2102      	movs	r1, #2
 800a80c:	3302      	adds	r3, #2
 800a80e:	444a      	add	r2, r9
 800a810:	1b9b      	subs	r3, r3, r6
 800a812:	7561      	strb	r1, [r4, #21]
 800a814:	60a2      	str	r2, [r4, #8]
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	f080 0001 	eor.w	r0, r0, #1
 800a81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a820:	2102      	movs	r1, #2
 800a822:	4620      	mov	r0, r4
 800a824:	f000 ff4e 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a828:	b180      	cbz	r0, 800a84c <ucdr_deserialize_uint16_t+0xa0>
 800a82a:	7d23      	ldrb	r3, [r4, #20]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	d011      	beq.n	800a856 <ucdr_deserialize_uint16_t+0xaa>
 800a832:	785b      	ldrb	r3, [r3, #1]
 800a834:	702b      	strb	r3, [r5, #0]
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	706b      	strb	r3, [r5, #1]
 800a83c:	68a2      	ldr	r2, [r4, #8]
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	3202      	adds	r2, #2
 800a842:	3302      	adds	r3, #2
 800a844:	2102      	movs	r1, #2
 800a846:	60a2      	str	r2, [r4, #8]
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	7561      	strb	r1, [r4, #21]
 800a84c:	7da0      	ldrb	r0, [r4, #22]
 800a84e:	f080 0001 	eor.w	r0, r0, #1
 800a852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	802b      	strh	r3, [r5, #0]
 800a85a:	e7ef      	b.n	800a83c <ucdr_deserialize_uint16_t+0x90>
 800a85c:	68a2      	ldr	r2, [r4, #8]
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	7da0      	ldrb	r0, [r4, #22]
 800a862:	f884 8015 	strb.w	r8, [r4, #21]
 800a866:	1b92      	subs	r2, r2, r6
 800a868:	1b9b      	subs	r3, r3, r6
 800a86a:	60a2      	str	r2, [r4, #8]
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	f080 0001 	eor.w	r0, r0, #1
 800a872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	706b      	strb	r3, [r5, #1]
 800a87c:	e7c2      	b.n	800a804 <ucdr_deserialize_uint16_t+0x58>
 800a87e:	4639      	mov	r1, r7
 800a880:	4632      	mov	r2, r6
 800a882:	4628      	mov	r0, r5
 800a884:	f00b f8d9 	bl	8015a3a <memcpy>
 800a888:	68a1      	ldr	r1, [r4, #8]
 800a88a:	464a      	mov	r2, r9
 800a88c:	19a8      	adds	r0, r5, r6
 800a88e:	f00b f8d4 	bl	8015a3a <memcpy>
 800a892:	e7b7      	b.n	800a804 <ucdr_deserialize_uint16_t+0x58>

0800a894 <ucdr_deserialize_endian_uint16_t>:
 800a894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a898:	460e      	mov	r6, r1
 800a89a:	2102      	movs	r1, #2
 800a89c:	4604      	mov	r4, r0
 800a89e:	4615      	mov	r5, r2
 800a8a0:	f000 ff64 	bl	800b76c <ucdr_buffer_alignment>
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a8ac:	f000 ffa2 	bl	800b7f4 <ucdr_advance_buffer>
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fefa 	bl	800b6ac <ucdr_check_buffer_available_for>
 800a8b8:	bb70      	cbnz	r0, 800a918 <ucdr_deserialize_endian_uint16_t+0x84>
 800a8ba:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a8be:	4547      	cmp	r7, r8
 800a8c0:	d925      	bls.n	800a90e <ucdr_deserialize_endian_uint16_t+0x7a>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	60a7      	str	r7, [r4, #8]
 800a8c6:	eba7 0708 	sub.w	r7, r7, r8
 800a8ca:	443b      	add	r3, r7
 800a8cc:	f1c7 0a02 	rsb	sl, r7, #2
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	4651      	mov	r1, sl
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fef5 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d034      	beq.n	800a948 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a8de:	2e01      	cmp	r6, #1
 800a8e0:	d043      	beq.n	800a96a <ucdr_deserialize_endian_uint16_t+0xd6>
 800a8e2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a8e6:	702b      	strb	r3, [r5, #0]
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	d03a      	beq.n	800a962 <ucdr_deserialize_endian_uint16_t+0xce>
 800a8ec:	f898 3000 	ldrb.w	r3, [r8]
 800a8f0:	706b      	strb	r3, [r5, #1]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	68a2      	ldr	r2, [r4, #8]
 800a8f6:	7da0      	ldrb	r0, [r4, #22]
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	3302      	adds	r3, #2
 800a8fc:	4452      	add	r2, sl
 800a8fe:	1bdb      	subs	r3, r3, r7
 800a900:	7561      	strb	r1, [r4, #21]
 800a902:	60a2      	str	r2, [r4, #8]
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	f080 0001 	eor.w	r0, r0, #1
 800a90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90e:	2102      	movs	r1, #2
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fed7 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a916:	b178      	cbz	r0, 800a938 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a918:	2e01      	cmp	r6, #1
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	d011      	beq.n	800a942 <ucdr_deserialize_endian_uint16_t+0xae>
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	702b      	strb	r3, [r5, #0]
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	706b      	strb	r3, [r5, #1]
 800a928:	68a2      	ldr	r2, [r4, #8]
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	3202      	adds	r2, #2
 800a92e:	3302      	adds	r3, #2
 800a930:	2102      	movs	r1, #2
 800a932:	60a2      	str	r2, [r4, #8]
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	7561      	strb	r1, [r4, #21]
 800a938:	7da0      	ldrb	r0, [r4, #22]
 800a93a:	f080 0001 	eor.w	r0, r0, #1
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	802b      	strh	r3, [r5, #0]
 800a946:	e7ef      	b.n	800a928 <ucdr_deserialize_endian_uint16_t+0x94>
 800a948:	68a2      	ldr	r2, [r4, #8]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	7da0      	ldrb	r0, [r4, #22]
 800a94e:	f884 9015 	strb.w	r9, [r4, #21]
 800a952:	1bd2      	subs	r2, r2, r7
 800a954:	1bdb      	subs	r3, r3, r7
 800a956:	60a2      	str	r2, [r4, #8]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	f080 0001 	eor.w	r0, r0, #1
 800a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a962:	68a3      	ldr	r3, [r4, #8]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	706b      	strb	r3, [r5, #1]
 800a968:	e7c3      	b.n	800a8f2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800a96a:	4641      	mov	r1, r8
 800a96c:	463a      	mov	r2, r7
 800a96e:	4628      	mov	r0, r5
 800a970:	f00b f863 	bl	8015a3a <memcpy>
 800a974:	68a1      	ldr	r1, [r4, #8]
 800a976:	4652      	mov	r2, sl
 800a978:	19e8      	adds	r0, r5, r7
 800a97a:	f00b f85e 	bl	8015a3a <memcpy>
 800a97e:	e7b8      	b.n	800a8f2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800a980 <ucdr_serialize_uint32_t>:
 800a980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	4604      	mov	r4, r0
 800a988:	9101      	str	r1, [sp, #4]
 800a98a:	2104      	movs	r1, #4
 800a98c:	f000 feee 	bl	800b76c <ucdr_buffer_alignment>
 800a990:	4601      	mov	r1, r0
 800a992:	4620      	mov	r0, r4
 800a994:	7d67      	ldrb	r7, [r4, #21]
 800a996:	f000 ff2d 	bl	800b7f4 <ucdr_advance_buffer>
 800a99a:	2104      	movs	r1, #4
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 fe85 	bl	800b6ac <ucdr_check_buffer_available_for>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d139      	bne.n	800aa1a <ucdr_serialize_uint32_t+0x9a>
 800a9a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a9aa:	42ab      	cmp	r3, r5
 800a9ac:	d930      	bls.n	800aa10 <ucdr_serialize_uint32_t+0x90>
 800a9ae:	1b5e      	subs	r6, r3, r5
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	f1c6 0804 	rsb	r8, r6, #4
 800a9b8:	4433      	add	r3, r6
 800a9ba:	6123      	str	r3, [r4, #16]
 800a9bc:	4641      	mov	r1, r8
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 fe80 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d04c      	beq.n	800aa62 <ucdr_serialize_uint32_t+0xe2>
 800a9c8:	7d23      	ldrb	r3, [r4, #20]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d063      	beq.n	800aa96 <ucdr_serialize_uint32_t+0x116>
 800a9ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9d2:	702b      	strb	r3, [r5, #0]
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	d051      	beq.n	800aa7c <ucdr_serialize_uint32_t+0xfc>
 800a9d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9dc:	706b      	strb	r3, [r5, #1]
 800a9de:	2e01      	cmp	r6, #1
 800a9e0:	d050      	beq.n	800aa84 <ucdr_serialize_uint32_t+0x104>
 800a9e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a9e6:	70ab      	strb	r3, [r5, #2]
 800a9e8:	2e02      	cmp	r6, #2
 800a9ea:	d04f      	beq.n	800aa8c <ucdr_serialize_uint32_t+0x10c>
 800a9ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a9f0:	70eb      	strb	r3, [r5, #3]
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	68a2      	ldr	r2, [r4, #8]
 800a9f6:	7da0      	ldrb	r0, [r4, #22]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	1b9e      	subs	r6, r3, r6
 800a9fc:	4442      	add	r2, r8
 800a9fe:	2304      	movs	r3, #4
 800aa00:	f080 0001 	eor.w	r0, r0, #1
 800aa04:	60a2      	str	r2, [r4, #8]
 800aa06:	6126      	str	r6, [r4, #16]
 800aa08:	7563      	strb	r3, [r4, #21]
 800aa0a:	b002      	add	sp, #8
 800aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa10:	2104      	movs	r1, #4
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fe56 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800aa18:	b1d0      	cbz	r0, 800aa50 <ucdr_serialize_uint32_t+0xd0>
 800aa1a:	7d23      	ldrb	r3, [r4, #20]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	d01c      	beq.n	800aa5c <ucdr_serialize_uint32_t+0xdc>
 800aa22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa2e:	705a      	strb	r2, [r3, #1]
 800aa30:	68a3      	ldr	r3, [r4, #8]
 800aa32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa36:	709a      	strb	r2, [r3, #2]
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa3e:	70da      	strb	r2, [r3, #3]
 800aa40:	68a2      	ldr	r2, [r4, #8]
 800aa42:	6923      	ldr	r3, [r4, #16]
 800aa44:	3204      	adds	r2, #4
 800aa46:	3304      	adds	r3, #4
 800aa48:	2104      	movs	r1, #4
 800aa4a:	60a2      	str	r2, [r4, #8]
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	7561      	strb	r1, [r4, #21]
 800aa50:	7da0      	ldrb	r0, [r4, #22]
 800aa52:	f080 0001 	eor.w	r0, r0, #1
 800aa56:	b002      	add	sp, #8
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	9a01      	ldr	r2, [sp, #4]
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e7ee      	b.n	800aa40 <ucdr_serialize_uint32_t+0xc0>
 800aa62:	68a2      	ldr	r2, [r4, #8]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	7da0      	ldrb	r0, [r4, #22]
 800aa68:	7567      	strb	r7, [r4, #21]
 800aa6a:	1b92      	subs	r2, r2, r6
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	f080 0001 	eor.w	r0, r0, #1
 800aa72:	60a2      	str	r2, [r4, #8]
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	b002      	add	sp, #8
 800aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7c:	68a3      	ldr	r3, [r4, #8]
 800aa7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	68a3      	ldr	r3, [r4, #8]
 800aa8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	e7ad      	b.n	800a9f2 <ucdr_serialize_uint32_t+0x72>
 800aa96:	4628      	mov	r0, r5
 800aa98:	ad01      	add	r5, sp, #4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	f00a ffcc 	bl	8015a3a <memcpy>
 800aaa2:	68a0      	ldr	r0, [r4, #8]
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	19a9      	adds	r1, r5, r6
 800aaa8:	f00a ffc7 	bl	8015a3a <memcpy>
 800aaac:	e7a1      	b.n	800a9f2 <ucdr_serialize_uint32_t+0x72>
 800aaae:	bf00      	nop

0800aab0 <ucdr_serialize_endian_uint32_t>:
 800aab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aab4:	b083      	sub	sp, #12
 800aab6:	460d      	mov	r5, r1
 800aab8:	2104      	movs	r1, #4
 800aaba:	4604      	mov	r4, r0
 800aabc:	9201      	str	r2, [sp, #4]
 800aabe:	f000 fe55 	bl	800b76c <ucdr_buffer_alignment>
 800aac2:	4601      	mov	r1, r0
 800aac4:	4620      	mov	r0, r4
 800aac6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aaca:	f000 fe93 	bl	800b7f4 <ucdr_advance_buffer>
 800aace:	2104      	movs	r1, #4
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fdeb 	bl	800b6ac <ucdr_check_buffer_available_for>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d138      	bne.n	800ab4c <ucdr_serialize_endian_uint32_t+0x9c>
 800aada:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aade:	42b7      	cmp	r7, r6
 800aae0:	d92f      	bls.n	800ab42 <ucdr_serialize_endian_uint32_t+0x92>
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	60a7      	str	r7, [r4, #8]
 800aae6:	1bbf      	subs	r7, r7, r6
 800aae8:	443b      	add	r3, r7
 800aaea:	f1c7 0904 	rsb	r9, r7, #4
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fde6 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d04a      	beq.n	800ab92 <ucdr_serialize_endian_uint32_t+0xe2>
 800aafc:	2d01      	cmp	r5, #1
 800aafe:	d063      	beq.n	800abc8 <ucdr_serialize_endian_uint32_t+0x118>
 800ab00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab04:	7033      	strb	r3, [r6, #0]
 800ab06:	2f00      	cmp	r7, #0
 800ab08:	d051      	beq.n	800abae <ucdr_serialize_endian_uint32_t+0xfe>
 800ab0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab0e:	7073      	strb	r3, [r6, #1]
 800ab10:	2f01      	cmp	r7, #1
 800ab12:	d050      	beq.n	800abb6 <ucdr_serialize_endian_uint32_t+0x106>
 800ab14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab18:	70b3      	strb	r3, [r6, #2]
 800ab1a:	2f02      	cmp	r7, #2
 800ab1c:	d04f      	beq.n	800abbe <ucdr_serialize_endian_uint32_t+0x10e>
 800ab1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ab22:	70f3      	strb	r3, [r6, #3]
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	68a2      	ldr	r2, [r4, #8]
 800ab28:	7da0      	ldrb	r0, [r4, #22]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	444a      	add	r2, r9
 800ab2e:	1bdb      	subs	r3, r3, r7
 800ab30:	2104      	movs	r1, #4
 800ab32:	f080 0001 	eor.w	r0, r0, #1
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	7561      	strb	r1, [r4, #21]
 800ab3c:	b003      	add	sp, #12
 800ab3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab42:	2104      	movs	r1, #4
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fdbd 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ab4a:	b1c8      	cbz	r0, 800ab80 <ucdr_serialize_endian_uint32_t+0xd0>
 800ab4c:	2d01      	cmp	r5, #1
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	d01c      	beq.n	800ab8c <ucdr_serialize_endian_uint32_t+0xdc>
 800ab52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	68a3      	ldr	r3, [r4, #8]
 800ab5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab5e:	705a      	strb	r2, [r3, #1]
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab66:	709a      	strb	r2, [r3, #2]
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab6e:	70da      	strb	r2, [r3, #3]
 800ab70:	68a2      	ldr	r2, [r4, #8]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	3204      	adds	r2, #4
 800ab76:	3304      	adds	r3, #4
 800ab78:	2104      	movs	r1, #4
 800ab7a:	60a2      	str	r2, [r4, #8]
 800ab7c:	6123      	str	r3, [r4, #16]
 800ab7e:	7561      	strb	r1, [r4, #21]
 800ab80:	7da0      	ldrb	r0, [r4, #22]
 800ab82:	f080 0001 	eor.w	r0, r0, #1
 800ab86:	b003      	add	sp, #12
 800ab88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab8c:	9a01      	ldr	r2, [sp, #4]
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	e7ee      	b.n	800ab70 <ucdr_serialize_endian_uint32_t+0xc0>
 800ab92:	68a2      	ldr	r2, [r4, #8]
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	7da0      	ldrb	r0, [r4, #22]
 800ab98:	f884 8015 	strb.w	r8, [r4, #21]
 800ab9c:	1bd2      	subs	r2, r2, r7
 800ab9e:	1bdb      	subs	r3, r3, r7
 800aba0:	f080 0001 	eor.w	r0, r0, #1
 800aba4:	60a2      	str	r2, [r4, #8]
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	b003      	add	sp, #12
 800abaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abbc:	701a      	strb	r2, [r3, #0]
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e7ad      	b.n	800ab24 <ucdr_serialize_endian_uint32_t+0x74>
 800abc8:	ad01      	add	r5, sp, #4
 800abca:	4629      	mov	r1, r5
 800abcc:	463a      	mov	r2, r7
 800abce:	4630      	mov	r0, r6
 800abd0:	f00a ff33 	bl	8015a3a <memcpy>
 800abd4:	68a0      	ldr	r0, [r4, #8]
 800abd6:	464a      	mov	r2, r9
 800abd8:	19e9      	adds	r1, r5, r7
 800abda:	f00a ff2e 	bl	8015a3a <memcpy>
 800abde:	e7a1      	b.n	800ab24 <ucdr_serialize_endian_uint32_t+0x74>

0800abe0 <ucdr_deserialize_uint32_t>:
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe4:	460d      	mov	r5, r1
 800abe6:	2104      	movs	r1, #4
 800abe8:	4604      	mov	r4, r0
 800abea:	f000 fdbf 	bl	800b76c <ucdr_buffer_alignment>
 800abee:	4601      	mov	r1, r0
 800abf0:	4620      	mov	r0, r4
 800abf2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800abf6:	f000 fdfd 	bl	800b7f4 <ucdr_advance_buffer>
 800abfa:	2104      	movs	r1, #4
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fd55 	bl	800b6ac <ucdr_check_buffer_available_for>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d138      	bne.n	800ac78 <ucdr_deserialize_uint32_t+0x98>
 800ac06:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ac0a:	42b7      	cmp	r7, r6
 800ac0c:	d92f      	bls.n	800ac6e <ucdr_deserialize_uint32_t+0x8e>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	60a7      	str	r7, [r4, #8]
 800ac12:	1bbf      	subs	r7, r7, r6
 800ac14:	443b      	add	r3, r7
 800ac16:	f1c7 0904 	rsb	r9, r7, #4
 800ac1a:	6123      	str	r3, [r4, #16]
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 fd50 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d046      	beq.n	800acb6 <ucdr_deserialize_uint32_t+0xd6>
 800ac28:	7d23      	ldrb	r3, [r4, #20]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d05c      	beq.n	800ace8 <ucdr_deserialize_uint32_t+0x108>
 800ac2e:	78f3      	ldrb	r3, [r6, #3]
 800ac30:	702b      	strb	r3, [r5, #0]
 800ac32:	2f00      	cmp	r7, #0
 800ac34:	d04c      	beq.n	800acd0 <ucdr_deserialize_uint32_t+0xf0>
 800ac36:	78b3      	ldrb	r3, [r6, #2]
 800ac38:	706b      	strb	r3, [r5, #1]
 800ac3a:	2f01      	cmp	r7, #1
 800ac3c:	f105 0302 	add.w	r3, r5, #2
 800ac40:	d04a      	beq.n	800acd8 <ucdr_deserialize_uint32_t+0xf8>
 800ac42:	7873      	ldrb	r3, [r6, #1]
 800ac44:	70ab      	strb	r3, [r5, #2]
 800ac46:	2f02      	cmp	r7, #2
 800ac48:	f105 0303 	add.w	r3, r5, #3
 800ac4c:	d048      	beq.n	800ace0 <ucdr_deserialize_uint32_t+0x100>
 800ac4e:	7833      	ldrb	r3, [r6, #0]
 800ac50:	70eb      	strb	r3, [r5, #3]
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	68a2      	ldr	r2, [r4, #8]
 800ac56:	7da0      	ldrb	r0, [r4, #22]
 800ac58:	2104      	movs	r1, #4
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	444a      	add	r2, r9
 800ac5e:	1bdb      	subs	r3, r3, r7
 800ac60:	7561      	strb	r1, [r4, #21]
 800ac62:	60a2      	str	r2, [r4, #8]
 800ac64:	6123      	str	r3, [r4, #16]
 800ac66:	f080 0001 	eor.w	r0, r0, #1
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	2104      	movs	r1, #4
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 fd27 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ac76:	b1b0      	cbz	r0, 800aca6 <ucdr_deserialize_uint32_t+0xc6>
 800ac78:	7d23      	ldrb	r3, [r4, #20]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	68a3      	ldr	r3, [r4, #8]
 800ac7e:	d017      	beq.n	800acb0 <ucdr_deserialize_uint32_t+0xd0>
 800ac80:	78db      	ldrb	r3, [r3, #3]
 800ac82:	702b      	strb	r3, [r5, #0]
 800ac84:	68a3      	ldr	r3, [r4, #8]
 800ac86:	789b      	ldrb	r3, [r3, #2]
 800ac88:	706b      	strb	r3, [r5, #1]
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	70ab      	strb	r3, [r5, #2]
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	70eb      	strb	r3, [r5, #3]
 800ac96:	68a2      	ldr	r2, [r4, #8]
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	3204      	adds	r2, #4
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	2104      	movs	r1, #4
 800aca0:	60a2      	str	r2, [r4, #8]
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	7561      	strb	r1, [r4, #21]
 800aca6:	7da0      	ldrb	r0, [r4, #22]
 800aca8:	f080 0001 	eor.w	r0, r0, #1
 800acac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	e7ef      	b.n	800ac96 <ucdr_deserialize_uint32_t+0xb6>
 800acb6:	68a2      	ldr	r2, [r4, #8]
 800acb8:	6923      	ldr	r3, [r4, #16]
 800acba:	7da0      	ldrb	r0, [r4, #22]
 800acbc:	f884 8015 	strb.w	r8, [r4, #21]
 800acc0:	1bd2      	subs	r2, r2, r7
 800acc2:	1bdb      	subs	r3, r3, r7
 800acc4:	60a2      	str	r2, [r4, #8]
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	f080 0001 	eor.w	r0, r0, #1
 800accc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	789b      	ldrb	r3, [r3, #2]
 800acd4:	706b      	strb	r3, [r5, #1]
 800acd6:	1cab      	adds	r3, r5, #2
 800acd8:	68a2      	ldr	r2, [r4, #8]
 800acda:	7852      	ldrb	r2, [r2, #1]
 800acdc:	f803 2b01 	strb.w	r2, [r3], #1
 800ace0:	68a2      	ldr	r2, [r4, #8]
 800ace2:	7812      	ldrb	r2, [r2, #0]
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e7b4      	b.n	800ac52 <ucdr_deserialize_uint32_t+0x72>
 800ace8:	4631      	mov	r1, r6
 800acea:	463a      	mov	r2, r7
 800acec:	4628      	mov	r0, r5
 800acee:	f00a fea4 	bl	8015a3a <memcpy>
 800acf2:	68a1      	ldr	r1, [r4, #8]
 800acf4:	464a      	mov	r2, r9
 800acf6:	19e8      	adds	r0, r5, r7
 800acf8:	f00a fe9f 	bl	8015a3a <memcpy>
 800acfc:	e7a9      	b.n	800ac52 <ucdr_deserialize_uint32_t+0x72>
 800acfe:	bf00      	nop

0800ad00 <ucdr_deserialize_endian_uint32_t>:
 800ad00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad04:	460e      	mov	r6, r1
 800ad06:	2104      	movs	r1, #4
 800ad08:	4604      	mov	r4, r0
 800ad0a:	4615      	mov	r5, r2
 800ad0c:	f000 fd2e 	bl	800b76c <ucdr_buffer_alignment>
 800ad10:	4601      	mov	r1, r0
 800ad12:	4620      	mov	r0, r4
 800ad14:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ad18:	f000 fd6c 	bl	800b7f4 <ucdr_advance_buffer>
 800ad1c:	2104      	movs	r1, #4
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fcc4 	bl	800b6ac <ucdr_check_buffer_available_for>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d13c      	bne.n	800ada2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800ad28:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ad2c:	42bb      	cmp	r3, r7
 800ad2e:	d933      	bls.n	800ad98 <ucdr_deserialize_endian_uint32_t+0x98>
 800ad30:	eba3 0807 	sub.w	r8, r3, r7
 800ad34:	60a3      	str	r3, [r4, #8]
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	f1c8 0a04 	rsb	sl, r8, #4
 800ad3c:	4443      	add	r3, r8
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	4651      	mov	r1, sl
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fcbe 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d048      	beq.n	800adde <ucdr_deserialize_endian_uint32_t+0xde>
 800ad4c:	2e01      	cmp	r6, #1
 800ad4e:	d061      	beq.n	800ae14 <ucdr_deserialize_endian_uint32_t+0x114>
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	702b      	strb	r3, [r5, #0]
 800ad54:	f1b8 0f00 	cmp.w	r8, #0
 800ad58:	d050      	beq.n	800adfc <ucdr_deserialize_endian_uint32_t+0xfc>
 800ad5a:	78bb      	ldrb	r3, [r7, #2]
 800ad5c:	706b      	strb	r3, [r5, #1]
 800ad5e:	f1b8 0f01 	cmp.w	r8, #1
 800ad62:	f105 0302 	add.w	r3, r5, #2
 800ad66:	d04d      	beq.n	800ae04 <ucdr_deserialize_endian_uint32_t+0x104>
 800ad68:	787b      	ldrb	r3, [r7, #1]
 800ad6a:	70ab      	strb	r3, [r5, #2]
 800ad6c:	f1b8 0f02 	cmp.w	r8, #2
 800ad70:	f105 0303 	add.w	r3, r5, #3
 800ad74:	d04a      	beq.n	800ae0c <ucdr_deserialize_endian_uint32_t+0x10c>
 800ad76:	783b      	ldrb	r3, [r7, #0]
 800ad78:	70eb      	strb	r3, [r5, #3]
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	68a2      	ldr	r2, [r4, #8]
 800ad7e:	7da0      	ldrb	r0, [r4, #22]
 800ad80:	2104      	movs	r1, #4
 800ad82:	3304      	adds	r3, #4
 800ad84:	4452      	add	r2, sl
 800ad86:	eba3 0308 	sub.w	r3, r3, r8
 800ad8a:	7561      	strb	r1, [r4, #21]
 800ad8c:	60a2      	str	r2, [r4, #8]
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	f080 0001 	eor.w	r0, r0, #1
 800ad94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fc92 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ada0:	b1a8      	cbz	r0, 800adce <ucdr_deserialize_endian_uint32_t+0xce>
 800ada2:	2e01      	cmp	r6, #1
 800ada4:	68a3      	ldr	r3, [r4, #8]
 800ada6:	d017      	beq.n	800add8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ada8:	78db      	ldrb	r3, [r3, #3]
 800adaa:	702b      	strb	r3, [r5, #0]
 800adac:	68a3      	ldr	r3, [r4, #8]
 800adae:	789b      	ldrb	r3, [r3, #2]
 800adb0:	706b      	strb	r3, [r5, #1]
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	785b      	ldrb	r3, [r3, #1]
 800adb6:	70ab      	strb	r3, [r5, #2]
 800adb8:	68a3      	ldr	r3, [r4, #8]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	70eb      	strb	r3, [r5, #3]
 800adbe:	68a2      	ldr	r2, [r4, #8]
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	3204      	adds	r2, #4
 800adc4:	3304      	adds	r3, #4
 800adc6:	2104      	movs	r1, #4
 800adc8:	60a2      	str	r2, [r4, #8]
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	7561      	strb	r1, [r4, #21]
 800adce:	7da0      	ldrb	r0, [r4, #22]
 800add0:	f080 0001 	eor.w	r0, r0, #1
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	e7ef      	b.n	800adbe <ucdr_deserialize_endian_uint32_t+0xbe>
 800adde:	68a2      	ldr	r2, [r4, #8]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	7da0      	ldrb	r0, [r4, #22]
 800ade4:	f884 9015 	strb.w	r9, [r4, #21]
 800ade8:	eba2 0208 	sub.w	r2, r2, r8
 800adec:	eba3 0308 	sub.w	r3, r3, r8
 800adf0:	60a2      	str	r2, [r4, #8]
 800adf2:	6123      	str	r3, [r4, #16]
 800adf4:	f080 0001 	eor.w	r0, r0, #1
 800adf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfc:	68a3      	ldr	r3, [r4, #8]
 800adfe:	789b      	ldrb	r3, [r3, #2]
 800ae00:	706b      	strb	r3, [r5, #1]
 800ae02:	1cab      	adds	r3, r5, #2
 800ae04:	68a2      	ldr	r2, [r4, #8]
 800ae06:	7852      	ldrb	r2, [r2, #1]
 800ae08:	f803 2b01 	strb.w	r2, [r3], #1
 800ae0c:	68a2      	ldr	r2, [r4, #8]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	e7b2      	b.n	800ad7a <ucdr_deserialize_endian_uint32_t+0x7a>
 800ae14:	4639      	mov	r1, r7
 800ae16:	4642      	mov	r2, r8
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f00a fe0e 	bl	8015a3a <memcpy>
 800ae1e:	68a1      	ldr	r1, [r4, #8]
 800ae20:	4652      	mov	r2, sl
 800ae22:	eb05 0008 	add.w	r0, r5, r8
 800ae26:	f00a fe08 	bl	8015a3a <memcpy>
 800ae2a:	e7a6      	b.n	800ad7a <ucdr_deserialize_endian_uint32_t+0x7a>

0800ae2c <ucdr_serialize_uint64_t>:
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	2108      	movs	r1, #8
 800ae32:	b082      	sub	sp, #8
 800ae34:	4604      	mov	r4, r0
 800ae36:	e9cd 2300 	strd	r2, r3, [sp]
 800ae3a:	f000 fc97 	bl	800b76c <ucdr_buffer_alignment>
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4620      	mov	r0, r4
 800ae42:	7d67      	ldrb	r7, [r4, #21]
 800ae44:	f000 fcd6 	bl	800b7f4 <ucdr_advance_buffer>
 800ae48:	2108      	movs	r1, #8
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fc2e 	bl	800b6ac <ucdr_check_buffer_available_for>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d14e      	bne.n	800aef2 <ucdr_serialize_uint64_t+0xc6>
 800ae54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	d945      	bls.n	800aee8 <ucdr_serialize_uint64_t+0xbc>
 800ae5c:	1b5e      	subs	r6, r3, r5
 800ae5e:	60a3      	str	r3, [r4, #8]
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	f1c6 0808 	rsb	r8, r6, #8
 800ae66:	4433      	add	r3, r6
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fc29 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d074      	beq.n	800af60 <ucdr_serialize_uint64_t+0x134>
 800ae76:	7d23      	ldrb	r3, [r4, #20]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	f000 809b 	beq.w	800afb4 <ucdr_serialize_uint64_t+0x188>
 800ae7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae82:	702b      	strb	r3, [r5, #0]
 800ae84:	2e00      	cmp	r6, #0
 800ae86:	d078      	beq.n	800af7a <ucdr_serialize_uint64_t+0x14e>
 800ae88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae8c:	706b      	strb	r3, [r5, #1]
 800ae8e:	2e01      	cmp	r6, #1
 800ae90:	d077      	beq.n	800af82 <ucdr_serialize_uint64_t+0x156>
 800ae92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae96:	70ab      	strb	r3, [r5, #2]
 800ae98:	2e02      	cmp	r6, #2
 800ae9a:	d076      	beq.n	800af8a <ucdr_serialize_uint64_t+0x15e>
 800ae9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aea0:	70eb      	strb	r3, [r5, #3]
 800aea2:	2e03      	cmp	r6, #3
 800aea4:	d075      	beq.n	800af92 <ucdr_serialize_uint64_t+0x166>
 800aea6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aeaa:	712b      	strb	r3, [r5, #4]
 800aeac:	2e04      	cmp	r6, #4
 800aeae:	d074      	beq.n	800af9a <ucdr_serialize_uint64_t+0x16e>
 800aeb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800aeb4:	716b      	strb	r3, [r5, #5]
 800aeb6:	2e05      	cmp	r6, #5
 800aeb8:	d073      	beq.n	800afa2 <ucdr_serialize_uint64_t+0x176>
 800aeba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800aebe:	71ab      	strb	r3, [r5, #6]
 800aec0:	2e06      	cmp	r6, #6
 800aec2:	d072      	beq.n	800afaa <ucdr_serialize_uint64_t+0x17e>
 800aec4:	f89d 3000 	ldrb.w	r3, [sp]
 800aec8:	71eb      	strb	r3, [r5, #7]
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	68a2      	ldr	r2, [r4, #8]
 800aece:	7da0      	ldrb	r0, [r4, #22]
 800aed0:	3308      	adds	r3, #8
 800aed2:	1b9e      	subs	r6, r3, r6
 800aed4:	4442      	add	r2, r8
 800aed6:	2308      	movs	r3, #8
 800aed8:	f080 0001 	eor.w	r0, r0, #1
 800aedc:	60a2      	str	r2, [r4, #8]
 800aede:	6126      	str	r6, [r4, #16]
 800aee0:	7563      	strb	r3, [r4, #21]
 800aee2:	b002      	add	sp, #8
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	2108      	movs	r1, #8
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 fbea 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800aef0:	b350      	cbz	r0, 800af48 <ucdr_serialize_uint64_t+0x11c>
 800aef2:	7d23      	ldrb	r3, [r4, #20]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d02d      	beq.n	800af54 <ucdr_serialize_uint64_t+0x128>
 800aef8:	68a3      	ldr	r3, [r4, #8]
 800aefa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af06:	705a      	strb	r2, [r3, #1]
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af0e:	709a      	strb	r2, [r3, #2]
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af16:	70da      	strb	r2, [r3, #3]
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800af1e:	711a      	strb	r2, [r3, #4]
 800af20:	68a3      	ldr	r3, [r4, #8]
 800af22:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800af26:	715a      	strb	r2, [r3, #5]
 800af28:	68a3      	ldr	r3, [r4, #8]
 800af2a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800af2e:	719a      	strb	r2, [r3, #6]
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	f89d 2000 	ldrb.w	r2, [sp]
 800af36:	71da      	strb	r2, [r3, #7]
 800af38:	68a2      	ldr	r2, [r4, #8]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	3208      	adds	r2, #8
 800af3e:	3308      	adds	r3, #8
 800af40:	2108      	movs	r1, #8
 800af42:	60a2      	str	r2, [r4, #8]
 800af44:	6123      	str	r3, [r4, #16]
 800af46:	7561      	strb	r1, [r4, #21]
 800af48:	7da0      	ldrb	r0, [r4, #22]
 800af4a:	f080 0001 	eor.w	r0, r0, #1
 800af4e:	b002      	add	sp, #8
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af54:	466b      	mov	r3, sp
 800af56:	cb03      	ldmia	r3!, {r0, r1}
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	6018      	str	r0, [r3, #0]
 800af5c:	6059      	str	r1, [r3, #4]
 800af5e:	e7eb      	b.n	800af38 <ucdr_serialize_uint64_t+0x10c>
 800af60:	68a2      	ldr	r2, [r4, #8]
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	7da0      	ldrb	r0, [r4, #22]
 800af66:	7567      	strb	r7, [r4, #21]
 800af68:	1b92      	subs	r2, r2, r6
 800af6a:	1b9b      	subs	r3, r3, r6
 800af6c:	f080 0001 	eor.w	r0, r0, #1
 800af70:	60a2      	str	r2, [r4, #8]
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	b002      	add	sp, #8
 800af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	68a3      	ldr	r3, [r4, #8]
 800af84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	68a3      	ldr	r3, [r4, #8]
 800af8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	68a3      	ldr	r3, [r4, #8]
 800af94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	f89d 2000 	ldrb.w	r2, [sp]
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e78a      	b.n	800aeca <ucdr_serialize_uint64_t+0x9e>
 800afb4:	4628      	mov	r0, r5
 800afb6:	466d      	mov	r5, sp
 800afb8:	4629      	mov	r1, r5
 800afba:	4632      	mov	r2, r6
 800afbc:	f00a fd3d 	bl	8015a3a <memcpy>
 800afc0:	68a0      	ldr	r0, [r4, #8]
 800afc2:	4642      	mov	r2, r8
 800afc4:	19a9      	adds	r1, r5, r6
 800afc6:	f00a fd38 	bl	8015a3a <memcpy>
 800afca:	e77e      	b.n	800aeca <ucdr_serialize_uint64_t+0x9e>

0800afcc <ucdr_serialize_int8_t>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	460d      	mov	r5, r1
 800afd0:	2101      	movs	r1, #1
 800afd2:	4604      	mov	r4, r0
 800afd4:	f000 fb76 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800afd8:	b148      	cbz	r0, 800afee <ucdr_serialize_int8_t+0x22>
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	701d      	strb	r5, [r3, #0]
 800afde:	68a2      	ldr	r2, [r4, #8]
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	2101      	movs	r1, #1
 800afe4:	440a      	add	r2, r1
 800afe6:	440b      	add	r3, r1
 800afe8:	60a2      	str	r2, [r4, #8]
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	7561      	strb	r1, [r4, #21]
 800afee:	7da0      	ldrb	r0, [r4, #22]
 800aff0:	f080 0001 	eor.w	r0, r0, #1
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop

0800aff8 <ucdr_deserialize_int8_t>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	460d      	mov	r5, r1
 800affc:	2101      	movs	r1, #1
 800affe:	4604      	mov	r4, r0
 800b000:	f000 fb60 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b004:	b150      	cbz	r0, 800b01c <ucdr_deserialize_int8_t+0x24>
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	702b      	strb	r3, [r5, #0]
 800b00c:	68a2      	ldr	r2, [r4, #8]
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	2101      	movs	r1, #1
 800b012:	440a      	add	r2, r1
 800b014:	440b      	add	r3, r1
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	7561      	strb	r1, [r4, #21]
 800b01c:	7da0      	ldrb	r0, [r4, #22]
 800b01e:	f080 0001 	eor.w	r0, r0, #1
 800b022:	bd38      	pop	{r3, r4, r5, pc}

0800b024 <ucdr_serialize_int16_t>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	460b      	mov	r3, r1
 800b02c:	2102      	movs	r1, #2
 800b02e:	4604      	mov	r4, r0
 800b030:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b034:	f000 fb9a 	bl	800b76c <ucdr_buffer_alignment>
 800b038:	4601      	mov	r1, r0
 800b03a:	4620      	mov	r0, r4
 800b03c:	7d67      	ldrb	r7, [r4, #21]
 800b03e:	f000 fbd9 	bl	800b7f4 <ucdr_advance_buffer>
 800b042:	2102      	movs	r1, #2
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fb31 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b04a:	bb78      	cbnz	r0, 800b0ac <ucdr_serialize_int16_t+0x88>
 800b04c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b050:	42ab      	cmp	r3, r5
 800b052:	d926      	bls.n	800b0a2 <ucdr_serialize_int16_t+0x7e>
 800b054:	1b5e      	subs	r6, r3, r5
 800b056:	60a3      	str	r3, [r4, #8]
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	f1c6 0802 	rsb	r8, r6, #2
 800b05e:	4433      	add	r3, r6
 800b060:	6123      	str	r3, [r4, #16]
 800b062:	4641      	mov	r1, r8
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fb2d 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d03b      	beq.n	800b0e6 <ucdr_serialize_int16_t+0xc2>
 800b06e:	7d23      	ldrb	r3, [r4, #20]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d04a      	beq.n	800b10a <ucdr_serialize_int16_t+0xe6>
 800b074:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b078:	702b      	strb	r3, [r5, #0]
 800b07a:	2e00      	cmp	r6, #0
 800b07c:	d040      	beq.n	800b100 <ucdr_serialize_int16_t+0xdc>
 800b07e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b082:	706b      	strb	r3, [r5, #1]
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	68a2      	ldr	r2, [r4, #8]
 800b088:	7da0      	ldrb	r0, [r4, #22]
 800b08a:	3302      	adds	r3, #2
 800b08c:	1b9e      	subs	r6, r3, r6
 800b08e:	4442      	add	r2, r8
 800b090:	2302      	movs	r3, #2
 800b092:	f080 0001 	eor.w	r0, r0, #1
 800b096:	60a2      	str	r2, [r4, #8]
 800b098:	6126      	str	r6, [r4, #16]
 800b09a:	7563      	strb	r3, [r4, #21]
 800b09c:	b002      	add	sp, #8
 800b09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a2:	2102      	movs	r1, #2
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fb0d 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b0aa:	b190      	cbz	r0, 800b0d2 <ucdr_serialize_int16_t+0xae>
 800b0ac:	7d23      	ldrb	r3, [r4, #20]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	68a3      	ldr	r3, [r4, #8]
 800b0b2:	d014      	beq.n	800b0de <ucdr_serialize_int16_t+0xba>
 800b0b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0c0:	705a      	strb	r2, [r3, #1]
 800b0c2:	68a2      	ldr	r2, [r4, #8]
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	3202      	adds	r2, #2
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	2102      	movs	r1, #2
 800b0cc:	60a2      	str	r2, [r4, #8]
 800b0ce:	6123      	str	r3, [r4, #16]
 800b0d0:	7561      	strb	r1, [r4, #21]
 800b0d2:	7da0      	ldrb	r0, [r4, #22]
 800b0d4:	f080 0001 	eor.w	r0, r0, #1
 800b0d8:	b002      	add	sp, #8
 800b0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	e7ed      	b.n	800b0c2 <ucdr_serialize_int16_t+0x9e>
 800b0e6:	68a2      	ldr	r2, [r4, #8]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	7da0      	ldrb	r0, [r4, #22]
 800b0ec:	7567      	strb	r7, [r4, #21]
 800b0ee:	1b92      	subs	r2, r2, r6
 800b0f0:	1b9b      	subs	r3, r3, r6
 800b0f2:	f080 0001 	eor.w	r0, r0, #1
 800b0f6:	60a2      	str	r2, [r4, #8]
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	b002      	add	sp, #8
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b100:	68a3      	ldr	r3, [r4, #8]
 800b102:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	e7bc      	b.n	800b084 <ucdr_serialize_int16_t+0x60>
 800b10a:	4628      	mov	r0, r5
 800b10c:	f10d 0506 	add.w	r5, sp, #6
 800b110:	4629      	mov	r1, r5
 800b112:	4632      	mov	r2, r6
 800b114:	f00a fc91 	bl	8015a3a <memcpy>
 800b118:	68a0      	ldr	r0, [r4, #8]
 800b11a:	4642      	mov	r2, r8
 800b11c:	19a9      	adds	r1, r5, r6
 800b11e:	f00a fc8c 	bl	8015a3a <memcpy>
 800b122:	e7af      	b.n	800b084 <ucdr_serialize_int16_t+0x60>

0800b124 <ucdr_deserialize_int16_t>:
 800b124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	2102      	movs	r1, #2
 800b12c:	4604      	mov	r4, r0
 800b12e:	f000 fb1d 	bl	800b76c <ucdr_buffer_alignment>
 800b132:	4601      	mov	r1, r0
 800b134:	4620      	mov	r0, r4
 800b136:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b13a:	f000 fb5b 	bl	800b7f4 <ucdr_advance_buffer>
 800b13e:	2102      	movs	r1, #2
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fab3 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b146:	bb60      	cbnz	r0, 800b1a2 <ucdr_deserialize_int16_t+0x7e>
 800b148:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b14c:	42be      	cmp	r6, r7
 800b14e:	d923      	bls.n	800b198 <ucdr_deserialize_int16_t+0x74>
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	60a6      	str	r6, [r4, #8]
 800b154:	1bf6      	subs	r6, r6, r7
 800b156:	4433      	add	r3, r6
 800b158:	f1c6 0902 	rsb	r9, r6, #2
 800b15c:	6123      	str	r3, [r4, #16]
 800b15e:	4649      	mov	r1, r9
 800b160:	4620      	mov	r0, r4
 800b162:	f000 faaf 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b166:	2800      	cmp	r0, #0
 800b168:	d034      	beq.n	800b1d4 <ucdr_deserialize_int16_t+0xb0>
 800b16a:	7d23      	ldrb	r3, [r4, #20]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d042      	beq.n	800b1f6 <ucdr_deserialize_int16_t+0xd2>
 800b170:	787b      	ldrb	r3, [r7, #1]
 800b172:	702b      	strb	r3, [r5, #0]
 800b174:	2e00      	cmp	r6, #0
 800b176:	d03a      	beq.n	800b1ee <ucdr_deserialize_int16_t+0xca>
 800b178:	783b      	ldrb	r3, [r7, #0]
 800b17a:	706b      	strb	r3, [r5, #1]
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	68a2      	ldr	r2, [r4, #8]
 800b180:	7da0      	ldrb	r0, [r4, #22]
 800b182:	2102      	movs	r1, #2
 800b184:	3302      	adds	r3, #2
 800b186:	444a      	add	r2, r9
 800b188:	1b9b      	subs	r3, r3, r6
 800b18a:	7561      	strb	r1, [r4, #21]
 800b18c:	60a2      	str	r2, [r4, #8]
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	f080 0001 	eor.w	r0, r0, #1
 800b194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b198:	2102      	movs	r1, #2
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fa92 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b1a0:	b180      	cbz	r0, 800b1c4 <ucdr_deserialize_int16_t+0xa0>
 800b1a2:	7d23      	ldrb	r3, [r4, #20]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	d011      	beq.n	800b1ce <ucdr_deserialize_int16_t+0xaa>
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	702b      	strb	r3, [r5, #0]
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	706b      	strb	r3, [r5, #1]
 800b1b4:	68a2      	ldr	r2, [r4, #8]
 800b1b6:	6923      	ldr	r3, [r4, #16]
 800b1b8:	3202      	adds	r2, #2
 800b1ba:	3302      	adds	r3, #2
 800b1bc:	2102      	movs	r1, #2
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	7561      	strb	r1, [r4, #21]
 800b1c4:	7da0      	ldrb	r0, [r4, #22]
 800b1c6:	f080 0001 	eor.w	r0, r0, #1
 800b1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	802b      	strh	r3, [r5, #0]
 800b1d2:	e7ef      	b.n	800b1b4 <ucdr_deserialize_int16_t+0x90>
 800b1d4:	68a2      	ldr	r2, [r4, #8]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	7da0      	ldrb	r0, [r4, #22]
 800b1da:	f884 8015 	strb.w	r8, [r4, #21]
 800b1de:	1b92      	subs	r2, r2, r6
 800b1e0:	1b9b      	subs	r3, r3, r6
 800b1e2:	60a2      	str	r2, [r4, #8]
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	f080 0001 	eor.w	r0, r0, #1
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	706b      	strb	r3, [r5, #1]
 800b1f4:	e7c2      	b.n	800b17c <ucdr_deserialize_int16_t+0x58>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f00a fc1d 	bl	8015a3a <memcpy>
 800b200:	68a1      	ldr	r1, [r4, #8]
 800b202:	464a      	mov	r2, r9
 800b204:	19a8      	adds	r0, r5, r6
 800b206:	f00a fc18 	bl	8015a3a <memcpy>
 800b20a:	e7b7      	b.n	800b17c <ucdr_deserialize_int16_t+0x58>

0800b20c <ucdr_serialize_int32_t>:
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	4604      	mov	r4, r0
 800b214:	9101      	str	r1, [sp, #4]
 800b216:	2104      	movs	r1, #4
 800b218:	f000 faa8 	bl	800b76c <ucdr_buffer_alignment>
 800b21c:	4601      	mov	r1, r0
 800b21e:	4620      	mov	r0, r4
 800b220:	7d67      	ldrb	r7, [r4, #21]
 800b222:	f000 fae7 	bl	800b7f4 <ucdr_advance_buffer>
 800b226:	2104      	movs	r1, #4
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fa3f 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d139      	bne.n	800b2a6 <ucdr_serialize_int32_t+0x9a>
 800b232:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b236:	42ab      	cmp	r3, r5
 800b238:	d930      	bls.n	800b29c <ucdr_serialize_int32_t+0x90>
 800b23a:	1b5e      	subs	r6, r3, r5
 800b23c:	60a3      	str	r3, [r4, #8]
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	f1c6 0804 	rsb	r8, r6, #4
 800b244:	4433      	add	r3, r6
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	4641      	mov	r1, r8
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fa3a 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b250:	2800      	cmp	r0, #0
 800b252:	d04c      	beq.n	800b2ee <ucdr_serialize_int32_t+0xe2>
 800b254:	7d23      	ldrb	r3, [r4, #20]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d063      	beq.n	800b322 <ucdr_serialize_int32_t+0x116>
 800b25a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b25e:	702b      	strb	r3, [r5, #0]
 800b260:	2e00      	cmp	r6, #0
 800b262:	d051      	beq.n	800b308 <ucdr_serialize_int32_t+0xfc>
 800b264:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b268:	706b      	strb	r3, [r5, #1]
 800b26a:	2e01      	cmp	r6, #1
 800b26c:	d050      	beq.n	800b310 <ucdr_serialize_int32_t+0x104>
 800b26e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b272:	70ab      	strb	r3, [r5, #2]
 800b274:	2e02      	cmp	r6, #2
 800b276:	d04f      	beq.n	800b318 <ucdr_serialize_int32_t+0x10c>
 800b278:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b27c:	70eb      	strb	r3, [r5, #3]
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	68a2      	ldr	r2, [r4, #8]
 800b282:	7da0      	ldrb	r0, [r4, #22]
 800b284:	3304      	adds	r3, #4
 800b286:	1b9e      	subs	r6, r3, r6
 800b288:	4442      	add	r2, r8
 800b28a:	2304      	movs	r3, #4
 800b28c:	f080 0001 	eor.w	r0, r0, #1
 800b290:	60a2      	str	r2, [r4, #8]
 800b292:	6126      	str	r6, [r4, #16]
 800b294:	7563      	strb	r3, [r4, #21]
 800b296:	b002      	add	sp, #8
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	2104      	movs	r1, #4
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 fa10 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b2a4:	b1d0      	cbz	r0, 800b2dc <ucdr_serialize_int32_t+0xd0>
 800b2a6:	7d23      	ldrb	r3, [r4, #20]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	d01c      	beq.n	800b2e8 <ucdr_serialize_int32_t+0xdc>
 800b2ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	68a3      	ldr	r3, [r4, #8]
 800b2b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2ba:	705a      	strb	r2, [r3, #1]
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2c2:	709a      	strb	r2, [r3, #2]
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2ca:	70da      	strb	r2, [r3, #3]
 800b2cc:	68a2      	ldr	r2, [r4, #8]
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	3204      	adds	r2, #4
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	60a2      	str	r2, [r4, #8]
 800b2d8:	6123      	str	r3, [r4, #16]
 800b2da:	7561      	strb	r1, [r4, #21]
 800b2dc:	7da0      	ldrb	r0, [r4, #22]
 800b2de:	f080 0001 	eor.w	r0, r0, #1
 800b2e2:	b002      	add	sp, #8
 800b2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e8:	9a01      	ldr	r2, [sp, #4]
 800b2ea:	601a      	str	r2, [r3, #0]
 800b2ec:	e7ee      	b.n	800b2cc <ucdr_serialize_int32_t+0xc0>
 800b2ee:	68a2      	ldr	r2, [r4, #8]
 800b2f0:	6923      	ldr	r3, [r4, #16]
 800b2f2:	7da0      	ldrb	r0, [r4, #22]
 800b2f4:	7567      	strb	r7, [r4, #21]
 800b2f6:	1b92      	subs	r2, r2, r6
 800b2f8:	1b9b      	subs	r3, r3, r6
 800b2fa:	f080 0001 	eor.w	r0, r0, #1
 800b2fe:	60a2      	str	r2, [r4, #8]
 800b300:	6123      	str	r3, [r4, #16]
 800b302:	b002      	add	sp, #8
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b316:	701a      	strb	r2, [r3, #0]
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b31e:	701a      	strb	r2, [r3, #0]
 800b320:	e7ad      	b.n	800b27e <ucdr_serialize_int32_t+0x72>
 800b322:	4628      	mov	r0, r5
 800b324:	ad01      	add	r5, sp, #4
 800b326:	4629      	mov	r1, r5
 800b328:	4632      	mov	r2, r6
 800b32a:	f00a fb86 	bl	8015a3a <memcpy>
 800b32e:	68a0      	ldr	r0, [r4, #8]
 800b330:	4642      	mov	r2, r8
 800b332:	19a9      	adds	r1, r5, r6
 800b334:	f00a fb81 	bl	8015a3a <memcpy>
 800b338:	e7a1      	b.n	800b27e <ucdr_serialize_int32_t+0x72>
 800b33a:	bf00      	nop

0800b33c <ucdr_deserialize_int32_t>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	2104      	movs	r1, #4
 800b344:	4604      	mov	r4, r0
 800b346:	f000 fa11 	bl	800b76c <ucdr_buffer_alignment>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4620      	mov	r0, r4
 800b34e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b352:	f000 fa4f 	bl	800b7f4 <ucdr_advance_buffer>
 800b356:	2104      	movs	r1, #4
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 f9a7 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d138      	bne.n	800b3d4 <ucdr_deserialize_int32_t+0x98>
 800b362:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b366:	42b7      	cmp	r7, r6
 800b368:	d92f      	bls.n	800b3ca <ucdr_deserialize_int32_t+0x8e>
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	60a7      	str	r7, [r4, #8]
 800b36e:	1bbf      	subs	r7, r7, r6
 800b370:	443b      	add	r3, r7
 800b372:	f1c7 0904 	rsb	r9, r7, #4
 800b376:	6123      	str	r3, [r4, #16]
 800b378:	4649      	mov	r1, r9
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f9a2 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b380:	2800      	cmp	r0, #0
 800b382:	d046      	beq.n	800b412 <ucdr_deserialize_int32_t+0xd6>
 800b384:	7d23      	ldrb	r3, [r4, #20]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d05c      	beq.n	800b444 <ucdr_deserialize_int32_t+0x108>
 800b38a:	78f3      	ldrb	r3, [r6, #3]
 800b38c:	702b      	strb	r3, [r5, #0]
 800b38e:	2f00      	cmp	r7, #0
 800b390:	d04c      	beq.n	800b42c <ucdr_deserialize_int32_t+0xf0>
 800b392:	78b3      	ldrb	r3, [r6, #2]
 800b394:	706b      	strb	r3, [r5, #1]
 800b396:	2f01      	cmp	r7, #1
 800b398:	f105 0302 	add.w	r3, r5, #2
 800b39c:	d04a      	beq.n	800b434 <ucdr_deserialize_int32_t+0xf8>
 800b39e:	7873      	ldrb	r3, [r6, #1]
 800b3a0:	70ab      	strb	r3, [r5, #2]
 800b3a2:	2f02      	cmp	r7, #2
 800b3a4:	f105 0303 	add.w	r3, r5, #3
 800b3a8:	d048      	beq.n	800b43c <ucdr_deserialize_int32_t+0x100>
 800b3aa:	7833      	ldrb	r3, [r6, #0]
 800b3ac:	70eb      	strb	r3, [r5, #3]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	68a2      	ldr	r2, [r4, #8]
 800b3b2:	7da0      	ldrb	r0, [r4, #22]
 800b3b4:	2104      	movs	r1, #4
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	444a      	add	r2, r9
 800b3ba:	1bdb      	subs	r3, r3, r7
 800b3bc:	7561      	strb	r1, [r4, #21]
 800b3be:	60a2      	str	r2, [r4, #8]
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	f080 0001 	eor.w	r0, r0, #1
 800b3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ca:	2104      	movs	r1, #4
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 f979 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b3d2:	b1b0      	cbz	r0, 800b402 <ucdr_deserialize_int32_t+0xc6>
 800b3d4:	7d23      	ldrb	r3, [r4, #20]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	d017      	beq.n	800b40c <ucdr_deserialize_int32_t+0xd0>
 800b3dc:	78db      	ldrb	r3, [r3, #3]
 800b3de:	702b      	strb	r3, [r5, #0]
 800b3e0:	68a3      	ldr	r3, [r4, #8]
 800b3e2:	789b      	ldrb	r3, [r3, #2]
 800b3e4:	706b      	strb	r3, [r5, #1]
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	70ab      	strb	r3, [r5, #2]
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	70eb      	strb	r3, [r5, #3]
 800b3f2:	68a2      	ldr	r2, [r4, #8]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	3204      	adds	r2, #4
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	2104      	movs	r1, #4
 800b3fc:	60a2      	str	r2, [r4, #8]
 800b3fe:	6123      	str	r3, [r4, #16]
 800b400:	7561      	strb	r1, [r4, #21]
 800b402:	7da0      	ldrb	r0, [r4, #22]
 800b404:	f080 0001 	eor.w	r0, r0, #1
 800b408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	e7ef      	b.n	800b3f2 <ucdr_deserialize_int32_t+0xb6>
 800b412:	68a2      	ldr	r2, [r4, #8]
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	7da0      	ldrb	r0, [r4, #22]
 800b418:	f884 8015 	strb.w	r8, [r4, #21]
 800b41c:	1bd2      	subs	r2, r2, r7
 800b41e:	1bdb      	subs	r3, r3, r7
 800b420:	60a2      	str	r2, [r4, #8]
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	f080 0001 	eor.w	r0, r0, #1
 800b428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42c:	68a3      	ldr	r3, [r4, #8]
 800b42e:	789b      	ldrb	r3, [r3, #2]
 800b430:	706b      	strb	r3, [r5, #1]
 800b432:	1cab      	adds	r3, r5, #2
 800b434:	68a2      	ldr	r2, [r4, #8]
 800b436:	7852      	ldrb	r2, [r2, #1]
 800b438:	f803 2b01 	strb.w	r2, [r3], #1
 800b43c:	68a2      	ldr	r2, [r4, #8]
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	e7b4      	b.n	800b3ae <ucdr_deserialize_int32_t+0x72>
 800b444:	4631      	mov	r1, r6
 800b446:	463a      	mov	r2, r7
 800b448:	4628      	mov	r0, r5
 800b44a:	f00a faf6 	bl	8015a3a <memcpy>
 800b44e:	68a1      	ldr	r1, [r4, #8]
 800b450:	464a      	mov	r2, r9
 800b452:	19e8      	adds	r0, r5, r7
 800b454:	f00a faf1 	bl	8015a3a <memcpy>
 800b458:	e7a9      	b.n	800b3ae <ucdr_deserialize_int32_t+0x72>
 800b45a:	bf00      	nop

0800b45c <ucdr_serialize_float>:
 800b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b460:	2104      	movs	r1, #4
 800b462:	b082      	sub	sp, #8
 800b464:	4604      	mov	r4, r0
 800b466:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b46a:	f000 f97f 	bl	800b76c <ucdr_buffer_alignment>
 800b46e:	4601      	mov	r1, r0
 800b470:	4620      	mov	r0, r4
 800b472:	7d67      	ldrb	r7, [r4, #21]
 800b474:	f000 f9be 	bl	800b7f4 <ucdr_advance_buffer>
 800b478:	2104      	movs	r1, #4
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 f916 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b480:	2800      	cmp	r0, #0
 800b482:	d139      	bne.n	800b4f8 <ucdr_serialize_float+0x9c>
 800b484:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b488:	42ab      	cmp	r3, r5
 800b48a:	d930      	bls.n	800b4ee <ucdr_serialize_float+0x92>
 800b48c:	1b5e      	subs	r6, r3, r5
 800b48e:	60a3      	str	r3, [r4, #8]
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	f1c6 0804 	rsb	r8, r6, #4
 800b496:	4433      	add	r3, r6
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	4641      	mov	r1, r8
 800b49c:	4620      	mov	r0, r4
 800b49e:	f000 f911 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d04c      	beq.n	800b540 <ucdr_serialize_float+0xe4>
 800b4a6:	7d23      	ldrb	r3, [r4, #20]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d063      	beq.n	800b574 <ucdr_serialize_float+0x118>
 800b4ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4b0:	702b      	strb	r3, [r5, #0]
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	d051      	beq.n	800b55a <ucdr_serialize_float+0xfe>
 800b4b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4ba:	706b      	strb	r3, [r5, #1]
 800b4bc:	2e01      	cmp	r6, #1
 800b4be:	d050      	beq.n	800b562 <ucdr_serialize_float+0x106>
 800b4c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4c4:	70ab      	strb	r3, [r5, #2]
 800b4c6:	2e02      	cmp	r6, #2
 800b4c8:	d04f      	beq.n	800b56a <ucdr_serialize_float+0x10e>
 800b4ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4ce:	70eb      	strb	r3, [r5, #3]
 800b4d0:	6923      	ldr	r3, [r4, #16]
 800b4d2:	68a2      	ldr	r2, [r4, #8]
 800b4d4:	7da0      	ldrb	r0, [r4, #22]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	1b9e      	subs	r6, r3, r6
 800b4da:	4442      	add	r2, r8
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f080 0001 	eor.w	r0, r0, #1
 800b4e2:	60a2      	str	r2, [r4, #8]
 800b4e4:	6126      	str	r6, [r4, #16]
 800b4e6:	7563      	strb	r3, [r4, #21]
 800b4e8:	b002      	add	sp, #8
 800b4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ee:	2104      	movs	r1, #4
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f000 f8e7 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b4f6:	b1d0      	cbz	r0, 800b52e <ucdr_serialize_float+0xd2>
 800b4f8:	7d23      	ldrb	r3, [r4, #20]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	d01c      	beq.n	800b53a <ucdr_serialize_float+0xde>
 800b500:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b50c:	705a      	strb	r2, [r3, #1]
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b514:	709a      	strb	r2, [r3, #2]
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b51c:	70da      	strb	r2, [r3, #3]
 800b51e:	68a2      	ldr	r2, [r4, #8]
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	3204      	adds	r2, #4
 800b524:	3304      	adds	r3, #4
 800b526:	2104      	movs	r1, #4
 800b528:	60a2      	str	r2, [r4, #8]
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	7561      	strb	r1, [r4, #21]
 800b52e:	7da0      	ldrb	r0, [r4, #22]
 800b530:	f080 0001 	eor.w	r0, r0, #1
 800b534:	b002      	add	sp, #8
 800b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53a:	9a01      	ldr	r2, [sp, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e7ee      	b.n	800b51e <ucdr_serialize_float+0xc2>
 800b540:	68a2      	ldr	r2, [r4, #8]
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	7da0      	ldrb	r0, [r4, #22]
 800b546:	7567      	strb	r7, [r4, #21]
 800b548:	1b92      	subs	r2, r2, r6
 800b54a:	1b9b      	subs	r3, r3, r6
 800b54c:	f080 0001 	eor.w	r0, r0, #1
 800b550:	60a2      	str	r2, [r4, #8]
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	b002      	add	sp, #8
 800b556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b560:	701a      	strb	r2, [r3, #0]
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	e7ad      	b.n	800b4d0 <ucdr_serialize_float+0x74>
 800b574:	4628      	mov	r0, r5
 800b576:	ad01      	add	r5, sp, #4
 800b578:	4629      	mov	r1, r5
 800b57a:	4632      	mov	r2, r6
 800b57c:	f00a fa5d 	bl	8015a3a <memcpy>
 800b580:	68a0      	ldr	r0, [r4, #8]
 800b582:	4642      	mov	r2, r8
 800b584:	19a9      	adds	r1, r5, r6
 800b586:	f00a fa58 	bl	8015a3a <memcpy>
 800b58a:	e7a1      	b.n	800b4d0 <ucdr_serialize_float+0x74>

0800b58c <ucdr_deserialize_float>:
 800b58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b590:	460d      	mov	r5, r1
 800b592:	2104      	movs	r1, #4
 800b594:	4604      	mov	r4, r0
 800b596:	f000 f8e9 	bl	800b76c <ucdr_buffer_alignment>
 800b59a:	4601      	mov	r1, r0
 800b59c:	4620      	mov	r0, r4
 800b59e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5a2:	f000 f927 	bl	800b7f4 <ucdr_advance_buffer>
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f87f 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d138      	bne.n	800b624 <ucdr_deserialize_float+0x98>
 800b5b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b5b6:	42b7      	cmp	r7, r6
 800b5b8:	d92f      	bls.n	800b61a <ucdr_deserialize_float+0x8e>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	60a7      	str	r7, [r4, #8]
 800b5be:	1bbf      	subs	r7, r7, r6
 800b5c0:	443b      	add	r3, r7
 800b5c2:	f1c7 0904 	rsb	r9, r7, #4
 800b5c6:	6123      	str	r3, [r4, #16]
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 f87a 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d046      	beq.n	800b662 <ucdr_deserialize_float+0xd6>
 800b5d4:	7d23      	ldrb	r3, [r4, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d05c      	beq.n	800b694 <ucdr_deserialize_float+0x108>
 800b5da:	78f3      	ldrb	r3, [r6, #3]
 800b5dc:	702b      	strb	r3, [r5, #0]
 800b5de:	2f00      	cmp	r7, #0
 800b5e0:	d04c      	beq.n	800b67c <ucdr_deserialize_float+0xf0>
 800b5e2:	78b3      	ldrb	r3, [r6, #2]
 800b5e4:	706b      	strb	r3, [r5, #1]
 800b5e6:	2f01      	cmp	r7, #1
 800b5e8:	f105 0302 	add.w	r3, r5, #2
 800b5ec:	d04a      	beq.n	800b684 <ucdr_deserialize_float+0xf8>
 800b5ee:	7873      	ldrb	r3, [r6, #1]
 800b5f0:	70ab      	strb	r3, [r5, #2]
 800b5f2:	2f02      	cmp	r7, #2
 800b5f4:	f105 0303 	add.w	r3, r5, #3
 800b5f8:	d048      	beq.n	800b68c <ucdr_deserialize_float+0x100>
 800b5fa:	7833      	ldrb	r3, [r6, #0]
 800b5fc:	70eb      	strb	r3, [r5, #3]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	68a2      	ldr	r2, [r4, #8]
 800b602:	7da0      	ldrb	r0, [r4, #22]
 800b604:	2104      	movs	r1, #4
 800b606:	3304      	adds	r3, #4
 800b608:	444a      	add	r2, r9
 800b60a:	1bdb      	subs	r3, r3, r7
 800b60c:	7561      	strb	r1, [r4, #21]
 800b60e:	60a2      	str	r2, [r4, #8]
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	f080 0001 	eor.w	r0, r0, #1
 800b616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61a:	2104      	movs	r1, #4
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 f851 	bl	800b6c4 <ucdr_check_final_buffer_behavior>
 800b622:	b1b0      	cbz	r0, 800b652 <ucdr_deserialize_float+0xc6>
 800b624:	7d23      	ldrb	r3, [r4, #20]
 800b626:	2b01      	cmp	r3, #1
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	d017      	beq.n	800b65c <ucdr_deserialize_float+0xd0>
 800b62c:	78db      	ldrb	r3, [r3, #3]
 800b62e:	702b      	strb	r3, [r5, #0]
 800b630:	68a3      	ldr	r3, [r4, #8]
 800b632:	789b      	ldrb	r3, [r3, #2]
 800b634:	706b      	strb	r3, [r5, #1]
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	785b      	ldrb	r3, [r3, #1]
 800b63a:	70ab      	strb	r3, [r5, #2]
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	70eb      	strb	r3, [r5, #3]
 800b642:	68a2      	ldr	r2, [r4, #8]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	3204      	adds	r2, #4
 800b648:	3304      	adds	r3, #4
 800b64a:	2104      	movs	r1, #4
 800b64c:	60a2      	str	r2, [r4, #8]
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	7561      	strb	r1, [r4, #21]
 800b652:	7da0      	ldrb	r0, [r4, #22]
 800b654:	f080 0001 	eor.w	r0, r0, #1
 800b658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	e7ef      	b.n	800b642 <ucdr_deserialize_float+0xb6>
 800b662:	68a2      	ldr	r2, [r4, #8]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	7da0      	ldrb	r0, [r4, #22]
 800b668:	f884 8015 	strb.w	r8, [r4, #21]
 800b66c:	1bd2      	subs	r2, r2, r7
 800b66e:	1bdb      	subs	r3, r3, r7
 800b670:	60a2      	str	r2, [r4, #8]
 800b672:	6123      	str	r3, [r4, #16]
 800b674:	f080 0001 	eor.w	r0, r0, #1
 800b678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	789b      	ldrb	r3, [r3, #2]
 800b680:	706b      	strb	r3, [r5, #1]
 800b682:	1cab      	adds	r3, r5, #2
 800b684:	68a2      	ldr	r2, [r4, #8]
 800b686:	7852      	ldrb	r2, [r2, #1]
 800b688:	f803 2b01 	strb.w	r2, [r3], #1
 800b68c:	68a2      	ldr	r2, [r4, #8]
 800b68e:	7812      	ldrb	r2, [r2, #0]
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e7b4      	b.n	800b5fe <ucdr_deserialize_float+0x72>
 800b694:	4631      	mov	r1, r6
 800b696:	463a      	mov	r2, r7
 800b698:	4628      	mov	r0, r5
 800b69a:	f00a f9ce 	bl	8015a3a <memcpy>
 800b69e:	68a1      	ldr	r1, [r4, #8]
 800b6a0:	464a      	mov	r2, r9
 800b6a2:	19e8      	adds	r0, r5, r7
 800b6a4:	f00a f9c9 	bl	8015a3a <memcpy>
 800b6a8:	e7a9      	b.n	800b5fe <ucdr_deserialize_float+0x72>
 800b6aa:	bf00      	nop

0800b6ac <ucdr_check_buffer_available_for>:
 800b6ac:	7d83      	ldrb	r3, [r0, #22]
 800b6ae:	b93b      	cbnz	r3, 800b6c0 <ucdr_check_buffer_available_for+0x14>
 800b6b0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b6b4:	4419      	add	r1, r3
 800b6b6:	4288      	cmp	r0, r1
 800b6b8:	bf34      	ite	cc
 800b6ba:	2000      	movcc	r0, #0
 800b6bc:	2001      	movcs	r0, #1
 800b6be:	4770      	bx	lr
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	4770      	bx	lr

0800b6c4 <ucdr_check_final_buffer_behavior>:
 800b6c4:	7d83      	ldrb	r3, [r0, #22]
 800b6c6:	b943      	cbnz	r3, 800b6da <ucdr_check_final_buffer_behavior+0x16>
 800b6c8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b6cc:	4291      	cmp	r1, r2
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	d205      	bcs.n	800b6e0 <ucdr_check_final_buffer_behavior+0x1c>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	4770      	bx	lr
 800b6e0:	6982      	ldr	r2, [r0, #24]
 800b6e2:	b13a      	cbz	r2, 800b6f4 <ucdr_check_final_buffer_behavior+0x30>
 800b6e4:	69c1      	ldr	r1, [r0, #28]
 800b6e6:	4790      	blx	r2
 800b6e8:	f080 0301 	eor.w	r3, r0, #1
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	75a0      	strb	r0, [r4, #22]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	bd10      	pop	{r4, pc}
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	75a0      	strb	r0, [r4, #22]
 800b6f8:	e7fa      	b.n	800b6f0 <ucdr_check_final_buffer_behavior+0x2c>
 800b6fa:	bf00      	nop

0800b6fc <ucdr_set_on_full_buffer_callback>:
 800b6fc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop

0800b704 <ucdr_init_buffer_origin_offset_endian>:
 800b704:	b410      	push	{r4}
 800b706:	9c01      	ldr	r4, [sp, #4]
 800b708:	6001      	str	r1, [r0, #0]
 800b70a:	440a      	add	r2, r1
 800b70c:	6042      	str	r2, [r0, #4]
 800b70e:	190a      	adds	r2, r1, r4
 800b710:	441c      	add	r4, r3
 800b712:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b716:	6082      	str	r2, [r0, #8]
 800b718:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b71c:	7503      	strb	r3, [r0, #20]
 800b71e:	2200      	movs	r2, #0
 800b720:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b728:	7542      	strb	r2, [r0, #21]
 800b72a:	7582      	strb	r2, [r0, #22]
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop

0800b730 <ucdr_init_buffer_origin_offset>:
 800b730:	b510      	push	{r4, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	9c04      	ldr	r4, [sp, #16]
 800b736:	9400      	str	r4, [sp, #0]
 800b738:	2401      	movs	r4, #1
 800b73a:	9401      	str	r4, [sp, #4]
 800b73c:	f7ff ffe2 	bl	800b704 <ucdr_init_buffer_origin_offset_endian>
 800b740:	b002      	add	sp, #8
 800b742:	bd10      	pop	{r4, pc}

0800b744 <ucdr_init_buffer_origin>:
 800b744:	b510      	push	{r4, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	2400      	movs	r4, #0
 800b74a:	9400      	str	r4, [sp, #0]
 800b74c:	f7ff fff0 	bl	800b730 <ucdr_init_buffer_origin_offset>
 800b750:	b002      	add	sp, #8
 800b752:	bd10      	pop	{r4, pc}

0800b754 <ucdr_init_buffer>:
 800b754:	2300      	movs	r3, #0
 800b756:	f7ff bff5 	b.w	800b744 <ucdr_init_buffer_origin>
 800b75a:	bf00      	nop

0800b75c <ucdr_alignment>:
 800b75c:	fbb0 f3f1 	udiv	r3, r0, r1
 800b760:	fb03 0011 	mls	r0, r3, r1, r0
 800b764:	1a08      	subs	r0, r1, r0
 800b766:	3901      	subs	r1, #1
 800b768:	4008      	ands	r0, r1
 800b76a:	4770      	bx	lr

0800b76c <ucdr_buffer_alignment>:
 800b76c:	7d43      	ldrb	r3, [r0, #21]
 800b76e:	428b      	cmp	r3, r1
 800b770:	d208      	bcs.n	800b784 <ucdr_buffer_alignment+0x18>
 800b772:	6900      	ldr	r0, [r0, #16]
 800b774:	fbb0 f3f1 	udiv	r3, r0, r1
 800b778:	fb01 0013 	mls	r0, r1, r3, r0
 800b77c:	1a08      	subs	r0, r1, r0
 800b77e:	3901      	subs	r1, #1
 800b780:	4008      	ands	r0, r1
 800b782:	4770      	bx	lr
 800b784:	2000      	movs	r0, #0
 800b786:	4770      	bx	lr

0800b788 <ucdr_align_to>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4604      	mov	r4, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	f7ff ffed 	bl	800b76c <ucdr_buffer_alignment>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	6921      	ldr	r1, [r4, #16]
 800b796:	7565      	strb	r5, [r4, #21]
 800b798:	181a      	adds	r2, r3, r0
 800b79a:	6863      	ldr	r3, [r4, #4]
 800b79c:	4293      	cmp	r3, r2
 800b79e:	4408      	add	r0, r1
 800b7a0:	bf28      	it	cs
 800b7a2:	4613      	movcs	r3, r2
 800b7a4:	6120      	str	r0, [r4, #16]
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	bf00      	nop

0800b7ac <ucdr_buffer_length>:
 800b7ac:	6882      	ldr	r2, [r0, #8]
 800b7ae:	6800      	ldr	r0, [r0, #0]
 800b7b0:	1a10      	subs	r0, r2, r0
 800b7b2:	4770      	bx	lr

0800b7b4 <ucdr_buffer_remaining>:
 800b7b4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b7b8:	1a10      	subs	r0, r2, r0
 800b7ba:	4770      	bx	lr

0800b7bc <ucdr_check_final_buffer_behavior_array>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	7d83      	ldrb	r3, [r0, #22]
 800b7c0:	b963      	cbnz	r3, 800b7dc <ucdr_check_final_buffer_behavior_array+0x20>
 800b7c2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	d308      	bcc.n	800b7e0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b7ce:	b139      	cbz	r1, 800b7e0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b7d0:	6983      	ldr	r3, [r0, #24]
 800b7d2:	b163      	cbz	r3, 800b7ee <ucdr_check_final_buffer_behavior_array+0x32>
 800b7d4:	69c1      	ldr	r1, [r0, #28]
 800b7d6:	4798      	blx	r3
 800b7d8:	75a0      	strb	r0, [r4, #22]
 800b7da:	b108      	cbz	r0, 800b7e0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7ff ffe7 	bl	800b7b4 <ucdr_buffer_remaining>
 800b7e6:	42a8      	cmp	r0, r5
 800b7e8:	bf28      	it	cs
 800b7ea:	4628      	movcs	r0, r5
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	7583      	strb	r3, [r0, #22]
 800b7f2:	e7f3      	b.n	800b7dc <ucdr_check_final_buffer_behavior_array+0x20>

0800b7f4 <ucdr_advance_buffer>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	f7ff ff57 	bl	800b6ac <ucdr_check_buffer_available_for>
 800b7fe:	b178      	cbz	r0, 800b820 <ucdr_advance_buffer+0x2c>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	68a2      	ldr	r2, [r4, #8]
 800b804:	442b      	add	r3, r5
 800b806:	6123      	str	r3, [r4, #16]
 800b808:	2301      	movs	r3, #1
 800b80a:	442a      	add	r2, r5
 800b80c:	7563      	strb	r3, [r4, #21]
 800b80e:	60a2      	str	r2, [r4, #8]
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	68a2      	ldr	r2, [r4, #8]
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	4402      	add	r2, r0
 800b818:	4403      	add	r3, r0
 800b81a:	1a2d      	subs	r5, r5, r0
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	4629      	mov	r1, r5
 800b822:	2201      	movs	r2, #1
 800b824:	4620      	mov	r0, r4
 800b826:	f7ff ffc9 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d1f1      	bne.n	800b812 <ucdr_advance_buffer+0x1e>
 800b82e:	2301      	movs	r3, #1
 800b830:	7563      	strb	r3, [r4, #21]
 800b832:	bd38      	pop	{r3, r4, r5, pc}

0800b834 <rcl_client_get_rmw_handle>:
 800b834:	b118      	cbz	r0, 800b83e <rcl_client_get_rmw_handle+0xa>
 800b836:	6800      	ldr	r0, [r0, #0]
 800b838:	b108      	cbz	r0, 800b83e <rcl_client_get_rmw_handle+0xa>
 800b83a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b83e:	4770      	bx	lr

0800b840 <rcl_send_request>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	b1e8      	cbz	r0, 800b882 <rcl_send_request+0x42>
 800b846:	4604      	mov	r4, r0
 800b848:	6800      	ldr	r0, [r0, #0]
 800b84a:	b1d0      	cbz	r0, 800b882 <rcl_send_request+0x42>
 800b84c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800b850:	b1bb      	cbz	r3, 800b882 <rcl_send_request+0x42>
 800b852:	460e      	mov	r6, r1
 800b854:	b1d1      	cbz	r1, 800b88c <rcl_send_request+0x4c>
 800b856:	4615      	mov	r5, r2
 800b858:	b1c2      	cbz	r2, 800b88c <rcl_send_request+0x4c>
 800b85a:	2105      	movs	r1, #5
 800b85c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b860:	f002 fbe6 	bl	800e030 <__atomic_load_8>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	e9c5 0100 	strd	r0, r1, [r5]
 800b86a:	462a      	mov	r2, r5
 800b86c:	4631      	mov	r1, r6
 800b86e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b872:	f003 fce3 	bl	800f23c <rmw_send_request>
 800b876:	4606      	mov	r6, r0
 800b878:	b160      	cbz	r0, 800b894 <rcl_send_request+0x54>
 800b87a:	2601      	movs	r6, #1
 800b87c:	4630      	mov	r0, r6
 800b87e:	b002      	add	sp, #8
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800b886:	4630      	mov	r0, r6
 800b888:	b002      	add	sp, #8
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	260b      	movs	r6, #11
 800b88e:	4630      	mov	r0, r6
 800b890:	b002      	add	sp, #8
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	6820      	ldr	r0, [r4, #0]
 800b896:	2105      	movs	r1, #5
 800b898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b89c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b8a0:	9100      	str	r1, [sp, #0]
 800b8a2:	f002 fc31 	bl	800e108 <__atomic_exchange_8>
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	b002      	add	sp, #8
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	0000      	movs	r0, r0
	...

0800b8b0 <rcl_take_response>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	468e      	mov	lr, r1
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	4616      	mov	r6, r2
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8be:	b08c      	sub	sp, #48	@ 0x30
 800b8c0:	f10d 0c18 	add.w	ip, sp, #24
 800b8c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b8cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b8d0:	b35d      	cbz	r5, 800b92a <rcl_take_response+0x7a>
 800b8d2:	682b      	ldr	r3, [r5, #0]
 800b8d4:	b34b      	cbz	r3, 800b92a <rcl_take_response+0x7a>
 800b8d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b8da:	b330      	cbz	r0, 800b92a <rcl_take_response+0x7a>
 800b8dc:	b346      	cbz	r6, 800b930 <rcl_take_response+0x80>
 800b8de:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800b938 <rcl_take_response+0x88>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f88d 3007 	strb.w	r3, [sp, #7]
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	f10d 0307 	add.w	r3, sp, #7
 800b8ee:	a902      	add	r1, sp, #8
 800b8f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8f8:	f003 fda8 	bl	800f44c <rmw_take_response>
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	b9c8      	cbnz	r0, 800b934 <rcl_take_response+0x84>
 800b900:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b904:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b908:	2a00      	cmp	r2, #0
 800b90a:	bf08      	it	eq
 800b90c:	461d      	moveq	r5, r3
 800b90e:	f10d 0e18 	add.w	lr, sp, #24
 800b912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b916:	46a4      	mov	ip, r4
 800b918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b91c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b920:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b924:	4628      	mov	r0, r5
 800b926:	b00c      	add	sp, #48	@ 0x30
 800b928:	bd70      	pop	{r4, r5, r6, pc}
 800b92a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800b92e:	e7ee      	b.n	800b90e <rcl_take_response+0x5e>
 800b930:	250b      	movs	r5, #11
 800b932:	e7ec      	b.n	800b90e <rcl_take_response+0x5e>
 800b934:	2501      	movs	r5, #1
 800b936:	e7ea      	b.n	800b90e <rcl_take_response+0x5e>
	...

0800b940 <rcl_client_is_valid>:
 800b940:	b130      	cbz	r0, 800b950 <rcl_client_is_valid+0x10>
 800b942:	6800      	ldr	r0, [r0, #0]
 800b944:	b120      	cbz	r0, 800b950 <rcl_client_is_valid+0x10>
 800b946:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b94a:	3800      	subs	r0, #0
 800b94c:	bf18      	it	ne
 800b94e:	2001      	movne	r0, #1
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop

0800b954 <rcl_get_zero_initialized_context>:
 800b954:	4a03      	ldr	r2, [pc, #12]	@ (800b964 <rcl_get_zero_initialized_context+0x10>)
 800b956:	4603      	mov	r3, r0
 800b958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b95c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b960:	4618      	mov	r0, r3
 800b962:	4770      	bx	lr
 800b964:	08016c88 	.word	0x08016c88

0800b968 <rcl_context_is_valid>:
 800b968:	b118      	cbz	r0, 800b972 <rcl_context_is_valid+0xa>
 800b96a:	6840      	ldr	r0, [r0, #4]
 800b96c:	3800      	subs	r0, #0
 800b96e:	bf18      	it	ne
 800b970:	2001      	movne	r0, #1
 800b972:	4770      	bx	lr

0800b974 <__cleanup_context>:
 800b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b978:	4606      	mov	r6, r0
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	2300      	movs	r3, #0
 800b97e:	6073      	str	r3, [r6, #4]
 800b980:	2800      	cmp	r0, #0
 800b982:	d049      	beq.n	800ba18 <__cleanup_context+0xa4>
 800b984:	6947      	ldr	r7, [r0, #20]
 800b986:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b98a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b98e:	b137      	cbz	r7, 800b99e <__cleanup_context+0x2a>
 800b990:	3014      	adds	r0, #20
 800b992:	f000 f9a5 	bl	800bce0 <rcl_init_options_fini>
 800b996:	4607      	mov	r7, r0
 800b998:	2800      	cmp	r0, #0
 800b99a:	d144      	bne.n	800ba26 <__cleanup_context+0xb2>
 800b99c:	6830      	ldr	r0, [r6, #0]
 800b99e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b9a0:	b143      	cbz	r3, 800b9b4 <__cleanup_context+0x40>
 800b9a2:	3028      	adds	r0, #40	@ 0x28
 800b9a4:	f003 fab2 	bl	800ef0c <rmw_context_fini>
 800b9a8:	b118      	cbz	r0, 800b9b2 <__cleanup_context+0x3e>
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	d03e      	beq.n	800ba2c <__cleanup_context+0xb8>
 800b9ae:	f7fe fb1f 	bl	8009ff0 <rcutils_reset_error>
 800b9b2:	6830      	ldr	r0, [r6, #0]
 800b9b4:	6a03      	ldr	r3, [r0, #32]
 800b9b6:	b1db      	cbz	r3, 800b9f0 <__cleanup_context+0x7c>
 800b9b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800b9bc:	2a01      	cmp	r2, #1
 800b9be:	f17c 0100 	sbcs.w	r1, ip, #0
 800b9c2:	db11      	blt.n	800b9e8 <__cleanup_context+0x74>
 800b9c4:	2400      	movs	r4, #0
 800b9c6:	4625      	mov	r5, r4
 800b9c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	b1b8      	cbz	r0, 800ba00 <__cleanup_context+0x8c>
 800b9d0:	47c0      	blx	r8
 800b9d2:	6833      	ldr	r3, [r6, #0]
 800b9d4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800b9d8:	3401      	adds	r4, #1
 800b9da:	f145 0500 	adc.w	r5, r5, #0
 800b9de:	4294      	cmp	r4, r2
 800b9e0:	eb75 010c 	sbcs.w	r1, r5, ip
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	dbef      	blt.n	800b9c8 <__cleanup_context+0x54>
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	47c0      	blx	r8
 800b9ee:	6830      	ldr	r0, [r6, #0]
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	47c0      	blx	r8
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e9c6 3300 	strd	r3, r3, [r6]
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba00:	3401      	adds	r4, #1
 800ba02:	f145 0500 	adc.w	r5, r5, #0
 800ba06:	4294      	cmp	r4, r2
 800ba08:	eb75 010c 	sbcs.w	r1, r5, ip
 800ba0c:	dbdc      	blt.n	800b9c8 <__cleanup_context+0x54>
 800ba0e:	4618      	mov	r0, r3
 800ba10:	4649      	mov	r1, r9
 800ba12:	47c0      	blx	r8
 800ba14:	6830      	ldr	r0, [r6, #0]
 800ba16:	e7eb      	b.n	800b9f0 <__cleanup_context+0x7c>
 800ba18:	4607      	mov	r7, r0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e9c6 3300 	strd	r3, r3, [r6]
 800ba20:	4638      	mov	r0, r7
 800ba22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba26:	f7fe fae3 	bl	8009ff0 <rcutils_reset_error>
 800ba2a:	e7b7      	b.n	800b99c <__cleanup_context+0x28>
 800ba2c:	f007 fece 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800ba30:	4607      	mov	r7, r0
 800ba32:	e7bc      	b.n	800b9ae <__cleanup_context+0x3a>

0800ba34 <rcl_init>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	1e05      	subs	r5, r0, #0
 800ba3a:	b09c      	sub	sp, #112	@ 0x70
 800ba3c:	460e      	mov	r6, r1
 800ba3e:	4690      	mov	r8, r2
 800ba40:	461f      	mov	r7, r3
 800ba42:	f340 8099 	ble.w	800bb78 <rcl_init+0x144>
 800ba46:	2900      	cmp	r1, #0
 800ba48:	f000 8099 	beq.w	800bb7e <rcl_init+0x14a>
 800ba4c:	f1a1 0e04 	sub.w	lr, r1, #4
 800ba50:	f04f 0c00 	mov.w	ip, #0
 800ba54:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800ba58:	f10c 0c01 	add.w	ip, ip, #1
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	f000 808e 	beq.w	800bb7e <rcl_init+0x14a>
 800ba62:	4565      	cmp	r5, ip
 800ba64:	d1f6      	bne.n	800ba54 <rcl_init+0x20>
 800ba66:	f1b8 0f00 	cmp.w	r8, #0
 800ba6a:	f000 8088 	beq.w	800bb7e <rcl_init+0x14a>
 800ba6e:	f8d8 4000 	ldr.w	r4, [r8]
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	f000 8083 	beq.w	800bb7e <rcl_init+0x14a>
 800ba78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800ba7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	f8cc 3000 	str.w	r3, [ip]
 800ba88:	a817      	add	r0, sp, #92	@ 0x5c
 800ba8a:	f7fe fa8b 	bl	8009fa4 <rcutils_allocator_is_valid>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d075      	beq.n	800bb7e <rcl_init+0x14a>
 800ba92:	2f00      	cmp	r7, #0
 800ba94:	d073      	beq.n	800bb7e <rcl_init+0x14a>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d175      	bne.n	800bb88 <rcl_init+0x154>
 800ba9c:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800baa0:	2178      	movs	r1, #120	@ 0x78
 800baa2:	2001      	movs	r0, #1
 800baa4:	4798      	blx	r3
 800baa6:	4604      	mov	r4, r0
 800baa8:	6038      	str	r0, [r7, #0]
 800baaa:	2800      	cmp	r0, #0
 800baac:	f000 80a0 	beq.w	800bbf0 <rcl_init+0x1bc>
 800bab0:	a802      	add	r0, sp, #8
 800bab2:	f002 fdfd 	bl	800e6b0 <rmw_get_zero_initialized_context>
 800bab6:	a902      	add	r1, sp, #8
 800bab8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800babc:	2250      	movs	r2, #80	@ 0x50
 800babe:	ac17      	add	r4, sp, #92	@ 0x5c
 800bac0:	f009 ffbb 	bl	8015a3a <memcpy>
 800bac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bac6:	f8d7 e000 	ldr.w	lr, [r7]
 800baca:	46f4      	mov	ip, lr
 800bacc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	f8cc 3000 	str.w	r3, [ip]
 800bad6:	f10e 0114 	add.w	r1, lr, #20
 800bada:	4640      	mov	r0, r8
 800badc:	f000 f92a 	bl	800bd34 <rcl_init_options_copy>
 800bae0:	4604      	mov	r4, r0
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d144      	bne.n	800bb70 <rcl_init+0x13c>
 800bae6:	f8d7 9000 	ldr.w	r9, [r7]
 800baea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800baee:	f8c9 0020 	str.w	r0, [r9, #32]
 800baf2:	f8c9 5018 	str.w	r5, [r9, #24]
 800baf6:	f8c9 801c 	str.w	r8, [r9, #28]
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	d04b      	beq.n	800bb96 <rcl_init+0x162>
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	d049      	beq.n	800bb96 <rcl_init+0x162>
 800bb02:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800bb06:	2104      	movs	r1, #4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	4798      	blx	r3
 800bb0c:	f8c9 0020 	str.w	r0, [r9, #32]
 800bb10:	f8d7 9000 	ldr.w	r9, [r7]
 800bb14:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800bb18:	46ca      	mov	sl, r9
 800bb1a:	b343      	cbz	r3, 800bb6e <rcl_init+0x13a>
 800bb1c:	2d01      	cmp	r5, #1
 800bb1e:	f178 0300 	sbcs.w	r3, r8, #0
 800bb22:	db38      	blt.n	800bb96 <rcl_init+0x162>
 800bb24:	2400      	movs	r4, #0
 800bb26:	3e04      	subs	r6, #4
 800bb28:	46a1      	mov	r9, r4
 800bb2a:	e00b      	b.n	800bb44 <rcl_init+0x110>
 800bb2c:	6831      	ldr	r1, [r6, #0]
 800bb2e:	f009 ff84 	bl	8015a3a <memcpy>
 800bb32:	3401      	adds	r4, #1
 800bb34:	f149 0900 	adc.w	r9, r9, #0
 800bb38:	45c8      	cmp	r8, r9
 800bb3a:	bf08      	it	eq
 800bb3c:	42a5      	cmpeq	r5, r4
 800bb3e:	d028      	beq.n	800bb92 <rcl_init+0x15e>
 800bb40:	f8d7 a000 	ldr.w	sl, [r7]
 800bb44:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800bb48:	f7f4 fb54 	bl	80001f4 <strlen>
 800bb4c:	1c42      	adds	r2, r0, #1
 800bb4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb50:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bb52:	f8da a020 	ldr.w	sl, [sl, #32]
 800bb56:	9201      	str	r2, [sp, #4]
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d1de      	bne.n	800bb2c <rcl_init+0xf8>
 800bb6e:	240a      	movs	r4, #10
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff feff 	bl	800b974 <__cleanup_context>
 800bb76:	e003      	b.n	800bb80 <rcl_init+0x14c>
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	f43f af74 	beq.w	800ba66 <rcl_init+0x32>
 800bb7e:	240b      	movs	r4, #11
 800bb80:	4620      	mov	r0, r4
 800bb82:	b01c      	add	sp, #112	@ 0x70
 800bb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb88:	2464      	movs	r4, #100	@ 0x64
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	b01c      	add	sp, #112	@ 0x70
 800bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb92:	f8d7 9000 	ldr.w	r9, [r7]
 800bb96:	491d      	ldr	r1, [pc, #116]	@ (800bc0c <rcl_init+0x1d8>)
 800bb98:	680b      	ldr	r3, [r1, #0]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	d023      	beq.n	800bbe6 <rcl_init+0x1b2>
 800bb9e:	600b      	str	r3, [r1, #0]
 800bba0:	461a      	mov	r2, r3
 800bba2:	2400      	movs	r4, #0
 800bba4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800bba8:	607b      	str	r3, [r7, #4]
 800bbaa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bbac:	6182      	str	r2, [r0, #24]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	61c4      	str	r4, [r0, #28]
 800bbb2:	d01f      	beq.n	800bbf4 <rcl_init+0x1c0>
 800bbb4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800bbb8:	b94b      	cbnz	r3, 800bbce <rcl_init+0x19a>
 800bbba:	3030      	adds	r0, #48	@ 0x30
 800bbbc:	f000 f926 	bl	800be0c <rcl_get_localhost_only>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d1d4      	bne.n	800bb70 <rcl_init+0x13c>
 800bbc6:	f8d7 9000 	ldr.w	r9, [r7]
 800bbca:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800bbce:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800bbd2:	3018      	adds	r0, #24
 800bbd4:	f003 f864 	bl	800eca0 <rmw_init>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d0d0      	beq.n	800bb80 <rcl_init+0x14c>
 800bbde:	f007 fdf5 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	e7c4      	b.n	800bb70 <rcl_init+0x13c>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	461c      	mov	r4, r3
 800bbea:	600a      	str	r2, [r1, #0]
 800bbec:	4613      	mov	r3, r2
 800bbee:	e7d9      	b.n	800bba4 <rcl_init+0x170>
 800bbf0:	240a      	movs	r4, #10
 800bbf2:	e7c5      	b.n	800bb80 <rcl_init+0x14c>
 800bbf4:	3024      	adds	r0, #36	@ 0x24
 800bbf6:	f007 fdfd 	bl	80137f4 <rcl_get_default_domain_id>
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d1b7      	bne.n	800bb70 <rcl_init+0x13c>
 800bc00:	f8d7 9000 	ldr.w	r9, [r7]
 800bc04:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800bc08:	e7d4      	b.n	800bbb4 <rcl_init+0x180>
 800bc0a:	bf00      	nop
 800bc0c:	20009528 	.word	0x20009528

0800bc10 <rcl_get_zero_initialized_init_options>:
 800bc10:	2000      	movs	r0, #0
 800bc12:	4770      	bx	lr

0800bc14 <rcl_init_options_init>:
 800bc14:	b084      	sub	sp, #16
 800bc16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc18:	b097      	sub	sp, #92	@ 0x5c
 800bc1a:	ae1d      	add	r6, sp, #116	@ 0x74
 800bc1c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d058      	beq.n	800bcd6 <rcl_init_options_init+0xc2>
 800bc24:	6803      	ldr	r3, [r0, #0]
 800bc26:	4605      	mov	r5, r0
 800bc28:	b133      	cbz	r3, 800bc38 <rcl_init_options_init+0x24>
 800bc2a:	2464      	movs	r4, #100	@ 0x64
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	b017      	add	sp, #92	@ 0x5c
 800bc30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc34:	b004      	add	sp, #16
 800bc36:	4770      	bx	lr
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7fe f9b3 	bl	8009fa4 <rcutils_allocator_is_valid>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d049      	beq.n	800bcd6 <rcl_init_options_init+0xc2>
 800bc42:	46b4      	mov	ip, r6
 800bc44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc48:	ac11      	add	r4, sp, #68	@ 0x44
 800bc4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc4c:	f8dc 3000 	ldr.w	r3, [ip]
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bc54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc56:	2050      	movs	r0, #80	@ 0x50
 800bc58:	4798      	blx	r3
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	6028      	str	r0, [r5, #0]
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d03b      	beq.n	800bcda <rcl_init_options_init+0xc6>
 800bc62:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bc66:	4686      	mov	lr, r0
 800bc68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc70:	f8dc 3000 	ldr.w	r3, [ip]
 800bc74:	f8ce 3000 	str.w	r3, [lr]
 800bc78:	a802      	add	r0, sp, #8
 800bc7a:	f002 fd29 	bl	800e6d0 <rmw_get_zero_initialized_init_options>
 800bc7e:	f10d 0e08 	add.w	lr, sp, #8
 800bc82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc86:	f104 0c18 	add.w	ip, r4, #24
 800bc8a:	682f      	ldr	r7, [r5, #0]
 800bc8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bca0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bca4:	ac20      	add	r4, sp, #128	@ 0x80
 800bca6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bcaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bcae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bcb2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bcb6:	f107 0018 	add.w	r0, r7, #24
 800bcba:	f002 fecf 	bl	800ea5c <rmw_init_options_init>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d0b3      	beq.n	800bc2c <rcl_init_options_init+0x18>
 800bcc4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bcc6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bcc8:	6828      	ldr	r0, [r5, #0]
 800bcca:	4798      	blx	r3
 800bccc:	4620      	mov	r0, r4
 800bcce:	f007 fd7d 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	e7aa      	b.n	800bc2c <rcl_init_options_init+0x18>
 800bcd6:	240b      	movs	r4, #11
 800bcd8:	e7a8      	b.n	800bc2c <rcl_init_options_init+0x18>
 800bcda:	240a      	movs	r4, #10
 800bcdc:	e7a6      	b.n	800bc2c <rcl_init_options_init+0x18>
 800bcde:	bf00      	nop

0800bce0 <rcl_init_options_fini>:
 800bce0:	b530      	push	{r4, r5, lr}
 800bce2:	b087      	sub	sp, #28
 800bce4:	b1f0      	cbz	r0, 800bd24 <rcl_init_options_fini+0x44>
 800bce6:	6803      	ldr	r3, [r0, #0]
 800bce8:	4604      	mov	r4, r0
 800bcea:	b1db      	cbz	r3, 800bd24 <rcl_init_options_fini+0x44>
 800bcec:	469c      	mov	ip, r3
 800bcee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bcf2:	f10d 0e04 	add.w	lr, sp, #4
 800bcf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bcfa:	f8dc 3000 	ldr.w	r3, [ip]
 800bcfe:	f8ce 3000 	str.w	r3, [lr]
 800bd02:	a801      	add	r0, sp, #4
 800bd04:	f7fe f94e 	bl	8009fa4 <rcutils_allocator_is_valid>
 800bd08:	b160      	cbz	r0, 800bd24 <rcl_init_options_fini+0x44>
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	3018      	adds	r0, #24
 800bd0e:	f002 ff7b 	bl	800ec08 <rmw_init_options_fini>
 800bd12:	4605      	mov	r5, r0
 800bd14:	b950      	cbnz	r0, 800bd2c <rcl_init_options_fini+0x4c>
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	9905      	ldr	r1, [sp, #20]
 800bd1c:	4798      	blx	r3
 800bd1e:	4628      	mov	r0, r5
 800bd20:	b007      	add	sp, #28
 800bd22:	bd30      	pop	{r4, r5, pc}
 800bd24:	250b      	movs	r5, #11
 800bd26:	4628      	mov	r0, r5
 800bd28:	b007      	add	sp, #28
 800bd2a:	bd30      	pop	{r4, r5, pc}
 800bd2c:	f007 fd4e 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800bd30:	4605      	mov	r5, r0
 800bd32:	e7f8      	b.n	800bd26 <rcl_init_options_fini+0x46>

0800bd34 <rcl_init_options_copy>:
 800bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd38:	b094      	sub	sp, #80	@ 0x50
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d058      	beq.n	800bdf0 <rcl_init_options_copy+0xbc>
 800bd3e:	4604      	mov	r4, r0
 800bd40:	6800      	ldr	r0, [r0, #0]
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d054      	beq.n	800bdf0 <rcl_init_options_copy+0xbc>
 800bd46:	460e      	mov	r6, r1
 800bd48:	f7fe f92c 	bl	8009fa4 <rcutils_allocator_is_valid>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d04f      	beq.n	800bdf0 <rcl_init_options_copy+0xbc>
 800bd50:	2e00      	cmp	r6, #0
 800bd52:	d04d      	beq.n	800bdf0 <rcl_init_options_copy+0xbc>
 800bd54:	6833      	ldr	r3, [r6, #0]
 800bd56:	b123      	cbz	r3, 800bd62 <rcl_init_options_copy+0x2e>
 800bd58:	2464      	movs	r4, #100	@ 0x64
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	b014      	add	sp, #80	@ 0x50
 800bd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd62:	6827      	ldr	r7, [r4, #0]
 800bd64:	46bc      	mov	ip, r7
 800bd66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd6a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bd6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd6e:	f8dc 3000 	ldr.w	r3, [ip]
 800bd72:	f8d7 8000 	ldr.w	r8, [r7]
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	2050      	movs	r0, #80	@ 0x50
 800bd7c:	47c0      	blx	r8
 800bd7e:	4605      	mov	r5, r0
 800bd80:	6030      	str	r0, [r6, #0]
 800bd82:	b3d0      	cbz	r0, 800bdfa <rcl_init_options_copy+0xc6>
 800bd84:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bd88:	4686      	mov	lr, r0
 800bd8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd92:	f8dc 3000 	ldr.w	r3, [ip]
 800bd96:	f8ce 3000 	str.w	r3, [lr]
 800bd9a:	4668      	mov	r0, sp
 800bd9c:	f002 fc98 	bl	800e6d0 <rmw_get_zero_initialized_init_options>
 800bda0:	46ee      	mov	lr, sp
 800bda2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bda6:	f105 0c18 	add.w	ip, r5, #24
 800bdaa:	6824      	ldr	r4, [r4, #0]
 800bdac:	6835      	ldr	r5, [r6, #0]
 800bdae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdc2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bdc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bdca:	f104 0018 	add.w	r0, r4, #24
 800bdce:	f105 0118 	add.w	r1, r5, #24
 800bdd2:	f002 fea5 	bl	800eb20 <rmw_init_options_copy>
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0be      	beq.n	800bd5a <rcl_init_options_copy+0x26>
 800bddc:	f7fe f8f0 	bl	8009fc0 <rcutils_get_error_string>
 800bde0:	f7fe f906 	bl	8009ff0 <rcutils_reset_error>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff ff7b 	bl	800bce0 <rcl_init_options_fini>
 800bdea:	b140      	cbz	r0, 800bdfe <rcl_init_options_copy+0xca>
 800bdec:	4604      	mov	r4, r0
 800bdee:	e7b4      	b.n	800bd5a <rcl_init_options_copy+0x26>
 800bdf0:	240b      	movs	r4, #11
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	b014      	add	sp, #80	@ 0x50
 800bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfa:	240a      	movs	r4, #10
 800bdfc:	e7ad      	b.n	800bd5a <rcl_init_options_copy+0x26>
 800bdfe:	4620      	mov	r0, r4
 800be00:	b014      	add	sp, #80	@ 0x50
 800be02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be06:	f007 bce1 	b.w	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800be0a:	bf00      	nop

0800be0c <rcl_get_localhost_only>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	2300      	movs	r3, #0
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	b1b8      	cbz	r0, 800be46 <rcl_get_localhost_only+0x3a>
 800be16:	4604      	mov	r4, r0
 800be18:	a901      	add	r1, sp, #4
 800be1a:	480c      	ldr	r0, [pc, #48]	@ (800be4c <rcl_get_localhost_only+0x40>)
 800be1c:	f002 f9ac 	bl	800e178 <rcutils_get_env>
 800be20:	b110      	cbz	r0, 800be28 <rcl_get_localhost_only+0x1c>
 800be22:	2001      	movs	r0, #1
 800be24:	b002      	add	sp, #8
 800be26:	bd10      	pop	{r4, pc}
 800be28:	9b01      	ldr	r3, [sp, #4]
 800be2a:	b113      	cbz	r3, 800be32 <rcl_get_localhost_only+0x26>
 800be2c:	781a      	ldrb	r2, [r3, #0]
 800be2e:	2a31      	cmp	r2, #49	@ 0x31
 800be30:	d004      	beq.n	800be3c <rcl_get_localhost_only+0x30>
 800be32:	2302      	movs	r3, #2
 800be34:	2000      	movs	r0, #0
 800be36:	7023      	strb	r3, [r4, #0]
 800be38:	b002      	add	sp, #8
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f7      	bne.n	800be32 <rcl_get_localhost_only+0x26>
 800be42:	2301      	movs	r3, #1
 800be44:	e7f6      	b.n	800be34 <rcl_get_localhost_only+0x28>
 800be46:	200b      	movs	r0, #11
 800be48:	b002      	add	sp, #8
 800be4a:	bd10      	pop	{r4, pc}
 800be4c:	08016c90 	.word	0x08016c90

0800be50 <rcl_get_zero_initialized_node>:
 800be50:	4a03      	ldr	r2, [pc, #12]	@ (800be60 <rcl_get_zero_initialized_node+0x10>)
 800be52:	4603      	mov	r3, r0
 800be54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be58:	e883 0003 	stmia.w	r3, {r0, r1}
 800be5c:	4618      	mov	r0, r3
 800be5e:	4770      	bx	lr
 800be60:	08016cc0 	.word	0x08016cc0

0800be64 <rcl_node_init>:
 800be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	b0a9      	sub	sp, #164	@ 0xa4
 800be6a:	4604      	mov	r4, r0
 800be6c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800be70:	a823      	add	r0, sp, #140	@ 0x8c
 800be72:	460e      	mov	r6, r1
 800be74:	4615      	mov	r5, r2
 800be76:	461f      	mov	r7, r3
 800be78:	f007 fee4 	bl	8013c44 <rcl_guard_condition_get_default_options>
 800be7c:	f1b8 0f00 	cmp.w	r8, #0
 800be80:	f000 80e6 	beq.w	800c050 <rcl_node_init+0x1ec>
 800be84:	4640      	mov	r0, r8
 800be86:	f7fe f88d 	bl	8009fa4 <rcutils_allocator_is_valid>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	f000 80e0 	beq.w	800c050 <rcl_node_init+0x1ec>
 800be90:	2e00      	cmp	r6, #0
 800be92:	f000 80dd 	beq.w	800c050 <rcl_node_init+0x1ec>
 800be96:	2d00      	cmp	r5, #0
 800be98:	f000 80da 	beq.w	800c050 <rcl_node_init+0x1ec>
 800be9c:	2c00      	cmp	r4, #0
 800be9e:	f000 80d7 	beq.w	800c050 <rcl_node_init+0x1ec>
 800bea2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bea6:	f1b9 0f00 	cmp.w	r9, #0
 800beaa:	f040 80fd 	bne.w	800c0a8 <rcl_node_init+0x244>
 800beae:	2f00      	cmp	r7, #0
 800beb0:	f000 80ce 	beq.w	800c050 <rcl_node_init+0x1ec>
 800beb4:	4638      	mov	r0, r7
 800beb6:	f7ff fd57 	bl	800b968 <rcl_context_is_valid>
 800beba:	4682      	mov	sl, r0
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f000 80cd 	beq.w	800c05c <rcl_node_init+0x1f8>
 800bec2:	464a      	mov	r2, r9
 800bec4:	a922      	add	r1, sp, #136	@ 0x88
 800bec6:	4630      	mov	r0, r6
 800bec8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800becc:	f002 fd1e 	bl	800e90c <rmw_validate_node_name>
 800bed0:	4681      	mov	r9, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f040 80be 	bne.w	800c054 <rcl_node_init+0x1f0>
 800bed8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800beda:	2800      	cmp	r0, #0
 800bedc:	f040 80f0 	bne.w	800c0c0 <rcl_node_init+0x25c>
 800bee0:	4628      	mov	r0, r5
 800bee2:	f7f4 f987 	bl	80001f4 <strlen>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 80bb 	bne.w	800c062 <rcl_node_init+0x1fe>
 800beec:	4d7c      	ldr	r5, [pc, #496]	@ (800c0e0 <rcl_node_init+0x27c>)
 800beee:	a922      	add	r1, sp, #136	@ 0x88
 800bef0:	2200      	movs	r2, #0
 800bef2:	4628      	mov	r0, r5
 800bef4:	f002 fcec 	bl	800e8d0 <rmw_validate_namespace>
 800bef8:	4681      	mov	r9, r0
 800befa:	2800      	cmp	r0, #0
 800befc:	f040 80aa 	bne.w	800c054 <rcl_node_init+0x1f0>
 800bf00:	4682      	mov	sl, r0
 800bf02:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f040 80e0 	bne.w	800c0ca <rcl_node_init+0x266>
 800bf0a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bf12:	2078      	movs	r0, #120	@ 0x78
 800bf14:	4798      	blx	r3
 800bf16:	4681      	mov	r9, r0
 800bf18:	6060      	str	r0, [r4, #4]
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	f000 80ca 	beq.w	800c0b4 <rcl_node_init+0x250>
 800bf20:	2200      	movs	r2, #0
 800bf22:	2300      	movs	r3, #0
 800bf24:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800bf28:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800bf2c:	a808      	add	r0, sp, #32
 800bf2e:	f000 f907 	bl	800c140 <rcl_node_get_default_options>
 800bf32:	a908      	add	r1, sp, #32
 800bf34:	4648      	mov	r0, r9
 800bf36:	2268      	movs	r2, #104	@ 0x68
 800bf38:	f009 fd7f 	bl	8015a3a <memcpy>
 800bf3c:	6861      	ldr	r1, [r4, #4]
 800bf3e:	6027      	str	r7, [r4, #0]
 800bf40:	4640      	mov	r0, r8
 800bf42:	f000 f90b 	bl	800c15c <rcl_node_options_copy>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d158      	bne.n	800bffc <rcl_node_init+0x198>
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7f4 f952 	bl	80001f4 <strlen>
 800bf50:	4428      	add	r0, r5
 800bf52:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800bf56:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800bf5a:	2b2f      	cmp	r3, #47	@ 0x2f
 800bf5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	bf0c      	ite	eq
 800bf64:	4b5f      	ldreq	r3, [pc, #380]	@ (800c0e4 <rcl_node_init+0x280>)
 800bf66:	4b60      	ldrne	r3, [pc, #384]	@ (800c0e8 <rcl_node_init+0x284>)
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bf74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bf78:	f002 f916 	bl	800e1a8 <rcutils_format_string_limit>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	4631      	mov	r1, r6
 800bf86:	3028      	adds	r0, #40	@ 0x28
 800bf88:	462a      	mov	r2, r5
 800bf8a:	6866      	ldr	r6, [r4, #4]
 800bf8c:	f003 f86a 	bl	800f064 <rmw_create_node>
 800bf90:	6863      	ldr	r3, [r4, #4]
 800bf92:	66b0      	str	r0, [r6, #104]	@ 0x68
 800bf94:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d032      	beq.n	800c000 <rcl_node_init+0x19c>
 800bf9a:	f003 f8f7 	bl	800f18c <rmw_node_get_graph_guard_condition>
 800bf9e:	4681      	mov	r9, r0
 800bfa0:	b360      	cbz	r0, 800bffc <rcl_node_init+0x198>
 800bfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bfaa:	6866      	ldr	r6, [r4, #4]
 800bfac:	2008      	movs	r0, #8
 800bfae:	4798      	blx	r3
 800bfb0:	6863      	ldr	r3, [r4, #4]
 800bfb2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800bfb4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800bfb8:	f1bb 0f00 	cmp.w	fp, #0
 800bfbc:	d020      	beq.n	800c000 <rcl_node_init+0x19c>
 800bfbe:	a806      	add	r0, sp, #24
 800bfc0:	f007 fdb0 	bl	8013b24 <rcl_get_zero_initialized_guard_condition>
 800bfc4:	a806      	add	r0, sp, #24
 800bfc6:	c803      	ldmia	r0, {r0, r1}
 800bfc8:	6863      	ldr	r3, [r4, #4]
 800bfca:	46c4      	mov	ip, r8
 800bfcc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800bfd0:	e88b 0003 	stmia.w	fp, {r0, r1}
 800bfd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfd8:	ae23      	add	r6, sp, #140	@ 0x8c
 800bfda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bfdc:	f8dc 3000 	ldr.w	r3, [ip]
 800bfe0:	6033      	str	r3, [r6, #0]
 800bfe2:	ab28      	add	r3, sp, #160	@ 0xa0
 800bfe4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bfe8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bfec:	4649      	mov	r1, r9
 800bfee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bff0:	463a      	mov	r2, r7
 800bff2:	4670      	mov	r0, lr
 800bff4:	f007 fda0 	bl	8013b38 <rcl_guard_condition_init_from_rmw>
 800bff8:	4681      	mov	r9, r0
 800bffa:	b328      	cbz	r0, 800c048 <rcl_node_init+0x1e4>
 800bffc:	6863      	ldr	r3, [r4, #4]
 800bffe:	b1f3      	cbz	r3, 800c03e <rcl_node_init+0x1da>
 800c000:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c002:	b128      	cbz	r0, 800c010 <rcl_node_init+0x1ac>
 800c004:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c008:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c00c:	4798      	blx	r3
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c012:	b110      	cbz	r0, 800c01a <rcl_node_init+0x1b6>
 800c014:	f003 f83e 	bl	800f094 <rmw_destroy_node>
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c01c:	b148      	cbz	r0, 800c032 <rcl_node_init+0x1ce>
 800c01e:	f007 fdeb 	bl	8013bf8 <rcl_guard_condition_fini>
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c028:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c02a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c02e:	4798      	blx	r3
 800c030:	6863      	ldr	r3, [r4, #4]
 800c032:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c036:	4618      	mov	r0, r3
 800c038:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c03c:	4798      	blx	r3
 800c03e:	2300      	movs	r3, #0
 800c040:	e9c4 3300 	strd	r3, r3, [r4]
 800c044:	f04f 0901 	mov.w	r9, #1
 800c048:	f1ba 0f00 	cmp.w	sl, #0
 800c04c:	d125      	bne.n	800c09a <rcl_node_init+0x236>
 800c04e:	e001      	b.n	800c054 <rcl_node_init+0x1f0>
 800c050:	f04f 090b 	mov.w	r9, #11
 800c054:	4648      	mov	r0, r9
 800c056:	b029      	add	sp, #164	@ 0xa4
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c060:	e7f8      	b.n	800c054 <rcl_node_init+0x1f0>
 800c062:	782b      	ldrb	r3, [r5, #0]
 800c064:	2b2f      	cmp	r3, #47	@ 0x2f
 800c066:	f43f af42 	beq.w	800beee <rcl_node_init+0x8a>
 800c06a:	9503      	str	r5, [sp, #12]
 800c06c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	4b1e      	ldr	r3, [pc, #120]	@ (800c0ec <rcl_node_init+0x288>)
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c080:	f002 f892 	bl	800e1a8 <rcutils_format_string_limit>
 800c084:	4605      	mov	r5, r0
 800c086:	b340      	cbz	r0, 800c0da <rcl_node_init+0x276>
 800c088:	2200      	movs	r2, #0
 800c08a:	a922      	add	r1, sp, #136	@ 0x88
 800c08c:	9222      	str	r2, [sp, #136]	@ 0x88
 800c08e:	f002 fc1f 	bl	800e8d0 <rmw_validate_namespace>
 800c092:	4681      	mov	r9, r0
 800c094:	2800      	cmp	r0, #0
 800c096:	f43f af34 	beq.w	800bf02 <rcl_node_init+0x9e>
 800c09a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c09e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	4798      	blx	r3
 800c0a6:	e7d5      	b.n	800c054 <rcl_node_init+0x1f0>
 800c0a8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	b029      	add	sp, #164	@ 0xa4
 800c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b4:	f04f 090a 	mov.w	r9, #10
 800c0b8:	f1ba 0f00 	cmp.w	sl, #0
 800c0bc:	d1ed      	bne.n	800c09a <rcl_node_init+0x236>
 800c0be:	e7c9      	b.n	800c054 <rcl_node_init+0x1f0>
 800c0c0:	f002 fc76 	bl	800e9b0 <rmw_node_name_validation_result_string>
 800c0c4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c0c8:	e7c4      	b.n	800c054 <rcl_node_init+0x1f0>
 800c0ca:	f002 fc13 	bl	800e8f4 <rmw_namespace_validation_result_string>
 800c0ce:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c0d2:	f1ba 0f00 	cmp.w	sl, #0
 800c0d6:	d1e0      	bne.n	800c09a <rcl_node_init+0x236>
 800c0d8:	e7bc      	b.n	800c054 <rcl_node_init+0x1f0>
 800c0da:	f04f 090a 	mov.w	r9, #10
 800c0de:	e7b9      	b.n	800c054 <rcl_node_init+0x1f0>
 800c0e0:	08016ca8 	.word	0x08016ca8
 800c0e4:	08016cb0 	.word	0x08016cb0
 800c0e8:	08016cb8 	.word	0x08016cb8
 800c0ec:	08016cac 	.word	0x08016cac

0800c0f0 <rcl_node_is_valid>:
 800c0f0:	b130      	cbz	r0, 800c100 <rcl_node_is_valid+0x10>
 800c0f2:	6843      	ldr	r3, [r0, #4]
 800c0f4:	b123      	cbz	r3, 800c100 <rcl_node_is_valid+0x10>
 800c0f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0f8:	b113      	cbz	r3, 800c100 <rcl_node_is_valid+0x10>
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	f7ff bc34 	b.w	800b968 <rcl_context_is_valid>
 800c100:	2000      	movs	r0, #0
 800c102:	4770      	bx	lr

0800c104 <rcl_node_get_name>:
 800c104:	b120      	cbz	r0, 800c110 <rcl_node_get_name+0xc>
 800c106:	6840      	ldr	r0, [r0, #4]
 800c108:	b110      	cbz	r0, 800c110 <rcl_node_get_name+0xc>
 800c10a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c10c:	b100      	cbz	r0, 800c110 <rcl_node_get_name+0xc>
 800c10e:	6880      	ldr	r0, [r0, #8]
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop

0800c114 <rcl_node_get_namespace>:
 800c114:	b120      	cbz	r0, 800c120 <rcl_node_get_namespace+0xc>
 800c116:	6840      	ldr	r0, [r0, #4]
 800c118:	b110      	cbz	r0, 800c120 <rcl_node_get_namespace+0xc>
 800c11a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c11c:	b100      	cbz	r0, 800c120 <rcl_node_get_namespace+0xc>
 800c11e:	68c0      	ldr	r0, [r0, #12]
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop

0800c124 <rcl_node_get_options>:
 800c124:	b128      	cbz	r0, 800c132 <rcl_node_get_options+0xe>
 800c126:	6840      	ldr	r0, [r0, #4]
 800c128:	b118      	cbz	r0, 800c132 <rcl_node_get_options+0xe>
 800c12a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bf08      	it	eq
 800c130:	2000      	moveq	r0, #0
 800c132:	4770      	bx	lr

0800c134 <rcl_node_get_rmw_handle>:
 800c134:	b110      	cbz	r0, 800c13c <rcl_node_get_rmw_handle+0x8>
 800c136:	6840      	ldr	r0, [r0, #4]
 800c138:	b100      	cbz	r0, 800c13c <rcl_node_get_rmw_handle+0x8>
 800c13a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop

0800c140 <rcl_node_get_default_options>:
 800c140:	b510      	push	{r4, lr}
 800c142:	2268      	movs	r2, #104	@ 0x68
 800c144:	4604      	mov	r4, r0
 800c146:	2100      	movs	r1, #0
 800c148:	f009 fbae 	bl	80158a8 <memset>
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7fd ff1b 	bl	8009f88 <rcutils_get_default_allocator>
 800c152:	2301      	movs	r3, #1
 800c154:	7523      	strb	r3, [r4, #20]
 800c156:	4620      	mov	r0, r4
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	bf00      	nop

0800c15c <rcl_node_options_copy>:
 800c15c:	b1d0      	cbz	r0, 800c194 <rcl_node_options_copy+0x38>
 800c15e:	b570      	push	{r4, r5, r6, lr}
 800c160:	460c      	mov	r4, r1
 800c162:	b1a9      	cbz	r1, 800c190 <rcl_node_options_copy+0x34>
 800c164:	4288      	cmp	r0, r1
 800c166:	4684      	mov	ip, r0
 800c168:	d012      	beq.n	800c190 <rcl_node_options_copy+0x34>
 800c16a:	4605      	mov	r5, r0
 800c16c:	8a86      	ldrh	r6, [r0, #20]
 800c16e:	468e      	mov	lr, r1
 800c170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c172:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	f8ce 3000 	str.w	r3, [lr]
 800c17c:	f10c 0118 	add.w	r1, ip, #24
 800c180:	2250      	movs	r2, #80	@ 0x50
 800c182:	82a6      	strh	r6, [r4, #20]
 800c184:	f104 0018 	add.w	r0, r4, #24
 800c188:	f009 fc57 	bl	8015a3a <memcpy>
 800c18c:	2000      	movs	r0, #0
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	200b      	movs	r0, #11
 800c192:	bd70      	pop	{r4, r5, r6, pc}
 800c194:	200b      	movs	r0, #11
 800c196:	4770      	bx	lr

0800c198 <rcl_node_resolve_name>:
 800c198:	b082      	sub	sp, #8
 800c19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19e:	b091      	sub	sp, #68	@ 0x44
 800c1a0:	ac1a      	add	r4, sp, #104	@ 0x68
 800c1a2:	e884 000c 	stmia.w	r4, {r2, r3}
 800c1a6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d03b      	beq.n	800c226 <rcl_node_resolve_name+0x8e>
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	f7ff ffb7 	bl	800c124 <rcl_node_get_options>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d037      	beq.n	800c22a <rcl_node_resolve_name+0x92>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f7ff ffa2 	bl	800c104 <rcl_node_get_name>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f7ff ffa6 	bl	800c114 <rcl_node_get_namespace>
 800c1c8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800c1cc:	4681      	mov	r9, r0
 800c1ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1d2:	ad0b      	add	r5, sp, #44	@ 0x2c
 800c1d4:	46ac      	mov	ip, r5
 800c1d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1da:	f8de 3000 	ldr.w	r3, [lr]
 800c1de:	f8cc 3000 	str.w	r3, [ip]
 800c1e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1e4:	b1fb      	cbz	r3, 800c226 <rcl_node_resolve_name+0x8e>
 800c1e6:	468a      	mov	sl, r1
 800c1e8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800c1ec:	f002 f934 	bl	800e458 <rcutils_get_zero_initialized_string_map>
 800c1f0:	ab10      	add	r3, sp, #64	@ 0x40
 800c1f2:	9008      	str	r0, [sp, #32]
 800c1f4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c1f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c202:	a808      	add	r0, sp, #32
 800c204:	f002 f9a0 	bl	800e548 <rcutils_string_map_init>
 800c208:	4607      	mov	r7, r0
 800c20a:	b180      	cbz	r0, 800c22e <rcl_node_resolve_name+0x96>
 800c20c:	f7fd fed8 	bl	8009fc0 <rcutils_get_error_string>
 800c210:	f7fd feee 	bl	8009ff0 <rcutils_reset_error>
 800c214:	2f0a      	cmp	r7, #10
 800c216:	bf18      	it	ne
 800c218:	2701      	movne	r7, #1
 800c21a:	4638      	mov	r0, r7
 800c21c:	b011      	add	sp, #68	@ 0x44
 800c21e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c222:	b002      	add	sp, #8
 800c224:	4770      	bx	lr
 800c226:	270b      	movs	r7, #11
 800c228:	e7f7      	b.n	800c21a <rcl_node_resolve_name+0x82>
 800c22a:	2701      	movs	r7, #1
 800c22c:	e7f5      	b.n	800c21a <rcl_node_resolve_name+0x82>
 800c22e:	9009      	str	r0, [sp, #36]	@ 0x24
 800c230:	9007      	str	r0, [sp, #28]
 800c232:	a808      	add	r0, sp, #32
 800c234:	f007 fc70 	bl	8013b18 <rcl_get_default_topic_name_substitutions>
 800c238:	4607      	mov	r7, r0
 800c23a:	b1a8      	cbz	r0, 800c268 <rcl_node_resolve_name+0xd0>
 800c23c:	280a      	cmp	r0, #10
 800c23e:	9c07      	ldr	r4, [sp, #28]
 800c240:	d000      	beq.n	800c244 <rcl_node_resolve_name+0xac>
 800c242:	2701      	movs	r7, #1
 800c244:	a808      	add	r0, sp, #32
 800c246:	f002 f9bf 	bl	800e5c8 <rcutils_string_map_fini>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d13d      	bne.n	800c2ca <rcl_node_resolve_name+0x132>
 800c24e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c250:	4659      	mov	r1, fp
 800c252:	47d0      	blx	sl
 800c254:	4659      	mov	r1, fp
 800c256:	4620      	mov	r0, r4
 800c258:	47d0      	blx	sl
 800c25a:	f1b8 0f00 	cmp.w	r8, #0
 800c25e:	d0dc      	beq.n	800c21a <rcl_node_resolve_name+0x82>
 800c260:	2f67      	cmp	r7, #103	@ 0x67
 800c262:	bf08      	it	eq
 800c264:	2768      	moveq	r7, #104	@ 0x68
 800c266:	e7d8      	b.n	800c21a <rcl_node_resolve_name+0x82>
 800c268:	ab09      	add	r3, sp, #36	@ 0x24
 800c26a:	9305      	str	r3, [sp, #20]
 800c26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c26e:	46ec      	mov	ip, sp
 800c270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	f8cc 3000 	str.w	r3, [ip]
 800c27a:	464a      	mov	r2, r9
 800c27c:	4631      	mov	r1, r6
 800c27e:	4620      	mov	r0, r4
 800c280:	ab08      	add	r3, sp, #32
 800c282:	f007 faeb 	bl	801385c <rcl_expand_topic_name>
 800c286:	4607      	mov	r7, r0
 800c288:	b9b8      	cbnz	r0, 800c2ba <rcl_node_resolve_name+0x122>
 800c28a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c28c:	9009      	str	r0, [sp, #36]	@ 0x24
 800c28e:	4602      	mov	r2, r0
 800c290:	a90a      	add	r1, sp, #40	@ 0x28
 800c292:	4620      	mov	r0, r4
 800c294:	f002 fa58 	bl	800e748 <rmw_validate_full_topic_name>
 800c298:	b988      	cbnz	r0, 800c2be <rcl_node_resolve_name+0x126>
 800c29a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c29c:	b9d5      	cbnz	r5, 800c2d4 <rcl_node_resolve_name+0x13c>
 800c29e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2a0:	a808      	add	r0, sp, #32
 800c2a2:	601c      	str	r4, [r3, #0]
 800c2a4:	f002 f990 	bl	800e5c8 <rcutils_string_map_fini>
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	b1a8      	cbz	r0, 800c2d8 <rcl_node_resolve_name+0x140>
 800c2ac:	f7fd fe88 	bl	8009fc0 <rcutils_get_error_string>
 800c2b0:	462c      	mov	r4, r5
 800c2b2:	f7fd fe9d 	bl	8009ff0 <rcutils_reset_error>
 800c2b6:	2701      	movs	r7, #1
 800c2b8:	e7c9      	b.n	800c24e <rcl_node_resolve_name+0xb6>
 800c2ba:	9c07      	ldr	r4, [sp, #28]
 800c2bc:	e7c2      	b.n	800c244 <rcl_node_resolve_name+0xac>
 800c2be:	f7fd fe7f 	bl	8009fc0 <rcutils_get_error_string>
 800c2c2:	2701      	movs	r7, #1
 800c2c4:	f7fd fe94 	bl	8009ff0 <rcutils_reset_error>
 800c2c8:	e7bc      	b.n	800c244 <rcl_node_resolve_name+0xac>
 800c2ca:	f7fd fe79 	bl	8009fc0 <rcutils_get_error_string>
 800c2ce:	f7fd fe8f 	bl	8009ff0 <rcutils_reset_error>
 800c2d2:	e7bc      	b.n	800c24e <rcl_node_resolve_name+0xb6>
 800c2d4:	2767      	movs	r7, #103	@ 0x67
 800c2d6:	e7b5      	b.n	800c244 <rcl_node_resolve_name+0xac>
 800c2d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2da:	4659      	mov	r1, fp
 800c2dc:	47d0      	blx	sl
 800c2de:	4659      	mov	r1, fp
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	47d0      	blx	sl
 800c2e4:	e799      	b.n	800c21a <rcl_node_resolve_name+0x82>
 800c2e6:	bf00      	nop

0800c2e8 <rcl_service_get_rmw_handle>:
 800c2e8:	b118      	cbz	r0, 800c2f2 <rcl_service_get_rmw_handle+0xa>
 800c2ea:	6800      	ldr	r0, [r0, #0]
 800c2ec:	b108      	cbz	r0, 800c2f2 <rcl_service_get_rmw_handle+0xa>
 800c2ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c2f2:	4770      	bx	lr

0800c2f4 <rcl_take_request>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	468e      	mov	lr, r1
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c302:	b08c      	sub	sp, #48	@ 0x30
 800c304:	f10d 0c18 	add.w	ip, sp, #24
 800c308:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c30c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c310:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c314:	b30d      	cbz	r5, 800c35a <rcl_take_request+0x66>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	b1fb      	cbz	r3, 800c35a <rcl_take_request+0x66>
 800c31a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c31e:	b1e0      	cbz	r0, 800c35a <rcl_take_request+0x66>
 800c320:	b336      	cbz	r6, 800c370 <rcl_take_request+0x7c>
 800c322:	2300      	movs	r3, #0
 800c324:	f88d 3007 	strb.w	r3, [sp, #7]
 800c328:	4632      	mov	r2, r6
 800c32a:	f10d 0307 	add.w	r3, sp, #7
 800c32e:	a902      	add	r1, sp, #8
 800c330:	f002 ffd2 	bl	800f2d8 <rmw_take_request>
 800c334:	4605      	mov	r5, r0
 800c336:	b198      	cbz	r0, 800c360 <rcl_take_request+0x6c>
 800c338:	280a      	cmp	r0, #10
 800c33a:	bf18      	it	ne
 800c33c:	2501      	movne	r5, #1
 800c33e:	f10d 0e18 	add.w	lr, sp, #24
 800c342:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c346:	46a4      	mov	ip, r4
 800c348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c34c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c350:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c354:	4628      	mov	r0, r5
 800c356:	b00c      	add	sp, #48	@ 0x30
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800c35e:	e7ee      	b.n	800c33e <rcl_take_request+0x4a>
 800c360:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c364:	f240 2359 	movw	r3, #601	@ 0x259
 800c368:	2a00      	cmp	r2, #0
 800c36a:	bf08      	it	eq
 800c36c:	461d      	moveq	r5, r3
 800c36e:	e7e6      	b.n	800c33e <rcl_take_request+0x4a>
 800c370:	250b      	movs	r5, #11
 800c372:	e7e4      	b.n	800c33e <rcl_take_request+0x4a>

0800c374 <rcl_send_response>:
 800c374:	b170      	cbz	r0, 800c394 <rcl_send_response+0x20>
 800c376:	6800      	ldr	r0, [r0, #0]
 800c378:	b160      	cbz	r0, 800c394 <rcl_send_response+0x20>
 800c37a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c37e:	b148      	cbz	r0, 800c394 <rcl_send_response+0x20>
 800c380:	b159      	cbz	r1, 800c39a <rcl_send_response+0x26>
 800c382:	b510      	push	{r4, lr}
 800c384:	b15a      	cbz	r2, 800c39e <rcl_send_response+0x2a>
 800c386:	f003 f805 	bl	800f394 <rmw_send_response>
 800c38a:	b110      	cbz	r0, 800c392 <rcl_send_response+0x1e>
 800c38c:	2802      	cmp	r0, #2
 800c38e:	bf18      	it	ne
 800c390:	2001      	movne	r0, #1
 800c392:	bd10      	pop	{r4, pc}
 800c394:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800c398:	4770      	bx	lr
 800c39a:	200b      	movs	r0, #11
 800c39c:	4770      	bx	lr
 800c39e:	200b      	movs	r0, #11
 800c3a0:	bd10      	pop	{r4, pc}
 800c3a2:	bf00      	nop

0800c3a4 <rcl_service_is_valid>:
 800c3a4:	b130      	cbz	r0, 800c3b4 <rcl_service_is_valid+0x10>
 800c3a6:	6800      	ldr	r0, [r0, #0]
 800c3a8:	b120      	cbz	r0, 800c3b4 <rcl_service_is_valid+0x10>
 800c3aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c3ae:	3800      	subs	r0, #0
 800c3b0:	bf18      	it	ne
 800c3b2:	2001      	movne	r0, #1
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop

0800c3b8 <rcl_get_zero_initialized_subscription>:
 800c3b8:	4b01      	ldr	r3, [pc, #4]	@ (800c3c0 <rcl_get_zero_initialized_subscription+0x8>)
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	08016cc8 	.word	0x08016cc8

0800c3c4 <rcl_subscription_init>:
 800c3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	b089      	sub	sp, #36	@ 0x24
 800c3ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c3cc:	b1d6      	cbz	r6, 800c404 <rcl_subscription_init+0x40>
 800c3ce:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4648      	mov	r0, r9
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	4690      	mov	r8, r2
 800c3da:	461f      	mov	r7, r3
 800c3dc:	f7fd fde2 	bl	8009fa4 <rcutils_allocator_is_valid>
 800c3e0:	b180      	cbz	r0, 800c404 <rcl_subscription_init+0x40>
 800c3e2:	b17c      	cbz	r4, 800c404 <rcl_subscription_init+0x40>
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f7ff fe83 	bl	800c0f0 <rcl_node_is_valid>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d054      	beq.n	800c498 <rcl_subscription_init+0xd4>
 800c3ee:	f1b8 0f00 	cmp.w	r8, #0
 800c3f2:	d007      	beq.n	800c404 <rcl_subscription_init+0x40>
 800c3f4:	b137      	cbz	r7, 800c404 <rcl_subscription_init+0x40>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	b14b      	cbz	r3, 800c40e <rcl_subscription_init+0x4a>
 800c3fa:	2764      	movs	r7, #100	@ 0x64
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	b009      	add	sp, #36	@ 0x24
 800c400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c404:	270b      	movs	r7, #11
 800c406:	4638      	mov	r0, r7
 800c408:	b009      	add	sp, #36	@ 0x24
 800c40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c40e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c412:	aa07      	add	r2, sp, #28
 800c414:	9205      	str	r2, [sp, #20]
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c41c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c420:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c424:	4639      	mov	r1, r7
 800c426:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7ff feb4 	bl	800c198 <rcl_node_resolve_name>
 800c430:	4607      	mov	r7, r0
 800c432:	2800      	cmp	r0, #0
 800c434:	d15f      	bne.n	800c4f6 <rcl_subscription_init+0x132>
 800c436:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800c43a:	21c8      	movs	r1, #200	@ 0xc8
 800c43c:	2001      	movs	r0, #1
 800c43e:	4798      	blx	r3
 800c440:	6020      	str	r0, [r4, #0]
 800c442:	2800      	cmp	r0, #0
 800c444:	d05d      	beq.n	800c502 <rcl_subscription_init+0x13e>
 800c446:	4628      	mov	r0, r5
 800c448:	f7ff fe74 	bl	800c134 <rcl_node_get_rmw_handle>
 800c44c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	9a07      	ldr	r2, [sp, #28]
 800c454:	6827      	ldr	r7, [r4, #0]
 800c456:	4641      	mov	r1, r8
 800c458:	4633      	mov	r3, r6
 800c45a:	f003 f885 	bl	800f568 <rmw_create_subscription>
 800c45e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800c462:	6827      	ldr	r7, [r4, #0]
 800c464:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800c468:	b348      	cbz	r0, 800c4be <rcl_subscription_init+0xfa>
 800c46a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800c46e:	f003 f95d 	bl	800f72c <rmw_subscription_get_actual_qos>
 800c472:	4607      	mov	r7, r0
 800c474:	b9a8      	cbnz	r0, 800c4a2 <rcl_subscription_init+0xde>
 800c476:	6820      	ldr	r0, [r4, #0]
 800c478:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800c47c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800c480:	2270      	movs	r2, #112	@ 0x70
 800c482:	4631      	mov	r1, r6
 800c484:	f009 fad9 	bl	8015a3a <memcpy>
 800c488:	9807      	ldr	r0, [sp, #28]
 800c48a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c48c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c48e:	4798      	blx	r3
 800c490:	4638      	mov	r0, r7
 800c492:	b009      	add	sp, #36	@ 0x24
 800c494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c498:	27c8      	movs	r7, #200	@ 0xc8
 800c49a:	4638      	mov	r0, r7
 800c49c:	b009      	add	sp, #36	@ 0x24
 800c49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a2:	6827      	ldr	r7, [r4, #0]
 800c4a4:	b32f      	cbz	r7, 800c4f2 <rcl_subscription_init+0x12e>
 800c4a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c4aa:	b14b      	cbz	r3, 800c4c0 <rcl_subscription_init+0xfc>
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7ff fe41 	bl	800c134 <rcl_node_get_rmw_handle>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c4b8:	f003 f948 	bl	800f74c <rmw_destroy_subscription>
 800c4bc:	6827      	ldr	r7, [r4, #0]
 800c4be:	b197      	cbz	r7, 800c4e6 <rcl_subscription_init+0x122>
 800c4c0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7fd fd6d 	bl	8009fa4 <rcutils_allocator_is_valid>
 800c4ca:	b158      	cbz	r0, 800c4e4 <rcl_subscription_init+0x120>
 800c4cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4ce:	b148      	cbz	r0, 800c4e4 <rcl_subscription_init+0x120>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f002 f911 	bl	800e6f8 <rmw_subscription_content_filter_options_fini>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	b9b8      	cbnz	r0, 800c50a <rcl_subscription_init+0x146>
 800c4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c4de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4e0:	4798      	blx	r3
 800c4e2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800c4e4:	6827      	ldr	r7, [r4, #0]
 800c4e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c4e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	4798      	blx	r3
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	2701      	movs	r7, #1
 800c4f4:	e7c8      	b.n	800c488 <rcl_subscription_init+0xc4>
 800c4f6:	2867      	cmp	r0, #103	@ 0x67
 800c4f8:	d0c6      	beq.n	800c488 <rcl_subscription_init+0xc4>
 800c4fa:	2869      	cmp	r0, #105	@ 0x69
 800c4fc:	d003      	beq.n	800c506 <rcl_subscription_init+0x142>
 800c4fe:	280a      	cmp	r0, #10
 800c500:	d1f7      	bne.n	800c4f2 <rcl_subscription_init+0x12e>
 800c502:	270a      	movs	r7, #10
 800c504:	e7c0      	b.n	800c488 <rcl_subscription_init+0xc4>
 800c506:	2767      	movs	r7, #103	@ 0x67
 800c508:	e7be      	b.n	800c488 <rcl_subscription_init+0xc4>
 800c50a:	f007 f95f 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800c50e:	6827      	ldr	r7, [r4, #0]
 800c510:	e7e9      	b.n	800c4e6 <rcl_subscription_init+0x122>
 800c512:	bf00      	nop

0800c514 <rcl_subscription_get_default_options>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4d14      	ldr	r5, [pc, #80]	@ (800c568 <rcl_subscription_get_default_options+0x54>)
 800c518:	4914      	ldr	r1, [pc, #80]	@ (800c56c <rcl_subscription_get_default_options+0x58>)
 800c51a:	b08a      	sub	sp, #40	@ 0x28
 800c51c:	4604      	mov	r4, r0
 800c51e:	2250      	movs	r2, #80	@ 0x50
 800c520:	4628      	mov	r0, r5
 800c522:	f009 fa8a 	bl	8015a3a <memcpy>
 800c526:	a804      	add	r0, sp, #16
 800c528:	f7fd fd2e 	bl	8009f88 <rcutils_get_default_allocator>
 800c52c:	f10d 0c10 	add.w	ip, sp, #16
 800c530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c534:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c538:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c53c:	466e      	mov	r6, sp
 800c53e:	f8dc 3000 	ldr.w	r3, [ip]
 800c542:	f8ce 3000 	str.w	r3, [lr]
 800c546:	4630      	mov	r0, r6
 800c548:	f002 f8f0 	bl	800e72c <rmw_get_default_subscription_options>
 800c54c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c550:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c558:	2270      	movs	r2, #112	@ 0x70
 800c55a:	4629      	mov	r1, r5
 800c55c:	4620      	mov	r0, r4
 800c55e:	f009 fa6c 	bl	8015a3a <memcpy>
 800c562:	4620      	mov	r0, r4
 800c564:	b00a      	add	sp, #40	@ 0x28
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	20009530 	.word	0x20009530
 800c56c:	08016cd0 	.word	0x08016cd0

0800c570 <rcl_take>:
 800c570:	2800      	cmp	r0, #0
 800c572:	d04a      	beq.n	800c60a <rcl_take+0x9a>
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	4604      	mov	r4, r0
 800c57a:	6800      	ldr	r0, [r0, #0]
 800c57c:	b0a4      	sub	sp, #144	@ 0x90
 800c57e:	2800      	cmp	r0, #0
 800c580:	d03b      	beq.n	800c5fa <rcl_take+0x8a>
 800c582:	461f      	mov	r7, r3
 800c584:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d036      	beq.n	800c5fa <rcl_take+0x8a>
 800c58c:	460e      	mov	r6, r1
 800c58e:	2900      	cmp	r1, #0
 800c590:	d039      	beq.n	800c606 <rcl_take+0x96>
 800c592:	4615      	mov	r5, r2
 800c594:	2a00      	cmp	r2, #0
 800c596:	d03c      	beq.n	800c612 <rcl_take+0xa2>
 800c598:	a802      	add	r0, sp, #8
 800c59a:	f002 f8cd 	bl	800e738 <rmw_get_zero_initialized_message_info>
 800c59e:	f10d 0c08 	add.w	ip, sp, #8
 800c5a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c5a6:	46ae      	mov	lr, r5
 800c5a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c5ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c5b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c5b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c5b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c5bc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800c5c0:	f04f 0800 	mov.w	r8, #0
 800c5c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800c5c8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800c5cc:	6822      	ldr	r2, [r4, #0]
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800c5d4:	9700      	str	r7, [sp, #0]
 800c5d6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800c5da:	4631      	mov	r1, r6
 800c5dc:	f003 f916 	bl	800f80c <rmw_take_with_info>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	b9c0      	cbnz	r0, 800c616 <rcl_take+0xa6>
 800c5e4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800c5e8:	f240 1291 	movw	r2, #401	@ 0x191
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	bf08      	it	eq
 800c5f0:	4613      	moveq	r3, r2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	b024      	add	sp, #144	@ 0x90
 800c5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c5fe:	4618      	mov	r0, r3
 800c600:	b024      	add	sp, #144	@ 0x90
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	230b      	movs	r3, #11
 800c608:	e7f3      	b.n	800c5f2 <rcl_take+0x82>
 800c60a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c60e:	4618      	mov	r0, r3
 800c610:	4770      	bx	lr
 800c612:	ad14      	add	r5, sp, #80	@ 0x50
 800c614:	e7c0      	b.n	800c598 <rcl_take+0x28>
 800c616:	f007 f8d9 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 800c61a:	4603      	mov	r3, r0
 800c61c:	e7e9      	b.n	800c5f2 <rcl_take+0x82>
 800c61e:	bf00      	nop

0800c620 <rcl_subscription_get_rmw_handle>:
 800c620:	b118      	cbz	r0, 800c62a <rcl_subscription_get_rmw_handle+0xa>
 800c622:	6800      	ldr	r0, [r0, #0]
 800c624:	b108      	cbz	r0, 800c62a <rcl_subscription_get_rmw_handle+0xa>
 800c626:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800c62a:	4770      	bx	lr

0800c62c <rcl_subscription_is_valid>:
 800c62c:	b130      	cbz	r0, 800c63c <rcl_subscription_is_valid+0x10>
 800c62e:	6800      	ldr	r0, [r0, #0]
 800c630:	b120      	cbz	r0, 800c63c <rcl_subscription_is_valid+0x10>
 800c632:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800c636:	3800      	subs	r0, #0
 800c638:	bf18      	it	ne
 800c63a:	2001      	movne	r0, #1
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop

0800c640 <rcl_get_system_time>:
 800c640:	4608      	mov	r0, r1
 800c642:	f7fd bcf1 	b.w	800a028 <rcutils_system_time_now>
 800c646:	bf00      	nop

0800c648 <rcl_get_steady_time>:
 800c648:	4608      	mov	r0, r1
 800c64a:	f7fd bd15 	b.w	800a078 <rcutils_steady_time_now>
 800c64e:	bf00      	nop

0800c650 <rcl_get_ros_time>:
 800c650:	7a03      	ldrb	r3, [r0, #8]
 800c652:	b510      	push	{r4, lr}
 800c654:	460c      	mov	r4, r1
 800c656:	b133      	cbz	r3, 800c666 <rcl_get_ros_time+0x16>
 800c658:	2105      	movs	r1, #5
 800c65a:	f001 fce9 	bl	800e030 <__atomic_load_8>
 800c65e:	e9c4 0100 	strd	r0, r1, [r4]
 800c662:	2000      	movs	r0, #0
 800c664:	bd10      	pop	{r4, pc}
 800c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c66a:	4608      	mov	r0, r1
 800c66c:	f7fd bcdc 	b.w	800a028 <rcutils_system_time_now>

0800c670 <rcl_clock_init>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	4605      	mov	r5, r0
 800c674:	4610      	mov	r0, r2
 800c676:	4614      	mov	r4, r2
 800c678:	460e      	mov	r6, r1
 800c67a:	f7fd fc93 	bl	8009fa4 <rcutils_allocator_is_valid>
 800c67e:	b128      	cbz	r0, 800c68c <rcl_clock_init+0x1c>
 800c680:	2d03      	cmp	r5, #3
 800c682:	d803      	bhi.n	800c68c <rcl_clock_init+0x1c>
 800c684:	e8df f005 	tbb	[pc, r5]
 800c688:	06532e1d 	.word	0x06532e1d
 800c68c:	f04f 0c0b 	mov.w	ip, #11
 800c690:	4660      	mov	r0, ip
 800c692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c694:	2e00      	cmp	r6, #0
 800c696:	d0f9      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c698:	2c00      	cmp	r4, #0
 800c69a:	d0f7      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c69c:	2300      	movs	r3, #0
 800c69e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c6a2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800c758 <rcl_clock_init+0xe8>
 800c6a6:	6133      	str	r3, [r6, #16]
 800c6a8:	f106 0514 	add.w	r5, r6, #20
 800c6ac:	469c      	mov	ip, r3
 800c6ae:	2703      	movs	r7, #3
 800c6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	602b      	str	r3, [r5, #0]
 800c6b8:	7037      	strb	r7, [r6, #0]
 800c6ba:	f8c6 e00c 	str.w	lr, [r6, #12]
 800c6be:	4660      	mov	r0, ip
 800c6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	d0e2      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	7033      	strb	r3, [r6, #0]
 800c6ca:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c6ce:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800c6d2:	469c      	mov	ip, r3
 800c6d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6d6:	f106 0514 	add.w	r5, r6, #20
 800c6da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	602b      	str	r3, [r5, #0]
 800c6e0:	4660      	mov	r0, ip
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	d0d1      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	d0cf      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c6ec:	2700      	movs	r7, #0
 800c6ee:	7037      	strb	r7, [r6, #0]
 800c6f0:	46a4      	mov	ip, r4
 800c6f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6f6:	f106 0514 	add.w	r5, r6, #20
 800c6fa:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800c6fe:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800c702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c704:	f8dc 3000 	ldr.w	r3, [ip]
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	6921      	ldr	r1, [r4, #16]
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	2010      	movs	r0, #16
 800c710:	4798      	blx	r3
 800c712:	6130      	str	r0, [r6, #16]
 800c714:	b1d0      	cbz	r0, 800c74c <rcl_clock_init+0xdc>
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	e9c0 2300 	strd	r2, r3, [r0]
 800c71e:	2301      	movs	r3, #1
 800c720:	7207      	strb	r7, [r0, #8]
 800c722:	4a0c      	ldr	r2, [pc, #48]	@ (800c754 <rcl_clock_init+0xe4>)
 800c724:	7033      	strb	r3, [r6, #0]
 800c726:	46bc      	mov	ip, r7
 800c728:	60f2      	str	r2, [r6, #12]
 800c72a:	4660      	mov	r0, ip
 800c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d0ac      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c732:	2c00      	cmp	r4, #0
 800c734:	d0aa      	beq.n	800c68c <rcl_clock_init+0x1c>
 800c736:	2300      	movs	r3, #0
 800c738:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c73c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800c75c <rcl_clock_init+0xec>
 800c740:	6133      	str	r3, [r6, #16]
 800c742:	f106 0514 	add.w	r5, r6, #20
 800c746:	469c      	mov	ip, r3
 800c748:	2702      	movs	r7, #2
 800c74a:	e7b1      	b.n	800c6b0 <rcl_clock_init+0x40>
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	e79e      	b.n	800c690 <rcl_clock_init+0x20>
 800c752:	bf00      	nop
 800c754:	0800c651 	.word	0x0800c651
 800c758:	0800c649 	.word	0x0800c649
 800c75c:	0800c641 	.word	0x0800c641

0800c760 <rcl_clock_get_now>:
 800c760:	b140      	cbz	r0, 800c774 <rcl_clock_get_now+0x14>
 800c762:	b139      	cbz	r1, 800c774 <rcl_clock_get_now+0x14>
 800c764:	7803      	ldrb	r3, [r0, #0]
 800c766:	b11b      	cbz	r3, 800c770 <rcl_clock_get_now+0x10>
 800c768:	68c3      	ldr	r3, [r0, #12]
 800c76a:	b10b      	cbz	r3, 800c770 <rcl_clock_get_now+0x10>
 800c76c:	6900      	ldr	r0, [r0, #16]
 800c76e:	4718      	bx	r3
 800c770:	2001      	movs	r0, #1
 800c772:	4770      	bx	lr
 800c774:	200b      	movs	r0, #11
 800c776:	4770      	bx	lr

0800c778 <rcl_timer_call>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	b087      	sub	sp, #28
 800c77e:	2800      	cmp	r0, #0
 800c780:	d06d      	beq.n	800c85e <rcl_timer_call+0xe6>
 800c782:	6803      	ldr	r3, [r0, #0]
 800c784:	4604      	mov	r4, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d063      	beq.n	800c852 <rcl_timer_call+0xda>
 800c78a:	f3bf 8f5b 	dmb	ish
 800c78e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c792:	f3bf 8f5b 	dmb	ish
 800c796:	2b00      	cmp	r3, #0
 800c798:	d150      	bne.n	800c83c <rcl_timer_call+0xc4>
 800c79a:	6803      	ldr	r3, [r0, #0]
 800c79c:	a904      	add	r1, sp, #16
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	f7ff ffde 	bl	800c760 <rcl_clock_get_now>
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d14a      	bne.n	800c840 <rcl_timer_call+0xc8>
 800c7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	db4a      	blt.n	800c848 <rcl_timer_call+0xd0>
 800c7b2:	6820      	ldr	r0, [r4, #0]
 800c7b4:	f04f 0a05 	mov.w	sl, #5
 800c7b8:	f8cd a000 	str.w	sl, [sp]
 800c7bc:	3020      	adds	r0, #32
 800c7be:	f001 fca3 	bl	800e108 <__atomic_exchange_8>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	f3bf 8f5b 	dmb	ish
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c7ce:	f3bf 8f5b 	dmb	ish
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	3028      	adds	r0, #40	@ 0x28
 800c7d8:	4651      	mov	r1, sl
 800c7da:	f001 fc29 	bl	800e030 <__atomic_load_8>
 800c7de:	4606      	mov	r6, r0
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	3018      	adds	r0, #24
 800c7e6:	4651      	mov	r1, sl
 800c7e8:	f001 fc22 	bl	800e030 <__atomic_load_8>
 800c7ec:	1836      	adds	r6, r6, r0
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800c7f6:	eb47 0701 	adc.w	r7, r7, r1
 800c7fa:	4286      	cmp	r6, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	eb77 010c 	sbcs.w	r1, r7, ip
 800c802:	da04      	bge.n	800c80e <rcl_timer_call+0x96>
 800c804:	ea53 0102 	orrs.w	r1, r3, r2
 800c808:	d12e      	bne.n	800c868 <rcl_timer_call+0xf0>
 800c80a:	4606      	mov	r6, r0
 800c80c:	4667      	mov	r7, ip
 800c80e:	6820      	ldr	r0, [r4, #0]
 800c810:	2105      	movs	r1, #5
 800c812:	4632      	mov	r2, r6
 800c814:	463b      	mov	r3, r7
 800c816:	3028      	adds	r0, #40	@ 0x28
 800c818:	9100      	str	r1, [sp, #0]
 800c81a:	f001 fc3f 	bl	800e09c <__atomic_store_8>
 800c81e:	f1bb 0f00 	cmp.w	fp, #0
 800c822:	d00d      	beq.n	800c840 <rcl_timer_call+0xc8>
 800c824:	9a04      	ldr	r2, [sp, #16]
 800c826:	9b05      	ldr	r3, [sp, #20]
 800c828:	ebb2 0208 	subs.w	r2, r2, r8
 800c82c:	4620      	mov	r0, r4
 800c82e:	eb63 0309 	sbc.w	r3, r3, r9
 800c832:	47d8      	blx	fp
 800c834:	4628      	mov	r0, r5
 800c836:	b007      	add	sp, #28
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	f240 3521 	movw	r5, #801	@ 0x321
 800c840:	4628      	mov	r0, r5
 800c842:	b007      	add	sp, #28
 800c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c848:	2501      	movs	r5, #1
 800c84a:	4628      	mov	r0, r5
 800c84c:	b007      	add	sp, #28
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800c856:	4628      	mov	r0, r5
 800c858:	b007      	add	sp, #28
 800c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85e:	250b      	movs	r5, #11
 800c860:	4628      	mov	r0, r5
 800c862:	b007      	add	sp, #28
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	1b80      	subs	r0, r0, r6
 800c86a:	eb6c 0107 	sbc.w	r1, ip, r7
 800c86e:	3801      	subs	r0, #1
 800c870:	f161 0100 	sbc.w	r1, r1, #0
 800c874:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c878:	f7f3 fef6 	bl	8000668 <__aeabi_ldivmod>
 800c87c:	9b02      	ldr	r3, [sp, #8]
 800c87e:	3001      	adds	r0, #1
 800c880:	f141 0100 	adc.w	r1, r1, #0
 800c884:	fb00 f303 	mul.w	r3, r0, r3
 800c888:	fb01 330a 	mla	r3, r1, sl, r3
 800c88c:	fba0 0a0a 	umull	r0, sl, r0, sl
 800c890:	1986      	adds	r6, r0, r6
 800c892:	4453      	add	r3, sl
 800c894:	eb43 0707 	adc.w	r7, r3, r7
 800c898:	e7b9      	b.n	800c80e <rcl_timer_call+0x96>
 800c89a:	bf00      	nop

0800c89c <rcl_timer_is_ready>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	b378      	cbz	r0, 800c902 <rcl_timer_is_ready+0x66>
 800c8a2:	6803      	ldr	r3, [r0, #0]
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	b383      	cbz	r3, 800c90a <rcl_timer_is_ready+0x6e>
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	b351      	cbz	r1, 800c902 <rcl_timer_is_ready+0x66>
 800c8ac:	f3bf 8f5b 	dmb	ish
 800c8b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c8b4:	f3bf 8f5b 	dmb	ish
 800c8b8:	b953      	cbnz	r3, 800c8d0 <rcl_timer_is_ready+0x34>
 800c8ba:	6803      	ldr	r3, [r0, #0]
 800c8bc:	4669      	mov	r1, sp
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	f7ff ff4e 	bl	800c760 <rcl_clock_get_now>
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	b140      	cbz	r0, 800c8da <rcl_timer_is_ready+0x3e>
 800c8c8:	f240 3321 	movw	r3, #801	@ 0x321
 800c8cc:	4298      	cmp	r0, r3
 800c8ce:	d101      	bne.n	800c8d4 <rcl_timer_is_ready+0x38>
 800c8d0:	2600      	movs	r6, #0
 800c8d2:	702e      	strb	r6, [r5, #0]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	b002      	add	sp, #8
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	2105      	movs	r1, #5
 800c8de:	3028      	adds	r0, #40	@ 0x28
 800c8e0:	f001 fba6 	bl	800e030 <__atomic_load_8>
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	1ac0      	subs	r0, r0, r3
 800c8e8:	9b01      	ldr	r3, [sp, #4]
 800c8ea:	eb61 0103 	sbc.w	r1, r1, r3
 800c8ee:	2801      	cmp	r0, #1
 800c8f0:	f171 0300 	sbcs.w	r3, r1, #0
 800c8f4:	bfb4      	ite	lt
 800c8f6:	2301      	movlt	r3, #1
 800c8f8:	2300      	movge	r3, #0
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	702b      	strb	r3, [r5, #0]
 800c8fe:	b002      	add	sp, #8
 800c900:	bd70      	pop	{r4, r5, r6, pc}
 800c902:	260b      	movs	r6, #11
 800c904:	4630      	mov	r0, r6
 800c906:	b002      	add	sp, #8
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c90e:	e7e1      	b.n	800c8d4 <rcl_timer_is_ready+0x38>

0800c910 <rcl_timer_get_time_until_next_call>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	b330      	cbz	r0, 800c964 <rcl_timer_get_time_until_next_call+0x54>
 800c916:	6803      	ldr	r3, [r0, #0]
 800c918:	4604      	mov	r4, r0
 800c91a:	b33b      	cbz	r3, 800c96c <rcl_timer_get_time_until_next_call+0x5c>
 800c91c:	460d      	mov	r5, r1
 800c91e:	b309      	cbz	r1, 800c964 <rcl_timer_get_time_until_next_call+0x54>
 800c920:	f3bf 8f5b 	dmb	ish
 800c924:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c928:	f3bf 8f5b 	dmb	ish
 800c92c:	b9ab      	cbnz	r3, 800c95a <rcl_timer_get_time_until_next_call+0x4a>
 800c92e:	6803      	ldr	r3, [r0, #0]
 800c930:	4669      	mov	r1, sp
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	f7ff ff14 	bl	800c760 <rcl_clock_get_now>
 800c938:	4606      	mov	r6, r0
 800c93a:	b958      	cbnz	r0, 800c954 <rcl_timer_get_time_until_next_call+0x44>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	2105      	movs	r1, #5
 800c940:	3028      	adds	r0, #40	@ 0x28
 800c942:	f001 fb75 	bl	800e030 <__atomic_load_8>
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	1ac0      	subs	r0, r0, r3
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	6028      	str	r0, [r5, #0]
 800c94e:	eb61 0103 	sbc.w	r1, r1, r3
 800c952:	6069      	str	r1, [r5, #4]
 800c954:	4630      	mov	r0, r6
 800c956:	b002      	add	sp, #8
 800c958:	bd70      	pop	{r4, r5, r6, pc}
 800c95a:	f240 3621 	movw	r6, #801	@ 0x321
 800c95e:	4630      	mov	r0, r6
 800c960:	b002      	add	sp, #8
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	260b      	movs	r6, #11
 800c966:	4630      	mov	r0, r6
 800c968:	b002      	add	sp, #8
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c970:	e7f0      	b.n	800c954 <rcl_timer_get_time_until_next_call+0x44>
 800c972:	bf00      	nop

0800c974 <rcl_timer_get_guard_condition>:
 800c974:	b130      	cbz	r0, 800c984 <rcl_timer_get_guard_condition+0x10>
 800c976:	6800      	ldr	r0, [r0, #0]
 800c978:	b120      	cbz	r0, 800c984 <rcl_timer_get_guard_condition+0x10>
 800c97a:	68c3      	ldr	r3, [r0, #12]
 800c97c:	b10b      	cbz	r3, 800c982 <rcl_timer_get_guard_condition+0xe>
 800c97e:	3008      	adds	r0, #8
 800c980:	4770      	bx	lr
 800c982:	4618      	mov	r0, r3
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop

0800c988 <rcl_get_zero_initialized_wait_set>:
 800c988:	b510      	push	{r4, lr}
 800c98a:	4c08      	ldr	r4, [pc, #32]	@ (800c9ac <rcl_get_zero_initialized_wait_set+0x24>)
 800c98c:	4686      	mov	lr, r0
 800c98e:	4684      	mov	ip, r0
 800c990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c992:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c998:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c99c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c99e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	f8cc 3000 	str.w	r3, [ip]
 800c9a8:	4670      	mov	r0, lr
 800c9aa:	bd10      	pop	{r4, pc}
 800c9ac:	08016d20 	.word	0x08016d20

0800c9b0 <rcl_wait_set_is_valid>:
 800c9b0:	b118      	cbz	r0, 800c9ba <rcl_wait_set_is_valid+0xa>
 800c9b2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c9b4:	3800      	subs	r0, #0
 800c9b6:	bf18      	it	ne
 800c9b8:	2001      	movne	r0, #1
 800c9ba:	4770      	bx	lr

0800c9bc <rcl_wait_set_fini>:
 800c9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f000 8095 	beq.w	800caf2 <rcl_wait_set_fini+0x136>
 800c9c8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	2e00      	cmp	r6, #0
 800c9ce:	f000 808c 	beq.w	800caea <rcl_wait_set_fini+0x12e>
 800c9d2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800c9d4:	f003 f908 	bl	800fbe8 <rmw_destroy_wait_set>
 800c9d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c9da:	1e06      	subs	r6, r0, #0
 800c9dc:	bf18      	it	ne
 800c9de:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800c9e2:	2d00      	cmp	r5, #0
 800c9e4:	f000 8081 	beq.w	800caea <rcl_wait_set_fini+0x12e>
 800c9e8:	6820      	ldr	r0, [r4, #0]
 800c9ea:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800c9ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c9f0:	2700      	movs	r7, #0
 800c9f2:	6067      	str	r7, [r4, #4]
 800c9f4:	602f      	str	r7, [r5, #0]
 800c9f6:	b120      	cbz	r0, 800ca02 <rcl_wait_set_fini+0x46>
 800c9f8:	9101      	str	r1, [sp, #4]
 800c9fa:	47c0      	blx	r8
 800c9fc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c9fe:	9901      	ldr	r1, [sp, #4]
 800ca00:	6027      	str	r7, [r4, #0]
 800ca02:	68a8      	ldr	r0, [r5, #8]
 800ca04:	b120      	cbz	r0, 800ca10 <rcl_wait_set_fini+0x54>
 800ca06:	47c0      	blx	r8
 800ca08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800ca10:	68a0      	ldr	r0, [r4, #8]
 800ca12:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca14:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	f8c4 800c 	str.w	r8, [r4, #12]
 800ca1e:	f8c5 800c 	str.w	r8, [r5, #12]
 800ca22:	b128      	cbz	r0, 800ca30 <rcl_wait_set_fini+0x74>
 800ca24:	47b8      	blx	r7
 800ca26:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca28:	f8c4 8008 	str.w	r8, [r4, #8]
 800ca2c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca2e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca30:	6968      	ldr	r0, [r5, #20]
 800ca32:	f04f 0800 	mov.w	r8, #0
 800ca36:	f8c5 8010 	str.w	r8, [r5, #16]
 800ca3a:	b128      	cbz	r0, 800ca48 <rcl_wait_set_fini+0x8c>
 800ca3c:	47b8      	blx	r7
 800ca3e:	f8c5 8014 	str.w	r8, [r5, #20]
 800ca42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca44:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca46:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca48:	6920      	ldr	r0, [r4, #16]
 800ca4a:	f04f 0800 	mov.w	r8, #0
 800ca4e:	f8c4 8014 	str.w	r8, [r4, #20]
 800ca52:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800ca56:	b128      	cbz	r0, 800ca64 <rcl_wait_set_fini+0xa8>
 800ca58:	47b8      	blx	r7
 800ca5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca5c:	f8c4 8010 	str.w	r8, [r4, #16]
 800ca60:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca64:	69a0      	ldr	r0, [r4, #24]
 800ca66:	f04f 0800 	mov.w	r8, #0
 800ca6a:	f8c4 801c 	str.w	r8, [r4, #28]
 800ca6e:	f8c5 8018 	str.w	r8, [r5, #24]
 800ca72:	b128      	cbz	r0, 800ca80 <rcl_wait_set_fini+0xc4>
 800ca74:	9101      	str	r1, [sp, #4]
 800ca76:	47b8      	blx	r7
 800ca78:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca7a:	9901      	ldr	r1, [sp, #4]
 800ca7c:	f8c4 8018 	str.w	r8, [r4, #24]
 800ca80:	6a28      	ldr	r0, [r5, #32]
 800ca82:	b120      	cbz	r0, 800ca8e <rcl_wait_set_fini+0xd2>
 800ca84:	47b8      	blx	r7
 800ca86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800ca8e:	6a20      	ldr	r0, [r4, #32]
 800ca90:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800ca94:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca96:	2700      	movs	r7, #0
 800ca98:	6267      	str	r7, [r4, #36]	@ 0x24
 800ca9a:	626f      	str	r7, [r5, #36]	@ 0x24
 800ca9c:	b120      	cbz	r0, 800caa8 <rcl_wait_set_fini+0xec>
 800ca9e:	9101      	str	r1, [sp, #4]
 800caa0:	47c0      	blx	r8
 800caa2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	6227      	str	r7, [r4, #32]
 800caa8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800caaa:	b120      	cbz	r0, 800cab6 <rcl_wait_set_fini+0xfa>
 800caac:	47c0      	blx	r8
 800caae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cab0:	2300      	movs	r3, #0
 800cab2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800cab6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cab8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800cabc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800cabe:	2700      	movs	r7, #0
 800cac0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800cac2:	632f      	str	r7, [r5, #48]	@ 0x30
 800cac4:	b120      	cbz	r0, 800cad0 <rcl_wait_set_fini+0x114>
 800cac6:	9101      	str	r1, [sp, #4]
 800cac8:	47c0      	blx	r8
 800caca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cacc:	9901      	ldr	r1, [sp, #4]
 800cace:	62a7      	str	r7, [r4, #40]	@ 0x28
 800cad0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800cad2:	b120      	cbz	r0, 800cade <rcl_wait_set_fini+0x122>
 800cad4:	47c0      	blx	r8
 800cad6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cad8:	2300      	movs	r3, #0
 800cada:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800cade:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800cae0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800cae2:	4628      	mov	r0, r5
 800cae4:	4798      	blx	r3
 800cae6:	2300      	movs	r3, #0
 800cae8:	6323      	str	r3, [r4, #48]	@ 0x30
 800caea:	4630      	mov	r0, r6
 800caec:	b002      	add	sp, #8
 800caee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf2:	260b      	movs	r6, #11
 800caf4:	4630      	mov	r0, r6
 800caf6:	b002      	add	sp, #8
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cafc <rcl_wait_set_add_subscription>:
 800cafc:	b318      	cbz	r0, 800cb46 <rcl_wait_set_add_subscription+0x4a>
 800cafe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb00:	b570      	push	{r4, r5, r6, lr}
 800cb02:	4604      	mov	r4, r0
 800cb04:	b30b      	cbz	r3, 800cb4a <rcl_wait_set_add_subscription+0x4e>
 800cb06:	b319      	cbz	r1, 800cb50 <rcl_wait_set_add_subscription+0x54>
 800cb08:	681d      	ldr	r5, [r3, #0]
 800cb0a:	6840      	ldr	r0, [r0, #4]
 800cb0c:	4285      	cmp	r5, r0
 800cb0e:	d217      	bcs.n	800cb40 <rcl_wait_set_add_subscription+0x44>
 800cb10:	6820      	ldr	r0, [r4, #0]
 800cb12:	1c6e      	adds	r6, r5, #1
 800cb14:	601e      	str	r6, [r3, #0]
 800cb16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800cb1a:	b102      	cbz	r2, 800cb1e <rcl_wait_set_add_subscription+0x22>
 800cb1c:	6015      	str	r5, [r2, #0]
 800cb1e:	4608      	mov	r0, r1
 800cb20:	f7ff fd7e 	bl	800c620 <rcl_subscription_get_rmw_handle>
 800cb24:	b150      	cbz	r0, 800cb3c <rcl_wait_set_add_subscription+0x40>
 800cb26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb28:	6842      	ldr	r2, [r0, #4]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800cb32:	6853      	ldr	r3, [r2, #4]
 800cb34:	3301      	adds	r3, #1
 800cb36:	2000      	movs	r0, #0
 800cb38:	6053      	str	r3, [r2, #4]
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	f240 3086 	movw	r0, #902	@ 0x386
 800cb44:	bd70      	pop	{r4, r5, r6, pc}
 800cb46:	200b      	movs	r0, #11
 800cb48:	4770      	bx	lr
 800cb4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	200b      	movs	r0, #11
 800cb52:	bd70      	pop	{r4, r5, r6, pc}

0800cb54 <rcl_wait_set_clear>:
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d073      	beq.n	800cc40 <rcl_wait_set_clear+0xec>
 800cb58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d070      	beq.n	800cc44 <rcl_wait_set_clear+0xf0>
 800cb62:	6800      	ldr	r0, [r0, #0]
 800cb64:	b138      	cbz	r0, 800cb76 <rcl_wait_set_clear+0x22>
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	0092      	lsls	r2, r2, #2
 800cb6c:	f008 fe9c 	bl	80158a8 <memset>
 800cb70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	68a0      	ldr	r0, [r4, #8]
 800cb78:	b138      	cbz	r0, 800cb8a <rcl_wait_set_clear+0x36>
 800cb7a:	68e2      	ldr	r2, [r4, #12]
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	0092      	lsls	r2, r2, #2
 800cb80:	f008 fe92 	bl	80158a8 <memset>
 800cb84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb86:	2200      	movs	r2, #0
 800cb88:	60da      	str	r2, [r3, #12]
 800cb8a:	69a0      	ldr	r0, [r4, #24]
 800cb8c:	b138      	cbz	r0, 800cb9e <rcl_wait_set_clear+0x4a>
 800cb8e:	69e2      	ldr	r2, [r4, #28]
 800cb90:	2100      	movs	r1, #0
 800cb92:	0092      	lsls	r2, r2, #2
 800cb94:	f008 fe88 	bl	80158a8 <memset>
 800cb98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	619a      	str	r2, [r3, #24]
 800cb9e:	6a20      	ldr	r0, [r4, #32]
 800cba0:	b138      	cbz	r0, 800cbb2 <rcl_wait_set_clear+0x5e>
 800cba2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cba4:	2100      	movs	r1, #0
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	f008 fe7e 	bl	80158a8 <memset>
 800cbac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbae:	2200      	movs	r2, #0
 800cbb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800cbb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cbb4:	b138      	cbz	r0, 800cbc6 <rcl_wait_set_clear+0x72>
 800cbb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbb8:	2100      	movs	r1, #0
 800cbba:	0092      	lsls	r2, r2, #2
 800cbbc:	f008 fe74 	bl	80158a8 <memset>
 800cbc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbc6:	6920      	ldr	r0, [r4, #16]
 800cbc8:	b138      	cbz	r0, 800cbda <rcl_wait_set_clear+0x86>
 800cbca:	6962      	ldr	r2, [r4, #20]
 800cbcc:	2100      	movs	r1, #0
 800cbce:	0092      	lsls	r2, r2, #2
 800cbd0:	f008 fe6a 	bl	80158a8 <memset>
 800cbd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	641a      	str	r2, [r3, #64]	@ 0x40
 800cbda:	6898      	ldr	r0, [r3, #8]
 800cbdc:	b138      	cbz	r0, 800cbee <rcl_wait_set_clear+0x9a>
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	0092      	lsls	r2, r2, #2
 800cbe4:	f008 fe60 	bl	80158a8 <memset>
 800cbe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbea:	2200      	movs	r2, #0
 800cbec:	605a      	str	r2, [r3, #4]
 800cbee:	6958      	ldr	r0, [r3, #20]
 800cbf0:	b138      	cbz	r0, 800cc02 <rcl_wait_set_clear+0xae>
 800cbf2:	691a      	ldr	r2, [r3, #16]
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	0092      	lsls	r2, r2, #2
 800cbf8:	f008 fe56 	bl	80158a8 <memset>
 800cbfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbfe:	2200      	movs	r2, #0
 800cc00:	611a      	str	r2, [r3, #16]
 800cc02:	6a18      	ldr	r0, [r3, #32]
 800cc04:	b138      	cbz	r0, 800cc16 <rcl_wait_set_clear+0xc2>
 800cc06:	69da      	ldr	r2, [r3, #28]
 800cc08:	2100      	movs	r1, #0
 800cc0a:	0092      	lsls	r2, r2, #2
 800cc0c:	f008 fe4c 	bl	80158a8 <memset>
 800cc10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc12:	2200      	movs	r2, #0
 800cc14:	61da      	str	r2, [r3, #28]
 800cc16:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800cc18:	b138      	cbz	r0, 800cc2a <rcl_wait_set_clear+0xd6>
 800cc1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	0092      	lsls	r2, r2, #2
 800cc20:	f008 fe42 	bl	80158a8 <memset>
 800cc24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc26:	2200      	movs	r2, #0
 800cc28:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc2a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cc2c:	b138      	cbz	r0, 800cc3e <rcl_wait_set_clear+0xea>
 800cc2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc30:	2100      	movs	r1, #0
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	f008 fe38 	bl	80158a8 <memset>
 800cc38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	6358      	str	r0, [r3, #52]	@ 0x34
 800cc3e:	bd10      	pop	{r4, pc}
 800cc40:	200b      	movs	r0, #11
 800cc42:	4770      	bx	lr
 800cc44:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop

0800cc4c <rcl_wait_set_resize>:
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f000 8185 	beq.w	800cf5c <rcl_wait_set_resize+0x310>
 800cc52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc56:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800cc58:	b083      	sub	sp, #12
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	2c00      	cmp	r4, #0
 800cc5e:	f000 817f 	beq.w	800cf60 <rcl_wait_set_resize+0x314>
 800cc62:	f04f 0900 	mov.w	r9, #0
 800cc66:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800cc6a:	461f      	mov	r7, r3
 800cc6c:	4688      	mov	r8, r1
 800cc6e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800cc72:	4616      	mov	r6, r2
 800cc74:	f8c0 9004 	str.w	r9, [r0, #4]
 800cc78:	f8c4 9000 	str.w	r9, [r4]
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	f000 80bd 	beq.w	800cdfc <rcl_wait_set_resize+0x1b0>
 800cc82:	008c      	lsls	r4, r1, #2
 800cc84:	6800      	ldr	r0, [r0, #0]
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	4652      	mov	r2, sl
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	4798      	blx	r3
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	6028      	str	r0, [r5, #0]
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f000 80cb 	beq.w	800ce2e <rcl_wait_set_resize+0x1e2>
 800cc98:	4622      	mov	r2, r4
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	f008 fe03 	bl	80158a8 <memset>
 800cca2:	f8c5 8004 	str.w	r8, [r5, #4]
 800cca6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800ccaa:	9b01      	ldr	r3, [sp, #4]
 800ccac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ccb0:	f8c8 9004 	str.w	r9, [r8, #4]
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4798      	blx	r3
 800ccba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ccbc:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f000 80ac 	beq.w	800ce20 <rcl_wait_set_resize+0x1d4>
 800ccc8:	4622      	mov	r2, r4
 800ccca:	4649      	mov	r1, r9
 800cccc:	4618      	mov	r0, r3
 800ccce:	f008 fdeb 	bl	80158a8 <memset>
 800ccd2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ccd4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ccd8:	f04f 0800 	mov.w	r8, #0
 800ccdc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800cce0:	f8c5 800c 	str.w	r8, [r5, #12]
 800cce4:	f8c4 800c 	str.w	r8, [r4, #12]
 800cce8:	2e00      	cmp	r6, #0
 800ccea:	f040 80a4 	bne.w	800ce36 <rcl_wait_set_resize+0x1ea>
 800ccee:	68a8      	ldr	r0, [r5, #8]
 800ccf0:	b128      	cbz	r0, 800ccfe <rcl_wait_set_resize+0xb2>
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4790      	blx	r2
 800ccf6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ccf8:	60ae      	str	r6, [r5, #8]
 800ccfa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ccfe:	f04f 0800 	mov.w	r8, #0
 800cd02:	19f6      	adds	r6, r6, r7
 800cd04:	f8c4 8010 	str.w	r8, [r4, #16]
 800cd08:	f040 80ac 	bne.w	800ce64 <rcl_wait_set_resize+0x218>
 800cd0c:	6960      	ldr	r0, [r4, #20]
 800cd0e:	b130      	cbz	r0, 800cd1e <rcl_wait_set_resize+0xd2>
 800cd10:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cd12:	4649      	mov	r1, r9
 800cd14:	4798      	blx	r3
 800cd16:	6166      	str	r6, [r4, #20]
 800cd18:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cd1a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800cd1e:	2600      	movs	r6, #0
 800cd20:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800cd24:	616e      	str	r6, [r5, #20]
 800cd26:	6426      	str	r6, [r4, #64]	@ 0x40
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	f040 80ad 	bne.w	800ce88 <rcl_wait_set_resize+0x23c>
 800cd2e:	6928      	ldr	r0, [r5, #16]
 800cd30:	b138      	cbz	r0, 800cd42 <rcl_wait_set_resize+0xf6>
 800cd32:	4649      	mov	r1, r9
 800cd34:	47d0      	blx	sl
 800cd36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cd38:	612f      	str	r7, [r5, #16]
 800cd3a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800cd3e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800cd42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd44:	2600      	movs	r6, #0
 800cd46:	61ee      	str	r6, [r5, #28]
 800cd48:	61a6      	str	r6, [r4, #24]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 80af 	bne.w	800ceae <rcl_wait_set_resize+0x262>
 800cd50:	69a8      	ldr	r0, [r5, #24]
 800cd52:	b120      	cbz	r0, 800cd5e <rcl_wait_set_resize+0x112>
 800cd54:	4649      	mov	r1, r9
 800cd56:	47d0      	blx	sl
 800cd58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cd5c:	61ab      	str	r3, [r5, #24]
 800cd5e:	6a20      	ldr	r0, [r4, #32]
 800cd60:	b128      	cbz	r0, 800cd6e <rcl_wait_set_resize+0x122>
 800cd62:	4649      	mov	r1, r9
 800cd64:	47d0      	blx	sl
 800cd66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cd6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd70:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800cd72:	2600      	movs	r6, #0
 800cd74:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800cd78:	626e      	str	r6, [r5, #36]	@ 0x24
 800cd7a:	6266      	str	r6, [r4, #36]	@ 0x24
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 80b6 	beq.w	800ceee <rcl_wait_set_resize+0x2a2>
 800cd82:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800cd86:	6a28      	ldr	r0, [r5, #32]
 800cd88:	463a      	mov	r2, r7
 800cd8a:	4651      	mov	r1, sl
 800cd8c:	47c8      	blx	r9
 800cd8e:	6228      	str	r0, [r5, #32]
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d04c      	beq.n	800ce2e <rcl_wait_set_resize+0x1e2>
 800cd94:	4652      	mov	r2, sl
 800cd96:	4631      	mov	r1, r6
 800cd98:	f008 fd86 	bl	80158a8 <memset>
 800cd9c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cd9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cda0:	626b      	str	r3, [r5, #36]	@ 0x24
 800cda2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cda4:	62a6      	str	r6, [r4, #40]	@ 0x28
 800cda6:	463a      	mov	r2, r7
 800cda8:	4651      	mov	r1, sl
 800cdaa:	47c8      	blx	r9
 800cdac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cdae:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800cdb0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	f000 80f0 	beq.w	800cf98 <rcl_wait_set_resize+0x34c>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4652      	mov	r2, sl
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	f008 fd73 	bl	80158a8 <memset>
 800cdc2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdc6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800cdc8:	2600      	movs	r6, #0
 800cdca:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800cdce:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800cdd0:	6326      	str	r6, [r4, #48]	@ 0x30
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f040 809d 	bne.w	800cf12 <rcl_wait_set_resize+0x2c6>
 800cdd8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800cdda:	b120      	cbz	r0, 800cde6 <rcl_wait_set_resize+0x19a>
 800cddc:	4639      	mov	r1, r7
 800cdde:	47c0      	blx	r8
 800cde0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cde2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cde4:	62ab      	str	r3, [r5, #40]	@ 0x28
 800cde6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800cde8:	b310      	cbz	r0, 800ce30 <rcl_wait_set_resize+0x1e4>
 800cdea:	4639      	mov	r1, r7
 800cdec:	47c0      	blx	r8
 800cdee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800cdf6:	b003      	add	sp, #12
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfc:	6800      	ldr	r0, [r0, #0]
 800cdfe:	b120      	cbz	r0, 800ce0a <rcl_wait_set_resize+0x1be>
 800ce00:	4651      	mov	r1, sl
 800ce02:	47d8      	blx	fp
 800ce04:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ce06:	f8c5 8000 	str.w	r8, [r5]
 800ce0a:	68a0      	ldr	r0, [r4, #8]
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f af61 	beq.w	800ccd4 <rcl_wait_set_resize+0x88>
 800ce12:	4651      	mov	r1, sl
 800ce14:	47d8      	blx	fp
 800ce16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800ce1e:	e759      	b.n	800ccd4 <rcl_wait_set_resize+0x88>
 800ce20:	6828      	ldr	r0, [r5, #0]
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	4651      	mov	r1, sl
 800ce26:	47d8      	blx	fp
 800ce28:	9b01      	ldr	r3, [sp, #4]
 800ce2a:	e9c5 3300 	strd	r3, r3, [r5]
 800ce2e:	200a      	movs	r0, #10
 800ce30:	b003      	add	sp, #12
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	00b4      	lsls	r4, r6, #2
 800ce38:	68a8      	ldr	r0, [r5, #8]
 800ce3a:	464a      	mov	r2, r9
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	4798      	blx	r3
 800ce40:	60a8      	str	r0, [r5, #8]
 800ce42:	2800      	cmp	r0, #0
 800ce44:	d0f3      	beq.n	800ce2e <rcl_wait_set_resize+0x1e2>
 800ce46:	4622      	mov	r2, r4
 800ce48:	4641      	mov	r1, r8
 800ce4a:	f008 fd2d 	bl	80158a8 <memset>
 800ce4e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ce50:	60ee      	str	r6, [r5, #12]
 800ce52:	f04f 0800 	mov.w	r8, #0
 800ce56:	19f6      	adds	r6, r6, r7
 800ce58:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ce5c:	f8c4 8010 	str.w	r8, [r4, #16]
 800ce60:	f43f af54 	beq.w	800cd0c <rcl_wait_set_resize+0xc0>
 800ce64:	00b6      	lsls	r6, r6, #2
 800ce66:	464a      	mov	r2, r9
 800ce68:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ce6a:	6960      	ldr	r0, [r4, #20]
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4798      	blx	r3
 800ce70:	4681      	mov	r9, r0
 800ce72:	6160      	str	r0, [r4, #20]
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d076      	beq.n	800cf66 <rcl_wait_set_resize+0x31a>
 800ce78:	4632      	mov	r2, r6
 800ce7a:	4641      	mov	r1, r8
 800ce7c:	f008 fd14 	bl	80158a8 <memset>
 800ce80:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ce82:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ce86:	e74a      	b.n	800cd1e <rcl_wait_set_resize+0xd2>
 800ce88:	00bc      	lsls	r4, r7, #2
 800ce8a:	6928      	ldr	r0, [r5, #16]
 800ce8c:	464a      	mov	r2, r9
 800ce8e:	4621      	mov	r1, r4
 800ce90:	47c0      	blx	r8
 800ce92:	6128      	str	r0, [r5, #16]
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d0ca      	beq.n	800ce2e <rcl_wait_set_resize+0x1e2>
 800ce98:	4622      	mov	r2, r4
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	f008 fd04 	bl	80158a8 <memset>
 800cea0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cea2:	616f      	str	r7, [r5, #20]
 800cea4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800cea8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ceac:	e749      	b.n	800cd42 <rcl_wait_set_resize+0xf6>
 800ceae:	009c      	lsls	r4, r3, #2
 800ceb0:	69a8      	ldr	r0, [r5, #24]
 800ceb2:	464a      	mov	r2, r9
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	47c0      	blx	r8
 800ceb8:	61a8      	str	r0, [r5, #24]
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d0b7      	beq.n	800ce2e <rcl_wait_set_resize+0x1e2>
 800cebe:	4622      	mov	r2, r4
 800cec0:	4631      	mov	r1, r6
 800cec2:	f008 fcf1 	bl	80158a8 <memset>
 800cec6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800cec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceca:	61eb      	str	r3, [r5, #28]
 800cecc:	6a38      	ldr	r0, [r7, #32]
 800cece:	61fe      	str	r6, [r7, #28]
 800ced0:	464a      	mov	r2, r9
 800ced2:	4621      	mov	r1, r4
 800ced4:	47c0      	blx	r8
 800ced6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ced8:	6238      	str	r0, [r7, #32]
 800ceda:	6a1f      	ldr	r7, [r3, #32]
 800cedc:	2f00      	cmp	r7, #0
 800cede:	d054      	beq.n	800cf8a <rcl_wait_set_resize+0x33e>
 800cee0:	4622      	mov	r2, r4
 800cee2:	4631      	mov	r1, r6
 800cee4:	4638      	mov	r0, r7
 800cee6:	f008 fcdf 	bl	80158a8 <memset>
 800ceea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ceec:	e73f      	b.n	800cd6e <rcl_wait_set_resize+0x122>
 800ceee:	6a28      	ldr	r0, [r5, #32]
 800cef0:	b120      	cbz	r0, 800cefc <rcl_wait_set_resize+0x2b0>
 800cef2:	4639      	mov	r1, r7
 800cef4:	47c0      	blx	r8
 800cef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cef8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cefa:	622b      	str	r3, [r5, #32]
 800cefc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af60 	beq.w	800cdc4 <rcl_wait_set_resize+0x178>
 800cf04:	4639      	mov	r1, r7
 800cf06:	47c0      	blx	r8
 800cf08:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800cf10:	e758      	b.n	800cdc4 <rcl_wait_set_resize+0x178>
 800cf12:	009c      	lsls	r4, r3, #2
 800cf14:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800cf16:	463a      	mov	r2, r7
 800cf18:	4621      	mov	r1, r4
 800cf1a:	47c8      	blx	r9
 800cf1c:	62a8      	str	r0, [r5, #40]	@ 0x28
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d085      	beq.n	800ce2e <rcl_wait_set_resize+0x1e2>
 800cf22:	4622      	mov	r2, r4
 800cf24:	4631      	mov	r1, r6
 800cf26:	f008 fcbf 	bl	80158a8 <memset>
 800cf2a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800cf2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf30:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800cf32:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800cf36:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	47c8      	blx	r9
 800cf40:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cf42:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800cf46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf48:	b36b      	cbz	r3, 800cfa6 <rcl_wait_set_resize+0x35a>
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f008 fcaa 	bl	80158a8 <memset>
 800cf54:	4630      	mov	r0, r6
 800cf56:	b003      	add	sp, #12
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	200b      	movs	r0, #11
 800cf5e:	4770      	bx	lr
 800cf60:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cf64:	e764      	b.n	800ce30 <rcl_wait_set_resize+0x1e4>
 800cf66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cf68:	68a8      	ldr	r0, [r5, #8]
 800cf6a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800cf6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf6e:	4798      	blx	r3
 800cf70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cf72:	6928      	ldr	r0, [r5, #16]
 800cf74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf76:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800cf78:	f8c5 900c 	str.w	r9, [r5, #12]
 800cf7c:	f8c5 9008 	str.w	r9, [r5, #8]
 800cf80:	4790      	blx	r2
 800cf82:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800cf86:	200a      	movs	r0, #10
 800cf88:	e752      	b.n	800ce30 <rcl_wait_set_resize+0x1e4>
 800cf8a:	69a8      	ldr	r0, [r5, #24]
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	47d0      	blx	sl
 800cf90:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800cf94:	200a      	movs	r0, #10
 800cf96:	e74b      	b.n	800ce30 <rcl_wait_set_resize+0x1e4>
 800cf98:	6a28      	ldr	r0, [r5, #32]
 800cf9a:	4639      	mov	r1, r7
 800cf9c:	47c0      	blx	r8
 800cf9e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800cfa2:	200a      	movs	r0, #10
 800cfa4:	e744      	b.n	800ce30 <rcl_wait_set_resize+0x1e4>
 800cfa6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	4639      	mov	r1, r7
 800cfac:	47c0      	blx	r8
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	200a      	movs	r0, #10
 800cfb2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800cfb6:	e73b      	b.n	800ce30 <rcl_wait_set_resize+0x1e4>

0800cfb8 <rcl_wait_set_init>:
 800cfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	a810      	add	r0, sp, #64	@ 0x40
 800cfc2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800cfc6:	460f      	mov	r7, r1
 800cfc8:	4690      	mov	r8, r2
 800cfca:	4699      	mov	r9, r3
 800cfcc:	f7fc ffea 	bl	8009fa4 <rcutils_allocator_is_valid>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d06b      	beq.n	800d0ac <rcl_wait_set_init+0xf4>
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	d069      	beq.n	800d0ac <rcl_wait_set_init+0xf4>
 800cfd8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cfda:	b125      	cbz	r5, 800cfe6 <rcl_wait_set_init+0x2e>
 800cfdc:	2564      	movs	r5, #100	@ 0x64
 800cfde:	4628      	mov	r0, r5
 800cfe0:	b004      	add	sp, #16
 800cfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe6:	f1ba 0f00 	cmp.w	sl, #0
 800cfea:	d05f      	beq.n	800d0ac <rcl_wait_set_init+0xf4>
 800cfec:	4650      	mov	r0, sl
 800cfee:	f7fe fcbb 	bl	800b968 <rcl_context_is_valid>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d067      	beq.n	800d0c6 <rcl_wait_set_init+0x10e>
 800cff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cff8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800cffa:	205c      	movs	r0, #92	@ 0x5c
 800cffc:	4798      	blx	r3
 800cffe:	6320      	str	r0, [r4, #48]	@ 0x30
 800d000:	2800      	cmp	r0, #0
 800d002:	d062      	beq.n	800d0ca <rcl_wait_set_init+0x112>
 800d004:	4629      	mov	r1, r5
 800d006:	225c      	movs	r2, #92	@ 0x5c
 800d008:	f008 fc4e 	bl	80158a8 <memset>
 800d00c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800d010:	eb03 0e02 	add.w	lr, r3, r2
 800d014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d016:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800d018:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800d01c:	449e      	add	lr, r3
 800d01e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d022:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800d026:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800d02a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800d02e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800d032:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800d036:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800d03a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800d03e:	f8da a000 	ldr.w	sl, [sl]
 800d042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d044:	44c6      	add	lr, r8
 800d046:	f8dc 3000 	ldr.w	r3, [ip]
 800d04a:	602b      	str	r3, [r5, #0]
 800d04c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800d050:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800d054:	f002 fdbe 	bl	800fbd4 <rmw_create_wait_set>
 800d058:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d05a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800d05c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d05e:	b350      	cbz	r0, 800d0b6 <rcl_wait_set_init+0xfe>
 800d060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d062:	9302      	str	r3, [sp, #8]
 800d064:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	4642      	mov	r2, r8
 800d06e:	464b      	mov	r3, r9
 800d070:	4639      	mov	r1, r7
 800d072:	4620      	mov	r0, r4
 800d074:	f7ff fdea 	bl	800cc4c <rcl_wait_set_resize>
 800d078:	4605      	mov	r5, r0
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0af      	beq.n	800cfde <rcl_wait_set_init+0x26>
 800d07e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d080:	bb2b      	cbnz	r3, 800d0ce <rcl_wait_set_init+0x116>
 800d082:	2600      	movs	r6, #0
 800d084:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800d088:	9600      	str	r6, [sp, #0]
 800d08a:	4633      	mov	r3, r6
 800d08c:	4632      	mov	r2, r6
 800d08e:	4631      	mov	r1, r6
 800d090:	4620      	mov	r0, r4
 800d092:	f7ff fddb 	bl	800cc4c <rcl_wait_set_resize>
 800d096:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d098:	2800      	cmp	r0, #0
 800d09a:	d0a0      	beq.n	800cfde <rcl_wait_set_init+0x26>
 800d09c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d09e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800d0a0:	4798      	blx	r3
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	6326      	str	r6, [r4, #48]	@ 0x30
 800d0a6:	b004      	add	sp, #16
 800d0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ac:	250b      	movs	r5, #11
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	b004      	add	sp, #16
 800d0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b6:	2501      	movs	r5, #1
 800d0b8:	f002 fd96 	bl	800fbe8 <rmw_destroy_wait_set>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	bf18      	it	ne
 800d0c0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800d0c4:	e7dd      	b.n	800d082 <rcl_wait_set_init+0xca>
 800d0c6:	2565      	movs	r5, #101	@ 0x65
 800d0c8:	e789      	b.n	800cfde <rcl_wait_set_init+0x26>
 800d0ca:	250a      	movs	r5, #10
 800d0cc:	e787      	b.n	800cfde <rcl_wait_set_init+0x26>
 800d0ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d0d0:	e7f2      	b.n	800d0b8 <rcl_wait_set_init+0x100>
 800d0d2:	bf00      	nop

0800d0d4 <rcl_wait_set_add_guard_condition>:
 800d0d4:	b318      	cbz	r0, 800d11e <rcl_wait_set_add_guard_condition+0x4a>
 800d0d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	4604      	mov	r4, r0
 800d0dc:	b30b      	cbz	r3, 800d122 <rcl_wait_set_add_guard_condition+0x4e>
 800d0de:	b319      	cbz	r1, 800d128 <rcl_wait_set_add_guard_condition+0x54>
 800d0e0:	68dd      	ldr	r5, [r3, #12]
 800d0e2:	68c0      	ldr	r0, [r0, #12]
 800d0e4:	4285      	cmp	r5, r0
 800d0e6:	d217      	bcs.n	800d118 <rcl_wait_set_add_guard_condition+0x44>
 800d0e8:	68a0      	ldr	r0, [r4, #8]
 800d0ea:	1c6e      	adds	r6, r5, #1
 800d0ec:	60de      	str	r6, [r3, #12]
 800d0ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d0f2:	b102      	cbz	r2, 800d0f6 <rcl_wait_set_add_guard_condition+0x22>
 800d0f4:	6015      	str	r5, [r2, #0]
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	f006 fdc0 	bl	8013c7c <rcl_guard_condition_get_rmw_handle>
 800d0fc:	b150      	cbz	r0, 800d114 <rcl_wait_set_add_guard_condition+0x40>
 800d0fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d100:	6842      	ldr	r2, [r0, #4]
 800d102:	695b      	ldr	r3, [r3, #20]
 800d104:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d108:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d10a:	6913      	ldr	r3, [r2, #16]
 800d10c:	3301      	adds	r3, #1
 800d10e:	2000      	movs	r0, #0
 800d110:	6113      	str	r3, [r2, #16]
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	2001      	movs	r0, #1
 800d116:	bd70      	pop	{r4, r5, r6, pc}
 800d118:	f240 3086 	movw	r0, #902	@ 0x386
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	200b      	movs	r0, #11
 800d120:	4770      	bx	lr
 800d122:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	200b      	movs	r0, #11
 800d12a:	bd70      	pop	{r4, r5, r6, pc}

0800d12c <rcl_wait_set_add_timer>:
 800d12c:	b328      	cbz	r0, 800d17a <rcl_wait_set_add_timer+0x4e>
 800d12e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	4604      	mov	r4, r0
 800d134:	b31b      	cbz	r3, 800d17e <rcl_wait_set_add_timer+0x52>
 800d136:	b329      	cbz	r1, 800d184 <rcl_wait_set_add_timer+0x58>
 800d138:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d13a:	6965      	ldr	r5, [r4, #20]
 800d13c:	42a8      	cmp	r0, r5
 800d13e:	d219      	bcs.n	800d174 <rcl_wait_set_add_timer+0x48>
 800d140:	6925      	ldr	r5, [r4, #16]
 800d142:	1c46      	adds	r6, r0, #1
 800d144:	641e      	str	r6, [r3, #64]	@ 0x40
 800d146:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800d14a:	b102      	cbz	r2, 800d14e <rcl_wait_set_add_timer+0x22>
 800d14c:	6010      	str	r0, [r2, #0]
 800d14e:	4608      	mov	r0, r1
 800d150:	f7ff fc10 	bl	800c974 <rcl_timer_get_guard_condition>
 800d154:	b168      	cbz	r0, 800d172 <rcl_wait_set_add_timer+0x46>
 800d156:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d158:	68e3      	ldr	r3, [r4, #12]
 800d15a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800d15c:	3b01      	subs	r3, #1
 800d15e:	441d      	add	r5, r3
 800d160:	f006 fd8c 	bl	8013c7c <rcl_guard_condition_get_rmw_handle>
 800d164:	b180      	cbz	r0, 800d188 <rcl_wait_set_add_timer+0x5c>
 800d166:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d168:	6842      	ldr	r2, [r0, #4]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d170:	2000      	movs	r0, #0
 800d172:	bd70      	pop	{r4, r5, r6, pc}
 800d174:	f240 3086 	movw	r0, #902	@ 0x386
 800d178:	bd70      	pop	{r4, r5, r6, pc}
 800d17a:	200b      	movs	r0, #11
 800d17c:	4770      	bx	lr
 800d17e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	200b      	movs	r0, #11
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	2001      	movs	r0, #1
 800d18a:	bd70      	pop	{r4, r5, r6, pc}

0800d18c <rcl_wait_set_add_client>:
 800d18c:	b318      	cbz	r0, 800d1d6 <rcl_wait_set_add_client+0x4a>
 800d18e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4604      	mov	r4, r0
 800d194:	b30b      	cbz	r3, 800d1da <rcl_wait_set_add_client+0x4e>
 800d196:	b319      	cbz	r1, 800d1e0 <rcl_wait_set_add_client+0x54>
 800d198:	699d      	ldr	r5, [r3, #24]
 800d19a:	69c0      	ldr	r0, [r0, #28]
 800d19c:	4285      	cmp	r5, r0
 800d19e:	d217      	bcs.n	800d1d0 <rcl_wait_set_add_client+0x44>
 800d1a0:	69a0      	ldr	r0, [r4, #24]
 800d1a2:	1c6e      	adds	r6, r5, #1
 800d1a4:	619e      	str	r6, [r3, #24]
 800d1a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d1aa:	b102      	cbz	r2, 800d1ae <rcl_wait_set_add_client+0x22>
 800d1ac:	6015      	str	r5, [r2, #0]
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	f7fe fb40 	bl	800b834 <rcl_client_get_rmw_handle>
 800d1b4:	b150      	cbz	r0, 800d1cc <rcl_wait_set_add_client+0x40>
 800d1b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d1b8:	6842      	ldr	r2, [r0, #4]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d1c2:	69d3      	ldr	r3, [r2, #28]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	61d3      	str	r3, [r2, #28]
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	2001      	movs	r0, #1
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	f240 3086 	movw	r0, #902	@ 0x386
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
 800d1d6:	200b      	movs	r0, #11
 800d1d8:	4770      	bx	lr
 800d1da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	200b      	movs	r0, #11
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}

0800d1e4 <rcl_wait_set_add_service>:
 800d1e4:	b318      	cbz	r0, 800d22e <rcl_wait_set_add_service+0x4a>
 800d1e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	b30b      	cbz	r3, 800d232 <rcl_wait_set_add_service+0x4e>
 800d1ee:	b319      	cbz	r1, 800d238 <rcl_wait_set_add_service+0x54>
 800d1f0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d1f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800d1f4:	4285      	cmp	r5, r0
 800d1f6:	d217      	bcs.n	800d228 <rcl_wait_set_add_service+0x44>
 800d1f8:	6a20      	ldr	r0, [r4, #32]
 800d1fa:	1c6e      	adds	r6, r5, #1
 800d1fc:	625e      	str	r6, [r3, #36]	@ 0x24
 800d1fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d202:	b102      	cbz	r2, 800d206 <rcl_wait_set_add_service+0x22>
 800d204:	6015      	str	r5, [r2, #0]
 800d206:	4608      	mov	r0, r1
 800d208:	f7ff f86e 	bl	800c2e8 <rcl_service_get_rmw_handle>
 800d20c:	b150      	cbz	r0, 800d224 <rcl_wait_set_add_service+0x40>
 800d20e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d210:	6842      	ldr	r2, [r0, #4]
 800d212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d214:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d218:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d21a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800d21c:	3301      	adds	r3, #1
 800d21e:	2000      	movs	r0, #0
 800d220:	6293      	str	r3, [r2, #40]	@ 0x28
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	2001      	movs	r0, #1
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	f240 3086 	movw	r0, #902	@ 0x386
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	200b      	movs	r0, #11
 800d230:	4770      	bx	lr
 800d232:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d236:	bd70      	pop	{r4, r5, r6, pc}
 800d238:	200b      	movs	r0, #11
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	0000      	movs	r0, r0
	...

0800d240 <rcl_wait>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	ed2d 8b02 	vpush	{d8}
 800d248:	b08d      	sub	sp, #52	@ 0x34
 800d24a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d24e:	2800      	cmp	r0, #0
 800d250:	f000 8143 	beq.w	800d4da <rcl_wait+0x29a>
 800d254:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800d256:	4605      	mov	r5, r0
 800d258:	2e00      	cmp	r6, #0
 800d25a:	f000 8112 	beq.w	800d482 <rcl_wait+0x242>
 800d25e:	6843      	ldr	r3, [r0, #4]
 800d260:	b983      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d262:	68eb      	ldr	r3, [r5, #12]
 800d264:	b973      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d266:	696b      	ldr	r3, [r5, #20]
 800d268:	b963      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d26a:	69eb      	ldr	r3, [r5, #28]
 800d26c:	b953      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d26e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d270:	b943      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d272:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800d274:	b933      	cbnz	r3, 800d284 <rcl_wait+0x44>
 800d276:	f240 3085 	movw	r0, #901	@ 0x385
 800d27a:	b00d      	add	sp, #52	@ 0x34
 800d27c:	ecbd 8b02 	vpop	{d8}
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	9b04      	ldr	r3, [sp, #16]
 800d286:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800d288:	2b01      	cmp	r3, #1
 800d28a:	9b05      	ldr	r3, [sp, #20]
 800d28c:	f173 0300 	sbcs.w	r3, r3, #0
 800d290:	f2c0 80f0 	blt.w	800d474 <rcl_wait+0x234>
 800d294:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800d298:	4643      	mov	r3, r8
 800d29a:	2a00      	cmp	r2, #0
 800d29c:	f000 8133 	beq.w	800d506 <rcl_wait+0x2c6>
 800d2a0:	2400      	movs	r4, #0
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800d518 <rcl_wait+0x2d8>
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	46a3      	mov	fp, r4
 800d2ac:	f240 3921 	movw	r9, #801	@ 0x321
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	e014      	b.n	800d2de <rcl_wait+0x9e>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d1e0      	bne.n	800d27a <rcl_wait+0x3a>
 800d2b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2bc:	4542      	cmp	r2, r8
 800d2be:	eb73 0107 	sbcs.w	r1, r3, r7
 800d2c2:	da03      	bge.n	800d2cc <rcl_wait+0x8c>
 800d2c4:	4690      	mov	r8, r2
 800d2c6:	461f      	mov	r7, r3
 800d2c8:	f04f 0b01 	mov.w	fp, #1
 800d2cc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800d2ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	f14a 0a00 	adc.w	sl, sl, #0
 800d2d6:	429c      	cmp	r4, r3
 800d2d8:	f17a 0100 	sbcs.w	r1, sl, #0
 800d2dc:	d228      	bcs.n	800d330 <rcl_wait+0xf0>
 800d2de:	6928      	ldr	r0, [r5, #16]
 800d2e0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d2e4:	a908      	add	r1, sp, #32
 800d2e6:	00a6      	lsls	r6, r4, #2
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d0f1      	beq.n	800d2d0 <rcl_wait+0x90>
 800d2ec:	68eb      	ldr	r3, [r5, #12]
 800d2ee:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800d2f2:	4423      	add	r3, r4
 800d2f4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800d2f8:	f1be 0f00 	cmp.w	lr, #0
 800d2fc:	d006      	beq.n	800d30c <rcl_wait+0xcc>
 800d2fe:	6913      	ldr	r3, [r2, #16]
 800d300:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800d304:	3301      	adds	r3, #1
 800d306:	6113      	str	r3, [r2, #16]
 800d308:	692b      	ldr	r3, [r5, #16]
 800d30a:	5998      	ldr	r0, [r3, r6]
 800d30c:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d310:	f7ff fafe 	bl	800c910 <rcl_timer_get_time_until_next_call>
 800d314:	4548      	cmp	r0, r9
 800d316:	d1cd      	bne.n	800d2b4 <rcl_wait+0x74>
 800d318:	692b      	ldr	r3, [r5, #16]
 800d31a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800d31c:	2100      	movs	r1, #0
 800d31e:	5199      	str	r1, [r3, r6]
 800d320:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d322:	3401      	adds	r4, #1
 800d324:	f14a 0a00 	adc.w	sl, sl, #0
 800d328:	429c      	cmp	r4, r3
 800d32a:	f17a 0100 	sbcs.w	r1, sl, #0
 800d32e:	d3d6      	bcc.n	800d2de <rcl_wait+0x9e>
 800d330:	4616      	mov	r6, r2
 800d332:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800d336:	4313      	orrs	r3, r2
 800d338:	46d9      	mov	r9, fp
 800d33a:	f040 80a9 	bne.w	800d490 <rcl_wait+0x250>
 800d33e:	2300      	movs	r3, #0
 800d340:	2200      	movs	r2, #0
 800d342:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d346:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800d34a:	ab08      	add	r3, sp, #32
 800d34c:	9302      	str	r3, [sp, #8]
 800d34e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800d350:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800d354:	e9cd 3200 	strd	r3, r2, [sp]
 800d358:	f106 0110 	add.w	r1, r6, #16
 800d35c:	f106 031c 	add.w	r3, r6, #28
 800d360:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800d364:	1d30      	adds	r0, r6, #4
 800d366:	f002 fabd 	bl	800f8e4 <rmw_wait>
 800d36a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d36c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d36e:	4680      	mov	r8, r0
 800d370:	b1ca      	cbz	r2, 800d3a6 <rcl_wait+0x166>
 800d372:	2400      	movs	r4, #0
 800d374:	4627      	mov	r7, r4
 800d376:	692a      	ldr	r2, [r5, #16]
 800d378:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800d37c:	f10d 011f 	add.w	r1, sp, #31
 800d380:	00a6      	lsls	r6, r4, #2
 800d382:	b160      	cbz	r0, 800d39e <rcl_wait+0x15e>
 800d384:	f88d 701f 	strb.w	r7, [sp, #31]
 800d388:	f7ff fa88 	bl	800c89c <rcl_timer_is_ready>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f47f af74 	bne.w	800d27a <rcl_wait+0x3a>
 800d392:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d396:	b90b      	cbnz	r3, 800d39c <rcl_wait+0x15c>
 800d398:	692a      	ldr	r2, [r5, #16]
 800d39a:	5193      	str	r3, [r2, r6]
 800d39c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d39e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3a0:	3401      	adds	r4, #1
 800d3a2:	42a2      	cmp	r2, r4
 800d3a4:	d8e7      	bhi.n	800d376 <rcl_wait+0x136>
 800d3a6:	f038 0002 	bics.w	r0, r8, #2
 800d3aa:	f040 8090 	bne.w	800d4ce <rcl_wait+0x28e>
 800d3ae:	686e      	ldr	r6, [r5, #4]
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	b91e      	cbnz	r6, 800d3bc <rcl_wait+0x17c>
 800d3b4:	e00d      	b.n	800d3d2 <rcl_wait+0x192>
 800d3b6:	3201      	adds	r2, #1
 800d3b8:	42b2      	cmp	r2, r6
 800d3ba:	d00a      	beq.n	800d3d2 <rcl_wait+0x192>
 800d3bc:	6899      	ldr	r1, [r3, #8]
 800d3be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d3c2:	2900      	cmp	r1, #0
 800d3c4:	d1f7      	bne.n	800d3b6 <rcl_wait+0x176>
 800d3c6:	682c      	ldr	r4, [r5, #0]
 800d3c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d3cc:	3201      	adds	r2, #1
 800d3ce:	42b2      	cmp	r2, r6
 800d3d0:	d1f4      	bne.n	800d3bc <rcl_wait+0x17c>
 800d3d2:	68ee      	ldr	r6, [r5, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	b91e      	cbnz	r6, 800d3e0 <rcl_wait+0x1a0>
 800d3d8:	e00d      	b.n	800d3f6 <rcl_wait+0x1b6>
 800d3da:	3201      	adds	r2, #1
 800d3dc:	42b2      	cmp	r2, r6
 800d3de:	d00a      	beq.n	800d3f6 <rcl_wait+0x1b6>
 800d3e0:	6959      	ldr	r1, [r3, #20]
 800d3e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d3e6:	2900      	cmp	r1, #0
 800d3e8:	d1f7      	bne.n	800d3da <rcl_wait+0x19a>
 800d3ea:	68ac      	ldr	r4, [r5, #8]
 800d3ec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d3f0:	3201      	adds	r2, #1
 800d3f2:	42b2      	cmp	r2, r6
 800d3f4:	d1f4      	bne.n	800d3e0 <rcl_wait+0x1a0>
 800d3f6:	69ee      	ldr	r6, [r5, #28]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	b91e      	cbnz	r6, 800d404 <rcl_wait+0x1c4>
 800d3fc:	e00d      	b.n	800d41a <rcl_wait+0x1da>
 800d3fe:	3201      	adds	r2, #1
 800d400:	42b2      	cmp	r2, r6
 800d402:	d00a      	beq.n	800d41a <rcl_wait+0x1da>
 800d404:	6a19      	ldr	r1, [r3, #32]
 800d406:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d40a:	2900      	cmp	r1, #0
 800d40c:	d1f7      	bne.n	800d3fe <rcl_wait+0x1be>
 800d40e:	69ac      	ldr	r4, [r5, #24]
 800d410:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d414:	3201      	adds	r2, #1
 800d416:	42b2      	cmp	r2, r6
 800d418:	d1f4      	bne.n	800d404 <rcl_wait+0x1c4>
 800d41a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800d41c:	2200      	movs	r2, #0
 800d41e:	b91e      	cbnz	r6, 800d428 <rcl_wait+0x1e8>
 800d420:	e00d      	b.n	800d43e <rcl_wait+0x1fe>
 800d422:	3201      	adds	r2, #1
 800d424:	4296      	cmp	r6, r2
 800d426:	d00a      	beq.n	800d43e <rcl_wait+0x1fe>
 800d428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d42a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d42e:	2900      	cmp	r1, #0
 800d430:	d1f7      	bne.n	800d422 <rcl_wait+0x1e2>
 800d432:	6a2c      	ldr	r4, [r5, #32]
 800d434:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d438:	3201      	adds	r2, #1
 800d43a:	4296      	cmp	r6, r2
 800d43c:	d1f4      	bne.n	800d428 <rcl_wait+0x1e8>
 800d43e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800d440:	2200      	movs	r2, #0
 800d442:	b91e      	cbnz	r6, 800d44c <rcl_wait+0x20c>
 800d444:	e00d      	b.n	800d462 <rcl_wait+0x222>
 800d446:	3201      	adds	r2, #1
 800d448:	42b2      	cmp	r2, r6
 800d44a:	d00a      	beq.n	800d462 <rcl_wait+0x222>
 800d44c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d44e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d452:	2900      	cmp	r1, #0
 800d454:	d1f7      	bne.n	800d446 <rcl_wait+0x206>
 800d456:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800d458:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800d45c:	3201      	adds	r2, #1
 800d45e:	42b2      	cmp	r2, r6
 800d460:	d1f4      	bne.n	800d44c <rcl_wait+0x20c>
 800d462:	f1b8 0f02 	cmp.w	r8, #2
 800d466:	f47f af08 	bne.w	800d27a <rcl_wait+0x3a>
 800d46a:	464b      	mov	r3, r9
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	bf08      	it	eq
 800d470:	2002      	moveq	r0, #2
 800d472:	e702      	b.n	800d27a <rcl_wait+0x3a>
 800d474:	2a00      	cmp	r2, #0
 800d476:	d03a      	beq.n	800d4ee <rcl_wait+0x2ae>
 800d478:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d47c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800d480:	e70e      	b.n	800d2a0 <rcl_wait+0x60>
 800d482:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d486:	b00d      	add	sp, #52	@ 0x34
 800d488:	ecbd 8b02 	vpop	{d8}
 800d48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d490:	9b04      	ldr	r3, [sp, #16]
 800d492:	2b01      	cmp	r3, #1
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	f173 0300 	sbcs.w	r3, r3, #0
 800d49a:	db24      	blt.n	800d4e6 <rcl_wait+0x2a6>
 800d49c:	2f00      	cmp	r7, #0
 800d49e:	bfbc      	itt	lt
 800d4a0:	f04f 0800 	movlt.w	r8, #0
 800d4a4:	4647      	movlt	r7, r8
 800d4a6:	a31e      	add	r3, pc, #120	@ (adr r3, 800d520 <rcl_wait+0x2e0>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f3 f8da 	bl	8000668 <__aeabi_ldivmod>
 800d4b4:	a31a      	add	r3, pc, #104	@ (adr r3, 800d520 <rcl_wait+0x2e0>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4be:	4640      	mov	r0, r8
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f3 f8d1 	bl	8000668 <__aeabi_ldivmod>
 800d4c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800d4ca:	ab08      	add	r3, sp, #32
 800d4cc:	e73e      	b.n	800d34c <rcl_wait+0x10c>
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	b00d      	add	sp, #52	@ 0x34
 800d4d2:	ecbd 8b02 	vpop	{d8}
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4da:	200b      	movs	r0, #11
 800d4dc:	b00d      	add	sp, #52	@ 0x34
 800d4de:	ecbd 8b02 	vpop	{d8}
 800d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e6:	465b      	mov	r3, fp
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1d7      	bne.n	800d49c <rcl_wait+0x25c>
 800d4ec:	e72e      	b.n	800d34c <rcl_wait+0x10c>
 800d4ee:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	bf08      	it	eq
 800d4f6:	4691      	moveq	r9, r2
 800d4f8:	f43f af21 	beq.w	800d33e <rcl_wait+0xfe>
 800d4fc:	9b04      	ldr	r3, [sp, #16]
 800d4fe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d502:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800d506:	2b01      	cmp	r3, #1
 800d508:	9b05      	ldr	r3, [sp, #20]
 800d50a:	f173 0300 	sbcs.w	r3, r3, #0
 800d50e:	f04f 0300 	mov.w	r3, #0
 800d512:	4699      	mov	r9, r3
 800d514:	dac2      	bge.n	800d49c <rcl_wait+0x25c>
 800d516:	e719      	b.n	800d34c <rcl_wait+0x10c>
 800d518:	ffffffff 	.word	0xffffffff
 800d51c:	7fffffff 	.word	0x7fffffff
 800d520:	3b9aca00 	.word	0x3b9aca00
 800d524:	00000000 	.word	0x00000000

0800d528 <rcl_action_take_goal_response>:
 800d528:	2800      	cmp	r0, #0
 800d52a:	d039      	beq.n	800d5a0 <rcl_action_take_goal_response+0x78>
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	4604      	mov	r4, r0
 800d530:	6800      	ldr	r0, [r0, #0]
 800d532:	b380      	cbz	r0, 800d596 <rcl_action_take_goal_response+0x6e>
 800d534:	460d      	mov	r5, r1
 800d536:	4616      	mov	r6, r2
 800d538:	f7fe fa02 	bl	800b940 <rcl_client_is_valid>
 800d53c:	b330      	cbz	r0, 800d58c <rcl_action_take_goal_response+0x64>
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	3004      	adds	r0, #4
 800d542:	f7fe f9fd 	bl	800b940 <rcl_client_is_valid>
 800d546:	b308      	cbz	r0, 800d58c <rcl_action_take_goal_response+0x64>
 800d548:	6820      	ldr	r0, [r4, #0]
 800d54a:	3008      	adds	r0, #8
 800d54c:	f7fe f9f8 	bl	800b940 <rcl_client_is_valid>
 800d550:	b1e0      	cbz	r0, 800d58c <rcl_action_take_goal_response+0x64>
 800d552:	6820      	ldr	r0, [r4, #0]
 800d554:	300c      	adds	r0, #12
 800d556:	f7ff f869 	bl	800c62c <rcl_subscription_is_valid>
 800d55a:	b1b8      	cbz	r0, 800d58c <rcl_action_take_goal_response+0x64>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	3010      	adds	r0, #16
 800d560:	f7ff f864 	bl	800c62c <rcl_subscription_is_valid>
 800d564:	b190      	cbz	r0, 800d58c <rcl_action_take_goal_response+0x64>
 800d566:	b1cd      	cbz	r5, 800d59c <rcl_action_take_goal_response+0x74>
 800d568:	b1c6      	cbz	r6, 800d59c <rcl_action_take_goal_response+0x74>
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	4632      	mov	r2, r6
 800d56e:	4629      	mov	r1, r5
 800d570:	f7fe f99e 	bl	800b8b0 <rcl_take_response>
 800d574:	b148      	cbz	r0, 800d58a <rcl_action_take_goal_response+0x62>
 800d576:	280a      	cmp	r0, #10
 800d578:	d007      	beq.n	800d58a <rcl_action_take_goal_response+0x62>
 800d57a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800d57e:	f640 0337 	movw	r3, #2103	@ 0x837
 800d582:	4290      	cmp	r0, r2
 800d584:	bf0c      	ite	eq
 800d586:	4618      	moveq	r0, r3
 800d588:	2001      	movne	r0, #1
 800d58a:	bd70      	pop	{r4, r5, r6, pc}
 800d58c:	f7fc fd30 	bl	8009ff0 <rcutils_reset_error>
 800d590:	f640 0036 	movw	r0, #2102	@ 0x836
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	f640 0036 	movw	r0, #2102	@ 0x836
 800d59a:	bd70      	pop	{r4, r5, r6, pc}
 800d59c:	200b      	movs	r0, #11
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	f640 0036 	movw	r0, #2102	@ 0x836
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop

0800d5a8 <rcl_action_send_result_request>:
 800d5a8:	b390      	cbz	r0, 800d610 <rcl_action_send_result_request+0x68>
 800d5aa:	b570      	push	{r4, r5, r6, lr}
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	6800      	ldr	r0, [r0, #0]
 800d5b0:	b348      	cbz	r0, 800d606 <rcl_action_send_result_request+0x5e>
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	4616      	mov	r6, r2
 800d5b6:	f7fe f9c3 	bl	800b940 <rcl_client_is_valid>
 800d5ba:	b1f8      	cbz	r0, 800d5fc <rcl_action_send_result_request+0x54>
 800d5bc:	6820      	ldr	r0, [r4, #0]
 800d5be:	3004      	adds	r0, #4
 800d5c0:	f7fe f9be 	bl	800b940 <rcl_client_is_valid>
 800d5c4:	b1d0      	cbz	r0, 800d5fc <rcl_action_send_result_request+0x54>
 800d5c6:	6820      	ldr	r0, [r4, #0]
 800d5c8:	3008      	adds	r0, #8
 800d5ca:	f7fe f9b9 	bl	800b940 <rcl_client_is_valid>
 800d5ce:	b1a8      	cbz	r0, 800d5fc <rcl_action_send_result_request+0x54>
 800d5d0:	6820      	ldr	r0, [r4, #0]
 800d5d2:	300c      	adds	r0, #12
 800d5d4:	f7ff f82a 	bl	800c62c <rcl_subscription_is_valid>
 800d5d8:	b180      	cbz	r0, 800d5fc <rcl_action_send_result_request+0x54>
 800d5da:	6820      	ldr	r0, [r4, #0]
 800d5dc:	3010      	adds	r0, #16
 800d5de:	f7ff f825 	bl	800c62c <rcl_subscription_is_valid>
 800d5e2:	b158      	cbz	r0, 800d5fc <rcl_action_send_result_request+0x54>
 800d5e4:	b195      	cbz	r5, 800d60c <rcl_action_send_result_request+0x64>
 800d5e6:	b18e      	cbz	r6, 800d60c <rcl_action_send_result_request+0x64>
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	4632      	mov	r2, r6
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	3008      	adds	r0, #8
 800d5f0:	f7fe f926 	bl	800b840 <rcl_send_request>
 800d5f4:	3800      	subs	r0, #0
 800d5f6:	bf18      	it	ne
 800d5f8:	2001      	movne	r0, #1
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	f7fc fcf8 	bl	8009ff0 <rcutils_reset_error>
 800d600:	f640 0036 	movw	r0, #2102	@ 0x836
 800d604:	bd70      	pop	{r4, r5, r6, pc}
 800d606:	f640 0036 	movw	r0, #2102	@ 0x836
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	200b      	movs	r0, #11
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	f640 0036 	movw	r0, #2102	@ 0x836
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop

0800d618 <rcl_action_take_result_response>:
 800d618:	2800      	cmp	r0, #0
 800d61a:	d03a      	beq.n	800d692 <rcl_action_take_result_response+0x7a>
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	4604      	mov	r4, r0
 800d620:	6800      	ldr	r0, [r0, #0]
 800d622:	b388      	cbz	r0, 800d688 <rcl_action_take_result_response+0x70>
 800d624:	460d      	mov	r5, r1
 800d626:	4616      	mov	r6, r2
 800d628:	f7fe f98a 	bl	800b940 <rcl_client_is_valid>
 800d62c:	b338      	cbz	r0, 800d67e <rcl_action_take_result_response+0x66>
 800d62e:	6820      	ldr	r0, [r4, #0]
 800d630:	3004      	adds	r0, #4
 800d632:	f7fe f985 	bl	800b940 <rcl_client_is_valid>
 800d636:	b310      	cbz	r0, 800d67e <rcl_action_take_result_response+0x66>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	3008      	adds	r0, #8
 800d63c:	f7fe f980 	bl	800b940 <rcl_client_is_valid>
 800d640:	b1e8      	cbz	r0, 800d67e <rcl_action_take_result_response+0x66>
 800d642:	6820      	ldr	r0, [r4, #0]
 800d644:	300c      	adds	r0, #12
 800d646:	f7fe fff1 	bl	800c62c <rcl_subscription_is_valid>
 800d64a:	b1c0      	cbz	r0, 800d67e <rcl_action_take_result_response+0x66>
 800d64c:	6820      	ldr	r0, [r4, #0]
 800d64e:	3010      	adds	r0, #16
 800d650:	f7fe ffec 	bl	800c62c <rcl_subscription_is_valid>
 800d654:	b198      	cbz	r0, 800d67e <rcl_action_take_result_response+0x66>
 800d656:	b1d5      	cbz	r5, 800d68e <rcl_action_take_result_response+0x76>
 800d658:	b1ce      	cbz	r6, 800d68e <rcl_action_take_result_response+0x76>
 800d65a:	6820      	ldr	r0, [r4, #0]
 800d65c:	4632      	mov	r2, r6
 800d65e:	4629      	mov	r1, r5
 800d660:	3008      	adds	r0, #8
 800d662:	f7fe f925 	bl	800b8b0 <rcl_take_response>
 800d666:	b148      	cbz	r0, 800d67c <rcl_action_take_result_response+0x64>
 800d668:	280a      	cmp	r0, #10
 800d66a:	d007      	beq.n	800d67c <rcl_action_take_result_response+0x64>
 800d66c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800d670:	f640 0337 	movw	r3, #2103	@ 0x837
 800d674:	4290      	cmp	r0, r2
 800d676:	bf0c      	ite	eq
 800d678:	4618      	moveq	r0, r3
 800d67a:	2001      	movne	r0, #1
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
 800d67e:	f7fc fcb7 	bl	8009ff0 <rcutils_reset_error>
 800d682:	f640 0036 	movw	r0, #2102	@ 0x836
 800d686:	bd70      	pop	{r4, r5, r6, pc}
 800d688:	f640 0036 	movw	r0, #2102	@ 0x836
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
 800d68e:	200b      	movs	r0, #11
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	f640 0036 	movw	r0, #2102	@ 0x836
 800d696:	4770      	bx	lr

0800d698 <rcl_action_take_cancel_response>:
 800d698:	2800      	cmp	r0, #0
 800d69a:	d03a      	beq.n	800d712 <rcl_action_take_cancel_response+0x7a>
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	4604      	mov	r4, r0
 800d6a0:	6800      	ldr	r0, [r0, #0]
 800d6a2:	b388      	cbz	r0, 800d708 <rcl_action_take_cancel_response+0x70>
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	4616      	mov	r6, r2
 800d6a8:	f7fe f94a 	bl	800b940 <rcl_client_is_valid>
 800d6ac:	b338      	cbz	r0, 800d6fe <rcl_action_take_cancel_response+0x66>
 800d6ae:	6820      	ldr	r0, [r4, #0]
 800d6b0:	3004      	adds	r0, #4
 800d6b2:	f7fe f945 	bl	800b940 <rcl_client_is_valid>
 800d6b6:	b310      	cbz	r0, 800d6fe <rcl_action_take_cancel_response+0x66>
 800d6b8:	6820      	ldr	r0, [r4, #0]
 800d6ba:	3008      	adds	r0, #8
 800d6bc:	f7fe f940 	bl	800b940 <rcl_client_is_valid>
 800d6c0:	b1e8      	cbz	r0, 800d6fe <rcl_action_take_cancel_response+0x66>
 800d6c2:	6820      	ldr	r0, [r4, #0]
 800d6c4:	300c      	adds	r0, #12
 800d6c6:	f7fe ffb1 	bl	800c62c <rcl_subscription_is_valid>
 800d6ca:	b1c0      	cbz	r0, 800d6fe <rcl_action_take_cancel_response+0x66>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	3010      	adds	r0, #16
 800d6d0:	f7fe ffac 	bl	800c62c <rcl_subscription_is_valid>
 800d6d4:	b198      	cbz	r0, 800d6fe <rcl_action_take_cancel_response+0x66>
 800d6d6:	b1d5      	cbz	r5, 800d70e <rcl_action_take_cancel_response+0x76>
 800d6d8:	b1ce      	cbz	r6, 800d70e <rcl_action_take_cancel_response+0x76>
 800d6da:	6820      	ldr	r0, [r4, #0]
 800d6dc:	4632      	mov	r2, r6
 800d6de:	4629      	mov	r1, r5
 800d6e0:	3004      	adds	r0, #4
 800d6e2:	f7fe f8e5 	bl	800b8b0 <rcl_take_response>
 800d6e6:	b148      	cbz	r0, 800d6fc <rcl_action_take_cancel_response+0x64>
 800d6e8:	280a      	cmp	r0, #10
 800d6ea:	d007      	beq.n	800d6fc <rcl_action_take_cancel_response+0x64>
 800d6ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800d6f0:	f640 0337 	movw	r3, #2103	@ 0x837
 800d6f4:	4290      	cmp	r0, r2
 800d6f6:	bf0c      	ite	eq
 800d6f8:	4618      	moveq	r0, r3
 800d6fa:	2001      	movne	r0, #1
 800d6fc:	bd70      	pop	{r4, r5, r6, pc}
 800d6fe:	f7fc fc77 	bl	8009ff0 <rcutils_reset_error>
 800d702:	f640 0036 	movw	r0, #2102	@ 0x836
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	f640 0036 	movw	r0, #2102	@ 0x836
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	200b      	movs	r0, #11
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	f640 0036 	movw	r0, #2102	@ 0x836
 800d716:	4770      	bx	lr

0800d718 <rcl_action_take_feedback>:
 800d718:	2800      	cmp	r0, #0
 800d71a:	d038      	beq.n	800d78e <rcl_action_take_feedback+0x76>
 800d71c:	b530      	push	{r4, r5, lr}
 800d71e:	4604      	mov	r4, r0
 800d720:	6800      	ldr	r0, [r0, #0]
 800d722:	b091      	sub	sp, #68	@ 0x44
 800d724:	b378      	cbz	r0, 800d786 <rcl_action_take_feedback+0x6e>
 800d726:	460d      	mov	r5, r1
 800d728:	f7fe f90a 	bl	800b940 <rcl_client_is_valid>
 800d72c:	b328      	cbz	r0, 800d77a <rcl_action_take_feedback+0x62>
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	3004      	adds	r0, #4
 800d732:	f7fe f905 	bl	800b940 <rcl_client_is_valid>
 800d736:	b300      	cbz	r0, 800d77a <rcl_action_take_feedback+0x62>
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	3008      	adds	r0, #8
 800d73c:	f7fe f900 	bl	800b940 <rcl_client_is_valid>
 800d740:	b1d8      	cbz	r0, 800d77a <rcl_action_take_feedback+0x62>
 800d742:	6820      	ldr	r0, [r4, #0]
 800d744:	300c      	adds	r0, #12
 800d746:	f7fe ff71 	bl	800c62c <rcl_subscription_is_valid>
 800d74a:	b1b0      	cbz	r0, 800d77a <rcl_action_take_feedback+0x62>
 800d74c:	6820      	ldr	r0, [r4, #0]
 800d74e:	3010      	adds	r0, #16
 800d750:	f7fe ff6c 	bl	800c62c <rcl_subscription_is_valid>
 800d754:	b188      	cbz	r0, 800d77a <rcl_action_take_feedback+0x62>
 800d756:	b1ed      	cbz	r5, 800d794 <rcl_action_take_feedback+0x7c>
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	2300      	movs	r3, #0
 800d75c:	466a      	mov	r2, sp
 800d75e:	4629      	mov	r1, r5
 800d760:	300c      	adds	r0, #12
 800d762:	f7fe ff05 	bl	800c570 <rcl_take>
 800d766:	b160      	cbz	r0, 800d782 <rcl_action_take_feedback+0x6a>
 800d768:	f240 1391 	movw	r3, #401	@ 0x191
 800d76c:	4298      	cmp	r0, r3
 800d76e:	d014      	beq.n	800d79a <rcl_action_take_feedback+0x82>
 800d770:	280a      	cmp	r0, #10
 800d772:	bf18      	it	ne
 800d774:	2001      	movne	r0, #1
 800d776:	b011      	add	sp, #68	@ 0x44
 800d778:	bd30      	pop	{r4, r5, pc}
 800d77a:	f7fc fc39 	bl	8009ff0 <rcutils_reset_error>
 800d77e:	f640 0036 	movw	r0, #2102	@ 0x836
 800d782:	b011      	add	sp, #68	@ 0x44
 800d784:	bd30      	pop	{r4, r5, pc}
 800d786:	f640 0036 	movw	r0, #2102	@ 0x836
 800d78a:	b011      	add	sp, #68	@ 0x44
 800d78c:	bd30      	pop	{r4, r5, pc}
 800d78e:	f640 0036 	movw	r0, #2102	@ 0x836
 800d792:	4770      	bx	lr
 800d794:	200b      	movs	r0, #11
 800d796:	b011      	add	sp, #68	@ 0x44
 800d798:	bd30      	pop	{r4, r5, pc}
 800d79a:	f640 0037 	movw	r0, #2103	@ 0x837
 800d79e:	e7f0      	b.n	800d782 <rcl_action_take_feedback+0x6a>

0800d7a0 <rcl_action_wait_set_add_action_client>:
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d048      	beq.n	800d836 <rcl_action_wait_set_add_action_client+0x96>
 800d7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	2900      	cmp	r1, #0
 800d7aa:	d03c      	beq.n	800d826 <rcl_action_wait_set_add_action_client+0x86>
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	6808      	ldr	r0, [r1, #0]
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d038      	beq.n	800d826 <rcl_action_wait_set_add_action_client+0x86>
 800d7b4:	4617      	mov	r7, r2
 800d7b6:	461e      	mov	r6, r3
 800d7b8:	f7fe f8c2 	bl	800b940 <rcl_client_is_valid>
 800d7bc:	b3b0      	cbz	r0, 800d82c <rcl_action_wait_set_add_action_client+0x8c>
 800d7be:	6820      	ldr	r0, [r4, #0]
 800d7c0:	3004      	adds	r0, #4
 800d7c2:	f7fe f8bd 	bl	800b940 <rcl_client_is_valid>
 800d7c6:	b388      	cbz	r0, 800d82c <rcl_action_wait_set_add_action_client+0x8c>
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	3008      	adds	r0, #8
 800d7cc:	f7fe f8b8 	bl	800b940 <rcl_client_is_valid>
 800d7d0:	b360      	cbz	r0, 800d82c <rcl_action_wait_set_add_action_client+0x8c>
 800d7d2:	6820      	ldr	r0, [r4, #0]
 800d7d4:	300c      	adds	r0, #12
 800d7d6:	f7fe ff29 	bl	800c62c <rcl_subscription_is_valid>
 800d7da:	b338      	cbz	r0, 800d82c <rcl_action_wait_set_add_action_client+0x8c>
 800d7dc:	6820      	ldr	r0, [r4, #0]
 800d7de:	3010      	adds	r0, #16
 800d7e0:	f7fe ff24 	bl	800c62c <rcl_subscription_is_valid>
 800d7e4:	b310      	cbz	r0, 800d82c <rcl_action_wait_set_add_action_client+0x8c>
 800d7e6:	6821      	ldr	r1, [r4, #0]
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800d7ee:	f7ff fccd 	bl	800d18c <rcl_wait_set_add_client>
 800d7f2:	b9b8      	cbnz	r0, 800d824 <rcl_action_wait_set_add_action_client+0x84>
 800d7f4:	6821      	ldr	r1, [r4, #0]
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800d7fc:	3104      	adds	r1, #4
 800d7fe:	f7ff fcc5 	bl	800d18c <rcl_wait_set_add_client>
 800d802:	b978      	cbnz	r0, 800d824 <rcl_action_wait_set_add_action_client+0x84>
 800d804:	6821      	ldr	r1, [r4, #0]
 800d806:	4628      	mov	r0, r5
 800d808:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800d80c:	3108      	adds	r1, #8
 800d80e:	f7ff fcbd 	bl	800d18c <rcl_wait_set_add_client>
 800d812:	b938      	cbnz	r0, 800d824 <rcl_action_wait_set_add_action_client+0x84>
 800d814:	6821      	ldr	r1, [r4, #0]
 800d816:	4628      	mov	r0, r5
 800d818:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800d81c:	310c      	adds	r1, #12
 800d81e:	f7ff f96d 	bl	800cafc <rcl_wait_set_add_subscription>
 800d822:	b158      	cbz	r0, 800d83c <rcl_action_wait_set_add_action_client+0x9c>
 800d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d826:	f640 0036 	movw	r0, #2102	@ 0x836
 800d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82c:	f7fc fbe0 	bl	8009ff0 <rcutils_reset_error>
 800d830:	f640 0036 	movw	r0, #2102	@ 0x836
 800d834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d836:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d83a:	4770      	bx	lr
 800d83c:	6821      	ldr	r1, [r4, #0]
 800d83e:	4628      	mov	r0, r5
 800d840:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800d844:	3110      	adds	r1, #16
 800d846:	f7ff f959 	bl	800cafc <rcl_wait_set_add_subscription>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d1ea      	bne.n	800d824 <rcl_action_wait_set_add_action_client+0x84>
 800d84e:	b11f      	cbz	r7, 800d858 <rcl_action_wait_set_add_action_client+0xb8>
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d856:	603b      	str	r3, [r7, #0]
 800d858:	2e00      	cmp	r6, #0
 800d85a:	d0e3      	beq.n	800d824 <rcl_action_wait_set_add_action_client+0x84>
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800d862:	6033      	str	r3, [r6, #0]
 800d864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d866:	bf00      	nop

0800d868 <rcl_action_client_wait_set_get_entities_ready>:
 800d868:	2800      	cmp	r0, #0
 800d86a:	f000 808d 	beq.w	800d988 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800d86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d872:	460c      	mov	r4, r1
 800d874:	2900      	cmp	r1, #0
 800d876:	d077      	beq.n	800d968 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800d878:	4605      	mov	r5, r0
 800d87a:	6808      	ldr	r0, [r1, #0]
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d073      	beq.n	800d968 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800d880:	4616      	mov	r6, r2
 800d882:	461f      	mov	r7, r3
 800d884:	f7fe f85c 	bl	800b940 <rcl_client_is_valid>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d071      	beq.n	800d970 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d88c:	6820      	ldr	r0, [r4, #0]
 800d88e:	3004      	adds	r0, #4
 800d890:	f7fe f856 	bl	800b940 <rcl_client_is_valid>
 800d894:	2800      	cmp	r0, #0
 800d896:	d06b      	beq.n	800d970 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	3008      	adds	r0, #8
 800d89c:	f7fe f850 	bl	800b940 <rcl_client_is_valid>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d065      	beq.n	800d970 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d8a4:	6820      	ldr	r0, [r4, #0]
 800d8a6:	300c      	adds	r0, #12
 800d8a8:	f7fe fec0 	bl	800c62c <rcl_subscription_is_valid>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d05f      	beq.n	800d970 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	3010      	adds	r0, #16
 800d8b4:	f7fe feba 	bl	800c62c <rcl_subscription_is_valid>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d059      	beq.n	800d970 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d8bc:	2e00      	cmp	r6, #0
 800d8be:	d060      	beq.n	800d982 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d8c0:	2f00      	cmp	r7, #0
 800d8c2:	d05e      	beq.n	800d982 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d8c4:	9b06      	ldr	r3, [sp, #24]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d05b      	beq.n	800d982 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d8ca:	9b07      	ldr	r3, [sp, #28]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d058      	beq.n	800d982 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d055      	beq.n	800d982 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	686a      	ldr	r2, [r5, #4]
 800d8da:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800d8de:	428a      	cmp	r2, r1
 800d8e0:	d94c      	bls.n	800d97c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d8e2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800d8e6:	4282      	cmp	r2, r0
 800d8e8:	d948      	bls.n	800d97c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d8ea:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800d8ee:	69ea      	ldr	r2, [r5, #28]
 800d8f0:	42a2      	cmp	r2, r4
 800d8f2:	d943      	bls.n	800d97c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d8f4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800d8f8:	4562      	cmp	r2, ip
 800d8fa:	d93f      	bls.n	800d97c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d8fc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800d900:	4572      	cmp	r2, lr
 800d902:	d93b      	bls.n	800d97c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d904:	69aa      	ldr	r2, [r5, #24]
 800d906:	682d      	ldr	r5, [r5, #0]
 800d908:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800d90c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800d910:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800d914:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800d918:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800d91c:	f103 0c0c 	add.w	ip, r3, #12
 800d920:	eba5 050c 	sub.w	r5, r5, ip
 800d924:	fab5 f585 	clz	r5, r5
 800d928:	096d      	lsrs	r5, r5, #5
 800d92a:	7035      	strb	r5, [r6, #0]
 800d92c:	f103 0510 	add.w	r5, r3, #16
 800d930:	1b64      	subs	r4, r4, r5
 800d932:	fab4 f484 	clz	r4, r4
 800d936:	0964      	lsrs	r4, r4, #5
 800d938:	703c      	strb	r4, [r7, #0]
 800d93a:	eba3 0008 	sub.w	r0, r3, r8
 800d93e:	1d1c      	adds	r4, r3, #4
 800d940:	3308      	adds	r3, #8
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	fab0 f080 	clz	r0, r0
 800d948:	9a06      	ldr	r2, [sp, #24]
 800d94a:	0940      	lsrs	r0, r0, #5
 800d94c:	1b09      	subs	r1, r1, r4
 800d94e:	7010      	strb	r0, [r2, #0]
 800d950:	fab1 f181 	clz	r1, r1
 800d954:	9a07      	ldr	r2, [sp, #28]
 800d956:	0949      	lsrs	r1, r1, #5
 800d958:	7011      	strb	r1, [r2, #0]
 800d95a:	fab3 f383 	clz	r3, r3
 800d95e:	9a08      	ldr	r2, [sp, #32]
 800d960:	095b      	lsrs	r3, r3, #5
 800d962:	2000      	movs	r0, #0
 800d964:	7013      	strb	r3, [r2, #0]
 800d966:	e001      	b.n	800d96c <rcl_action_client_wait_set_get_entities_ready+0x104>
 800d968:	f640 0036 	movw	r0, #2102	@ 0x836
 800d96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d970:	f7fc fb3e 	bl	8009ff0 <rcutils_reset_error>
 800d974:	f640 0036 	movw	r0, #2102	@ 0x836
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97c:	2001      	movs	r0, #1
 800d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d982:	200b      	movs	r0, #11
 800d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d988:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop

0800d990 <rcl_action_take_goal_request>:
 800d990:	2800      	cmp	r0, #0
 800d992:	d039      	beq.n	800da08 <rcl_action_take_goal_request+0x78>
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	4604      	mov	r4, r0
 800d998:	6800      	ldr	r0, [r0, #0]
 800d99a:	b380      	cbz	r0, 800d9fe <rcl_action_take_goal_request+0x6e>
 800d99c:	460d      	mov	r5, r1
 800d99e:	4616      	mov	r6, r2
 800d9a0:	f7fe fd00 	bl	800c3a4 <rcl_service_is_valid>
 800d9a4:	b330      	cbz	r0, 800d9f4 <rcl_action_take_goal_request+0x64>
 800d9a6:	6820      	ldr	r0, [r4, #0]
 800d9a8:	3004      	adds	r0, #4
 800d9aa:	f7fe fcfb 	bl	800c3a4 <rcl_service_is_valid>
 800d9ae:	b308      	cbz	r0, 800d9f4 <rcl_action_take_goal_request+0x64>
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	3008      	adds	r0, #8
 800d9b4:	f7fe fcf6 	bl	800c3a4 <rcl_service_is_valid>
 800d9b8:	b1e0      	cbz	r0, 800d9f4 <rcl_action_take_goal_request+0x64>
 800d9ba:	6820      	ldr	r0, [r4, #0]
 800d9bc:	300c      	adds	r0, #12
 800d9be:	f006 f963 	bl	8013c88 <rcl_publisher_is_valid>
 800d9c2:	b1b8      	cbz	r0, 800d9f4 <rcl_action_take_goal_request+0x64>
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	3010      	adds	r0, #16
 800d9c8:	f006 f95e 	bl	8013c88 <rcl_publisher_is_valid>
 800d9cc:	b190      	cbz	r0, 800d9f4 <rcl_action_take_goal_request+0x64>
 800d9ce:	b1cd      	cbz	r5, 800da04 <rcl_action_take_goal_request+0x74>
 800d9d0:	b1c6      	cbz	r6, 800da04 <rcl_action_take_goal_request+0x74>
 800d9d2:	6820      	ldr	r0, [r4, #0]
 800d9d4:	4632      	mov	r2, r6
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7fe fc8c 	bl	800c2f4 <rcl_take_request>
 800d9dc:	b148      	cbz	r0, 800d9f2 <rcl_action_take_goal_request+0x62>
 800d9de:	280a      	cmp	r0, #10
 800d9e0:	d007      	beq.n	800d9f2 <rcl_action_take_goal_request+0x62>
 800d9e2:	f240 2259 	movw	r2, #601	@ 0x259
 800d9e6:	f640 0399 	movw	r3, #2201	@ 0x899
 800d9ea:	4290      	cmp	r0, r2
 800d9ec:	bf0c      	ite	eq
 800d9ee:	4618      	moveq	r0, r3
 800d9f0:	2001      	movne	r0, #1
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	f7fc fafc 	bl	8009ff0 <rcutils_reset_error>
 800d9f8:	f640 0098 	movw	r0, #2200	@ 0x898
 800d9fc:	bd70      	pop	{r4, r5, r6, pc}
 800d9fe:	f640 0098 	movw	r0, #2200	@ 0x898
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	200b      	movs	r0, #11
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	f640 0098 	movw	r0, #2200	@ 0x898
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop

0800da10 <rcl_action_send_goal_response>:
 800da10:	b390      	cbz	r0, 800da78 <rcl_action_send_goal_response+0x68>
 800da12:	b570      	push	{r4, r5, r6, lr}
 800da14:	4604      	mov	r4, r0
 800da16:	6800      	ldr	r0, [r0, #0]
 800da18:	b348      	cbz	r0, 800da6e <rcl_action_send_goal_response+0x5e>
 800da1a:	460d      	mov	r5, r1
 800da1c:	4616      	mov	r6, r2
 800da1e:	f7fe fcc1 	bl	800c3a4 <rcl_service_is_valid>
 800da22:	b1f8      	cbz	r0, 800da64 <rcl_action_send_goal_response+0x54>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	3004      	adds	r0, #4
 800da28:	f7fe fcbc 	bl	800c3a4 <rcl_service_is_valid>
 800da2c:	b1d0      	cbz	r0, 800da64 <rcl_action_send_goal_response+0x54>
 800da2e:	6820      	ldr	r0, [r4, #0]
 800da30:	3008      	adds	r0, #8
 800da32:	f7fe fcb7 	bl	800c3a4 <rcl_service_is_valid>
 800da36:	b1a8      	cbz	r0, 800da64 <rcl_action_send_goal_response+0x54>
 800da38:	6820      	ldr	r0, [r4, #0]
 800da3a:	300c      	adds	r0, #12
 800da3c:	f006 f924 	bl	8013c88 <rcl_publisher_is_valid>
 800da40:	b180      	cbz	r0, 800da64 <rcl_action_send_goal_response+0x54>
 800da42:	6820      	ldr	r0, [r4, #0]
 800da44:	3010      	adds	r0, #16
 800da46:	f006 f91f 	bl	8013c88 <rcl_publisher_is_valid>
 800da4a:	b158      	cbz	r0, 800da64 <rcl_action_send_goal_response+0x54>
 800da4c:	b195      	cbz	r5, 800da74 <rcl_action_send_goal_response+0x64>
 800da4e:	b18e      	cbz	r6, 800da74 <rcl_action_send_goal_response+0x64>
 800da50:	6820      	ldr	r0, [r4, #0]
 800da52:	4632      	mov	r2, r6
 800da54:	4629      	mov	r1, r5
 800da56:	f7fe fc8d 	bl	800c374 <rcl_send_response>
 800da5a:	b110      	cbz	r0, 800da62 <rcl_action_send_goal_response+0x52>
 800da5c:	2802      	cmp	r0, #2
 800da5e:	bf18      	it	ne
 800da60:	2001      	movne	r0, #1
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	f7fc fac4 	bl	8009ff0 <rcutils_reset_error>
 800da68:	f640 0098 	movw	r0, #2200	@ 0x898
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
 800da6e:	f640 0098 	movw	r0, #2200	@ 0x898
 800da72:	bd70      	pop	{r4, r5, r6, pc}
 800da74:	200b      	movs	r0, #11
 800da76:	bd70      	pop	{r4, r5, r6, pc}
 800da78:	f640 0098 	movw	r0, #2200	@ 0x898
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop

0800da80 <rcl_action_take_result_request>:
 800da80:	2800      	cmp	r0, #0
 800da82:	d03a      	beq.n	800dafa <rcl_action_take_result_request+0x7a>
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	4604      	mov	r4, r0
 800da88:	6800      	ldr	r0, [r0, #0]
 800da8a:	b388      	cbz	r0, 800daf0 <rcl_action_take_result_request+0x70>
 800da8c:	460d      	mov	r5, r1
 800da8e:	4616      	mov	r6, r2
 800da90:	f7fe fc88 	bl	800c3a4 <rcl_service_is_valid>
 800da94:	b338      	cbz	r0, 800dae6 <rcl_action_take_result_request+0x66>
 800da96:	6820      	ldr	r0, [r4, #0]
 800da98:	3004      	adds	r0, #4
 800da9a:	f7fe fc83 	bl	800c3a4 <rcl_service_is_valid>
 800da9e:	b310      	cbz	r0, 800dae6 <rcl_action_take_result_request+0x66>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	3008      	adds	r0, #8
 800daa4:	f7fe fc7e 	bl	800c3a4 <rcl_service_is_valid>
 800daa8:	b1e8      	cbz	r0, 800dae6 <rcl_action_take_result_request+0x66>
 800daaa:	6820      	ldr	r0, [r4, #0]
 800daac:	300c      	adds	r0, #12
 800daae:	f006 f8eb 	bl	8013c88 <rcl_publisher_is_valid>
 800dab2:	b1c0      	cbz	r0, 800dae6 <rcl_action_take_result_request+0x66>
 800dab4:	6820      	ldr	r0, [r4, #0]
 800dab6:	3010      	adds	r0, #16
 800dab8:	f006 f8e6 	bl	8013c88 <rcl_publisher_is_valid>
 800dabc:	b198      	cbz	r0, 800dae6 <rcl_action_take_result_request+0x66>
 800dabe:	b1d5      	cbz	r5, 800daf6 <rcl_action_take_result_request+0x76>
 800dac0:	b1ce      	cbz	r6, 800daf6 <rcl_action_take_result_request+0x76>
 800dac2:	6820      	ldr	r0, [r4, #0]
 800dac4:	4632      	mov	r2, r6
 800dac6:	4629      	mov	r1, r5
 800dac8:	3008      	adds	r0, #8
 800daca:	f7fe fc13 	bl	800c2f4 <rcl_take_request>
 800dace:	b148      	cbz	r0, 800dae4 <rcl_action_take_result_request+0x64>
 800dad0:	280a      	cmp	r0, #10
 800dad2:	d007      	beq.n	800dae4 <rcl_action_take_result_request+0x64>
 800dad4:	f240 2259 	movw	r2, #601	@ 0x259
 800dad8:	f640 0399 	movw	r3, #2201	@ 0x899
 800dadc:	4290      	cmp	r0, r2
 800dade:	bf0c      	ite	eq
 800dae0:	4618      	moveq	r0, r3
 800dae2:	2001      	movne	r0, #1
 800dae4:	bd70      	pop	{r4, r5, r6, pc}
 800dae6:	f7fc fa83 	bl	8009ff0 <rcutils_reset_error>
 800daea:	f640 0098 	movw	r0, #2200	@ 0x898
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	f640 0098 	movw	r0, #2200	@ 0x898
 800daf4:	bd70      	pop	{r4, r5, r6, pc}
 800daf6:	200b      	movs	r0, #11
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	f640 0098 	movw	r0, #2200	@ 0x898
 800dafe:	4770      	bx	lr

0800db00 <rcl_action_take_cancel_request>:
 800db00:	2800      	cmp	r0, #0
 800db02:	d03a      	beq.n	800db7a <rcl_action_take_cancel_request+0x7a>
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	4604      	mov	r4, r0
 800db08:	6800      	ldr	r0, [r0, #0]
 800db0a:	b388      	cbz	r0, 800db70 <rcl_action_take_cancel_request+0x70>
 800db0c:	460d      	mov	r5, r1
 800db0e:	4616      	mov	r6, r2
 800db10:	f7fe fc48 	bl	800c3a4 <rcl_service_is_valid>
 800db14:	b338      	cbz	r0, 800db66 <rcl_action_take_cancel_request+0x66>
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	3004      	adds	r0, #4
 800db1a:	f7fe fc43 	bl	800c3a4 <rcl_service_is_valid>
 800db1e:	b310      	cbz	r0, 800db66 <rcl_action_take_cancel_request+0x66>
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	3008      	adds	r0, #8
 800db24:	f7fe fc3e 	bl	800c3a4 <rcl_service_is_valid>
 800db28:	b1e8      	cbz	r0, 800db66 <rcl_action_take_cancel_request+0x66>
 800db2a:	6820      	ldr	r0, [r4, #0]
 800db2c:	300c      	adds	r0, #12
 800db2e:	f006 f8ab 	bl	8013c88 <rcl_publisher_is_valid>
 800db32:	b1c0      	cbz	r0, 800db66 <rcl_action_take_cancel_request+0x66>
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	3010      	adds	r0, #16
 800db38:	f006 f8a6 	bl	8013c88 <rcl_publisher_is_valid>
 800db3c:	b198      	cbz	r0, 800db66 <rcl_action_take_cancel_request+0x66>
 800db3e:	b1d5      	cbz	r5, 800db76 <rcl_action_take_cancel_request+0x76>
 800db40:	b1ce      	cbz	r6, 800db76 <rcl_action_take_cancel_request+0x76>
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	4632      	mov	r2, r6
 800db46:	4629      	mov	r1, r5
 800db48:	3004      	adds	r0, #4
 800db4a:	f7fe fbd3 	bl	800c2f4 <rcl_take_request>
 800db4e:	b148      	cbz	r0, 800db64 <rcl_action_take_cancel_request+0x64>
 800db50:	280a      	cmp	r0, #10
 800db52:	d007      	beq.n	800db64 <rcl_action_take_cancel_request+0x64>
 800db54:	f240 2259 	movw	r2, #601	@ 0x259
 800db58:	f640 0399 	movw	r3, #2201	@ 0x899
 800db5c:	4290      	cmp	r0, r2
 800db5e:	bf0c      	ite	eq
 800db60:	4618      	moveq	r0, r3
 800db62:	2001      	movne	r0, #1
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	f7fc fa43 	bl	8009ff0 <rcutils_reset_error>
 800db6a:	f640 0098 	movw	r0, #2200	@ 0x898
 800db6e:	bd70      	pop	{r4, r5, r6, pc}
 800db70:	f640 0098 	movw	r0, #2200	@ 0x898
 800db74:	bd70      	pop	{r4, r5, r6, pc}
 800db76:	200b      	movs	r0, #11
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	f640 0098 	movw	r0, #2200	@ 0x898
 800db7e:	4770      	bx	lr

0800db80 <rcl_action_send_cancel_response>:
 800db80:	b398      	cbz	r0, 800dbea <rcl_action_send_cancel_response+0x6a>
 800db82:	b570      	push	{r4, r5, r6, lr}
 800db84:	4604      	mov	r4, r0
 800db86:	6800      	ldr	r0, [r0, #0]
 800db88:	b350      	cbz	r0, 800dbe0 <rcl_action_send_cancel_response+0x60>
 800db8a:	460d      	mov	r5, r1
 800db8c:	4616      	mov	r6, r2
 800db8e:	f7fe fc09 	bl	800c3a4 <rcl_service_is_valid>
 800db92:	b300      	cbz	r0, 800dbd6 <rcl_action_send_cancel_response+0x56>
 800db94:	6820      	ldr	r0, [r4, #0]
 800db96:	3004      	adds	r0, #4
 800db98:	f7fe fc04 	bl	800c3a4 <rcl_service_is_valid>
 800db9c:	b1d8      	cbz	r0, 800dbd6 <rcl_action_send_cancel_response+0x56>
 800db9e:	6820      	ldr	r0, [r4, #0]
 800dba0:	3008      	adds	r0, #8
 800dba2:	f7fe fbff 	bl	800c3a4 <rcl_service_is_valid>
 800dba6:	b1b0      	cbz	r0, 800dbd6 <rcl_action_send_cancel_response+0x56>
 800dba8:	6820      	ldr	r0, [r4, #0]
 800dbaa:	300c      	adds	r0, #12
 800dbac:	f006 f86c 	bl	8013c88 <rcl_publisher_is_valid>
 800dbb0:	b188      	cbz	r0, 800dbd6 <rcl_action_send_cancel_response+0x56>
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	3010      	adds	r0, #16
 800dbb6:	f006 f867 	bl	8013c88 <rcl_publisher_is_valid>
 800dbba:	b160      	cbz	r0, 800dbd6 <rcl_action_send_cancel_response+0x56>
 800dbbc:	b19d      	cbz	r5, 800dbe6 <rcl_action_send_cancel_response+0x66>
 800dbbe:	b196      	cbz	r6, 800dbe6 <rcl_action_send_cancel_response+0x66>
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	3004      	adds	r0, #4
 800dbc8:	f7fe fbd4 	bl	800c374 <rcl_send_response>
 800dbcc:	b110      	cbz	r0, 800dbd4 <rcl_action_send_cancel_response+0x54>
 800dbce:	2802      	cmp	r0, #2
 800dbd0:	bf18      	it	ne
 800dbd2:	2001      	movne	r0, #1
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
 800dbd6:	f7fc fa0b 	bl	8009ff0 <rcutils_reset_error>
 800dbda:	f640 0098 	movw	r0, #2200	@ 0x898
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	f640 0098 	movw	r0, #2200	@ 0x898
 800dbe4:	bd70      	pop	{r4, r5, r6, pc}
 800dbe6:	200b      	movs	r0, #11
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
 800dbea:	f640 0098 	movw	r0, #2200	@ 0x898
 800dbee:	4770      	bx	lr

0800dbf0 <rcl_action_wait_set_add_action_server>:
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d04d      	beq.n	800dc90 <rcl_action_wait_set_add_action_server+0xa0>
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	b159      	cbz	r1, 800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	6808      	ldr	r0, [r1, #0]
 800dbfe:	b140      	cbz	r0, 800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dc00:	4616      	mov	r6, r2
 800dc02:	f7fe fbcf 	bl	800c3a4 <rcl_service_is_valid>
 800dc06:	b120      	cbz	r0, 800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dc08:	6820      	ldr	r0, [r4, #0]
 800dc0a:	3004      	adds	r0, #4
 800dc0c:	f7fe fbca 	bl	800c3a4 <rcl_service_is_valid>
 800dc10:	b910      	cbnz	r0, 800dc18 <rcl_action_wait_set_add_action_server+0x28>
 800dc12:	f640 0098 	movw	r0, #2200	@ 0x898
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
 800dc18:	6820      	ldr	r0, [r4, #0]
 800dc1a:	3008      	adds	r0, #8
 800dc1c:	f7fe fbc2 	bl	800c3a4 <rcl_service_is_valid>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d0f6      	beq.n	800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dc24:	6820      	ldr	r0, [r4, #0]
 800dc26:	300c      	adds	r0, #12
 800dc28:	f006 f846 	bl	8013cb8 <rcl_publisher_is_valid_except_context>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d0f0      	beq.n	800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dc30:	6820      	ldr	r0, [r4, #0]
 800dc32:	3010      	adds	r0, #16
 800dc34:	f006 f840 	bl	8013cb8 <rcl_publisher_is_valid_except_context>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d0ea      	beq.n	800dc12 <rcl_action_wait_set_add_action_server+0x22>
 800dc3c:	6821      	ldr	r1, [r4, #0]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800dc44:	f7ff face 	bl	800d1e4 <rcl_wait_set_add_service>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d1e4      	bne.n	800dc16 <rcl_action_wait_set_add_action_server+0x26>
 800dc4c:	6821      	ldr	r1, [r4, #0]
 800dc4e:	4628      	mov	r0, r5
 800dc50:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800dc54:	3104      	adds	r1, #4
 800dc56:	f7ff fac5 	bl	800d1e4 <rcl_wait_set_add_service>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d1db      	bne.n	800dc16 <rcl_action_wait_set_add_action_server+0x26>
 800dc5e:	6821      	ldr	r1, [r4, #0]
 800dc60:	4628      	mov	r0, r5
 800dc62:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800dc66:	3108      	adds	r1, #8
 800dc68:	f7ff fabc 	bl	800d1e4 <rcl_wait_set_add_service>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d1d2      	bne.n	800dc16 <rcl_action_wait_set_add_action_server+0x26>
 800dc70:	6821      	ldr	r1, [r4, #0]
 800dc72:	4628      	mov	r0, r5
 800dc74:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800dc78:	3114      	adds	r1, #20
 800dc7a:	f7ff fa57 	bl	800d12c <rcl_wait_set_add_timer>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d1c9      	bne.n	800dc16 <rcl_action_wait_set_add_action_server+0x26>
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	d0c7      	beq.n	800dc16 <rcl_action_wait_set_add_action_server+0x26>
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800dc8c:	6033      	str	r3, [r6, #0]
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop

0800dc98 <rcl_action_server_wait_set_get_entities_ready>:
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d05a      	beq.n	800dd52 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	460c      	mov	r4, r1
 800dca0:	b161      	cbz	r1, 800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dca2:	4605      	mov	r5, r0
 800dca4:	6808      	ldr	r0, [r1, #0]
 800dca6:	b148      	cbz	r0, 800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dca8:	4616      	mov	r6, r2
 800dcaa:	461f      	mov	r7, r3
 800dcac:	f7fe fb7a 	bl	800c3a4 <rcl_service_is_valid>
 800dcb0:	b120      	cbz	r0, 800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dcb2:	6820      	ldr	r0, [r4, #0]
 800dcb4:	3004      	adds	r0, #4
 800dcb6:	f7fe fb75 	bl	800c3a4 <rcl_service_is_valid>
 800dcba:	b910      	cbnz	r0, 800dcc2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800dcbc:	f640 0098 	movw	r0, #2200	@ 0x898
 800dcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc2:	6820      	ldr	r0, [r4, #0]
 800dcc4:	3008      	adds	r0, #8
 800dcc6:	f7fe fb6d 	bl	800c3a4 <rcl_service_is_valid>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0f6      	beq.n	800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dcce:	6820      	ldr	r0, [r4, #0]
 800dcd0:	300c      	adds	r0, #12
 800dcd2:	f005 fff1 	bl	8013cb8 <rcl_publisher_is_valid_except_context>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d0f0      	beq.n	800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	3010      	adds	r0, #16
 800dcde:	f005 ffeb 	bl	8013cb8 <rcl_publisher_is_valid_except_context>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d0ea      	beq.n	800dcbc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800dce6:	b3be      	cbz	r6, 800dd58 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800dce8:	b3b7      	cbz	r7, 800dd58 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800dcea:	9b06      	ldr	r3, [sp, #24]
 800dcec:	b3a3      	cbz	r3, 800dd58 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800dcee:	9b07      	ldr	r3, [sp, #28]
 800dcf0:	b393      	cbz	r3, 800dd58 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800dcf2:	6821      	ldr	r1, [r4, #0]
 800dcf4:	692a      	ldr	r2, [r5, #16]
 800dcf6:	6a2c      	ldr	r4, [r5, #32]
 800dcf8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800dcfc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800dd00:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800dd04:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800dd08:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800dd0c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800dd10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800dd14:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800dd18:	1a64      	subs	r4, r4, r1
 800dd1a:	fab4 f484 	clz	r4, r4
 800dd1e:	0964      	lsrs	r4, r4, #5
 800dd20:	7034      	strb	r4, [r6, #0]
 800dd22:	1d0c      	adds	r4, r1, #4
 800dd24:	1b1b      	subs	r3, r3, r4
 800dd26:	fab3 f383 	clz	r3, r3
 800dd2a:	095b      	lsrs	r3, r3, #5
 800dd2c:	f101 0408 	add.w	r4, r1, #8
 800dd30:	703b      	strb	r3, [r7, #0]
 800dd32:	f101 0314 	add.w	r3, r1, #20
 800dd36:	1b01      	subs	r1, r0, r4
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	fab1 f181 	clz	r1, r1
 800dd3e:	9a06      	ldr	r2, [sp, #24]
 800dd40:	0949      	lsrs	r1, r1, #5
 800dd42:	7011      	strb	r1, [r2, #0]
 800dd44:	fab3 f383 	clz	r3, r3
 800dd48:	9a07      	ldr	r2, [sp, #28]
 800dd4a:	095b      	lsrs	r3, r3, #5
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	7013      	strb	r3, [r2, #0]
 800dd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dd56:	4770      	bx	lr
 800dd58:	200b      	movs	r0, #11
 800dd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd5c <_execute_event_handler>:
 800dd5c:	2002      	movs	r0, #2
 800dd5e:	4770      	bx	lr

0800dd60 <_cancel_goal_event_handler>:
 800dd60:	2003      	movs	r0, #3
 800dd62:	4770      	bx	lr

0800dd64 <_succeed_event_handler>:
 800dd64:	2004      	movs	r0, #4
 800dd66:	4770      	bx	lr

0800dd68 <_abort_event_handler>:
 800dd68:	2006      	movs	r0, #6
 800dd6a:	4770      	bx	lr

0800dd6c <_canceled_event_handler>:
 800dd6c:	2005      	movs	r0, #5
 800dd6e:	4770      	bx	lr

0800dd70 <rcl_action_transition_goal_state>:
 800dd70:	b2c2      	uxtb	r2, r0
 800dd72:	2a06      	cmp	r2, #6
 800dd74:	d80c      	bhi.n	800dd90 <rcl_action_transition_goal_state+0x20>
 800dd76:	2904      	cmp	r1, #4
 800dd78:	d80a      	bhi.n	800dd90 <rcl_action_transition_goal_state+0x20>
 800dd7a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800dd7e:	b410      	push	{r4}
 800dd80:	1853      	adds	r3, r2, r1
 800dd82:	4c06      	ldr	r4, [pc, #24]	@ (800dd9c <rcl_action_transition_goal_state+0x2c>)
 800dd84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800dd88:	b123      	cbz	r3, 800dd94 <rcl_action_transition_goal_state+0x24>
 800dd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd8e:	4718      	bx	r3
 800dd90:	2000      	movs	r0, #0
 800dd92:	4770      	bx	lr
 800dd94:	2000      	movs	r0, #0
 800dd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	08016d54 	.word	0x08016d54

0800dda0 <rcl_action_get_zero_initialized_cancel_response>:
 800dda0:	b510      	push	{r4, lr}
 800dda2:	4c07      	ldr	r4, [pc, #28]	@ (800ddc0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800dda4:	4686      	mov	lr, r0
 800dda6:	4684      	mov	ip, r0
 800dda8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ddae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	f8cc 3000 	str.w	r3, [ip]
 800ddba:	4670      	mov	r0, lr
 800ddbc:	bd10      	pop	{r4, pc}
 800ddbe:	bf00      	nop
 800ddc0:	08016de0 	.word	0x08016de0

0800ddc4 <rclc_action_send_result_request>:
 800ddc4:	b1d0      	cbz	r0, 800ddfc <rclc_action_send_result_request+0x38>
 800ddc6:	b500      	push	{lr}
 800ddc8:	4684      	mov	ip, r0
 800ddca:	b087      	sub	sp, #28
 800ddcc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800ddd0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800ddd4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800ddd8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800dddc:	f10d 0e08 	add.w	lr, sp, #8
 800dde0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dde4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800dde8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800ddec:	a902      	add	r1, sp, #8
 800ddee:	3010      	adds	r0, #16
 800ddf0:	f7ff fbda 	bl	800d5a8 <rcl_action_send_result_request>
 800ddf4:	b920      	cbnz	r0, 800de00 <rclc_action_send_result_request+0x3c>
 800ddf6:	b007      	add	sp, #28
 800ddf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddfc:	200b      	movs	r0, #11
 800ddfe:	4770      	bx	lr
 800de00:	9001      	str	r0, [sp, #4]
 800de02:	f7fc f8f5 	bl	8009ff0 <rcutils_reset_error>
 800de06:	9801      	ldr	r0, [sp, #4]
 800de08:	b007      	add	sp, #28
 800de0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800de0e:	bf00      	nop

0800de10 <rclc_action_take_goal_handle>:
 800de10:	b160      	cbz	r0, 800de2c <rclc_action_take_goal_handle+0x1c>
 800de12:	6883      	ldr	r3, [r0, #8]
 800de14:	b143      	cbz	r3, 800de28 <rclc_action_take_goal_handle+0x18>
 800de16:	6819      	ldr	r1, [r3, #0]
 800de18:	6081      	str	r1, [r0, #8]
 800de1a:	2200      	movs	r2, #0
 800de1c:	721a      	strb	r2, [r3, #8]
 800de1e:	68c1      	ldr	r1, [r0, #12]
 800de20:	6019      	str	r1, [r3, #0]
 800de22:	621a      	str	r2, [r3, #32]
 800de24:	849a      	strh	r2, [r3, #36]	@ 0x24
 800de26:	60c3      	str	r3, [r0, #12]
 800de28:	4618      	mov	r0, r3
 800de2a:	4770      	bx	lr
 800de2c:	4603      	mov	r3, r0
 800de2e:	e7fb      	b.n	800de28 <rclc_action_take_goal_handle+0x18>

0800de30 <rclc_action_remove_used_goal_handle>:
 800de30:	b180      	cbz	r0, 800de54 <rclc_action_remove_used_goal_handle+0x24>
 800de32:	b179      	cbz	r1, 800de54 <rclc_action_remove_used_goal_handle+0x24>
 800de34:	68c3      	ldr	r3, [r0, #12]
 800de36:	4299      	cmp	r1, r3
 800de38:	d00d      	beq.n	800de56 <rclc_action_remove_used_goal_handle+0x26>
 800de3a:	b12b      	cbz	r3, 800de48 <rclc_action_remove_used_goal_handle+0x18>
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	4291      	cmp	r1, r2
 800de40:	d003      	beq.n	800de4a <rclc_action_remove_used_goal_handle+0x1a>
 800de42:	4613      	mov	r3, r2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f9      	bne.n	800de3c <rclc_action_remove_used_goal_handle+0xc>
 800de48:	4770      	bx	lr
 800de4a:	680a      	ldr	r2, [r1, #0]
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	6883      	ldr	r3, [r0, #8]
 800de50:	600b      	str	r3, [r1, #0]
 800de52:	6081      	str	r1, [r0, #8]
 800de54:	4770      	bx	lr
 800de56:	680b      	ldr	r3, [r1, #0]
 800de58:	60c3      	str	r3, [r0, #12]
 800de5a:	e7f8      	b.n	800de4e <rclc_action_remove_used_goal_handle+0x1e>

0800de5c <rclc_action_find_goal_handle_by_uuid>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	b180      	cbz	r0, 800de82 <rclc_action_find_goal_handle_by_uuid+0x26>
 800de60:	460d      	mov	r5, r1
 800de62:	b181      	cbz	r1, 800de86 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800de64:	68c4      	ldr	r4, [r0, #12]
 800de66:	b914      	cbnz	r4, 800de6e <rclc_action_find_goal_handle_by_uuid+0x12>
 800de68:	e009      	b.n	800de7e <rclc_action_find_goal_handle_by_uuid+0x22>
 800de6a:	6824      	ldr	r4, [r4, #0]
 800de6c:	b13c      	cbz	r4, 800de7e <rclc_action_find_goal_handle_by_uuid+0x22>
 800de6e:	f104 0009 	add.w	r0, r4, #9
 800de72:	2210      	movs	r2, #16
 800de74:	4629      	mov	r1, r5
 800de76:	f007 fced 	bl	8015854 <memcmp>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d1f5      	bne.n	800de6a <rclc_action_find_goal_handle_by_uuid+0xe>
 800de7e:	4620      	mov	r0, r4
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	4604      	mov	r4, r0
 800de84:	e7fb      	b.n	800de7e <rclc_action_find_goal_handle_by_uuid+0x22>
 800de86:	460c      	mov	r4, r1
 800de88:	e7f9      	b.n	800de7e <rclc_action_find_goal_handle_by_uuid+0x22>
 800de8a:	bf00      	nop

0800de8c <rclc_action_find_first_handle_by_status>:
 800de8c:	b140      	cbz	r0, 800dea0 <rclc_action_find_first_handle_by_status+0x14>
 800de8e:	68c0      	ldr	r0, [r0, #12]
 800de90:	b910      	cbnz	r0, 800de98 <rclc_action_find_first_handle_by_status+0xc>
 800de92:	e005      	b.n	800dea0 <rclc_action_find_first_handle_by_status+0x14>
 800de94:	6800      	ldr	r0, [r0, #0]
 800de96:	b118      	cbz	r0, 800dea0 <rclc_action_find_first_handle_by_status+0x14>
 800de98:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800de9c:	428b      	cmp	r3, r1
 800de9e:	d1f9      	bne.n	800de94 <rclc_action_find_first_handle_by_status+0x8>
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop

0800dea4 <rclc_action_find_first_terminated_handle>:
 800dea4:	b140      	cbz	r0, 800deb8 <rclc_action_find_first_terminated_handle+0x14>
 800dea6:	68c0      	ldr	r0, [r0, #12]
 800dea8:	b910      	cbnz	r0, 800deb0 <rclc_action_find_first_terminated_handle+0xc>
 800deaa:	e005      	b.n	800deb8 <rclc_action_find_first_terminated_handle+0x14>
 800deac:	6800      	ldr	r0, [r0, #0]
 800deae:	b118      	cbz	r0, 800deb8 <rclc_action_find_first_terminated_handle+0x14>
 800deb0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	ddf9      	ble.n	800deac <rclc_action_find_first_terminated_handle+0x8>
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop

0800debc <rclc_action_find_handle_by_goal_request_sequence_number>:
 800debc:	b170      	cbz	r0, 800dedc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800debe:	68c0      	ldr	r0, [r0, #12]
 800dec0:	b160      	cbz	r0, 800dedc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800dec2:	b410      	push	{r4}
 800dec4:	e001      	b.n	800deca <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800dec6:	6800      	ldr	r0, [r0, #0]
 800dec8:	b128      	cbz	r0, 800ded6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800deca:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800dece:	4299      	cmp	r1, r3
 800ded0:	bf08      	it	eq
 800ded2:	4294      	cmpeq	r4, r2
 800ded4:	d1f7      	bne.n	800dec6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800ded6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop

0800dee0 <rclc_action_find_handle_by_result_request_sequence_number>:
 800dee0:	b170      	cbz	r0, 800df00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800dee2:	68c0      	ldr	r0, [r0, #12]
 800dee4:	b160      	cbz	r0, 800df00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800dee6:	b410      	push	{r4}
 800dee8:	e001      	b.n	800deee <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800deea:	6800      	ldr	r0, [r0, #0]
 800deec:	b128      	cbz	r0, 800defa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800deee:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800def2:	4299      	cmp	r1, r3
 800def4:	bf08      	it	eq
 800def6:	4294      	cmpeq	r4, r2
 800def8:	d1f7      	bne.n	800deea <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800defa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop

0800df04 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800df04:	b170      	cbz	r0, 800df24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800df06:	68c0      	ldr	r0, [r0, #12]
 800df08:	b160      	cbz	r0, 800df24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800df0a:	b410      	push	{r4}
 800df0c:	e001      	b.n	800df12 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800df0e:	6800      	ldr	r0, [r0, #0]
 800df10:	b128      	cbz	r0, 800df1e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800df12:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800df16:	4299      	cmp	r1, r3
 800df18:	bf08      	it	eq
 800df1a:	4294      	cmpeq	r4, r2
 800df1c:	d1f7      	bne.n	800df0e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800df1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop

0800df28 <rclc_action_find_first_handle_with_goal_response>:
 800df28:	b140      	cbz	r0, 800df3c <rclc_action_find_first_handle_with_goal_response+0x14>
 800df2a:	68c0      	ldr	r0, [r0, #12]
 800df2c:	b910      	cbnz	r0, 800df34 <rclc_action_find_first_handle_with_goal_response+0xc>
 800df2e:	e005      	b.n	800df3c <rclc_action_find_first_handle_with_goal_response+0x14>
 800df30:	6800      	ldr	r0, [r0, #0]
 800df32:	b118      	cbz	r0, 800df3c <rclc_action_find_first_handle_with_goal_response+0x14>
 800df34:	f890 3020 	ldrb.w	r3, [r0, #32]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0f9      	beq.n	800df30 <rclc_action_find_first_handle_with_goal_response+0x8>
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <rclc_action_find_first_handle_with_result_response>:
 800df40:	b140      	cbz	r0, 800df54 <rclc_action_find_first_handle_with_result_response+0x14>
 800df42:	68c0      	ldr	r0, [r0, #12]
 800df44:	b910      	cbnz	r0, 800df4c <rclc_action_find_first_handle_with_result_response+0xc>
 800df46:	e005      	b.n	800df54 <rclc_action_find_first_handle_with_result_response+0x14>
 800df48:	6800      	ldr	r0, [r0, #0]
 800df4a:	b118      	cbz	r0, 800df54 <rclc_action_find_first_handle_with_result_response+0x14>
 800df4c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800df50:	2b00      	cmp	r3, #0
 800df52:	d0f9      	beq.n	800df48 <rclc_action_find_first_handle_with_result_response+0x8>
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop

0800df58 <rclc_action_server_response_goal_request>:
 800df58:	b198      	cbz	r0, 800df82 <rclc_action_server_response_goal_request+0x2a>
 800df5a:	b510      	push	{r4, lr}
 800df5c:	6844      	ldr	r4, [r0, #4]
 800df5e:	b086      	sub	sp, #24
 800df60:	2200      	movs	r2, #0
 800df62:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800df66:	460b      	mov	r3, r1
 800df68:	9205      	str	r2, [sp, #20]
 800df6a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800df6e:	aa03      	add	r2, sp, #12
 800df70:	f104 0010 	add.w	r0, r4, #16
 800df74:	f88d 300c 	strb.w	r3, [sp, #12]
 800df78:	f7ff fd4a 	bl	800da10 <rcl_action_send_goal_response>
 800df7c:	b918      	cbnz	r0, 800df86 <rclc_action_server_response_goal_request+0x2e>
 800df7e:	b006      	add	sp, #24
 800df80:	bd10      	pop	{r4, pc}
 800df82:	200b      	movs	r0, #11
 800df84:	4770      	bx	lr
 800df86:	9001      	str	r0, [sp, #4]
 800df88:	f7fc f832 	bl	8009ff0 <rcutils_reset_error>
 800df8c:	9801      	ldr	r0, [sp, #4]
 800df8e:	b006      	add	sp, #24
 800df90:	bd10      	pop	{r4, pc}
 800df92:	bf00      	nop
 800df94:	0000      	movs	r0, r0
	...

0800df98 <rclc_action_server_goal_cancel_accept>:
 800df98:	b310      	cbz	r0, 800dfe0 <rclc_action_server_goal_cancel_accept+0x48>
 800df9a:	b510      	push	{r4, lr}
 800df9c:	b090      	sub	sp, #64	@ 0x40
 800df9e:	4604      	mov	r4, r0
 800dfa0:	a806      	add	r0, sp, #24
 800dfa2:	f7ff fefd 	bl	800dda0 <rcl_action_get_zero_initialized_cancel_response>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800dfac:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800dfb0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800dfb4:	f88d 3018 	strb.w	r3, [sp, #24]
 800dfb8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800dfbc:	f8cd d01c 	str.w	sp, [sp, #28]
 800dfc0:	46ec      	mov	ip, sp
 800dfc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfc6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800dfe8 <rclc_action_server_goal_cancel_accept+0x50>
 800dfca:	6860      	ldr	r0, [r4, #4]
 800dfcc:	aa06      	add	r2, sp, #24
 800dfce:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800dfd2:	3010      	adds	r0, #16
 800dfd4:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dfd8:	f7ff fdd2 	bl	800db80 <rcl_action_send_cancel_response>
 800dfdc:	b010      	add	sp, #64	@ 0x40
 800dfde:	bd10      	pop	{r4, pc}
 800dfe0:	200b      	movs	r0, #11
 800dfe2:	4770      	bx	lr
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	00000001 	.word	0x00000001
 800dfec:	00000001 	.word	0x00000001

0800dff0 <rclc_action_server_goal_cancel_reject>:
 800dff0:	b082      	sub	sp, #8
 800dff2:	b530      	push	{r4, r5, lr}
 800dff4:	b08b      	sub	sp, #44	@ 0x2c
 800dff6:	ac0e      	add	r4, sp, #56	@ 0x38
 800dff8:	e884 000c 	stmia.w	r4, {r2, r3}
 800dffc:	b188      	cbz	r0, 800e022 <rclc_action_server_goal_cancel_reject+0x32>
 800dffe:	4604      	mov	r4, r0
 800e000:	a801      	add	r0, sp, #4
 800e002:	460d      	mov	r5, r1
 800e004:	f7ff fecc 	bl	800dda0 <rcl_action_get_zero_initialized_cancel_response>
 800e008:	aa01      	add	r2, sp, #4
 800e00a:	a90e      	add	r1, sp, #56	@ 0x38
 800e00c:	f104 0010 	add.w	r0, r4, #16
 800e010:	f88d 5004 	strb.w	r5, [sp, #4]
 800e014:	f7ff fdb4 	bl	800db80 <rcl_action_send_cancel_response>
 800e018:	b00b      	add	sp, #44	@ 0x2c
 800e01a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e01e:	b002      	add	sp, #8
 800e020:	4770      	bx	lr
 800e022:	200b      	movs	r0, #11
 800e024:	b00b      	add	sp, #44	@ 0x2c
 800e026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e02a:	b002      	add	sp, #8
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop

0800e030 <__atomic_load_8>:
 800e030:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e034:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e038:	4a15      	ldr	r2, [pc, #84]	@ (800e090 <__atomic_load_8+0x60>)
 800e03a:	4b16      	ldr	r3, [pc, #88]	@ (800e094 <__atomic_load_8+0x64>)
 800e03c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e040:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e044:	fb02 f101 	mul.w	r1, r2, r1
 800e048:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e04c:	fba3 2301 	umull	r2, r3, r3, r1
 800e050:	091b      	lsrs	r3, r3, #4
 800e052:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e056:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800e05a:	b4d0      	push	{r4, r6, r7}
 800e05c:	4c0e      	ldr	r4, [pc, #56]	@ (800e098 <__atomic_load_8+0x68>)
 800e05e:	1ac9      	subs	r1, r1, r3
 800e060:	1862      	adds	r2, r4, r1
 800e062:	f04f 0c01 	mov.w	ip, #1
 800e066:	e8d2 3f4f 	ldrexb	r3, [r2]
 800e06a:	e8c2 cf46 	strexb	r6, ip, [r2]
 800e06e:	2e00      	cmp	r6, #0
 800e070:	d1f9      	bne.n	800e066 <__atomic_load_8+0x36>
 800e072:	f3bf 8f5b 	dmb	ish
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1f4      	bne.n	800e066 <__atomic_load_8+0x36>
 800e07c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e080:	f3bf 8f5b 	dmb	ish
 800e084:	5463      	strb	r3, [r4, r1]
 800e086:	4630      	mov	r0, r6
 800e088:	4639      	mov	r1, r7
 800e08a:	bcd0      	pop	{r4, r6, r7}
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	27d4eb2d 	.word	0x27d4eb2d
 800e094:	b21642c9 	.word	0xb21642c9
 800e098:	200095a0 	.word	0x200095a0

0800e09c <__atomic_store_8>:
 800e09c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e0a0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e0aa:	4c14      	ldr	r4, [pc, #80]	@ (800e0fc <__atomic_store_8+0x60>)
 800e0ac:	4d14      	ldr	r5, [pc, #80]	@ (800e100 <__atomic_store_8+0x64>)
 800e0ae:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e0b2:	fb04 f101 	mul.w	r1, r4, r1
 800e0b6:	4c13      	ldr	r4, [pc, #76]	@ (800e104 <__atomic_store_8+0x68>)
 800e0b8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e0bc:	fba4 4e01 	umull	r4, lr, r4, r1
 800e0c0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800e0c4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800e0c8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800e0cc:	eba1 0e0e 	sub.w	lr, r1, lr
 800e0d0:	eb05 0c0e 	add.w	ip, r5, lr
 800e0d4:	f04f 0401 	mov.w	r4, #1
 800e0d8:	e8dc 1f4f 	ldrexb	r1, [ip]
 800e0dc:	e8cc 4f46 	strexb	r6, r4, [ip]
 800e0e0:	2e00      	cmp	r6, #0
 800e0e2:	d1f9      	bne.n	800e0d8 <__atomic_store_8+0x3c>
 800e0e4:	f3bf 8f5b 	dmb	ish
 800e0e8:	b2c9      	uxtb	r1, r1
 800e0ea:	2900      	cmp	r1, #0
 800e0ec:	d1f4      	bne.n	800e0d8 <__atomic_store_8+0x3c>
 800e0ee:	e9c0 2300 	strd	r2, r3, [r0]
 800e0f2:	f3bf 8f5b 	dmb	ish
 800e0f6:	f805 100e 	strb.w	r1, [r5, lr]
 800e0fa:	bd70      	pop	{r4, r5, r6, pc}
 800e0fc:	27d4eb2d 	.word	0x27d4eb2d
 800e100:	200095a0 	.word	0x200095a0
 800e104:	b21642c9 	.word	0xb21642c9

0800e108 <__atomic_exchange_8>:
 800e108:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800e10c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800e110:	4916      	ldr	r1, [pc, #88]	@ (800e16c <__atomic_exchange_8+0x64>)
 800e112:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800e116:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800e11a:	fb01 fc0c 	mul.w	ip, r1, ip
 800e11e:	4914      	ldr	r1, [pc, #80]	@ (800e170 <__atomic_exchange_8+0x68>)
 800e120:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	4605      	mov	r5, r0
 800e128:	fba1 010c 	umull	r0, r1, r1, ip
 800e12c:	0909      	lsrs	r1, r1, #4
 800e12e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800e132:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800e136:	4e0f      	ldr	r6, [pc, #60]	@ (800e174 <__atomic_exchange_8+0x6c>)
 800e138:	ebac 0c01 	sub.w	ip, ip, r1
 800e13c:	eb06 010c 	add.w	r1, r6, ip
 800e140:	f04f 0e01 	mov.w	lr, #1
 800e144:	e8d1 4f4f 	ldrexb	r4, [r1]
 800e148:	e8c1 ef40 	strexb	r0, lr, [r1]
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d1f9      	bne.n	800e144 <__atomic_exchange_8+0x3c>
 800e150:	f3bf 8f5b 	dmb	ish
 800e154:	b2e4      	uxtb	r4, r4
 800e156:	2c00      	cmp	r4, #0
 800e158:	d1f4      	bne.n	800e144 <__atomic_exchange_8+0x3c>
 800e15a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e15e:	e9c5 2300 	strd	r2, r3, [r5]
 800e162:	f3bf 8f5b 	dmb	ish
 800e166:	f806 400c 	strb.w	r4, [r6, ip]
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	27d4eb2d 	.word	0x27d4eb2d
 800e170:	b21642c9 	.word	0xb21642c9
 800e174:	200095a0 	.word	0x200095a0

0800e178 <rcutils_get_env>:
 800e178:	b168      	cbz	r0, 800e196 <rcutils_get_env+0x1e>
 800e17a:	b510      	push	{r4, lr}
 800e17c:	460c      	mov	r4, r1
 800e17e:	b129      	cbz	r1, 800e18c <rcutils_get_env+0x14>
 800e180:	f006 ffd6 	bl	8015130 <getenv>
 800e184:	b120      	cbz	r0, 800e190 <rcutils_get_env+0x18>
 800e186:	6020      	str	r0, [r4, #0]
 800e188:	2000      	movs	r0, #0
 800e18a:	bd10      	pop	{r4, pc}
 800e18c:	4803      	ldr	r0, [pc, #12]	@ (800e19c <rcutils_get_env+0x24>)
 800e18e:	bd10      	pop	{r4, pc}
 800e190:	4b03      	ldr	r3, [pc, #12]	@ (800e1a0 <rcutils_get_env+0x28>)
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	bd10      	pop	{r4, pc}
 800e196:	4803      	ldr	r0, [pc, #12]	@ (800e1a4 <rcutils_get_env+0x2c>)
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	08016e20 	.word	0x08016e20
 800e1a0:	08016f44 	.word	0x08016f44
 800e1a4:	08016e04 	.word	0x08016e04

0800e1a8 <rcutils_format_string_limit>:
 800e1a8:	b40f      	push	{r0, r1, r2, r3}
 800e1aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	ac08      	add	r4, sp, #32
 800e1b0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e1b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e1b6:	b34e      	cbz	r6, 800e20c <rcutils_format_string_limit+0x64>
 800e1b8:	a808      	add	r0, sp, #32
 800e1ba:	f7fb fef3 	bl	8009fa4 <rcutils_allocator_is_valid>
 800e1be:	b328      	cbz	r0, 800e20c <rcutils_format_string_limit+0x64>
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	e9cd 3300 	strd	r3, r3, [sp]
 800e1cc:	f000 f8f4 	bl	800e3b8 <rcutils_vsnprintf>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	d01a      	beq.n	800e20c <rcutils_format_string_limit+0x64>
 800e1d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e1da:	1c47      	adds	r7, r0, #1
 800e1dc:	429f      	cmp	r7, r3
 800e1de:	bf84      	itt	hi
 800e1e0:	461f      	movhi	r7, r3
 800e1e2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	9b08      	ldr	r3, [sp, #32]
 800e1ea:	4798      	blx	r3
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	b168      	cbz	r0, 800e20c <rcutils_format_string_limit+0x64>
 800e1f0:	9b01      	ldr	r3, [sp, #4]
 800e1f2:	4632      	mov	r2, r6
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	f000 f8df 	bl	800e3b8 <rcutils_vsnprintf>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	db02      	blt.n	800e204 <rcutils_format_string_limit+0x5c>
 800e1fe:	2300      	movs	r3, #0
 800e200:	5563      	strb	r3, [r4, r5]
 800e202:	e004      	b.n	800e20e <rcutils_format_string_limit+0x66>
 800e204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e206:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e208:	4620      	mov	r0, r4
 800e20a:	4798      	blx	r3
 800e20c:	2400      	movs	r4, #0
 800e20e:	4620      	mov	r0, r4
 800e210:	b003      	add	sp, #12
 800e212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e216:	b004      	add	sp, #16
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop

0800e21c <rcutils_repl_str>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	ed2d 8b02 	vpush	{d8}
 800e224:	b087      	sub	sp, #28
 800e226:	4680      	mov	r8, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	f8cd 8004 	str.w	r8, [sp, #4]
 800e22e:	ee08 2a10 	vmov	s16, r2
 800e232:	468a      	mov	sl, r1
 800e234:	4699      	mov	r9, r3
 800e236:	f7f1 ffdd 	bl	80001f4 <strlen>
 800e23a:	2600      	movs	r6, #0
 800e23c:	4647      	mov	r7, r8
 800e23e:	9002      	str	r0, [sp, #8]
 800e240:	46b3      	mov	fp, r6
 800e242:	2510      	movs	r5, #16
 800e244:	46b0      	mov	r8, r6
 800e246:	e01d      	b.n	800e284 <rcutils_repl_str+0x68>
 800e248:	f10b 0b01 	add.w	fp, fp, #1
 800e24c:	455e      	cmp	r6, fp
 800e24e:	d211      	bcs.n	800e274 <rcutils_repl_str+0x58>
 800e250:	442e      	add	r6, r5
 800e252:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e256:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e25a:	00b1      	lsls	r1, r6, #2
 800e25c:	4798      	blx	r3
 800e25e:	2800      	cmp	r0, #0
 800e260:	f000 8088 	beq.w	800e374 <rcutils_repl_str+0x158>
 800e264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e268:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e26c:	4680      	mov	r8, r0
 800e26e:	bf28      	it	cs
 800e270:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e274:	9a01      	ldr	r2, [sp, #4]
 800e276:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e27a:	1aa2      	subs	r2, r4, r2
 800e27c:	f843 2c04 	str.w	r2, [r3, #-4]
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	18e7      	adds	r7, r4, r3
 800e284:	4651      	mov	r1, sl
 800e286:	4638      	mov	r0, r7
 800e288:	f007 fb35 	bl	80158f6 <strstr>
 800e28c:	4604      	mov	r4, r0
 800e28e:	4640      	mov	r0, r8
 800e290:	2c00      	cmp	r4, #0
 800e292:	d1d9      	bne.n	800e248 <rcutils_repl_str+0x2c>
 800e294:	46b8      	mov	r8, r7
 800e296:	4607      	mov	r7, r0
 800e298:	4640      	mov	r0, r8
 800e29a:	f7f1 ffab 	bl	80001f4 <strlen>
 800e29e:	9b01      	ldr	r3, [sp, #4]
 800e2a0:	eba8 0303 	sub.w	r3, r8, r3
 800e2a4:	181c      	adds	r4, r3, r0
 800e2a6:	9404      	str	r4, [sp, #16]
 800e2a8:	f1bb 0f00 	cmp.w	fp, #0
 800e2ac:	d04a      	beq.n	800e344 <rcutils_repl_str+0x128>
 800e2ae:	ee18 0a10 	vmov	r0, s16
 800e2b2:	f7f1 ff9f 	bl	80001f4 <strlen>
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e2bc:	1ac3      	subs	r3, r0, r3
 800e2be:	fb0b 4303 	mla	r3, fp, r3, r4
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	9305      	str	r3, [sp, #20]
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	f8d9 3000 	ldr.w	r3, [r9]
 800e2cc:	1c50      	adds	r0, r2, #1
 800e2ce:	4798      	blx	r3
 800e2d0:	9003      	str	r0, [sp, #12]
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d04f      	beq.n	800e376 <rcutils_repl_str+0x15a>
 800e2d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	4641      	mov	r1, r8
 800e2de:	f007 fbac 	bl	8015a3a <memcpy>
 800e2e2:	683d      	ldr	r5, [r7, #0]
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	9701      	str	r7, [sp, #4]
 800e2e8:	46ba      	mov	sl, r7
 800e2ea:	441d      	add	r5, r3
 800e2ec:	9f02      	ldr	r7, [sp, #8]
 800e2ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2f2:	2401      	movs	r4, #1
 800e2f4:	46d1      	mov	r9, sl
 800e2f6:	ee18 aa10 	vmov	sl, s16
 800e2fa:	e00a      	b.n	800e312 <rcutils_repl_str+0xf6>
 800e2fc:	f8d9 5000 	ldr.w	r5, [r9]
 800e300:	1aaa      	subs	r2, r5, r2
 800e302:	1885      	adds	r5, r0, r2
 800e304:	f007 fb99 	bl	8015a3a <memcpy>
 800e308:	45a3      	cmp	fp, r4
 800e30a:	f104 0201 	add.w	r2, r4, #1
 800e30e:	d935      	bls.n	800e37c <rcutils_repl_str+0x160>
 800e310:	4614      	mov	r4, r2
 800e312:	4632      	mov	r2, r6
 800e314:	4651      	mov	r1, sl
 800e316:	4628      	mov	r0, r5
 800e318:	f007 fb8f 	bl	8015a3a <memcpy>
 800e31c:	f859 2b04 	ldr.w	r2, [r9], #4
 800e320:	45a3      	cmp	fp, r4
 800e322:	443a      	add	r2, r7
 800e324:	eb05 0006 	add.w	r0, r5, r6
 800e328:	eb08 0102 	add.w	r1, r8, r2
 800e32c:	d1e6      	bne.n	800e2fc <rcutils_repl_str+0xe0>
 800e32e:	9b04      	ldr	r3, [sp, #16]
 800e330:	1a9a      	subs	r2, r3, r2
 800e332:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e336:	f007 fb80 	bl	8015a3a <memcpy>
 800e33a:	9a03      	ldr	r2, [sp, #12]
 800e33c:	9905      	ldr	r1, [sp, #20]
 800e33e:	2300      	movs	r3, #0
 800e340:	5453      	strb	r3, [r2, r1]
 800e342:	e00b      	b.n	800e35c <rcutils_repl_str+0x140>
 800e344:	4620      	mov	r0, r4
 800e346:	f8d9 3000 	ldr.w	r3, [r9]
 800e34a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e34e:	3001      	adds	r0, #1
 800e350:	4798      	blx	r3
 800e352:	9003      	str	r0, [sp, #12]
 800e354:	b110      	cbz	r0, 800e35c <rcutils_repl_str+0x140>
 800e356:	9901      	ldr	r1, [sp, #4]
 800e358:	f007 fb67 	bl	8015a2a <strcpy>
 800e35c:	4638      	mov	r0, r7
 800e35e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e362:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e366:	4798      	blx	r3
 800e368:	9803      	ldr	r0, [sp, #12]
 800e36a:	b007      	add	sp, #28
 800e36c:	ecbd 8b02 	vpop	{d8}
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	4647      	mov	r7, r8
 800e376:	2300      	movs	r3, #0
 800e378:	9303      	str	r3, [sp, #12]
 800e37a:	e7ef      	b.n	800e35c <rcutils_repl_str+0x140>
 800e37c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e380:	e7db      	b.n	800e33a <rcutils_repl_str+0x11e>
 800e382:	bf00      	nop

0800e384 <rcutils_snprintf>:
 800e384:	b40c      	push	{r2, r3}
 800e386:	b530      	push	{r4, r5, lr}
 800e388:	b083      	sub	sp, #12
 800e38a:	ab06      	add	r3, sp, #24
 800e38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	b152      	cbz	r2, 800e3aa <rcutils_snprintf+0x26>
 800e394:	b138      	cbz	r0, 800e3a6 <rcutils_snprintf+0x22>
 800e396:	b141      	cbz	r1, 800e3aa <rcutils_snprintf+0x26>
 800e398:	f007 fa4e 	bl	8015838 <vsniprintf>
 800e39c:	b003      	add	sp, #12
 800e39e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3a2:	b002      	add	sp, #8
 800e3a4:	4770      	bx	lr
 800e3a6:	2900      	cmp	r1, #0
 800e3a8:	d0f6      	beq.n	800e398 <rcutils_snprintf+0x14>
 800e3aa:	f007 fb11 	bl	80159d0 <__errno>
 800e3ae:	2316      	movs	r3, #22
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3b6:	e7f1      	b.n	800e39c <rcutils_snprintf+0x18>

0800e3b8 <rcutils_vsnprintf>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	b13a      	cbz	r2, 800e3cc <rcutils_vsnprintf+0x14>
 800e3bc:	b120      	cbz	r0, 800e3c8 <rcutils_vsnprintf+0x10>
 800e3be:	b129      	cbz	r1, 800e3cc <rcutils_vsnprintf+0x14>
 800e3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3c4:	f007 ba38 	b.w	8015838 <vsniprintf>
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	d0f9      	beq.n	800e3c0 <rcutils_vsnprintf+0x8>
 800e3cc:	f007 fb00 	bl	80159d0 <__errno>
 800e3d0:	2316      	movs	r3, #22
 800e3d2:	6003      	str	r3, [r0, #0]
 800e3d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3d8:	bd70      	pop	{r4, r5, r6, pc}
 800e3da:	bf00      	nop

0800e3dc <rcutils_strdup>:
 800e3dc:	b084      	sub	sp, #16
 800e3de:	b570      	push	{r4, r5, r6, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	ac07      	add	r4, sp, #28
 800e3e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	b1b0      	cbz	r0, 800e41a <rcutils_strdup+0x3e>
 800e3ec:	f7f1 ff02 	bl	80001f4 <strlen>
 800e3f0:	1c42      	adds	r2, r0, #1
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3f6:	9201      	str	r2, [sp, #4]
 800e3f8:	4606      	mov	r6, r0
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	4798      	blx	r3
 800e3fe:	4604      	mov	r4, r0
 800e400:	b128      	cbz	r0, 800e40e <rcutils_strdup+0x32>
 800e402:	9a01      	ldr	r2, [sp, #4]
 800e404:	4629      	mov	r1, r5
 800e406:	f007 fb18 	bl	8015a3a <memcpy>
 800e40a:	2300      	movs	r3, #0
 800e40c:	55a3      	strb	r3, [r4, r6]
 800e40e:	4620      	mov	r0, r4
 800e410:	b002      	add	sp, #8
 800e412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e416:	b004      	add	sp, #16
 800e418:	4770      	bx	lr
 800e41a:	4604      	mov	r4, r0
 800e41c:	e7f7      	b.n	800e40e <rcutils_strdup+0x32>
 800e41e:	bf00      	nop

0800e420 <rcutils_strndup>:
 800e420:	b082      	sub	sp, #8
 800e422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e424:	ac06      	add	r4, sp, #24
 800e426:	e884 000c 	stmia.w	r4, {r2, r3}
 800e42a:	4605      	mov	r5, r0
 800e42c:	b188      	cbz	r0, 800e452 <rcutils_strndup+0x32>
 800e42e:	1c4f      	adds	r7, r1, #1
 800e430:	460e      	mov	r6, r1
 800e432:	4638      	mov	r0, r7
 800e434:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e436:	4790      	blx	r2
 800e438:	4604      	mov	r4, r0
 800e43a:	b128      	cbz	r0, 800e448 <rcutils_strndup+0x28>
 800e43c:	463a      	mov	r2, r7
 800e43e:	4629      	mov	r1, r5
 800e440:	f007 fafb 	bl	8015a3a <memcpy>
 800e444:	2300      	movs	r3, #0
 800e446:	55a3      	strb	r3, [r4, r6]
 800e448:	4620      	mov	r0, r4
 800e44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e44e:	b002      	add	sp, #8
 800e450:	4770      	bx	lr
 800e452:	4604      	mov	r4, r0
 800e454:	e7f8      	b.n	800e448 <rcutils_strndup+0x28>
 800e456:	bf00      	nop

0800e458 <rcutils_get_zero_initialized_string_map>:
 800e458:	4b01      	ldr	r3, [pc, #4]	@ (800e460 <rcutils_get_zero_initialized_string_map+0x8>)
 800e45a:	2000      	movs	r0, #0
 800e45c:	6018      	str	r0, [r3, #0]
 800e45e:	4770      	bx	lr
 800e460:	200095b8 	.word	0x200095b8

0800e464 <rcutils_string_map_reserve>:
 800e464:	2800      	cmp	r0, #0
 800e466:	d05f      	beq.n	800e528 <rcutils_string_map_reserve+0xc4>
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	460c      	mov	r4, r1
 800e46e:	6801      	ldr	r1, [r0, #0]
 800e470:	b082      	sub	sp, #8
 800e472:	4605      	mov	r5, r0
 800e474:	b129      	cbz	r1, 800e482 <rcutils_string_map_reserve+0x1e>
 800e476:	68cb      	ldr	r3, [r1, #12]
 800e478:	42a3      	cmp	r3, r4
 800e47a:	d906      	bls.n	800e48a <rcutils_string_map_reserve+0x26>
 800e47c:	461c      	mov	r4, r3
 800e47e:	2900      	cmp	r1, #0
 800e480:	d1f9      	bne.n	800e476 <rcutils_string_map_reserve+0x12>
 800e482:	201f      	movs	r0, #31
 800e484:	b002      	add	sp, #8
 800e486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48a:	688b      	ldr	r3, [r1, #8]
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	d047      	beq.n	800e520 <rcutils_string_map_reserve+0xbc>
 800e490:	6a0e      	ldr	r6, [r1, #32]
 800e492:	2c00      	cmp	r4, #0
 800e494:	d034      	beq.n	800e500 <rcutils_string_map_reserve+0x9c>
 800e496:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e49a:	d243      	bcs.n	800e524 <rcutils_string_map_reserve+0xc0>
 800e49c:	00a7      	lsls	r7, r4, #2
 800e49e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e4a2:	6808      	ldr	r0, [r1, #0]
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	47c0      	blx	r8
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d03a      	beq.n	800e524 <rcutils_string_map_reserve+0xc0>
 800e4ae:	682b      	ldr	r3, [r5, #0]
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	6018      	str	r0, [r3, #0]
 800e4b4:	4639      	mov	r1, r7
 800e4b6:	6858      	ldr	r0, [r3, #4]
 800e4b8:	47c0      	blx	r8
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d032      	beq.n	800e524 <rcutils_string_map_reserve+0xc0>
 800e4be:	682d      	ldr	r5, [r5, #0]
 800e4c0:	68ab      	ldr	r3, [r5, #8]
 800e4c2:	6068      	str	r0, [r5, #4]
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	d226      	bcs.n	800e516 <rcutils_string_map_reserve+0xb2>
 800e4c8:	682a      	ldr	r2, [r5, #0]
 800e4ca:	eb00 0c07 	add.w	ip, r0, r7
 800e4ce:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800e4d2:	45e6      	cmp	lr, ip
 800e4d4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e4d8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e4dc:	d203      	bcs.n	800e4e6 <rcutils_string_map_reserve+0x82>
 800e4de:	eb02 0c07 	add.w	ip, r2, r7
 800e4e2:	4566      	cmp	r6, ip
 800e4e4:	d322      	bcc.n	800e52c <rcutils_string_map_reserve+0xc8>
 800e4e6:	1ae3      	subs	r3, r4, r3
 800e4e8:	009a      	lsls	r2, r3, #2
 800e4ea:	4670      	mov	r0, lr
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	9201      	str	r2, [sp, #4]
 800e4f0:	f007 f9da 	bl	80158a8 <memset>
 800e4f4:	9a01      	ldr	r2, [sp, #4]
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f007 f9d5 	bl	80158a8 <memset>
 800e4fe:	e00a      	b.n	800e516 <rcutils_string_map_reserve+0xb2>
 800e500:	694f      	ldr	r7, [r1, #20]
 800e502:	6808      	ldr	r0, [r1, #0]
 800e504:	4631      	mov	r1, r6
 800e506:	47b8      	blx	r7
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	4631      	mov	r1, r6
 800e50c:	6858      	ldr	r0, [r3, #4]
 800e50e:	601c      	str	r4, [r3, #0]
 800e510:	47b8      	blx	r7
 800e512:	682d      	ldr	r5, [r5, #0]
 800e514:	606c      	str	r4, [r5, #4]
 800e516:	2000      	movs	r0, #0
 800e518:	60ac      	str	r4, [r5, #8]
 800e51a:	b002      	add	sp, #8
 800e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e520:	2000      	movs	r0, #0
 800e522:	e7af      	b.n	800e484 <rcutils_string_map_reserve+0x20>
 800e524:	200a      	movs	r0, #10
 800e526:	e7ad      	b.n	800e484 <rcutils_string_map_reserve+0x20>
 800e528:	200b      	movs	r0, #11
 800e52a:	4770      	bx	lr
 800e52c:	1f0b      	subs	r3, r1, #4
 800e52e:	4418      	add	r0, r3
 800e530:	4413      	add	r3, r2
 800e532:	3a04      	subs	r2, #4
 800e534:	4417      	add	r7, r2
 800e536:	2200      	movs	r2, #0
 800e538:	f843 2f04 	str.w	r2, [r3, #4]!
 800e53c:	42bb      	cmp	r3, r7
 800e53e:	f840 2f04 	str.w	r2, [r0, #4]!
 800e542:	d1f9      	bne.n	800e538 <rcutils_string_map_reserve+0xd4>
 800e544:	e7e7      	b.n	800e516 <rcutils_string_map_reserve+0xb2>
 800e546:	bf00      	nop

0800e548 <rcutils_string_map_init>:
 800e548:	b082      	sub	sp, #8
 800e54a:	b570      	push	{r4, r5, r6, lr}
 800e54c:	ac04      	add	r4, sp, #16
 800e54e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e552:	b380      	cbz	r0, 800e5b6 <rcutils_string_map_init+0x6e>
 800e554:	6806      	ldr	r6, [r0, #0]
 800e556:	4604      	mov	r4, r0
 800e558:	b12e      	cbz	r6, 800e566 <rcutils_string_map_init+0x1e>
 800e55a:	251e      	movs	r5, #30
 800e55c:	4628      	mov	r0, r5
 800e55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e562:	b002      	add	sp, #8
 800e564:	4770      	bx	lr
 800e566:	a804      	add	r0, sp, #16
 800e568:	460d      	mov	r5, r1
 800e56a:	f7fb fd1b 	bl	8009fa4 <rcutils_allocator_is_valid>
 800e56e:	b310      	cbz	r0, 800e5b6 <rcutils_string_map_init+0x6e>
 800e570:	9b04      	ldr	r3, [sp, #16]
 800e572:	9908      	ldr	r1, [sp, #32]
 800e574:	2024      	movs	r0, #36	@ 0x24
 800e576:	4798      	blx	r3
 800e578:	6020      	str	r0, [r4, #0]
 800e57a:	b310      	cbz	r0, 800e5c2 <rcutils_string_map_init+0x7a>
 800e57c:	f10d 0e10 	add.w	lr, sp, #16
 800e580:	e9c0 6600 	strd	r6, r6, [r0]
 800e584:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800e588:	f100 0c10 	add.w	ip, r0, #16
 800e58c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e594:	f8de 3000 	ldr.w	r3, [lr]
 800e598:	f8cc 3000 	str.w	r3, [ip]
 800e59c:	4629      	mov	r1, r5
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7ff ff60 	bl	800e464 <rcutils_string_map_reserve>
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d0d8      	beq.n	800e55c <rcutils_string_map_init+0x14>
 800e5aa:	9b05      	ldr	r3, [sp, #20]
 800e5ac:	9908      	ldr	r1, [sp, #32]
 800e5ae:	6820      	ldr	r0, [r4, #0]
 800e5b0:	4798      	blx	r3
 800e5b2:	6026      	str	r6, [r4, #0]
 800e5b4:	e7d2      	b.n	800e55c <rcutils_string_map_init+0x14>
 800e5b6:	250b      	movs	r5, #11
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5be:	b002      	add	sp, #8
 800e5c0:	4770      	bx	lr
 800e5c2:	250a      	movs	r5, #10
 800e5c4:	e7ca      	b.n	800e55c <rcutils_string_map_init+0x14>
 800e5c6:	bf00      	nop

0800e5c8 <rcutils_string_map_fini>:
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d03a      	beq.n	800e648 <rcutils_string_map_fini+0x80>
 800e5d2:	6804      	ldr	r4, [r0, #0]
 800e5d4:	4606      	mov	r6, r0
 800e5d6:	2c00      	cmp	r4, #0
 800e5d8:	d032      	beq.n	800e640 <rcutils_string_map_fini+0x78>
 800e5da:	68a3      	ldr	r3, [r4, #8]
 800e5dc:	b32b      	cbz	r3, 800e62a <rcutils_string_map_fini+0x62>
 800e5de:	2500      	movs	r5, #0
 800e5e0:	6822      	ldr	r2, [r4, #0]
 800e5e2:	462f      	mov	r7, r5
 800e5e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e5e8:	b1e0      	cbz	r0, 800e624 <rcutils_string_map_fini+0x5c>
 800e5ea:	6a21      	ldr	r1, [r4, #32]
 800e5ec:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800e5f0:	9101      	str	r1, [sp, #4]
 800e5f2:	47c0      	blx	r8
 800e5f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e5f8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e5fc:	9901      	ldr	r1, [sp, #4]
 800e5fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e602:	47c0      	blx	r8
 800e604:	68e3      	ldr	r3, [r4, #12]
 800e606:	6862      	ldr	r2, [r4, #4]
 800e608:	3b01      	subs	r3, #1
 800e60a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e60e:	60e3      	str	r3, [r4, #12]
 800e610:	6834      	ldr	r4, [r6, #0]
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	3501      	adds	r5, #1
 800e616:	429d      	cmp	r5, r3
 800e618:	d207      	bcs.n	800e62a <rcutils_string_map_fini+0x62>
 800e61a:	6822      	ldr	r2, [r4, #0]
 800e61c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e620:	2800      	cmp	r0, #0
 800e622:	d1e2      	bne.n	800e5ea <rcutils_string_map_fini+0x22>
 800e624:	3501      	adds	r5, #1
 800e626:	429d      	cmp	r5, r3
 800e628:	d3dc      	bcc.n	800e5e4 <rcutils_string_map_fini+0x1c>
 800e62a:	2100      	movs	r1, #0
 800e62c:	4630      	mov	r0, r6
 800e62e:	f7ff ff19 	bl	800e464 <rcutils_string_map_reserve>
 800e632:	4604      	mov	r4, r0
 800e634:	b920      	cbnz	r0, 800e640 <rcutils_string_map_fini+0x78>
 800e636:	6830      	ldr	r0, [r6, #0]
 800e638:	6943      	ldr	r3, [r0, #20]
 800e63a:	6a01      	ldr	r1, [r0, #32]
 800e63c:	4798      	blx	r3
 800e63e:	6034      	str	r4, [r6, #0]
 800e640:	4620      	mov	r0, r4
 800e642:	b002      	add	sp, #8
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	240b      	movs	r4, #11
 800e64a:	4620      	mov	r0, r4
 800e64c:	b002      	add	sp, #8
 800e64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e652:	bf00      	nop

0800e654 <rcutils_string_map_getn>:
 800e654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	b300      	cbz	r0, 800e69c <rcutils_string_map_getn+0x48>
 800e65a:	6807      	ldr	r7, [r0, #0]
 800e65c:	b1ff      	cbz	r7, 800e69e <rcutils_string_map_getn+0x4a>
 800e65e:	4688      	mov	r8, r1
 800e660:	b1e1      	cbz	r1, 800e69c <rcutils_string_map_getn+0x48>
 800e662:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800e666:	683e      	ldr	r6, [r7, #0]
 800e668:	f1ba 0f00 	cmp.w	sl, #0
 800e66c:	d016      	beq.n	800e69c <rcutils_string_map_getn+0x48>
 800e66e:	4691      	mov	r9, r2
 800e670:	3e04      	subs	r6, #4
 800e672:	2400      	movs	r4, #0
 800e674:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800e678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e67c:	4628      	mov	r0, r5
 800e67e:	3401      	adds	r4, #1
 800e680:	b155      	cbz	r5, 800e698 <rcutils_string_map_getn+0x44>
 800e682:	f7f1 fdb7 	bl	80001f4 <strlen>
 800e686:	4548      	cmp	r0, r9
 800e688:	4602      	mov	r2, r0
 800e68a:	4629      	mov	r1, r5
 800e68c:	bf38      	it	cc
 800e68e:	464a      	movcc	r2, r9
 800e690:	4640      	mov	r0, r8
 800e692:	f007 f91e 	bl	80158d2 <strncmp>
 800e696:	b128      	cbz	r0, 800e6a4 <rcutils_string_map_getn+0x50>
 800e698:	45a2      	cmp	sl, r4
 800e69a:	d1eb      	bne.n	800e674 <rcutils_string_map_getn+0x20>
 800e69c:	2700      	movs	r7, #0
 800e69e:	4638      	mov	r0, r7
 800e6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f853 700b 	ldr.w	r7, [r3, fp]
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6b0 <rmw_get_zero_initialized_context>:
 800e6b0:	b510      	push	{r4, lr}
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	3010      	adds	r0, #16
 800e6b6:	f000 f80b 	bl	800e6d0 <rmw_get_zero_initialized_init_options>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	2000      	movs	r0, #0
 800e6be:	2100      	movs	r1, #0
 800e6c0:	e9c4 0100 	strd	r0, r1, [r4]
 800e6c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800e6c8:	60a3      	str	r3, [r4, #8]
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	bd10      	pop	{r4, pc}
 800e6ce:	bf00      	nop

0800e6d0 <rmw_get_zero_initialized_init_options>:
 800e6d0:	b510      	push	{r4, lr}
 800e6d2:	2238      	movs	r2, #56	@ 0x38
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	f007 f8e6 	bl	80158a8 <memset>
 800e6dc:	f104 0010 	add.w	r0, r4, #16
 800e6e0:	f000 f806 	bl	800e6f0 <rmw_get_default_security_options>
 800e6e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6e8:	60e3      	str	r3, [r4, #12]
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	bd10      	pop	{r4, pc}
 800e6ee:	bf00      	nop

0800e6f0 <rmw_get_default_security_options>:
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	7002      	strb	r2, [r0, #0]
 800e6f4:	6042      	str	r2, [r0, #4]
 800e6f6:	4770      	bx	lr

0800e6f8 <rmw_subscription_content_filter_options_fini>:
 800e6f8:	b1b0      	cbz	r0, 800e728 <rmw_subscription_content_filter_options_fini+0x30>
 800e6fa:	b538      	push	{r3, r4, r5, lr}
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	4608      	mov	r0, r1
 800e700:	460d      	mov	r5, r1
 800e702:	f7fb fc4f 	bl	8009fa4 <rcutils_allocator_is_valid>
 800e706:	b168      	cbz	r0, 800e724 <rmw_subscription_content_filter_options_fini+0x2c>
 800e708:	6820      	ldr	r0, [r4, #0]
 800e70a:	b120      	cbz	r0, 800e716 <rmw_subscription_content_filter_options_fini+0x1e>
 800e70c:	686b      	ldr	r3, [r5, #4]
 800e70e:	6929      	ldr	r1, [r5, #16]
 800e710:	4798      	blx	r3
 800e712:	2300      	movs	r3, #0
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	1d20      	adds	r0, r4, #4
 800e718:	f005 fbaa 	bl	8013e70 <rcutils_string_array_fini>
 800e71c:	3800      	subs	r0, #0
 800e71e:	bf18      	it	ne
 800e720:	2001      	movne	r0, #1
 800e722:	bd38      	pop	{r3, r4, r5, pc}
 800e724:	200b      	movs	r0, #11
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	200b      	movs	r0, #11
 800e72a:	4770      	bx	lr

0800e72c <rmw_get_default_subscription_options>:
 800e72c:	2200      	movs	r2, #0
 800e72e:	e9c0 2200 	strd	r2, r2, [r0]
 800e732:	6082      	str	r2, [r0, #8]
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop

0800e738 <rmw_get_zero_initialized_message_info>:
 800e738:	b510      	push	{r4, lr}
 800e73a:	2240      	movs	r2, #64	@ 0x40
 800e73c:	4604      	mov	r4, r0
 800e73e:	2100      	movs	r1, #0
 800e740:	f007 f8b2 	bl	80158a8 <memset>
 800e744:	4620      	mov	r0, r4
 800e746:	bd10      	pop	{r4, pc}

0800e748 <rmw_validate_full_topic_name>:
 800e748:	2800      	cmp	r0, #0
 800e74a:	d057      	beq.n	800e7fc <rmw_validate_full_topic_name+0xb4>
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	460d      	mov	r5, r1
 800e752:	2900      	cmp	r1, #0
 800e754:	d054      	beq.n	800e800 <rmw_validate_full_topic_name+0xb8>
 800e756:	4616      	mov	r6, r2
 800e758:	4604      	mov	r4, r0
 800e75a:	f7f1 fd4b 	bl	80001f4 <strlen>
 800e75e:	b148      	cbz	r0, 800e774 <rmw_validate_full_topic_name+0x2c>
 800e760:	7823      	ldrb	r3, [r4, #0]
 800e762:	2b2f      	cmp	r3, #47	@ 0x2f
 800e764:	d00d      	beq.n	800e782 <rmw_validate_full_topic_name+0x3a>
 800e766:	2302      	movs	r3, #2
 800e768:	602b      	str	r3, [r5, #0]
 800e76a:	b13e      	cbz	r6, 800e77c <rmw_validate_full_topic_name+0x34>
 800e76c:	2000      	movs	r0, #0
 800e76e:	6030      	str	r0, [r6, #0]
 800e770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e774:	2301      	movs	r3, #1
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	2e00      	cmp	r6, #0
 800e77a:	d1f7      	bne.n	800e76c <rmw_validate_full_topic_name+0x24>
 800e77c:	2000      	movs	r0, #0
 800e77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e782:	1e43      	subs	r3, r0, #1
 800e784:	5ce2      	ldrb	r2, [r4, r3]
 800e786:	2a2f      	cmp	r2, #47	@ 0x2f
 800e788:	d03c      	beq.n	800e804 <rmw_validate_full_topic_name+0xbc>
 800e78a:	1e63      	subs	r3, r4, #1
 800e78c:	eb03 0800 	add.w	r8, r3, r0
 800e790:	f1c4 0e01 	rsb	lr, r4, #1
 800e794:	eb0e 0703 	add.w	r7, lr, r3
 800e798:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e79c:	f021 0220 	bic.w	r2, r1, #32
 800e7a0:	3a41      	subs	r2, #65	@ 0x41
 800e7a2:	2a19      	cmp	r2, #25
 800e7a4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e7a8:	d90b      	bls.n	800e7c2 <rmw_validate_full_topic_name+0x7a>
 800e7aa:	295f      	cmp	r1, #95	@ 0x5f
 800e7ac:	d009      	beq.n	800e7c2 <rmw_validate_full_topic_name+0x7a>
 800e7ae:	f1bc 0f0a 	cmp.w	ip, #10
 800e7b2:	d906      	bls.n	800e7c2 <rmw_validate_full_topic_name+0x7a>
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	602b      	str	r3, [r5, #0]
 800e7b8:	2e00      	cmp	r6, #0
 800e7ba:	d0df      	beq.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e7bc:	6037      	str	r7, [r6, #0]
 800e7be:	2000      	movs	r0, #0
 800e7c0:	e7d6      	b.n	800e770 <rmw_validate_full_topic_name+0x28>
 800e7c2:	4543      	cmp	r3, r8
 800e7c4:	d1e6      	bne.n	800e794 <rmw_validate_full_topic_name+0x4c>
 800e7c6:	4f1a      	ldr	r7, [pc, #104]	@ (800e830 <rmw_validate_full_topic_name+0xe8>)
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e004      	b.n	800e7d6 <rmw_validate_full_topic_name+0x8e>
 800e7cc:	4298      	cmp	r0, r3
 800e7ce:	f104 0401 	add.w	r4, r4, #1
 800e7d2:	d91c      	bls.n	800e80e <rmw_validate_full_topic_name+0xc6>
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	4298      	cmp	r0, r3
 800e7d8:	f103 0201 	add.w	r2, r3, #1
 800e7dc:	d0f6      	beq.n	800e7cc <rmw_validate_full_topic_name+0x84>
 800e7de:	7821      	ldrb	r1, [r4, #0]
 800e7e0:	292f      	cmp	r1, #47	@ 0x2f
 800e7e2:	d1f3      	bne.n	800e7cc <rmw_validate_full_topic_name+0x84>
 800e7e4:	7861      	ldrb	r1, [r4, #1]
 800e7e6:	292f      	cmp	r1, #47	@ 0x2f
 800e7e8:	d01c      	beq.n	800e824 <rmw_validate_full_topic_name+0xdc>
 800e7ea:	5dc9      	ldrb	r1, [r1, r7]
 800e7ec:	0749      	lsls	r1, r1, #29
 800e7ee:	d5ed      	bpl.n	800e7cc <rmw_validate_full_topic_name+0x84>
 800e7f0:	2206      	movs	r2, #6
 800e7f2:	602a      	str	r2, [r5, #0]
 800e7f4:	2e00      	cmp	r6, #0
 800e7f6:	d0c1      	beq.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e7f8:	6033      	str	r3, [r6, #0]
 800e7fa:	e7bf      	b.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e7fc:	200b      	movs	r0, #11
 800e7fe:	4770      	bx	lr
 800e800:	200b      	movs	r0, #11
 800e802:	e7b5      	b.n	800e770 <rmw_validate_full_topic_name+0x28>
 800e804:	2203      	movs	r2, #3
 800e806:	602a      	str	r2, [r5, #0]
 800e808:	2e00      	cmp	r6, #0
 800e80a:	d1f5      	bne.n	800e7f8 <rmw_validate_full_topic_name+0xb0>
 800e80c:	e7b6      	b.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e80e:	28f7      	cmp	r0, #247	@ 0xf7
 800e810:	d802      	bhi.n	800e818 <rmw_validate_full_topic_name+0xd0>
 800e812:	2000      	movs	r0, #0
 800e814:	6028      	str	r0, [r5, #0]
 800e816:	e7ab      	b.n	800e770 <rmw_validate_full_topic_name+0x28>
 800e818:	2307      	movs	r3, #7
 800e81a:	602b      	str	r3, [r5, #0]
 800e81c:	2e00      	cmp	r6, #0
 800e81e:	d0ad      	beq.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e820:	23f6      	movs	r3, #246	@ 0xf6
 800e822:	e7e9      	b.n	800e7f8 <rmw_validate_full_topic_name+0xb0>
 800e824:	2205      	movs	r2, #5
 800e826:	602a      	str	r2, [r5, #0]
 800e828:	2e00      	cmp	r6, #0
 800e82a:	d1e5      	bne.n	800e7f8 <rmw_validate_full_topic_name+0xb0>
 800e82c:	e7a6      	b.n	800e77c <rmw_validate_full_topic_name+0x34>
 800e82e:	bf00      	nop
 800e830:	08017454 	.word	0x08017454

0800e834 <rmw_validate_namespace_with_size>:
 800e834:	b340      	cbz	r0, 800e888 <rmw_validate_namespace_with_size+0x54>
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	4614      	mov	r4, r2
 800e83a:	b0c2      	sub	sp, #264	@ 0x108
 800e83c:	b332      	cbz	r2, 800e88c <rmw_validate_namespace_with_size+0x58>
 800e83e:	2901      	cmp	r1, #1
 800e840:	460d      	mov	r5, r1
 800e842:	461e      	mov	r6, r3
 800e844:	d102      	bne.n	800e84c <rmw_validate_namespace_with_size+0x18>
 800e846:	7803      	ldrb	r3, [r0, #0]
 800e848:	2b2f      	cmp	r3, #47	@ 0x2f
 800e84a:	d012      	beq.n	800e872 <rmw_validate_namespace_with_size+0x3e>
 800e84c:	aa01      	add	r2, sp, #4
 800e84e:	4669      	mov	r1, sp
 800e850:	f7ff ff7a 	bl	800e748 <rmw_validate_full_topic_name>
 800e854:	b978      	cbnz	r0, 800e876 <rmw_validate_namespace_with_size+0x42>
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	b14b      	cbz	r3, 800e86e <rmw_validate_namespace_with_size+0x3a>
 800e85a:	2b07      	cmp	r3, #7
 800e85c:	d007      	beq.n	800e86e <rmw_validate_namespace_with_size+0x3a>
 800e85e:	1e5a      	subs	r2, r3, #1
 800e860:	2a05      	cmp	r2, #5
 800e862:	d82b      	bhi.n	800e8bc <rmw_validate_namespace_with_size+0x88>
 800e864:	e8df f002 	tbb	[pc, r2]
 800e868:	1e212427 	.word	0x1e212427
 800e86c:	141b      	.short	0x141b
 800e86e:	2df5      	cmp	r5, #245	@ 0xf5
 800e870:	d803      	bhi.n	800e87a <rmw_validate_namespace_with_size+0x46>
 800e872:	2000      	movs	r0, #0
 800e874:	6020      	str	r0, [r4, #0]
 800e876:	b042      	add	sp, #264	@ 0x108
 800e878:	bd70      	pop	{r4, r5, r6, pc}
 800e87a:	2307      	movs	r3, #7
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	2e00      	cmp	r6, #0
 800e880:	d0f9      	beq.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e882:	23f4      	movs	r3, #244	@ 0xf4
 800e884:	6033      	str	r3, [r6, #0]
 800e886:	e7f6      	b.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e888:	200b      	movs	r0, #11
 800e88a:	4770      	bx	lr
 800e88c:	200b      	movs	r0, #11
 800e88e:	e7f2      	b.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e890:	2306      	movs	r3, #6
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	2e00      	cmp	r6, #0
 800e896:	d0ee      	beq.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	6033      	str	r3, [r6, #0]
 800e89c:	e7eb      	b.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e89e:	2305      	movs	r3, #5
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	e7f7      	b.n	800e894 <rmw_validate_namespace_with_size+0x60>
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	6023      	str	r3, [r4, #0]
 800e8a8:	e7f4      	b.n	800e894 <rmw_validate_namespace_with_size+0x60>
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	e7f1      	b.n	800e894 <rmw_validate_namespace_with_size+0x60>
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	e7ee      	b.n	800e894 <rmw_validate_namespace_with_size+0x60>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	e7eb      	b.n	800e894 <rmw_validate_namespace_with_size+0x60>
 800e8bc:	4a03      	ldr	r2, [pc, #12]	@ (800e8cc <rmw_validate_namespace_with_size+0x98>)
 800e8be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e8c2:	a802      	add	r0, sp, #8
 800e8c4:	f7ff fd5e 	bl	800e384 <rcutils_snprintf>
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	e7d4      	b.n	800e876 <rmw_validate_namespace_with_size+0x42>
 800e8cc:	08016e3c 	.word	0x08016e3c

0800e8d0 <rmw_validate_namespace>:
 800e8d0:	b168      	cbz	r0, 800e8ee <rmw_validate_namespace+0x1e>
 800e8d2:	b570      	push	{r4, r5, r6, lr}
 800e8d4:	460d      	mov	r5, r1
 800e8d6:	4616      	mov	r6, r2
 800e8d8:	4604      	mov	r4, r0
 800e8da:	f7f1 fc8b 	bl	80001f4 <strlen>
 800e8de:	4633      	mov	r3, r6
 800e8e0:	4601      	mov	r1, r0
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8ea:	f7ff bfa3 	b.w	800e834 <rmw_validate_namespace_with_size>
 800e8ee:	200b      	movs	r0, #11
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop

0800e8f4 <rmw_namespace_validation_result_string>:
 800e8f4:	2807      	cmp	r0, #7
 800e8f6:	bf9a      	itte	ls
 800e8f8:	4b02      	ldrls	r3, [pc, #8]	@ (800e904 <rmw_namespace_validation_result_string+0x10>)
 800e8fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e8fe:	4802      	ldrhi	r0, [pc, #8]	@ (800e908 <rmw_namespace_validation_result_string+0x14>)
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	08017034 	.word	0x08017034
 800e908:	08016e8c 	.word	0x08016e8c

0800e90c <rmw_validate_node_name>:
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d03b      	beq.n	800e988 <rmw_validate_node_name+0x7c>
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	460d      	mov	r5, r1
 800e916:	2900      	cmp	r1, #0
 800e918:	d038      	beq.n	800e98c <rmw_validate_node_name+0x80>
 800e91a:	4616      	mov	r6, r2
 800e91c:	4604      	mov	r4, r0
 800e91e:	f7f1 fc69 	bl	80001f4 <strlen>
 800e922:	b1e0      	cbz	r0, 800e95e <rmw_validate_node_name+0x52>
 800e924:	1e63      	subs	r3, r4, #1
 800e926:	eb03 0800 	add.w	r8, r3, r0
 800e92a:	f1c4 0101 	rsb	r1, r4, #1
 800e92e:	18cf      	adds	r7, r1, r3
 800e930:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e934:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e938:	f02e 0c20 	bic.w	ip, lr, #32
 800e93c:	2a09      	cmp	r2, #9
 800e93e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e942:	d914      	bls.n	800e96e <rmw_validate_node_name+0x62>
 800e944:	f1bc 0f19 	cmp.w	ip, #25
 800e948:	d911      	bls.n	800e96e <rmw_validate_node_name+0x62>
 800e94a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e94e:	d00e      	beq.n	800e96e <rmw_validate_node_name+0x62>
 800e950:	2302      	movs	r3, #2
 800e952:	602b      	str	r3, [r5, #0]
 800e954:	b106      	cbz	r6, 800e958 <rmw_validate_node_name+0x4c>
 800e956:	6037      	str	r7, [r6, #0]
 800e958:	2000      	movs	r0, #0
 800e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95e:	2301      	movs	r3, #1
 800e960:	602b      	str	r3, [r5, #0]
 800e962:	2e00      	cmp	r6, #0
 800e964:	d0f8      	beq.n	800e958 <rmw_validate_node_name+0x4c>
 800e966:	2000      	movs	r0, #0
 800e968:	6030      	str	r0, [r6, #0]
 800e96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96e:	4543      	cmp	r3, r8
 800e970:	d1dd      	bne.n	800e92e <rmw_validate_node_name+0x22>
 800e972:	7822      	ldrb	r2, [r4, #0]
 800e974:	4b0d      	ldr	r3, [pc, #52]	@ (800e9ac <rmw_validate_node_name+0xa0>)
 800e976:	5cd3      	ldrb	r3, [r2, r3]
 800e978:	f013 0304 	ands.w	r3, r3, #4
 800e97c:	d110      	bne.n	800e9a0 <rmw_validate_node_name+0x94>
 800e97e:	28ff      	cmp	r0, #255	@ 0xff
 800e980:	d806      	bhi.n	800e990 <rmw_validate_node_name+0x84>
 800e982:	602b      	str	r3, [r5, #0]
 800e984:	4618      	mov	r0, r3
 800e986:	e7e8      	b.n	800e95a <rmw_validate_node_name+0x4e>
 800e988:	200b      	movs	r0, #11
 800e98a:	4770      	bx	lr
 800e98c:	200b      	movs	r0, #11
 800e98e:	e7e4      	b.n	800e95a <rmw_validate_node_name+0x4e>
 800e990:	2204      	movs	r2, #4
 800e992:	602a      	str	r2, [r5, #0]
 800e994:	2e00      	cmp	r6, #0
 800e996:	d0df      	beq.n	800e958 <rmw_validate_node_name+0x4c>
 800e998:	22fe      	movs	r2, #254	@ 0xfe
 800e99a:	6032      	str	r2, [r6, #0]
 800e99c:	4618      	mov	r0, r3
 800e99e:	e7dc      	b.n	800e95a <rmw_validate_node_name+0x4e>
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	602b      	str	r3, [r5, #0]
 800e9a4:	2e00      	cmp	r6, #0
 800e9a6:	d1de      	bne.n	800e966 <rmw_validate_node_name+0x5a>
 800e9a8:	e7d6      	b.n	800e958 <rmw_validate_node_name+0x4c>
 800e9aa:	bf00      	nop
 800e9ac:	08017454 	.word	0x08017454

0800e9b0 <rmw_node_name_validation_result_string>:
 800e9b0:	2804      	cmp	r0, #4
 800e9b2:	bf9a      	itte	ls
 800e9b4:	4b02      	ldrls	r3, [pc, #8]	@ (800e9c0 <rmw_node_name_validation_result_string+0x10>)
 800e9b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e9ba:	4802      	ldrhi	r0, [pc, #8]	@ (800e9c4 <rmw_node_name_validation_result_string+0x14>)
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	08017140 	.word	0x08017140
 800e9c4:	08017054 	.word	0x08017054

0800e9c8 <rmw_destroy_client>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	b128      	cbz	r0, 800e9d8 <rmw_destroy_client+0x10>
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	6800      	ldr	r0, [r0, #0]
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	f001 fc73 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800e9d6:	b910      	cbnz	r0, 800e9de <rmw_destroy_client+0x16>
 800e9d8:	2401      	movs	r4, #1
 800e9da:	4620      	mov	r0, r4
 800e9dc:	bd70      	pop	{r4, r5, r6, pc}
 800e9de:	6863      	ldr	r3, [r4, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d0f9      	beq.n	800e9d8 <rmw_destroy_client+0x10>
 800e9e4:	2d00      	cmp	r5, #0
 800e9e6:	d0f7      	beq.n	800e9d8 <rmw_destroy_client+0x10>
 800e9e8:	6828      	ldr	r0, [r5, #0]
 800e9ea:	f001 fc67 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d0f2      	beq.n	800e9d8 <rmw_destroy_client+0x10>
 800e9f2:	686e      	ldr	r6, [r5, #4]
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	d0ef      	beq.n	800e9d8 <rmw_destroy_client+0x10>
 800e9f8:	6864      	ldr	r4, [r4, #4]
 800e9fa:	6932      	ldr	r2, [r6, #16]
 800e9fc:	6920      	ldr	r0, [r4, #16]
 800e9fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea06:	6819      	ldr	r1, [r3, #0]
 800ea08:	f001 ff34 	bl	8010874 <uxr_buffer_cancel_data>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	6920      	ldr	r0, [r4, #16]
 800ea10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ea14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea18:	f001 fbd0 	bl	80101bc <run_xrce_session>
 800ea1c:	6920      	ldr	r0, [r4, #16]
 800ea1e:	6932      	ldr	r2, [r6, #16]
 800ea20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea28:	6819      	ldr	r1, [r3, #0]
 800ea2a:	f001 fc9b 	bl	8010364 <uxr_buffer_delete_entity>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	6920      	ldr	r0, [r4, #16]
 800ea32:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ea36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea3a:	f001 fbbf 	bl	80101bc <run_xrce_session>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	4628      	mov	r0, r5
 800ea42:	bf14      	ite	ne
 800ea44:	2400      	movne	r4, #0
 800ea46:	2402      	moveq	r4, #2
 800ea48:	f001 faa2 	bl	800ff90 <rmw_uxrce_fini_client_memory>
 800ea4c:	e7c5      	b.n	800e9da <rmw_destroy_client+0x12>
 800ea4e:	bf00      	nop

0800ea50 <rmw_get_implementation_identifier>:
 800ea50:	4b01      	ldr	r3, [pc, #4]	@ (800ea58 <rmw_get_implementation_identifier+0x8>)
 800ea52:	6818      	ldr	r0, [r3, #0]
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	080173e0 	.word	0x080173e0

0800ea5c <rmw_init_options_init>:
 800ea5c:	b084      	sub	sp, #16
 800ea5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea60:	b083      	sub	sp, #12
 800ea62:	ad09      	add	r5, sp, #36	@ 0x24
 800ea64:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ea68:	b130      	cbz	r0, 800ea78 <rmw_init_options_init+0x1c>
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f7fb fa99 	bl	8009fa4 <rcutils_allocator_is_valid>
 800ea72:	b108      	cbz	r0, 800ea78 <rmw_init_options_init+0x1c>
 800ea74:	68a6      	ldr	r6, [r4, #8]
 800ea76:	b12e      	cbz	r6, 800ea84 <rmw_init_options_init+0x28>
 800ea78:	200b      	movs	r0, #11
 800ea7a:	b003      	add	sp, #12
 800ea7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea80:	b004      	add	sp, #16
 800ea82:	4770      	bx	lr
 800ea84:	2200      	movs	r2, #0
 800ea86:	2300      	movs	r3, #0
 800ea88:	e9c4 2300 	strd	r2, r3, [r4]
 800ea8c:	4b20      	ldr	r3, [pc, #128]	@ (800eb10 <rmw_init_options_init+0xb4>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	60a3      	str	r3, [r4, #8]
 800ea92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea94:	f104 0c20 	add.w	ip, r4, #32
 800ea98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea9c:	466f      	mov	r7, sp
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	f8cc 3000 	str.w	r3, [ip]
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	61e6      	str	r6, [r4, #28]
 800eaa8:	60e6      	str	r6, [r4, #12]
 800eaaa:	f7ff fe21 	bl	800e6f0 <rmw_get_default_security_options>
 800eaae:	e897 0003 	ldmia.w	r7, {r0, r1}
 800eab2:	f104 0310 	add.w	r3, r4, #16
 800eab6:	e883 0003 	stmia.w	r3, {r0, r1}
 800eaba:	2203      	movs	r2, #3
 800eabc:	4815      	ldr	r0, [pc, #84]	@ (800eb14 <rmw_init_options_init+0xb8>)
 800eabe:	4916      	ldr	r1, [pc, #88]	@ (800eb18 <rmw_init_options_init+0xbc>)
 800eac0:	7626      	strb	r6, [r4, #24]
 800eac2:	f001 f9a5 	bl	800fe10 <rmw_uxrce_init_init_options_impl_memory>
 800eac6:	4813      	ldr	r0, [pc, #76]	@ (800eb14 <rmw_init_options_init+0xb8>)
 800eac8:	f005 fb66 	bl	8014198 <get_memory>
 800eacc:	b1f0      	cbz	r0, 800eb0c <rmw_init_options_init+0xb0>
 800eace:	4a13      	ldr	r2, [pc, #76]	@ (800eb1c <rmw_init_options_init+0xc0>)
 800ead0:	6883      	ldr	r3, [r0, #8]
 800ead2:	6851      	ldr	r1, [r2, #4]
 800ead4:	7810      	ldrb	r0, [r2, #0]
 800ead6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ead8:	7418      	strb	r0, [r3, #16]
 800eada:	6159      	str	r1, [r3, #20]
 800eadc:	68d1      	ldr	r1, [r2, #12]
 800eade:	61d9      	str	r1, [r3, #28]
 800eae0:	6911      	ldr	r1, [r2, #16]
 800eae2:	6219      	str	r1, [r3, #32]
 800eae4:	6951      	ldr	r1, [r2, #20]
 800eae6:	6892      	ldr	r2, [r2, #8]
 800eae8:	619a      	str	r2, [r3, #24]
 800eaea:	6259      	str	r1, [r3, #36]	@ 0x24
 800eaec:	f003 fe76 	bl	80127dc <uxr_nanos>
 800eaf0:	f006 fc24 	bl	801533c <srand>
 800eaf4:	f006 fc50 	bl	8015398 <rand>
 800eaf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eafa:	6298      	str	r0, [r3, #40]	@ 0x28
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d0f9      	beq.n	800eaf4 <rmw_init_options_init+0x98>
 800eb00:	2000      	movs	r0, #0
 800eb02:	b003      	add	sp, #12
 800eb04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eb08:	b004      	add	sp, #16
 800eb0a:	4770      	bx	lr
 800eb0c:	2001      	movs	r0, #1
 800eb0e:	e7b4      	b.n	800ea7a <rmw_init_options_init+0x1e>
 800eb10:	080173e0 	.word	0x080173e0
 800eb14:	2000deb4 	.word	0x2000deb4
 800eb18:	20009750 	.word	0x20009750
 800eb1c:	2000950c 	.word	0x2000950c

0800eb20 <rmw_init_options_copy>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	b160      	cbz	r0, 800eb40 <rmw_init_options_copy+0x20>
 800eb26:	460d      	mov	r5, r1
 800eb28:	b151      	cbz	r1, 800eb40 <rmw_init_options_copy+0x20>
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	6880      	ldr	r0, [r0, #8]
 800eb2e:	b128      	cbz	r0, 800eb3c <rmw_init_options_copy+0x1c>
 800eb30:	4b33      	ldr	r3, [pc, #204]	@ (800ec00 <rmw_init_options_copy+0xe0>)
 800eb32:	6819      	ldr	r1, [r3, #0]
 800eb34:	f7f1 fb54 	bl	80001e0 <strcmp>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d154      	bne.n	800ebe6 <rmw_init_options_copy+0xc6>
 800eb3c:	68ab      	ldr	r3, [r5, #8]
 800eb3e:	b11b      	cbz	r3, 800eb48 <rmw_init_options_copy+0x28>
 800eb40:	240b      	movs	r4, #11
 800eb42:	4620      	mov	r0, r4
 800eb44:	b008      	add	sp, #32
 800eb46:	bd70      	pop	{r4, r5, r6, pc}
 800eb48:	4623      	mov	r3, r4
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800eb50:	f8d3 c000 	ldr.w	ip, [r3]
 800eb54:	6858      	ldr	r0, [r3, #4]
 800eb56:	6899      	ldr	r1, [r3, #8]
 800eb58:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800eb5c:	f8c2 e00c 	str.w	lr, [r2, #12]
 800eb60:	3310      	adds	r3, #16
 800eb62:	42b3      	cmp	r3, r6
 800eb64:	f8c2 c000 	str.w	ip, [r2]
 800eb68:	6050      	str	r0, [r2, #4]
 800eb6a:	6091      	str	r1, [r2, #8]
 800eb6c:	f102 0210 	add.w	r2, r2, #16
 800eb70:	d1ee      	bne.n	800eb50 <rmw_init_options_copy+0x30>
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	6053      	str	r3, [r2, #4]
 800eb78:	6011      	str	r1, [r2, #0]
 800eb7a:	f104 0e20 	add.w	lr, r4, #32
 800eb7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb82:	f10d 0c0c 	add.w	ip, sp, #12
 800eb86:	4666      	mov	r6, ip
 800eb88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb8c:	f8de 3000 	ldr.w	r3, [lr]
 800eb90:	f8cc 3000 	str.w	r3, [ip]
 800eb94:	4630      	mov	r0, r6
 800eb96:	f7fb fa05 	bl	8009fa4 <rcutils_allocator_is_valid>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d0d0      	beq.n	800eb40 <rmw_init_options_copy+0x20>
 800eb9e:	ab08      	add	r3, sp, #32
 800eba0:	e913 0003 	ldmdb	r3, {r0, r1}
 800eba4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eba8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ebac:	69e0      	ldr	r0, [r4, #28]
 800ebae:	f7ff fc15 	bl	800e3dc <rcutils_strdup>
 800ebb2:	61e8      	str	r0, [r5, #28]
 800ebb4:	69e3      	ldr	r3, [r4, #28]
 800ebb6:	b103      	cbz	r3, 800ebba <rmw_init_options_copy+0x9a>
 800ebb8:	b1f8      	cbz	r0, 800ebfa <rmw_init_options_copy+0xda>
 800ebba:	4812      	ldr	r0, [pc, #72]	@ (800ec04 <rmw_init_options_copy+0xe4>)
 800ebbc:	f005 faec 	bl	8014198 <get_memory>
 800ebc0:	b1a8      	cbz	r0, 800ebee <rmw_init_options_copy+0xce>
 800ebc2:	6883      	ldr	r3, [r0, #8]
 800ebc4:	636b      	str	r3, [r5, #52]	@ 0x34
 800ebc6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ebc8:	f102 0c10 	add.w	ip, r2, #16
 800ebcc:	f103 0510 	add.w	r5, r3, #16
 800ebd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebd6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800ebda:	2400      	movs	r4, #0
 800ebdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	b008      	add	sp, #32
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	240c      	movs	r4, #12
 800ebe8:	4620      	mov	r0, r4
 800ebea:	b008      	add	sp, #32
 800ebec:	bd70      	pop	{r4, r5, r6, pc}
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	9907      	ldr	r1, [sp, #28]
 800ebf2:	69e8      	ldr	r0, [r5, #28]
 800ebf4:	4798      	blx	r3
 800ebf6:	2401      	movs	r4, #1
 800ebf8:	e7a3      	b.n	800eb42 <rmw_init_options_copy+0x22>
 800ebfa:	240a      	movs	r4, #10
 800ebfc:	e7a1      	b.n	800eb42 <rmw_init_options_copy+0x22>
 800ebfe:	bf00      	nop
 800ec00:	080173e0 	.word	0x080173e0
 800ec04:	2000deb4 	.word	0x2000deb4

0800ec08 <rmw_init_options_fini>:
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d041      	beq.n	800ec90 <rmw_init_options_fini+0x88>
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b08e      	sub	sp, #56	@ 0x38
 800ec12:	3020      	adds	r0, #32
 800ec14:	f7fb f9c6 	bl	8009fa4 <rcutils_allocator_is_valid>
 800ec18:	b380      	cbz	r0, 800ec7c <rmw_init_options_fini+0x74>
 800ec1a:	68a0      	ldr	r0, [r4, #8]
 800ec1c:	b120      	cbz	r0, 800ec28 <rmw_init_options_fini+0x20>
 800ec1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ec98 <rmw_init_options_fini+0x90>)
 800ec20:	6819      	ldr	r1, [r3, #0]
 800ec22:	f7f1 fadd 	bl	80001e0 <strcmp>
 800ec26:	bb88      	cbnz	r0, 800ec8c <rmw_init_options_fini+0x84>
 800ec28:	4b1c      	ldr	r3, [pc, #112]	@ (800ec9c <rmw_init_options_fini+0x94>)
 800ec2a:	6819      	ldr	r1, [r3, #0]
 800ec2c:	b351      	cbz	r1, 800ec84 <rmw_init_options_fini+0x7c>
 800ec2e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ec30:	e001      	b.n	800ec36 <rmw_init_options_fini+0x2e>
 800ec32:	6849      	ldr	r1, [r1, #4]
 800ec34:	b331      	cbz	r1, 800ec84 <rmw_init_options_fini+0x7c>
 800ec36:	688b      	ldr	r3, [r1, #8]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d1fa      	bne.n	800ec32 <rmw_init_options_fini+0x2a>
 800ec3c:	4817      	ldr	r0, [pc, #92]	@ (800ec9c <rmw_init_options_fini+0x94>)
 800ec3e:	f005 fabb 	bl	80141b8 <put_memory>
 800ec42:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ec46:	69e0      	ldr	r0, [r4, #28]
 800ec48:	4798      	blx	r3
 800ec4a:	4668      	mov	r0, sp
 800ec4c:	f7ff fd40 	bl	800e6d0 <rmw_get_zero_initialized_init_options>
 800ec50:	46ee      	mov	lr, sp
 800ec52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec56:	46a4      	mov	ip, r4
 800ec58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ec70:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ec74:	2300      	movs	r3, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	b00e      	add	sp, #56	@ 0x38
 800ec7a:	bd10      	pop	{r4, pc}
 800ec7c:	230b      	movs	r3, #11
 800ec7e:	4618      	mov	r0, r3
 800ec80:	b00e      	add	sp, #56	@ 0x38
 800ec82:	bd10      	pop	{r4, pc}
 800ec84:	2301      	movs	r3, #1
 800ec86:	4618      	mov	r0, r3
 800ec88:	b00e      	add	sp, #56	@ 0x38
 800ec8a:	bd10      	pop	{r4, pc}
 800ec8c:	230c      	movs	r3, #12
 800ec8e:	e7f2      	b.n	800ec76 <rmw_init_options_fini+0x6e>
 800ec90:	230b      	movs	r3, #11
 800ec92:	4618      	mov	r0, r3
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	080173e0 	.word	0x080173e0
 800ec9c:	2000deb4 	.word	0x2000deb4

0800eca0 <rmw_init>:
 800eca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eca4:	b083      	sub	sp, #12
 800eca6:	2800      	cmp	r0, #0
 800eca8:	f000 80d3 	beq.w	800ee52 <rmw_init+0x1b2>
 800ecac:	460e      	mov	r6, r1
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	f000 80cf 	beq.w	800ee52 <rmw_init+0x1b2>
 800ecb4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 80ca 	beq.w	800ee52 <rmw_init+0x1b2>
 800ecbe:	4b78      	ldr	r3, [pc, #480]	@ (800eea0 <rmw_init+0x200>)
 800ecc0:	6880      	ldr	r0, [r0, #8]
 800ecc2:	681f      	ldr	r7, [r3, #0]
 800ecc4:	b128      	cbz	r0, 800ecd2 <rmw_init+0x32>
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f7f1 fa8a 	bl	80001e0 <strcmp>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f040 80ca 	bne.w	800ee66 <rmw_init+0x1c6>
 800ecd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecd6:	4c73      	ldr	r4, [pc, #460]	@ (800eea4 <rmw_init+0x204>)
 800ecd8:	4973      	ldr	r1, [pc, #460]	@ (800eea8 <rmw_init+0x208>)
 800ecda:	4874      	ldr	r0, [pc, #464]	@ (800eeac <rmw_init+0x20c>)
 800ecdc:	60b7      	str	r7, [r6, #8]
 800ecde:	e9c6 2300 	strd	r2, r3, [r6]
 800ece2:	68eb      	ldr	r3, [r5, #12]
 800ece4:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ece6:	2201      	movs	r2, #1
 800ece8:	f001 f832 	bl	800fd50 <rmw_uxrce_init_session_memory>
 800ecec:	4620      	mov	r0, r4
 800ecee:	4970      	ldr	r1, [pc, #448]	@ (800eeb0 <rmw_init+0x210>)
 800ecf0:	2204      	movs	r2, #4
 800ecf2:	f001 f86d 	bl	800fdd0 <rmw_uxrce_init_static_input_buffer_memory>
 800ecf6:	f04f 0800 	mov.w	r8, #0
 800ecfa:	486c      	ldr	r0, [pc, #432]	@ (800eeac <rmw_init+0x20c>)
 800ecfc:	f884 800d 	strb.w	r8, [r4, #13]
 800ed00:	f005 fa4a 	bl	8014198 <get_memory>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f000 80a9 	beq.w	800ee5c <rmw_init+0x1bc>
 800ed0a:	6884      	ldr	r4, [r0, #8]
 800ed0c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ed0e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ed10:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ed14:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ed18:	9101      	str	r1, [sp, #4]
 800ed1a:	6a00      	ldr	r0, [r0, #32]
 800ed1c:	9000      	str	r0, [sp, #0]
 800ed1e:	f104 0910 	add.w	r9, r4, #16
 800ed22:	4661      	mov	r1, ip
 800ed24:	4648      	mov	r0, r9
 800ed26:	f001 fcf5 	bl	8010714 <uxr_set_custom_transport_callbacks>
 800ed2a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ed2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed32:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ed36:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ed3a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ed3e:	495d      	ldr	r1, [pc, #372]	@ (800eeb4 <rmw_init+0x214>)
 800ed40:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ed44:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ed48:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ed4c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ed50:	4859      	ldr	r0, [pc, #356]	@ (800eeb8 <rmw_init+0x218>)
 800ed52:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ed56:	2201      	movs	r2, #1
 800ed58:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ed5a:	f000 ffd9 	bl	800fd10 <rmw_uxrce_init_node_memory>
 800ed5e:	4957      	ldr	r1, [pc, #348]	@ (800eebc <rmw_init+0x21c>)
 800ed60:	4857      	ldr	r0, [pc, #348]	@ (800eec0 <rmw_init+0x220>)
 800ed62:	2205      	movs	r2, #5
 800ed64:	f000 ffb4 	bl	800fcd0 <rmw_uxrce_init_subscription_memory>
 800ed68:	4956      	ldr	r1, [pc, #344]	@ (800eec4 <rmw_init+0x224>)
 800ed6a:	4857      	ldr	r0, [pc, #348]	@ (800eec8 <rmw_init+0x228>)
 800ed6c:	220a      	movs	r2, #10
 800ed6e:	f000 ff8f 	bl	800fc90 <rmw_uxrce_init_publisher_memory>
 800ed72:	4956      	ldr	r1, [pc, #344]	@ (800eecc <rmw_init+0x22c>)
 800ed74:	4856      	ldr	r0, [pc, #344]	@ (800eed0 <rmw_init+0x230>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	f000 ff4a 	bl	800fc10 <rmw_uxrce_init_service_memory>
 800ed7c:	4955      	ldr	r1, [pc, #340]	@ (800eed4 <rmw_init+0x234>)
 800ed7e:	4856      	ldr	r0, [pc, #344]	@ (800eed8 <rmw_init+0x238>)
 800ed80:	2201      	movs	r2, #1
 800ed82:	f000 ff65 	bl	800fc50 <rmw_uxrce_init_client_memory>
 800ed86:	4955      	ldr	r1, [pc, #340]	@ (800eedc <rmw_init+0x23c>)
 800ed88:	4855      	ldr	r0, [pc, #340]	@ (800eee0 <rmw_init+0x240>)
 800ed8a:	220f      	movs	r2, #15
 800ed8c:	f001 f800 	bl	800fd90 <rmw_uxrce_init_topic_memory>
 800ed90:	4954      	ldr	r1, [pc, #336]	@ (800eee4 <rmw_init+0x244>)
 800ed92:	4855      	ldr	r0, [pc, #340]	@ (800eee8 <rmw_init+0x248>)
 800ed94:	2203      	movs	r2, #3
 800ed96:	f001 f83b 	bl	800fe10 <rmw_uxrce_init_init_options_impl_memory>
 800ed9a:	4954      	ldr	r1, [pc, #336]	@ (800eeec <rmw_init+0x24c>)
 800ed9c:	4854      	ldr	r0, [pc, #336]	@ (800eef0 <rmw_init+0x250>)
 800ed9e:	2204      	movs	r2, #4
 800eda0:	f001 f856 	bl	800fe50 <rmw_uxrce_init_wait_set_memory>
 800eda4:	4953      	ldr	r1, [pc, #332]	@ (800eef4 <rmw_init+0x254>)
 800eda6:	4854      	ldr	r0, [pc, #336]	@ (800eef8 <rmw_init+0x258>)
 800eda8:	2204      	movs	r2, #4
 800edaa:	f001 f871 	bl	800fe90 <rmw_uxrce_init_guard_condition_memory>
 800edae:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800edb0:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800edb2:	4642      	mov	r2, r8
 800edb4:	f000 fd7e 	bl	800f8b4 <rmw_uxrce_transport_init>
 800edb8:	4607      	mov	r7, r0
 800edba:	2800      	cmp	r0, #0
 800edbc:	d158      	bne.n	800ee70 <rmw_init+0x1d0>
 800edbe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800edc0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800edc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800edc6:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800edca:	4628      	mov	r0, r5
 800edcc:	f001 fed8 	bl	8010b80 <uxr_init_session>
 800edd0:	494a      	ldr	r1, [pc, #296]	@ (800eefc <rmw_init+0x25c>)
 800edd2:	4622      	mov	r2, r4
 800edd4:	4628      	mov	r0, r5
 800edd6:	f001 fef7 	bl	8010bc8 <uxr_set_topic_callback>
 800edda:	4949      	ldr	r1, [pc, #292]	@ (800ef00 <rmw_init+0x260>)
 800eddc:	463a      	mov	r2, r7
 800edde:	4628      	mov	r0, r5
 800ede0:	f001 feee 	bl	8010bc0 <uxr_set_status_callback>
 800ede4:	4947      	ldr	r1, [pc, #284]	@ (800ef04 <rmw_init+0x264>)
 800ede6:	463a      	mov	r2, r7
 800ede8:	4628      	mov	r0, r5
 800edea:	f001 fef1 	bl	8010bd0 <uxr_set_request_callback>
 800edee:	4946      	ldr	r1, [pc, #280]	@ (800ef08 <rmw_init+0x268>)
 800edf0:	463a      	mov	r2, r7
 800edf2:	4628      	mov	r0, r5
 800edf4:	f001 fef0 	bl	8010bd8 <uxr_set_reply_callback>
 800edf8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800edfc:	2304      	movs	r3, #4
 800edfe:	0092      	lsls	r2, r2, #2
 800ee00:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ee04:	4628      	mov	r0, r5
 800ee06:	f001 ff25 	bl	8010c54 <uxr_create_input_reliable_stream>
 800ee0a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ee0e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ee12:	0092      	lsls	r2, r2, #2
 800ee14:	2304      	movs	r3, #4
 800ee16:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f001 fef2 	bl	8010c04 <uxr_create_output_reliable_stream>
 800ee20:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ee24:	4628      	mov	r0, r5
 800ee26:	f001 ff0f 	bl	8010c48 <uxr_create_input_best_effort_stream>
 800ee2a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ee2e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ee32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ee36:	3114      	adds	r1, #20
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f001 fed1 	bl	8010be0 <uxr_create_output_best_effort_stream>
 800ee3e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ee42:	4628      	mov	r0, r5
 800ee44:	f002 fc5c 	bl	8011700 <uxr_create_session>
 800ee48:	b1f8      	cbz	r0, 800ee8a <rmw_init+0x1ea>
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	b003      	add	sp, #12
 800ee4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee52:	270b      	movs	r7, #11
 800ee54:	4638      	mov	r0, r7
 800ee56:	b003      	add	sp, #12
 800ee58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee5c:	2701      	movs	r7, #1
 800ee5e:	4638      	mov	r0, r7
 800ee60:	b003      	add	sp, #12
 800ee62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee66:	270c      	movs	r7, #12
 800ee68:	4638      	mov	r0, r7
 800ee6a:	b003      	add	sp, #12
 800ee6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee70:	4648      	mov	r0, r9
 800ee72:	f001 fc91 	bl	8010798 <uxr_close_custom_transport>
 800ee76:	480d      	ldr	r0, [pc, #52]	@ (800eeac <rmw_init+0x20c>)
 800ee78:	4621      	mov	r1, r4
 800ee7a:	f005 f99d 	bl	80141b8 <put_memory>
 800ee7e:	4638      	mov	r0, r7
 800ee80:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ee84:	b003      	add	sp, #12
 800ee86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee8a:	4648      	mov	r0, r9
 800ee8c:	f001 fc84 	bl	8010798 <uxr_close_custom_transport>
 800ee90:	4806      	ldr	r0, [pc, #24]	@ (800eeac <rmw_init+0x20c>)
 800ee92:	4621      	mov	r1, r4
 800ee94:	f005 f990 	bl	80141b8 <put_memory>
 800ee98:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ee9a:	2701      	movs	r7, #1
 800ee9c:	e7d5      	b.n	800ee4a <rmw_init+0x1aa>
 800ee9e:	bf00      	nop
 800eea0:	080173e0 	.word	0x080173e0
 800eea4:	2000df04 	.word	0x2000df04
 800eea8:	2000a1b0 	.word	0x2000a1b0
 800eeac:	2000def4 	.word	0x2000def4
 800eeb0:	2000b758 	.word	0x2000b758
 800eeb4:	200097d4 	.word	0x200097d4
 800eeb8:	2000dec4 	.word	0x2000dec4
 800eebc:	2000d858 	.word	0x2000d858
 800eec0:	2000df14 	.word	0x2000df14
 800eec4:	20009878 	.word	0x20009878
 800eec8:	2000ded4 	.word	0x2000ded4
 800eecc:	2000a0e8 	.word	0x2000a0e8
 800eed0:	2000dee4 	.word	0x2000dee4
 800eed4:	20009608 	.word	0x20009608
 800eed8:	200095f8 	.word	0x200095f8
 800eedc:	2000dc90 	.word	0x2000dc90
 800eee0:	2000df24 	.word	0x2000df24
 800eee4:	20009750 	.word	0x20009750
 800eee8:	2000deb4 	.word	0x2000deb4
 800eeec:	2000de34 	.word	0x2000de34
 800eef0:	2000df34 	.word	0x2000df34
 800eef4:	200096d0 	.word	0x200096d0
 800eef8:	2000dea4 	.word	0x2000dea4
 800eefc:	08013fd1 	.word	0x08013fd1
 800ef00:	08013fc9 	.word	0x08013fc9
 800ef04:	08014069 	.word	0x08014069
 800ef08:	08014105 	.word	0x08014105

0800ef0c <rmw_context_fini>:
 800ef0c:	4b17      	ldr	r3, [pc, #92]	@ (800ef6c <rmw_context_fini+0x60>)
 800ef0e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	681c      	ldr	r4, [r3, #0]
 800ef14:	4605      	mov	r5, r0
 800ef16:	b334      	cbz	r4, 800ef66 <rmw_context_fini+0x5a>
 800ef18:	2600      	movs	r6, #0
 800ef1a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ef1e:	6902      	ldr	r2, [r0, #16]
 800ef20:	428a      	cmp	r2, r1
 800ef22:	d018      	beq.n	800ef56 <rmw_context_fini+0x4a>
 800ef24:	2c00      	cmp	r4, #0
 800ef26:	d1f8      	bne.n	800ef1a <rmw_context_fini+0xe>
 800ef28:	b189      	cbz	r1, 800ef4e <rmw_context_fini+0x42>
 800ef2a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ef2e:	789b      	ldrb	r3, [r3, #2]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ef36:	bf14      	ite	ne
 800ef38:	210a      	movne	r1, #10
 800ef3a:	2100      	moveq	r1, #0
 800ef3c:	f002 fbb8 	bl	80116b0 <uxr_delete_session_retries>
 800ef40:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ef42:	f000 ffc5 	bl	800fed0 <rmw_uxrce_fini_session_memory>
 800ef46:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ef48:	3010      	adds	r0, #16
 800ef4a:	f001 fc25 	bl	8010798 <uxr_close_custom_transport>
 800ef4e:	2300      	movs	r3, #0
 800ef50:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ef52:	4630      	mov	r0, r6
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
 800ef56:	3018      	adds	r0, #24
 800ef58:	f000 f89c 	bl	800f094 <rmw_destroy_node>
 800ef5c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ef5e:	4606      	mov	r6, r0
 800ef60:	2c00      	cmp	r4, #0
 800ef62:	d1da      	bne.n	800ef1a <rmw_context_fini+0xe>
 800ef64:	e7e0      	b.n	800ef28 <rmw_context_fini+0x1c>
 800ef66:	4626      	mov	r6, r4
 800ef68:	e7de      	b.n	800ef28 <rmw_context_fini+0x1c>
 800ef6a:	bf00      	nop
 800ef6c:	2000dec4 	.word	0x2000dec4

0800ef70 <create_node>:
 800ef70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef74:	b083      	sub	sp, #12
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d05f      	beq.n	800f03a <create_node+0xca>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	4835      	ldr	r0, [pc, #212]	@ (800f054 <create_node+0xe4>)
 800ef7e:	460f      	mov	r7, r1
 800ef80:	4690      	mov	r8, r2
 800ef82:	461d      	mov	r5, r3
 800ef84:	f005 f908 	bl	8014198 <get_memory>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d056      	beq.n	800f03a <create_node+0xca>
 800ef8c:	6884      	ldr	r4, [r0, #8]
 800ef8e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ef90:	6123      	str	r3, [r4, #16]
 800ef92:	f7ff fd5d 	bl	800ea50 <rmw_get_implementation_identifier>
 800ef96:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ef9a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ef9e:	f8c4 9020 	str.w	r9, [r4, #32]
 800efa2:	4630      	mov	r0, r6
 800efa4:	f7f1 f926 	bl	80001f4 <strlen>
 800efa8:	1c42      	adds	r2, r0, #1
 800efaa:	2a3c      	cmp	r2, #60	@ 0x3c
 800efac:	f104 0518 	add.w	r5, r4, #24
 800efb0:	d840      	bhi.n	800f034 <create_node+0xc4>
 800efb2:	4648      	mov	r0, r9
 800efb4:	4631      	mov	r1, r6
 800efb6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800efba:	f006 fd3e 	bl	8015a3a <memcpy>
 800efbe:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800efc2:	4638      	mov	r0, r7
 800efc4:	f7f1 f916 	bl	80001f4 <strlen>
 800efc8:	1c42      	adds	r2, r0, #1
 800efca:	2a3c      	cmp	r2, #60	@ 0x3c
 800efcc:	d832      	bhi.n	800f034 <create_node+0xc4>
 800efce:	4639      	mov	r1, r7
 800efd0:	4648      	mov	r0, r9
 800efd2:	f006 fd32 	bl	8015a3a <memcpy>
 800efd6:	6923      	ldr	r3, [r4, #16]
 800efd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800efdc:	2101      	movs	r1, #1
 800efde:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800efe2:	1842      	adds	r2, r0, r1
 800efe4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800efe8:	f001 fbda 	bl	80107a0 <uxr_object_id>
 800efec:	6160      	str	r0, [r4, #20]
 800efee:	783b      	ldrb	r3, [r7, #0]
 800eff0:	2b2f      	cmp	r3, #47	@ 0x2f
 800eff2:	d127      	bne.n	800f044 <create_node+0xd4>
 800eff4:	787b      	ldrb	r3, [r7, #1]
 800eff6:	bb2b      	cbnz	r3, 800f044 <create_node+0xd4>
 800eff8:	4a17      	ldr	r2, [pc, #92]	@ (800f058 <create_node+0xe8>)
 800effa:	4818      	ldr	r0, [pc, #96]	@ (800f05c <create_node+0xec>)
 800effc:	4633      	mov	r3, r6
 800effe:	213c      	movs	r1, #60	@ 0x3c
 800f000:	f006 fb78 	bl	80156f4 <sniprintf>
 800f004:	6920      	ldr	r0, [r4, #16]
 800f006:	4915      	ldr	r1, [pc, #84]	@ (800f05c <create_node+0xec>)
 800f008:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f00c:	9100      	str	r1, [sp, #0]
 800f00e:	2106      	movs	r1, #6
 800f010:	9101      	str	r1, [sp, #4]
 800f012:	6811      	ldr	r1, [r2, #0]
 800f014:	6962      	ldr	r2, [r4, #20]
 800f016:	fa1f f388 	uxth.w	r3, r8
 800f01a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f01e:	f001 f9ed 	bl	80103fc <uxr_buffer_create_participant_bin>
 800f022:	4602      	mov	r2, r0
 800f024:	6920      	ldr	r0, [r4, #16]
 800f026:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f02a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f02e:	f001 f8c5 	bl	80101bc <run_xrce_session>
 800f032:	b918      	cbnz	r0, 800f03c <create_node+0xcc>
 800f034:	4628      	mov	r0, r5
 800f036:	f000 ff51 	bl	800fedc <rmw_uxrce_fini_node_memory>
 800f03a:	2500      	movs	r5, #0
 800f03c:	4628      	mov	r0, r5
 800f03e:	b003      	add	sp, #12
 800f040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f044:	4a06      	ldr	r2, [pc, #24]	@ (800f060 <create_node+0xf0>)
 800f046:	9600      	str	r6, [sp, #0]
 800f048:	463b      	mov	r3, r7
 800f04a:	213c      	movs	r1, #60	@ 0x3c
 800f04c:	4803      	ldr	r0, [pc, #12]	@ (800f05c <create_node+0xec>)
 800f04e:	f006 fb51 	bl	80156f4 <sniprintf>
 800f052:	e7d7      	b.n	800f004 <create_node+0x94>
 800f054:	2000dec4 	.word	0x2000dec4
 800f058:	08017164 	.word	0x08017164
 800f05c:	200095bc 	.word	0x200095bc
 800f060:	08016cb8 	.word	0x08016cb8

0800f064 <rmw_create_node>:
 800f064:	b199      	cbz	r1, 800f08e <rmw_create_node+0x2a>
 800f066:	780b      	ldrb	r3, [r1, #0]
 800f068:	468c      	mov	ip, r1
 800f06a:	b183      	cbz	r3, 800f08e <rmw_create_node+0x2a>
 800f06c:	b410      	push	{r4}
 800f06e:	4614      	mov	r4, r2
 800f070:	b14a      	cbz	r2, 800f086 <rmw_create_node+0x22>
 800f072:	7813      	ldrb	r3, [r2, #0]
 800f074:	b13b      	cbz	r3, 800f086 <rmw_create_node+0x22>
 800f076:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f078:	4603      	mov	r3, r0
 800f07a:	4621      	mov	r1, r4
 800f07c:	4660      	mov	r0, ip
 800f07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f082:	f7ff bf75 	b.w	800ef70 <create_node>
 800f086:	2000      	movs	r0, #0
 800f088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	2000      	movs	r0, #0
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop

0800f094 <rmw_destroy_node>:
 800f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f096:	b328      	cbz	r0, 800f0e4 <rmw_destroy_node+0x50>
 800f098:	4607      	mov	r7, r0
 800f09a:	6800      	ldr	r0, [r0, #0]
 800f09c:	b120      	cbz	r0, 800f0a8 <rmw_destroy_node+0x14>
 800f09e:	4b36      	ldr	r3, [pc, #216]	@ (800f178 <rmw_destroy_node+0xe4>)
 800f0a0:	6819      	ldr	r1, [r3, #0]
 800f0a2:	f7f1 f89d 	bl	80001e0 <strcmp>
 800f0a6:	b9e8      	cbnz	r0, 800f0e4 <rmw_destroy_node+0x50>
 800f0a8:	687d      	ldr	r5, [r7, #4]
 800f0aa:	b1dd      	cbz	r5, 800f0e4 <rmw_destroy_node+0x50>
 800f0ac:	4b33      	ldr	r3, [pc, #204]	@ (800f17c <rmw_destroy_node+0xe8>)
 800f0ae:	681c      	ldr	r4, [r3, #0]
 800f0b0:	2c00      	cmp	r4, #0
 800f0b2:	d05f      	beq.n	800f174 <rmw_destroy_node+0xe0>
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0ba:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f0be:	429d      	cmp	r5, r3
 800f0c0:	d013      	beq.n	800f0ea <rmw_destroy_node+0x56>
 800f0c2:	2c00      	cmp	r4, #0
 800f0c4:	d1f7      	bne.n	800f0b6 <rmw_destroy_node+0x22>
 800f0c6:	4b2e      	ldr	r3, [pc, #184]	@ (800f180 <rmw_destroy_node+0xec>)
 800f0c8:	681c      	ldr	r4, [r3, #0]
 800f0ca:	b1c4      	cbz	r4, 800f0fe <rmw_destroy_node+0x6a>
 800f0cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0d0:	6a0b      	ldr	r3, [r1, #32]
 800f0d2:	429d      	cmp	r5, r3
 800f0d4:	d1f9      	bne.n	800f0ca <rmw_destroy_node+0x36>
 800f0d6:	317c      	adds	r1, #124	@ 0x7c
 800f0d8:	4638      	mov	r0, r7
 800f0da:	f000 fb37 	bl	800f74c <rmw_destroy_subscription>
 800f0de:	2801      	cmp	r0, #1
 800f0e0:	4606      	mov	r6, r0
 800f0e2:	d1f2      	bne.n	800f0ca <rmw_destroy_node+0x36>
 800f0e4:	2601      	movs	r6, #1
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ea:	3184      	adds	r1, #132	@ 0x84
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	f000 f853 	bl	800f198 <rmw_destroy_publisher>
 800f0f2:	2801      	cmp	r0, #1
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	d0f5      	beq.n	800f0e4 <rmw_destroy_node+0x50>
 800f0f8:	2c00      	cmp	r4, #0
 800f0fa:	d1dc      	bne.n	800f0b6 <rmw_destroy_node+0x22>
 800f0fc:	e7e3      	b.n	800f0c6 <rmw_destroy_node+0x32>
 800f0fe:	4b21      	ldr	r3, [pc, #132]	@ (800f184 <rmw_destroy_node+0xf0>)
 800f100:	681c      	ldr	r4, [r3, #0]
 800f102:	b16c      	cbz	r4, 800f120 <rmw_destroy_node+0x8c>
 800f104:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f108:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f10a:	429d      	cmp	r5, r3
 800f10c:	d1f9      	bne.n	800f102 <rmw_destroy_node+0x6e>
 800f10e:	317c      	adds	r1, #124	@ 0x7c
 800f110:	4638      	mov	r0, r7
 800f112:	f000 f9e5 	bl	800f4e0 <rmw_destroy_service>
 800f116:	2801      	cmp	r0, #1
 800f118:	4606      	mov	r6, r0
 800f11a:	d0e3      	beq.n	800f0e4 <rmw_destroy_node+0x50>
 800f11c:	2c00      	cmp	r4, #0
 800f11e:	d1f1      	bne.n	800f104 <rmw_destroy_node+0x70>
 800f120:	4b19      	ldr	r3, [pc, #100]	@ (800f188 <rmw_destroy_node+0xf4>)
 800f122:	681c      	ldr	r4, [r3, #0]
 800f124:	b16c      	cbz	r4, 800f142 <rmw_destroy_node+0xae>
 800f126:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f12a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f12c:	429d      	cmp	r5, r3
 800f12e:	d1f9      	bne.n	800f124 <rmw_destroy_node+0x90>
 800f130:	317c      	adds	r1, #124	@ 0x7c
 800f132:	4638      	mov	r0, r7
 800f134:	f7ff fc48 	bl	800e9c8 <rmw_destroy_client>
 800f138:	2801      	cmp	r0, #1
 800f13a:	4606      	mov	r6, r0
 800f13c:	d0d2      	beq.n	800f0e4 <rmw_destroy_node+0x50>
 800f13e:	2c00      	cmp	r4, #0
 800f140:	d1f1      	bne.n	800f126 <rmw_destroy_node+0x92>
 800f142:	6928      	ldr	r0, [r5, #16]
 800f144:	696a      	ldr	r2, [r5, #20]
 800f146:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f14a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f14e:	6819      	ldr	r1, [r3, #0]
 800f150:	f001 f908 	bl	8010364 <uxr_buffer_delete_entity>
 800f154:	4602      	mov	r2, r0
 800f156:	6928      	ldr	r0, [r5, #16]
 800f158:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f15c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f160:	f001 f82c 	bl	80101bc <run_xrce_session>
 800f164:	2800      	cmp	r0, #0
 800f166:	bf08      	it	eq
 800f168:	2602      	moveq	r6, #2
 800f16a:	4638      	mov	r0, r7
 800f16c:	f000 feb6 	bl	800fedc <rmw_uxrce_fini_node_memory>
 800f170:	4630      	mov	r0, r6
 800f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f174:	4626      	mov	r6, r4
 800f176:	e7a6      	b.n	800f0c6 <rmw_destroy_node+0x32>
 800f178:	080173e0 	.word	0x080173e0
 800f17c:	2000ded4 	.word	0x2000ded4
 800f180:	2000df14 	.word	0x2000df14
 800f184:	2000dee4 	.word	0x2000dee4
 800f188:	200095f8 	.word	0x200095f8

0800f18c <rmw_node_get_graph_guard_condition>:
 800f18c:	6843      	ldr	r3, [r0, #4]
 800f18e:	6918      	ldr	r0, [r3, #16]
 800f190:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop

0800f198 <rmw_destroy_publisher>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	b128      	cbz	r0, 800f1a8 <rmw_destroy_publisher+0x10>
 800f19c:	4604      	mov	r4, r0
 800f19e:	6800      	ldr	r0, [r0, #0]
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	f001 f88b 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f1a6:	b910      	cbnz	r0, 800f1ae <rmw_destroy_publisher+0x16>
 800f1a8:	2401      	movs	r4, #1
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ae:	6863      	ldr	r3, [r4, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d0f9      	beq.n	800f1a8 <rmw_destroy_publisher+0x10>
 800f1b4:	2d00      	cmp	r5, #0
 800f1b6:	d0f7      	beq.n	800f1a8 <rmw_destroy_publisher+0x10>
 800f1b8:	6828      	ldr	r0, [r5, #0]
 800f1ba:	f001 f87f 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d0f2      	beq.n	800f1a8 <rmw_destroy_publisher+0x10>
 800f1c2:	686c      	ldr	r4, [r5, #4]
 800f1c4:	2c00      	cmp	r4, #0
 800f1c6:	d0ef      	beq.n	800f1a8 <rmw_destroy_publisher+0x10>
 800f1c8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f1ca:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f1ce:	f005 f87f 	bl	80142d0 <destroy_topic>
 800f1d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f1d6:	6962      	ldr	r2, [r4, #20]
 800f1d8:	6918      	ldr	r0, [r3, #16]
 800f1da:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f1de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1e2:	6819      	ldr	r1, [r3, #0]
 800f1e4:	f001 f8be 	bl	8010364 <uxr_buffer_delete_entity>
 800f1e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f1ec:	6922      	ldr	r2, [r4, #16]
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	6809      	ldr	r1, [r1, #0]
 800f1f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f1fc:	f001 f8b2 	bl	8010364 <uxr_buffer_delete_entity>
 800f200:	693e      	ldr	r6, [r7, #16]
 800f202:	4622      	mov	r2, r4
 800f204:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f208:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f20c:	4604      	mov	r4, r0
 800f20e:	4630      	mov	r0, r6
 800f210:	f000 ffd4 	bl	80101bc <run_xrce_session>
 800f214:	693e      	ldr	r6, [r7, #16]
 800f216:	4622      	mov	r2, r4
 800f218:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f21c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f220:	4604      	mov	r4, r0
 800f222:	4630      	mov	r0, r6
 800f224:	f000 ffca 	bl	80101bc <run_xrce_session>
 800f228:	b12c      	cbz	r4, 800f236 <rmw_destroy_publisher+0x9e>
 800f22a:	b120      	cbz	r0, 800f236 <rmw_destroy_publisher+0x9e>
 800f22c:	2400      	movs	r4, #0
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 fe6c 	bl	800ff0c <rmw_uxrce_fini_publisher_memory>
 800f234:	e7b9      	b.n	800f1aa <rmw_destroy_publisher+0x12>
 800f236:	2402      	movs	r4, #2
 800f238:	e7f9      	b.n	800f22e <rmw_destroy_publisher+0x96>
 800f23a:	bf00      	nop

0800f23c <rmw_send_request>:
 800f23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f240:	4604      	mov	r4, r0
 800f242:	6800      	ldr	r0, [r0, #0]
 800f244:	b08b      	sub	sp, #44	@ 0x2c
 800f246:	460e      	mov	r6, r1
 800f248:	4615      	mov	r5, r2
 800f24a:	b128      	cbz	r0, 800f258 <rmw_send_request+0x1c>
 800f24c:	4b21      	ldr	r3, [pc, #132]	@ (800f2d4 <rmw_send_request+0x98>)
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	f7f0 ffc6 	bl	80001e0 <strcmp>
 800f254:	2800      	cmp	r0, #0
 800f256:	d139      	bne.n	800f2cc <rmw_send_request+0x90>
 800f258:	6864      	ldr	r4, [r4, #4]
 800f25a:	6963      	ldr	r3, [r4, #20]
 800f25c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	4798      	blx	r3
 800f264:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f268:	4630      	mov	r0, r6
 800f26a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f26e:	4798      	blx	r3
 800f270:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f274:	9000      	str	r0, [sp, #0]
 800f276:	6922      	ldr	r2, [r4, #16]
 800f278:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800f27a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f27e:	ab02      	add	r3, sp, #8
 800f280:	f003 fac2 	bl	8012808 <uxr_prepare_output_stream>
 800f284:	2700      	movs	r7, #0
 800f286:	6028      	str	r0, [r5, #0]
 800f288:	606f      	str	r7, [r5, #4]
 800f28a:	b198      	cbz	r0, 800f2b4 <rmw_send_request+0x78>
 800f28c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f290:	a902      	add	r1, sp, #8
 800f292:	4630      	mov	r0, r6
 800f294:	4798      	blx	r3
 800f296:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800f29a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d00c      	beq.n	800f2bc <rmw_send_request+0x80>
 800f2a2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800f2a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2a8:	f002 f8ba 	bl	8011420 <uxr_run_session_until_confirm_delivery>
 800f2ac:	4638      	mov	r0, r7
 800f2ae:	b00b      	add	sp, #44	@ 0x2c
 800f2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	b00b      	add	sp, #44	@ 0x2c
 800f2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2c0:	f001 fcee 	bl	8010ca0 <uxr_flash_output_streams>
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	b00b      	add	sp, #44	@ 0x2c
 800f2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	200c      	movs	r0, #12
 800f2ce:	b00b      	add	sp, #44	@ 0x2c
 800f2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2d4:	080173e0 	.word	0x080173e0

0800f2d8 <rmw_take_request>:
 800f2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2dc:	4605      	mov	r5, r0
 800f2de:	6800      	ldr	r0, [r0, #0]
 800f2e0:	b089      	sub	sp, #36	@ 0x24
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	4690      	mov	r8, r2
 800f2e6:	461e      	mov	r6, r3
 800f2e8:	b128      	cbz	r0, 800f2f6 <rmw_take_request+0x1e>
 800f2ea:	4b28      	ldr	r3, [pc, #160]	@ (800f38c <rmw_take_request+0xb4>)
 800f2ec:	6819      	ldr	r1, [r3, #0]
 800f2ee:	f7f0 ff77 	bl	80001e0 <strcmp>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d146      	bne.n	800f384 <rmw_take_request+0xac>
 800f2f6:	b10e      	cbz	r6, 800f2fc <rmw_take_request+0x24>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	7033      	strb	r3, [r6, #0]
 800f2fc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f300:	f000 fede 	bl	80100c0 <rmw_uxrce_clean_expired_static_input_buffer>
 800f304:	4648      	mov	r0, r9
 800f306:	f000 feb5 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f30a:	4607      	mov	r7, r0
 800f30c:	b3b0      	cbz	r0, 800f37c <rmw_take_request+0xa4>
 800f30e:	6885      	ldr	r5, [r0, #8]
 800f310:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800f314:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800f318:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f31c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800f320:	7423      	strb	r3, [r4, #16]
 800f322:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800f326:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800f32a:	74e2      	strb	r2, [r4, #19]
 800f32c:	f8a4 3011 	strh.w	r3, [r4, #17]
 800f330:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800f334:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800f338:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800f33c:	61e1      	str	r1, [r4, #28]
 800f33e:	6162      	str	r2, [r4, #20]
 800f340:	61a3      	str	r3, [r4, #24]
 800f342:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	4798      	blx	r3
 800f34a:	6844      	ldr	r4, [r0, #4]
 800f34c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800f350:	f105 0110 	add.w	r1, r5, #16
 800f354:	4668      	mov	r0, sp
 800f356:	f7fc f9fd 	bl	800b754 <ucdr_init_buffer>
 800f35a:	68e3      	ldr	r3, [r4, #12]
 800f35c:	4641      	mov	r1, r8
 800f35e:	4668      	mov	r0, sp
 800f360:	4798      	blx	r3
 800f362:	4639      	mov	r1, r7
 800f364:	4604      	mov	r4, r0
 800f366:	480a      	ldr	r0, [pc, #40]	@ (800f390 <rmw_take_request+0xb8>)
 800f368:	f004 ff26 	bl	80141b8 <put_memory>
 800f36c:	b106      	cbz	r6, 800f370 <rmw_take_request+0x98>
 800f36e:	7034      	strb	r4, [r6, #0]
 800f370:	f084 0001 	eor.w	r0, r4, #1
 800f374:	b2c0      	uxtb	r0, r0
 800f376:	b009      	add	sp, #36	@ 0x24
 800f378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f37c:	2001      	movs	r0, #1
 800f37e:	b009      	add	sp, #36	@ 0x24
 800f380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f384:	200c      	movs	r0, #12
 800f386:	b009      	add	sp, #36	@ 0x24
 800f388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38c:	080173e0 	.word	0x080173e0
 800f390:	2000df04 	.word	0x2000df04

0800f394 <rmw_send_response>:
 800f394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f396:	4605      	mov	r5, r0
 800f398:	6800      	ldr	r0, [r0, #0]
 800f39a:	b091      	sub	sp, #68	@ 0x44
 800f39c:	460c      	mov	r4, r1
 800f39e:	4616      	mov	r6, r2
 800f3a0:	b128      	cbz	r0, 800f3ae <rmw_send_response+0x1a>
 800f3a2:	4b29      	ldr	r3, [pc, #164]	@ (800f448 <rmw_send_response+0xb4>)
 800f3a4:	6819      	ldr	r1, [r3, #0]
 800f3a6:	f7f0 ff1b 	bl	80001e0 <strcmp>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d141      	bne.n	800f432 <rmw_send_response+0x9e>
 800f3ae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f3b2:	9306      	str	r3, [sp, #24]
 800f3b4:	4623      	mov	r3, r4
 800f3b6:	9207      	str	r2, [sp, #28]
 800f3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3bc:	686d      	ldr	r5, [r5, #4]
 800f3be:	789b      	ldrb	r3, [r3, #2]
 800f3c0:	68a1      	ldr	r1, [r4, #8]
 800f3c2:	f88d 2017 	strb.w	r2, [sp, #23]
 800f3c6:	f88d 3016 	strb.w	r3, [sp, #22]
 800f3ca:	68e2      	ldr	r2, [r4, #12]
 800f3cc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800f3d0:	6860      	ldr	r0, [r4, #4]
 800f3d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f3d6:	ab02      	add	r3, sp, #8
 800f3d8:	c307      	stmia	r3!, {r0, r1, r2}
 800f3da:	696b      	ldr	r3, [r5, #20]
 800f3dc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	4798      	blx	r3
 800f3e2:	6844      	ldr	r4, [r0, #4]
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	6923      	ldr	r3, [r4, #16]
 800f3e8:	4798      	blx	r3
 800f3ea:	f100 0318 	add.w	r3, r0, #24
 800f3ee:	6938      	ldr	r0, [r7, #16]
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	692a      	ldr	r2, [r5, #16]
 800f3f4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800f3f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3fa:	ab08      	add	r3, sp, #32
 800f3fc:	f003 fa04 	bl	8012808 <uxr_prepare_output_stream>
 800f400:	b910      	cbnz	r0, 800f408 <rmw_send_response+0x74>
 800f402:	2001      	movs	r0, #1
 800f404:	b011      	add	sp, #68	@ 0x44
 800f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f408:	a902      	add	r1, sp, #8
 800f40a:	a808      	add	r0, sp, #32
 800f40c:	f004 f98e 	bl	801372c <uxr_serialize_SampleIdentity>
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	a908      	add	r1, sp, #32
 800f414:	4630      	mov	r0, r6
 800f416:	4798      	blx	r3
 800f418:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800f41c:	6938      	ldr	r0, [r7, #16]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d00a      	beq.n	800f438 <rmw_send_response+0xa4>
 800f422:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800f424:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f428:	f001 fffa 	bl	8011420 <uxr_run_session_until_confirm_delivery>
 800f42c:	2000      	movs	r0, #0
 800f42e:	b011      	add	sp, #68	@ 0x44
 800f430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f432:	200c      	movs	r0, #12
 800f434:	b011      	add	sp, #68	@ 0x44
 800f436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f438:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f43c:	f001 fc30 	bl	8010ca0 <uxr_flash_output_streams>
 800f440:	2000      	movs	r0, #0
 800f442:	b011      	add	sp, #68	@ 0x44
 800f444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f446:	bf00      	nop
 800f448:	080173e0 	.word	0x080173e0

0800f44c <rmw_take_response>:
 800f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f450:	4604      	mov	r4, r0
 800f452:	6800      	ldr	r0, [r0, #0]
 800f454:	b088      	sub	sp, #32
 800f456:	4688      	mov	r8, r1
 800f458:	4617      	mov	r7, r2
 800f45a:	461d      	mov	r5, r3
 800f45c:	b120      	cbz	r0, 800f468 <rmw_take_response+0x1c>
 800f45e:	4b1e      	ldr	r3, [pc, #120]	@ (800f4d8 <rmw_take_response+0x8c>)
 800f460:	6819      	ldr	r1, [r3, #0]
 800f462:	f7f0 febd 	bl	80001e0 <strcmp>
 800f466:	bb78      	cbnz	r0, 800f4c8 <rmw_take_response+0x7c>
 800f468:	b10d      	cbz	r5, 800f46e <rmw_take_response+0x22>
 800f46a:	2300      	movs	r3, #0
 800f46c:	702b      	strb	r3, [r5, #0]
 800f46e:	6864      	ldr	r4, [r4, #4]
 800f470:	f000 fe26 	bl	80100c0 <rmw_uxrce_clean_expired_static_input_buffer>
 800f474:	4620      	mov	r0, r4
 800f476:	f000 fdfd 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f47a:	4606      	mov	r6, r0
 800f47c:	b340      	cbz	r0, 800f4d0 <rmw_take_response+0x84>
 800f47e:	6963      	ldr	r3, [r4, #20]
 800f480:	6884      	ldr	r4, [r0, #8]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800f488:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800f48c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800f490:	4798      	blx	r3
 800f492:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f496:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800f49a:	f104 0110 	add.w	r1, r4, #16
 800f49e:	4668      	mov	r0, sp
 800f4a0:	f7fc f958 	bl	800b754 <ucdr_init_buffer>
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4aa:	4668      	mov	r0, sp
 800f4ac:	4798      	blx	r3
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	480a      	ldr	r0, [pc, #40]	@ (800f4dc <rmw_take_response+0x90>)
 800f4b4:	f004 fe80 	bl	80141b8 <put_memory>
 800f4b8:	b105      	cbz	r5, 800f4bc <rmw_take_response+0x70>
 800f4ba:	702c      	strb	r4, [r5, #0]
 800f4bc:	f084 0001 	eor.w	r0, r4, #1
 800f4c0:	b2c0      	uxtb	r0, r0
 800f4c2:	b008      	add	sp, #32
 800f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c8:	200c      	movs	r0, #12
 800f4ca:	b008      	add	sp, #32
 800f4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d0:	2001      	movs	r0, #1
 800f4d2:	b008      	add	sp, #32
 800f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d8:	080173e0 	.word	0x080173e0
 800f4dc:	2000df04 	.word	0x2000df04

0800f4e0 <rmw_destroy_service>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	b128      	cbz	r0, 800f4f0 <rmw_destroy_service+0x10>
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	6800      	ldr	r0, [r0, #0]
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	f000 fee7 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f4ee:	b910      	cbnz	r0, 800f4f6 <rmw_destroy_service+0x16>
 800f4f0:	2401      	movs	r4, #1
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	bd70      	pop	{r4, r5, r6, pc}
 800f4f6:	6863      	ldr	r3, [r4, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d0f9      	beq.n	800f4f0 <rmw_destroy_service+0x10>
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	d0f7      	beq.n	800f4f0 <rmw_destroy_service+0x10>
 800f500:	6828      	ldr	r0, [r5, #0]
 800f502:	f000 fedb 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f506:	2800      	cmp	r0, #0
 800f508:	d0f2      	beq.n	800f4f0 <rmw_destroy_service+0x10>
 800f50a:	686e      	ldr	r6, [r5, #4]
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	d0ef      	beq.n	800f4f0 <rmw_destroy_service+0x10>
 800f510:	6864      	ldr	r4, [r4, #4]
 800f512:	6932      	ldr	r2, [r6, #16]
 800f514:	6920      	ldr	r0, [r4, #16]
 800f516:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f51a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f51e:	6819      	ldr	r1, [r3, #0]
 800f520:	f001 f9a8 	bl	8010874 <uxr_buffer_cancel_data>
 800f524:	4602      	mov	r2, r0
 800f526:	6920      	ldr	r0, [r4, #16]
 800f528:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f52c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f530:	f000 fe44 	bl	80101bc <run_xrce_session>
 800f534:	6920      	ldr	r0, [r4, #16]
 800f536:	6932      	ldr	r2, [r6, #16]
 800f538:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f53c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f540:	6819      	ldr	r1, [r3, #0]
 800f542:	f000 ff0f 	bl	8010364 <uxr_buffer_delete_entity>
 800f546:	4602      	mov	r2, r0
 800f548:	6920      	ldr	r0, [r4, #16]
 800f54a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f54e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f552:	f000 fe33 	bl	80101bc <run_xrce_session>
 800f556:	2800      	cmp	r0, #0
 800f558:	4628      	mov	r0, r5
 800f55a:	bf14      	ite	ne
 800f55c:	2400      	movne	r4, #0
 800f55e:	2402      	moveq	r4, #2
 800f560:	f000 fd00 	bl	800ff64 <rmw_uxrce_fini_service_memory>
 800f564:	e7c5      	b.n	800f4f2 <rmw_destroy_service+0x12>
 800f566:	bf00      	nop

0800f568 <rmw_create_subscription>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	b08d      	sub	sp, #52	@ 0x34
 800f56e:	2800      	cmp	r0, #0
 800f570:	f000 80d1 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f574:	460e      	mov	r6, r1
 800f576:	2900      	cmp	r1, #0
 800f578:	f000 80cd 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f57c:	4604      	mov	r4, r0
 800f57e:	6800      	ldr	r0, [r0, #0]
 800f580:	4615      	mov	r5, r2
 800f582:	4698      	mov	r8, r3
 800f584:	f000 fe9a 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f588:	2800      	cmp	r0, #0
 800f58a:	f000 80c4 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f58e:	2d00      	cmp	r5, #0
 800f590:	f000 80c1 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f594:	782b      	ldrb	r3, [r5, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 80bd 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f59c:	f1b8 0f00 	cmp.w	r8, #0
 800f5a0:	f000 80b9 	beq.w	800f716 <rmw_create_subscription+0x1ae>
 800f5a4:	485e      	ldr	r0, [pc, #376]	@ (800f720 <rmw_create_subscription+0x1b8>)
 800f5a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f5aa:	f004 fdf5 	bl	8014198 <get_memory>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	f000 80b1 	beq.w	800f718 <rmw_create_subscription+0x1b0>
 800f5b6:	6887      	ldr	r7, [r0, #8]
 800f5b8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800f5bc:	f7ff fa48 	bl	800ea50 <rmw_get_implementation_identifier>
 800f5c0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800f5c4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f5c6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f7f0 fe12 	bl	80001f4 <strlen>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	283c      	cmp	r0, #60	@ 0x3c
 800f5d4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800f5d8:	f200 8096 	bhi.w	800f708 <rmw_create_subscription+0x1a0>
 800f5dc:	4a51      	ldr	r2, [pc, #324]	@ (800f724 <rmw_create_subscription+0x1bc>)
 800f5de:	462b      	mov	r3, r5
 800f5e0:	213c      	movs	r1, #60	@ 0x3c
 800f5e2:	4650      	mov	r0, sl
 800f5e4:	f006 f886 	bl	80156f4 <sniprintf>
 800f5e8:	4641      	mov	r1, r8
 800f5ea:	f8c7 9020 	str.w	r9, [r7, #32]
 800f5ee:	2250      	movs	r2, #80	@ 0x50
 800f5f0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800f5f4:	f006 fa21 	bl	8015a3a <memcpy>
 800f5f8:	494b      	ldr	r1, [pc, #300]	@ (800f728 <rmw_create_subscription+0x1c0>)
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f000 fe6c 	bl	80102d8 <get_message_typesupport_handle>
 800f600:	2800      	cmp	r0, #0
 800f602:	f000 8081 	beq.w	800f708 <rmw_create_subscription+0x1a0>
 800f606:	6842      	ldr	r2, [r0, #4]
 800f608:	61ba      	str	r2, [r7, #24]
 800f60a:	2a00      	cmp	r2, #0
 800f60c:	d07c      	beq.n	800f708 <rmw_create_subscription+0x1a0>
 800f60e:	4629      	mov	r1, r5
 800f610:	4643      	mov	r3, r8
 800f612:	4648      	mov	r0, r9
 800f614:	f004 fe0c 	bl	8014230 <create_topic>
 800f618:	61f8      	str	r0, [r7, #28]
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d078      	beq.n	800f710 <rmw_create_subscription+0x1a8>
 800f61e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f626:	2104      	movs	r1, #4
 800f628:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800f62c:	1c42      	adds	r2, r0, #1
 800f62e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800f632:	f001 f8b5 	bl	80107a0 <uxr_object_id>
 800f636:	6138      	str	r0, [r7, #16]
 800f638:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f63c:	2506      	movs	r5, #6
 800f63e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800f642:	9500      	str	r5, [sp, #0]
 800f644:	6819      	ldr	r1, [r3, #0]
 800f646:	693a      	ldr	r2, [r7, #16]
 800f648:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f64c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f650:	f000 ff3c 	bl	80104cc <uxr_buffer_create_subscriber_bin>
 800f654:	4602      	mov	r2, r0
 800f656:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f65a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f65e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f662:	f000 fdab 	bl	80101bc <run_xrce_session>
 800f666:	2800      	cmp	r0, #0
 800f668:	d04e      	beq.n	800f708 <rmw_create_subscription+0x1a0>
 800f66a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f66e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f672:	4629      	mov	r1, r5
 800f674:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800f678:	1c42      	adds	r2, r0, #1
 800f67a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800f67e:	f001 f88f 	bl	80107a0 <uxr_object_id>
 800f682:	ae08      	add	r6, sp, #32
 800f684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	6178      	str	r0, [r7, #20]
 800f68c:	4641      	mov	r1, r8
 800f68e:	4630      	mov	r0, r6
 800f690:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800f694:	9305      	str	r3, [sp, #20]
 800f696:	f000 fdad 	bl	80101f4 <convert_qos_profile>
 800f69a:	9503      	str	r5, [sp, #12]
 800f69c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f6a0:	9b05      	ldr	r3, [sp, #20]
 800f6a2:	9001      	str	r0, [sp, #4]
 800f6a4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f6a8:	691b      	ldr	r3, [r3, #16]
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f6b0:	f8db 1000 	ldr.w	r1, [fp]
 800f6b4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800f6b8:	f000 ff38 	bl	801052c <uxr_buffer_create_datareader_bin>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f6c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f6c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6ca:	f000 fd77 	bl	80101bc <run_xrce_session>
 800f6ce:	b1d8      	cbz	r0, 800f708 <rmw_create_subscription+0x1a0>
 800f6d0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f6d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	bf0c      	ite	eq
 800f6dc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800f6e0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800f6e4:	9307      	str	r3, [sp, #28]
 800f6e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800f6f0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f6f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	697a      	ldr	r2, [r7, #20]
 800f6fa:	9b07      	ldr	r3, [sp, #28]
 800f6fc:	6809      	ldr	r1, [r1, #0]
 800f6fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f702:	f001 f87d 	bl	8010800 <uxr_buffer_request_data>
 800f706:	e007      	b.n	800f718 <rmw_create_subscription+0x1b0>
 800f708:	69f8      	ldr	r0, [r7, #28]
 800f70a:	b108      	cbz	r0, 800f710 <rmw_create_subscription+0x1a8>
 800f70c:	f000 fc56 	bl	800ffbc <rmw_uxrce_fini_topic_memory>
 800f710:	4620      	mov	r0, r4
 800f712:	f000 fc11 	bl	800ff38 <rmw_uxrce_fini_subscription_memory>
 800f716:	2400      	movs	r4, #0
 800f718:	4620      	mov	r0, r4
 800f71a:	b00d      	add	sp, #52	@ 0x34
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f720:	2000df14 	.word	0x2000df14
 800f724:	08017164 	.word	0x08017164
 800f728:	08016a90 	.word	0x08016a90

0800f72c <rmw_subscription_get_actual_qos>:
 800f72c:	b150      	cbz	r0, 800f744 <rmw_subscription_get_actual_qos+0x18>
 800f72e:	b508      	push	{r3, lr}
 800f730:	460b      	mov	r3, r1
 800f732:	b149      	cbz	r1, 800f748 <rmw_subscription_get_actual_qos+0x1c>
 800f734:	6841      	ldr	r1, [r0, #4]
 800f736:	2250      	movs	r2, #80	@ 0x50
 800f738:	3128      	adds	r1, #40	@ 0x28
 800f73a:	4618      	mov	r0, r3
 800f73c:	f006 f97d 	bl	8015a3a <memcpy>
 800f740:	2000      	movs	r0, #0
 800f742:	bd08      	pop	{r3, pc}
 800f744:	200b      	movs	r0, #11
 800f746:	4770      	bx	lr
 800f748:	200b      	movs	r0, #11
 800f74a:	bd08      	pop	{r3, pc}

0800f74c <rmw_destroy_subscription>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	b128      	cbz	r0, 800f75c <rmw_destroy_subscription+0x10>
 800f750:	4604      	mov	r4, r0
 800f752:	6800      	ldr	r0, [r0, #0]
 800f754:	460d      	mov	r5, r1
 800f756:	f000 fdb1 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f75a:	b910      	cbnz	r0, 800f762 <rmw_destroy_subscription+0x16>
 800f75c:	2401      	movs	r4, #1
 800f75e:	4620      	mov	r0, r4
 800f760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f762:	6863      	ldr	r3, [r4, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d0f9      	beq.n	800f75c <rmw_destroy_subscription+0x10>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d0f7      	beq.n	800f75c <rmw_destroy_subscription+0x10>
 800f76c:	6828      	ldr	r0, [r5, #0]
 800f76e:	f000 fda5 	bl	80102bc <is_uxrce_rmw_identifier_valid>
 800f772:	2800      	cmp	r0, #0
 800f774:	d0f2      	beq.n	800f75c <rmw_destroy_subscription+0x10>
 800f776:	686c      	ldr	r4, [r5, #4]
 800f778:	2c00      	cmp	r4, #0
 800f77a:	d0ef      	beq.n	800f75c <rmw_destroy_subscription+0x10>
 800f77c:	6a26      	ldr	r6, [r4, #32]
 800f77e:	6962      	ldr	r2, [r4, #20]
 800f780:	6930      	ldr	r0, [r6, #16]
 800f782:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f786:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f78a:	6819      	ldr	r1, [r3, #0]
 800f78c:	f001 f872 	bl	8010874 <uxr_buffer_cancel_data>
 800f790:	4602      	mov	r2, r0
 800f792:	6930      	ldr	r0, [r6, #16]
 800f794:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f798:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f79c:	f000 fd0e 	bl	80101bc <run_xrce_session>
 800f7a0:	69e0      	ldr	r0, [r4, #28]
 800f7a2:	f004 fd95 	bl	80142d0 <destroy_topic>
 800f7a6:	6a23      	ldr	r3, [r4, #32]
 800f7a8:	6962      	ldr	r2, [r4, #20]
 800f7aa:	6918      	ldr	r0, [r3, #16]
 800f7ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f7b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7b4:	6819      	ldr	r1, [r3, #0]
 800f7b6:	f000 fdd5 	bl	8010364 <uxr_buffer_delete_entity>
 800f7ba:	6a23      	ldr	r3, [r4, #32]
 800f7bc:	6922      	ldr	r2, [r4, #16]
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	6809      	ldr	r1, [r1, #0]
 800f7c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f7cc:	f000 fdca 	bl	8010364 <uxr_buffer_delete_entity>
 800f7d0:	6937      	ldr	r7, [r6, #16]
 800f7d2:	4622      	mov	r2, r4
 800f7d4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f7d8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f7dc:	4604      	mov	r4, r0
 800f7de:	4638      	mov	r0, r7
 800f7e0:	f000 fcec 	bl	80101bc <run_xrce_session>
 800f7e4:	6936      	ldr	r6, [r6, #16]
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f7ec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f000 fce2 	bl	80101bc <run_xrce_session>
 800f7f8:	b12c      	cbz	r4, 800f806 <rmw_destroy_subscription+0xba>
 800f7fa:	b120      	cbz	r0, 800f806 <rmw_destroy_subscription+0xba>
 800f7fc:	2400      	movs	r4, #0
 800f7fe:	4628      	mov	r0, r5
 800f800:	f000 fb9a 	bl	800ff38 <rmw_uxrce_fini_subscription_memory>
 800f804:	e7ab      	b.n	800f75e <rmw_destroy_subscription+0x12>
 800f806:	2402      	movs	r4, #2
 800f808:	e7f9      	b.n	800f7fe <rmw_destroy_subscription+0xb2>
 800f80a:	bf00      	nop

0800f80c <rmw_take_with_info>:
 800f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80e:	4604      	mov	r4, r0
 800f810:	6800      	ldr	r0, [r0, #0]
 800f812:	b089      	sub	sp, #36	@ 0x24
 800f814:	460f      	mov	r7, r1
 800f816:	4615      	mov	r5, r2
 800f818:	b128      	cbz	r0, 800f826 <rmw_take_with_info+0x1a>
 800f81a:	4b24      	ldr	r3, [pc, #144]	@ (800f8ac <rmw_take_with_info+0xa0>)
 800f81c:	6819      	ldr	r1, [r3, #0]
 800f81e:	f7f0 fcdf 	bl	80001e0 <strcmp>
 800f822:	2800      	cmp	r0, #0
 800f824:	d13e      	bne.n	800f8a4 <rmw_take_with_info+0x98>
 800f826:	b305      	cbz	r5, 800f86a <rmw_take_with_info+0x5e>
 800f828:	6864      	ldr	r4, [r4, #4]
 800f82a:	2300      	movs	r3, #0
 800f82c:	702b      	strb	r3, [r5, #0]
 800f82e:	f000 fc47 	bl	80100c0 <rmw_uxrce_clean_expired_static_input_buffer>
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fc1e 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f838:	4606      	mov	r6, r0
 800f83a:	b1f0      	cbz	r0, 800f87a <rmw_take_with_info+0x6e>
 800f83c:	6881      	ldr	r1, [r0, #8]
 800f83e:	4668      	mov	r0, sp
 800f840:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f844:	3110      	adds	r1, #16
 800f846:	f7fb ff85 	bl	800b754 <ucdr_init_buffer>
 800f84a:	69a3      	ldr	r3, [r4, #24]
 800f84c:	4639      	mov	r1, r7
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	4668      	mov	r0, sp
 800f852:	4798      	blx	r3
 800f854:	4631      	mov	r1, r6
 800f856:	4604      	mov	r4, r0
 800f858:	4815      	ldr	r0, [pc, #84]	@ (800f8b0 <rmw_take_with_info+0xa4>)
 800f85a:	f004 fcad 	bl	80141b8 <put_memory>
 800f85e:	702c      	strb	r4, [r5, #0]
 800f860:	f084 0001 	eor.w	r0, r4, #1
 800f864:	b2c0      	uxtb	r0, r0
 800f866:	b009      	add	sp, #36	@ 0x24
 800f868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86a:	6864      	ldr	r4, [r4, #4]
 800f86c:	f000 fc28 	bl	80100c0 <rmw_uxrce_clean_expired_static_input_buffer>
 800f870:	4620      	mov	r0, r4
 800f872:	f000 fbff 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f876:	4605      	mov	r5, r0
 800f878:	b910      	cbnz	r0, 800f880 <rmw_take_with_info+0x74>
 800f87a:	2001      	movs	r0, #1
 800f87c:	b009      	add	sp, #36	@ 0x24
 800f87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f880:	68a9      	ldr	r1, [r5, #8]
 800f882:	4668      	mov	r0, sp
 800f884:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f888:	3110      	adds	r1, #16
 800f88a:	f7fb ff63 	bl	800b754 <ucdr_init_buffer>
 800f88e:	69a3      	ldr	r3, [r4, #24]
 800f890:	4639      	mov	r1, r7
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	4668      	mov	r0, sp
 800f896:	4798      	blx	r3
 800f898:	4629      	mov	r1, r5
 800f89a:	4604      	mov	r4, r0
 800f89c:	4804      	ldr	r0, [pc, #16]	@ (800f8b0 <rmw_take_with_info+0xa4>)
 800f89e:	f004 fc8b 	bl	80141b8 <put_memory>
 800f8a2:	e7dd      	b.n	800f860 <rmw_take_with_info+0x54>
 800f8a4:	200c      	movs	r0, #12
 800f8a6:	b009      	add	sp, #36	@ 0x24
 800f8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	080173e0 	.word	0x080173e0
 800f8b0:	2000df04 	.word	0x2000df04

0800f8b4 <rmw_uxrce_transport_init>:
 800f8b4:	b508      	push	{r3, lr}
 800f8b6:	b108      	cbz	r0, 800f8bc <rmw_uxrce_transport_init+0x8>
 800f8b8:	f100 0210 	add.w	r2, r0, #16
 800f8bc:	b139      	cbz	r1, 800f8ce <rmw_uxrce_transport_init+0x1a>
 800f8be:	6949      	ldr	r1, [r1, #20]
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	f000 ff35 	bl	8010730 <uxr_init_custom_transport>
 800f8c6:	f080 0001 	eor.w	r0, r0, #1
 800f8ca:	b2c0      	uxtb	r0, r0
 800f8cc:	bd08      	pop	{r3, pc}
 800f8ce:	4b04      	ldr	r3, [pc, #16]	@ (800f8e0 <rmw_uxrce_transport_init+0x2c>)
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	6859      	ldr	r1, [r3, #4]
 800f8d4:	f000 ff2c 	bl	8010730 <uxr_init_custom_transport>
 800f8d8:	f080 0001 	eor.w	r0, r0, #1
 800f8dc:	b2c0      	uxtb	r0, r0
 800f8de:	bd08      	pop	{r3, pc}
 800f8e0:	2000950c 	.word	0x2000950c

0800f8e4 <rmw_wait>:
 800f8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	b089      	sub	sp, #36	@ 0x24
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800f8ee:	460e      	mov	r6, r1
 800f8f0:	4698      	mov	r8, r3
 800f8f2:	4691      	mov	r9, r2
 800f8f4:	2a00      	cmp	r2, #0
 800f8f6:	f000 810a 	beq.w	800fb0e <rmw_wait+0x22a>
 800f8fa:	b16c      	cbz	r4, 800f918 <rmw_wait+0x34>
 800f8fc:	4bae      	ldr	r3, [pc, #696]	@ (800fbb8 <rmw_wait+0x2d4>)
 800f8fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f900:	af04      	add	r7, sp, #16
 800f902:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800f906:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f90a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f90e:	f004 fad7 	bl	8013ec0 <rmw_time_equal>
 800f912:	2800      	cmp	r0, #0
 800f914:	f000 8127 	beq.w	800fb66 <rmw_wait+0x282>
 800f918:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f91c:	f000 fbd0 	bl	80100c0 <rmw_uxrce_clean_expired_static_input_buffer>
 800f920:	4ba6      	ldr	r3, [pc, #664]	@ (800fbbc <rmw_wait+0x2d8>)
 800f922:	681c      	ldr	r4, [r3, #0]
 800f924:	b14c      	cbz	r4, 800f93a <rmw_wait+0x56>
 800f926:	4623      	mov	r3, r4
 800f928:	2100      	movs	r1, #0
 800f92a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800f92e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f932:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1f7      	bne.n	800f92a <rmw_wait+0x46>
 800f93a:	f1b9 0f00 	cmp.w	r9, #0
 800f93e:	d011      	beq.n	800f964 <rmw_wait+0x80>
 800f940:	f8d9 1000 	ldr.w	r1, [r9]
 800f944:	b171      	cbz	r1, 800f964 <rmw_wait+0x80>
 800f946:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800f94a:	2300      	movs	r3, #0
 800f94c:	2001      	movs	r0, #1
 800f94e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f952:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f954:	6912      	ldr	r2, [r2, #16]
 800f956:	3301      	adds	r3, #1
 800f958:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f95c:	4299      	cmp	r1, r3
 800f95e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f962:	d1f4      	bne.n	800f94e <rmw_wait+0x6a>
 800f964:	f1b8 0f00 	cmp.w	r8, #0
 800f968:	d011      	beq.n	800f98e <rmw_wait+0xaa>
 800f96a:	f8d8 1000 	ldr.w	r1, [r8]
 800f96e:	b171      	cbz	r1, 800f98e <rmw_wait+0xaa>
 800f970:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800f974:	2300      	movs	r3, #0
 800f976:	2001      	movs	r0, #1
 800f978:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f97c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f97e:	6912      	ldr	r2, [r2, #16]
 800f980:	3301      	adds	r3, #1
 800f982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f986:	4299      	cmp	r1, r3
 800f988:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f98c:	d1f4      	bne.n	800f978 <rmw_wait+0x94>
 800f98e:	b185      	cbz	r5, 800f9b2 <rmw_wait+0xce>
 800f990:	6829      	ldr	r1, [r5, #0]
 800f992:	b171      	cbz	r1, 800f9b2 <rmw_wait+0xce>
 800f994:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800f998:	2300      	movs	r3, #0
 800f99a:	2001      	movs	r0, #1
 800f99c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f9a0:	6a12      	ldr	r2, [r2, #32]
 800f9a2:	6912      	ldr	r2, [r2, #16]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f9aa:	4299      	cmp	r1, r3
 800f9ac:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f9b0:	d1f4      	bne.n	800f99c <rmw_wait+0xb8>
 800f9b2:	b34c      	cbz	r4, 800fa08 <rmw_wait+0x124>
 800f9b4:	4622      	mov	r2, r4
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800f9bc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800f9c0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 800f9c4:	440b      	add	r3, r1
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	d1f5      	bne.n	800f9b8 <rmw_wait+0xd4>
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8084 	beq.w	800fada <rmw_wait+0x1f6>
 800f9d2:	1c7a      	adds	r2, r7, #1
 800f9d4:	d00d      	beq.n	800f9f2 <rmw_wait+0x10e>
 800f9d6:	ee07 7a90 	vmov	s15, r7
 800f9da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f9de:	ee07 3a90 	vmov	s15, r3
 800f9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9ea:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800f9ee:	ee17 7a90 	vmov	r7, s15
 800f9f2:	68a0      	ldr	r0, [r4, #8]
 800f9f4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800f9f8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f040 8090 	bne.w	800fb22 <rmw_wait+0x23e>
 800fa02:	6864      	ldr	r4, [r4, #4]
 800fa04:	2c00      	cmp	r4, #0
 800fa06:	d1f4      	bne.n	800f9f2 <rmw_wait+0x10e>
 800fa08:	f1b9 0f00 	cmp.w	r9, #0
 800fa0c:	f000 80bc 	beq.w	800fb88 <rmw_wait+0x2a4>
 800fa10:	f8d9 7000 	ldr.w	r7, [r9]
 800fa14:	2f00      	cmp	r7, #0
 800fa16:	f000 808e 	beq.w	800fb36 <rmw_wait+0x252>
 800fa1a:	2400      	movs	r4, #0
 800fa1c:	4627      	mov	r7, r4
 800fa1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fa22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa26:	f000 fb25 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d05f      	beq.n	800faee <rmw_wait+0x20a>
 800fa2e:	f8d9 3000 	ldr.w	r3, [r9]
 800fa32:	3401      	adds	r4, #1
 800fa34:	42a3      	cmp	r3, r4
 800fa36:	f04f 0701 	mov.w	r7, #1
 800fa3a:	d8f0      	bhi.n	800fa1e <rmw_wait+0x13a>
 800fa3c:	f1b8 0f00 	cmp.w	r8, #0
 800fa40:	d012      	beq.n	800fa68 <rmw_wait+0x184>
 800fa42:	f8d8 3000 	ldr.w	r3, [r8]
 800fa46:	b17b      	cbz	r3, 800fa68 <rmw_wait+0x184>
 800fa48:	2400      	movs	r4, #0
 800fa4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa52:	f000 fb0f 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d051      	beq.n	800fafe <rmw_wait+0x21a>
 800fa5a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa5e:	3401      	adds	r4, #1
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	f04f 0701 	mov.w	r7, #1
 800fa66:	d8f0      	bhi.n	800fa4a <rmw_wait+0x166>
 800fa68:	b1dd      	cbz	r5, 800faa2 <rmw_wait+0x1be>
 800fa6a:	682b      	ldr	r3, [r5, #0]
 800fa6c:	b1cb      	cbz	r3, 800faa2 <rmw_wait+0x1be>
 800fa6e:	2400      	movs	r4, #0
 800fa70:	686b      	ldr	r3, [r5, #4]
 800fa72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa76:	f000 fafd 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fa7a:	b158      	cbz	r0, 800fa94 <rmw_wait+0x1b0>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	3401      	adds	r4, #1
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	d969      	bls.n	800fb58 <rmw_wait+0x274>
 800fa84:	686b      	ldr	r3, [r5, #4]
 800fa86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa8a:	2701      	movs	r7, #1
 800fa8c:	f000 faf2 	bl	8010074 <rmw_uxrce_find_static_input_buffer_by_owner>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1f3      	bne.n	800fa7c <rmw_wait+0x198>
 800fa94:	e9d5 3200 	ldrd	r3, r2, [r5]
 800fa98:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800fa9c:	3401      	adds	r4, #1
 800fa9e:	42a3      	cmp	r3, r4
 800faa0:	d8e6      	bhi.n	800fa70 <rmw_wait+0x18c>
 800faa2:	b1a6      	cbz	r6, 800face <rmw_wait+0x1ea>
 800faa4:	6834      	ldr	r4, [r6, #0]
 800faa6:	b194      	cbz	r4, 800face <rmw_wait+0x1ea>
 800faa8:	2300      	movs	r3, #0
 800faaa:	461d      	mov	r5, r3
 800faac:	e004      	b.n	800fab8 <rmw_wait+0x1d4>
 800faae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800fab2:	3301      	adds	r3, #1
 800fab4:	42a3      	cmp	r3, r4
 800fab6:	d00a      	beq.n	800face <rmw_wait+0x1ea>
 800fab8:	6870      	ldr	r0, [r6, #4]
 800faba:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800fabe:	7c0a      	ldrb	r2, [r1, #16]
 800fac0:	2a00      	cmp	r2, #0
 800fac2:	d0f4      	beq.n	800faae <rmw_wait+0x1ca>
 800fac4:	3301      	adds	r3, #1
 800fac6:	42a3      	cmp	r3, r4
 800fac8:	740d      	strb	r5, [r1, #16]
 800faca:	4617      	mov	r7, r2
 800facc:	d1f4      	bne.n	800fab8 <rmw_wait+0x1d4>
 800face:	2f00      	cmp	r7, #0
 800fad0:	d03e      	beq.n	800fb50 <rmw_wait+0x26c>
 800fad2:	2000      	movs	r0, #0
 800fad4:	b009      	add	sp, #36	@ 0x24
 800fad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fada:	68a0      	ldr	r0, [r4, #8]
 800fadc:	2100      	movs	r1, #0
 800fade:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fae2:	f001 fc63 	bl	80113ac <uxr_run_session_timeout>
 800fae6:	6864      	ldr	r4, [r4, #4]
 800fae8:	2c00      	cmp	r4, #0
 800faea:	d1f6      	bne.n	800fada <rmw_wait+0x1f6>
 800faec:	e78c      	b.n	800fa08 <rmw_wait+0x124>
 800faee:	e9d9 3200 	ldrd	r3, r2, [r9]
 800faf2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800faf6:	3401      	adds	r4, #1
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	d890      	bhi.n	800fa1e <rmw_wait+0x13a>
 800fafc:	e79e      	b.n	800fa3c <rmw_wait+0x158>
 800fafe:	e9d8 3200 	ldrd	r3, r2, [r8]
 800fb02:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800fb06:	3401      	adds	r4, #1
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	d39e      	bcc.n	800fa4a <rmw_wait+0x166>
 800fb0c:	e7ac      	b.n	800fa68 <rmw_wait+0x184>
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f47f aef3 	bne.w	800f8fa <rmw_wait+0x16>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f47f aef0 	bne.w	800f8fa <rmw_wait+0x16>
 800fb1a:	2900      	cmp	r1, #0
 800fb1c:	f47f aeed 	bne.w	800f8fa <rmw_wait+0x16>
 800fb20:	e7d7      	b.n	800fad2 <rmw_wait+0x1ee>
 800fb22:	4639      	mov	r1, r7
 800fb24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb28:	f001 fc5a 	bl	80113e0 <uxr_run_session_until_data>
 800fb2c:	6864      	ldr	r4, [r4, #4]
 800fb2e:	2c00      	cmp	r4, #0
 800fb30:	f47f af5f 	bne.w	800f9f2 <rmw_wait+0x10e>
 800fb34:	e768      	b.n	800fa08 <rmw_wait+0x124>
 800fb36:	f1b8 0f00 	cmp.w	r8, #0
 800fb3a:	d032      	beq.n	800fba2 <rmw_wait+0x2be>
 800fb3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d181      	bne.n	800fa48 <rmw_wait+0x164>
 800fb44:	461f      	mov	r7, r3
 800fb46:	2d00      	cmp	r5, #0
 800fb48:	d18f      	bne.n	800fa6a <rmw_wait+0x186>
 800fb4a:	462f      	mov	r7, r5
 800fb4c:	2e00      	cmp	r6, #0
 800fb4e:	d1a9      	bne.n	800faa4 <rmw_wait+0x1c0>
 800fb50:	2002      	movs	r0, #2
 800fb52:	b009      	add	sp, #36	@ 0x24
 800fb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb58:	2e00      	cmp	r6, #0
 800fb5a:	d0ba      	beq.n	800fad2 <rmw_wait+0x1ee>
 800fb5c:	6834      	ldr	r4, [r6, #0]
 800fb5e:	2701      	movs	r7, #1
 800fb60:	2c00      	cmp	r4, #0
 800fb62:	d1a1      	bne.n	800faa8 <rmw_wait+0x1c4>
 800fb64:	e7b5      	b.n	800fad2 <rmw_wait+0x1ee>
 800fb66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fb6a:	f004 f9fd 	bl	8013f68 <rmw_time_total_nsec>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	4a13      	ldr	r2, [pc, #76]	@ (800fbc0 <rmw_wait+0x2dc>)
 800fb72:	f7f0 fdc9 	bl	8000708 <__aeabi_uldivmod>
 800fb76:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800fb7a:	f171 0300 	sbcs.w	r3, r1, #0
 800fb7e:	4607      	mov	r7, r0
 800fb80:	bfa8      	it	ge
 800fb82:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 800fb86:	e6c9      	b.n	800f91c <rmw_wait+0x38>
 800fb88:	f1b8 0f00 	cmp.w	r8, #0
 800fb8c:	d009      	beq.n	800fba2 <rmw_wait+0x2be>
 800fb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb92:	464f      	mov	r7, r9
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f47f af57 	bne.w	800fa48 <rmw_wait+0x164>
 800fb9a:	2d00      	cmp	r5, #0
 800fb9c:	f47f af65 	bne.w	800fa6a <rmw_wait+0x186>
 800fba0:	e7d3      	b.n	800fb4a <rmw_wait+0x266>
 800fba2:	b17d      	cbz	r5, 800fbc4 <rmw_wait+0x2e0>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	4647      	mov	r7, r8
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f47f af60 	bne.w	800fa6e <rmw_wait+0x18a>
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	f47f af78 	bne.w	800faa4 <rmw_wait+0x1c0>
 800fbb4:	e7cc      	b.n	800fb50 <rmw_wait+0x26c>
 800fbb6:	bf00      	nop
 800fbb8:	08016848 	.word	0x08016848
 800fbbc:	2000def4 	.word	0x2000def4
 800fbc0:	000f4240 	.word	0x000f4240
 800fbc4:	2e00      	cmp	r6, #0
 800fbc6:	d0c3      	beq.n	800fb50 <rmw_wait+0x26c>
 800fbc8:	6834      	ldr	r4, [r6, #0]
 800fbca:	462f      	mov	r7, r5
 800fbcc:	2c00      	cmp	r4, #0
 800fbce:	f47f af6b 	bne.w	800faa8 <rmw_wait+0x1c4>
 800fbd2:	e7bd      	b.n	800fb50 <rmw_wait+0x26c>

0800fbd4 <rmw_create_wait_set>:
 800fbd4:	b508      	push	{r3, lr}
 800fbd6:	4803      	ldr	r0, [pc, #12]	@ (800fbe4 <rmw_create_wait_set+0x10>)
 800fbd8:	f004 fade 	bl	8014198 <get_memory>
 800fbdc:	b108      	cbz	r0, 800fbe2 <rmw_create_wait_set+0xe>
 800fbde:	6880      	ldr	r0, [r0, #8]
 800fbe0:	3010      	adds	r0, #16
 800fbe2:	bd08      	pop	{r3, pc}
 800fbe4:	2000df34 	.word	0x2000df34

0800fbe8 <rmw_destroy_wait_set>:
 800fbe8:	b508      	push	{r3, lr}
 800fbea:	4b08      	ldr	r3, [pc, #32]	@ (800fc0c <rmw_destroy_wait_set+0x24>)
 800fbec:	6819      	ldr	r1, [r3, #0]
 800fbee:	b911      	cbnz	r1, 800fbf6 <rmw_destroy_wait_set+0xe>
 800fbf0:	e00a      	b.n	800fc08 <rmw_destroy_wait_set+0x20>
 800fbf2:	6849      	ldr	r1, [r1, #4]
 800fbf4:	b141      	cbz	r1, 800fc08 <rmw_destroy_wait_set+0x20>
 800fbf6:	688b      	ldr	r3, [r1, #8]
 800fbf8:	3310      	adds	r3, #16
 800fbfa:	4298      	cmp	r0, r3
 800fbfc:	d1f9      	bne.n	800fbf2 <rmw_destroy_wait_set+0xa>
 800fbfe:	4803      	ldr	r0, [pc, #12]	@ (800fc0c <rmw_destroy_wait_set+0x24>)
 800fc00:	f004 fada 	bl	80141b8 <put_memory>
 800fc04:	2000      	movs	r0, #0
 800fc06:	bd08      	pop	{r3, pc}
 800fc08:	2001      	movs	r0, #1
 800fc0a:	bd08      	pop	{r3, pc}
 800fc0c:	2000df34 	.word	0x2000df34

0800fc10 <rmw_uxrce_init_service_memory>:
 800fc10:	b1e2      	cbz	r2, 800fc4c <rmw_uxrce_init_service_memory+0x3c>
 800fc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc16:	7b05      	ldrb	r5, [r0, #12]
 800fc18:	4606      	mov	r6, r0
 800fc1a:	b9ad      	cbnz	r5, 800fc48 <rmw_uxrce_init_service_memory+0x38>
 800fc1c:	23c8      	movs	r3, #200	@ 0xc8
 800fc1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fc22:	6083      	str	r3, [r0, #8]
 800fc24:	f240 1301 	movw	r3, #257	@ 0x101
 800fc28:	4617      	mov	r7, r2
 800fc2a:	8183      	strh	r3, [r0, #12]
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	46a8      	mov	r8, r5
 800fc30:	4621      	mov	r1, r4
 800fc32:	4630      	mov	r0, r6
 800fc34:	3501      	adds	r5, #1
 800fc36:	f004 fabf 	bl	80141b8 <put_memory>
 800fc3a:	42af      	cmp	r7, r5
 800fc3c:	60a4      	str	r4, [r4, #8]
 800fc3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fc42:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fc46:	d1f3      	bne.n	800fc30 <rmw_uxrce_init_service_memory+0x20>
 800fc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop

0800fc50 <rmw_uxrce_init_client_memory>:
 800fc50:	b1e2      	cbz	r2, 800fc8c <rmw_uxrce_init_client_memory+0x3c>
 800fc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	7b05      	ldrb	r5, [r0, #12]
 800fc58:	4606      	mov	r6, r0
 800fc5a:	b9ad      	cbnz	r5, 800fc88 <rmw_uxrce_init_client_memory+0x38>
 800fc5c:	23c8      	movs	r3, #200	@ 0xc8
 800fc5e:	e9c0 5500 	strd	r5, r5, [r0]
 800fc62:	6083      	str	r3, [r0, #8]
 800fc64:	f240 1301 	movw	r3, #257	@ 0x101
 800fc68:	4617      	mov	r7, r2
 800fc6a:	8183      	strh	r3, [r0, #12]
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	46a8      	mov	r8, r5
 800fc70:	4621      	mov	r1, r4
 800fc72:	4630      	mov	r0, r6
 800fc74:	3501      	adds	r5, #1
 800fc76:	f004 fa9f 	bl	80141b8 <put_memory>
 800fc7a:	42af      	cmp	r7, r5
 800fc7c:	60a4      	str	r4, [r4, #8]
 800fc7e:	f884 800c 	strb.w	r8, [r4, #12]
 800fc82:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fc86:	d1f3      	bne.n	800fc70 <rmw_uxrce_init_client_memory+0x20>
 800fc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop

0800fc90 <rmw_uxrce_init_publisher_memory>:
 800fc90:	b1e2      	cbz	r2, 800fccc <rmw_uxrce_init_publisher_memory+0x3c>
 800fc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc96:	7b05      	ldrb	r5, [r0, #12]
 800fc98:	4606      	mov	r6, r0
 800fc9a:	b9ad      	cbnz	r5, 800fcc8 <rmw_uxrce_init_publisher_memory+0x38>
 800fc9c:	23d8      	movs	r3, #216	@ 0xd8
 800fc9e:	e9c0 5500 	strd	r5, r5, [r0]
 800fca2:	6083      	str	r3, [r0, #8]
 800fca4:	f240 1301 	movw	r3, #257	@ 0x101
 800fca8:	4617      	mov	r7, r2
 800fcaa:	8183      	strh	r3, [r0, #12]
 800fcac:	460c      	mov	r4, r1
 800fcae:	46a8      	mov	r8, r5
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	3501      	adds	r5, #1
 800fcb6:	f004 fa7f 	bl	80141b8 <put_memory>
 800fcba:	42af      	cmp	r7, r5
 800fcbc:	60a4      	str	r4, [r4, #8]
 800fcbe:	f884 800c 	strb.w	r8, [r4, #12]
 800fcc2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fcc6:	d1f3      	bne.n	800fcb0 <rmw_uxrce_init_publisher_memory+0x20>
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop

0800fcd0 <rmw_uxrce_init_subscription_memory>:
 800fcd0:	b1e2      	cbz	r2, 800fd0c <rmw_uxrce_init_subscription_memory+0x3c>
 800fcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd6:	7b05      	ldrb	r5, [r0, #12]
 800fcd8:	4606      	mov	r6, r0
 800fcda:	b9ad      	cbnz	r5, 800fd08 <rmw_uxrce_init_subscription_memory+0x38>
 800fcdc:	23d8      	movs	r3, #216	@ 0xd8
 800fcde:	e9c0 5500 	strd	r5, r5, [r0]
 800fce2:	6083      	str	r3, [r0, #8]
 800fce4:	f240 1301 	movw	r3, #257	@ 0x101
 800fce8:	4617      	mov	r7, r2
 800fcea:	8183      	strh	r3, [r0, #12]
 800fcec:	460c      	mov	r4, r1
 800fcee:	46a8      	mov	r8, r5
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	f004 fa5f 	bl	80141b8 <put_memory>
 800fcfa:	42af      	cmp	r7, r5
 800fcfc:	60a4      	str	r4, [r4, #8]
 800fcfe:	f884 800c 	strb.w	r8, [r4, #12]
 800fd02:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fd06:	d1f3      	bne.n	800fcf0 <rmw_uxrce_init_subscription_memory+0x20>
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop

0800fd10 <rmw_uxrce_init_node_memory>:
 800fd10:	b1e2      	cbz	r2, 800fd4c <rmw_uxrce_init_node_memory+0x3c>
 800fd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd16:	7b05      	ldrb	r5, [r0, #12]
 800fd18:	4606      	mov	r6, r0
 800fd1a:	b9ad      	cbnz	r5, 800fd48 <rmw_uxrce_init_node_memory+0x38>
 800fd1c:	23a4      	movs	r3, #164	@ 0xa4
 800fd1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fd22:	6083      	str	r3, [r0, #8]
 800fd24:	f240 1301 	movw	r3, #257	@ 0x101
 800fd28:	4617      	mov	r7, r2
 800fd2a:	8183      	strh	r3, [r0, #12]
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	46a8      	mov	r8, r5
 800fd30:	4621      	mov	r1, r4
 800fd32:	4630      	mov	r0, r6
 800fd34:	3501      	adds	r5, #1
 800fd36:	f004 fa3f 	bl	80141b8 <put_memory>
 800fd3a:	42af      	cmp	r7, r5
 800fd3c:	60a4      	str	r4, [r4, #8]
 800fd3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fd42:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fd46:	d1f3      	bne.n	800fd30 <rmw_uxrce_init_node_memory+0x20>
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop

0800fd50 <rmw_uxrce_init_session_memory>:
 800fd50:	b1ea      	cbz	r2, 800fd8e <rmw_uxrce_init_session_memory+0x3e>
 800fd52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd56:	7b05      	ldrb	r5, [r0, #12]
 800fd58:	4606      	mov	r6, r0
 800fd5a:	b9b5      	cbnz	r5, 800fd8a <rmw_uxrce_init_session_memory+0x3a>
 800fd5c:	e9c0 5500 	strd	r5, r5, [r0]
 800fd60:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fd64:	f240 1301 	movw	r3, #257	@ 0x101
 800fd68:	4617      	mov	r7, r2
 800fd6a:	f8c0 8008 	str.w	r8, [r0, #8]
 800fd6e:	460c      	mov	r4, r1
 800fd70:	8183      	strh	r3, [r0, #12]
 800fd72:	46a9      	mov	r9, r5
 800fd74:	4621      	mov	r1, r4
 800fd76:	4630      	mov	r0, r6
 800fd78:	3501      	adds	r5, #1
 800fd7a:	f004 fa1d 	bl	80141b8 <put_memory>
 800fd7e:	42af      	cmp	r7, r5
 800fd80:	60a4      	str	r4, [r4, #8]
 800fd82:	f884 900c 	strb.w	r9, [r4, #12]
 800fd86:	4444      	add	r4, r8
 800fd88:	d1f4      	bne.n	800fd74 <rmw_uxrce_init_session_memory+0x24>
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	4770      	bx	lr

0800fd90 <rmw_uxrce_init_topic_memory>:
 800fd90:	b1e2      	cbz	r2, 800fdcc <rmw_uxrce_init_topic_memory+0x3c>
 800fd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	7b05      	ldrb	r5, [r0, #12]
 800fd98:	4606      	mov	r6, r0
 800fd9a:	b9ad      	cbnz	r5, 800fdc8 <rmw_uxrce_init_topic_memory+0x38>
 800fd9c:	231c      	movs	r3, #28
 800fd9e:	e9c0 5500 	strd	r5, r5, [r0]
 800fda2:	6083      	str	r3, [r0, #8]
 800fda4:	f240 1301 	movw	r3, #257	@ 0x101
 800fda8:	4617      	mov	r7, r2
 800fdaa:	8183      	strh	r3, [r0, #12]
 800fdac:	460c      	mov	r4, r1
 800fdae:	46a8      	mov	r8, r5
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	3501      	adds	r5, #1
 800fdb6:	f004 f9ff 	bl	80141b8 <put_memory>
 800fdba:	42af      	cmp	r7, r5
 800fdbc:	60a4      	str	r4, [r4, #8]
 800fdbe:	f884 800c 	strb.w	r8, [r4, #12]
 800fdc2:	f104 041c 	add.w	r4, r4, #28
 800fdc6:	d1f3      	bne.n	800fdb0 <rmw_uxrce_init_topic_memory+0x20>
 800fdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop

0800fdd0 <rmw_uxrce_init_static_input_buffer_memory>:
 800fdd0:	b1ea      	cbz	r2, 800fe0e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fdd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd6:	7b05      	ldrb	r5, [r0, #12]
 800fdd8:	4606      	mov	r6, r0
 800fdda:	b9b5      	cbnz	r5, 800fe0a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fddc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fde0:	e9c0 5500 	strd	r5, r5, [r0]
 800fde4:	6083      	str	r3, [r0, #8]
 800fde6:	f240 1301 	movw	r3, #257	@ 0x101
 800fdea:	4617      	mov	r7, r2
 800fdec:	8183      	strh	r3, [r0, #12]
 800fdee:	460c      	mov	r4, r1
 800fdf0:	46a8      	mov	r8, r5
 800fdf2:	4621      	mov	r1, r4
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	3501      	adds	r5, #1
 800fdf8:	f004 f9de 	bl	80141b8 <put_memory>
 800fdfc:	42af      	cmp	r7, r5
 800fdfe:	60a4      	str	r4, [r4, #8]
 800fe00:	f884 800c 	strb.w	r8, [r4, #12]
 800fe04:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fe08:	d1f3      	bne.n	800fdf2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fe0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0e:	4770      	bx	lr

0800fe10 <rmw_uxrce_init_init_options_impl_memory>:
 800fe10:	b1e2      	cbz	r2, 800fe4c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800fe12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe16:	7b05      	ldrb	r5, [r0, #12]
 800fe18:	4606      	mov	r6, r0
 800fe1a:	b9ad      	cbnz	r5, 800fe48 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fe1c:	232c      	movs	r3, #44	@ 0x2c
 800fe1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fe22:	6083      	str	r3, [r0, #8]
 800fe24:	f240 1301 	movw	r3, #257	@ 0x101
 800fe28:	4617      	mov	r7, r2
 800fe2a:	8183      	strh	r3, [r0, #12]
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	46a8      	mov	r8, r5
 800fe30:	4621      	mov	r1, r4
 800fe32:	4630      	mov	r0, r6
 800fe34:	3501      	adds	r5, #1
 800fe36:	f004 f9bf 	bl	80141b8 <put_memory>
 800fe3a:	42af      	cmp	r7, r5
 800fe3c:	60a4      	str	r4, [r4, #8]
 800fe3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fe42:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fe46:	d1f3      	bne.n	800fe30 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop

0800fe50 <rmw_uxrce_init_wait_set_memory>:
 800fe50:	b1e2      	cbz	r2, 800fe8c <rmw_uxrce_init_wait_set_memory+0x3c>
 800fe52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe56:	7b05      	ldrb	r5, [r0, #12]
 800fe58:	4606      	mov	r6, r0
 800fe5a:	b9ad      	cbnz	r5, 800fe88 <rmw_uxrce_init_wait_set_memory+0x38>
 800fe5c:	231c      	movs	r3, #28
 800fe5e:	e9c0 5500 	strd	r5, r5, [r0]
 800fe62:	6083      	str	r3, [r0, #8]
 800fe64:	f240 1301 	movw	r3, #257	@ 0x101
 800fe68:	4617      	mov	r7, r2
 800fe6a:	8183      	strh	r3, [r0, #12]
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	46a8      	mov	r8, r5
 800fe70:	4621      	mov	r1, r4
 800fe72:	4630      	mov	r0, r6
 800fe74:	3501      	adds	r5, #1
 800fe76:	f004 f99f 	bl	80141b8 <put_memory>
 800fe7a:	42af      	cmp	r7, r5
 800fe7c:	60a4      	str	r4, [r4, #8]
 800fe7e:	f884 800c 	strb.w	r8, [r4, #12]
 800fe82:	f104 041c 	add.w	r4, r4, #28
 800fe86:	d1f3      	bne.n	800fe70 <rmw_uxrce_init_wait_set_memory+0x20>
 800fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop

0800fe90 <rmw_uxrce_init_guard_condition_memory>:
 800fe90:	b1e2      	cbz	r2, 800fecc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fe92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe96:	7b05      	ldrb	r5, [r0, #12]
 800fe98:	4606      	mov	r6, r0
 800fe9a:	b9ad      	cbnz	r5, 800fec8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800fe9c:	2320      	movs	r3, #32
 800fe9e:	e9c0 5500 	strd	r5, r5, [r0]
 800fea2:	6083      	str	r3, [r0, #8]
 800fea4:	f240 1301 	movw	r3, #257	@ 0x101
 800fea8:	4617      	mov	r7, r2
 800feaa:	8183      	strh	r3, [r0, #12]
 800feac:	460c      	mov	r4, r1
 800feae:	46a8      	mov	r8, r5
 800feb0:	4621      	mov	r1, r4
 800feb2:	4630      	mov	r0, r6
 800feb4:	3501      	adds	r5, #1
 800feb6:	f004 f97f 	bl	80141b8 <put_memory>
 800feba:	42af      	cmp	r7, r5
 800febc:	60a4      	str	r4, [r4, #8]
 800febe:	f884 800c 	strb.w	r8, [r4, #12]
 800fec2:	f104 0420 	add.w	r4, r4, #32
 800fec6:	d1f3      	bne.n	800feb0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop

0800fed0 <rmw_uxrce_fini_session_memory>:
 800fed0:	4601      	mov	r1, r0
 800fed2:	4801      	ldr	r0, [pc, #4]	@ (800fed8 <rmw_uxrce_fini_session_memory+0x8>)
 800fed4:	f004 b970 	b.w	80141b8 <put_memory>
 800fed8:	2000def4 	.word	0x2000def4

0800fedc <rmw_uxrce_fini_node_memory>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4604      	mov	r4, r0
 800fee0:	6800      	ldr	r0, [r0, #0]
 800fee2:	b128      	cbz	r0, 800fef0 <rmw_uxrce_fini_node_memory+0x14>
 800fee4:	4b07      	ldr	r3, [pc, #28]	@ (800ff04 <rmw_uxrce_fini_node_memory+0x28>)
 800fee6:	6819      	ldr	r1, [r3, #0]
 800fee8:	f7f0 f97a 	bl	80001e0 <strcmp>
 800feec:	b940      	cbnz	r0, 800ff00 <rmw_uxrce_fini_node_memory+0x24>
 800feee:	6020      	str	r0, [r4, #0]
 800fef0:	6861      	ldr	r1, [r4, #4]
 800fef2:	b129      	cbz	r1, 800ff00 <rmw_uxrce_fini_node_memory+0x24>
 800fef4:	2500      	movs	r5, #0
 800fef6:	4804      	ldr	r0, [pc, #16]	@ (800ff08 <rmw_uxrce_fini_node_memory+0x2c>)
 800fef8:	610d      	str	r5, [r1, #16]
 800fefa:	f004 f95d 	bl	80141b8 <put_memory>
 800fefe:	6065      	str	r5, [r4, #4]
 800ff00:	bd38      	pop	{r3, r4, r5, pc}
 800ff02:	bf00      	nop
 800ff04:	080173e0 	.word	0x080173e0
 800ff08:	2000dec4 	.word	0x2000dec4

0800ff0c <rmw_uxrce_fini_publisher_memory>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	4604      	mov	r4, r0
 800ff10:	6800      	ldr	r0, [r0, #0]
 800ff12:	b128      	cbz	r0, 800ff20 <rmw_uxrce_fini_publisher_memory+0x14>
 800ff14:	4b06      	ldr	r3, [pc, #24]	@ (800ff30 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ff16:	6819      	ldr	r1, [r3, #0]
 800ff18:	f7f0 f962 	bl	80001e0 <strcmp>
 800ff1c:	b938      	cbnz	r0, 800ff2e <rmw_uxrce_fini_publisher_memory+0x22>
 800ff1e:	6020      	str	r0, [r4, #0]
 800ff20:	6861      	ldr	r1, [r4, #4]
 800ff22:	b121      	cbz	r1, 800ff2e <rmw_uxrce_fini_publisher_memory+0x22>
 800ff24:	4803      	ldr	r0, [pc, #12]	@ (800ff34 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ff26:	f004 f947 	bl	80141b8 <put_memory>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	6063      	str	r3, [r4, #4]
 800ff2e:	bd10      	pop	{r4, pc}
 800ff30:	080173e0 	.word	0x080173e0
 800ff34:	2000ded4 	.word	0x2000ded4

0800ff38 <rmw_uxrce_fini_subscription_memory>:
 800ff38:	b510      	push	{r4, lr}
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	b128      	cbz	r0, 800ff4c <rmw_uxrce_fini_subscription_memory+0x14>
 800ff40:	4b06      	ldr	r3, [pc, #24]	@ (800ff5c <rmw_uxrce_fini_subscription_memory+0x24>)
 800ff42:	6819      	ldr	r1, [r3, #0]
 800ff44:	f7f0 f94c 	bl	80001e0 <strcmp>
 800ff48:	b938      	cbnz	r0, 800ff5a <rmw_uxrce_fini_subscription_memory+0x22>
 800ff4a:	6020      	str	r0, [r4, #0]
 800ff4c:	6861      	ldr	r1, [r4, #4]
 800ff4e:	b121      	cbz	r1, 800ff5a <rmw_uxrce_fini_subscription_memory+0x22>
 800ff50:	4803      	ldr	r0, [pc, #12]	@ (800ff60 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ff52:	f004 f931 	bl	80141b8 <put_memory>
 800ff56:	2300      	movs	r3, #0
 800ff58:	6063      	str	r3, [r4, #4]
 800ff5a:	bd10      	pop	{r4, pc}
 800ff5c:	080173e0 	.word	0x080173e0
 800ff60:	2000df14 	.word	0x2000df14

0800ff64 <rmw_uxrce_fini_service_memory>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4604      	mov	r4, r0
 800ff68:	6800      	ldr	r0, [r0, #0]
 800ff6a:	b128      	cbz	r0, 800ff78 <rmw_uxrce_fini_service_memory+0x14>
 800ff6c:	4b06      	ldr	r3, [pc, #24]	@ (800ff88 <rmw_uxrce_fini_service_memory+0x24>)
 800ff6e:	6819      	ldr	r1, [r3, #0]
 800ff70:	f7f0 f936 	bl	80001e0 <strcmp>
 800ff74:	b938      	cbnz	r0, 800ff86 <rmw_uxrce_fini_service_memory+0x22>
 800ff76:	6020      	str	r0, [r4, #0]
 800ff78:	6861      	ldr	r1, [r4, #4]
 800ff7a:	b121      	cbz	r1, 800ff86 <rmw_uxrce_fini_service_memory+0x22>
 800ff7c:	4803      	ldr	r0, [pc, #12]	@ (800ff8c <rmw_uxrce_fini_service_memory+0x28>)
 800ff7e:	f004 f91b 	bl	80141b8 <put_memory>
 800ff82:	2300      	movs	r3, #0
 800ff84:	6063      	str	r3, [r4, #4]
 800ff86:	bd10      	pop	{r4, pc}
 800ff88:	080173e0 	.word	0x080173e0
 800ff8c:	2000dee4 	.word	0x2000dee4

0800ff90 <rmw_uxrce_fini_client_memory>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	4604      	mov	r4, r0
 800ff94:	6800      	ldr	r0, [r0, #0]
 800ff96:	b128      	cbz	r0, 800ffa4 <rmw_uxrce_fini_client_memory+0x14>
 800ff98:	4b06      	ldr	r3, [pc, #24]	@ (800ffb4 <rmw_uxrce_fini_client_memory+0x24>)
 800ff9a:	6819      	ldr	r1, [r3, #0]
 800ff9c:	f7f0 f920 	bl	80001e0 <strcmp>
 800ffa0:	b938      	cbnz	r0, 800ffb2 <rmw_uxrce_fini_client_memory+0x22>
 800ffa2:	6020      	str	r0, [r4, #0]
 800ffa4:	6861      	ldr	r1, [r4, #4]
 800ffa6:	b121      	cbz	r1, 800ffb2 <rmw_uxrce_fini_client_memory+0x22>
 800ffa8:	4803      	ldr	r0, [pc, #12]	@ (800ffb8 <rmw_uxrce_fini_client_memory+0x28>)
 800ffaa:	f004 f905 	bl	80141b8 <put_memory>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	6063      	str	r3, [r4, #4]
 800ffb2:	bd10      	pop	{r4, pc}
 800ffb4:	080173e0 	.word	0x080173e0
 800ffb8:	200095f8 	.word	0x200095f8

0800ffbc <rmw_uxrce_fini_topic_memory>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	4803      	ldr	r0, [pc, #12]	@ (800ffd0 <rmw_uxrce_fini_topic_memory+0x14>)
 800ffc4:	f004 f8f8 	bl	80141b8 <put_memory>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	61a3      	str	r3, [r4, #24]
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop
 800ffd0:	2000df24 	.word	0x2000df24

0800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ffd4:	b082      	sub	sp, #8
 800ffd6:	b530      	push	{r4, r5, lr}
 800ffd8:	4925      	ldr	r1, [pc, #148]	@ (8010070 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ffda:	680d      	ldr	r5, [r1, #0]
 800ffdc:	ac03      	add	r4, sp, #12
 800ffde:	e884 000c 	stmia.w	r4, {r2, r3}
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	2d00      	cmp	r5, #0
 800ffe6:	d041      	beq.n	801006c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ffe8:	462b      	mov	r3, r5
 800ffea:	2100      	movs	r1, #0
 800ffec:	689a      	ldr	r2, [r3, #8]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fff4:	4290      	cmp	r0, r2
 800fff6:	bf08      	it	eq
 800fff8:	3101      	addeq	r1, #1
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1f6      	bne.n	800ffec <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fffe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010002:	2b02      	cmp	r3, #2
 8010004:	d029      	beq.n	801005a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010006:	d907      	bls.n	8010018 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010008:	2b03      	cmp	r3, #3
 801000a:	d005      	beq.n	8010018 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801000c:	2100      	movs	r1, #0
 801000e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010012:	4608      	mov	r0, r1
 8010014:	b002      	add	sp, #8
 8010016:	4770      	bx	lr
 8010018:	b314      	cbz	r4, 8010060 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801001a:	428c      	cmp	r4, r1
 801001c:	d820      	bhi.n	8010060 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801001e:	2d00      	cmp	r5, #0
 8010020:	d0f4      	beq.n	801000c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010022:	2100      	movs	r1, #0
 8010024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010028:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801002c:	e002      	b.n	8010034 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 801002e:	686d      	ldr	r5, [r5, #4]
 8010030:	2d00      	cmp	r5, #0
 8010032:	d0ec      	beq.n	801000e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010034:	68ab      	ldr	r3, [r5, #8]
 8010036:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801003a:	4290      	cmp	r0, r2
 801003c:	d1f7      	bne.n	801002e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801003e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8010042:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010046:	4562      	cmp	r2, ip
 8010048:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801004c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010050:	daed      	bge.n	801002e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010052:	4694      	mov	ip, r2
 8010054:	461c      	mov	r4, r3
 8010056:	4629      	mov	r1, r5
 8010058:	e7e9      	b.n	801002e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801005a:	b10c      	cbz	r4, 8010060 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801005c:	428c      	cmp	r4, r1
 801005e:	d9d5      	bls.n	801000c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010064:	4802      	ldr	r0, [pc, #8]	@ (8010070 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010066:	b002      	add	sp, #8
 8010068:	f004 b896 	b.w	8014198 <get_memory>
 801006c:	4629      	mov	r1, r5
 801006e:	e7c6      	b.n	800fffe <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010070:	2000df04 	.word	0x2000df04

08010074 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010074:	4b11      	ldr	r3, [pc, #68]	@ (80100bc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	b530      	push	{r4, r5, lr}
 801007a:	b1e3      	cbz	r3, 80100b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801007c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010080:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010084:	2400      	movs	r4, #0
 8010086:	e001      	b.n	801008c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	b193      	cbz	r3, 80100b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 801008c:	689a      	ldr	r2, [r3, #8]
 801008e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010092:	4288      	cmp	r0, r1
 8010094:	d1f8      	bne.n	8010088 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010096:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801009a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 801009e:	4571      	cmp	r1, lr
 80100a0:	eb72 050c 	sbcs.w	r5, r2, ip
 80100a4:	daf0      	bge.n	8010088 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80100a6:	461c      	mov	r4, r3
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	468e      	mov	lr, r1
 80100ac:	4694      	mov	ip, r2
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1ec      	bne.n	801008c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80100b2:	4620      	mov	r0, r4
 80100b4:	bd30      	pop	{r4, r5, pc}
 80100b6:	461c      	mov	r4, r3
 80100b8:	4620      	mov	r0, r4
 80100ba:	bd30      	pop	{r4, r5, pc}
 80100bc:	2000df04 	.word	0x2000df04

080100c0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80100c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	4b3c      	ldr	r3, [pc, #240]	@ (80101b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80100c6:	ed2d 8b06 	vpush	{d8-d10}
 80100ca:	681f      	ldr	r7, [r3, #0]
 80100cc:	b08d      	sub	sp, #52	@ 0x34
 80100ce:	f004 f921 	bl	8014314 <rmw_uros_epoch_nanos>
 80100d2:	2f00      	cmp	r7, #0
 80100d4:	d05d      	beq.n	8010192 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80100d6:	46b8      	mov	r8, r7
 80100d8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80101a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80100dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80100e0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80100e4:	2b04      	cmp	r3, #4
 80100e6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80101a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80100ea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80101b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80100ee:	4681      	mov	r9, r0
 80100f0:	468a      	mov	sl, r1
 80100f2:	ac04      	add	r4, sp, #16
 80100f4:	d03f      	beq.n	8010176 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80100f6:	2b05      	cmp	r3, #5
 80100f8:	d044      	beq.n	8010184 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80100fa:	2b03      	cmp	r3, #3
 80100fc:	d03b      	beq.n	8010176 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80100fe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010102:	ed8d ab06 	vstr	d10, [sp, #24]
 8010106:	ed8d 8b08 	vstr	d8, [sp, #32]
 801010a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801010e:	ab08      	add	r3, sp, #32
 8010110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010112:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801011a:	f003 fed1 	bl	8013ec0 <rmw_time_equal>
 801011e:	b118      	cbz	r0, 8010128 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010120:	ed8d 9b04 	vstr	d9, [sp, #16]
 8010124:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801012c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010130:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8010134:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010138:	f003 ff16 	bl	8013f68 <rmw_time_total_nsec>
 801013c:	1830      	adds	r0, r6, r0
 801013e:	eb47 0101 	adc.w	r1, r7, r1
 8010142:	4548      	cmp	r0, r9
 8010144:	eb71 030a 	sbcs.w	r3, r1, sl
 8010148:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801014c:	db05      	blt.n	801015a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801014e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010152:	4591      	cmp	r9, r2
 8010154:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010158:	da03      	bge.n	8010162 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801015a:	4817      	ldr	r0, [pc, #92]	@ (80101b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801015c:	4641      	mov	r1, r8
 801015e:	f004 f82b 	bl	80141b8 <put_memory>
 8010162:	f1bb 0f00 	cmp.w	fp, #0
 8010166:	d014      	beq.n	8010192 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010168:	46d8      	mov	r8, fp
 801016a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801016e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010172:	2b04      	cmp	r3, #4
 8010174:	d1bf      	bne.n	80100f6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010176:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801017a:	3340      	adds	r3, #64	@ 0x40
 801017c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801017e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010182:	e7c0      	b.n	8010106 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010184:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010188:	3348      	adds	r3, #72	@ 0x48
 801018a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801018c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010190:	e7b9      	b.n	8010106 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010192:	b00d      	add	sp, #52	@ 0x34
 8010194:	ecbd 8b06 	vpop	{d8-d10}
 8010198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019c:	f3af 8000 	nop.w
	...
 80101a8:	00000001 	.word	0x00000001
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0000001e 	.word	0x0000001e
 80101b4:	00000000 	.word	0x00000000
 80101b8:	2000df04 	.word	0x2000df04

080101bc <run_xrce_session>:
 80101bc:	b510      	push	{r4, lr}
 80101be:	788c      	ldrb	r4, [r1, #2]
 80101c0:	b086      	sub	sp, #24
 80101c2:	2c01      	cmp	r4, #1
 80101c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80101c8:	d00c      	beq.n	80101e4 <run_xrce_session+0x28>
 80101ca:	4619      	mov	r1, r3
 80101cc:	2301      	movs	r3, #1
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	f10d 020e 	add.w	r2, sp, #14
 80101d4:	f10d 0317 	add.w	r3, sp, #23
 80101d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101dc:	f001 f946 	bl	801146c <uxr_run_session_until_all_status>
 80101e0:	b006      	add	sp, #24
 80101e2:	bd10      	pop	{r4, pc}
 80101e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101e8:	f000 fd5a 	bl	8010ca0 <uxr_flash_output_streams>
 80101ec:	4620      	mov	r0, r4
 80101ee:	b006      	add	sp, #24
 80101f0:	bd10      	pop	{r4, pc}
 80101f2:	bf00      	nop

080101f4 <convert_qos_profile>:
 80101f4:	7a4a      	ldrb	r2, [r1, #9]
 80101f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80101fa:	2a02      	cmp	r2, #2
 80101fc:	bf18      	it	ne
 80101fe:	2200      	movne	r2, #0
 8010200:	7002      	strb	r2, [r0, #0]
 8010202:	780a      	ldrb	r2, [r1, #0]
 8010204:	8889      	ldrh	r1, [r1, #4]
 8010206:	8081      	strh	r1, [r0, #4]
 8010208:	f1ac 0c02 	sub.w	ip, ip, #2
 801020c:	f1a2 0202 	sub.w	r2, r2, #2
 8010210:	fabc fc8c 	clz	ip, ip
 8010214:	fab2 f282 	clz	r2, r2
 8010218:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801021c:	0952      	lsrs	r2, r2, #5
 801021e:	f880 c001 	strb.w	ip, [r0, #1]
 8010222:	7082      	strb	r2, [r0, #2]
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop

08010228 <generate_type_name>:
 8010228:	b530      	push	{r4, r5, lr}
 801022a:	2300      	movs	r3, #0
 801022c:	700b      	strb	r3, [r1, #0]
 801022e:	6803      	ldr	r3, [r0, #0]
 8010230:	b087      	sub	sp, #28
 8010232:	4614      	mov	r4, r2
 8010234:	b1d3      	cbz	r3, 801026c <generate_type_name+0x44>
 8010236:	4a0f      	ldr	r2, [pc, #60]	@ (8010274 <generate_type_name+0x4c>)
 8010238:	4615      	mov	r5, r2
 801023a:	9203      	str	r2, [sp, #12]
 801023c:	9500      	str	r5, [sp, #0]
 801023e:	6842      	ldr	r2, [r0, #4]
 8010240:	480d      	ldr	r0, [pc, #52]	@ (8010278 <generate_type_name+0x50>)
 8010242:	9001      	str	r0, [sp, #4]
 8010244:	4608      	mov	r0, r1
 8010246:	490d      	ldr	r1, [pc, #52]	@ (801027c <generate_type_name+0x54>)
 8010248:	9204      	str	r2, [sp, #16]
 801024a:	9105      	str	r1, [sp, #20]
 801024c:	9102      	str	r1, [sp, #8]
 801024e:	4a0c      	ldr	r2, [pc, #48]	@ (8010280 <generate_type_name+0x58>)
 8010250:	4621      	mov	r1, r4
 8010252:	f005 fa4f 	bl	80156f4 <sniprintf>
 8010256:	2800      	cmp	r0, #0
 8010258:	db05      	blt.n	8010266 <generate_type_name+0x3e>
 801025a:	4284      	cmp	r4, r0
 801025c:	bfd4      	ite	le
 801025e:	2000      	movle	r0, #0
 8010260:	2001      	movgt	r0, #1
 8010262:	b007      	add	sp, #28
 8010264:	bd30      	pop	{r4, r5, pc}
 8010266:	2000      	movs	r0, #0
 8010268:	b007      	add	sp, #28
 801026a:	bd30      	pop	{r4, r5, pc}
 801026c:	4b05      	ldr	r3, [pc, #20]	@ (8010284 <generate_type_name+0x5c>)
 801026e:	4a01      	ldr	r2, [pc, #4]	@ (8010274 <generate_type_name+0x4c>)
 8010270:	461d      	mov	r5, r3
 8010272:	e7e2      	b.n	801023a <generate_type_name+0x12>
 8010274:	08017154 	.word	0x08017154
 8010278:	0801716c 	.word	0x0801716c
 801027c:	08017168 	.word	0x08017168
 8010280:	08017158 	.word	0x08017158
 8010284:	08016f44 	.word	0x08016f44

08010288 <generate_topic_name>:
 8010288:	b510      	push	{r4, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	4614      	mov	r4, r2
 801028e:	9000      	str	r0, [sp, #0]
 8010290:	4b08      	ldr	r3, [pc, #32]	@ (80102b4 <generate_topic_name+0x2c>)
 8010292:	4a09      	ldr	r2, [pc, #36]	@ (80102b8 <generate_topic_name+0x30>)
 8010294:	4608      	mov	r0, r1
 8010296:	4621      	mov	r1, r4
 8010298:	f005 fa2c 	bl	80156f4 <sniprintf>
 801029c:	2800      	cmp	r0, #0
 801029e:	db05      	blt.n	80102ac <generate_topic_name+0x24>
 80102a0:	4284      	cmp	r4, r0
 80102a2:	bfd4      	ite	le
 80102a4:	2000      	movle	r0, #0
 80102a6:	2001      	movgt	r0, #1
 80102a8:	b002      	add	sp, #8
 80102aa:	bd10      	pop	{r4, pc}
 80102ac:	2000      	movs	r0, #0
 80102ae:	b002      	add	sp, #8
 80102b0:	bd10      	pop	{r4, pc}
 80102b2:	bf00      	nop
 80102b4:	08017170 	.word	0x08017170
 80102b8:	08016cb0 	.word	0x08016cb0

080102bc <is_uxrce_rmw_identifier_valid>:
 80102bc:	b510      	push	{r4, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	b140      	cbz	r0, 80102d4 <is_uxrce_rmw_identifier_valid+0x18>
 80102c2:	f7fe fbc5 	bl	800ea50 <rmw_get_implementation_identifier>
 80102c6:	4601      	mov	r1, r0
 80102c8:	4620      	mov	r0, r4
 80102ca:	f7ef ff89 	bl	80001e0 <strcmp>
 80102ce:	fab0 f080 	clz	r0, r0
 80102d2:	0940      	lsrs	r0, r0, #5
 80102d4:	bd10      	pop	{r4, pc}
 80102d6:	bf00      	nop

080102d8 <get_message_typesupport_handle>:
 80102d8:	6883      	ldr	r3, [r0, #8]
 80102da:	4718      	bx	r3

080102dc <get_message_typesupport_handle_function>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	4604      	mov	r4, r0
 80102e0:	6800      	ldr	r0, [r0, #0]
 80102e2:	f7ef ff7d 	bl	80001e0 <strcmp>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	bf0c      	ite	eq
 80102ea:	4620      	moveq	r0, r4
 80102ec:	2000      	movne	r0, #0
 80102ee:	bd10      	pop	{r4, pc}

080102f0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f4:	6805      	ldr	r5, [r0, #0]
 80102f6:	4604      	mov	r4, r0
 80102f8:	4628      	mov	r0, r5
 80102fa:	460e      	mov	r6, r1
 80102fc:	f7ef ff70 	bl	80001e0 <strcmp>
 8010300:	b1c8      	cbz	r0, 8010336 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010302:	4b11      	ldr	r3, [pc, #68]	@ (8010348 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	429d      	cmp	r5, r3
 8010308:	d112      	bne.n	8010330 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801030a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801030e:	f8d8 4000 	ldr.w	r4, [r8]
 8010312:	b16c      	cbz	r4, 8010330 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010314:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010318:	2700      	movs	r7, #0
 801031a:	3d04      	subs	r5, #4
 801031c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010320:	4631      	mov	r1, r6
 8010322:	f7ef ff5d 	bl	80001e0 <strcmp>
 8010326:	00bb      	lsls	r3, r7, #2
 8010328:	b140      	cbz	r0, 801033c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801032a:	3701      	adds	r7, #1
 801032c:	42bc      	cmp	r4, r7
 801032e:	d1f5      	bne.n	801031c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010330:	2000      	movs	r0, #0
 8010332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010336:	4620      	mov	r0, r4
 8010338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010344:	58d3      	ldr	r3, [r2, r3]
 8010346:	4718      	bx	r3
 8010348:	200004d0 	.word	0x200004d0

0801034c <rover_msgs__msg__ControllerMsg__init>:
 801034c:	3800      	subs	r0, #0
 801034e:	bf18      	it	ne
 8010350:	2001      	movne	r0, #1
 8010352:	4770      	bx	lr

08010354 <rover_msgs__msg__ControllerMsg__fini>:
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop

08010358 <rover_msgs__msg__EncoderMsg__init>:
 8010358:	3800      	subs	r0, #0
 801035a:	bf18      	it	ne
 801035c:	2001      	movne	r0, #1
 801035e:	4770      	bx	lr

08010360 <rover_msgs__msg__EncoderMsg__fini>:
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop

08010364 <uxr_buffer_delete_entity>:
 8010364:	b510      	push	{r4, lr}
 8010366:	2300      	movs	r3, #0
 8010368:	b08e      	sub	sp, #56	@ 0x38
 801036a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801036e:	2303      	movs	r3, #3
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	2204      	movs	r2, #4
 8010374:	ab06      	add	r3, sp, #24
 8010376:	4604      	mov	r4, r0
 8010378:	9103      	str	r1, [sp, #12]
 801037a:	f001 fa9f 	bl	80118bc <uxr_prepare_stream_to_write_submessage>
 801037e:	b918      	cbnz	r0, 8010388 <uxr_buffer_delete_entity+0x24>
 8010380:	4604      	mov	r4, r0
 8010382:	4620      	mov	r0, r4
 8010384:	b00e      	add	sp, #56	@ 0x38
 8010386:	bd10      	pop	{r4, pc}
 8010388:	9902      	ldr	r1, [sp, #8]
 801038a:	aa05      	add	r2, sp, #20
 801038c:	4620      	mov	r0, r4
 801038e:	f001 fbcb 	bl	8011b28 <uxr_init_base_object_request>
 8010392:	a905      	add	r1, sp, #20
 8010394:	4604      	mov	r4, r0
 8010396:	a806      	add	r0, sp, #24
 8010398:	f003 f87e 	bl	8013498 <uxr_serialize_DELETE_Payload>
 801039c:	4620      	mov	r0, r4
 801039e:	b00e      	add	sp, #56	@ 0x38
 80103a0:	bd10      	pop	{r4, pc}
 80103a2:	bf00      	nop

080103a4 <uxr_common_create_entity>:
 80103a4:	b510      	push	{r4, lr}
 80103a6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80103aa:	b08c      	sub	sp, #48	@ 0x30
 80103ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80103b0:	f1bc 0f01 	cmp.w	ip, #1
 80103b4:	bf0c      	ite	eq
 80103b6:	f003 0201 	andeq.w	r2, r3, #1
 80103ba:	2200      	movne	r2, #0
 80103bc:	330e      	adds	r3, #14
 80103be:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80103c2:	9101      	str	r1, [sp, #4]
 80103c4:	441a      	add	r2, r3
 80103c6:	2301      	movs	r3, #1
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	9903      	ldr	r1, [sp, #12]
 80103cc:	ab04      	add	r3, sp, #16
 80103ce:	b292      	uxth	r2, r2
 80103d0:	4604      	mov	r4, r0
 80103d2:	f001 fa73 	bl	80118bc <uxr_prepare_stream_to_write_submessage>
 80103d6:	b918      	cbnz	r0, 80103e0 <uxr_common_create_entity+0x3c>
 80103d8:	4604      	mov	r4, r0
 80103da:	4620      	mov	r0, r4
 80103dc:	b00c      	add	sp, #48	@ 0x30
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	9902      	ldr	r1, [sp, #8]
 80103e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80103e4:	4620      	mov	r0, r4
 80103e6:	f001 fb9f 	bl	8011b28 <uxr_init_base_object_request>
 80103ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80103ec:	4604      	mov	r4, r0
 80103ee:	a804      	add	r0, sp, #16
 80103f0:	f002 ffae 	bl	8013350 <uxr_serialize_CREATE_Payload>
 80103f4:	4620      	mov	r0, r4
 80103f6:	b00c      	add	sp, #48	@ 0x30
 80103f8:	bd10      	pop	{r4, pc}
 80103fa:	bf00      	nop

080103fc <uxr_buffer_create_participant_bin>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010402:	ac11      	add	r4, sp, #68	@ 0x44
 8010404:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010408:	2303      	movs	r3, #3
 801040a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801040e:	7223      	strb	r3, [r4, #8]
 8010410:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010412:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010416:	2201      	movs	r2, #1
 8010418:	2100      	movs	r1, #0
 801041a:	4605      	mov	r5, r0
 801041c:	7122      	strb	r2, [r4, #4]
 801041e:	f88d 1014 	strb.w	r1, [sp, #20]
 8010422:	b1cb      	cbz	r3, 8010458 <uxr_buffer_create_participant_bin+0x5c>
 8010424:	f88d 201c 	strb.w	r2, [sp, #28]
 8010428:	9308      	str	r3, [sp, #32]
 801042a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801042e:	a915      	add	r1, sp, #84	@ 0x54
 8010430:	a809      	add	r0, sp, #36	@ 0x24
 8010432:	f7fb f98f 	bl	800b754 <ucdr_init_buffer>
 8010436:	a905      	add	r1, sp, #20
 8010438:	a809      	add	r0, sp, #36	@ 0x24
 801043a:	f002 fc47 	bl	8012ccc <uxr_serialize_OBJK_DomainParticipant_Binary>
 801043e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010440:	9600      	str	r6, [sp, #0]
 8010442:	9401      	str	r4, [sp, #4]
 8010444:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010448:	60e3      	str	r3, [r4, #12]
 801044a:	4628      	mov	r0, r5
 801044c:	b29b      	uxth	r3, r3
 801044e:	f7ff ffa9 	bl	80103a4 <uxr_common_create_entity>
 8010452:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010456:	bd70      	pop	{r4, r5, r6, pc}
 8010458:	f88d 301c 	strb.w	r3, [sp, #28]
 801045c:	e7e5      	b.n	801042a <uxr_buffer_create_participant_bin+0x2e>
 801045e:	bf00      	nop

08010460 <uxr_buffer_create_topic_bin>:
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010466:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801046a:	9105      	str	r1, [sp, #20]
 801046c:	4605      	mov	r5, r0
 801046e:	a997      	add	r1, sp, #604	@ 0x25c
 8010470:	4618      	mov	r0, r3
 8010472:	2302      	movs	r3, #2
 8010474:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010478:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801047c:	f000 f9b2 	bl	80107e4 <uxr_object_id_to_raw>
 8010480:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010482:	9306      	str	r3, [sp, #24]
 8010484:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010486:	930a      	str	r3, [sp, #40]	@ 0x28
 8010488:	2303      	movs	r3, #3
 801048a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801048e:	2301      	movs	r3, #1
 8010490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010494:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010498:	a917      	add	r1, sp, #92	@ 0x5c
 801049a:	2300      	movs	r3, #0
 801049c:	a80b      	add	r0, sp, #44	@ 0x2c
 801049e:	f88d 301c 	strb.w	r3, [sp, #28]
 80104a2:	f7fb f957 	bl	800b754 <ucdr_init_buffer>
 80104a6:	a906      	add	r1, sp, #24
 80104a8:	a80b      	add	r0, sp, #44	@ 0x2c
 80104aa:	f002 fc31 	bl	8012d10 <uxr_serialize_OBJK_Topic_Binary>
 80104ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80104b2:	ac13      	add	r4, sp, #76	@ 0x4c
 80104b4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80104b8:	9600      	str	r6, [sp, #0]
 80104ba:	9401      	str	r4, [sp, #4]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	4628      	mov	r0, r5
 80104c0:	f7ff ff70 	bl	80103a4 <uxr_common_create_entity>
 80104c4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80104c8:	bd70      	pop	{r4, r5, r6, pc}
 80104ca:	bf00      	nop

080104cc <uxr_buffer_create_subscriber_bin>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80104d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80104d6:	9105      	str	r1, [sp, #20]
 80104d8:	4605      	mov	r5, r0
 80104da:	a992      	add	r1, sp, #584	@ 0x248
 80104dc:	4618      	mov	r0, r3
 80104de:	2304      	movs	r3, #4
 80104e0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80104e4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80104e8:	f000 f97c 	bl	80107e4 <uxr_object_id_to_raw>
 80104ec:	2300      	movs	r3, #0
 80104ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104f2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80104f6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80104fa:	a912      	add	r1, sp, #72	@ 0x48
 80104fc:	2303      	movs	r3, #3
 80104fe:	a806      	add	r0, sp, #24
 8010500:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010504:	f7fb f926 	bl	800b754 <ucdr_init_buffer>
 8010508:	a993      	add	r1, sp, #588	@ 0x24c
 801050a:	a806      	add	r0, sp, #24
 801050c:	f002 fcb4 	bl	8012e78 <uxr_serialize_OBJK_Subscriber_Binary>
 8010510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010512:	9311      	str	r3, [sp, #68]	@ 0x44
 8010514:	ac0e      	add	r4, sp, #56	@ 0x38
 8010516:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801051a:	9600      	str	r6, [sp, #0]
 801051c:	9401      	str	r4, [sp, #4]
 801051e:	b29b      	uxth	r3, r3
 8010520:	4628      	mov	r0, r5
 8010522:	f7ff ff3f 	bl	80103a4 <uxr_common_create_entity>
 8010526:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801052a:	bd70      	pop	{r4, r5, r6, pc}

0801052c <uxr_buffer_create_datareader_bin>:
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010530:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010534:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010536:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801053a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801053e:	9105      	str	r1, [sp, #20]
 8010540:	4606      	mov	r6, r0
 8010542:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010544:	4618      	mov	r0, r3
 8010546:	2306      	movs	r3, #6
 8010548:	7123      	strb	r3, [r4, #4]
 801054a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801054e:	2703      	movs	r7, #3
 8010550:	f000 f948 	bl	80107e4 <uxr_object_id_to_raw>
 8010554:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010556:	7227      	strb	r7, [r4, #8]
 8010558:	a90e      	add	r1, sp, #56	@ 0x38
 801055a:	f000 f943 	bl	80107e4 <uxr_object_id_to_raw>
 801055e:	2300      	movs	r3, #0
 8010560:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010564:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010568:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801056c:	3d00      	subs	r5, #0
 801056e:	bf18      	it	ne
 8010570:	2501      	movne	r5, #1
 8010572:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010576:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801057a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801057e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010582:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010586:	2301      	movs	r3, #1
 8010588:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801058c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010590:	bb8a      	cbnz	r2, 80105f6 <uxr_buffer_create_datareader_bin+0xca>
 8010592:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010596:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801059a:	f04f 0c13 	mov.w	ip, #19
 801059e:	250b      	movs	r5, #11
 80105a0:	2221      	movs	r2, #33	@ 0x21
 80105a2:	2111      	movs	r1, #17
 80105a4:	2009      	movs	r0, #9
 80105a6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80105aa:	b923      	cbnz	r3, 80105b6 <uxr_buffer_create_datareader_bin+0x8a>
 80105ac:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80105b0:	4672      	mov	r2, lr
 80105b2:	4661      	mov	r1, ip
 80105b4:	4628      	mov	r0, r5
 80105b6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d025      	beq.n	801060a <uxr_buffer_create_datareader_bin+0xde>
 80105be:	2b03      	cmp	r3, #3
 80105c0:	d029      	beq.n	8010616 <uxr_buffer_create_datareader_bin+0xea>
 80105c2:	b32b      	cbz	r3, 8010610 <uxr_buffer_create_datareader_bin+0xe4>
 80105c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105c8:	a923      	add	r1, sp, #140	@ 0x8c
 80105ca:	a806      	add	r0, sp, #24
 80105cc:	f7fb f8c2 	bl	800b754 <ucdr_init_buffer>
 80105d0:	a90e      	add	r1, sp, #56	@ 0x38
 80105d2:	a806      	add	r0, sp, #24
 80105d4:	f002 fcc6 	bl	8012f64 <uxr_serialize_OBJK_DataReader_Binary>
 80105d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105da:	f8cd 8000 	str.w	r8, [sp]
 80105de:	9401      	str	r4, [sp, #4]
 80105e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80105e4:	60e3      	str	r3, [r4, #12]
 80105e6:	4630      	mov	r0, r6
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	f7ff fedb 	bl	80103a4 <uxr_common_create_entity>
 80105ee:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80105f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80105fa:	f04f 0c12 	mov.w	ip, #18
 80105fe:	250a      	movs	r5, #10
 8010600:	2220      	movs	r2, #32
 8010602:	2110      	movs	r1, #16
 8010604:	2008      	movs	r0, #8
 8010606:	2702      	movs	r7, #2
 8010608:	e7cd      	b.n	80105a6 <uxr_buffer_create_datareader_bin+0x7a>
 801060a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801060e:	e7d9      	b.n	80105c4 <uxr_buffer_create_datareader_bin+0x98>
 8010610:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010614:	e7d6      	b.n	80105c4 <uxr_buffer_create_datareader_bin+0x98>
 8010616:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801061a:	e7d3      	b.n	80105c4 <uxr_buffer_create_datareader_bin+0x98>

0801061c <get_custom_error>:
 801061c:	4b01      	ldr	r3, [pc, #4]	@ (8010624 <get_custom_error+0x8>)
 801061e:	7818      	ldrb	r0, [r3, #0]
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	2000df44 	.word	0x2000df44

08010628 <recv_custom_msg>:
 8010628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801062c:	4693      	mov	fp, r2
 801062e:	b089      	sub	sp, #36	@ 0x24
 8010630:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010634:	9305      	str	r3, [sp, #20]
 8010636:	468a      	mov	sl, r1
 8010638:	2100      	movs	r1, #0
 801063a:	4604      	mov	r4, r0
 801063c:	f88d 101e 	strb.w	r1, [sp, #30]
 8010640:	b322      	cbz	r2, 801068c <recv_custom_msg+0x64>
 8010642:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010646:	f10d 081f 	add.w	r8, sp, #31
 801064a:	af05      	add	r7, sp, #20
 801064c:	f10d 061e 	add.w	r6, sp, #30
 8010650:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010654:	e002      	b.n	801065c <recv_custom_msg+0x34>
 8010656:	9b05      	ldr	r3, [sp, #20]
 8010658:	2b00      	cmp	r3, #0
 801065a:	dd0f      	ble.n	801067c <recv_custom_msg+0x54>
 801065c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010660:	4623      	mov	r3, r4
 8010662:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010666:	e9cd 5600 	strd	r5, r6, [sp]
 801066a:	4622      	mov	r2, r4
 801066c:	4648      	mov	r0, r9
 801066e:	f001 fc89 	bl	8011f84 <uxr_read_framed_msg>
 8010672:	2800      	cmp	r0, #0
 8010674:	d0ef      	beq.n	8010656 <recv_custom_msg+0x2e>
 8010676:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801067a:	b1b3      	cbz	r3, 80106aa <recv_custom_msg+0x82>
 801067c:	4b0f      	ldr	r3, [pc, #60]	@ (80106bc <recv_custom_msg+0x94>)
 801067e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010682:	701a      	strb	r2, [r3, #0]
 8010684:	2000      	movs	r0, #0
 8010686:	b009      	add	sp, #36	@ 0x24
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068c:	f10d 021f 	add.w	r2, sp, #31
 8010690:	9200      	str	r2, [sp, #0]
 8010692:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801069a:	4601      	mov	r1, r0
 801069c:	47a8      	blx	r5
 801069e:	2800      	cmp	r0, #0
 80106a0:	d0ec      	beq.n	801067c <recv_custom_msg+0x54>
 80106a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d1e8      	bne.n	801067c <recv_custom_msg+0x54>
 80106aa:	f8cb 0000 	str.w	r0, [fp]
 80106ae:	2001      	movs	r0, #1
 80106b0:	f8ca 4000 	str.w	r4, [sl]
 80106b4:	b009      	add	sp, #36	@ 0x24
 80106b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ba:	bf00      	nop
 80106bc:	2000df44 	.word	0x2000df44

080106c0 <send_custom_msg>:
 80106c0:	b530      	push	{r4, r5, lr}
 80106c2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80106c6:	b087      	sub	sp, #28
 80106c8:	4615      	mov	r5, r2
 80106ca:	b974      	cbnz	r4, 80106ea <send_custom_msg+0x2a>
 80106cc:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80106d0:	f10d 0317 	add.w	r3, sp, #23
 80106d4:	47a0      	blx	r4
 80106d6:	b108      	cbz	r0, 80106dc <send_custom_msg+0x1c>
 80106d8:	42a8      	cmp	r0, r5
 80106da:	d015      	beq.n	8010708 <send_custom_msg+0x48>
 80106dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010710 <send_custom_msg+0x50>)
 80106de:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80106e2:	701a      	strb	r2, [r3, #0]
 80106e4:	2000      	movs	r0, #0
 80106e6:	b007      	add	sp, #28
 80106e8:	bd30      	pop	{r4, r5, pc}
 80106ea:	460b      	mov	r3, r1
 80106ec:	2200      	movs	r2, #0
 80106ee:	f10d 0117 	add.w	r1, sp, #23
 80106f2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80106f6:	4602      	mov	r2, r0
 80106f8:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80106fc:	9500      	str	r5, [sp, #0]
 80106fe:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010702:	f001 fa47 	bl	8011b94 <uxr_write_framed_msg>
 8010706:	e7e6      	b.n	80106d6 <send_custom_msg+0x16>
 8010708:	2001      	movs	r0, #1
 801070a:	b007      	add	sp, #28
 801070c:	bd30      	pop	{r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	2000df44 	.word	0x2000df44

08010714 <uxr_set_custom_transport_callbacks>:
 8010714:	b410      	push	{r4}
 8010716:	9c01      	ldr	r4, [sp, #4]
 8010718:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801071c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010720:	9b02      	ldr	r3, [sp, #8]
 8010722:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801072a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801072e:	4770      	bx	lr

08010730 <uxr_init_custom_transport>:
 8010730:	b538      	push	{r3, r4, r5, lr}
 8010732:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010736:	b303      	cbz	r3, 801077a <uxr_init_custom_transport+0x4a>
 8010738:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801073c:	4604      	mov	r4, r0
 801073e:	b1e2      	cbz	r2, 801077a <uxr_init_custom_transport+0x4a>
 8010740:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010744:	b1ca      	cbz	r2, 801077a <uxr_init_custom_transport+0x4a>
 8010746:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801074a:	b1b2      	cbz	r2, 801077a <uxr_init_custom_transport+0x4a>
 801074c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010750:	4798      	blx	r3
 8010752:	4605      	mov	r5, r0
 8010754:	b188      	cbz	r0, 801077a <uxr_init_custom_transport+0x4a>
 8010756:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801075a:	b98b      	cbnz	r3, 8010780 <uxr_init_custom_transport+0x50>
 801075c:	490b      	ldr	r1, [pc, #44]	@ (801078c <uxr_init_custom_transport+0x5c>)
 801075e:	4b0c      	ldr	r3, [pc, #48]	@ (8010790 <uxr_init_custom_transport+0x60>)
 8010760:	4a0c      	ldr	r2, [pc, #48]	@ (8010794 <uxr_init_custom_transport+0x64>)
 8010762:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801076a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801076e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010772:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010776:	4628      	mov	r0, r5
 8010778:	bd38      	pop	{r3, r4, r5, pc}
 801077a:	2500      	movs	r5, #0
 801077c:	4628      	mov	r0, r5
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	2100      	movs	r1, #0
 8010782:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010786:	f001 f9ff 	bl	8011b88 <uxr_init_framing_io>
 801078a:	e7e7      	b.n	801075c <uxr_init_custom_transport+0x2c>
 801078c:	080106c1 	.word	0x080106c1
 8010790:	08010629 	.word	0x08010629
 8010794:	0801061d 	.word	0x0801061d

08010798 <uxr_close_custom_transport>:
 8010798:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801079c:	4718      	bx	r3
 801079e:	bf00      	nop

080107a0 <uxr_object_id>:
 80107a0:	b082      	sub	sp, #8
 80107a2:	2300      	movs	r3, #0
 80107a4:	f88d 1006 	strb.w	r1, [sp, #6]
 80107a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80107ac:	f360 030f 	bfi	r3, r0, #0, #16
 80107b0:	f362 431f 	bfi	r3, r2, #16, #16
 80107b4:	4618      	mov	r0, r3
 80107b6:	b002      	add	sp, #8
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop

080107bc <uxr_object_id_from_raw>:
 80107bc:	7843      	ldrb	r3, [r0, #1]
 80107be:	7801      	ldrb	r1, [r0, #0]
 80107c0:	b082      	sub	sp, #8
 80107c2:	f003 020f 	and.w	r2, r3, #15
 80107c6:	f88d 2006 	strb.w	r2, [sp, #6]
 80107ca:	091b      	lsrs	r3, r3, #4
 80107cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80107d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80107d4:	2000      	movs	r0, #0
 80107d6:	f363 000f 	bfi	r0, r3, #0, #16
 80107da:	f362 401f 	bfi	r0, r2, #16, #16
 80107de:	b002      	add	sp, #8
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop

080107e4 <uxr_object_id_to_raw>:
 80107e4:	4602      	mov	r2, r0
 80107e6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80107ea:	b082      	sub	sp, #8
 80107ec:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80107f0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80107f4:	f881 c000 	strb.w	ip, [r1]
 80107f8:	7048      	strb	r0, [r1, #1]
 80107fa:	b002      	add	sp, #8
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop

08010800 <uxr_buffer_request_data>:
 8010800:	b530      	push	{r4, r5, lr}
 8010802:	b095      	sub	sp, #84	@ 0x54
 8010804:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010808:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801080a:	9303      	str	r3, [sp, #12]
 801080c:	2200      	movs	r2, #0
 801080e:	2d00      	cmp	r5, #0
 8010810:	bf14      	ite	ne
 8010812:	2101      	movne	r1, #1
 8010814:	4611      	moveq	r1, r2
 8010816:	4604      	mov	r4, r0
 8010818:	f88d 301c 	strb.w	r3, [sp, #28]
 801081c:	f88d 201d 	strb.w	r2, [sp, #29]
 8010820:	f88d 201e 	strb.w	r2, [sp, #30]
 8010824:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010828:	d021      	beq.n	801086e <uxr_buffer_request_data+0x6e>
 801082a:	682a      	ldr	r2, [r5, #0]
 801082c:	686b      	ldr	r3, [r5, #4]
 801082e:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010832:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010836:	2210      	movs	r2, #16
 8010838:	2308      	movs	r3, #8
 801083a:	2100      	movs	r1, #0
 801083c:	e9cd 3100 	strd	r3, r1, [sp]
 8010840:	4620      	mov	r0, r4
 8010842:	9905      	ldr	r1, [sp, #20]
 8010844:	ab0c      	add	r3, sp, #48	@ 0x30
 8010846:	f001 f839 	bl	80118bc <uxr_prepare_stream_to_write_submessage>
 801084a:	b918      	cbnz	r0, 8010854 <uxr_buffer_request_data+0x54>
 801084c:	4604      	mov	r4, r0
 801084e:	4620      	mov	r0, r4
 8010850:	b015      	add	sp, #84	@ 0x54
 8010852:	bd30      	pop	{r4, r5, pc}
 8010854:	9904      	ldr	r1, [sp, #16]
 8010856:	aa06      	add	r2, sp, #24
 8010858:	4620      	mov	r0, r4
 801085a:	f001 f965 	bl	8011b28 <uxr_init_base_object_request>
 801085e:	a906      	add	r1, sp, #24
 8010860:	4604      	mov	r4, r0
 8010862:	a80c      	add	r0, sp, #48	@ 0x30
 8010864:	f002 fec2 	bl	80135ec <uxr_serialize_READ_DATA_Payload>
 8010868:	4620      	mov	r0, r4
 801086a:	b015      	add	sp, #84	@ 0x54
 801086c:	bd30      	pop	{r4, r5, pc}
 801086e:	2208      	movs	r2, #8
 8010870:	e7e2      	b.n	8010838 <uxr_buffer_request_data+0x38>
 8010872:	bf00      	nop

08010874 <uxr_buffer_cancel_data>:
 8010874:	b510      	push	{r4, lr}
 8010876:	b094      	sub	sp, #80	@ 0x50
 8010878:	2300      	movs	r3, #0
 801087a:	9202      	str	r2, [sp, #8]
 801087c:	9205      	str	r2, [sp, #20]
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	2201      	movs	r2, #1
 8010882:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010886:	f88d 301e 	strb.w	r3, [sp, #30]
 801088a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801088e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010892:	2308      	movs	r3, #8
 8010894:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	2210      	movs	r2, #16
 801089c:	ab0c      	add	r3, sp, #48	@ 0x30
 801089e:	4604      	mov	r4, r0
 80108a0:	9103      	str	r1, [sp, #12]
 80108a2:	f001 f80b 	bl	80118bc <uxr_prepare_stream_to_write_submessage>
 80108a6:	b918      	cbnz	r0, 80108b0 <uxr_buffer_cancel_data+0x3c>
 80108a8:	4604      	mov	r4, r0
 80108aa:	4620      	mov	r0, r4
 80108ac:	b014      	add	sp, #80	@ 0x50
 80108ae:	bd10      	pop	{r4, pc}
 80108b0:	9905      	ldr	r1, [sp, #20]
 80108b2:	aa06      	add	r2, sp, #24
 80108b4:	4620      	mov	r0, r4
 80108b6:	f001 f937 	bl	8011b28 <uxr_init_base_object_request>
 80108ba:	a906      	add	r1, sp, #24
 80108bc:	4604      	mov	r4, r0
 80108be:	a80c      	add	r0, sp, #48	@ 0x30
 80108c0:	f002 fe94 	bl	80135ec <uxr_serialize_READ_DATA_Payload>
 80108c4:	4620      	mov	r0, r4
 80108c6:	b014      	add	sp, #80	@ 0x50
 80108c8:	bd10      	pop	{r4, pc}
 80108ca:	bf00      	nop

080108cc <read_submessage_format>:
 80108cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108d0:	b095      	sub	sp, #84	@ 0x54
 80108d2:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80108d6:	b113      	cbz	r3, 80108de <read_submessage_format+0x12>
 80108d8:	b015      	add	sp, #84	@ 0x54
 80108da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108de:	460c      	mov	r4, r1
 80108e0:	4615      	mov	r5, r2
 80108e2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80108e6:	4607      	mov	r7, r0
 80108e8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80108ea:	9004      	str	r0, [sp, #16]
 80108ec:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80108ee:	9005      	str	r0, [sp, #20]
 80108f0:	1a52      	subs	r2, r2, r1
 80108f2:	a80c      	add	r0, sp, #48	@ 0x30
 80108f4:	4699      	mov	r9, r3
 80108f6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80108fa:	f7fa ff2b 	bl	800b754 <ucdr_init_buffer>
 80108fe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010902:	a80c      	add	r0, sp, #48	@ 0x30
 8010904:	f7fa fefa 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8010908:	69e2      	ldr	r2, [r4, #28]
 801090a:	b19a      	cbz	r2, 8010934 <read_submessage_format+0x68>
 801090c:	f1b8 0f07 	cmp.w	r8, #7
 8010910:	f882 9014 	strb.w	r9, [r2, #20]
 8010914:	d040      	beq.n	8010998 <read_submessage_format+0xcc>
 8010916:	f1b8 0f08 	cmp.w	r8, #8
 801091a:	d02e      	beq.n	801097a <read_submessage_format+0xae>
 801091c:	f1b8 0f06 	cmp.w	r8, #6
 8010920:	d011      	beq.n	8010946 <read_submessage_format+0x7a>
 8010922:	2301      	movs	r3, #1
 8010924:	7513      	strb	r3, [r2, #20]
 8010926:	4629      	mov	r1, r5
 8010928:	4620      	mov	r0, r4
 801092a:	f7fa ff63 	bl	800b7f4 <ucdr_advance_buffer>
 801092e:	b015      	add	sp, #84	@ 0x54
 8010930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010934:	f1b8 0f07 	cmp.w	r8, #7
 8010938:	d02e      	beq.n	8010998 <read_submessage_format+0xcc>
 801093a:	f1b8 0f08 	cmp.w	r8, #8
 801093e:	d01c      	beq.n	801097a <read_submessage_format+0xae>
 8010940:	f1b8 0f06 	cmp.w	r8, #6
 8010944:	d1ef      	bne.n	8010926 <read_submessage_format+0x5a>
 8010946:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801094a:	f1b8 0f00 	cmp.w	r8, #0
 801094e:	d011      	beq.n	8010974 <read_submessage_format+0xa8>
 8010950:	ab0c      	add	r3, sp, #48	@ 0x30
 8010952:	e9cd 3500 	strd	r3, r5, [sp]
 8010956:	2306      	movs	r3, #6
 8010958:	f88d 3016 	strb.w	r3, [sp, #22]
 801095c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010960:	9302      	str	r3, [sp, #8]
 8010962:	4632      	mov	r2, r6
 8010964:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010968:	4638      	mov	r0, r7
 801096a:	47c0      	blx	r8
 801096c:	2301      	movs	r3, #1
 801096e:	69e2      	ldr	r2, [r4, #28]
 8010970:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010974:	2a00      	cmp	r2, #0
 8010976:	d1d4      	bne.n	8010922 <read_submessage_format+0x56>
 8010978:	e7d5      	b.n	8010926 <read_submessage_format+0x5a>
 801097a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801097e:	2b00      	cmp	r3, #0
 8010980:	d0f8      	beq.n	8010974 <read_submessage_format+0xa8>
 8010982:	a906      	add	r1, sp, #24
 8010984:	a80c      	add	r0, sp, #48	@ 0x30
 8010986:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801098a:	f002 fef5 	bl	8013778 <uxr_deserialize_SampleIdentity>
 801098e:	b9a0      	cbnz	r0, 80109ba <read_submessage_format+0xee>
 8010990:	69e2      	ldr	r2, [r4, #28]
 8010992:	2a00      	cmp	r2, #0
 8010994:	d1c5      	bne.n	8010922 <read_submessage_format+0x56>
 8010996:	e7c6      	b.n	8010926 <read_submessage_format+0x5a>
 8010998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801099c:	b13b      	cbz	r3, 80109ae <read_submessage_format+0xe2>
 801099e:	a906      	add	r1, sp, #24
 80109a0:	a80c      	add	r0, sp, #48	@ 0x30
 80109a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80109a6:	f002 fbbb 	bl	8013120 <uxr_deserialize_BaseObjectRequest>
 80109aa:	bb60      	cbnz	r0, 8010a06 <read_submessage_format+0x13a>
 80109ac:	69e2      	ldr	r2, [r4, #28]
 80109ae:	68a3      	ldr	r3, [r4, #8]
 80109b0:	442b      	add	r3, r5
 80109b2:	60a3      	str	r3, [r4, #8]
 80109b4:	2a00      	cmp	r2, #0
 80109b6:	d1b4      	bne.n	8010922 <read_submessage_format+0x56>
 80109b8:	e7b5      	b.n	8010926 <read_submessage_format+0x5a>
 80109ba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80109be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109c0:	1a52      	subs	r2, r2, r1
 80109c2:	eba8 0803 	sub.w	r8, r8, r3
 80109c6:	a80c      	add	r0, sp, #48	@ 0x30
 80109c8:	f7fa fec4 	bl	800b754 <ucdr_init_buffer>
 80109cc:	44a8      	add	r8, r5
 80109ce:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80109d2:	a80c      	add	r0, sp, #48	@ 0x30
 80109d4:	f7fa fe92 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 80109d8:	fa1f f888 	uxth.w	r8, r8
 80109dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80109e4:	2108      	movs	r1, #8
 80109e6:	f88d 1016 	strb.w	r1, [sp, #22]
 80109ea:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80109ee:	9102      	str	r1, [sp, #8]
 80109f0:	ab06      	add	r3, sp, #24
 80109f2:	4632      	mov	r2, r6
 80109f4:	9905      	ldr	r1, [sp, #20]
 80109f6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80109fa:	4638      	mov	r0, r7
 80109fc:	47b0      	blx	r6
 80109fe:	2301      	movs	r3, #1
 8010a00:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010a04:	e7c4      	b.n	8010990 <read_submessage_format+0xc4>
 8010a06:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010a0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a0c:	1a52      	subs	r2, r2, r1
 8010a0e:	a80c      	add	r0, sp, #48	@ 0x30
 8010a10:	eba8 0803 	sub.w	r8, r8, r3
 8010a14:	f7fa fe9e 	bl	800b754 <ucdr_init_buffer>
 8010a18:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010a1c:	a80c      	add	r0, sp, #48	@ 0x30
 8010a1e:	f7fa fe6d 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8010a22:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010a2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a2e:	44a8      	add	r8, r5
 8010a30:	fa1f f888 	uxth.w	r8, r8
 8010a34:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a38:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010a3c:	2107      	movs	r1, #7
 8010a3e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010a42:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010a46:	9102      	str	r1, [sp, #8]
 8010a48:	4632      	mov	r2, r6
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010a50:	9905      	ldr	r1, [sp, #20]
 8010a52:	4638      	mov	r0, r7
 8010a54:	47b0      	blx	r6
 8010a56:	2301      	movs	r3, #1
 8010a58:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010a5c:	e7a6      	b.n	80109ac <read_submessage_format+0xe0>
 8010a5e:	bf00      	nop

08010a60 <on_get_fragmentation_info>:
 8010a60:	b500      	push	{lr}
 8010a62:	b08b      	sub	sp, #44	@ 0x2c
 8010a64:	4601      	mov	r1, r0
 8010a66:	2204      	movs	r2, #4
 8010a68:	a802      	add	r0, sp, #8
 8010a6a:	f7fa fe73 	bl	800b754 <ucdr_init_buffer>
 8010a6e:	f10d 0305 	add.w	r3, sp, #5
 8010a72:	f10d 0206 	add.w	r2, sp, #6
 8010a76:	a901      	add	r1, sp, #4
 8010a78:	a802      	add	r0, sp, #8
 8010a7a:	f001 fe69 	bl	8012750 <uxr_read_submessage_header>
 8010a7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a82:	2b0d      	cmp	r3, #13
 8010a84:	d003      	beq.n	8010a8e <on_get_fragmentation_info+0x2e>
 8010a86:	2000      	movs	r0, #0
 8010a88:	b00b      	add	sp, #44	@ 0x2c
 8010a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a92:	f013 0f02 	tst.w	r3, #2
 8010a96:	bf14      	ite	ne
 8010a98:	2002      	movne	r0, #2
 8010a9a:	2001      	moveq	r0, #1
 8010a9c:	b00b      	add	sp, #44	@ 0x2c
 8010a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aa2:	bf00      	nop

08010aa4 <read_submessage_get_info>:
 8010aa4:	b570      	push	{r4, r5, r6, lr}
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010aac:	4604      	mov	r4, r0
 8010aae:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010ab2:	460e      	mov	r6, r1
 8010ab4:	a810      	add	r0, sp, #64	@ 0x40
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010abc:	f004 fef4 	bl	80158a8 <memset>
 8010ac0:	a903      	add	r1, sp, #12
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	f002 fcd4 	bl	8013470 <uxr_deserialize_GET_INFO_Payload>
 8010ac8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010acc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f001 f821 	bl	8011b18 <uxr_session_header_offset>
 8010ad6:	462b      	mov	r3, r5
 8010ad8:	9000      	str	r0, [sp, #0]
 8010ada:	220c      	movs	r2, #12
 8010adc:	a905      	add	r1, sp, #20
 8010ade:	a808      	add	r0, sp, #32
 8010ae0:	f7fa fe26 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8010ae4:	a910      	add	r1, sp, #64	@ 0x40
 8010ae6:	a808      	add	r0, sp, #32
 8010ae8:	f002 fd34 	bl	8013554 <uxr_serialize_INFO_Payload>
 8010aec:	9b08      	ldr	r3, [sp, #32]
 8010aee:	462a      	mov	r2, r5
 8010af0:	4629      	mov	r1, r5
 8010af2:	4620      	mov	r0, r4
 8010af4:	f000 ffba 	bl	8011a6c <uxr_stamp_session_header>
 8010af8:	a808      	add	r0, sp, #32
 8010afa:	f7fa fe57 	bl	800b7ac <ucdr_buffer_length>
 8010afe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b00:	4602      	mov	r2, r0
 8010b02:	a905      	add	r1, sp, #20
 8010b04:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b08:	47a0      	blx	r4
 8010b0a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}

08010b10 <write_submessage_acknack.isra.0>:
 8010b10:	b570      	push	{r4, r5, r6, lr}
 8010b12:	b092      	sub	sp, #72	@ 0x48
 8010b14:	4605      	mov	r5, r0
 8010b16:	460e      	mov	r6, r1
 8010b18:	4614      	mov	r4, r2
 8010b1a:	f000 fffd 	bl	8011b18 <uxr_session_header_offset>
 8010b1e:	a905      	add	r1, sp, #20
 8010b20:	9000      	str	r0, [sp, #0]
 8010b22:	2300      	movs	r3, #0
 8010b24:	a80a      	add	r0, sp, #40	@ 0x28
 8010b26:	2211      	movs	r2, #17
 8010b28:	f7fa fe02 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8010b2c:	2218      	movs	r2, #24
 8010b2e:	fb02 5404 	mla	r4, r2, r4, r5
 8010b32:	2300      	movs	r3, #0
 8010b34:	2205      	movs	r2, #5
 8010b36:	3450      	adds	r4, #80	@ 0x50
 8010b38:	210a      	movs	r1, #10
 8010b3a:	a80a      	add	r0, sp, #40	@ 0x28
 8010b3c:	f001 fdee 	bl	801271c <uxr_buffer_submessage_header>
 8010b40:	a903      	add	r1, sp, #12
 8010b42:	4620      	mov	r0, r4
 8010b44:	f003 ff32 	bl	80149ac <uxr_compute_acknack>
 8010b48:	ba40      	rev16	r0, r0
 8010b4a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010b4e:	a903      	add	r1, sp, #12
 8010b50:	a80a      	add	r0, sp, #40	@ 0x28
 8010b52:	f88d 6010 	strb.w	r6, [sp, #16]
 8010b56:	f002 fd6d 	bl	8013634 <uxr_serialize_ACKNACK_Payload>
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4628      	mov	r0, r5
 8010b62:	f000 ff83 	bl	8011a6c <uxr_stamp_session_header>
 8010b66:	a80a      	add	r0, sp, #40	@ 0x28
 8010b68:	f7fa fe20 	bl	800b7ac <ucdr_buffer_length>
 8010b6c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010b6e:	4602      	mov	r2, r0
 8010b70:	a905      	add	r1, sp, #20
 8010b72:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b76:	47a0      	blx	r4
 8010b78:	b012      	add	sp, #72	@ 0x48
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}
 8010b7c:	0000      	movs	r0, r0
	...

08010b80 <uxr_init_session>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010bb8 <uxr_init_session+0x38>
 8010b86:	2300      	movs	r3, #0
 8010b88:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010b92:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010b96:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010b9a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010b9e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010ba2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010ba6:	2181      	movs	r1, #129	@ 0x81
 8010ba8:	f000 fecc 	bl	8011944 <uxr_init_session_info>
 8010bac:	f104 0008 	add.w	r0, r4, #8
 8010bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bb4:	f001 bcce 	b.w	8012554 <uxr_init_stream_storage>
	...

08010bc0 <uxr_set_status_callback>:
 8010bc0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <uxr_set_topic_callback>:
 8010bc8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <uxr_set_request_callback>:
 8010bd0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <uxr_set_reply_callback>:
 8010bd8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop

08010be0 <uxr_create_output_best_effort_stream>:
 8010be0:	b510      	push	{r4, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	e9cd 2100 	strd	r2, r1, [sp]
 8010be8:	4604      	mov	r4, r0
 8010bea:	f000 ff95 	bl	8011b18 <uxr_session_header_offset>
 8010bee:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f104 0008 	add.w	r0, r4, #8
 8010bf8:	b004      	add	sp, #16
 8010bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bfe:	f001 bcf3 	b.w	80125e8 <uxr_add_output_best_effort_buffer>
 8010c02:	bf00      	nop

08010c04 <uxr_create_output_reliable_stream>:
 8010c04:	b510      	push	{r4, lr}
 8010c06:	b088      	sub	sp, #32
 8010c08:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	9303      	str	r3, [sp, #12]
 8010c10:	f000 ff82 	bl	8011b18 <uxr_session_header_offset>
 8010c14:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010c18:	9000      	str	r0, [sp, #0]
 8010c1a:	9905      	ldr	r1, [sp, #20]
 8010c1c:	f104 0008 	add.w	r0, r4, #8
 8010c20:	f001 fcf6 	bl	8012610 <uxr_add_output_reliable_buffer>
 8010c24:	2200      	movs	r2, #0
 8010c26:	b2c3      	uxtb	r3, r0
 8010c28:	f363 0207 	bfi	r2, r3, #0, #8
 8010c2c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c30:	f363 220f 	bfi	r2, r3, #8, #8
 8010c34:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c38:	f363 4217 	bfi	r2, r3, #16, #8
 8010c3c:	0e03      	lsrs	r3, r0, #24
 8010c3e:	f363 621f 	bfi	r2, r3, #24, #8
 8010c42:	4610      	mov	r0, r2
 8010c44:	b008      	add	sp, #32
 8010c46:	bd10      	pop	{r4, pc}

08010c48 <uxr_create_input_best_effort_stream>:
 8010c48:	b082      	sub	sp, #8
 8010c4a:	3008      	adds	r0, #8
 8010c4c:	b002      	add	sp, #8
 8010c4e:	f001 bcf9 	b.w	8012644 <uxr_add_input_best_effort_buffer>
 8010c52:	bf00      	nop

08010c54 <uxr_create_input_reliable_stream>:
 8010c54:	b510      	push	{r4, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	4c0b      	ldr	r4, [pc, #44]	@ (8010c88 <uxr_create_input_reliable_stream+0x34>)
 8010c5a:	9400      	str	r4, [sp, #0]
 8010c5c:	3008      	adds	r0, #8
 8010c5e:	f001 fd07 	bl	8012670 <uxr_add_input_reliable_buffer>
 8010c62:	2200      	movs	r2, #0
 8010c64:	b2c3      	uxtb	r3, r0
 8010c66:	f363 0207 	bfi	r2, r3, #0, #8
 8010c6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010c6e:	f363 220f 	bfi	r2, r3, #8, #8
 8010c72:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c76:	f363 4217 	bfi	r2, r3, #16, #8
 8010c7a:	0e03      	lsrs	r3, r0, #24
 8010c7c:	f363 621f 	bfi	r2, r3, #24, #8
 8010c80:	4610      	mov	r0, r2
 8010c82:	b004      	add	sp, #16
 8010c84:	bd10      	pop	{r4, pc}
 8010c86:	bf00      	nop
 8010c88:	08010a61 	.word	0x08010a61

08010c8c <uxr_epoch_nanos>:
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	4604      	mov	r4, r0
 8010c90:	f001 fda4 	bl	80127dc <uxr_nanos>
 8010c94:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010c98:	1ac0      	subs	r0, r0, r3
 8010c9a:	eb61 0102 	sbc.w	r1, r1, r2
 8010c9e:	bd10      	pop	{r4, pc}

08010ca0 <uxr_flash_output_streams>:
 8010ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca4:	7e03      	ldrb	r3, [r0, #24]
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	4604      	mov	r4, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d035      	beq.n	8010d1a <uxr_flash_output_streams+0x7a>
 8010cae:	f04f 0900 	mov.w	r9, #0
 8010cb2:	4648      	mov	r0, r9
 8010cb4:	f10d 0802 	add.w	r8, sp, #2
 8010cb8:	af03      	add	r7, sp, #12
 8010cba:	ae02      	add	r6, sp, #8
 8010cbc:	e006      	b.n	8010ccc <uxr_flash_output_streams+0x2c>
 8010cbe:	7e23      	ldrb	r3, [r4, #24]
 8010cc0:	f109 0901 	add.w	r9, r9, #1
 8010cc4:	fa5f f089 	uxtb.w	r0, r9
 8010cc8:	4283      	cmp	r3, r0
 8010cca:	d926      	bls.n	8010d1a <uxr_flash_output_streams+0x7a>
 8010ccc:	2201      	movs	r2, #1
 8010cce:	4611      	mov	r1, r2
 8010cd0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010cd4:	f001 fbea 	bl	80124ac <uxr_stream_id>
 8010cd8:	3508      	adds	r5, #8
 8010cda:	4684      	mov	ip, r0
 8010cdc:	4643      	mov	r3, r8
 8010cde:	463a      	mov	r2, r7
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	f8cd c004 	str.w	ip, [sp, #4]
 8010ce8:	f003 fee6 	bl	8014ab8 <uxr_prepare_best_effort_buffer_to_send>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d0e6      	beq.n	8010cbe <uxr_flash_output_streams+0x1e>
 8010cf0:	9b02      	ldr	r3, [sp, #8]
 8010cf2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010cf6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 feb6 	bl	8011a6c <uxr_stamp_session_header>
 8010d00:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d02:	9a03      	ldr	r2, [sp, #12]
 8010d04:	685d      	ldr	r5, [r3, #4]
 8010d06:	6818      	ldr	r0, [r3, #0]
 8010d08:	9902      	ldr	r1, [sp, #8]
 8010d0a:	47a8      	blx	r5
 8010d0c:	f109 0901 	add.w	r9, r9, #1
 8010d10:	7e23      	ldrb	r3, [r4, #24]
 8010d12:	fa5f f089 	uxtb.w	r0, r9
 8010d16:	4283      	cmp	r3, r0
 8010d18:	d8d8      	bhi.n	8010ccc <uxr_flash_output_streams+0x2c>
 8010d1a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010d1e:	b38b      	cbz	r3, 8010d84 <uxr_flash_output_streams+0xe4>
 8010d20:	f04f 0900 	mov.w	r9, #0
 8010d24:	f10d 0802 	add.w	r8, sp, #2
 8010d28:	af03      	add	r7, sp, #12
 8010d2a:	ae02      	add	r6, sp, #8
 8010d2c:	4648      	mov	r0, r9
 8010d2e:	2201      	movs	r2, #1
 8010d30:	2102      	movs	r1, #2
 8010d32:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010d36:	f001 fbb9 	bl	80124ac <uxr_stream_id>
 8010d3a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010d3e:	3520      	adds	r5, #32
 8010d40:	9001      	str	r0, [sp, #4]
 8010d42:	e00d      	b.n	8010d60 <uxr_flash_output_streams+0xc0>
 8010d44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d48:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d4c:	9b02      	ldr	r3, [sp, #8]
 8010d4e:	f000 fe8d 	bl	8011a6c <uxr_stamp_session_header>
 8010d52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d54:	9a03      	ldr	r2, [sp, #12]
 8010d56:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010d5a:	9902      	ldr	r1, [sp, #8]
 8010d5c:	6818      	ldr	r0, [r3, #0]
 8010d5e:	47d0      	blx	sl
 8010d60:	4643      	mov	r3, r8
 8010d62:	463a      	mov	r2, r7
 8010d64:	4631      	mov	r1, r6
 8010d66:	4628      	mov	r0, r5
 8010d68:	f004 f8c4 	bl	8014ef4 <uxr_prepare_next_reliable_buffer_to_send>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	4620      	mov	r0, r4
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1e7      	bne.n	8010d44 <uxr_flash_output_streams+0xa4>
 8010d74:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010d78:	f109 0901 	add.w	r9, r9, #1
 8010d7c:	fa5f f089 	uxtb.w	r0, r9
 8010d80:	4283      	cmp	r3, r0
 8010d82:	d8d4      	bhi.n	8010d2e <uxr_flash_output_streams+0x8e>
 8010d84:	b004      	add	sp, #16
 8010d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8a:	bf00      	nop

08010d8c <read_submessage_info>:
 8010d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d90:	460d      	mov	r5, r1
 8010d92:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010d96:	4669      	mov	r1, sp
 8010d98:	4607      	mov	r7, r0
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f002 fa76 	bl	801328c <uxr_deserialize_BaseObjectReply>
 8010da0:	a902      	add	r1, sp, #8
 8010da2:	4604      	mov	r4, r0
 8010da4:	4628      	mov	r0, r5
 8010da6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010daa:	f7f9 fbbb 	bl	800a524 <ucdr_deserialize_bool>
 8010dae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010db2:	4004      	ands	r4, r0
 8010db4:	b2e4      	uxtb	r4, r4
 8010db6:	b95b      	cbnz	r3, 8010dd0 <read_submessage_info+0x44>
 8010db8:	a987      	add	r1, sp, #540	@ 0x21c
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f7f9 fbb2 	bl	800a524 <ucdr_deserialize_bool>
 8010dc0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	b94b      	cbnz	r3, 8010ddc <read_submessage_info+0x50>
 8010dc8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd0:	a903      	add	r1, sp, #12
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f002 f902 	bl	8012fdc <uxr_deserialize_ObjectVariant>
 8010dd8:	4004      	ands	r4, r0
 8010dda:	e7ed      	b.n	8010db8 <read_submessage_info+0x2c>
 8010ddc:	a988      	add	r1, sp, #544	@ 0x220
 8010dde:	4628      	mov	r0, r5
 8010de0:	f7f9 fbce 	bl	800a580 <ucdr_deserialize_uint8_t>
 8010de4:	4234      	tst	r4, r6
 8010de6:	d0ef      	beq.n	8010dc8 <read_submessage_info+0x3c>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d0ed      	beq.n	8010dc8 <read_submessage_info+0x3c>
 8010dec:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010df0:	2b0d      	cmp	r3, #13
 8010df2:	d1e9      	bne.n	8010dc8 <read_submessage_info+0x3c>
 8010df4:	a98a      	add	r1, sp, #552	@ 0x228
 8010df6:	4628      	mov	r0, r5
 8010df8:	f7fa f994 	bl	800b124 <ucdr_deserialize_int16_t>
 8010dfc:	b140      	cbz	r0, 8010e10 <read_submessage_info+0x84>
 8010dfe:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	dd07      	ble.n	8010e16 <read_submessage_info+0x8a>
 8010e06:	f1b8 0f00 	cmp.w	r8, #0
 8010e0a:	bf14      	ite	ne
 8010e0c:	2001      	movne	r0, #1
 8010e0e:	2002      	moveq	r0, #2
 8010e10:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010e14:	e7d8      	b.n	8010dc8 <read_submessage_info+0x3c>
 8010e16:	2000      	movs	r0, #0
 8010e18:	e7fa      	b.n	8010e10 <read_submessage_info+0x84>
 8010e1a:	bf00      	nop

08010e1c <read_submessage_list>:
 8010e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	b097      	sub	sp, #92	@ 0x5c
 8010e22:	4ec1      	ldr	r6, [pc, #772]	@ (8011128 <read_submessage_list+0x30c>)
 8010e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e26:	4604      	mov	r4, r0
 8010e28:	460d      	mov	r5, r1
 8010e2a:	f04f 0801 	mov.w	r8, #1
 8010e2e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010e32:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e34:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010e38:	4628      	mov	r0, r5
 8010e3a:	f001 fc89 	bl	8012750 <uxr_read_submessage_header>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	f000 813e 	beq.w	80110c0 <read_submessage_list+0x2a4>
 8010e44:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010e48:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010e4c:	3b02      	subs	r3, #2
 8010e4e:	2b0d      	cmp	r3, #13
 8010e50:	d8ed      	bhi.n	8010e2e <read_submessage_list+0x12>
 8010e52:	a101      	add	r1, pc, #4	@ (adr r1, 8010e58 <read_submessage_list+0x3c>)
 8010e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e58:	080110b7 	.word	0x080110b7
 8010e5c:	08010e2f 	.word	0x08010e2f
 8010e60:	080110a7 	.word	0x080110a7
 8010e64:	08011045 	.word	0x08011045
 8010e68:	0801103b 	.word	0x0801103b
 8010e6c:	08010e2f 	.word	0x08010e2f
 8010e70:	08010e2f 	.word	0x08010e2f
 8010e74:	08010f9b 	.word	0x08010f9b
 8010e78:	08010f2b 	.word	0x08010f2b
 8010e7c:	08010eeb 	.word	0x08010eeb
 8010e80:	08010e2f 	.word	0x08010e2f
 8010e84:	08010e2f 	.word	0x08010e2f
 8010e88:	08010e2f 	.word	0x08010e2f
 8010e8c:	08010e91 	.word	0x08010e91
 8010e90:	a910      	add	r1, sp, #64	@ 0x40
 8010e92:	4628      	mov	r0, r5
 8010e94:	f002 fc1e 	bl	80136d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010e98:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010e9c:	f1b9 0f00 	cmp.w	r9, #0
 8010ea0:	f000 8116 	beq.w	80110d0 <read_submessage_list+0x2b4>
 8010ea4:	f001 fc9a 	bl	80127dc <uxr_nanos>
 8010ea8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	468c      	mov	ip, r1
 8010eb4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010eb8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010ebc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010ebe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010ec0:	468c      	mov	ip, r1
 8010ec2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010ec6:	46e2      	mov	sl, ip
 8010ec8:	46bc      	mov	ip, r7
 8010eca:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010ece:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010ed2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010ed6:	e9cd 7100 	strd	r7, r1, [sp]
 8010eda:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010ede:	9106      	str	r1, [sp, #24]
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	47c8      	blx	r9
 8010ee4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010ee8:	e7a1      	b.n	8010e2e <read_submessage_list+0x12>
 8010eea:	a910      	add	r1, sp, #64	@ 0x40
 8010eec:	4628      	mov	r0, r5
 8010eee:	f002 fbdf 	bl	80136b0 <uxr_deserialize_HEARTBEAT_Payload>
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010ef8:	f001 fb02 	bl	8012500 <uxr_stream_id_from_raw>
 8010efc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010f00:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010f02:	4639      	mov	r1, r7
 8010f04:	f104 0008 	add.w	r0, r4, #8
 8010f08:	f001 fbe8 	bl	80126dc <uxr_get_input_reliable_stream>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d08e      	beq.n	8010e2e <read_submessage_list+0x12>
 8010f10:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010f14:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010f18:	f003 fd3c 	bl	8014994 <uxr_process_heartbeat>
 8010f1c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010f20:	463a      	mov	r2, r7
 8010f22:	4620      	mov	r0, r4
 8010f24:	f7ff fdf4 	bl	8010b10 <write_submessage_acknack.isra.0>
 8010f28:	e781      	b.n	8010e2e <read_submessage_list+0x12>
 8010f2a:	a910      	add	r1, sp, #64	@ 0x40
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	f002 fb97 	bl	8013660 <uxr_deserialize_ACKNACK_Payload>
 8010f32:	2100      	movs	r1, #0
 8010f34:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010f38:	f001 fae2 	bl	8012500 <uxr_stream_id_from_raw>
 8010f3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8010f3e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010f42:	f104 0008 	add.w	r0, r4, #8
 8010f46:	f001 fbb5 	bl	80126b4 <uxr_get_output_reliable_stream>
 8010f4a:	4607      	mov	r7, r0
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	f43f af6e 	beq.w	8010e2e <read_submessage_list+0x12>
 8010f52:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010f56:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010f5a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010f5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010f62:	b289      	uxth	r1, r1
 8010f64:	f004 f870 	bl	8015048 <uxr_process_acknack>
 8010f68:	4638      	mov	r0, r7
 8010f6a:	f004 f82d 	bl	8014fc8 <uxr_begin_output_nack_buffer_it>
 8010f6e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010f72:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010f76:	e006      	b.n	8010f86 <read_submessage_list+0x16a>
 8010f78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f7c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010f80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010f82:	6818      	ldr	r0, [r3, #0]
 8010f84:	47c8      	blx	r9
 8010f86:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010f8a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010f8c:	4651      	mov	r1, sl
 8010f8e:	4638      	mov	r0, r7
 8010f90:	f004 f81c 	bl	8014fcc <uxr_next_reliable_nack_buffer_to_send>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d1ef      	bne.n	8010f78 <read_submessage_list+0x15c>
 8010f98:	e749      	b.n	8010e2e <read_submessage_list+0x12>
 8010f9a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010f9e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010fa2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010fa6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010faa:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010fae:	4651      	mov	r1, sl
 8010fb0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010fb4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010fb8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010fbc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010fc6:	f002 f8ab 	bl	8013120 <uxr_deserialize_BaseObjectRequest>
 8010fca:	4650      	mov	r0, sl
 8010fcc:	a90f      	add	r1, sp, #60	@ 0x3c
 8010fce:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010fd2:	f000 fdc7 	bl	8011b64 <uxr_parse_base_object_request>
 8010fd6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010fda:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010fdc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010fe0:	9110      	str	r1, [sp, #64]	@ 0x40
 8010fe2:	3f04      	subs	r7, #4
 8010fe4:	f009 090e 	and.w	r9, r9, #14
 8010fe8:	b2bf      	uxth	r7, r7
 8010fea:	f1bb 0f00 	cmp.w	fp, #0
 8010fee:	d006      	beq.n	8010ffe <read_submessage_list+0x1e2>
 8010ff0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	4652      	mov	r2, sl
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	47d8      	blx	fp
 8010ffe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011000:	b16a      	cbz	r2, 801101e <read_submessage_list+0x202>
 8011002:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011004:	2100      	movs	r1, #0
 8011006:	3802      	subs	r0, #2
 8011008:	e002      	b.n	8011010 <read_submessage_list+0x1f4>
 801100a:	3101      	adds	r1, #1
 801100c:	4291      	cmp	r1, r2
 801100e:	d006      	beq.n	801101e <read_submessage_list+0x202>
 8011010:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011014:	4553      	cmp	r3, sl
 8011016:	d1f8      	bne.n	801100a <read_submessage_list+0x1ee>
 8011018:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801101a:	2200      	movs	r2, #0
 801101c:	545a      	strb	r2, [r3, r1]
 801101e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011022:	9102      	str	r1, [sp, #8]
 8011024:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011026:	9101      	str	r1, [sp, #4]
 8011028:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801102a:	9100      	str	r1, [sp, #0]
 801102c:	464b      	mov	r3, r9
 801102e:	463a      	mov	r2, r7
 8011030:	4629      	mov	r1, r5
 8011032:	4620      	mov	r0, r4
 8011034:	f7ff fc4a 	bl	80108cc <read_submessage_format>
 8011038:	e6f9      	b.n	8010e2e <read_submessage_list+0x12>
 801103a:	4629      	mov	r1, r5
 801103c:	4620      	mov	r0, r4
 801103e:	f7ff fea5 	bl	8010d8c <read_submessage_info>
 8011042:	e6f4      	b.n	8010e2e <read_submessage_list+0x12>
 8011044:	2a00      	cmp	r2, #0
 8011046:	d03e      	beq.n	80110c6 <read_submessage_list+0x2aa>
 8011048:	a910      	add	r1, sp, #64	@ 0x40
 801104a:	4628      	mov	r0, r5
 801104c:	f002 fa64 	bl	8013518 <uxr_deserialize_STATUS_Payload>
 8011050:	a90e      	add	r1, sp, #56	@ 0x38
 8011052:	aa0d      	add	r2, sp, #52	@ 0x34
 8011054:	a810      	add	r0, sp, #64	@ 0x40
 8011056:	f000 fd85 	bl	8011b64 <uxr_parse_base_object_request>
 801105a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801105e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011060:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011064:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011068:	910f      	str	r1, [sp, #60]	@ 0x3c
 801106a:	f1ba 0f00 	cmp.w	sl, #0
 801106e:	d006      	beq.n	801107e <read_submessage_list+0x262>
 8011070:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	463a      	mov	r2, r7
 8011078:	464b      	mov	r3, r9
 801107a:	4620      	mov	r0, r4
 801107c:	47d0      	blx	sl
 801107e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011080:	2a00      	cmp	r2, #0
 8011082:	f43f aed4 	beq.w	8010e2e <read_submessage_list+0x12>
 8011086:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011088:	2100      	movs	r1, #0
 801108a:	3802      	subs	r0, #2
 801108c:	e003      	b.n	8011096 <read_submessage_list+0x27a>
 801108e:	3101      	adds	r1, #1
 8011090:	4291      	cmp	r1, r2
 8011092:	f43f aecc 	beq.w	8010e2e <read_submessage_list+0x12>
 8011096:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801109a:	42bb      	cmp	r3, r7
 801109c:	d1f7      	bne.n	801108e <read_submessage_list+0x272>
 801109e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80110a0:	f803 9001 	strb.w	r9, [r3, r1]
 80110a4:	e6c3      	b.n	8010e2e <read_submessage_list+0x12>
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	f47f aec1 	bne.w	8010e2e <read_submessage_list+0x12>
 80110ac:	4629      	mov	r1, r5
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 fc9e 	bl	80119f0 <uxr_read_create_session_status>
 80110b4:	e6bb      	b.n	8010e2e <read_submessage_list+0x12>
 80110b6:	4629      	mov	r1, r5
 80110b8:	4620      	mov	r0, r4
 80110ba:	f7ff fcf3 	bl	8010aa4 <read_submessage_get_info>
 80110be:	e6b6      	b.n	8010e2e <read_submessage_list+0x12>
 80110c0:	b017      	add	sp, #92	@ 0x5c
 80110c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c6:	4629      	mov	r1, r5
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 fc9d 	bl	8011a08 <uxr_read_delete_session_status>
 80110ce:	e6ae      	b.n	8010e2e <read_submessage_list+0x12>
 80110d0:	f001 fb84 	bl	80127dc <uxr_nanos>
 80110d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80110d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80110d8:	464f      	mov	r7, r9
 80110da:	fbc3 2706 	smlal	r2, r7, r3, r6
 80110de:	1812      	adds	r2, r2, r0
 80110e0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80110e2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80110e4:	eb47 0101 	adc.w	r1, r7, r1
 80110e8:	464f      	mov	r7, r9
 80110ea:	fbc3 0706 	smlal	r0, r7, r3, r6
 80110ee:	463b      	mov	r3, r7
 80110f0:	4684      	mov	ip, r0
 80110f2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80110f6:	fbc7 0906 	smlal	r0, r9, r7, r6
 80110fa:	eb1c 0c00 	adds.w	ip, ip, r0
 80110fe:	464f      	mov	r7, r9
 8011100:	eb43 0307 	adc.w	r3, r3, r7
 8011104:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011108:	eb61 0303 	sbc.w	r3, r1, r3
 801110c:	0fda      	lsrs	r2, r3, #31
 801110e:	eb12 020c 	adds.w	r2, r2, ip
 8011112:	f143 0300 	adc.w	r3, r3, #0
 8011116:	0852      	lsrs	r2, r2, #1
 8011118:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801111c:	105b      	asrs	r3, r3, #1
 801111e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011122:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011126:	e6dd      	b.n	8010ee4 <read_submessage_list+0xc8>
 8011128:	3b9aca00 	.word	0x3b9aca00

0801112c <listen_message_reliably>:
 801112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	1e0b      	subs	r3, r1, #0
 8011132:	b09d      	sub	sp, #116	@ 0x74
 8011134:	bfb8      	it	lt
 8011136:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801113a:	4680      	mov	r8, r0
 801113c:	9305      	str	r3, [sp, #20]
 801113e:	f001 fb33 	bl	80127a8 <uxr_millis>
 8011142:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011146:	4681      	mov	r9, r0
 8011148:	2a00      	cmp	r2, #0
 801114a:	f000 80a1 	beq.w	8011290 <listen_message_reliably+0x164>
 801114e:	2600      	movs	r6, #0
 8011150:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011154:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011158:	9303      	str	r3, [sp, #12]
 801115a:	4630      	mov	r0, r6
 801115c:	460f      	mov	r7, r1
 801115e:	e00f      	b.n	8011180 <listen_message_reliably+0x54>
 8011160:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011164:	9903      	ldr	r1, [sp, #12]
 8011166:	455a      	cmp	r2, fp
 8011168:	f106 0601 	add.w	r6, r6, #1
 801116c:	eb73 0101 	sbcs.w	r1, r3, r1
 8011170:	b2f0      	uxtb	r0, r6
 8011172:	da01      	bge.n	8011178 <listen_message_reliably+0x4c>
 8011174:	4693      	mov	fp, r2
 8011176:	9303      	str	r3, [sp, #12]
 8011178:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801117c:	4283      	cmp	r3, r0
 801117e:	d960      	bls.n	8011242 <listen_message_reliably+0x116>
 8011180:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011184:	2102      	movs	r1, #2
 8011186:	2201      	movs	r2, #1
 8011188:	f001 f990 	bl	80124ac <uxr_stream_id>
 801118c:	00e4      	lsls	r4, r4, #3
 801118e:	f104 0520 	add.w	r5, r4, #32
 8011192:	4445      	add	r5, r8
 8011194:	4601      	mov	r1, r0
 8011196:	463b      	mov	r3, r7
 8011198:	464a      	mov	r2, r9
 801119a:	4628      	mov	r0, r5
 801119c:	9109      	str	r1, [sp, #36]	@ 0x24
 801119e:	f003 fee9 	bl	8014f74 <uxr_update_output_stream_heartbeat_timestamp>
 80111a2:	eb08 0304 	add.w	r3, r8, r4
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d0da      	beq.n	8011160 <listen_message_reliably+0x34>
 80111aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80111ae:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	4640      	mov	r0, r8
 80111b6:	f000 fcaf 	bl	8011b18 <uxr_session_header_offset>
 80111ba:	3501      	adds	r5, #1
 80111bc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80111c0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80111c4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80111c8:	2300      	movs	r3, #0
 80111ca:	2211      	movs	r2, #17
 80111cc:	9000      	str	r0, [sp, #0]
 80111ce:	a90c      	add	r1, sp, #48	@ 0x30
 80111d0:	4650      	mov	r0, sl
 80111d2:	f7fa faad 	bl	800b730 <ucdr_init_buffer_origin_offset>
 80111d6:	2300      	movs	r3, #0
 80111d8:	2205      	movs	r2, #5
 80111da:	210b      	movs	r1, #11
 80111dc:	4650      	mov	r0, sl
 80111de:	f001 fa9d 	bl	801271c <uxr_buffer_submessage_header>
 80111e2:	8968      	ldrh	r0, [r5, #10]
 80111e4:	2101      	movs	r1, #1
 80111e6:	f003 ff67 	bl	80150b8 <uxr_seq_num_add>
 80111ea:	892b      	ldrh	r3, [r5, #8]
 80111ec:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80111f0:	4602      	mov	r2, r0
 80111f2:	9b04      	ldr	r3, [sp, #16]
 80111f4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80111f8:	a90a      	add	r1, sp, #40	@ 0x28
 80111fa:	4650      	mov	r0, sl
 80111fc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011200:	f002 fa42 	bl	8013688 <uxr_serialize_HEARTBEAT_Payload>
 8011204:	2200      	movs	r2, #0
 8011206:	4611      	mov	r1, r2
 8011208:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801120a:	4640      	mov	r0, r8
 801120c:	f000 fc2e 	bl	8011a6c <uxr_stamp_session_header>
 8011210:	4650      	mov	r0, sl
 8011212:	f7fa facb 	bl	800b7ac <ucdr_buffer_length>
 8011216:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801121a:	4602      	mov	r2, r0
 801121c:	a90c      	add	r1, sp, #48	@ 0x30
 801121e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011222:	4444      	add	r4, r8
 8011224:	47a8      	blx	r5
 8011226:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801122a:	9903      	ldr	r1, [sp, #12]
 801122c:	455a      	cmp	r2, fp
 801122e:	f106 0601 	add.w	r6, r6, #1
 8011232:	eb73 0101 	sbcs.w	r1, r3, r1
 8011236:	b2f0      	uxtb	r0, r6
 8011238:	db9c      	blt.n	8011174 <listen_message_reliably+0x48>
 801123a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801123e:	4283      	cmp	r3, r0
 8011240:	d89e      	bhi.n	8011180 <listen_message_reliably+0x54>
 8011242:	9a03      	ldr	r2, [sp, #12]
 8011244:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011248:	429a      	cmp	r2, r3
 801124a:	bf08      	it	eq
 801124c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011250:	d01e      	beq.n	8011290 <listen_message_reliably+0x164>
 8011252:	ebab 0309 	sub.w	r3, fp, r9
 8011256:	9905      	ldr	r1, [sp, #20]
 8011258:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801125c:	2b00      	cmp	r3, #0
 801125e:	bf08      	it	eq
 8011260:	2301      	moveq	r3, #1
 8011262:	4299      	cmp	r1, r3
 8011264:	bfa8      	it	ge
 8011266:	4619      	movge	r1, r3
 8011268:	6894      	ldr	r4, [r2, #8]
 801126a:	6810      	ldr	r0, [r2, #0]
 801126c:	4689      	mov	r9, r1
 801126e:	460b      	mov	r3, r1
 8011270:	aa08      	add	r2, sp, #32
 8011272:	a907      	add	r1, sp, #28
 8011274:	47a0      	blx	r4
 8011276:	b968      	cbnz	r0, 8011294 <listen_message_reliably+0x168>
 8011278:	9b05      	ldr	r3, [sp, #20]
 801127a:	eba3 0309 	sub.w	r3, r3, r9
 801127e:	2b00      	cmp	r3, #0
 8011280:	9305      	str	r3, [sp, #20]
 8011282:	f73f af5c 	bgt.w	801113e <listen_message_reliably+0x12>
 8011286:	4604      	mov	r4, r0
 8011288:	4620      	mov	r0, r4
 801128a:	b01d      	add	sp, #116	@ 0x74
 801128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011290:	9b05      	ldr	r3, [sp, #20]
 8011292:	e7e0      	b.n	8011256 <listen_message_reliably+0x12a>
 8011294:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011298:	4604      	mov	r4, r0
 801129a:	a80c      	add	r0, sp, #48	@ 0x30
 801129c:	f7fa fa5a 	bl	800b754 <ucdr_init_buffer>
 80112a0:	2500      	movs	r5, #0
 80112a2:	f10d 031a 	add.w	r3, sp, #26
 80112a6:	aa06      	add	r2, sp, #24
 80112a8:	a90c      	add	r1, sp, #48	@ 0x30
 80112aa:	4640      	mov	r0, r8
 80112ac:	f88d 5018 	strb.w	r5, [sp, #24]
 80112b0:	f000 fbf0 	bl	8011a94 <uxr_read_session_header>
 80112b4:	b918      	cbnz	r0, 80112be <listen_message_reliably+0x192>
 80112b6:	4620      	mov	r0, r4
 80112b8:	b01d      	add	sp, #116	@ 0x74
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112be:	4629      	mov	r1, r5
 80112c0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80112c4:	f001 f91c 	bl	8012500 <uxr_stream_id_from_raw>
 80112c8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80112cc:	2d01      	cmp	r5, #1
 80112ce:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80112d2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80112d6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80112da:	d04b      	beq.n	8011374 <listen_message_reliably+0x248>
 80112dc:	2d02      	cmp	r5, #2
 80112de:	d00f      	beq.n	8011300 <listen_message_reliably+0x1d4>
 80112e0:	2d00      	cmp	r5, #0
 80112e2:	d1e8      	bne.n	80112b6 <listen_message_reliably+0x18a>
 80112e4:	4629      	mov	r1, r5
 80112e6:	4628      	mov	r0, r5
 80112e8:	f001 f90a 	bl	8012500 <uxr_stream_id_from_raw>
 80112ec:	a90c      	add	r1, sp, #48	@ 0x30
 80112ee:	4602      	mov	r2, r0
 80112f0:	4640      	mov	r0, r8
 80112f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80112f4:	f7ff fd92 	bl	8010e1c <read_submessage_list>
 80112f8:	4620      	mov	r0, r4
 80112fa:	b01d      	add	sp, #116	@ 0x74
 80112fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011300:	4631      	mov	r1, r6
 8011302:	f108 0008 	add.w	r0, r8, #8
 8011306:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801130a:	f001 f9e7 	bl	80126dc <uxr_get_input_reliable_stream>
 801130e:	4607      	mov	r7, r0
 8011310:	b338      	cbz	r0, 8011362 <listen_message_reliably+0x236>
 8011312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011314:	9203      	str	r2, [sp, #12]
 8011316:	a80c      	add	r0, sp, #48	@ 0x30
 8011318:	f7fa fa4c 	bl	800b7b4 <ucdr_buffer_remaining>
 801131c:	4603      	mov	r3, r0
 801131e:	f10d 0019 	add.w	r0, sp, #25
 8011322:	9000      	str	r0, [sp, #0]
 8011324:	9a03      	ldr	r2, [sp, #12]
 8011326:	4651      	mov	r1, sl
 8011328:	4638      	mov	r0, r7
 801132a:	f003 fa39 	bl	80147a0 <uxr_receive_reliable_message>
 801132e:	b1c0      	cbz	r0, 8011362 <listen_message_reliably+0x236>
 8011330:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011334:	b393      	cbz	r3, 801139c <listen_message_reliably+0x270>
 8011336:	ad14      	add	r5, sp, #80	@ 0x50
 8011338:	f04f 0a02 	mov.w	sl, #2
 801133c:	e00a      	b.n	8011354 <listen_message_reliably+0x228>
 801133e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011342:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011346:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801134a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801134c:	4629      	mov	r1, r5
 801134e:	4640      	mov	r0, r8
 8011350:	f7ff fd64 	bl	8010e1c <read_submessage_list>
 8011354:	2204      	movs	r2, #4
 8011356:	4629      	mov	r1, r5
 8011358:	4638      	mov	r0, r7
 801135a:	f003 faa1 	bl	80148a0 <uxr_next_input_reliable_buffer_available>
 801135e:	2800      	cmp	r0, #0
 8011360:	d1ed      	bne.n	801133e <listen_message_reliably+0x212>
 8011362:	4640      	mov	r0, r8
 8011364:	4632      	mov	r2, r6
 8011366:	4649      	mov	r1, r9
 8011368:	f7ff fbd2 	bl	8010b10 <write_submessage_acknack.isra.0>
 801136c:	4620      	mov	r0, r4
 801136e:	b01d      	add	sp, #116	@ 0x74
 8011370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011374:	4631      	mov	r1, r6
 8011376:	f108 0008 	add.w	r0, r8, #8
 801137a:	f001 f9a5 	bl	80126c8 <uxr_get_input_best_effort_stream>
 801137e:	2800      	cmp	r0, #0
 8011380:	d099      	beq.n	80112b6 <listen_message_reliably+0x18a>
 8011382:	4651      	mov	r1, sl
 8011384:	f003 f978 	bl	8014678 <uxr_receive_best_effort_message>
 8011388:	2800      	cmp	r0, #0
 801138a:	d094      	beq.n	80112b6 <listen_message_reliably+0x18a>
 801138c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011390:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011392:	a90c      	add	r1, sp, #48	@ 0x30
 8011394:	4640      	mov	r0, r8
 8011396:	f7ff fd41 	bl	8010e1c <read_submessage_list>
 801139a:	e78c      	b.n	80112b6 <listen_message_reliably+0x18a>
 801139c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80113a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113a2:	a90c      	add	r1, sp, #48	@ 0x30
 80113a4:	4640      	mov	r0, r8
 80113a6:	f7ff fd39 	bl	8010e1c <read_submessage_list>
 80113aa:	e7c4      	b.n	8011336 <listen_message_reliably+0x20a>

080113ac <uxr_run_session_timeout>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	4604      	mov	r4, r0
 80113b0:	460d      	mov	r5, r1
 80113b2:	f001 f9f9 	bl	80127a8 <uxr_millis>
 80113b6:	4606      	mov	r6, r0
 80113b8:	4620      	mov	r0, r4
 80113ba:	f7ff fc71 	bl	8010ca0 <uxr_flash_output_streams>
 80113be:	4629      	mov	r1, r5
 80113c0:	4620      	mov	r0, r4
 80113c2:	f7ff feb3 	bl	801112c <listen_message_reliably>
 80113c6:	f001 f9ef 	bl	80127a8 <uxr_millis>
 80113ca:	1b83      	subs	r3, r0, r6
 80113cc:	1ae9      	subs	r1, r5, r3
 80113ce:	2900      	cmp	r1, #0
 80113d0:	dcf6      	bgt.n	80113c0 <uxr_run_session_timeout+0x14>
 80113d2:	f104 0008 	add.w	r0, r4, #8
 80113d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113da:	f001 b989 	b.w	80126f0 <uxr_output_streams_confirmed>
 80113de:	bf00      	nop

080113e0 <uxr_run_session_until_data>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	4604      	mov	r4, r0
 80113e4:	460d      	mov	r5, r1
 80113e6:	f001 f9df 	bl	80127a8 <uxr_millis>
 80113ea:	4606      	mov	r6, r0
 80113ec:	4620      	mov	r0, r4
 80113ee:	f7ff fc57 	bl	8010ca0 <uxr_flash_output_streams>
 80113f2:	2300      	movs	r3, #0
 80113f4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80113f8:	4629      	mov	r1, r5
 80113fa:	e005      	b.n	8011408 <uxr_run_session_until_data+0x28>
 80113fc:	f001 f9d4 	bl	80127a8 <uxr_millis>
 8011400:	1b83      	subs	r3, r0, r6
 8011402:	1ae9      	subs	r1, r5, r3
 8011404:	2900      	cmp	r1, #0
 8011406:	dd07      	ble.n	8011418 <uxr_run_session_until_data+0x38>
 8011408:	4620      	mov	r0, r4
 801140a:	f7ff fe8f 	bl	801112c <listen_message_reliably>
 801140e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011412:	2800      	cmp	r0, #0
 8011414:	d0f2      	beq.n	80113fc <uxr_run_session_until_data+0x1c>
 8011416:	bd70      	pop	{r4, r5, r6, pc}
 8011418:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801141c:	bd70      	pop	{r4, r5, r6, pc}
 801141e:	bf00      	nop

08011420 <uxr_run_session_until_confirm_delivery>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	4606      	mov	r6, r0
 8011426:	460d      	mov	r5, r1
 8011428:	f001 f9be 	bl	80127a8 <uxr_millis>
 801142c:	4607      	mov	r7, r0
 801142e:	4630      	mov	r0, r6
 8011430:	f7ff fc36 	bl	8010ca0 <uxr_flash_output_streams>
 8011434:	2d00      	cmp	r5, #0
 8011436:	f106 0808 	add.w	r8, r6, #8
 801143a:	bfa8      	it	ge
 801143c:	462c      	movge	r4, r5
 801143e:	da07      	bge.n	8011450 <uxr_run_session_until_confirm_delivery+0x30>
 8011440:	e00e      	b.n	8011460 <uxr_run_session_until_confirm_delivery+0x40>
 8011442:	f7ff fe73 	bl	801112c <listen_message_reliably>
 8011446:	f001 f9af 	bl	80127a8 <uxr_millis>
 801144a:	1bc3      	subs	r3, r0, r7
 801144c:	1aec      	subs	r4, r5, r3
 801144e:	d407      	bmi.n	8011460 <uxr_run_session_until_confirm_delivery+0x40>
 8011450:	4640      	mov	r0, r8
 8011452:	f001 f94d 	bl	80126f0 <uxr_output_streams_confirmed>
 8011456:	4603      	mov	r3, r0
 8011458:	4621      	mov	r1, r4
 801145a:	4630      	mov	r0, r6
 801145c:	2b00      	cmp	r3, #0
 801145e:	d0f0      	beq.n	8011442 <uxr_run_session_until_confirm_delivery+0x22>
 8011460:	4640      	mov	r0, r8
 8011462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011466:	f001 b943 	b.w	80126f0 <uxr_output_streams_confirmed>
 801146a:	bf00      	nop

0801146c <uxr_run_session_until_all_status>:
 801146c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011470:	9c08      	ldr	r4, [sp, #32]
 8011472:	4606      	mov	r6, r0
 8011474:	460f      	mov	r7, r1
 8011476:	4691      	mov	r9, r2
 8011478:	461d      	mov	r5, r3
 801147a:	f7ff fc11 	bl	8010ca0 <uxr_flash_output_streams>
 801147e:	b124      	cbz	r4, 801148a <uxr_run_session_until_all_status+0x1e>
 8011480:	4622      	mov	r2, r4
 8011482:	21ff      	movs	r1, #255	@ 0xff
 8011484:	4628      	mov	r0, r5
 8011486:	f004 fa0f 	bl	80158a8 <memset>
 801148a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801148e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011490:	f001 f98a 	bl	80127a8 <uxr_millis>
 8011494:	3d01      	subs	r5, #1
 8011496:	f1a9 0902 	sub.w	r9, r9, #2
 801149a:	4680      	mov	r8, r0
 801149c:	4639      	mov	r1, r7
 801149e:	4630      	mov	r0, r6
 80114a0:	f7ff fe44 	bl	801112c <listen_message_reliably>
 80114a4:	f001 f980 	bl	80127a8 <uxr_millis>
 80114a8:	eba0 0008 	sub.w	r0, r0, r8
 80114ac:	1a39      	subs	r1, r7, r0
 80114ae:	b344      	cbz	r4, 8011502 <uxr_run_session_until_all_status+0x96>
 80114b0:	4628      	mov	r0, r5
 80114b2:	46ac      	mov	ip, r5
 80114b4:	2301      	movs	r3, #1
 80114b6:	e002      	b.n	80114be <uxr_run_session_until_all_status+0x52>
 80114b8:	42a3      	cmp	r3, r4
 80114ba:	d20d      	bcs.n	80114d8 <uxr_run_session_until_all_status+0x6c>
 80114bc:	3301      	adds	r3, #1
 80114be:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80114c2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80114c6:	d1f7      	bne.n	80114b8 <uxr_run_session_until_all_status+0x4c>
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80114ce:	d213      	bcs.n	80114f8 <uxr_run_session_until_all_status+0x8c>
 80114d0:	2a00      	cmp	r2, #0
 80114d2:	d0f3      	beq.n	80114bc <uxr_run_session_until_all_status+0x50>
 80114d4:	2900      	cmp	r1, #0
 80114d6:	dce2      	bgt.n	801149e <uxr_run_session_until_all_status+0x32>
 80114d8:	2300      	movs	r3, #0
 80114da:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80114dc:	442c      	add	r4, r5
 80114de:	e001      	b.n	80114e4 <uxr_run_session_until_all_status+0x78>
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d812      	bhi.n	801150a <uxr_run_session_until_all_status+0x9e>
 80114e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80114e8:	4284      	cmp	r4, r0
 80114ea:	d1f9      	bne.n	80114e0 <uxr_run_session_until_all_status+0x74>
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	bf8c      	ite	hi
 80114f0:	2000      	movhi	r0, #0
 80114f2:	2001      	movls	r0, #1
 80114f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114f8:	2900      	cmp	r1, #0
 80114fa:	dded      	ble.n	80114d8 <uxr_run_session_until_all_status+0x6c>
 80114fc:	2a00      	cmp	r2, #0
 80114fe:	d1ce      	bne.n	801149e <uxr_run_session_until_all_status+0x32>
 8011500:	e7ea      	b.n	80114d8 <uxr_run_session_until_all_status+0x6c>
 8011502:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011504:	2001      	movs	r0, #1
 8011506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801150a:	2000      	movs	r0, #0
 801150c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011510 <wait_session_status>:
 8011510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	4604      	mov	r4, r0
 8011516:	b09d      	sub	sp, #116	@ 0x74
 8011518:	20ff      	movs	r0, #255	@ 0xff
 801151a:	7160      	strb	r0, [r4, #5]
 801151c:	9303      	str	r3, [sp, #12]
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 80b6 	beq.w	8011690 <wait_session_status+0x180>
 8011524:	468a      	mov	sl, r1
 8011526:	4691      	mov	r9, r2
 8011528:	f04f 0b00 	mov.w	fp, #0
 801152c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801152e:	464a      	mov	r2, r9
 8011530:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011534:	4651      	mov	r1, sl
 8011536:	47a8      	blx	r5
 8011538:	f001 f936 	bl	80127a8 <uxr_millis>
 801153c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011540:	4605      	mov	r5, r0
 8011542:	e009      	b.n	8011558 <wait_session_status+0x48>
 8011544:	f001 f930 	bl	80127a8 <uxr_millis>
 8011548:	1b40      	subs	r0, r0, r5
 801154a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801154e:	2b00      	cmp	r3, #0
 8011550:	dd40      	ble.n	80115d4 <wait_session_status+0xc4>
 8011552:	7960      	ldrb	r0, [r4, #5]
 8011554:	28ff      	cmp	r0, #255	@ 0xff
 8011556:	d145      	bne.n	80115e4 <wait_session_status+0xd4>
 8011558:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801155a:	a908      	add	r1, sp, #32
 801155c:	6896      	ldr	r6, [r2, #8]
 801155e:	6810      	ldr	r0, [r2, #0]
 8011560:	aa09      	add	r2, sp, #36	@ 0x24
 8011562:	47b0      	blx	r6
 8011564:	2800      	cmp	r0, #0
 8011566:	d0ed      	beq.n	8011544 <wait_session_status+0x34>
 8011568:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801156c:	a80c      	add	r0, sp, #48	@ 0x30
 801156e:	f7fa f8f1 	bl	800b754 <ucdr_init_buffer>
 8011572:	2600      	movs	r6, #0
 8011574:	f10d 031e 	add.w	r3, sp, #30
 8011578:	aa07      	add	r2, sp, #28
 801157a:	a90c      	add	r1, sp, #48	@ 0x30
 801157c:	4620      	mov	r0, r4
 801157e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011582:	f000 fa87 	bl	8011a94 <uxr_read_session_header>
 8011586:	2800      	cmp	r0, #0
 8011588:	d0dc      	beq.n	8011544 <wait_session_status+0x34>
 801158a:	4631      	mov	r1, r6
 801158c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011590:	f000 ffb6 	bl	8012500 <uxr_stream_id_from_raw>
 8011594:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011598:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801159c:	9302      	str	r3, [sp, #8]
 801159e:	2f01      	cmp	r7, #1
 80115a0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80115a4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80115a8:	d05c      	beq.n	8011664 <wait_session_status+0x154>
 80115aa:	2f02      	cmp	r7, #2
 80115ac:	d020      	beq.n	80115f0 <wait_session_status+0xe0>
 80115ae:	2f00      	cmp	r7, #0
 80115b0:	d1c8      	bne.n	8011544 <wait_session_status+0x34>
 80115b2:	4639      	mov	r1, r7
 80115b4:	4638      	mov	r0, r7
 80115b6:	f000 ffa3 	bl	8012500 <uxr_stream_id_from_raw>
 80115ba:	a90c      	add	r1, sp, #48	@ 0x30
 80115bc:	4602      	mov	r2, r0
 80115be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80115c0:	4620      	mov	r0, r4
 80115c2:	f7ff fc2b 	bl	8010e1c <read_submessage_list>
 80115c6:	f001 f8ef 	bl	80127a8 <uxr_millis>
 80115ca:	1b40      	subs	r0, r0, r5
 80115cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dcbe      	bgt.n	8011552 <wait_session_status+0x42>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	7960      	ldrb	r0, [r4, #5]
 80115d8:	f10b 0b01 	add.w	fp, fp, #1
 80115dc:	455b      	cmp	r3, fp
 80115de:	d001      	beq.n	80115e4 <wait_session_status+0xd4>
 80115e0:	28ff      	cmp	r0, #255	@ 0xff
 80115e2:	d0a3      	beq.n	801152c <wait_session_status+0x1c>
 80115e4:	38ff      	subs	r0, #255	@ 0xff
 80115e6:	bf18      	it	ne
 80115e8:	2001      	movne	r0, #1
 80115ea:	b01d      	add	sp, #116	@ 0x74
 80115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80115f4:	9304      	str	r3, [sp, #16]
 80115f6:	4631      	mov	r1, r6
 80115f8:	f104 0008 	add.w	r0, r4, #8
 80115fc:	f001 f86e 	bl	80126dc <uxr_get_input_reliable_stream>
 8011600:	4680      	mov	r8, r0
 8011602:	b348      	cbz	r0, 8011658 <wait_session_status+0x148>
 8011604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011606:	9205      	str	r2, [sp, #20]
 8011608:	a80c      	add	r0, sp, #48	@ 0x30
 801160a:	f7fa f8d3 	bl	800b7b4 <ucdr_buffer_remaining>
 801160e:	4603      	mov	r3, r0
 8011610:	f10d 001d 	add.w	r0, sp, #29
 8011614:	9000      	str	r0, [sp, #0]
 8011616:	9a05      	ldr	r2, [sp, #20]
 8011618:	9902      	ldr	r1, [sp, #8]
 801161a:	4640      	mov	r0, r8
 801161c:	f003 f8c0 	bl	80147a0 <uxr_receive_reliable_message>
 8011620:	b1d0      	cbz	r0, 8011658 <wait_session_status+0x148>
 8011622:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d03a      	beq.n	80116a0 <wait_session_status+0x190>
 801162a:	9f04      	ldr	r7, [sp, #16]
 801162c:	e00a      	b.n	8011644 <wait_session_status+0x134>
 801162e:	f04f 0302 	mov.w	r3, #2
 8011632:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011636:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801163a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801163e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011640:	f7ff fbec 	bl	8010e1c <read_submessage_list>
 8011644:	a914      	add	r1, sp, #80	@ 0x50
 8011646:	2204      	movs	r2, #4
 8011648:	4640      	mov	r0, r8
 801164a:	f003 f929 	bl	80148a0 <uxr_next_input_reliable_buffer_available>
 801164e:	4603      	mov	r3, r0
 8011650:	a914      	add	r1, sp, #80	@ 0x50
 8011652:	4620      	mov	r0, r4
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1ea      	bne.n	801162e <wait_session_status+0x11e>
 8011658:	9904      	ldr	r1, [sp, #16]
 801165a:	4632      	mov	r2, r6
 801165c:	4620      	mov	r0, r4
 801165e:	f7ff fa57 	bl	8010b10 <write_submessage_acknack.isra.0>
 8011662:	e76f      	b.n	8011544 <wait_session_status+0x34>
 8011664:	4631      	mov	r1, r6
 8011666:	f104 0008 	add.w	r0, r4, #8
 801166a:	f001 f82d 	bl	80126c8 <uxr_get_input_best_effort_stream>
 801166e:	2800      	cmp	r0, #0
 8011670:	f43f af68 	beq.w	8011544 <wait_session_status+0x34>
 8011674:	9902      	ldr	r1, [sp, #8]
 8011676:	f002 ffff 	bl	8014678 <uxr_receive_best_effort_message>
 801167a:	2800      	cmp	r0, #0
 801167c:	f43f af62 	beq.w	8011544 <wait_session_status+0x34>
 8011680:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011684:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011686:	a90c      	add	r1, sp, #48	@ 0x30
 8011688:	4620      	mov	r0, r4
 801168a:	f7ff fbc7 	bl	8010e1c <read_submessage_list>
 801168e:	e759      	b.n	8011544 <wait_session_status+0x34>
 8011690:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011692:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011696:	47a0      	blx	r4
 8011698:	2001      	movs	r0, #1
 801169a:	b01d      	add	sp, #116	@ 0x74
 801169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80116a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80116a6:	a90c      	add	r1, sp, #48	@ 0x30
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7ff fbb7 	bl	8010e1c <read_submessage_list>
 80116ae:	e7bc      	b.n	801162a <wait_session_status+0x11a>

080116b0 <uxr_delete_session_retries>:
 80116b0:	b530      	push	{r4, r5, lr}
 80116b2:	b08f      	sub	sp, #60	@ 0x3c
 80116b4:	4604      	mov	r4, r0
 80116b6:	460d      	mov	r5, r1
 80116b8:	f000 fa2e 	bl	8011b18 <uxr_session_header_offset>
 80116bc:	2300      	movs	r3, #0
 80116be:	2210      	movs	r2, #16
 80116c0:	9000      	str	r0, [sp, #0]
 80116c2:	a902      	add	r1, sp, #8
 80116c4:	a806      	add	r0, sp, #24
 80116c6:	f7fa f833 	bl	800b730 <ucdr_init_buffer_origin_offset>
 80116ca:	a906      	add	r1, sp, #24
 80116cc:	4620      	mov	r0, r4
 80116ce:	f000 f973 	bl	80119b8 <uxr_buffer_delete_session>
 80116d2:	2200      	movs	r2, #0
 80116d4:	4611      	mov	r1, r2
 80116d6:	9b06      	ldr	r3, [sp, #24]
 80116d8:	4620      	mov	r0, r4
 80116da:	f000 f9c7 	bl	8011a6c <uxr_stamp_session_header>
 80116de:	a806      	add	r0, sp, #24
 80116e0:	f7fa f864 	bl	800b7ac <ucdr_buffer_length>
 80116e4:	462b      	mov	r3, r5
 80116e6:	4602      	mov	r2, r0
 80116e8:	a902      	add	r1, sp, #8
 80116ea:	4620      	mov	r0, r4
 80116ec:	f7ff ff10 	bl	8011510 <wait_session_status>
 80116f0:	b118      	cbz	r0, 80116fa <uxr_delete_session_retries+0x4a>
 80116f2:	7960      	ldrb	r0, [r4, #5]
 80116f4:	fab0 f080 	clz	r0, r0
 80116f8:	0940      	lsrs	r0, r0, #5
 80116fa:	b00f      	add	sp, #60	@ 0x3c
 80116fc:	bd30      	pop	{r4, r5, pc}
 80116fe:	bf00      	nop

08011700 <uxr_create_session>:
 8011700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011704:	f100 0b08 	add.w	fp, r0, #8
 8011708:	b0ab      	sub	sp, #172	@ 0xac
 801170a:	4604      	mov	r4, r0
 801170c:	4658      	mov	r0, fp
 801170e:	f000 ff2b 	bl	8012568 <uxr_reset_stream_storage>
 8011712:	4620      	mov	r0, r4
 8011714:	f000 fa00 	bl	8011b18 <uxr_session_header_offset>
 8011718:	2300      	movs	r3, #0
 801171a:	9000      	str	r0, [sp, #0]
 801171c:	221c      	movs	r2, #28
 801171e:	a90b      	add	r1, sp, #44	@ 0x2c
 8011720:	a812      	add	r0, sp, #72	@ 0x48
 8011722:	f7fa f805 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8011726:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011728:	8a1a      	ldrh	r2, [r3, #16]
 801172a:	3a04      	subs	r2, #4
 801172c:	b292      	uxth	r2, r2
 801172e:	a912      	add	r1, sp, #72	@ 0x48
 8011730:	4620      	mov	r0, r4
 8011732:	f000 f917 	bl	8011964 <uxr_buffer_create_session>
 8011736:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011738:	4620      	mov	r0, r4
 801173a:	f000 f983 	bl	8011a44 <uxr_stamp_create_session_header>
 801173e:	a812      	add	r0, sp, #72	@ 0x48
 8011740:	f7fa f834 	bl	800b7ac <ucdr_buffer_length>
 8011744:	23ff      	movs	r3, #255	@ 0xff
 8011746:	7163      	strb	r3, [r4, #5]
 8011748:	230a      	movs	r3, #10
 801174a:	46da      	mov	sl, fp
 801174c:	9303      	str	r3, [sp, #12]
 801174e:	4683      	mov	fp, r0
 8011750:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011752:	465a      	mov	r2, fp
 8011754:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011758:	a90b      	add	r1, sp, #44	@ 0x2c
 801175a:	47a8      	blx	r5
 801175c:	f001 f824 	bl	80127a8 <uxr_millis>
 8011760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011764:	4605      	mov	r5, r0
 8011766:	e009      	b.n	801177c <uxr_create_session+0x7c>
 8011768:	f001 f81e 	bl	80127a8 <uxr_millis>
 801176c:	1b40      	subs	r0, r0, r5
 801176e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011772:	2b00      	cmp	r3, #0
 8011774:	7962      	ldrb	r2, [r4, #5]
 8011776:	dd38      	ble.n	80117ea <uxr_create_session+0xea>
 8011778:	2aff      	cmp	r2, #255	@ 0xff
 801177a:	d13c      	bne.n	80117f6 <uxr_create_session+0xf6>
 801177c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801177e:	a907      	add	r1, sp, #28
 8011780:	6896      	ldr	r6, [r2, #8]
 8011782:	6810      	ldr	r0, [r2, #0]
 8011784:	aa08      	add	r2, sp, #32
 8011786:	47b0      	blx	r6
 8011788:	2800      	cmp	r0, #0
 801178a:	d0ed      	beq.n	8011768 <uxr_create_session+0x68>
 801178c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011790:	a81a      	add	r0, sp, #104	@ 0x68
 8011792:	f7f9 ffdf 	bl	800b754 <ucdr_init_buffer>
 8011796:	2600      	movs	r6, #0
 8011798:	f10d 031a 	add.w	r3, sp, #26
 801179c:	aa06      	add	r2, sp, #24
 801179e:	a91a      	add	r1, sp, #104	@ 0x68
 80117a0:	4620      	mov	r0, r4
 80117a2:	f88d 6018 	strb.w	r6, [sp, #24]
 80117a6:	f000 f975 	bl	8011a94 <uxr_read_session_header>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d0dc      	beq.n	8011768 <uxr_create_session+0x68>
 80117ae:	4631      	mov	r1, r6
 80117b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80117b4:	f000 fea4 	bl	8012500 <uxr_stream_id_from_raw>
 80117b8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80117bc:	2e01      	cmp	r6, #1
 80117be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80117c2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80117c6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80117ca:	d053      	beq.n	8011874 <uxr_create_session+0x174>
 80117cc:	2e02      	cmp	r6, #2
 80117ce:	d018      	beq.n	8011802 <uxr_create_session+0x102>
 80117d0:	2e00      	cmp	r6, #0
 80117d2:	d1c9      	bne.n	8011768 <uxr_create_session+0x68>
 80117d4:	4631      	mov	r1, r6
 80117d6:	4630      	mov	r0, r6
 80117d8:	f000 fe92 	bl	8012500 <uxr_stream_id_from_raw>
 80117dc:	a91a      	add	r1, sp, #104	@ 0x68
 80117de:	4602      	mov	r2, r0
 80117e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80117e2:	4620      	mov	r0, r4
 80117e4:	f7ff fb1a 	bl	8010e1c <read_submessage_list>
 80117e8:	e7be      	b.n	8011768 <uxr_create_session+0x68>
 80117ea:	9b03      	ldr	r3, [sp, #12]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	9303      	str	r3, [sp, #12]
 80117f0:	d001      	beq.n	80117f6 <uxr_create_session+0xf6>
 80117f2:	2aff      	cmp	r2, #255	@ 0xff
 80117f4:	d0ac      	beq.n	8011750 <uxr_create_session+0x50>
 80117f6:	2a00      	cmp	r2, #0
 80117f8:	d051      	beq.n	801189e <uxr_create_session+0x19e>
 80117fa:	2000      	movs	r0, #0
 80117fc:	b02b      	add	sp, #172	@ 0xac
 80117fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011802:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011806:	9304      	str	r3, [sp, #16]
 8011808:	4639      	mov	r1, r7
 801180a:	4650      	mov	r0, sl
 801180c:	f000 ff66 	bl	80126dc <uxr_get_input_reliable_stream>
 8011810:	4680      	mov	r8, r0
 8011812:	b348      	cbz	r0, 8011868 <uxr_create_session+0x168>
 8011814:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011816:	9205      	str	r2, [sp, #20]
 8011818:	a81a      	add	r0, sp, #104	@ 0x68
 801181a:	f7f9 ffcb 	bl	800b7b4 <ucdr_buffer_remaining>
 801181e:	4603      	mov	r3, r0
 8011820:	f10d 0019 	add.w	r0, sp, #25
 8011824:	9000      	str	r0, [sp, #0]
 8011826:	9a05      	ldr	r2, [sp, #20]
 8011828:	4649      	mov	r1, r9
 801182a:	4640      	mov	r0, r8
 801182c:	f002 ffb8 	bl	80147a0 <uxr_receive_reliable_message>
 8011830:	b1d0      	cbz	r0, 8011868 <uxr_create_session+0x168>
 8011832:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d038      	beq.n	80118ac <uxr_create_session+0x1ac>
 801183a:	9e04      	ldr	r6, [sp, #16]
 801183c:	e00a      	b.n	8011854 <uxr_create_session+0x154>
 801183e:	f04f 0302 	mov.w	r3, #2
 8011842:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011846:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801184a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801184e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011850:	f7ff fae4 	bl	8010e1c <read_submessage_list>
 8011854:	a922      	add	r1, sp, #136	@ 0x88
 8011856:	2204      	movs	r2, #4
 8011858:	4640      	mov	r0, r8
 801185a:	f003 f821 	bl	80148a0 <uxr_next_input_reliable_buffer_available>
 801185e:	4603      	mov	r3, r0
 8011860:	a922      	add	r1, sp, #136	@ 0x88
 8011862:	4620      	mov	r0, r4
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1ea      	bne.n	801183e <uxr_create_session+0x13e>
 8011868:	9904      	ldr	r1, [sp, #16]
 801186a:	463a      	mov	r2, r7
 801186c:	4620      	mov	r0, r4
 801186e:	f7ff f94f 	bl	8010b10 <write_submessage_acknack.isra.0>
 8011872:	e779      	b.n	8011768 <uxr_create_session+0x68>
 8011874:	4639      	mov	r1, r7
 8011876:	4650      	mov	r0, sl
 8011878:	f000 ff26 	bl	80126c8 <uxr_get_input_best_effort_stream>
 801187c:	2800      	cmp	r0, #0
 801187e:	f43f af73 	beq.w	8011768 <uxr_create_session+0x68>
 8011882:	4649      	mov	r1, r9
 8011884:	f002 fef8 	bl	8014678 <uxr_receive_best_effort_message>
 8011888:	2800      	cmp	r0, #0
 801188a:	f43f af6d 	beq.w	8011768 <uxr_create_session+0x68>
 801188e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011894:	a91a      	add	r1, sp, #104	@ 0x68
 8011896:	4620      	mov	r0, r4
 8011898:	f7ff fac0 	bl	8010e1c <read_submessage_list>
 801189c:	e764      	b.n	8011768 <uxr_create_session+0x68>
 801189e:	4650      	mov	r0, sl
 80118a0:	f000 fe62 	bl	8012568 <uxr_reset_stream_storage>
 80118a4:	2001      	movs	r0, #1
 80118a6:	b02b      	add	sp, #172	@ 0xac
 80118a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ac:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80118b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118b2:	a91a      	add	r1, sp, #104	@ 0x68
 80118b4:	4620      	mov	r0, r4
 80118b6:	f7ff fab1 	bl	8010e1c <read_submessage_list>
 80118ba:	e7be      	b.n	801183a <uxr_create_session+0x13a>

080118bc <uxr_prepare_stream_to_write_submessage>:
 80118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c0:	b082      	sub	sp, #8
 80118c2:	4682      	mov	sl, r0
 80118c4:	4610      	mov	r0, r2
 80118c6:	4615      	mov	r5, r2
 80118c8:	461e      	mov	r6, r3
 80118ca:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80118ce:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80118d2:	9101      	str	r1, [sp, #4]
 80118d4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80118d8:	f000 ff60 	bl	801279c <uxr_submessage_padding>
 80118dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80118e0:	f105 0904 	add.w	r9, r5, #4
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	4481      	add	r9, r0
 80118e8:	d01d      	beq.n	8011926 <uxr_prepare_stream_to_write_submessage+0x6a>
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d116      	bne.n	801191c <uxr_prepare_stream_to_write_submessage+0x60>
 80118ee:	4621      	mov	r1, r4
 80118f0:	f10a 0008 	add.w	r0, sl, #8
 80118f4:	f000 fede 	bl	80126b4 <uxr_get_output_reliable_stream>
 80118f8:	4604      	mov	r4, r0
 80118fa:	b158      	cbz	r0, 8011914 <uxr_prepare_stream_to_write_submessage+0x58>
 80118fc:	4649      	mov	r1, r9
 80118fe:	4632      	mov	r2, r6
 8011900:	f003 f98a 	bl	8014c18 <uxr_prepare_reliable_buffer_to_write>
 8011904:	4604      	mov	r4, r0
 8011906:	b12c      	cbz	r4, 8011914 <uxr_prepare_stream_to_write_submessage+0x58>
 8011908:	4643      	mov	r3, r8
 801190a:	b2aa      	uxth	r2, r5
 801190c:	4639      	mov	r1, r7
 801190e:	4630      	mov	r0, r6
 8011910:	f000 ff04 	bl	801271c <uxr_buffer_submessage_header>
 8011914:	4620      	mov	r0, r4
 8011916:	b002      	add	sp, #8
 8011918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191c:	2400      	movs	r4, #0
 801191e:	4620      	mov	r0, r4
 8011920:	b002      	add	sp, #8
 8011922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011926:	4621      	mov	r1, r4
 8011928:	f10a 0008 	add.w	r0, sl, #8
 801192c:	f000 feba 	bl	80126a4 <uxr_get_output_best_effort_stream>
 8011930:	4604      	mov	r4, r0
 8011932:	2800      	cmp	r0, #0
 8011934:	d0ee      	beq.n	8011914 <uxr_prepare_stream_to_write_submessage+0x58>
 8011936:	4649      	mov	r1, r9
 8011938:	4632      	mov	r2, r6
 801193a:	f003 f89d 	bl	8014a78 <uxr_prepare_best_effort_buffer_to_write>
 801193e:	4604      	mov	r4, r0
 8011940:	e7e1      	b.n	8011906 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011942:	bf00      	nop

08011944 <uxr_init_session_info>:
 8011944:	0e13      	lsrs	r3, r2, #24
 8011946:	7043      	strb	r3, [r0, #1]
 8011948:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801194c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011950:	7001      	strb	r1, [r0, #0]
 8011952:	70c3      	strb	r3, [r0, #3]
 8011954:	2109      	movs	r1, #9
 8011956:	23ff      	movs	r3, #255	@ 0xff
 8011958:	f880 c002 	strb.w	ip, [r0, #2]
 801195c:	7102      	strb	r2, [r0, #4]
 801195e:	80c1      	strh	r1, [r0, #6]
 8011960:	7143      	strb	r3, [r0, #5]
 8011962:	4770      	bx	lr

08011964 <uxr_buffer_create_session>:
 8011964:	b530      	push	{r4, r5, lr}
 8011966:	b089      	sub	sp, #36	@ 0x24
 8011968:	2300      	movs	r3, #0
 801196a:	4d12      	ldr	r5, [pc, #72]	@ (80119b4 <uxr_buffer_create_session+0x50>)
 801196c:	9307      	str	r3, [sp, #28]
 801196e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011972:	2201      	movs	r2, #1
 8011974:	9301      	str	r3, [sp, #4]
 8011976:	80c2      	strh	r2, [r0, #6]
 8011978:	f88d 2004 	strb.w	r2, [sp, #4]
 801197c:	682a      	ldr	r2, [r5, #0]
 801197e:	9200      	str	r2, [sp, #0]
 8011980:	88aa      	ldrh	r2, [r5, #4]
 8011982:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011986:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801198a:	9202      	str	r2, [sp, #8]
 801198c:	460c      	mov	r4, r1
 801198e:	7802      	ldrb	r2, [r0, #0]
 8011990:	9303      	str	r3, [sp, #12]
 8011992:	4619      	mov	r1, r3
 8011994:	f88d 200c 	strb.w	r2, [sp, #12]
 8011998:	4620      	mov	r0, r4
 801199a:	2210      	movs	r2, #16
 801199c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80119a0:	9306      	str	r3, [sp, #24]
 80119a2:	f000 febb 	bl	801271c <uxr_buffer_submessage_header>
 80119a6:	4669      	mov	r1, sp
 80119a8:	4620      	mov	r0, r4
 80119aa:	f001 fccf 	bl	801334c <uxr_serialize_CREATE_CLIENT_Payload>
 80119ae:	b009      	add	sp, #36	@ 0x24
 80119b0:	bd30      	pop	{r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	08016858 	.word	0x08016858

080119b8 <uxr_buffer_delete_session>:
 80119b8:	b510      	push	{r4, lr}
 80119ba:	4b0c      	ldr	r3, [pc, #48]	@ (80119ec <uxr_buffer_delete_session+0x34>)
 80119bc:	b082      	sub	sp, #8
 80119be:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80119c2:	f8ad c006 	strh.w	ip, [sp, #6]
 80119c6:	460c      	mov	r4, r1
 80119c8:	2202      	movs	r2, #2
 80119ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80119ce:	80c2      	strh	r2, [r0, #6]
 80119d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80119d4:	2204      	movs	r2, #4
 80119d6:	2300      	movs	r3, #0
 80119d8:	2103      	movs	r1, #3
 80119da:	4620      	mov	r0, r4
 80119dc:	f000 fe9e 	bl	801271c <uxr_buffer_submessage_header>
 80119e0:	a901      	add	r1, sp, #4
 80119e2:	4620      	mov	r0, r4
 80119e4:	f001 fd58 	bl	8013498 <uxr_serialize_DELETE_Payload>
 80119e8:	b002      	add	sp, #8
 80119ea:	bd10      	pop	{r4, pc}
 80119ec:	08016858 	.word	0x08016858

080119f0 <uxr_read_create_session_status>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	4604      	mov	r4, r0
 80119f6:	4608      	mov	r0, r1
 80119f8:	a901      	add	r1, sp, #4
 80119fa:	f001 fd5d 	bl	80134b8 <uxr_deserialize_STATUS_AGENT_Payload>
 80119fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a02:	7163      	strb	r3, [r4, #5]
 8011a04:	b008      	add	sp, #32
 8011a06:	bd10      	pop	{r4, pc}

08011a08 <uxr_read_delete_session_status>:
 8011a08:	b510      	push	{r4, lr}
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	b084      	sub	sp, #16
 8011a0e:	4608      	mov	r0, r1
 8011a10:	a902      	add	r1, sp, #8
 8011a12:	f001 fd81 	bl	8013518 <uxr_deserialize_STATUS_Payload>
 8011a16:	88e3      	ldrh	r3, [r4, #6]
 8011a18:	2b02      	cmp	r3, #2
 8011a1a:	d001      	beq.n	8011a20 <uxr_read_delete_session_status+0x18>
 8011a1c:	b004      	add	sp, #16
 8011a1e:	bd10      	pop	{r4, pc}
 8011a20:	f10d 000a 	add.w	r0, sp, #10
 8011a24:	f7fe feca 	bl	80107bc <uxr_object_id_from_raw>
 8011a28:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011a2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011a30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	bf04      	itt	eq
 8011a3a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011a3e:	7163      	strbeq	r3, [r4, #5]
 8011a40:	b004      	add	sp, #16
 8011a42:	bd10      	pop	{r4, pc}

08011a44 <uxr_stamp_create_session_header>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	2208      	movs	r2, #8
 8011a48:	b08a      	sub	sp, #40	@ 0x28
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	eb0d 0002 	add.w	r0, sp, r2
 8011a50:	f7f9 fe80 	bl	800b754 <ucdr_init_buffer>
 8011a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a58:	9400      	str	r4, [sp, #0]
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011a62:	a802      	add	r0, sp, #8
 8011a64:	f000 ff00 	bl	8012868 <uxr_serialize_message_header>
 8011a68:	b00a      	add	sp, #40	@ 0x28
 8011a6a:	bd10      	pop	{r4, pc}

08011a6c <uxr_stamp_session_header>:
 8011a6c:	b530      	push	{r4, r5, lr}
 8011a6e:	b08d      	sub	sp, #52	@ 0x34
 8011a70:	4604      	mov	r4, r0
 8011a72:	460d      	mov	r5, r1
 8011a74:	9203      	str	r2, [sp, #12]
 8011a76:	4619      	mov	r1, r3
 8011a78:	a804      	add	r0, sp, #16
 8011a7a:	2208      	movs	r2, #8
 8011a7c:	f7f9 fe6a 	bl	800b754 <ucdr_init_buffer>
 8011a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a84:	9b03      	ldr	r3, [sp, #12]
 8011a86:	9400      	str	r4, [sp, #0]
 8011a88:	462a      	mov	r2, r5
 8011a8a:	a804      	add	r0, sp, #16
 8011a8c:	f000 feec 	bl	8012868 <uxr_serialize_message_header>
 8011a90:	b00d      	add	sp, #52	@ 0x34
 8011a92:	bd30      	pop	{r4, r5, pc}

08011a94 <uxr_read_session_header>:
 8011a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a98:	4607      	mov	r7, r0
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	4615      	mov	r5, r2
 8011aa2:	461e      	mov	r6, r3
 8011aa4:	f7f9 fe86 	bl	800b7b4 <ucdr_buffer_remaining>
 8011aa8:	2808      	cmp	r0, #8
 8011aaa:	d803      	bhi.n	8011ab4 <uxr_read_session_header+0x20>
 8011aac:	2000      	movs	r0, #0
 8011aae:	b004      	add	sp, #16
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab4:	f10d 080c 	add.w	r8, sp, #12
 8011ab8:	4633      	mov	r3, r6
 8011aba:	462a      	mov	r2, r5
 8011abc:	f8cd 8000 	str.w	r8, [sp]
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f10d 010b 	add.w	r1, sp, #11
 8011ac6:	f000 feed 	bl	80128a4 <uxr_deserialize_message_header>
 8011aca:	783a      	ldrb	r2, [r7, #0]
 8011acc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d1eb      	bne.n	8011aac <uxr_read_session_header+0x18>
 8011ad4:	061b      	lsls	r3, r3, #24
 8011ad6:	d41c      	bmi.n	8011b12 <uxr_read_session_header+0x7e>
 8011ad8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011adc:	787b      	ldrb	r3, [r7, #1]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d003      	beq.n	8011aea <uxr_read_session_header+0x56>
 8011ae2:	2001      	movs	r0, #1
 8011ae4:	f080 0001 	eor.w	r0, r0, #1
 8011ae8:	e7e1      	b.n	8011aae <uxr_read_session_header+0x1a>
 8011aea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011aee:	78bb      	ldrb	r3, [r7, #2]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	f107 0102 	add.w	r1, r7, #2
 8011af6:	d1f4      	bne.n	8011ae2 <uxr_read_session_header+0x4e>
 8011af8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011afc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d1ee      	bne.n	8011ae2 <uxr_read_session_header+0x4e>
 8011b04:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011b08:	784b      	ldrb	r3, [r1, #1]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d1e9      	bne.n	8011ae2 <uxr_read_session_header+0x4e>
 8011b0e:	2000      	movs	r0, #0
 8011b10:	e7e8      	b.n	8011ae4 <uxr_read_session_header+0x50>
 8011b12:	2001      	movs	r0, #1
 8011b14:	e7cb      	b.n	8011aae <uxr_read_session_header+0x1a>
 8011b16:	bf00      	nop

08011b18 <uxr_session_header_offset>:
 8011b18:	f990 3000 	ldrsb.w	r3, [r0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	bfac      	ite	ge
 8011b20:	2008      	movge	r0, #8
 8011b22:	2004      	movlt	r0, #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop

08011b28 <uxr_init_base_object_request>:
 8011b28:	b510      	push	{r4, lr}
 8011b2a:	88c3      	ldrh	r3, [r0, #6]
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011b32:	9101      	str	r1, [sp, #4]
 8011b34:	f1a3 010a 	sub.w	r1, r3, #10
 8011b38:	b289      	uxth	r1, r1
 8011b3a:	42a1      	cmp	r1, r4
 8011b3c:	d80e      	bhi.n	8011b5c <uxr_init_base_object_request+0x34>
 8011b3e:	3301      	adds	r3, #1
 8011b40:	b29c      	uxth	r4, r3
 8011b42:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	80c4      	strh	r4, [r0, #6]
 8011b4a:	9801      	ldr	r0, [sp, #4]
 8011b4c:	7011      	strb	r1, [r2, #0]
 8011b4e:	7053      	strb	r3, [r2, #1]
 8011b50:	1c91      	adds	r1, r2, #2
 8011b52:	f7fe fe47 	bl	80107e4 <uxr_object_id_to_raw>
 8011b56:	4620      	mov	r0, r4
 8011b58:	b002      	add	sp, #8
 8011b5a:	bd10      	pop	{r4, pc}
 8011b5c:	230a      	movs	r3, #10
 8011b5e:	2100      	movs	r1, #0
 8011b60:	461c      	mov	r4, r3
 8011b62:	e7f1      	b.n	8011b48 <uxr_init_base_object_request+0x20>

08011b64 <uxr_parse_base_object_request>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	4604      	mov	r4, r0
 8011b68:	3002      	adds	r0, #2
 8011b6a:	460d      	mov	r5, r1
 8011b6c:	4616      	mov	r6, r2
 8011b6e:	f7fe fe25 	bl	80107bc <uxr_object_id_from_raw>
 8011b72:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011b76:	8028      	strh	r0, [r5, #0]
 8011b78:	806b      	strh	r3, [r5, #2]
 8011b7a:	7822      	ldrb	r2, [r4, #0]
 8011b7c:	7863      	ldrb	r3, [r4, #1]
 8011b7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011b82:	8033      	strh	r3, [r6, #0]
 8011b84:	bd70      	pop	{r4, r5, r6, pc}
 8011b86:	bf00      	nop

08011b88 <uxr_init_framing_io>:
 8011b88:	2300      	movs	r3, #0
 8011b8a:	7041      	strb	r1, [r0, #1]
 8011b8c:	7003      	strb	r3, [r0, #0]
 8011b8e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop

08011b94 <uxr_write_framed_msg>:
 8011b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b98:	4617      	mov	r7, r2
 8011b9a:	7842      	ldrb	r2, [r0, #1]
 8011b9c:	b083      	sub	sp, #12
 8011b9e:	460e      	mov	r6, r1
 8011ba0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011ba4:	469a      	mov	sl, r3
 8011ba6:	2901      	cmp	r1, #1
 8011ba8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011bac:	4604      	mov	r4, r0
 8011bae:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011bb2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011bb6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011bba:	f240 8137 	bls.w	8011e2c <uxr_write_framed_msg+0x298>
 8011bbe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011bc2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011bc6:	2901      	cmp	r1, #1
 8011bc8:	f04f 0202 	mov.w	r2, #2
 8011bcc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bd0:	f240 808f 	bls.w	8011cf2 <uxr_write_framed_msg+0x15e>
 8011bd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bd6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011bda:	b2dd      	uxtb	r5, r3
 8011bdc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011be0:	2203      	movs	r2, #3
 8011be2:	2901      	cmp	r1, #1
 8011be4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011be8:	f240 809a 	bls.w	8011d20 <uxr_write_framed_msg+0x18c>
 8011bec:	18a1      	adds	r1, r4, r2
 8011bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bf0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011bf4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011bf8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011bfc:	3201      	adds	r2, #1
 8011bfe:	2801      	cmp	r0, #1
 8011c00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c04:	f240 80a0 	bls.w	8011d48 <uxr_write_framed_msg+0x1b4>
 8011c08:	18a0      	adds	r0, r4, r2
 8011c0a:	3201      	adds	r2, #1
 8011c0c:	b2d2      	uxtb	r2, r2
 8011c0e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011c12:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f000 80a9 	beq.w	8011d6e <uxr_write_framed_msg+0x1da>
 8011c1c:	f04f 0900 	mov.w	r9, #0
 8011c20:	46c8      	mov	r8, r9
 8011c22:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011c26:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011c2a:	2901      	cmp	r1, #1
 8011c2c:	f240 80c3 	bls.w	8011db6 <uxr_write_framed_msg+0x222>
 8011c30:	2a29      	cmp	r2, #41	@ 0x29
 8011c32:	f200 809f 	bhi.w	8011d74 <uxr_write_framed_msg+0x1e0>
 8011c36:	18a1      	adds	r1, r4, r2
 8011c38:	3201      	adds	r2, #1
 8011c3a:	b2d2      	uxtb	r2, r2
 8011c3c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011c40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c44:	ea89 0303 	eor.w	r3, r9, r3
 8011c48:	498c      	ldr	r1, [pc, #560]	@ (8011e7c <uxr_write_framed_msg+0x2e8>)
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	f108 0801 	add.w	r8, r8, #1
 8011c50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011c54:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c5a:	4543      	cmp	r3, r8
 8011c5c:	d8e1      	bhi.n	8011c22 <uxr_write_framed_msg+0x8e>
 8011c5e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011c62:	fa5f f889 	uxtb.w	r8, r9
 8011c66:	9301      	str	r3, [sp, #4]
 8011c68:	f04f 0900 	mov.w	r9, #0
 8011c6c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011c70:	fa5f f18a 	uxtb.w	r1, sl
 8011c74:	2901      	cmp	r1, #1
 8011c76:	d921      	bls.n	8011cbc <uxr_write_framed_msg+0x128>
 8011c78:	2a29      	cmp	r2, #41	@ 0x29
 8011c7a:	f240 80af 	bls.w	8011ddc <uxr_write_framed_msg+0x248>
 8011c7e:	2500      	movs	r5, #0
 8011c80:	e000      	b.n	8011c84 <uxr_write_framed_msg+0xf0>
 8011c82:	b160      	cbz	r0, 8011c9e <uxr_write_framed_msg+0x10a>
 8011c84:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011c88:	1b52      	subs	r2, r2, r5
 8011c8a:	465b      	mov	r3, fp
 8011c8c:	4421      	add	r1, r4
 8011c8e:	4638      	mov	r0, r7
 8011c90:	47b0      	blx	r6
 8011c92:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011c96:	4405      	add	r5, r0
 8011c98:	4295      	cmp	r5, r2
 8011c9a:	d3f2      	bcc.n	8011c82 <uxr_write_framed_msg+0xee>
 8011c9c:	d003      	beq.n	8011ca6 <uxr_write_framed_msg+0x112>
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	b003      	add	sp, #12
 8011ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca6:	fa5f f18a 	uxtb.w	r1, sl
 8011caa:	f04f 0300 	mov.w	r3, #0
 8011cae:	2901      	cmp	r1, #1
 8011cb0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011cb4:	f04f 0200 	mov.w	r2, #0
 8011cb8:	f200 8090 	bhi.w	8011ddc <uxr_write_framed_msg+0x248>
 8011cbc:	1c51      	adds	r1, r2, #1
 8011cbe:	b2c9      	uxtb	r1, r1
 8011cc0:	2929      	cmp	r1, #41	@ 0x29
 8011cc2:	d8dc      	bhi.n	8011c7e <uxr_write_framed_msg+0xea>
 8011cc4:	18a5      	adds	r5, r4, r2
 8011cc6:	4421      	add	r1, r4
 8011cc8:	3202      	adds	r2, #2
 8011cca:	f088 0820 	eor.w	r8, r8, #32
 8011cce:	4648      	mov	r0, r9
 8011cd0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011cd4:	b2d2      	uxtb	r2, r2
 8011cd6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011cda:	f04f 0901 	mov.w	r9, #1
 8011cde:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011ce2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	f040 8085 	bne.w	8011df6 <uxr_write_framed_msg+0x262>
 8011cec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011cf0:	e7bc      	b.n	8011c6c <uxr_write_framed_msg+0xd8>
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	f04f 0c03 	mov.w	ip, #3
 8011cf8:	2204      	movs	r2, #4
 8011cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cfc:	4421      	add	r1, r4
 8011cfe:	b2dd      	uxtb	r5, r3
 8011d00:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011d04:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011d08:	44a4      	add	ip, r4
 8011d0a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011d0e:	f080 0020 	eor.w	r0, r0, #32
 8011d12:	2901      	cmp	r1, #1
 8011d14:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011d18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d1c:	f63f af66 	bhi.w	8011bec <uxr_write_framed_msg+0x58>
 8011d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d22:	18a0      	adds	r0, r4, r2
 8011d24:	f085 0520 	eor.w	r5, r5, #32
 8011d28:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011d2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d30:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011d34:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011d38:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011d3c:	3202      	adds	r2, #2
 8011d3e:	2801      	cmp	r0, #1
 8011d40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d44:	f63f af60 	bhi.w	8011c08 <uxr_write_framed_msg+0x74>
 8011d48:	1c50      	adds	r0, r2, #1
 8011d4a:	18a5      	adds	r5, r4, r2
 8011d4c:	fa54 f080 	uxtab	r0, r4, r0
 8011d50:	3202      	adds	r2, #2
 8011d52:	f081 0120 	eor.w	r1, r1, #32
 8011d56:	b2d2      	uxtb	r2, r2
 8011d58:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011d5c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011d60:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011d64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f47f af57 	bne.w	8011c1c <uxr_write_framed_msg+0x88>
 8011d6e:	9301      	str	r3, [sp, #4]
 8011d70:	4698      	mov	r8, r3
 8011d72:	e779      	b.n	8011c68 <uxr_write_framed_msg+0xd4>
 8011d74:	2500      	movs	r5, #0
 8011d76:	e001      	b.n	8011d7c <uxr_write_framed_msg+0x1e8>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d090      	beq.n	8011c9e <uxr_write_framed_msg+0x10a>
 8011d7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011d80:	1b52      	subs	r2, r2, r5
 8011d82:	465b      	mov	r3, fp
 8011d84:	4421      	add	r1, r4
 8011d86:	4638      	mov	r0, r7
 8011d88:	47b0      	blx	r6
 8011d8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011d8e:	4405      	add	r5, r0
 8011d90:	4295      	cmp	r5, r2
 8011d92:	d3f1      	bcc.n	8011d78 <uxr_write_framed_msg+0x1e4>
 8011d94:	d183      	bne.n	8011c9e <uxr_write_framed_msg+0x10a>
 8011d96:	f04f 0300 	mov.w	r3, #0
 8011d9a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011d9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011da0:	4543      	cmp	r3, r8
 8011da2:	d964      	bls.n	8011e6e <uxr_write_framed_msg+0x2da>
 8011da4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011da8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011dac:	2901      	cmp	r1, #1
 8011dae:	f04f 0200 	mov.w	r2, #0
 8011db2:	f63f af3d 	bhi.w	8011c30 <uxr_write_framed_msg+0x9c>
 8011db6:	1c51      	adds	r1, r2, #1
 8011db8:	b2c9      	uxtb	r1, r1
 8011dba:	2929      	cmp	r1, #41	@ 0x29
 8011dbc:	d8da      	bhi.n	8011d74 <uxr_write_framed_msg+0x1e0>
 8011dbe:	18a0      	adds	r0, r4, r2
 8011dc0:	4421      	add	r1, r4
 8011dc2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011dc6:	3202      	adds	r2, #2
 8011dc8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011dcc:	b2d2      	uxtb	r2, r2
 8011dce:	f083 0020 	eor.w	r0, r3, #32
 8011dd2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011dd6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dda:	e733      	b.n	8011c44 <uxr_write_framed_msg+0xb0>
 8011ddc:	18a1      	adds	r1, r4, r2
 8011dde:	3201      	adds	r2, #1
 8011de0:	4648      	mov	r0, r9
 8011de2:	b2d2      	uxtb	r2, r2
 8011de4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011de8:	f04f 0901 	mov.w	r9, #1
 8011dec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f43f af7b 	beq.w	8011cec <uxr_write_framed_msg+0x158>
 8011df6:	2500      	movs	r5, #0
 8011df8:	e002      	b.n	8011e00 <uxr_write_framed_msg+0x26c>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	f43f af4f 	beq.w	8011c9e <uxr_write_framed_msg+0x10a>
 8011e00:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011e04:	1b52      	subs	r2, r2, r5
 8011e06:	465b      	mov	r3, fp
 8011e08:	4421      	add	r1, r4
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	47b0      	blx	r6
 8011e0e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011e12:	4405      	add	r5, r0
 8011e14:	4295      	cmp	r5, r2
 8011e16:	d3f0      	bcc.n	8011dfa <uxr_write_framed_msg+0x266>
 8011e18:	f47f af41 	bne.w	8011c9e <uxr_write_framed_msg+0x10a>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011e22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e24:	b298      	uxth	r0, r3
 8011e26:	b003      	add	sp, #12
 8011e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2c:	217d      	movs	r1, #125	@ 0x7d
 8011e2e:	f082 0220 	eor.w	r2, r2, #32
 8011e32:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011e36:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011e3a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011e3e:	2901      	cmp	r1, #1
 8011e40:	f04f 0203 	mov.w	r2, #3
 8011e44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e48:	d804      	bhi.n	8011e54 <uxr_write_framed_msg+0x2c0>
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	f04f 0c04 	mov.w	ip, #4
 8011e50:	2205      	movs	r2, #5
 8011e52:	e752      	b.n	8011cfa <uxr_write_framed_msg+0x166>
 8011e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e56:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011e5a:	b2dd      	uxtb	r5, r3
 8011e5c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011e60:	2204      	movs	r2, #4
 8011e62:	2901      	cmp	r1, #1
 8011e64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e68:	f63f aec0 	bhi.w	8011bec <uxr_write_framed_msg+0x58>
 8011e6c:	e758      	b.n	8011d20 <uxr_write_framed_msg+0x18c>
 8011e6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011e72:	fa5f f889 	uxtb.w	r8, r9
 8011e76:	9301      	str	r3, [sp, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	e6f5      	b.n	8011c68 <uxr_write_framed_msg+0xd4>
 8011e7c:	0801718c 	.word	0x0801718c

08011e80 <uxr_framing_read_transport>:
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	4604      	mov	r4, r0
 8011e86:	b083      	sub	sp, #12
 8011e88:	461f      	mov	r7, r3
 8011e8a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011e8e:	4689      	mov	r9, r1
 8011e90:	4692      	mov	sl, r2
 8011e92:	f000 fc89 	bl	80127a8 <uxr_millis>
 8011e96:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011e9a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011e9e:	42b3      	cmp	r3, r6
 8011ea0:	4680      	mov	r8, r0
 8011ea2:	d061      	beq.n	8011f68 <uxr_framing_read_transport+0xe8>
 8011ea4:	d81c      	bhi.n	8011ee0 <uxr_framing_read_transport+0x60>
 8011ea6:	1e75      	subs	r5, r6, #1
 8011ea8:	1aed      	subs	r5, r5, r3
 8011eaa:	b2ed      	uxtb	r5, r5
 8011eac:	2600      	movs	r6, #0
 8011eae:	455d      	cmp	r5, fp
 8011eb0:	d81f      	bhi.n	8011ef2 <uxr_framing_read_transport+0x72>
 8011eb2:	19ab      	adds	r3, r5, r6
 8011eb4:	455b      	cmp	r3, fp
 8011eb6:	bf84      	itt	hi
 8011eb8:	ebab 0605 	subhi.w	r6, fp, r5
 8011ebc:	b2f6      	uxtbhi	r6, r6
 8011ebe:	b9ed      	cbnz	r5, 8011efc <uxr_framing_read_transport+0x7c>
 8011ec0:	f04f 0b00 	mov.w	fp, #0
 8011ec4:	f000 fc70 	bl	80127a8 <uxr_millis>
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	eba0 0808 	sub.w	r8, r0, r8
 8011ece:	eba3 0308 	sub.w	r3, r3, r8
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	b003      	add	sp, #12
 8011edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee0:	2e00      	cmp	r6, #0
 8011ee2:	d049      	beq.n	8011f78 <uxr_framing_read_transport+0xf8>
 8011ee4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011ee8:	b2ed      	uxtb	r5, r5
 8011eea:	3e01      	subs	r6, #1
 8011eec:	455d      	cmp	r5, fp
 8011eee:	b2f6      	uxtb	r6, r6
 8011ef0:	d9df      	bls.n	8011eb2 <uxr_framing_read_transport+0x32>
 8011ef2:	fa5f f58b 	uxtb.w	r5, fp
 8011ef6:	2600      	movs	r6, #0
 8011ef8:	2d00      	cmp	r5, #0
 8011efa:	d0e1      	beq.n	8011ec0 <uxr_framing_read_transport+0x40>
 8011efc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f00:	3102      	adds	r1, #2
 8011f02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f04:	9300      	str	r3, [sp, #0]
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	4421      	add	r1, r4
 8011f0a:	462a      	mov	r2, r5
 8011f0c:	4650      	mov	r0, sl
 8011f0e:	47c8      	blx	r9
 8011f10:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011f14:	4a1a      	ldr	r2, [pc, #104]	@ (8011f80 <uxr_framing_read_transport+0x100>)
 8011f16:	4403      	add	r3, r0
 8011f18:	0859      	lsrs	r1, r3, #1
 8011f1a:	fba2 2101 	umull	r2, r1, r2, r1
 8011f1e:	0889      	lsrs	r1, r1, #2
 8011f20:	222a      	movs	r2, #42	@ 0x2a
 8011f22:	fb02 3111 	mls	r1, r2, r1, r3
 8011f26:	4683      	mov	fp, r0
 8011f28:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d0c7      	beq.n	8011ec0 <uxr_framing_read_transport+0x40>
 8011f30:	42a8      	cmp	r0, r5
 8011f32:	d1c7      	bne.n	8011ec4 <uxr_framing_read_transport+0x44>
 8011f34:	2e00      	cmp	r6, #0
 8011f36:	d0c5      	beq.n	8011ec4 <uxr_framing_read_transport+0x44>
 8011f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	3102      	adds	r1, #2
 8011f3e:	4632      	mov	r2, r6
 8011f40:	4421      	add	r1, r4
 8011f42:	2300      	movs	r3, #0
 8011f44:	4650      	mov	r0, sl
 8011f46:	47c8      	blx	r9
 8011f48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f80 <uxr_framing_read_transport+0x100>)
 8011f4e:	180b      	adds	r3, r1, r0
 8011f50:	0859      	lsrs	r1, r3, #1
 8011f52:	fba2 1201 	umull	r1, r2, r2, r1
 8011f56:	0892      	lsrs	r2, r2, #2
 8011f58:	212a      	movs	r1, #42	@ 0x2a
 8011f5a:	fb01 3312 	mls	r3, r1, r2, r3
 8011f5e:	eb00 0b05 	add.w	fp, r0, r5
 8011f62:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011f66:	e7ad      	b.n	8011ec4 <uxr_framing_read_transport+0x44>
 8011f68:	2600      	movs	r6, #0
 8011f6a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011f6e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011f70:	d9bf      	bls.n	8011ef2 <uxr_framing_read_transport+0x72>
 8011f72:	2102      	movs	r1, #2
 8011f74:	2529      	movs	r5, #41	@ 0x29
 8011f76:	e7c4      	b.n	8011f02 <uxr_framing_read_transport+0x82>
 8011f78:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011f7c:	b2ed      	uxtb	r5, r5
 8011f7e:	e796      	b.n	8011eae <uxr_framing_read_transport+0x2e>
 8011f80:	30c30c31 	.word	0x30c30c31

08011f84 <uxr_read_framed_msg>:
 8011f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	461e      	mov	r6, r3
 8011f8a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011f8e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011f92:	429d      	cmp	r5, r3
 8011f94:	b083      	sub	sp, #12
 8011f96:	4604      	mov	r4, r0
 8011f98:	4688      	mov	r8, r1
 8011f9a:	4691      	mov	r9, r2
 8011f9c:	f000 8188 	beq.w	80122b0 <uxr_read_framed_msg+0x32c>
 8011fa0:	7823      	ldrb	r3, [r4, #0]
 8011fa2:	4dc1      	ldr	r5, [pc, #772]	@ (80122a8 <uxr_read_framed_msg+0x324>)
 8011fa4:	4fc1      	ldr	r7, [pc, #772]	@ (80122ac <uxr_read_framed_msg+0x328>)
 8011fa6:	2b07      	cmp	r3, #7
 8011fa8:	d8fd      	bhi.n	8011fa6 <uxr_read_framed_msg+0x22>
 8011faa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011fae:	0115      	.short	0x0115
 8011fb0:	00d600f6 	.word	0x00d600f6
 8011fb4:	009000b9 	.word	0x009000b9
 8011fb8:	0030004d 	.word	0x0030004d
 8011fbc:	0008      	.short	0x0008
 8011fbe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011fc2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011fc6:	4299      	cmp	r1, r3
 8011fc8:	f000 814a 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 8011fcc:	18e2      	adds	r2, r4, r3
 8011fce:	7892      	ldrb	r2, [r2, #2]
 8011fd0:	2a7d      	cmp	r2, #125	@ 0x7d
 8011fd2:	f000 8199 	beq.w	8012308 <uxr_read_framed_msg+0x384>
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	0858      	lsrs	r0, r3, #1
 8011fda:	fba5 1000 	umull	r1, r0, r5, r0
 8011fde:	0880      	lsrs	r0, r0, #2
 8011fe0:	212a      	movs	r1, #42	@ 0x2a
 8011fe2:	fb01 3310 	mls	r3, r1, r0, r3
 8011fe6:	2a7e      	cmp	r2, #126	@ 0x7e
 8011fe8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011fec:	f000 8252 	beq.w	8012494 <uxr_read_framed_msg+0x510>
 8011ff0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011ff2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011ff4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4299      	cmp	r1, r3
 8011ffe:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012000:	7022      	strb	r2, [r4, #0]
 8012002:	f000 8179 	beq.w	80122f8 <uxr_read_framed_msg+0x374>
 8012006:	2000      	movs	r0, #0
 8012008:	b003      	add	sp, #12
 801200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012012:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012016:	4299      	cmp	r1, r3
 8012018:	f000 8131 	beq.w	801227e <uxr_read_framed_msg+0x2fa>
 801201c:	18e2      	adds	r2, r4, r3
 801201e:	7890      	ldrb	r0, [r2, #2]
 8012020:	287d      	cmp	r0, #125	@ 0x7d
 8012022:	f000 8190 	beq.w	8012346 <uxr_read_framed_msg+0x3c2>
 8012026:	3301      	adds	r3, #1
 8012028:	085a      	lsrs	r2, r3, #1
 801202a:	fba5 1202 	umull	r1, r2, r5, r2
 801202e:	0892      	lsrs	r2, r2, #2
 8012030:	212a      	movs	r1, #42	@ 0x2a
 8012032:	fb01 3312 	mls	r3, r1, r2, r3
 8012036:	287e      	cmp	r0, #126	@ 0x7e
 8012038:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801203c:	f000 821a 	beq.w	8012474 <uxr_read_framed_msg+0x4f0>
 8012040:	2307      	movs	r3, #7
 8012042:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012044:	7023      	strb	r3, [r4, #0]
 8012046:	e7ae      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 8012048:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801204a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801204e:	459e      	cmp	lr, r3
 8012050:	d938      	bls.n	80120c4 <uxr_read_framed_msg+0x140>
 8012052:	ee07 8a90 	vmov	s15, r8
 8012056:	212a      	movs	r1, #42	@ 0x2a
 8012058:	e020      	b.n	801209c <uxr_read_framed_msg+0x118>
 801205a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801205e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012062:	f000 80d4 	beq.w	801220e <uxr_read_framed_msg+0x28a>
 8012066:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801206a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801206e:	f000 8219 	beq.w	80124a4 <uxr_read_framed_msg+0x520>
 8012072:	f806 c003 	strb.w	ip, [r6, r3]
 8012076:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801207a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801207c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012080:	ea8a 000c 	eor.w	r0, sl, ip
 8012084:	b2c0      	uxtb	r0, r0
 8012086:	3301      	adds	r3, #1
 8012088:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801208c:	b29b      	uxth	r3, r3
 801208e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012092:	4573      	cmp	r3, lr
 8012094:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012096:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012098:	f080 8120 	bcs.w	80122dc <uxr_read_framed_msg+0x358>
 801209c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80120a0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80120a4:	f100 0c01 	add.w	ip, r0, #1
 80120a8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80120ac:	fba5 8202 	umull	r8, r2, r5, r2
 80120b0:	0892      	lsrs	r2, r2, #2
 80120b2:	4582      	cmp	sl, r0
 80120b4:	eb04 0b00 	add.w	fp, r4, r0
 80120b8:	fb01 c212 	mls	r2, r1, r2, ip
 80120bc:	d1cd      	bne.n	801205a <uxr_read_framed_msg+0xd6>
 80120be:	ee17 8a90 	vmov	r8, s15
 80120c2:	459e      	cmp	lr, r3
 80120c4:	f040 8111 	bne.w	80122ea <uxr_read_framed_msg+0x366>
 80120c8:	2306      	movs	r3, #6
 80120ca:	7023      	strb	r3, [r4, #0]
 80120cc:	e76b      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 80120ce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80120d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80120d6:	4298      	cmp	r0, r3
 80120d8:	f000 80c2 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 80120dc:	18e2      	adds	r2, r4, r3
 80120de:	7891      	ldrb	r1, [r2, #2]
 80120e0:	297d      	cmp	r1, #125	@ 0x7d
 80120e2:	f000 814c 	beq.w	801237e <uxr_read_framed_msg+0x3fa>
 80120e6:	3301      	adds	r3, #1
 80120e8:	085a      	lsrs	r2, r3, #1
 80120ea:	fba5 0202 	umull	r0, r2, r5, r2
 80120ee:	0892      	lsrs	r2, r2, #2
 80120f0:	202a      	movs	r0, #42	@ 0x2a
 80120f2:	fb00 3312 	mls	r3, r0, r2, r3
 80120f6:	297e      	cmp	r1, #126	@ 0x7e
 80120f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80120fc:	f000 81ca 	beq.w	8012494 <uxr_read_framed_msg+0x510>
 8012100:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012102:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012106:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012108:	b29b      	uxth	r3, r3
 801210a:	2000      	movs	r0, #0
 801210c:	428b      	cmp	r3, r1
 801210e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012110:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012112:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012114:	f240 80df 	bls.w	80122d6 <uxr_read_framed_msg+0x352>
 8012118:	7020      	strb	r0, [r4, #0]
 801211a:	b003      	add	sp, #12
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012124:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012128:	4299      	cmp	r1, r3
 801212a:	f000 80a8 	beq.w	801227e <uxr_read_framed_msg+0x2fa>
 801212e:	18e2      	adds	r2, r4, r3
 8012130:	7890      	ldrb	r0, [r2, #2]
 8012132:	287d      	cmp	r0, #125	@ 0x7d
 8012134:	f000 8164 	beq.w	8012400 <uxr_read_framed_msg+0x47c>
 8012138:	3301      	adds	r3, #1
 801213a:	085a      	lsrs	r2, r3, #1
 801213c:	fba5 1202 	umull	r1, r2, r5, r2
 8012140:	0892      	lsrs	r2, r2, #2
 8012142:	212a      	movs	r1, #42	@ 0x2a
 8012144:	fb01 3312 	mls	r3, r1, r2, r3
 8012148:	287e      	cmp	r0, #126	@ 0x7e
 801214a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801214e:	f000 8191 	beq.w	8012474 <uxr_read_framed_msg+0x4f0>
 8012152:	2304      	movs	r3, #4
 8012154:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012156:	7023      	strb	r3, [r4, #0]
 8012158:	e725      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 801215a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801215e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012162:	4290      	cmp	r0, r2
 8012164:	f000 80b3 	beq.w	80122ce <uxr_read_framed_msg+0x34a>
 8012168:	18a3      	adds	r3, r4, r2
 801216a:	7899      	ldrb	r1, [r3, #2]
 801216c:	297d      	cmp	r1, #125	@ 0x7d
 801216e:	f000 8164 	beq.w	801243a <uxr_read_framed_msg+0x4b6>
 8012172:	3201      	adds	r2, #1
 8012174:	0850      	lsrs	r0, r2, #1
 8012176:	fba5 3000 	umull	r3, r0, r5, r0
 801217a:	0880      	lsrs	r0, r0, #2
 801217c:	232a      	movs	r3, #42	@ 0x2a
 801217e:	fb03 2210 	mls	r2, r3, r0, r2
 8012182:	297e      	cmp	r1, #126	@ 0x7e
 8012184:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012188:	f000 8188 	beq.w	801249c <uxr_read_framed_msg+0x518>
 801218c:	7863      	ldrb	r3, [r4, #1]
 801218e:	428b      	cmp	r3, r1
 8012190:	bf0c      	ite	eq
 8012192:	2303      	moveq	r3, #3
 8012194:	2300      	movne	r3, #0
 8012196:	7023      	strb	r3, [r4, #0]
 8012198:	e705      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 801219a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801219e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80121a2:	2200      	movs	r2, #0
 80121a4:	4299      	cmp	r1, r3
 80121a6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80121aa:	d06c      	beq.n	8012286 <uxr_read_framed_msg+0x302>
 80121ac:	18e2      	adds	r2, r4, r3
 80121ae:	7890      	ldrb	r0, [r2, #2]
 80121b0:	287d      	cmp	r0, #125	@ 0x7d
 80121b2:	f000 8101 	beq.w	80123b8 <uxr_read_framed_msg+0x434>
 80121b6:	3301      	adds	r3, #1
 80121b8:	085a      	lsrs	r2, r3, #1
 80121ba:	fba5 1202 	umull	r1, r2, r5, r2
 80121be:	0892      	lsrs	r2, r2, #2
 80121c0:	212a      	movs	r1, #42	@ 0x2a
 80121c2:	fb01 3312 	mls	r3, r1, r2, r3
 80121c6:	287e      	cmp	r0, #126	@ 0x7e
 80121c8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80121cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121d0:	d059      	beq.n	8012286 <uxr_read_framed_msg+0x302>
 80121d2:	2302      	movs	r3, #2
 80121d4:	7023      	strb	r3, [r4, #0]
 80121d6:	e6e6      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 80121d8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80121dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80121e0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80121e4:	1c51      	adds	r1, r2, #1
 80121e6:	084b      	lsrs	r3, r1, #1
 80121e8:	fba5 c303 	umull	ip, r3, r5, r3
 80121ec:	089b      	lsrs	r3, r3, #2
 80121ee:	fb0e 1313 	mls	r3, lr, r3, r1
 80121f2:	4592      	cmp	sl, r2
 80121f4:	eb04 0002 	add.w	r0, r4, r2
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	f43f af04 	beq.w	8012006 <uxr_read_framed_msg+0x82>
 80121fe:	7883      	ldrb	r3, [r0, #2]
 8012200:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012204:	2b7e      	cmp	r3, #126	@ 0x7e
 8012206:	d1ed      	bne.n	80121e4 <uxr_read_framed_msg+0x260>
 8012208:	2301      	movs	r3, #1
 801220a:	7023      	strb	r3, [r4, #0]
 801220c:	e6cb      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 801220e:	f100 0c01 	add.w	ip, r0, #1
 8012212:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012216:	fba5 8202 	umull	r8, r2, r5, r2
 801221a:	0892      	lsrs	r2, r2, #2
 801221c:	fb01 c212 	mls	r2, r1, r2, ip
 8012220:	eb04 0c02 	add.w	ip, r4, r2
 8012224:	b2d2      	uxtb	r2, r2
 8012226:	4592      	cmp	sl, r2
 8012228:	f100 0002 	add.w	r0, r0, #2
 801222c:	f43f af47 	beq.w	80120be <uxr_read_framed_msg+0x13a>
 8012230:	0842      	lsrs	r2, r0, #1
 8012232:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012236:	fba5 8202 	umull	r8, r2, r5, r2
 801223a:	0892      	lsrs	r2, r2, #2
 801223c:	fb01 0012 	mls	r0, r1, r2, r0
 8012240:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012244:	f08a 0c20 	eor.w	ip, sl, #32
 8012248:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801224c:	f47f af11 	bne.w	8012072 <uxr_read_framed_msg+0xee>
 8012250:	459e      	cmp	lr, r3
 8012252:	ee17 8a90 	vmov	r8, s15
 8012256:	f43f af37 	beq.w	80120c8 <uxr_read_framed_msg+0x144>
 801225a:	2301      	movs	r3, #1
 801225c:	7023      	strb	r3, [r4, #0]
 801225e:	e6a2      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 8012260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012262:	9300      	str	r3, [sp, #0]
 8012264:	2301      	movs	r3, #1
 8012266:	9301      	str	r3, [sp, #4]
 8012268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801226a:	464a      	mov	r2, r9
 801226c:	4641      	mov	r1, r8
 801226e:	4620      	mov	r0, r4
 8012270:	f7ff fe06 	bl	8011e80 <uxr_framing_read_transport>
 8012274:	2800      	cmp	r0, #0
 8012276:	f43f aec6 	beq.w	8012006 <uxr_read_framed_msg+0x82>
 801227a:	7823      	ldrb	r3, [r4, #0]
 801227c:	e693      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 801227e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	2302      	movs	r3, #2
 8012284:	e7ef      	b.n	8012266 <uxr_read_framed_msg+0x2e2>
 8012286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	2304      	movs	r3, #4
 801228c:	9301      	str	r3, [sp, #4]
 801228e:	464a      	mov	r2, r9
 8012290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012292:	4641      	mov	r1, r8
 8012294:	4620      	mov	r0, r4
 8012296:	f7ff fdf3 	bl	8011e80 <uxr_framing_read_transport>
 801229a:	2800      	cmp	r0, #0
 801229c:	d1ed      	bne.n	801227a <uxr_read_framed_msg+0x2f6>
 801229e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80122a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80122a4:	d0e9      	beq.n	801227a <uxr_read_framed_msg+0x2f6>
 80122a6:	e6ae      	b.n	8012006 <uxr_read_framed_msg+0x82>
 80122a8:	30c30c31 	.word	0x30c30c31
 80122ac:	0801718c 	.word	0x0801718c
 80122b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	2305      	movs	r3, #5
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122ba:	f7ff fde1 	bl	8011e80 <uxr_framing_read_transport>
 80122be:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80122c2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80122c6:	429a      	cmp	r2, r3
 80122c8:	f43f ae9d 	beq.w	8012006 <uxr_read_framed_msg+0x82>
 80122cc:	e668      	b.n	8011fa0 <uxr_read_framed_msg+0x1c>
 80122ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	2303      	movs	r3, #3
 80122d4:	e7c7      	b.n	8012266 <uxr_read_framed_msg+0x2e2>
 80122d6:	2305      	movs	r3, #5
 80122d8:	7023      	strb	r3, [r4, #0]
 80122da:	e664      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 80122dc:	ee17 8a90 	vmov	r8, s15
 80122e0:	f43f aef2 	beq.w	80120c8 <uxr_read_framed_msg+0x144>
 80122e4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80122e8:	d08e      	beq.n	8012208 <uxr_read_framed_msg+0x284>
 80122ea:	ebae 0303 	sub.w	r3, lr, r3
 80122ee:	3302      	adds	r3, #2
 80122f0:	9301      	str	r3, [sp, #4]
 80122f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	e7b7      	b.n	8012268 <uxr_read_framed_msg+0x2e4>
 80122f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122fa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80122fe:	7013      	strb	r3, [r2, #0]
 8012300:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012302:	b003      	add	sp, #12
 8012304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012308:	f103 0c01 	add.w	ip, r3, #1
 801230c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012310:	fba5 0202 	umull	r0, r2, r5, r2
 8012314:	0892      	lsrs	r2, r2, #2
 8012316:	202a      	movs	r0, #42	@ 0x2a
 8012318:	fb00 c212 	mls	r2, r0, r2, ip
 801231c:	fa5f fc82 	uxtb.w	ip, r2
 8012320:	4561      	cmp	r1, ip
 8012322:	d09d      	beq.n	8012260 <uxr_read_framed_msg+0x2dc>
 8012324:	3302      	adds	r3, #2
 8012326:	4422      	add	r2, r4
 8012328:	0859      	lsrs	r1, r3, #1
 801232a:	7892      	ldrb	r2, [r2, #2]
 801232c:	fba5 c101 	umull	ip, r1, r5, r1
 8012330:	0889      	lsrs	r1, r1, #2
 8012332:	fb00 3311 	mls	r3, r0, r1, r3
 8012336:	2a7e      	cmp	r2, #126	@ 0x7e
 8012338:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801233c:	f000 80aa 	beq.w	8012494 <uxr_read_framed_msg+0x510>
 8012340:	f082 0220 	eor.w	r2, r2, #32
 8012344:	e654      	b.n	8011ff0 <uxr_read_framed_msg+0x6c>
 8012346:	1c58      	adds	r0, r3, #1
 8012348:	0842      	lsrs	r2, r0, #1
 801234a:	fba5 c202 	umull	ip, r2, r5, r2
 801234e:	0892      	lsrs	r2, r2, #2
 8012350:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012354:	fb0c 0212 	mls	r2, ip, r2, r0
 8012358:	b2d0      	uxtb	r0, r2
 801235a:	4281      	cmp	r1, r0
 801235c:	d08f      	beq.n	801227e <uxr_read_framed_msg+0x2fa>
 801235e:	4422      	add	r2, r4
 8012360:	3302      	adds	r3, #2
 8012362:	7890      	ldrb	r0, [r2, #2]
 8012364:	085a      	lsrs	r2, r3, #1
 8012366:	fba5 1202 	umull	r1, r2, r5, r2
 801236a:	0892      	lsrs	r2, r2, #2
 801236c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012370:	287e      	cmp	r0, #126	@ 0x7e
 8012372:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012376:	d07d      	beq.n	8012474 <uxr_read_framed_msg+0x4f0>
 8012378:	f080 0020 	eor.w	r0, r0, #32
 801237c:	e660      	b.n	8012040 <uxr_read_framed_msg+0xbc>
 801237e:	1c59      	adds	r1, r3, #1
 8012380:	084a      	lsrs	r2, r1, #1
 8012382:	fba5 c202 	umull	ip, r2, r5, r2
 8012386:	0892      	lsrs	r2, r2, #2
 8012388:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801238c:	fb0c 1212 	mls	r2, ip, r2, r1
 8012390:	b2d1      	uxtb	r1, r2
 8012392:	4288      	cmp	r0, r1
 8012394:	f43f af64 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 8012398:	4422      	add	r2, r4
 801239a:	3302      	adds	r3, #2
 801239c:	7891      	ldrb	r1, [r2, #2]
 801239e:	085a      	lsrs	r2, r3, #1
 80123a0:	fba5 0202 	umull	r0, r2, r5, r2
 80123a4:	0892      	lsrs	r2, r2, #2
 80123a6:	fb0c 3312 	mls	r3, ip, r2, r3
 80123aa:	297e      	cmp	r1, #126	@ 0x7e
 80123ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123b0:	d070      	beq.n	8012494 <uxr_read_framed_msg+0x510>
 80123b2:	f081 0120 	eor.w	r1, r1, #32
 80123b6:	e6a3      	b.n	8012100 <uxr_read_framed_msg+0x17c>
 80123b8:	f103 0c01 	add.w	ip, r3, #1
 80123bc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80123c0:	fba5 0202 	umull	r0, r2, r5, r2
 80123c4:	0892      	lsrs	r2, r2, #2
 80123c6:	202a      	movs	r0, #42	@ 0x2a
 80123c8:	fb00 c212 	mls	r2, r0, r2, ip
 80123cc:	fa5f fc82 	uxtb.w	ip, r2
 80123d0:	4561      	cmp	r1, ip
 80123d2:	f43f af58 	beq.w	8012286 <uxr_read_framed_msg+0x302>
 80123d6:	4422      	add	r2, r4
 80123d8:	3302      	adds	r3, #2
 80123da:	7891      	ldrb	r1, [r2, #2]
 80123dc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80123e0:	085a      	lsrs	r2, r3, #1
 80123e2:	fba5 c202 	umull	ip, r2, r5, r2
 80123e6:	0892      	lsrs	r2, r2, #2
 80123e8:	fb00 3312 	mls	r3, r0, r2, r3
 80123ec:	297e      	cmp	r1, #126	@ 0x7e
 80123ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123f2:	f43f af48 	beq.w	8012286 <uxr_read_framed_msg+0x302>
 80123f6:	f081 0120 	eor.w	r1, r1, #32
 80123fa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80123fe:	e6e8      	b.n	80121d2 <uxr_read_framed_msg+0x24e>
 8012400:	1c58      	adds	r0, r3, #1
 8012402:	0842      	lsrs	r2, r0, #1
 8012404:	fba5 c202 	umull	ip, r2, r5, r2
 8012408:	0892      	lsrs	r2, r2, #2
 801240a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801240e:	fb0c 0212 	mls	r2, ip, r2, r0
 8012412:	b2d0      	uxtb	r0, r2
 8012414:	4281      	cmp	r1, r0
 8012416:	f43f af32 	beq.w	801227e <uxr_read_framed_msg+0x2fa>
 801241a:	4422      	add	r2, r4
 801241c:	3302      	adds	r3, #2
 801241e:	7890      	ldrb	r0, [r2, #2]
 8012420:	085a      	lsrs	r2, r3, #1
 8012422:	fba5 1202 	umull	r1, r2, r5, r2
 8012426:	0892      	lsrs	r2, r2, #2
 8012428:	fb0c 3312 	mls	r3, ip, r2, r3
 801242c:	287e      	cmp	r0, #126	@ 0x7e
 801242e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012432:	d01f      	beq.n	8012474 <uxr_read_framed_msg+0x4f0>
 8012434:	f080 0020 	eor.w	r0, r0, #32
 8012438:	e68b      	b.n	8012152 <uxr_read_framed_msg+0x1ce>
 801243a:	1c51      	adds	r1, r2, #1
 801243c:	084b      	lsrs	r3, r1, #1
 801243e:	fba5 c303 	umull	ip, r3, r5, r3
 8012442:	089b      	lsrs	r3, r3, #2
 8012444:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012448:	fb0c 1313 	mls	r3, ip, r3, r1
 801244c:	b2d9      	uxtb	r1, r3
 801244e:	4288      	cmp	r0, r1
 8012450:	f43f af3d 	beq.w	80122ce <uxr_read_framed_msg+0x34a>
 8012454:	3202      	adds	r2, #2
 8012456:	4423      	add	r3, r4
 8012458:	0850      	lsrs	r0, r2, #1
 801245a:	789b      	ldrb	r3, [r3, #2]
 801245c:	fba5 1000 	umull	r1, r0, r5, r0
 8012460:	0880      	lsrs	r0, r0, #2
 8012462:	fb0c 2210 	mls	r2, ip, r0, r2
 8012466:	2b7e      	cmp	r3, #126	@ 0x7e
 8012468:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801246c:	d016      	beq.n	801249c <uxr_read_framed_msg+0x518>
 801246e:	f083 0120 	eor.w	r1, r3, #32
 8012472:	e68b      	b.n	801218c <uxr_read_framed_msg+0x208>
 8012474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	2302      	movs	r3, #2
 801247a:	9301      	str	r3, [sp, #4]
 801247c:	464a      	mov	r2, r9
 801247e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012480:	4641      	mov	r1, r8
 8012482:	4620      	mov	r0, r4
 8012484:	f7ff fcfc 	bl	8011e80 <uxr_framing_read_transport>
 8012488:	2800      	cmp	r0, #0
 801248a:	f47f aef6 	bne.w	801227a <uxr_read_framed_msg+0x2f6>
 801248e:	2301      	movs	r3, #1
 8012490:	7023      	strb	r3, [r4, #0]
 8012492:	e588      	b.n	8011fa6 <uxr_read_framed_msg+0x22>
 8012494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	2301      	movs	r3, #1
 801249a:	e7ee      	b.n	801247a <uxr_read_framed_msg+0x4f6>
 801249c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801249e:	9300      	str	r3, [sp, #0]
 80124a0:	2303      	movs	r3, #3
 80124a2:	e7ea      	b.n	801247a <uxr_read_framed_msg+0x4f6>
 80124a4:	ee17 8a90 	vmov	r8, s15
 80124a8:	e6ae      	b.n	8012208 <uxr_read_framed_msg+0x284>
 80124aa:	bf00      	nop

080124ac <uxr_stream_id>:
 80124ac:	2901      	cmp	r1, #1
 80124ae:	b082      	sub	sp, #8
 80124b0:	d01d      	beq.n	80124ee <uxr_stream_id+0x42>
 80124b2:	2902      	cmp	r1, #2
 80124b4:	f04f 0c00 	mov.w	ip, #0
 80124b8:	d01e      	beq.n	80124f8 <uxr_stream_id+0x4c>
 80124ba:	2300      	movs	r3, #0
 80124bc:	f36c 0307 	bfi	r3, ip, #0, #8
 80124c0:	f360 230f 	bfi	r3, r0, #8, #8
 80124c4:	f361 4317 	bfi	r3, r1, #16, #8
 80124c8:	f362 631f 	bfi	r3, r2, #24, #8
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	2000      	movs	r0, #0
 80124d0:	f362 0007 	bfi	r0, r2, #0, #8
 80124d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80124d8:	f362 200f 	bfi	r0, r2, #8, #8
 80124dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80124e0:	f362 4017 	bfi	r0, r2, #16, #8
 80124e4:	0e1b      	lsrs	r3, r3, #24
 80124e6:	f363 601f 	bfi	r0, r3, #24, #8
 80124ea:	b002      	add	sp, #8
 80124ec:	4770      	bx	lr
 80124ee:	f100 0c01 	add.w	ip, r0, #1
 80124f2:	fa5f fc8c 	uxtb.w	ip, ip
 80124f6:	e7e0      	b.n	80124ba <uxr_stream_id+0xe>
 80124f8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80124fc:	e7dd      	b.n	80124ba <uxr_stream_id+0xe>
 80124fe:	bf00      	nop

08012500 <uxr_stream_id_from_raw>:
 8012500:	b082      	sub	sp, #8
 8012502:	b130      	cbz	r0, 8012512 <uxr_stream_id_from_raw+0x12>
 8012504:	0603      	lsls	r3, r0, #24
 8012506:	d420      	bmi.n	801254a <uxr_stream_id_from_raw+0x4a>
 8012508:	1e42      	subs	r2, r0, #1
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	f04f 0c01 	mov.w	ip, #1
 8012510:	e001      	b.n	8012516 <uxr_stream_id_from_raw+0x16>
 8012512:	4684      	mov	ip, r0
 8012514:	4602      	mov	r2, r0
 8012516:	2300      	movs	r3, #0
 8012518:	f360 0307 	bfi	r3, r0, #0, #8
 801251c:	f362 230f 	bfi	r3, r2, #8, #8
 8012520:	f36c 4317 	bfi	r3, ip, #16, #8
 8012524:	f361 631f 	bfi	r3, r1, #24, #8
 8012528:	b2da      	uxtb	r2, r3
 801252a:	2000      	movs	r0, #0
 801252c:	f362 0007 	bfi	r0, r2, #0, #8
 8012530:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012534:	f362 200f 	bfi	r0, r2, #8, #8
 8012538:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801253c:	f362 4017 	bfi	r0, r2, #16, #8
 8012540:	0e1b      	lsrs	r3, r3, #24
 8012542:	f363 601f 	bfi	r0, r3, #24, #8
 8012546:	b002      	add	sp, #8
 8012548:	4770      	bx	lr
 801254a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801254e:	f04f 0c02 	mov.w	ip, #2
 8012552:	e7e0      	b.n	8012516 <uxr_stream_id_from_raw+0x16>

08012554 <uxr_init_stream_storage>:
 8012554:	2300      	movs	r3, #0
 8012556:	7403      	strb	r3, [r0, #16]
 8012558:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801255c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012560:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop

08012568 <uxr_reset_stream_storage>:
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	7c03      	ldrb	r3, [r0, #16]
 801256c:	4604      	mov	r4, r0
 801256e:	b153      	cbz	r3, 8012586 <uxr_reset_stream_storage+0x1e>
 8012570:	4606      	mov	r6, r0
 8012572:	2500      	movs	r5, #0
 8012574:	4630      	mov	r0, r6
 8012576:	f002 fa79 	bl	8014a6c <uxr_reset_output_best_effort_stream>
 801257a:	7c23      	ldrb	r3, [r4, #16]
 801257c:	3501      	adds	r5, #1
 801257e:	42ab      	cmp	r3, r5
 8012580:	f106 0610 	add.w	r6, r6, #16
 8012584:	d8f6      	bhi.n	8012574 <uxr_reset_stream_storage+0xc>
 8012586:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801258a:	b163      	cbz	r3, 80125a6 <uxr_reset_stream_storage+0x3e>
 801258c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012590:	2500      	movs	r5, #0
 8012592:	4630      	mov	r0, r6
 8012594:	f002 f86c 	bl	8014670 <uxr_reset_input_best_effort_stream>
 8012598:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801259c:	3501      	adds	r5, #1
 801259e:	42ab      	cmp	r3, r5
 80125a0:	f106 0602 	add.w	r6, r6, #2
 80125a4:	d8f5      	bhi.n	8012592 <uxr_reset_stream_storage+0x2a>
 80125a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80125aa:	b163      	cbz	r3, 80125c6 <uxr_reset_stream_storage+0x5e>
 80125ac:	f104 0618 	add.w	r6, r4, #24
 80125b0:	2500      	movs	r5, #0
 80125b2:	4630      	mov	r0, r6
 80125b4:	f002 fb06 	bl	8014bc4 <uxr_reset_output_reliable_stream>
 80125b8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80125bc:	3501      	adds	r5, #1
 80125be:	42ab      	cmp	r3, r5
 80125c0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80125c4:	d8f5      	bhi.n	80125b2 <uxr_reset_stream_storage+0x4a>
 80125c6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80125ca:	b163      	cbz	r3, 80125e6 <uxr_reset_stream_storage+0x7e>
 80125cc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80125d0:	2500      	movs	r5, #0
 80125d2:	4630      	mov	r0, r6
 80125d4:	f002 f8c0 	bl	8014758 <uxr_reset_input_reliable_stream>
 80125d8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80125dc:	3501      	adds	r5, #1
 80125de:	42ab      	cmp	r3, r5
 80125e0:	f106 0618 	add.w	r6, r6, #24
 80125e4:	d8f5      	bhi.n	80125d2 <uxr_reset_stream_storage+0x6a>
 80125e6:	bd70      	pop	{r4, r5, r6, pc}

080125e8 <uxr_add_output_best_effort_buffer>:
 80125e8:	b510      	push	{r4, lr}
 80125ea:	7c04      	ldrb	r4, [r0, #16]
 80125ec:	f104 0c01 	add.w	ip, r4, #1
 80125f0:	b082      	sub	sp, #8
 80125f2:	f880 c010 	strb.w	ip, [r0, #16]
 80125f6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80125fa:	f002 fa2d 	bl	8014a58 <uxr_init_output_best_effort_stream>
 80125fe:	2201      	movs	r2, #1
 8012600:	4611      	mov	r1, r2
 8012602:	4620      	mov	r0, r4
 8012604:	b002      	add	sp, #8
 8012606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801260a:	f7ff bf4f 	b.w	80124ac <uxr_stream_id>
 801260e:	bf00      	nop

08012610 <uxr_add_output_reliable_buffer>:
 8012610:	b510      	push	{r4, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	4684      	mov	ip, r0
 8012616:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801261a:	9000      	str	r0, [sp, #0]
 801261c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012620:	2028      	movs	r0, #40	@ 0x28
 8012622:	fb00 c004 	mla	r0, r0, r4, ip
 8012626:	f104 0e01 	add.w	lr, r4, #1
 801262a:	3018      	adds	r0, #24
 801262c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012630:	f002 fa90 	bl	8014b54 <uxr_init_output_reliable_stream>
 8012634:	2201      	movs	r2, #1
 8012636:	2102      	movs	r1, #2
 8012638:	4620      	mov	r0, r4
 801263a:	b004      	add	sp, #16
 801263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012640:	f7ff bf34 	b.w	80124ac <uxr_stream_id>

08012644 <uxr_add_input_best_effort_buffer>:
 8012644:	b510      	push	{r4, lr}
 8012646:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801264a:	4603      	mov	r3, r0
 801264c:	1c62      	adds	r2, r4, #1
 801264e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012652:	b082      	sub	sp, #8
 8012654:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801265c:	f002 f804 	bl	8014668 <uxr_init_input_best_effort_stream>
 8012660:	2200      	movs	r2, #0
 8012662:	2101      	movs	r1, #1
 8012664:	4620      	mov	r0, r4
 8012666:	b002      	add	sp, #8
 8012668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801266c:	f7ff bf1e 	b.w	80124ac <uxr_stream_id>

08012670 <uxr_add_input_reliable_buffer>:
 8012670:	b510      	push	{r4, lr}
 8012672:	b084      	sub	sp, #16
 8012674:	4684      	mov	ip, r0
 8012676:	9806      	ldr	r0, [sp, #24]
 8012678:	9000      	str	r0, [sp, #0]
 801267a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801267e:	2018      	movs	r0, #24
 8012680:	fb00 c004 	mla	r0, r0, r4, ip
 8012684:	f104 0e01 	add.w	lr, r4, #1
 8012688:	3048      	adds	r0, #72	@ 0x48
 801268a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801268e:	f002 f837 	bl	8014700 <uxr_init_input_reliable_stream>
 8012692:	2200      	movs	r2, #0
 8012694:	2102      	movs	r1, #2
 8012696:	4620      	mov	r0, r4
 8012698:	b004      	add	sp, #16
 801269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801269e:	f7ff bf05 	b.w	80124ac <uxr_stream_id>
 80126a2:	bf00      	nop

080126a4 <uxr_get_output_best_effort_stream>:
 80126a4:	7c03      	ldrb	r3, [r0, #16]
 80126a6:	428b      	cmp	r3, r1
 80126a8:	bf8c      	ite	hi
 80126aa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80126ae:	2000      	movls	r0, #0
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop

080126b4 <uxr_get_output_reliable_stream>:
 80126b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80126b8:	428b      	cmp	r3, r1
 80126ba:	bf83      	ittte	hi
 80126bc:	2328      	movhi	r3, #40	@ 0x28
 80126be:	fb03 0001 	mlahi	r0, r3, r1, r0
 80126c2:	3018      	addhi	r0, #24
 80126c4:	2000      	movls	r0, #0
 80126c6:	4770      	bx	lr

080126c8 <uxr_get_input_best_effort_stream>:
 80126c8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80126cc:	428b      	cmp	r3, r1
 80126ce:	bf86      	itte	hi
 80126d0:	3121      	addhi	r1, #33	@ 0x21
 80126d2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80126d6:	2000      	movls	r0, #0
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop

080126dc <uxr_get_input_reliable_stream>:
 80126dc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80126e0:	428b      	cmp	r3, r1
 80126e2:	bf83      	ittte	hi
 80126e4:	2318      	movhi	r3, #24
 80126e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80126ea:	3048      	addhi	r0, #72	@ 0x48
 80126ec:	2000      	movls	r0, #0
 80126ee:	4770      	bx	lr

080126f0 <uxr_output_streams_confirmed>:
 80126f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80126f4:	b183      	cbz	r3, 8012718 <uxr_output_streams_confirmed+0x28>
 80126f6:	b570      	push	{r4, r5, r6, lr}
 80126f8:	4606      	mov	r6, r0
 80126fa:	f100 0518 	add.w	r5, r0, #24
 80126fe:	2400      	movs	r4, #0
 8012700:	e001      	b.n	8012706 <uxr_output_streams_confirmed+0x16>
 8012702:	3528      	adds	r5, #40	@ 0x28
 8012704:	b138      	cbz	r0, 8012716 <uxr_output_streams_confirmed+0x26>
 8012706:	4628      	mov	r0, r5
 8012708:	f002 fccc 	bl	80150a4 <uxr_is_output_up_to_date>
 801270c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012710:	3401      	adds	r4, #1
 8012712:	42a3      	cmp	r3, r4
 8012714:	d8f5      	bhi.n	8012702 <uxr_output_streams_confirmed+0x12>
 8012716:	bd70      	pop	{r4, r5, r6, pc}
 8012718:	2001      	movs	r0, #1
 801271a:	4770      	bx	lr

0801271c <uxr_buffer_submessage_header>:
 801271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271e:	4604      	mov	r4, r0
 8012720:	460e      	mov	r6, r1
 8012722:	2104      	movs	r1, #4
 8012724:	4615      	mov	r5, r2
 8012726:	461f      	mov	r7, r3
 8012728:	f7f9 f82e 	bl	800b788 <ucdr_align_to>
 801272c:	2301      	movs	r3, #1
 801272e:	ea47 0203 	orr.w	r2, r7, r3
 8012732:	4631      	mov	r1, r6
 8012734:	7523      	strb	r3, [r4, #20]
 8012736:	4620      	mov	r0, r4
 8012738:	462b      	mov	r3, r5
 801273a:	f000 f8d3 	bl	80128e4 <uxr_serialize_submessage_header>
 801273e:	4620      	mov	r0, r4
 8012740:	f7f9 f838 	bl	800b7b4 <ucdr_buffer_remaining>
 8012744:	42a8      	cmp	r0, r5
 8012746:	bf34      	ite	cc
 8012748:	2000      	movcc	r0, #0
 801274a:	2001      	movcs	r0, #1
 801274c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801274e:	bf00      	nop

08012750 <uxr_read_submessage_header>:
 8012750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	460d      	mov	r5, r1
 8012758:	2104      	movs	r1, #4
 801275a:	4616      	mov	r6, r2
 801275c:	4698      	mov	r8, r3
 801275e:	f7f9 f813 	bl	800b788 <ucdr_align_to>
 8012762:	4620      	mov	r0, r4
 8012764:	f7f9 f826 	bl	800b7b4 <ucdr_buffer_remaining>
 8012768:	2803      	cmp	r0, #3
 801276a:	bf8c      	ite	hi
 801276c:	2701      	movhi	r7, #1
 801276e:	2700      	movls	r7, #0
 8012770:	d802      	bhi.n	8012778 <uxr_read_submessage_header+0x28>
 8012772:	4638      	mov	r0, r7
 8012774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012778:	4633      	mov	r3, r6
 801277a:	4642      	mov	r2, r8
 801277c:	4620      	mov	r0, r4
 801277e:	4629      	mov	r1, r5
 8012780:	f000 f8c4 	bl	801290c <uxr_deserialize_submessage_header>
 8012784:	f898 3000 	ldrb.w	r3, [r8]
 8012788:	f003 0201 	and.w	r2, r3, #1
 801278c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012790:	f888 3000 	strb.w	r3, [r8]
 8012794:	7522      	strb	r2, [r4, #20]
 8012796:	4638      	mov	r0, r7
 8012798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801279c <uxr_submessage_padding>:
 801279c:	f010 0003 	ands.w	r0, r0, #3
 80127a0:	bf18      	it	ne
 80127a2:	f1c0 0004 	rsbne	r0, r0, #4
 80127a6:	4770      	bx	lr

080127a8 <uxr_millis>:
 80127a8:	b510      	push	{r4, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	4669      	mov	r1, sp
 80127ae:	2001      	movs	r0, #1
 80127b0:	f7ef fe32 	bl	8002418 <clock_gettime>
 80127b4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80127b8:	4906      	ldr	r1, [pc, #24]	@ (80127d4 <uxr_millis+0x2c>)
 80127ba:	fba0 0301 	umull	r0, r3, r0, r1
 80127be:	1900      	adds	r0, r0, r4
 80127c0:	fb01 3102 	mla	r1, r1, r2, r3
 80127c4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80127c8:	4a03      	ldr	r2, [pc, #12]	@ (80127d8 <uxr_millis+0x30>)
 80127ca:	2300      	movs	r3, #0
 80127cc:	f7ed ff4c 	bl	8000668 <__aeabi_ldivmod>
 80127d0:	b004      	add	sp, #16
 80127d2:	bd10      	pop	{r4, pc}
 80127d4:	3b9aca00 	.word	0x3b9aca00
 80127d8:	000f4240 	.word	0x000f4240

080127dc <uxr_nanos>:
 80127dc:	b510      	push	{r4, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	4669      	mov	r1, sp
 80127e2:	2001      	movs	r0, #1
 80127e4:	f7ef fe18 	bl	8002418 <clock_gettime>
 80127e8:	4a06      	ldr	r2, [pc, #24]	@ (8012804 <uxr_nanos+0x28>)
 80127ea:	9800      	ldr	r0, [sp, #0]
 80127ec:	9902      	ldr	r1, [sp, #8]
 80127ee:	9c01      	ldr	r4, [sp, #4]
 80127f0:	fba0 0302 	umull	r0, r3, r0, r2
 80127f4:	1840      	adds	r0, r0, r1
 80127f6:	fb02 3304 	mla	r3, r2, r4, r3
 80127fa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80127fe:	b004      	add	sp, #16
 8012800:	bd10      	pop	{r4, pc}
 8012802:	bf00      	nop
 8012804:	3b9aca00 	.word	0x3b9aca00

08012808 <uxr_prepare_output_stream>:
 8012808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801280a:	b087      	sub	sp, #28
 801280c:	2707      	movs	r7, #7
 801280e:	9202      	str	r2, [sp, #8]
 8012810:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012812:	9103      	str	r1, [sp, #12]
 8012814:	2500      	movs	r5, #0
 8012816:	3204      	adds	r2, #4
 8012818:	e9cd 7500 	strd	r7, r5, [sp]
 801281c:	461c      	mov	r4, r3
 801281e:	4606      	mov	r6, r0
 8012820:	f7ff f84c 	bl	80118bc <uxr_prepare_stream_to_write_submessage>
 8012824:	f080 0201 	eor.w	r2, r0, #1
 8012828:	b2d2      	uxtb	r2, r2
 801282a:	75a2      	strb	r2, [r4, #22]
 801282c:	b112      	cbz	r2, 8012834 <uxr_prepare_output_stream+0x2c>
 801282e:	4628      	mov	r0, r5
 8012830:	b007      	add	sp, #28
 8012832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012834:	aa05      	add	r2, sp, #20
 8012836:	9902      	ldr	r1, [sp, #8]
 8012838:	4630      	mov	r0, r6
 801283a:	f7ff f975 	bl	8011b28 <uxr_init_base_object_request>
 801283e:	a905      	add	r1, sp, #20
 8012840:	4605      	mov	r5, r0
 8012842:	4620      	mov	r0, r4
 8012844:	f000 fee6 	bl	8013614 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012848:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801284c:	69a6      	ldr	r6, [r4, #24]
 801284e:	69e7      	ldr	r7, [r4, #28]
 8012850:	1a52      	subs	r2, r2, r1
 8012852:	4620      	mov	r0, r4
 8012854:	f7f8 ff7e 	bl	800b754 <ucdr_init_buffer>
 8012858:	4620      	mov	r0, r4
 801285a:	463a      	mov	r2, r7
 801285c:	4631      	mov	r1, r6
 801285e:	f7f8 ff4d 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8012862:	4628      	mov	r0, r5
 8012864:	b007      	add	sp, #28
 8012866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012868 <uxr_serialize_message_header>:
 8012868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286a:	b083      	sub	sp, #12
 801286c:	4616      	mov	r6, r2
 801286e:	4604      	mov	r4, r0
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	460d      	mov	r5, r1
 8012874:	9f08      	ldr	r7, [sp, #32]
 8012876:	f7f7 fe6d 	bl	800a554 <ucdr_serialize_uint8_t>
 801287a:	4631      	mov	r1, r6
 801287c:	4620      	mov	r0, r4
 801287e:	f7f7 fe69 	bl	800a554 <ucdr_serialize_uint8_t>
 8012882:	9a01      	ldr	r2, [sp, #4]
 8012884:	2101      	movs	r1, #1
 8012886:	4620      	mov	r0, r4
 8012888:	f7f7 ff10 	bl	800a6ac <ucdr_serialize_endian_uint16_t>
 801288c:	062b      	lsls	r3, r5, #24
 801288e:	d501      	bpl.n	8012894 <uxr_serialize_message_header+0x2c>
 8012890:	b003      	add	sp, #12
 8012892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012894:	2204      	movs	r2, #4
 8012896:	4639      	mov	r1, r7
 8012898:	4620      	mov	r0, r4
 801289a:	b003      	add	sp, #12
 801289c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128a0:	f001 bdaa 	b.w	80143f8 <ucdr_serialize_array_uint8_t>

080128a4 <uxr_deserialize_message_header>:
 80128a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128a6:	b083      	sub	sp, #12
 80128a8:	4616      	mov	r6, r2
 80128aa:	4604      	mov	r4, r0
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	460d      	mov	r5, r1
 80128b0:	9f08      	ldr	r7, [sp, #32]
 80128b2:	f7f7 fe65 	bl	800a580 <ucdr_deserialize_uint8_t>
 80128b6:	4631      	mov	r1, r6
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7f7 fe61 	bl	800a580 <ucdr_deserialize_uint8_t>
 80128be:	9a01      	ldr	r2, [sp, #4]
 80128c0:	2101      	movs	r1, #1
 80128c2:	4620      	mov	r0, r4
 80128c4:	f7f7 ffe6 	bl	800a894 <ucdr_deserialize_endian_uint16_t>
 80128c8:	f995 3000 	ldrsb.w	r3, [r5]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	da01      	bge.n	80128d4 <uxr_deserialize_message_header+0x30>
 80128d0:	b003      	add	sp, #12
 80128d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128d4:	2204      	movs	r2, #4
 80128d6:	4639      	mov	r1, r7
 80128d8:	4620      	mov	r0, r4
 80128da:	b003      	add	sp, #12
 80128dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128e0:	f001 bdee 	b.w	80144c0 <ucdr_deserialize_array_uint8_t>

080128e4 <uxr_serialize_submessage_header>:
 80128e4:	b530      	push	{r4, r5, lr}
 80128e6:	b083      	sub	sp, #12
 80128e8:	4615      	mov	r5, r2
 80128ea:	4604      	mov	r4, r0
 80128ec:	9301      	str	r3, [sp, #4]
 80128ee:	f7f7 fe31 	bl	800a554 <ucdr_serialize_uint8_t>
 80128f2:	4629      	mov	r1, r5
 80128f4:	4620      	mov	r0, r4
 80128f6:	f7f7 fe2d 	bl	800a554 <ucdr_serialize_uint8_t>
 80128fa:	9a01      	ldr	r2, [sp, #4]
 80128fc:	2101      	movs	r1, #1
 80128fe:	4620      	mov	r0, r4
 8012900:	b003      	add	sp, #12
 8012902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012906:	f7f7 bed1 	b.w	800a6ac <ucdr_serialize_endian_uint16_t>
 801290a:	bf00      	nop

0801290c <uxr_deserialize_submessage_header>:
 801290c:	b530      	push	{r4, r5, lr}
 801290e:	b083      	sub	sp, #12
 8012910:	4615      	mov	r5, r2
 8012912:	4604      	mov	r4, r0
 8012914:	9301      	str	r3, [sp, #4]
 8012916:	f7f7 fe33 	bl	800a580 <ucdr_deserialize_uint8_t>
 801291a:	4629      	mov	r1, r5
 801291c:	4620      	mov	r0, r4
 801291e:	f7f7 fe2f 	bl	800a580 <ucdr_deserialize_uint8_t>
 8012922:	9a01      	ldr	r2, [sp, #4]
 8012924:	2101      	movs	r1, #1
 8012926:	4620      	mov	r0, r4
 8012928:	b003      	add	sp, #12
 801292a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801292e:	f7f7 bfb1 	b.w	800a894 <ucdr_deserialize_endian_uint16_t>
 8012932:	bf00      	nop

08012934 <uxr_serialize_CLIENT_Representation>:
 8012934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012938:	2204      	movs	r2, #4
 801293a:	460e      	mov	r6, r1
 801293c:	4605      	mov	r5, r0
 801293e:	f001 fd5b 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012942:	2202      	movs	r2, #2
 8012944:	4607      	mov	r7, r0
 8012946:	1d31      	adds	r1, r6, #4
 8012948:	4628      	mov	r0, r5
 801294a:	f001 fd55 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801294e:	4038      	ands	r0, r7
 8012950:	2202      	movs	r2, #2
 8012952:	1db1      	adds	r1, r6, #6
 8012954:	b2c7      	uxtb	r7, r0
 8012956:	4628      	mov	r0, r5
 8012958:	f001 fd4e 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801295c:	2204      	movs	r2, #4
 801295e:	4007      	ands	r7, r0
 8012960:	f106 0108 	add.w	r1, r6, #8
 8012964:	4628      	mov	r0, r5
 8012966:	f001 fd47 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801296a:	7b31      	ldrb	r1, [r6, #12]
 801296c:	4007      	ands	r7, r0
 801296e:	4628      	mov	r0, r5
 8012970:	f7f7 fdf0 	bl	800a554 <ucdr_serialize_uint8_t>
 8012974:	7b71      	ldrb	r1, [r6, #13]
 8012976:	4007      	ands	r7, r0
 8012978:	4628      	mov	r0, r5
 801297a:	f7f7 fdbd 	bl	800a4f8 <ucdr_serialize_bool>
 801297e:	7b73      	ldrb	r3, [r6, #13]
 8012980:	ea07 0800 	and.w	r8, r7, r0
 8012984:	b93b      	cbnz	r3, 8012996 <uxr_serialize_CLIENT_Representation+0x62>
 8012986:	8bb1      	ldrh	r1, [r6, #28]
 8012988:	4628      	mov	r0, r5
 801298a:	f7f7 fe0f 	bl	800a5ac <ucdr_serialize_uint16_t>
 801298e:	ea08 0000 	and.w	r0, r8, r0
 8012992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012996:	6931      	ldr	r1, [r6, #16]
 8012998:	4628      	mov	r0, r5
 801299a:	f7f7 fff1 	bl	800a980 <ucdr_serialize_uint32_t>
 801299e:	6933      	ldr	r3, [r6, #16]
 80129a0:	b1e3      	cbz	r3, 80129dc <uxr_serialize_CLIENT_Representation+0xa8>
 80129a2:	b1c0      	cbz	r0, 80129d6 <uxr_serialize_CLIENT_Representation+0xa2>
 80129a4:	4637      	mov	r7, r6
 80129a6:	f04f 0900 	mov.w	r9, #0
 80129aa:	e001      	b.n	80129b0 <uxr_serialize_CLIENT_Representation+0x7c>
 80129ac:	3708      	adds	r7, #8
 80129ae:	b194      	cbz	r4, 80129d6 <uxr_serialize_CLIENT_Representation+0xa2>
 80129b0:	6979      	ldr	r1, [r7, #20]
 80129b2:	4628      	mov	r0, r5
 80129b4:	f001 fe40 	bl	8014638 <ucdr_serialize_string>
 80129b8:	69b9      	ldr	r1, [r7, #24]
 80129ba:	4604      	mov	r4, r0
 80129bc:	4628      	mov	r0, r5
 80129be:	f001 fe3b 	bl	8014638 <ucdr_serialize_string>
 80129c2:	6933      	ldr	r3, [r6, #16]
 80129c4:	f109 0901 	add.w	r9, r9, #1
 80129c8:	4004      	ands	r4, r0
 80129ca:	4599      	cmp	r9, r3
 80129cc:	b2e4      	uxtb	r4, r4
 80129ce:	d3ed      	bcc.n	80129ac <uxr_serialize_CLIENT_Representation+0x78>
 80129d0:	ea08 0804 	and.w	r8, r8, r4
 80129d4:	e7d7      	b.n	8012986 <uxr_serialize_CLIENT_Representation+0x52>
 80129d6:	f04f 0800 	mov.w	r8, #0
 80129da:	e7d4      	b.n	8012986 <uxr_serialize_CLIENT_Representation+0x52>
 80129dc:	ea08 0800 	and.w	r8, r8, r0
 80129e0:	e7d1      	b.n	8012986 <uxr_serialize_CLIENT_Representation+0x52>
 80129e2:	bf00      	nop

080129e4 <uxr_deserialize_CLIENT_Representation>:
 80129e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129e8:	2204      	movs	r2, #4
 80129ea:	460c      	mov	r4, r1
 80129ec:	4605      	mov	r5, r0
 80129ee:	f001 fd67 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80129f2:	2202      	movs	r2, #2
 80129f4:	4607      	mov	r7, r0
 80129f6:	1d21      	adds	r1, r4, #4
 80129f8:	4628      	mov	r0, r5
 80129fa:	f001 fd61 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80129fe:	4038      	ands	r0, r7
 8012a00:	2202      	movs	r2, #2
 8012a02:	1da1      	adds	r1, r4, #6
 8012a04:	b2c6      	uxtb	r6, r0
 8012a06:	4628      	mov	r0, r5
 8012a08:	f001 fd5a 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8012a0c:	2204      	movs	r2, #4
 8012a0e:	4006      	ands	r6, r0
 8012a10:	f104 0108 	add.w	r1, r4, #8
 8012a14:	4628      	mov	r0, r5
 8012a16:	f001 fd53 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8012a1a:	f104 010c 	add.w	r1, r4, #12
 8012a1e:	4006      	ands	r6, r0
 8012a20:	4628      	mov	r0, r5
 8012a22:	f7f7 fdad 	bl	800a580 <ucdr_deserialize_uint8_t>
 8012a26:	f104 010d 	add.w	r1, r4, #13
 8012a2a:	ea06 0700 	and.w	r7, r6, r0
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f7f7 fd78 	bl	800a524 <ucdr_deserialize_bool>
 8012a34:	7b63      	ldrb	r3, [r4, #13]
 8012a36:	4007      	ands	r7, r0
 8012a38:	b93b      	cbnz	r3, 8012a4a <uxr_deserialize_CLIENT_Representation+0x66>
 8012a3a:	f104 011c 	add.w	r1, r4, #28
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f7f7 feb4 	bl	800a7ac <ucdr_deserialize_uint16_t>
 8012a44:	4038      	ands	r0, r7
 8012a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a4a:	f104 0110 	add.w	r1, r4, #16
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f7f8 f8c6 	bl	800abe0 <ucdr_deserialize_uint32_t>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d903      	bls.n	8012a62 <uxr_deserialize_CLIENT_Representation+0x7e>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	75ab      	strb	r3, [r5, #22]
 8012a5e:	2700      	movs	r7, #0
 8012a60:	e7eb      	b.n	8012a3a <uxr_deserialize_CLIENT_Representation+0x56>
 8012a62:	b30b      	cbz	r3, 8012aa8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d0fa      	beq.n	8012a5e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012a68:	46a0      	mov	r8, r4
 8012a6a:	f04f 0900 	mov.w	r9, #0
 8012a6e:	e001      	b.n	8012a74 <uxr_deserialize_CLIENT_Representation+0x90>
 8012a70:	2e00      	cmp	r6, #0
 8012a72:	d0f4      	beq.n	8012a5e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012a74:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f001 fdeb 	bl	8014658 <ucdr_deserialize_string>
 8012a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a86:	4606      	mov	r6, r0
 8012a88:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	f001 fde3 	bl	8014658 <ucdr_deserialize_string>
 8012a92:	6923      	ldr	r3, [r4, #16]
 8012a94:	f109 0901 	add.w	r9, r9, #1
 8012a98:	4006      	ands	r6, r0
 8012a9a:	4599      	cmp	r9, r3
 8012a9c:	f108 0808 	add.w	r8, r8, #8
 8012aa0:	b2f6      	uxtb	r6, r6
 8012aa2:	d3e5      	bcc.n	8012a70 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012aa4:	4037      	ands	r7, r6
 8012aa6:	e7c8      	b.n	8012a3a <uxr_deserialize_CLIENT_Representation+0x56>
 8012aa8:	4007      	ands	r7, r0
 8012aaa:	e7c6      	b.n	8012a3a <uxr_deserialize_CLIENT_Representation+0x56>

08012aac <uxr_serialize_AGENT_Representation>:
 8012aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ab0:	2204      	movs	r2, #4
 8012ab2:	460f      	mov	r7, r1
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	f001 fc9f 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012aba:	2202      	movs	r2, #2
 8012abc:	4604      	mov	r4, r0
 8012abe:	1d39      	adds	r1, r7, #4
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	f001 fc99 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012ac6:	4020      	ands	r0, r4
 8012ac8:	2202      	movs	r2, #2
 8012aca:	1db9      	adds	r1, r7, #6
 8012acc:	b2c4      	uxtb	r4, r0
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f001 fc92 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012ad4:	7a39      	ldrb	r1, [r7, #8]
 8012ad6:	4004      	ands	r4, r0
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f7f7 fd0d 	bl	800a4f8 <ucdr_serialize_bool>
 8012ade:	7a3b      	ldrb	r3, [r7, #8]
 8012ae0:	ea00 0804 	and.w	r8, r0, r4
 8012ae4:	b913      	cbnz	r3, 8012aec <uxr_serialize_AGENT_Representation+0x40>
 8012ae6:	4640      	mov	r0, r8
 8012ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aec:	68f9      	ldr	r1, [r7, #12]
 8012aee:	4628      	mov	r0, r5
 8012af0:	f7f7 ff46 	bl	800a980 <ucdr_serialize_uint32_t>
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	b303      	cbz	r3, 8012b3a <uxr_serialize_AGENT_Representation+0x8e>
 8012af8:	b1d0      	cbz	r0, 8012b30 <uxr_serialize_AGENT_Representation+0x84>
 8012afa:	463e      	mov	r6, r7
 8012afc:	f04f 0900 	mov.w	r9, #0
 8012b00:	e001      	b.n	8012b06 <uxr_serialize_AGENT_Representation+0x5a>
 8012b02:	3608      	adds	r6, #8
 8012b04:	b1a4      	cbz	r4, 8012b30 <uxr_serialize_AGENT_Representation+0x84>
 8012b06:	6931      	ldr	r1, [r6, #16]
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f001 fd95 	bl	8014638 <ucdr_serialize_string>
 8012b0e:	6971      	ldr	r1, [r6, #20]
 8012b10:	4604      	mov	r4, r0
 8012b12:	4628      	mov	r0, r5
 8012b14:	f001 fd90 	bl	8014638 <ucdr_serialize_string>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f109 0901 	add.w	r9, r9, #1
 8012b1e:	4004      	ands	r4, r0
 8012b20:	4599      	cmp	r9, r3
 8012b22:	b2e4      	uxtb	r4, r4
 8012b24:	d3ed      	bcc.n	8012b02 <uxr_serialize_AGENT_Representation+0x56>
 8012b26:	ea08 0804 	and.w	r8, r8, r4
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b30:	f04f 0800 	mov.w	r8, #0
 8012b34:	4640      	mov	r0, r8
 8012b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b3a:	ea08 0800 	and.w	r8, r8, r0
 8012b3e:	e7d2      	b.n	8012ae6 <uxr_serialize_AGENT_Representation+0x3a>

08012b40 <uxr_serialize_DATAWRITER_Representation>:
 8012b40:	b570      	push	{r4, r5, r6, lr}
 8012b42:	460d      	mov	r5, r1
 8012b44:	7809      	ldrb	r1, [r1, #0]
 8012b46:	4606      	mov	r6, r0
 8012b48:	f7f7 fd04 	bl	800a554 <ucdr_serialize_uint8_t>
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	b130      	cbz	r0, 8012b5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012b50:	782b      	ldrb	r3, [r5, #0]
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d00c      	beq.n	8012b70 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012b56:	2b03      	cmp	r3, #3
 8012b58:	d010      	beq.n	8012b7c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d008      	beq.n	8012b70 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012b5e:	2202      	movs	r2, #2
 8012b60:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012b64:	4630      	mov	r0, r6
 8012b66:	f001 fc47 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012b6a:	4020      	ands	r0, r4
 8012b6c:	b2c0      	uxtb	r0, r0
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	6869      	ldr	r1, [r5, #4]
 8012b72:	4630      	mov	r0, r6
 8012b74:	f001 fd60 	bl	8014638 <ucdr_serialize_string>
 8012b78:	4604      	mov	r4, r0
 8012b7a:	e7f0      	b.n	8012b5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012b7c:	4629      	mov	r1, r5
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012b84:	3104      	adds	r1, #4
 8012b86:	f001 fd2b 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	e7e7      	b.n	8012b5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012b8e:	bf00      	nop

08012b90 <uxr_serialize_ObjectVariant.part.0>:
 8012b90:	b570      	push	{r4, r5, r6, lr}
 8012b92:	780b      	ldrb	r3, [r1, #0]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	460c      	mov	r4, r1
 8012b98:	4605      	mov	r5, r0
 8012b9a:	2b0d      	cmp	r3, #13
 8012b9c:	d854      	bhi.n	8012c48 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012b9e:	e8df f003 	tbb	[pc, r3]
 8012ba2:	0730      	.short	0x0730
 8012ba4:	07071b1b 	.word	0x07071b1b
 8012ba8:	0c530707 	.word	0x0c530707
 8012bac:	494e0c0c 	.word	0x494e0c0c
 8012bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bb4:	3104      	adds	r1, #4
 8012bb6:	f7ff bfc3 	b.w	8012b40 <uxr_serialize_DATAWRITER_Representation>
 8012bba:	7909      	ldrb	r1, [r1, #4]
 8012bbc:	f7f7 fcca 	bl	800a554 <ucdr_serialize_uint8_t>
 8012bc0:	b1e8      	cbz	r0, 8012bfe <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012bc2:	7923      	ldrb	r3, [r4, #4]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d001      	beq.n	8012bcc <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012bc8:	2b02      	cmp	r3, #2
 8012bca:	d13d      	bne.n	8012c48 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012bcc:	68a1      	ldr	r1, [r4, #8]
 8012bce:	4628      	mov	r0, r5
 8012bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bd4:	f001 bd30 	b.w	8014638 <ucdr_serialize_string>
 8012bd8:	7909      	ldrb	r1, [r1, #4]
 8012bda:	f7f7 fcbb 	bl	800a554 <ucdr_serialize_uint8_t>
 8012bde:	4606      	mov	r6, r0
 8012be0:	b120      	cbz	r0, 8012bec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012be2:	7923      	ldrb	r3, [r4, #4]
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d039      	beq.n	8012c5c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d02f      	beq.n	8012c4c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012bec:	2202      	movs	r2, #2
 8012bee:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f001 fc00 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012bf8:	4030      	ands	r0, r6
 8012bfa:	b2c0      	uxtb	r0, r0
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	2000      	movs	r0, #0
 8012c00:	bd70      	pop	{r4, r5, r6, pc}
 8012c02:	7909      	ldrb	r1, [r1, #4]
 8012c04:	f7f7 fca6 	bl	800a554 <ucdr_serialize_uint8_t>
 8012c08:	4606      	mov	r6, r0
 8012c0a:	b158      	cbz	r0, 8012c24 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012c0c:	7923      	ldrb	r3, [r4, #4]
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d003      	beq.n	8012c1a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012c12:	2b03      	cmp	r3, #3
 8012c14:	d028      	beq.n	8012c68 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d104      	bne.n	8012c24 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012c1a:	68a1      	ldr	r1, [r4, #8]
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	f001 fd0b 	bl	8014638 <ucdr_serialize_string>
 8012c22:	4606      	mov	r6, r0
 8012c24:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f7f8 f9fb 	bl	800b024 <ucdr_serialize_int16_t>
 8012c2e:	4030      	ands	r0, r6
 8012c30:	b2c0      	uxtb	r0, r0
 8012c32:	bd70      	pop	{r4, r5, r6, pc}
 8012c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c38:	3104      	adds	r1, #4
 8012c3a:	f7ff be7b 	b.w	8012934 <uxr_serialize_CLIENT_Representation>
 8012c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c42:	3104      	adds	r1, #4
 8012c44:	f7ff bf32 	b.w	8012aac <uxr_serialize_AGENT_Representation>
 8012c48:	2001      	movs	r0, #1
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}
 8012c4c:	68a2      	ldr	r2, [r4, #8]
 8012c4e:	f104 010c 	add.w	r1, r4, #12
 8012c52:	4628      	mov	r0, r5
 8012c54:	f001 fcc4 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 8012c58:	4606      	mov	r6, r0
 8012c5a:	e7c7      	b.n	8012bec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012c5c:	68a1      	ldr	r1, [r4, #8]
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f001 fcea 	bl	8014638 <ucdr_serialize_string>
 8012c64:	4606      	mov	r6, r0
 8012c66:	e7c1      	b.n	8012bec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012c68:	68a2      	ldr	r2, [r4, #8]
 8012c6a:	f104 010c 	add.w	r1, r4, #12
 8012c6e:	4628      	mov	r0, r5
 8012c70:	f001 fcb6 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 8012c74:	4606      	mov	r6, r0
 8012c76:	e7d5      	b.n	8012c24 <uxr_serialize_ObjectVariant.part.0+0x94>

08012c78 <uxr_deserialize_DATAWRITER_Representation>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	4606      	mov	r6, r0
 8012c7c:	460d      	mov	r5, r1
 8012c7e:	f7f7 fc7f 	bl	800a580 <ucdr_deserialize_uint8_t>
 8012c82:	4604      	mov	r4, r0
 8012c84:	b130      	cbz	r0, 8012c94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012c86:	782b      	ldrb	r3, [r5, #0]
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d00c      	beq.n	8012ca6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012c8c:	2b03      	cmp	r3, #3
 8012c8e:	d012      	beq.n	8012cb6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d008      	beq.n	8012ca6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012c94:	2202      	movs	r2, #2
 8012c96:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f001 fc10 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8012ca0:	4020      	ands	r0, r4
 8012ca2:	b2c0      	uxtb	r0, r0
 8012ca4:	bd70      	pop	{r4, r5, r6, pc}
 8012ca6:	6869      	ldr	r1, [r5, #4]
 8012ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cac:	4630      	mov	r0, r6
 8012cae:	f001 fcd3 	bl	8014658 <ucdr_deserialize_string>
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	e7ee      	b.n	8012c94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012cb6:	1d2b      	adds	r3, r5, #4
 8012cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cbc:	f105 0108 	add.w	r1, r5, #8
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	f001 fc9f 	bl	8014604 <ucdr_deserialize_sequence_uint8_t>
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	e7e4      	b.n	8012c94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012cca:	bf00      	nop

08012ccc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	460d      	mov	r5, r1
 8012cd0:	7809      	ldrb	r1, [r1, #0]
 8012cd2:	4606      	mov	r6, r0
 8012cd4:	f7f7 fc10 	bl	800a4f8 <ucdr_serialize_bool>
 8012cd8:	782b      	ldrb	r3, [r5, #0]
 8012cda:	4604      	mov	r4, r0
 8012cdc:	b94b      	cbnz	r3, 8012cf2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012cde:	7a29      	ldrb	r1, [r5, #8]
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f7f7 fc09 	bl	800a4f8 <ucdr_serialize_bool>
 8012ce6:	7a2b      	ldrb	r3, [r5, #8]
 8012ce8:	4004      	ands	r4, r0
 8012cea:	b2e4      	uxtb	r4, r4
 8012cec:	b943      	cbnz	r3, 8012d00 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012cee:	4620      	mov	r0, r4
 8012cf0:	bd70      	pop	{r4, r5, r6, pc}
 8012cf2:	6869      	ldr	r1, [r5, #4]
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f001 fc9f 	bl	8014638 <ucdr_serialize_string>
 8012cfa:	4004      	ands	r4, r0
 8012cfc:	b2e4      	uxtb	r4, r4
 8012cfe:	e7ee      	b.n	8012cde <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012d00:	68e9      	ldr	r1, [r5, #12]
 8012d02:	4630      	mov	r0, r6
 8012d04:	f001 fc98 	bl	8014638 <ucdr_serialize_string>
 8012d08:	4004      	ands	r4, r0
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	bd70      	pop	{r4, r5, r6, pc}
 8012d0e:	bf00      	nop

08012d10 <uxr_serialize_OBJK_Topic_Binary>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	460d      	mov	r5, r1
 8012d14:	6809      	ldr	r1, [r1, #0]
 8012d16:	4606      	mov	r6, r0
 8012d18:	f001 fc8e 	bl	8014638 <ucdr_serialize_string>
 8012d1c:	7929      	ldrb	r1, [r5, #4]
 8012d1e:	4604      	mov	r4, r0
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7f7 fbe9 	bl	800a4f8 <ucdr_serialize_bool>
 8012d26:	792b      	ldrb	r3, [r5, #4]
 8012d28:	4004      	ands	r4, r0
 8012d2a:	b2e4      	uxtb	r4, r4
 8012d2c:	b943      	cbnz	r3, 8012d40 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012d2e:	7b29      	ldrb	r1, [r5, #12]
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7f7 fbe1 	bl	800a4f8 <ucdr_serialize_bool>
 8012d36:	7b2b      	ldrb	r3, [r5, #12]
 8012d38:	4004      	ands	r4, r0
 8012d3a:	b93b      	cbnz	r3, 8012d4c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
 8012d40:	68a9      	ldr	r1, [r5, #8]
 8012d42:	4630      	mov	r0, r6
 8012d44:	f001 fc78 	bl	8014638 <ucdr_serialize_string>
 8012d48:	4004      	ands	r4, r0
 8012d4a:	e7f0      	b.n	8012d2e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012d4c:	6929      	ldr	r1, [r5, #16]
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f001 fc72 	bl	8014638 <ucdr_serialize_string>
 8012d54:	4004      	ands	r4, r0
 8012d56:	b2e4      	uxtb	r4, r4
 8012d58:	4620      	mov	r0, r4
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}

08012d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d60:	460c      	mov	r4, r1
 8012d62:	7809      	ldrb	r1, [r1, #0]
 8012d64:	4606      	mov	r6, r0
 8012d66:	f7f7 fbc7 	bl	800a4f8 <ucdr_serialize_bool>
 8012d6a:	7823      	ldrb	r3, [r4, #0]
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	b96b      	cbnz	r3, 8012d8c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012d70:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012d74:	4630      	mov	r0, r6
 8012d76:	f7f7 fbbf 	bl	800a4f8 <ucdr_serialize_bool>
 8012d7a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012d7e:	4005      	ands	r5, r0
 8012d80:	b2ed      	uxtb	r5, r5
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d169      	bne.n	8012e5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012d86:	4628      	mov	r0, r5
 8012d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8c:	6861      	ldr	r1, [r4, #4]
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f7f7 fdf6 	bl	800a980 <ucdr_serialize_uint32_t>
 8012d94:	6863      	ldr	r3, [r4, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d06b      	beq.n	8012e72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	d067      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d9e:	68a1      	ldr	r1, [r4, #8]
 8012da0:	4630      	mov	r0, r6
 8012da2:	f001 fc49 	bl	8014638 <ucdr_serialize_string>
 8012da6:	6863      	ldr	r3, [r4, #4]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d953      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d05e      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012db0:	68e1      	ldr	r1, [r4, #12]
 8012db2:	4630      	mov	r0, r6
 8012db4:	f001 fc40 	bl	8014638 <ucdr_serialize_string>
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d94a      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d055      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dc2:	6921      	ldr	r1, [r4, #16]
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	f001 fc37 	bl	8014638 <ucdr_serialize_string>
 8012dca:	6863      	ldr	r3, [r4, #4]
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	d941      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d04c      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dd4:	6961      	ldr	r1, [r4, #20]
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f001 fc2e 	bl	8014638 <ucdr_serialize_string>
 8012ddc:	6863      	ldr	r3, [r4, #4]
 8012dde:	2b04      	cmp	r3, #4
 8012de0:	d938      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d043      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012de6:	69a1      	ldr	r1, [r4, #24]
 8012de8:	4630      	mov	r0, r6
 8012dea:	f001 fc25 	bl	8014638 <ucdr_serialize_string>
 8012dee:	6863      	ldr	r3, [r4, #4]
 8012df0:	2b05      	cmp	r3, #5
 8012df2:	d92f      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d03a      	beq.n	8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012df8:	69e1      	ldr	r1, [r4, #28]
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f001 fc1c 	bl	8014638 <ucdr_serialize_string>
 8012e00:	6863      	ldr	r3, [r4, #4]
 8012e02:	2b06      	cmp	r3, #6
 8012e04:	d926      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e06:	b390      	cbz	r0, 8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e08:	6a21      	ldr	r1, [r4, #32]
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f001 fc14 	bl	8014638 <ucdr_serialize_string>
 8012e10:	6863      	ldr	r3, [r4, #4]
 8012e12:	2b07      	cmp	r3, #7
 8012e14:	d91e      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e16:	b350      	cbz	r0, 8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f001 fc0c 	bl	8014638 <ucdr_serialize_string>
 8012e20:	6863      	ldr	r3, [r4, #4]
 8012e22:	2b08      	cmp	r3, #8
 8012e24:	d916      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e26:	b310      	cbz	r0, 8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f001 fc04 	bl	8014638 <ucdr_serialize_string>
 8012e30:	6863      	ldr	r3, [r4, #4]
 8012e32:	2b09      	cmp	r3, #9
 8012e34:	d90e      	bls.n	8012e54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012e36:	b1d0      	cbz	r0, 8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e38:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012e3c:	2709      	movs	r7, #9
 8012e3e:	e000      	b.n	8012e42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012e40:	b1a8      	cbz	r0, 8012e6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012e42:	f858 1b04 	ldr.w	r1, [r8], #4
 8012e46:	4630      	mov	r0, r6
 8012e48:	f001 fbf6 	bl	8014638 <ucdr_serialize_string>
 8012e4c:	6862      	ldr	r2, [r4, #4]
 8012e4e:	3701      	adds	r7, #1
 8012e50:	4297      	cmp	r7, r2
 8012e52:	d3f5      	bcc.n	8012e40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012e54:	4005      	ands	r5, r0
 8012e56:	b2ed      	uxtb	r5, r5
 8012e58:	e78a      	b.n	8012d70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012e5c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012e60:	4630      	mov	r0, r6
 8012e62:	f001 fbbd 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 8012e66:	4005      	ands	r5, r0
 8012e68:	4628      	mov	r0, r5
 8012e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6e:	2500      	movs	r5, #0
 8012e70:	e77e      	b.n	8012d70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e72:	4028      	ands	r0, r5
 8012e74:	b2c5      	uxtb	r5, r0
 8012e76:	e77b      	b.n	8012d70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012e78 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	7809      	ldrb	r1, [r1, #0]
 8012e7e:	4606      	mov	r6, r0
 8012e80:	f7f7 fb3a 	bl	800a4f8 <ucdr_serialize_bool>
 8012e84:	782b      	ldrb	r3, [r5, #0]
 8012e86:	4604      	mov	r4, r0
 8012e88:	b94b      	cbnz	r3, 8012e9e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012e8a:	7a29      	ldrb	r1, [r5, #8]
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7f7 fb33 	bl	800a4f8 <ucdr_serialize_bool>
 8012e92:	7a2b      	ldrb	r3, [r5, #8]
 8012e94:	4004      	ands	r4, r0
 8012e96:	b2e4      	uxtb	r4, r4
 8012e98:	b943      	cbnz	r3, 8012eac <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	bd70      	pop	{r4, r5, r6, pc}
 8012e9e:	6869      	ldr	r1, [r5, #4]
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f001 fbc9 	bl	8014638 <ucdr_serialize_string>
 8012ea6:	4004      	ands	r4, r0
 8012ea8:	b2e4      	uxtb	r4, r4
 8012eaa:	e7ee      	b.n	8012e8a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012eac:	f105 010c 	add.w	r1, r5, #12
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f7ff ff53 	bl	8012d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012eb6:	4004      	ands	r4, r0
 8012eb8:	4620      	mov	r0, r4
 8012eba:	bd70      	pop	{r4, r5, r6, pc}

08012ebc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012ebc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012ec0:	4688      	mov	r8, r1
 8012ec2:	8809      	ldrh	r1, [r1, #0]
 8012ec4:	4681      	mov	r9, r0
 8012ec6:	f7f7 fb71 	bl	800a5ac <ucdr_serialize_uint16_t>
 8012eca:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012ece:	4606      	mov	r6, r0
 8012ed0:	4648      	mov	r0, r9
 8012ed2:	f7f7 fb11 	bl	800a4f8 <ucdr_serialize_bool>
 8012ed6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012eda:	4006      	ands	r6, r0
 8012edc:	b2f5      	uxtb	r5, r6
 8012ede:	b9eb      	cbnz	r3, 8012f1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012ee0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012ee4:	4648      	mov	r0, r9
 8012ee6:	f7f7 fb07 	bl	800a4f8 <ucdr_serialize_bool>
 8012eea:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012eee:	4005      	ands	r5, r0
 8012ef0:	bb7b      	cbnz	r3, 8012f52 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012ef2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012ef6:	4648      	mov	r0, r9
 8012ef8:	f7f7 fafe 	bl	800a4f8 <ucdr_serialize_bool>
 8012efc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012f00:	4005      	ands	r5, r0
 8012f02:	b9f3      	cbnz	r3, 8012f42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012f04:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012f08:	4648      	mov	r0, r9
 8012f0a:	f7f7 faf5 	bl	800a4f8 <ucdr_serialize_bool>
 8012f0e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012f12:	4005      	ands	r5, r0
 8012f14:	b94b      	cbnz	r3, 8012f2a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012f16:	4628      	mov	r0, r5
 8012f18:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012f1c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012f20:	4648      	mov	r0, r9
 8012f22:	f7f7 fb43 	bl	800a5ac <ucdr_serialize_uint16_t>
 8012f26:	4005      	ands	r5, r0
 8012f28:	e7da      	b.n	8012ee0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012f2a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012f2e:	f108 011c 	add.w	r1, r8, #28
 8012f32:	4648      	mov	r0, r9
 8012f34:	f001 fb54 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 8012f38:	4028      	ands	r0, r5
 8012f3a:	b2c5      	uxtb	r5, r0
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012f42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012f46:	4648      	mov	r0, r9
 8012f48:	f7f7 fd1a 	bl	800a980 <ucdr_serialize_uint32_t>
 8012f4c:	4028      	ands	r0, r5
 8012f4e:	b2c5      	uxtb	r5, r0
 8012f50:	e7d8      	b.n	8012f04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012f52:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012f56:	4648      	mov	r0, r9
 8012f58:	f7f7 fd12 	bl	800a980 <ucdr_serialize_uint32_t>
 8012f5c:	4028      	ands	r0, r5
 8012f5e:	b2c5      	uxtb	r5, r0
 8012f60:	e7c7      	b.n	8012ef2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012f62:	bf00      	nop

08012f64 <uxr_serialize_OBJK_DataReader_Binary>:
 8012f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f66:	2202      	movs	r2, #2
 8012f68:	460c      	mov	r4, r1
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	f001 fa44 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8012f70:	78a1      	ldrb	r1, [r4, #2]
 8012f72:	4605      	mov	r5, r0
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7f7 fabf 	bl	800a4f8 <ucdr_serialize_bool>
 8012f7a:	78a3      	ldrb	r3, [r4, #2]
 8012f7c:	4005      	ands	r5, r0
 8012f7e:	b2ed      	uxtb	r5, r5
 8012f80:	b90b      	cbnz	r3, 8012f86 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012f82:	4628      	mov	r0, r5
 8012f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f86:	f104 0108 	add.w	r1, r4, #8
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	f7ff ff96 	bl	8012ebc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012f90:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012f94:	4607      	mov	r7, r0
 8012f96:	4630      	mov	r0, r6
 8012f98:	f7f7 faae 	bl	800a4f8 <ucdr_serialize_bool>
 8012f9c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012fa0:	4038      	ands	r0, r7
 8012fa2:	b2c7      	uxtb	r7, r0
 8012fa4:	b95b      	cbnz	r3, 8012fbe <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012fa6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012faa:	4630      	mov	r0, r6
 8012fac:	f7f7 faa4 	bl	800a4f8 <ucdr_serialize_bool>
 8012fb0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012fb4:	4007      	ands	r7, r0
 8012fb6:	b94b      	cbnz	r3, 8012fcc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012fb8:	403d      	ands	r5, r7
 8012fba:	4628      	mov	r0, r5
 8012fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fbe:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f7f7 ff32 	bl	800ae2c <ucdr_serialize_uint64_t>
 8012fc8:	4007      	ands	r7, r0
 8012fca:	e7ec      	b.n	8012fa6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012fcc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012fce:	4630      	mov	r0, r6
 8012fd0:	f001 fb32 	bl	8014638 <ucdr_serialize_string>
 8012fd4:	4007      	ands	r7, r0
 8012fd6:	b2ff      	uxtb	r7, r7
 8012fd8:	e7ee      	b.n	8012fb8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012fda:	bf00      	nop

08012fdc <uxr_deserialize_ObjectVariant>:
 8012fdc:	b570      	push	{r4, r5, r6, lr}
 8012fde:	4605      	mov	r5, r0
 8012fe0:	460e      	mov	r6, r1
 8012fe2:	f7f7 facd 	bl	800a580 <ucdr_deserialize_uint8_t>
 8012fe6:	b168      	cbz	r0, 8013004 <uxr_deserialize_ObjectVariant+0x28>
 8012fe8:	7833      	ldrb	r3, [r6, #0]
 8012fea:	3b01      	subs	r3, #1
 8012fec:	4604      	mov	r4, r0
 8012fee:	2b0d      	cmp	r3, #13
 8012ff0:	d809      	bhi.n	8013006 <uxr_deserialize_ObjectVariant+0x2a>
 8012ff2:	e8df f003 	tbb	[pc, r3]
 8012ff6:	0a41      	.short	0x0a41
 8012ff8:	0a0a2323 	.word	0x0a0a2323
 8012ffc:	10080a0a 	.word	0x10080a0a
 8013000:	565c1010 	.word	0x565c1010
 8013004:	2400      	movs	r4, #0
 8013006:	4620      	mov	r0, r4
 8013008:	bd70      	pop	{r4, r5, r6, pc}
 801300a:	1d31      	adds	r1, r6, #4
 801300c:	4628      	mov	r0, r5
 801300e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013012:	f7ff be31 	b.w	8012c78 <uxr_deserialize_DATAWRITER_Representation>
 8013016:	1d31      	adds	r1, r6, #4
 8013018:	4628      	mov	r0, r5
 801301a:	f7f7 fab1 	bl	800a580 <ucdr_deserialize_uint8_t>
 801301e:	2800      	cmp	r0, #0
 8013020:	d0f0      	beq.n	8013004 <uxr_deserialize_ObjectVariant+0x28>
 8013022:	7933      	ldrb	r3, [r6, #4]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d001      	beq.n	801302c <uxr_deserialize_ObjectVariant+0x50>
 8013028:	2b02      	cmp	r3, #2
 801302a:	d1ec      	bne.n	8013006 <uxr_deserialize_ObjectVariant+0x2a>
 801302c:	68b1      	ldr	r1, [r6, #8]
 801302e:	4628      	mov	r0, r5
 8013030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013038:	f001 bb0e 	b.w	8014658 <ucdr_deserialize_string>
 801303c:	1d31      	adds	r1, r6, #4
 801303e:	4628      	mov	r0, r5
 8013040:	f7f7 fa9e 	bl	800a580 <ucdr_deserialize_uint8_t>
 8013044:	4604      	mov	r4, r0
 8013046:	b170      	cbz	r0, 8013066 <uxr_deserialize_ObjectVariant+0x8a>
 8013048:	7933      	ldrb	r3, [r6, #4]
 801304a:	2b02      	cmp	r3, #2
 801304c:	d04c      	beq.n	80130e8 <uxr_deserialize_ObjectVariant+0x10c>
 801304e:	2b03      	cmp	r3, #3
 8013050:	d109      	bne.n	8013066 <uxr_deserialize_ObjectVariant+0x8a>
 8013052:	f106 0308 	add.w	r3, r6, #8
 8013056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801305a:	f106 010c 	add.w	r1, r6, #12
 801305e:	4628      	mov	r0, r5
 8013060:	f001 fad0 	bl	8014604 <ucdr_deserialize_sequence_uint8_t>
 8013064:	4604      	mov	r4, r0
 8013066:	2202      	movs	r2, #2
 8013068:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801306c:	4628      	mov	r0, r5
 801306e:	f001 fa27 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013072:	4020      	ands	r0, r4
 8013074:	b2c4      	uxtb	r4, r0
 8013076:	e7c6      	b.n	8013006 <uxr_deserialize_ObjectVariant+0x2a>
 8013078:	1d31      	adds	r1, r6, #4
 801307a:	4628      	mov	r0, r5
 801307c:	f7f7 fa80 	bl	800a580 <ucdr_deserialize_uint8_t>
 8013080:	4604      	mov	r4, r0
 8013082:	b130      	cbz	r0, 8013092 <uxr_deserialize_ObjectVariant+0xb6>
 8013084:	7933      	ldrb	r3, [r6, #4]
 8013086:	2b02      	cmp	r3, #2
 8013088:	d036      	beq.n	80130f8 <uxr_deserialize_ObjectVariant+0x11c>
 801308a:	2b03      	cmp	r3, #3
 801308c:	d03c      	beq.n	8013108 <uxr_deserialize_ObjectVariant+0x12c>
 801308e:	2b01      	cmp	r3, #1
 8013090:	d032      	beq.n	80130f8 <uxr_deserialize_ObjectVariant+0x11c>
 8013092:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013096:	4628      	mov	r0, r5
 8013098:	f7f8 f844 	bl	800b124 <ucdr_deserialize_int16_t>
 801309c:	4020      	ands	r0, r4
 801309e:	b2c4      	uxtb	r4, r0
 80130a0:	e7b1      	b.n	8013006 <uxr_deserialize_ObjectVariant+0x2a>
 80130a2:	1d31      	adds	r1, r6, #4
 80130a4:	4628      	mov	r0, r5
 80130a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130aa:	f7ff bc9b 	b.w	80129e4 <uxr_deserialize_CLIENT_Representation>
 80130ae:	2204      	movs	r2, #4
 80130b0:	18b1      	adds	r1, r6, r2
 80130b2:	4628      	mov	r0, r5
 80130b4:	f001 fa04 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80130b8:	2202      	movs	r2, #2
 80130ba:	f106 0108 	add.w	r1, r6, #8
 80130be:	4604      	mov	r4, r0
 80130c0:	4628      	mov	r0, r5
 80130c2:	f001 f9fd 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80130c6:	2202      	movs	r2, #2
 80130c8:	4004      	ands	r4, r0
 80130ca:	f106 010a 	add.w	r1, r6, #10
 80130ce:	4628      	mov	r0, r5
 80130d0:	f001 f9f6 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80130d4:	b2e4      	uxtb	r4, r4
 80130d6:	4603      	mov	r3, r0
 80130d8:	f106 010c 	add.w	r1, r6, #12
 80130dc:	4628      	mov	r0, r5
 80130de:	401c      	ands	r4, r3
 80130e0:	f7f7 fa20 	bl	800a524 <ucdr_deserialize_bool>
 80130e4:	4004      	ands	r4, r0
 80130e6:	e78e      	b.n	8013006 <uxr_deserialize_ObjectVariant+0x2a>
 80130e8:	68b1      	ldr	r1, [r6, #8]
 80130ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130ee:	4628      	mov	r0, r5
 80130f0:	f001 fab2 	bl	8014658 <ucdr_deserialize_string>
 80130f4:	4604      	mov	r4, r0
 80130f6:	e7b6      	b.n	8013066 <uxr_deserialize_ObjectVariant+0x8a>
 80130f8:	68b1      	ldr	r1, [r6, #8]
 80130fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130fe:	4628      	mov	r0, r5
 8013100:	f001 faaa 	bl	8014658 <ucdr_deserialize_string>
 8013104:	4604      	mov	r4, r0
 8013106:	e7c4      	b.n	8013092 <uxr_deserialize_ObjectVariant+0xb6>
 8013108:	f106 0308 	add.w	r3, r6, #8
 801310c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013110:	f106 010c 	add.w	r1, r6, #12
 8013114:	4628      	mov	r0, r5
 8013116:	f001 fa75 	bl	8014604 <ucdr_deserialize_sequence_uint8_t>
 801311a:	4604      	mov	r4, r0
 801311c:	e7b9      	b.n	8013092 <uxr_deserialize_ObjectVariant+0xb6>
 801311e:	bf00      	nop

08013120 <uxr_deserialize_BaseObjectRequest>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	2202      	movs	r2, #2
 8013124:	4605      	mov	r5, r0
 8013126:	460e      	mov	r6, r1
 8013128:	f001 f9ca 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 801312c:	2202      	movs	r2, #2
 801312e:	4604      	mov	r4, r0
 8013130:	18b1      	adds	r1, r6, r2
 8013132:	4628      	mov	r0, r5
 8013134:	f001 f9c4 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013138:	4020      	ands	r0, r4
 801313a:	b2c0      	uxtb	r0, r0
 801313c:	bd70      	pop	{r4, r5, r6, pc}
 801313e:	bf00      	nop

08013140 <uxr_serialize_ActivityInfoVariant>:
 8013140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013144:	460d      	mov	r5, r1
 8013146:	7809      	ldrb	r1, [r1, #0]
 8013148:	4607      	mov	r7, r0
 801314a:	f7f7 fa03 	bl	800a554 <ucdr_serialize_uint8_t>
 801314e:	4681      	mov	r9, r0
 8013150:	b138      	cbz	r0, 8013162 <uxr_serialize_ActivityInfoVariant+0x22>
 8013152:	782b      	ldrb	r3, [r5, #0]
 8013154:	2b06      	cmp	r3, #6
 8013156:	f000 8082 	beq.w	801325e <uxr_serialize_ActivityInfoVariant+0x11e>
 801315a:	2b0d      	cmp	r3, #13
 801315c:	d016      	beq.n	801318c <uxr_serialize_ActivityInfoVariant+0x4c>
 801315e:	2b05      	cmp	r3, #5
 8013160:	d002      	beq.n	8013168 <uxr_serialize_ActivityInfoVariant+0x28>
 8013162:	4648      	mov	r0, r9
 8013164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013168:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801316c:	4638      	mov	r0, r7
 801316e:	f7f7 ff59 	bl	800b024 <ucdr_serialize_int16_t>
 8013172:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013176:	4681      	mov	r9, r0
 8013178:	4638      	mov	r0, r7
 801317a:	f7f7 fe57 	bl	800ae2c <ucdr_serialize_uint64_t>
 801317e:	ea09 0000 	and.w	r0, r9, r0
 8013182:	fa5f f980 	uxtb.w	r9, r0
 8013186:	4648      	mov	r0, r9
 8013188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801318c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013190:	4638      	mov	r0, r7
 8013192:	f7f7 ff47 	bl	800b024 <ucdr_serialize_int16_t>
 8013196:	68e9      	ldr	r1, [r5, #12]
 8013198:	4681      	mov	r9, r0
 801319a:	4638      	mov	r0, r7
 801319c:	f7f7 fbf0 	bl	800a980 <ucdr_serialize_uint32_t>
 80131a0:	68eb      	ldr	r3, [r5, #12]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0eb      	beq.n	801317e <uxr_serialize_ActivityInfoVariant+0x3e>
 80131a6:	b320      	cbz	r0, 80131f2 <uxr_serialize_ActivityInfoVariant+0xb2>
 80131a8:	f105 080c 	add.w	r8, r5, #12
 80131ac:	2600      	movs	r6, #0
 80131ae:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80131b2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80131b6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80131ba:	4638      	mov	r0, r7
 80131bc:	f7f7 f9ca 	bl	800a554 <ucdr_serialize_uint8_t>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d053      	beq.n	801326c <uxr_serialize_ActivityInfoVariant+0x12c>
 80131c4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80131c8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80131cc:	0074      	lsls	r4, r6, #1
 80131ce:	00c9      	lsls	r1, r1, #3
 80131d0:	2b03      	cmp	r3, #3
 80131d2:	d854      	bhi.n	801327e <uxr_serialize_ActivityInfoVariant+0x13e>
 80131d4:	e8df f003 	tbb	[pc, r3]
 80131d8:	02102132 	.word	0x02102132
 80131dc:	4441      	add	r1, r8
 80131de:	4638      	mov	r0, r7
 80131e0:	6889      	ldr	r1, [r1, #8]
 80131e2:	f001 fa29 	bl	8014638 <ucdr_serialize_string>
 80131e6:	68ea      	ldr	r2, [r5, #12]
 80131e8:	3601      	adds	r6, #1
 80131ea:	4296      	cmp	r6, r2
 80131ec:	d242      	bcs.n	8013274 <uxr_serialize_ActivityInfoVariant+0x134>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d1dd      	bne.n	80131ae <uxr_serialize_ActivityInfoVariant+0x6e>
 80131f2:	f04f 0900 	mov.w	r9, #0
 80131f6:	e7b4      	b.n	8013162 <uxr_serialize_ActivityInfoVariant+0x22>
 80131f8:	3108      	adds	r1, #8
 80131fa:	4441      	add	r1, r8
 80131fc:	2210      	movs	r2, #16
 80131fe:	4638      	mov	r0, r7
 8013200:	f001 f8fa 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013204:	4434      	add	r4, r6
 8013206:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801320a:	4604      	mov	r4, r0
 801320c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801320e:	4638      	mov	r0, r7
 8013210:	f7f7 fbb6 	bl	800a980 <ucdr_serialize_uint32_t>
 8013214:	4020      	ands	r0, r4
 8013216:	b2c0      	uxtb	r0, r0
 8013218:	e7e5      	b.n	80131e6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801321a:	3108      	adds	r1, #8
 801321c:	4441      	add	r1, r8
 801321e:	2204      	movs	r2, #4
 8013220:	4638      	mov	r0, r7
 8013222:	f001 f8e9 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013226:	4434      	add	r4, r6
 8013228:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801322c:	4604      	mov	r4, r0
 801322e:	8b19      	ldrh	r1, [r3, #24]
 8013230:	4638      	mov	r0, r7
 8013232:	f7f7 f9bb 	bl	800a5ac <ucdr_serialize_uint16_t>
 8013236:	4020      	ands	r0, r4
 8013238:	b2c0      	uxtb	r0, r0
 801323a:	e7d4      	b.n	80131e6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801323c:	3108      	adds	r1, #8
 801323e:	4441      	add	r1, r8
 8013240:	2202      	movs	r2, #2
 8013242:	4638      	mov	r0, r7
 8013244:	f001 f8d8 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013248:	4434      	add	r4, r6
 801324a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801324e:	4604      	mov	r4, r0
 8013250:	7d99      	ldrb	r1, [r3, #22]
 8013252:	4638      	mov	r0, r7
 8013254:	f7f7 f97e 	bl	800a554 <ucdr_serialize_uint8_t>
 8013258:	4020      	ands	r0, r4
 801325a:	b2c0      	uxtb	r0, r0
 801325c:	e7c3      	b.n	80131e6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801325e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013262:	4638      	mov	r0, r7
 8013264:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013268:	f7f7 bedc 	b.w	800b024 <ucdr_serialize_int16_t>
 801326c:	68ea      	ldr	r2, [r5, #12]
 801326e:	3601      	adds	r6, #1
 8013270:	42b2      	cmp	r2, r6
 8013272:	d8be      	bhi.n	80131f2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013274:	ea09 0900 	and.w	r9, r9, r0
 8013278:	fa5f f989 	uxtb.w	r9, r9
 801327c:	e771      	b.n	8013162 <uxr_serialize_ActivityInfoVariant+0x22>
 801327e:	68eb      	ldr	r3, [r5, #12]
 8013280:	3601      	adds	r6, #1
 8013282:	429e      	cmp	r6, r3
 8013284:	f10a 0a18 	add.w	sl, sl, #24
 8013288:	d395      	bcc.n	80131b6 <uxr_serialize_ActivityInfoVariant+0x76>
 801328a:	e76a      	b.n	8013162 <uxr_serialize_ActivityInfoVariant+0x22>

0801328c <uxr_deserialize_BaseObjectReply>:
 801328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013290:	2202      	movs	r2, #2
 8013292:	4606      	mov	r6, r0
 8013294:	460f      	mov	r7, r1
 8013296:	f001 f913 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 801329a:	2202      	movs	r2, #2
 801329c:	18b9      	adds	r1, r7, r2
 801329e:	4605      	mov	r5, r0
 80132a0:	4630      	mov	r0, r6
 80132a2:	f001 f90d 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80132a6:	1d39      	adds	r1, r7, #4
 80132a8:	4680      	mov	r8, r0
 80132aa:	4630      	mov	r0, r6
 80132ac:	f7f7 f968 	bl	800a580 <ucdr_deserialize_uint8_t>
 80132b0:	1d79      	adds	r1, r7, #5
 80132b2:	4604      	mov	r4, r0
 80132b4:	4630      	mov	r0, r6
 80132b6:	f7f7 f963 	bl	800a580 <ucdr_deserialize_uint8_t>
 80132ba:	ea05 0508 	and.w	r5, r5, r8
 80132be:	402c      	ands	r4, r5
 80132c0:	4020      	ands	r0, r4
 80132c2:	b2c0      	uxtb	r0, r0
 80132c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132c8 <uxr_serialize_ReadSpecification>:
 80132c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132cc:	460e      	mov	r6, r1
 80132ce:	7809      	ldrb	r1, [r1, #0]
 80132d0:	4607      	mov	r7, r0
 80132d2:	f7f7 f93f 	bl	800a554 <ucdr_serialize_uint8_t>
 80132d6:	7871      	ldrb	r1, [r6, #1]
 80132d8:	4604      	mov	r4, r0
 80132da:	4638      	mov	r0, r7
 80132dc:	f7f7 f93a 	bl	800a554 <ucdr_serialize_uint8_t>
 80132e0:	78b1      	ldrb	r1, [r6, #2]
 80132e2:	4004      	ands	r4, r0
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7f7 f907 	bl	800a4f8 <ucdr_serialize_bool>
 80132ea:	78b3      	ldrb	r3, [r6, #2]
 80132ec:	b2e4      	uxtb	r4, r4
 80132ee:	4004      	ands	r4, r0
 80132f0:	b94b      	cbnz	r3, 8013306 <uxr_serialize_ReadSpecification+0x3e>
 80132f2:	7a31      	ldrb	r1, [r6, #8]
 80132f4:	4638      	mov	r0, r7
 80132f6:	f7f7 f8ff 	bl	800a4f8 <ucdr_serialize_bool>
 80132fa:	7a33      	ldrb	r3, [r6, #8]
 80132fc:	4004      	ands	r4, r0
 80132fe:	b943      	cbnz	r3, 8013312 <uxr_serialize_ReadSpecification+0x4a>
 8013300:	4620      	mov	r0, r4
 8013302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013306:	6871      	ldr	r1, [r6, #4]
 8013308:	4638      	mov	r0, r7
 801330a:	f001 f995 	bl	8014638 <ucdr_serialize_string>
 801330e:	4004      	ands	r4, r0
 8013310:	e7ef      	b.n	80132f2 <uxr_serialize_ReadSpecification+0x2a>
 8013312:	8971      	ldrh	r1, [r6, #10]
 8013314:	4638      	mov	r0, r7
 8013316:	f7f7 f949 	bl	800a5ac <ucdr_serialize_uint16_t>
 801331a:	89b1      	ldrh	r1, [r6, #12]
 801331c:	4605      	mov	r5, r0
 801331e:	4638      	mov	r0, r7
 8013320:	f7f7 f944 	bl	800a5ac <ucdr_serialize_uint16_t>
 8013324:	89f1      	ldrh	r1, [r6, #14]
 8013326:	4005      	ands	r5, r0
 8013328:	4638      	mov	r0, r7
 801332a:	f7f7 f93f 	bl	800a5ac <ucdr_serialize_uint16_t>
 801332e:	8a31      	ldrh	r1, [r6, #16]
 8013330:	4680      	mov	r8, r0
 8013332:	4638      	mov	r0, r7
 8013334:	f7f7 f93a 	bl	800a5ac <ucdr_serialize_uint16_t>
 8013338:	b2ed      	uxtb	r5, r5
 801333a:	4025      	ands	r5, r4
 801333c:	ea08 0505 	and.w	r5, r8, r5
 8013340:	ea00 0405 	and.w	r4, r0, r5
 8013344:	4620      	mov	r0, r4
 8013346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801334a:	bf00      	nop

0801334c <uxr_serialize_CREATE_CLIENT_Payload>:
 801334c:	f7ff baf2 	b.w	8012934 <uxr_serialize_CLIENT_Representation>

08013350 <uxr_serialize_CREATE_Payload>:
 8013350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013352:	2202      	movs	r2, #2
 8013354:	4607      	mov	r7, r0
 8013356:	460e      	mov	r6, r1
 8013358:	f001 f84e 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801335c:	2202      	movs	r2, #2
 801335e:	18b1      	adds	r1, r6, r2
 8013360:	4605      	mov	r5, r0
 8013362:	4638      	mov	r0, r7
 8013364:	f001 f848 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013368:	7931      	ldrb	r1, [r6, #4]
 801336a:	4604      	mov	r4, r0
 801336c:	4638      	mov	r0, r7
 801336e:	f7f7 f8f1 	bl	800a554 <ucdr_serialize_uint8_t>
 8013372:	b170      	cbz	r0, 8013392 <uxr_serialize_CREATE_Payload+0x42>
 8013374:	7933      	ldrb	r3, [r6, #4]
 8013376:	402c      	ands	r4, r5
 8013378:	3b01      	subs	r3, #1
 801337a:	b2e4      	uxtb	r4, r4
 801337c:	2b0d      	cmp	r3, #13
 801337e:	d809      	bhi.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 8013380:	e8df f003 	tbb	[pc, r3]
 8013384:	23230a4c 	.word	0x23230a4c
 8013388:	0a0a0a0a 	.word	0x0a0a0a0a
 801338c:	12121208 	.word	0x12121208
 8013390:	3e45      	.short	0x3e45
 8013392:	2400      	movs	r4, #0
 8013394:	4620      	mov	r0, r4
 8013396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013398:	f106 0108 	add.w	r1, r6, #8
 801339c:	4638      	mov	r0, r7
 801339e:	f7ff fbcf 	bl	8012b40 <uxr_serialize_DATAWRITER_Representation>
 80133a2:	4004      	ands	r4, r0
 80133a4:	4620      	mov	r0, r4
 80133a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a8:	7a31      	ldrb	r1, [r6, #8]
 80133aa:	4638      	mov	r0, r7
 80133ac:	f7f7 f8d2 	bl	800a554 <ucdr_serialize_uint8_t>
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d0ee      	beq.n	8013392 <uxr_serialize_CREATE_Payload+0x42>
 80133b4:	7a33      	ldrb	r3, [r6, #8]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d001      	beq.n	80133be <uxr_serialize_CREATE_Payload+0x6e>
 80133ba:	2b02      	cmp	r3, #2
 80133bc:	d1ea      	bne.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 80133be:	68f1      	ldr	r1, [r6, #12]
 80133c0:	4638      	mov	r0, r7
 80133c2:	f001 f939 	bl	8014638 <ucdr_serialize_string>
 80133c6:	4004      	ands	r4, r0
 80133c8:	e7e4      	b.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 80133ca:	7a31      	ldrb	r1, [r6, #8]
 80133cc:	4638      	mov	r0, r7
 80133ce:	f7f7 f8c1 	bl	800a554 <ucdr_serialize_uint8_t>
 80133d2:	4605      	mov	r5, r0
 80133d4:	b158      	cbz	r0, 80133ee <uxr_serialize_CREATE_Payload+0x9e>
 80133d6:	7a33      	ldrb	r3, [r6, #8]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d034      	beq.n	8013446 <uxr_serialize_CREATE_Payload+0xf6>
 80133dc:	2b03      	cmp	r3, #3
 80133de:	d106      	bne.n	80133ee <uxr_serialize_CREATE_Payload+0x9e>
 80133e0:	68f2      	ldr	r2, [r6, #12]
 80133e2:	f106 0110 	add.w	r1, r6, #16
 80133e6:	4638      	mov	r0, r7
 80133e8:	f001 f8fa 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 80133ec:	4605      	mov	r5, r0
 80133ee:	2202      	movs	r2, #2
 80133f0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80133f4:	4638      	mov	r0, r7
 80133f6:	f000 ffff 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 80133fa:	4028      	ands	r0, r5
 80133fc:	4004      	ands	r4, r0
 80133fe:	e7c9      	b.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 8013400:	f106 0108 	add.w	r1, r6, #8
 8013404:	4638      	mov	r0, r7
 8013406:	f7ff fa95 	bl	8012934 <uxr_serialize_CLIENT_Representation>
 801340a:	4004      	ands	r4, r0
 801340c:	e7c2      	b.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 801340e:	f106 0108 	add.w	r1, r6, #8
 8013412:	4638      	mov	r0, r7
 8013414:	f7ff fb4a 	bl	8012aac <uxr_serialize_AGENT_Representation>
 8013418:	4004      	ands	r4, r0
 801341a:	e7bb      	b.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 801341c:	7a31      	ldrb	r1, [r6, #8]
 801341e:	4638      	mov	r0, r7
 8013420:	f7f7 f898 	bl	800a554 <ucdr_serialize_uint8_t>
 8013424:	4605      	mov	r5, r0
 8013426:	b130      	cbz	r0, 8013436 <uxr_serialize_CREATE_Payload+0xe6>
 8013428:	7a33      	ldrb	r3, [r6, #8]
 801342a:	2b02      	cmp	r3, #2
 801342c:	d011      	beq.n	8013452 <uxr_serialize_CREATE_Payload+0x102>
 801342e:	2b03      	cmp	r3, #3
 8013430:	d015      	beq.n	801345e <uxr_serialize_CREATE_Payload+0x10e>
 8013432:	2b01      	cmp	r3, #1
 8013434:	d00d      	beq.n	8013452 <uxr_serialize_CREATE_Payload+0x102>
 8013436:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801343a:	4638      	mov	r0, r7
 801343c:	f7f7 fdf2 	bl	800b024 <ucdr_serialize_int16_t>
 8013440:	4028      	ands	r0, r5
 8013442:	4004      	ands	r4, r0
 8013444:	e7a6      	b.n	8013394 <uxr_serialize_CREATE_Payload+0x44>
 8013446:	68f1      	ldr	r1, [r6, #12]
 8013448:	4638      	mov	r0, r7
 801344a:	f001 f8f5 	bl	8014638 <ucdr_serialize_string>
 801344e:	4605      	mov	r5, r0
 8013450:	e7cd      	b.n	80133ee <uxr_serialize_CREATE_Payload+0x9e>
 8013452:	68f1      	ldr	r1, [r6, #12]
 8013454:	4638      	mov	r0, r7
 8013456:	f001 f8ef 	bl	8014638 <ucdr_serialize_string>
 801345a:	4605      	mov	r5, r0
 801345c:	e7eb      	b.n	8013436 <uxr_serialize_CREATE_Payload+0xe6>
 801345e:	68f2      	ldr	r2, [r6, #12]
 8013460:	f106 0110 	add.w	r1, r6, #16
 8013464:	4638      	mov	r0, r7
 8013466:	f001 f8bb 	bl	80145e0 <ucdr_serialize_sequence_uint8_t>
 801346a:	4605      	mov	r5, r0
 801346c:	e7e3      	b.n	8013436 <uxr_serialize_CREATE_Payload+0xe6>
 801346e:	bf00      	nop

08013470 <uxr_deserialize_GET_INFO_Payload>:
 8013470:	b570      	push	{r4, r5, r6, lr}
 8013472:	2202      	movs	r2, #2
 8013474:	4605      	mov	r5, r0
 8013476:	460e      	mov	r6, r1
 8013478:	f001 f822 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 801347c:	2202      	movs	r2, #2
 801347e:	18b1      	adds	r1, r6, r2
 8013480:	4604      	mov	r4, r0
 8013482:	4628      	mov	r0, r5
 8013484:	f001 f81c 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013488:	1d31      	adds	r1, r6, #4
 801348a:	4004      	ands	r4, r0
 801348c:	4628      	mov	r0, r5
 801348e:	f7f7 fba7 	bl	800abe0 <ucdr_deserialize_uint32_t>
 8013492:	b2e4      	uxtb	r4, r4
 8013494:	4020      	ands	r0, r4
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <uxr_serialize_DELETE_Payload>:
 8013498:	b570      	push	{r4, r5, r6, lr}
 801349a:	2202      	movs	r2, #2
 801349c:	4605      	mov	r5, r0
 801349e:	460e      	mov	r6, r1
 80134a0:	f000 ffaa 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 80134a4:	2202      	movs	r2, #2
 80134a6:	4604      	mov	r4, r0
 80134a8:	18b1      	adds	r1, r6, r2
 80134aa:	4628      	mov	r0, r5
 80134ac:	f000 ffa4 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 80134b0:	4020      	ands	r0, r4
 80134b2:	b2c0      	uxtb	r0, r0
 80134b4:	bd70      	pop	{r4, r5, r6, pc}
 80134b6:	bf00      	nop

080134b8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80134b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134bc:	4605      	mov	r5, r0
 80134be:	460e      	mov	r6, r1
 80134c0:	f7f7 f85e 	bl	800a580 <ucdr_deserialize_uint8_t>
 80134c4:	1c71      	adds	r1, r6, #1
 80134c6:	4604      	mov	r4, r0
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7f7 f859 	bl	800a580 <ucdr_deserialize_uint8_t>
 80134ce:	2204      	movs	r2, #4
 80134d0:	18b1      	adds	r1, r6, r2
 80134d2:	4680      	mov	r8, r0
 80134d4:	4628      	mov	r0, r5
 80134d6:	f000 fff3 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80134da:	f106 0108 	add.w	r1, r6, #8
 80134de:	4607      	mov	r7, r0
 80134e0:	2202      	movs	r2, #2
 80134e2:	4628      	mov	r0, r5
 80134e4:	f000 ffec 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80134e8:	ea04 0308 	and.w	r3, r4, r8
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	ea03 0407 	and.w	r4, r3, r7
 80134f2:	2202      	movs	r2, #2
 80134f4:	4607      	mov	r7, r0
 80134f6:	f106 010a 	add.w	r1, r6, #10
 80134fa:	4628      	mov	r0, r5
 80134fc:	f000 ffe0 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013500:	f106 010c 	add.w	r1, r6, #12
 8013504:	4603      	mov	r3, r0
 8013506:	4628      	mov	r0, r5
 8013508:	461d      	mov	r5, r3
 801350a:	f7f7 f80b 	bl	800a524 <ucdr_deserialize_bool>
 801350e:	403c      	ands	r4, r7
 8013510:	4025      	ands	r5, r4
 8013512:	4028      	ands	r0, r5
 8013514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013518 <uxr_deserialize_STATUS_Payload>:
 8013518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801351c:	2202      	movs	r2, #2
 801351e:	4606      	mov	r6, r0
 8013520:	460f      	mov	r7, r1
 8013522:	f000 ffcd 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013526:	2202      	movs	r2, #2
 8013528:	18b9      	adds	r1, r7, r2
 801352a:	4605      	mov	r5, r0
 801352c:	4630      	mov	r0, r6
 801352e:	f000 ffc7 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013532:	1d39      	adds	r1, r7, #4
 8013534:	4680      	mov	r8, r0
 8013536:	4630      	mov	r0, r6
 8013538:	f7f7 f822 	bl	800a580 <ucdr_deserialize_uint8_t>
 801353c:	1d79      	adds	r1, r7, #5
 801353e:	4604      	mov	r4, r0
 8013540:	4630      	mov	r0, r6
 8013542:	f7f7 f81d 	bl	800a580 <ucdr_deserialize_uint8_t>
 8013546:	ea05 0508 	and.w	r5, r5, r8
 801354a:	402c      	ands	r4, r5
 801354c:	4020      	ands	r0, r4
 801354e:	b2c0      	uxtb	r0, r0
 8013550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013554 <uxr_serialize_INFO_Payload>:
 8013554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013558:	2202      	movs	r2, #2
 801355a:	460c      	mov	r4, r1
 801355c:	4605      	mov	r5, r0
 801355e:	f000 ff4b 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013562:	2202      	movs	r2, #2
 8013564:	18a1      	adds	r1, r4, r2
 8013566:	4680      	mov	r8, r0
 8013568:	4628      	mov	r0, r5
 801356a:	f000 ff45 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801356e:	7921      	ldrb	r1, [r4, #4]
 8013570:	4607      	mov	r7, r0
 8013572:	4628      	mov	r0, r5
 8013574:	f7f6 ffee 	bl	800a554 <ucdr_serialize_uint8_t>
 8013578:	7961      	ldrb	r1, [r4, #5]
 801357a:	4606      	mov	r6, r0
 801357c:	4628      	mov	r0, r5
 801357e:	f7f6 ffe9 	bl	800a554 <ucdr_serialize_uint8_t>
 8013582:	ea08 0807 	and.w	r8, r8, r7
 8013586:	ea06 0608 	and.w	r6, r6, r8
 801358a:	4006      	ands	r6, r0
 801358c:	7a21      	ldrb	r1, [r4, #8]
 801358e:	4628      	mov	r0, r5
 8013590:	f7f6 ffb2 	bl	800a4f8 <ucdr_serialize_bool>
 8013594:	7a23      	ldrb	r3, [r4, #8]
 8013596:	b2f7      	uxtb	r7, r6
 8013598:	4606      	mov	r6, r0
 801359a:	b96b      	cbnz	r3, 80135b8 <uxr_serialize_INFO_Payload+0x64>
 801359c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80135a0:	4628      	mov	r0, r5
 80135a2:	f7f6 ffa9 	bl	800a4f8 <ucdr_serialize_bool>
 80135a6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80135aa:	4030      	ands	r0, r6
 80135ac:	b2c6      	uxtb	r6, r0
 80135ae:	b983      	cbnz	r3, 80135d2 <uxr_serialize_INFO_Payload+0x7e>
 80135b0:	ea06 0007 	and.w	r0, r6, r7
 80135b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b8:	7b21      	ldrb	r1, [r4, #12]
 80135ba:	4628      	mov	r0, r5
 80135bc:	f7f6 ffca 	bl	800a554 <ucdr_serialize_uint8_t>
 80135c0:	b188      	cbz	r0, 80135e6 <uxr_serialize_INFO_Payload+0x92>
 80135c2:	f104 010c 	add.w	r1, r4, #12
 80135c6:	4628      	mov	r0, r5
 80135c8:	f7ff fae2 	bl	8012b90 <uxr_serialize_ObjectVariant.part.0>
 80135cc:	4030      	ands	r0, r6
 80135ce:	b2c6      	uxtb	r6, r0
 80135d0:	e7e4      	b.n	801359c <uxr_serialize_INFO_Payload+0x48>
 80135d2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80135d6:	4628      	mov	r0, r5
 80135d8:	f7ff fdb2 	bl	8013140 <uxr_serialize_ActivityInfoVariant>
 80135dc:	4006      	ands	r6, r0
 80135de:	ea06 0007 	and.w	r0, r6, r7
 80135e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e6:	4606      	mov	r6, r0
 80135e8:	e7d8      	b.n	801359c <uxr_serialize_INFO_Payload+0x48>
 80135ea:	bf00      	nop

080135ec <uxr_serialize_READ_DATA_Payload>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	2202      	movs	r2, #2
 80135f0:	4605      	mov	r5, r0
 80135f2:	460e      	mov	r6, r1
 80135f4:	f000 ff00 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 80135f8:	2202      	movs	r2, #2
 80135fa:	18b1      	adds	r1, r6, r2
 80135fc:	4604      	mov	r4, r0
 80135fe:	4628      	mov	r0, r5
 8013600:	f000 fefa 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013604:	1d31      	adds	r1, r6, #4
 8013606:	4004      	ands	r4, r0
 8013608:	4628      	mov	r0, r5
 801360a:	f7ff fe5d 	bl	80132c8 <uxr_serialize_ReadSpecification>
 801360e:	b2e4      	uxtb	r4, r4
 8013610:	4020      	ands	r0, r4
 8013612:	bd70      	pop	{r4, r5, r6, pc}

08013614 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013614:	b570      	push	{r4, r5, r6, lr}
 8013616:	2202      	movs	r2, #2
 8013618:	4605      	mov	r5, r0
 801361a:	460e      	mov	r6, r1
 801361c:	f000 feec 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013620:	2202      	movs	r2, #2
 8013622:	4604      	mov	r4, r0
 8013624:	18b1      	adds	r1, r6, r2
 8013626:	4628      	mov	r0, r5
 8013628:	f000 fee6 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801362c:	4020      	ands	r0, r4
 801362e:	b2c0      	uxtb	r0, r0
 8013630:	bd70      	pop	{r4, r5, r6, pc}
 8013632:	bf00      	nop

08013634 <uxr_serialize_ACKNACK_Payload>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	460c      	mov	r4, r1
 8013638:	460e      	mov	r6, r1
 801363a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801363e:	4605      	mov	r5, r0
 8013640:	f7f6 ffb4 	bl	800a5ac <ucdr_serialize_uint16_t>
 8013644:	2202      	movs	r2, #2
 8013646:	4621      	mov	r1, r4
 8013648:	4604      	mov	r4, r0
 801364a:	4628      	mov	r0, r5
 801364c:	f000 fed4 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013650:	7931      	ldrb	r1, [r6, #4]
 8013652:	4004      	ands	r4, r0
 8013654:	4628      	mov	r0, r5
 8013656:	f7f6 ff7d 	bl	800a554 <ucdr_serialize_uint8_t>
 801365a:	b2e4      	uxtb	r4, r4
 801365c:	4020      	ands	r0, r4
 801365e:	bd70      	pop	{r4, r5, r6, pc}

08013660 <uxr_deserialize_ACKNACK_Payload>:
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	4605      	mov	r5, r0
 8013664:	460e      	mov	r6, r1
 8013666:	f7f7 f8a1 	bl	800a7ac <ucdr_deserialize_uint16_t>
 801366a:	2202      	movs	r2, #2
 801366c:	18b1      	adds	r1, r6, r2
 801366e:	4604      	mov	r4, r0
 8013670:	4628      	mov	r0, r5
 8013672:	f000 ff25 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013676:	1d31      	adds	r1, r6, #4
 8013678:	4004      	ands	r4, r0
 801367a:	4628      	mov	r0, r5
 801367c:	f7f6 ff80 	bl	800a580 <ucdr_deserialize_uint8_t>
 8013680:	b2e4      	uxtb	r4, r4
 8013682:	4020      	ands	r0, r4
 8013684:	bd70      	pop	{r4, r5, r6, pc}
 8013686:	bf00      	nop

08013688 <uxr_serialize_HEARTBEAT_Payload>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	460d      	mov	r5, r1
 801368c:	8809      	ldrh	r1, [r1, #0]
 801368e:	4606      	mov	r6, r0
 8013690:	f7f6 ff8c 	bl	800a5ac <ucdr_serialize_uint16_t>
 8013694:	8869      	ldrh	r1, [r5, #2]
 8013696:	4604      	mov	r4, r0
 8013698:	4630      	mov	r0, r6
 801369a:	f7f6 ff87 	bl	800a5ac <ucdr_serialize_uint16_t>
 801369e:	7929      	ldrb	r1, [r5, #4]
 80136a0:	4004      	ands	r4, r0
 80136a2:	4630      	mov	r0, r6
 80136a4:	f7f6 ff56 	bl	800a554 <ucdr_serialize_uint8_t>
 80136a8:	b2e4      	uxtb	r4, r4
 80136aa:	4020      	ands	r0, r4
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	bf00      	nop

080136b0 <uxr_deserialize_HEARTBEAT_Payload>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	4605      	mov	r5, r0
 80136b4:	460e      	mov	r6, r1
 80136b6:	f7f7 f879 	bl	800a7ac <ucdr_deserialize_uint16_t>
 80136ba:	1cb1      	adds	r1, r6, #2
 80136bc:	4604      	mov	r4, r0
 80136be:	4628      	mov	r0, r5
 80136c0:	f7f7 f874 	bl	800a7ac <ucdr_deserialize_uint16_t>
 80136c4:	1d31      	adds	r1, r6, #4
 80136c6:	4004      	ands	r4, r0
 80136c8:	4628      	mov	r0, r5
 80136ca:	f7f6 ff59 	bl	800a580 <ucdr_deserialize_uint8_t>
 80136ce:	b2e4      	uxtb	r4, r4
 80136d0:	4020      	ands	r0, r4
 80136d2:	bd70      	pop	{r4, r5, r6, pc}

080136d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	4605      	mov	r5, r0
 80136da:	460e      	mov	r6, r1
 80136dc:	f7f7 fe2e 	bl	800b33c <ucdr_deserialize_int32_t>
 80136e0:	1d31      	adds	r1, r6, #4
 80136e2:	4607      	mov	r7, r0
 80136e4:	4628      	mov	r0, r5
 80136e6:	f7f7 fa7b 	bl	800abe0 <ucdr_deserialize_uint32_t>
 80136ea:	f106 0108 	add.w	r1, r6, #8
 80136ee:	4680      	mov	r8, r0
 80136f0:	4628      	mov	r0, r5
 80136f2:	f7f7 fe23 	bl	800b33c <ucdr_deserialize_int32_t>
 80136f6:	f106 010c 	add.w	r1, r6, #12
 80136fa:	4604      	mov	r4, r0
 80136fc:	4628      	mov	r0, r5
 80136fe:	f7f7 fa6f 	bl	800abe0 <ucdr_deserialize_uint32_t>
 8013702:	ea07 0708 	and.w	r7, r7, r8
 8013706:	403c      	ands	r4, r7
 8013708:	f106 0110 	add.w	r1, r6, #16
 801370c:	4004      	ands	r4, r0
 801370e:	4628      	mov	r0, r5
 8013710:	f7f7 fe14 	bl	800b33c <ucdr_deserialize_int32_t>
 8013714:	f106 0114 	add.w	r1, r6, #20
 8013718:	4607      	mov	r7, r0
 801371a:	4628      	mov	r0, r5
 801371c:	f7f7 fa60 	bl	800abe0 <ucdr_deserialize_uint32_t>
 8013720:	b2e4      	uxtb	r4, r4
 8013722:	403c      	ands	r4, r7
 8013724:	4020      	ands	r0, r4
 8013726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801372a:	bf00      	nop

0801372c <uxr_serialize_SampleIdentity>:
 801372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013730:	220c      	movs	r2, #12
 8013732:	4604      	mov	r4, r0
 8013734:	460d      	mov	r5, r1
 8013736:	f000 fe5f 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 801373a:	2203      	movs	r2, #3
 801373c:	f105 010c 	add.w	r1, r5, #12
 8013740:	4607      	mov	r7, r0
 8013742:	4620      	mov	r0, r4
 8013744:	f000 fe58 	bl	80143f8 <ucdr_serialize_array_uint8_t>
 8013748:	7be9      	ldrb	r1, [r5, #15]
 801374a:	4680      	mov	r8, r0
 801374c:	4620      	mov	r0, r4
 801374e:	f7f6 ff01 	bl	800a554 <ucdr_serialize_uint8_t>
 8013752:	6929      	ldr	r1, [r5, #16]
 8013754:	4606      	mov	r6, r0
 8013756:	4620      	mov	r0, r4
 8013758:	f7f7 fd58 	bl	800b20c <ucdr_serialize_int32_t>
 801375c:	6969      	ldr	r1, [r5, #20]
 801375e:	4603      	mov	r3, r0
 8013760:	4620      	mov	r0, r4
 8013762:	ea07 0708 	and.w	r7, r7, r8
 8013766:	461c      	mov	r4, r3
 8013768:	f7f7 f90a 	bl	800a980 <ucdr_serialize_uint32_t>
 801376c:	403e      	ands	r6, r7
 801376e:	4034      	ands	r4, r6
 8013770:	4020      	ands	r0, r4
 8013772:	b2c0      	uxtb	r0, r0
 8013774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013778 <uxr_deserialize_SampleIdentity>:
 8013778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377c:	220c      	movs	r2, #12
 801377e:	4604      	mov	r4, r0
 8013780:	460d      	mov	r5, r1
 8013782:	f000 fe9d 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013786:	2203      	movs	r2, #3
 8013788:	f105 010c 	add.w	r1, r5, #12
 801378c:	4607      	mov	r7, r0
 801378e:	4620      	mov	r0, r4
 8013790:	f000 fe96 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8013794:	f105 010f 	add.w	r1, r5, #15
 8013798:	4680      	mov	r8, r0
 801379a:	4620      	mov	r0, r4
 801379c:	f7f6 fef0 	bl	800a580 <ucdr_deserialize_uint8_t>
 80137a0:	f105 0110 	add.w	r1, r5, #16
 80137a4:	4606      	mov	r6, r0
 80137a6:	4620      	mov	r0, r4
 80137a8:	f7f7 fdc8 	bl	800b33c <ucdr_deserialize_int32_t>
 80137ac:	f105 0114 	add.w	r1, r5, #20
 80137b0:	4603      	mov	r3, r0
 80137b2:	4620      	mov	r0, r4
 80137b4:	ea07 0708 	and.w	r7, r7, r8
 80137b8:	461c      	mov	r4, r3
 80137ba:	f7f7 fa11 	bl	800abe0 <ucdr_deserialize_uint32_t>
 80137be:	403e      	ands	r6, r7
 80137c0:	4034      	ands	r4, r6
 80137c2:	4020      	ands	r0, r4
 80137c4:	b2c0      	uxtb	r0, r0
 80137c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ca:	bf00      	nop

080137cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80137cc:	280b      	cmp	r0, #11
 80137ce:	dc0d      	bgt.n	80137ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	db09      	blt.n	80137e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80137d4:	280b      	cmp	r0, #11
 80137d6:	d807      	bhi.n	80137e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80137d8:	e8df f000 	tbb	[pc, r0]
 80137dc:	07060607 	.word	0x07060607
 80137e0:	06060606 	.word	0x06060606
 80137e4:	07070606 	.word	0x07070606
 80137e8:	2001      	movs	r0, #1
 80137ea:	4770      	bx	lr
 80137ec:	28cb      	cmp	r0, #203	@ 0xcb
 80137ee:	bf18      	it	ne
 80137f0:	2001      	movne	r0, #1
 80137f2:	4770      	bx	lr

080137f4 <rcl_get_default_domain_id>:
 80137f4:	b530      	push	{r4, r5, lr}
 80137f6:	b083      	sub	sp, #12
 80137f8:	2300      	movs	r3, #0
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	b1d0      	cbz	r0, 8013834 <rcl_get_default_domain_id+0x40>
 80137fe:	4604      	mov	r4, r0
 8013800:	4669      	mov	r1, sp
 8013802:	4815      	ldr	r0, [pc, #84]	@ (8013858 <rcl_get_default_domain_id+0x64>)
 8013804:	f7fa fcb8 	bl	800e178 <rcutils_get_env>
 8013808:	4602      	mov	r2, r0
 801380a:	b110      	cbz	r0, 8013812 <rcl_get_default_domain_id+0x1e>
 801380c:	2001      	movs	r0, #1
 801380e:	b003      	add	sp, #12
 8013810:	bd30      	pop	{r4, r5, pc}
 8013812:	9b00      	ldr	r3, [sp, #0]
 8013814:	b18b      	cbz	r3, 801383a <rcl_get_default_domain_id+0x46>
 8013816:	7818      	ldrb	r0, [r3, #0]
 8013818:	2800      	cmp	r0, #0
 801381a:	d0f8      	beq.n	801380e <rcl_get_default_domain_id+0x1a>
 801381c:	a901      	add	r1, sp, #4
 801381e:	4618      	mov	r0, r3
 8013820:	9201      	str	r2, [sp, #4]
 8013822:	f001 fe9b 	bl	801555c <strtoul>
 8013826:	4605      	mov	r5, r0
 8013828:	b150      	cbz	r0, 8013840 <rcl_get_default_domain_id+0x4c>
 801382a:	1c43      	adds	r3, r0, #1
 801382c:	d00d      	beq.n	801384a <rcl_get_default_domain_id+0x56>
 801382e:	6025      	str	r5, [r4, #0]
 8013830:	2000      	movs	r0, #0
 8013832:	e7ec      	b.n	801380e <rcl_get_default_domain_id+0x1a>
 8013834:	200b      	movs	r0, #11
 8013836:	b003      	add	sp, #12
 8013838:	bd30      	pop	{r4, r5, pc}
 801383a:	4618      	mov	r0, r3
 801383c:	b003      	add	sp, #12
 801383e:	bd30      	pop	{r4, r5, pc}
 8013840:	9b01      	ldr	r3, [sp, #4]
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d0f2      	beq.n	801382e <rcl_get_default_domain_id+0x3a>
 8013848:	e7e0      	b.n	801380c <rcl_get_default_domain_id+0x18>
 801384a:	f002 f8c1 	bl	80159d0 <__errno>
 801384e:	6803      	ldr	r3, [r0, #0]
 8013850:	2b22      	cmp	r3, #34	@ 0x22
 8013852:	d1ec      	bne.n	801382e <rcl_get_default_domain_id+0x3a>
 8013854:	e7da      	b.n	801380c <rcl_get_default_domain_id+0x18>
 8013856:	bf00      	nop
 8013858:	0801738c 	.word	0x0801738c

0801385c <rcl_expand_topic_name>:
 801385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013860:	b08b      	sub	sp, #44	@ 0x2c
 8013862:	9306      	str	r3, [sp, #24]
 8013864:	2800      	cmp	r0, #0
 8013866:	f000 80ad 	beq.w	80139c4 <rcl_expand_topic_name+0x168>
 801386a:	460e      	mov	r6, r1
 801386c:	2900      	cmp	r1, #0
 801386e:	f000 80a9 	beq.w	80139c4 <rcl_expand_topic_name+0x168>
 8013872:	4617      	mov	r7, r2
 8013874:	2a00      	cmp	r2, #0
 8013876:	f000 80a5 	beq.w	80139c4 <rcl_expand_topic_name+0x168>
 801387a:	2b00      	cmp	r3, #0
 801387c:	f000 80a2 	beq.w	80139c4 <rcl_expand_topic_name+0x168>
 8013880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 809e 	beq.w	80139c4 <rcl_expand_topic_name+0x168>
 8013888:	2200      	movs	r2, #0
 801388a:	a909      	add	r1, sp, #36	@ 0x24
 801388c:	4680      	mov	r8, r0
 801388e:	f000 fa1d 	bl	8013ccc <rcl_validate_topic_name>
 8013892:	4604      	mov	r4, r0
 8013894:	2800      	cmp	r0, #0
 8013896:	f040 8096 	bne.w	80139c6 <rcl_expand_topic_name+0x16a>
 801389a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801389c:	2b00      	cmp	r3, #0
 801389e:	f040 809a 	bne.w	80139d6 <rcl_expand_topic_name+0x17a>
 80138a2:	4602      	mov	r2, r0
 80138a4:	a909      	add	r1, sp, #36	@ 0x24
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7fb f830 	bl	800e90c <rmw_validate_node_name>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	f040 808e 	bne.w	80139ce <rcl_expand_topic_name+0x172>
 80138b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138b4:	2a00      	cmp	r2, #0
 80138b6:	f040 8093 	bne.w	80139e0 <rcl_expand_topic_name+0x184>
 80138ba:	a909      	add	r1, sp, #36	@ 0x24
 80138bc:	4638      	mov	r0, r7
 80138be:	f7fb f807 	bl	800e8d0 <rmw_validate_namespace>
 80138c2:	2800      	cmp	r0, #0
 80138c4:	f040 8083 	bne.w	80139ce <rcl_expand_topic_name+0x172>
 80138c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80138ca:	2c00      	cmp	r4, #0
 80138cc:	f040 80ed 	bne.w	8013aaa <rcl_expand_topic_name+0x24e>
 80138d0:	217b      	movs	r1, #123	@ 0x7b
 80138d2:	4640      	mov	r0, r8
 80138d4:	f001 fff0 	bl	80158b8 <strchr>
 80138d8:	f898 3000 	ldrb.w	r3, [r8]
 80138dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80138de:	4605      	mov	r5, r0
 80138e0:	f000 809e 	beq.w	8013a20 <rcl_expand_topic_name+0x1c4>
 80138e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80138e6:	f040 80a2 	bne.w	8013a2e <rcl_expand_topic_name+0x1d2>
 80138ea:	4638      	mov	r0, r7
 80138ec:	f7ec fc82 	bl	80001f4 <strlen>
 80138f0:	4a82      	ldr	r2, [pc, #520]	@ (8013afc <rcl_expand_topic_name+0x2a0>)
 80138f2:	4b83      	ldr	r3, [pc, #524]	@ (8013b00 <rcl_expand_topic_name+0x2a4>)
 80138f4:	2801      	cmp	r0, #1
 80138f6:	bf18      	it	ne
 80138f8:	4613      	movne	r3, r2
 80138fa:	9302      	str	r3, [sp, #8]
 80138fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8013904:	f108 0301 	add.w	r3, r8, #1
 8013908:	9305      	str	r3, [sp, #20]
 801390a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	ab14      	add	r3, sp, #80	@ 0x50
 8013912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013914:	f7fa fc48 	bl	800e1a8 <rcutils_format_string_limit>
 8013918:	4682      	mov	sl, r0
 801391a:	2800      	cmp	r0, #0
 801391c:	f000 80c7 	beq.w	8013aae <rcl_expand_topic_name+0x252>
 8013920:	2d00      	cmp	r5, #0
 8013922:	f000 80a2 	beq.w	8013a6a <rcl_expand_topic_name+0x20e>
 8013926:	217b      	movs	r1, #123	@ 0x7b
 8013928:	f001 ffc6 	bl	80158b8 <strchr>
 801392c:	46d1      	mov	r9, sl
 801392e:	4605      	mov	r5, r0
 8013930:	9407      	str	r4, [sp, #28]
 8013932:	46d3      	mov	fp, sl
 8013934:	464c      	mov	r4, r9
 8013936:	2d00      	cmp	r5, #0
 8013938:	f000 80be 	beq.w	8013ab8 <rcl_expand_topic_name+0x25c>
 801393c:	217d      	movs	r1, #125	@ 0x7d
 801393e:	4620      	mov	r0, r4
 8013940:	f001 ffba 	bl	80158b8 <strchr>
 8013944:	eba0 0905 	sub.w	r9, r0, r5
 8013948:	f109 0a01 	add.w	sl, r9, #1
 801394c:	486d      	ldr	r0, [pc, #436]	@ (8013b04 <rcl_expand_topic_name+0x2a8>)
 801394e:	4652      	mov	r2, sl
 8013950:	4629      	mov	r1, r5
 8013952:	f001 ffbe 	bl	80158d2 <strncmp>
 8013956:	2800      	cmp	r0, #0
 8013958:	d067      	beq.n	8013a2a <rcl_expand_topic_name+0x1ce>
 801395a:	486b      	ldr	r0, [pc, #428]	@ (8013b08 <rcl_expand_topic_name+0x2ac>)
 801395c:	4652      	mov	r2, sl
 801395e:	4629      	mov	r1, r5
 8013960:	f001 ffb7 	bl	80158d2 <strncmp>
 8013964:	b130      	cbz	r0, 8013974 <rcl_expand_topic_name+0x118>
 8013966:	4869      	ldr	r0, [pc, #420]	@ (8013b0c <rcl_expand_topic_name+0x2b0>)
 8013968:	4652      	mov	r2, sl
 801396a:	4629      	mov	r1, r5
 801396c:	f001 ffb1 	bl	80158d2 <strncmp>
 8013970:	2800      	cmp	r0, #0
 8013972:	d137      	bne.n	80139e4 <rcl_expand_topic_name+0x188>
 8013974:	46b9      	mov	r9, r7
 8013976:	ab16      	add	r3, sp, #88	@ 0x58
 8013978:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801397c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013980:	ab14      	add	r3, sp, #80	@ 0x50
 8013982:	4628      	mov	r0, r5
 8013984:	cb0c      	ldmia	r3, {r2, r3}
 8013986:	4651      	mov	r1, sl
 8013988:	f7fa fd4a 	bl	800e420 <rcutils_strndup>
 801398c:	4605      	mov	r5, r0
 801398e:	2800      	cmp	r0, #0
 8013990:	f000 809c 	beq.w	8013acc <rcl_expand_topic_name+0x270>
 8013994:	464a      	mov	r2, r9
 8013996:	4620      	mov	r0, r4
 8013998:	ab14      	add	r3, sp, #80	@ 0x50
 801399a:	4629      	mov	r1, r5
 801399c:	f7fa fc3e 	bl	800e21c <rcutils_repl_str>
 80139a0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80139a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139a4:	4604      	mov	r4, r0
 80139a6:	4628      	mov	r0, r5
 80139a8:	4798      	blx	r3
 80139aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80139ae:	4658      	mov	r0, fp
 80139b0:	4798      	blx	r3
 80139b2:	2c00      	cmp	r4, #0
 80139b4:	d07b      	beq.n	8013aae <rcl_expand_topic_name+0x252>
 80139b6:	217b      	movs	r1, #123	@ 0x7b
 80139b8:	4620      	mov	r0, r4
 80139ba:	f001 ff7d 	bl	80158b8 <strchr>
 80139be:	46a3      	mov	fp, r4
 80139c0:	4605      	mov	r5, r0
 80139c2:	e7b8      	b.n	8013936 <rcl_expand_topic_name+0xda>
 80139c4:	240b      	movs	r4, #11
 80139c6:	4620      	mov	r0, r4
 80139c8:	b00b      	add	sp, #44	@ 0x2c
 80139ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ce:	f7ff fefd 	bl	80137cc <rcl_convert_rmw_ret_to_rcl_ret>
 80139d2:	4604      	mov	r4, r0
 80139d4:	e7f7      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 80139d6:	2467      	movs	r4, #103	@ 0x67
 80139d8:	4620      	mov	r0, r4
 80139da:	b00b      	add	sp, #44	@ 0x2c
 80139dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e0:	24c9      	movs	r4, #201	@ 0xc9
 80139e2:	e7f0      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 80139e4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80139e8:	9806      	ldr	r0, [sp, #24]
 80139ea:	1c69      	adds	r1, r5, #1
 80139ec:	f7fa fe32 	bl	800e654 <rcutils_string_map_getn>
 80139f0:	4681      	mov	r9, r0
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d1bf      	bne.n	8013976 <rcl_expand_topic_name+0x11a>
 80139f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139f8:	aa16      	add	r2, sp, #88	@ 0x58
 80139fa:	6018      	str	r0, [r3, #0]
 80139fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80139fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a02:	ab14      	add	r3, sp, #80	@ 0x50
 8013a04:	cb0c      	ldmia	r3, {r2, r3}
 8013a06:	4651      	mov	r1, sl
 8013a08:	4628      	mov	r0, r5
 8013a0a:	f7fa fd09 	bl	800e420 <rcutils_strndup>
 8013a0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013a10:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a12:	4798      	blx	r3
 8013a14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a16:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013a18:	4658      	mov	r0, fp
 8013a1a:	2469      	movs	r4, #105	@ 0x69
 8013a1c:	4798      	blx	r3
 8013a1e:	e7d2      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d05b      	beq.n	8013adc <rcl_expand_topic_name+0x280>
 8013a24:	46c1      	mov	r9, r8
 8013a26:	46a2      	mov	sl, r4
 8013a28:	e782      	b.n	8013930 <rcl_expand_topic_name+0xd4>
 8013a2a:	46b1      	mov	r9, r6
 8013a2c:	e7a3      	b.n	8013976 <rcl_expand_topic_name+0x11a>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d1f8      	bne.n	8013a24 <rcl_expand_topic_name+0x1c8>
 8013a32:	4638      	mov	r0, r7
 8013a34:	f7ec fbde 	bl	80001f4 <strlen>
 8013a38:	4a35      	ldr	r2, [pc, #212]	@ (8013b10 <rcl_expand_topic_name+0x2b4>)
 8013a3a:	4b36      	ldr	r3, [pc, #216]	@ (8013b14 <rcl_expand_topic_name+0x2b8>)
 8013a3c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a40:	2801      	cmp	r0, #1
 8013a42:	bf18      	it	ne
 8013a44:	4613      	movne	r3, r2
 8013a46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013a4a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013a4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013a50:	9703      	str	r7, [sp, #12]
 8013a52:	9200      	str	r2, [sp, #0]
 8013a54:	ab14      	add	r3, sp, #80	@ 0x50
 8013a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a58:	f7fa fba6 	bl	800e1a8 <rcutils_format_string_limit>
 8013a5c:	4682      	mov	sl, r0
 8013a5e:	4653      	mov	r3, sl
 8013a60:	b32b      	cbz	r3, 8013aae <rcl_expand_topic_name+0x252>
 8013a62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a64:	f8c3 a000 	str.w	sl, [r3]
 8013a68:	e7ad      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8013a6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013a70:	d0f7      	beq.n	8013a62 <rcl_expand_topic_name+0x206>
 8013a72:	4638      	mov	r0, r7
 8013a74:	f7ec fbbe 	bl	80001f4 <strlen>
 8013a78:	4a25      	ldr	r2, [pc, #148]	@ (8013b10 <rcl_expand_topic_name+0x2b4>)
 8013a7a:	4b26      	ldr	r3, [pc, #152]	@ (8013b14 <rcl_expand_topic_name+0x2b8>)
 8013a7c:	f8cd a010 	str.w	sl, [sp, #16]
 8013a80:	2801      	cmp	r0, #1
 8013a82:	bf18      	it	ne
 8013a84:	4613      	movne	r3, r2
 8013a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013a8a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013a8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013a90:	9703      	str	r7, [sp, #12]
 8013a92:	9200      	str	r2, [sp, #0]
 8013a94:	ab14      	add	r3, sp, #80	@ 0x50
 8013a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a98:	f7fa fb86 	bl	800e1a8 <rcutils_format_string_limit>
 8013a9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a9e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013aa0:	4605      	mov	r5, r0
 8013aa2:	4650      	mov	r0, sl
 8013aa4:	4798      	blx	r3
 8013aa6:	46aa      	mov	sl, r5
 8013aa8:	e7d9      	b.n	8013a5e <rcl_expand_topic_name+0x202>
 8013aaa:	24ca      	movs	r4, #202	@ 0xca
 8013aac:	e78b      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013aae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	6013      	str	r3, [r2, #0]
 8013ab4:	240a      	movs	r4, #10
 8013ab6:	e786      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013ab8:	465b      	mov	r3, fp
 8013aba:	9c07      	ldr	r4, [sp, #28]
 8013abc:	46da      	mov	sl, fp
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1d3      	bne.n	8013a6a <rcl_expand_topic_name+0x20e>
 8013ac2:	f898 3000 	ldrb.w	r3, [r8]
 8013ac6:	2b2f      	cmp	r3, #47	@ 0x2f
 8013ac8:	d0cb      	beq.n	8013a62 <rcl_expand_topic_name+0x206>
 8013aca:	e7b2      	b.n	8013a32 <rcl_expand_topic_name+0x1d6>
 8013acc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8013ad0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013ad2:	6015      	str	r5, [r2, #0]
 8013ad4:	4658      	mov	r0, fp
 8013ad6:	4798      	blx	r3
 8013ad8:	240a      	movs	r4, #10
 8013ada:	e774      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013adc:	ab17      	add	r3, sp, #92	@ 0x5c
 8013ade:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ae2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ae6:	ab14      	add	r3, sp, #80	@ 0x50
 8013ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013aea:	4640      	mov	r0, r8
 8013aec:	f7fa fc76 	bl	800e3dc <rcutils_strdup>
 8013af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013af2:	2800      	cmp	r0, #0
 8013af4:	6018      	str	r0, [r3, #0]
 8013af6:	bf08      	it	eq
 8013af8:	240a      	moveq	r4, #10
 8013afa:	e764      	b.n	80139c6 <rcl_expand_topic_name+0x16a>
 8013afc:	0801739c 	.word	0x0801739c
 8013b00:	08017160 	.word	0x08017160
 8013b04:	080173a4 	.word	0x080173a4
 8013b08:	080173ac 	.word	0x080173ac
 8013b0c:	080173b4 	.word	0x080173b4
 8013b10:	08016cb8 	.word	0x08016cb8
 8013b14:	08016cb0 	.word	0x08016cb0

08013b18 <rcl_get_default_topic_name_substitutions>:
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	bf0c      	ite	eq
 8013b1c:	200b      	moveq	r0, #11
 8013b1e:	2000      	movne	r0, #0
 8013b20:	4770      	bx	lr
 8013b22:	bf00      	nop

08013b24 <rcl_get_zero_initialized_guard_condition>:
 8013b24:	4a03      	ldr	r2, [pc, #12]	@ (8013b34 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013b26:	4603      	mov	r3, r0
 8013b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b30:	4618      	mov	r0, r3
 8013b32:	4770      	bx	lr
 8013b34:	080173c0 	.word	0x080173c0

08013b38 <rcl_guard_condition_init_from_rmw>:
 8013b38:	b082      	sub	sp, #8
 8013b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013b44:	4604      	mov	r4, r0
 8013b46:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013b4a:	460e      	mov	r6, r1
 8013b4c:	4617      	mov	r7, r2
 8013b4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b52:	f10d 0e04 	add.w	lr, sp, #4
 8013b56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b5a:	f8dc 3000 	ldr.w	r3, [ip]
 8013b5e:	f8ce 3000 	str.w	r3, [lr]
 8013b62:	a801      	add	r0, sp, #4
 8013b64:	f7f6 fa1e 	bl	8009fa4 <rcutils_allocator_is_valid>
 8013b68:	b350      	cbz	r0, 8013bc0 <rcl_guard_condition_init_from_rmw+0x88>
 8013b6a:	b34c      	cbz	r4, 8013bc0 <rcl_guard_condition_init_from_rmw+0x88>
 8013b6c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013b70:	f1b8 0f00 	cmp.w	r8, #0
 8013b74:	d11e      	bne.n	8013bb4 <rcl_guard_condition_init_from_rmw+0x7c>
 8013b76:	b31f      	cbz	r7, 8013bc0 <rcl_guard_condition_init_from_rmw+0x88>
 8013b78:	4638      	mov	r0, r7
 8013b7a:	f7f7 fef5 	bl	800b968 <rcl_context_is_valid>
 8013b7e:	b328      	cbz	r0, 8013bcc <rcl_guard_condition_init_from_rmw+0x94>
 8013b80:	9b01      	ldr	r3, [sp, #4]
 8013b82:	9905      	ldr	r1, [sp, #20]
 8013b84:	201c      	movs	r0, #28
 8013b86:	4798      	blx	r3
 8013b88:	4605      	mov	r5, r0
 8013b8a:	6060      	str	r0, [r4, #4]
 8013b8c:	b358      	cbz	r0, 8013be6 <rcl_guard_condition_init_from_rmw+0xae>
 8013b8e:	b1fe      	cbz	r6, 8013bd0 <rcl_guard_condition_init_from_rmw+0x98>
 8013b90:	6006      	str	r6, [r0, #0]
 8013b92:	f880 8004 	strb.w	r8, [r0, #4]
 8013b96:	ac01      	add	r4, sp, #4
 8013b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b9a:	f105 0c08 	add.w	ip, r5, #8
 8013b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ba2:	6823      	ldr	r3, [r4, #0]
 8013ba4:	f8cc 3000 	str.w	r3, [ip]
 8013ba8:	2000      	movs	r0, #0
 8013baa:	b006      	add	sp, #24
 8013bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb0:	b002      	add	sp, #8
 8013bb2:	4770      	bx	lr
 8013bb4:	2064      	movs	r0, #100	@ 0x64
 8013bb6:	b006      	add	sp, #24
 8013bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbc:	b002      	add	sp, #8
 8013bbe:	4770      	bx	lr
 8013bc0:	200b      	movs	r0, #11
 8013bc2:	b006      	add	sp, #24
 8013bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc8:	b002      	add	sp, #8
 8013bca:	4770      	bx	lr
 8013bcc:	2065      	movs	r0, #101	@ 0x65
 8013bce:	e7f2      	b.n	8013bb6 <rcl_guard_condition_init_from_rmw+0x7e>
 8013bd0:	6838      	ldr	r0, [r7, #0]
 8013bd2:	3028      	adds	r0, #40	@ 0x28
 8013bd4:	f000 fb04 	bl	80141e0 <rmw_create_guard_condition>
 8013bd8:	6028      	str	r0, [r5, #0]
 8013bda:	6865      	ldr	r5, [r4, #4]
 8013bdc:	682e      	ldr	r6, [r5, #0]
 8013bde:	b126      	cbz	r6, 8013bea <rcl_guard_condition_init_from_rmw+0xb2>
 8013be0:	2301      	movs	r3, #1
 8013be2:	712b      	strb	r3, [r5, #4]
 8013be4:	e7d7      	b.n	8013b96 <rcl_guard_condition_init_from_rmw+0x5e>
 8013be6:	200a      	movs	r0, #10
 8013be8:	e7e5      	b.n	8013bb6 <rcl_guard_condition_init_from_rmw+0x7e>
 8013bea:	4628      	mov	r0, r5
 8013bec:	9b02      	ldr	r3, [sp, #8]
 8013bee:	9905      	ldr	r1, [sp, #20]
 8013bf0:	4798      	blx	r3
 8013bf2:	6066      	str	r6, [r4, #4]
 8013bf4:	2001      	movs	r0, #1
 8013bf6:	e7de      	b.n	8013bb6 <rcl_guard_condition_init_from_rmw+0x7e>

08013bf8 <rcl_guard_condition_fini>:
 8013bf8:	b570      	push	{r4, r5, r6, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	b1f0      	cbz	r0, 8013c3c <rcl_guard_condition_fini+0x44>
 8013bfe:	6843      	ldr	r3, [r0, #4]
 8013c00:	4604      	mov	r4, r0
 8013c02:	b163      	cbz	r3, 8013c1e <rcl_guard_condition_fini+0x26>
 8013c04:	6818      	ldr	r0, [r3, #0]
 8013c06:	68de      	ldr	r6, [r3, #12]
 8013c08:	6999      	ldr	r1, [r3, #24]
 8013c0a:	b160      	cbz	r0, 8013c26 <rcl_guard_condition_fini+0x2e>
 8013c0c:	791d      	ldrb	r5, [r3, #4]
 8013c0e:	b965      	cbnz	r5, 8013c2a <rcl_guard_condition_fini+0x32>
 8013c10:	4618      	mov	r0, r3
 8013c12:	47b0      	blx	r6
 8013c14:	2300      	movs	r3, #0
 8013c16:	4628      	mov	r0, r5
 8013c18:	6063      	str	r3, [r4, #4]
 8013c1a:	b002      	add	sp, #8
 8013c1c:	bd70      	pop	{r4, r5, r6, pc}
 8013c1e:	461d      	mov	r5, r3
 8013c20:	4628      	mov	r0, r5
 8013c22:	b002      	add	sp, #8
 8013c24:	bd70      	pop	{r4, r5, r6, pc}
 8013c26:	4605      	mov	r5, r0
 8013c28:	e7f2      	b.n	8013c10 <rcl_guard_condition_fini+0x18>
 8013c2a:	9101      	str	r1, [sp, #4]
 8013c2c:	f000 faec 	bl	8014208 <rmw_destroy_guard_condition>
 8013c30:	1e05      	subs	r5, r0, #0
 8013c32:	6863      	ldr	r3, [r4, #4]
 8013c34:	9901      	ldr	r1, [sp, #4]
 8013c36:	bf18      	it	ne
 8013c38:	2501      	movne	r5, #1
 8013c3a:	e7e9      	b.n	8013c10 <rcl_guard_condition_fini+0x18>
 8013c3c:	250b      	movs	r5, #11
 8013c3e:	4628      	mov	r0, r5
 8013c40:	b002      	add	sp, #8
 8013c42:	bd70      	pop	{r4, r5, r6, pc}

08013c44 <rcl_guard_condition_get_default_options>:
 8013c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c46:	b087      	sub	sp, #28
 8013c48:	4606      	mov	r6, r0
 8013c4a:	4668      	mov	r0, sp
 8013c4c:	f7f6 f99c 	bl	8009f88 <rcutils_get_default_allocator>
 8013c50:	4b09      	ldr	r3, [pc, #36]	@ (8013c78 <rcl_guard_condition_get_default_options+0x34>)
 8013c52:	46ee      	mov	lr, sp
 8013c54:	469c      	mov	ip, r3
 8013c56:	461d      	mov	r5, r3
 8013c58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c62:	4634      	mov	r4, r6
 8013c64:	f8de 7000 	ldr.w	r7, [lr]
 8013c68:	f8cc 7000 	str.w	r7, [ip]
 8013c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c6e:	4630      	mov	r0, r6
 8013c70:	6027      	str	r7, [r4, #0]
 8013c72:	b007      	add	sp, #28
 8013c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c76:	bf00      	nop
 8013c78:	2000df48 	.word	0x2000df48

08013c7c <rcl_guard_condition_get_rmw_handle>:
 8013c7c:	b110      	cbz	r0, 8013c84 <rcl_guard_condition_get_rmw_handle+0x8>
 8013c7e:	6840      	ldr	r0, [r0, #4]
 8013c80:	b100      	cbz	r0, 8013c84 <rcl_guard_condition_get_rmw_handle+0x8>
 8013c82:	6800      	ldr	r0, [r0, #0]
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop

08013c88 <rcl_publisher_is_valid>:
 8013c88:	b1a0      	cbz	r0, 8013cb4 <rcl_publisher_is_valid+0x2c>
 8013c8a:	6803      	ldr	r3, [r0, #0]
 8013c8c:	b510      	push	{r4, lr}
 8013c8e:	4604      	mov	r4, r0
 8013c90:	b173      	cbz	r3, 8013cb0 <rcl_publisher_is_valid+0x28>
 8013c92:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8013c96:	b15a      	cbz	r2, 8013cb0 <rcl_publisher_is_valid+0x28>
 8013c98:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8013c9c:	f7f7 fe64 	bl	800b968 <rcl_context_is_valid>
 8013ca0:	b130      	cbz	r0, 8013cb0 <rcl_publisher_is_valid+0x28>
 8013ca2:	6823      	ldr	r3, [r4, #0]
 8013ca4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013ca8:	3800      	subs	r0, #0
 8013caa:	bf18      	it	ne
 8013cac:	2001      	movne	r0, #1
 8013cae:	bd10      	pop	{r4, pc}
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	bd10      	pop	{r4, pc}
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	4770      	bx	lr

08013cb8 <rcl_publisher_is_valid_except_context>:
 8013cb8:	b130      	cbz	r0, 8013cc8 <rcl_publisher_is_valid_except_context+0x10>
 8013cba:	6800      	ldr	r0, [r0, #0]
 8013cbc:	b120      	cbz	r0, 8013cc8 <rcl_publisher_is_valid_except_context+0x10>
 8013cbe:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8013cc2:	3800      	subs	r0, #0
 8013cc4:	bf18      	it	ne
 8013cc6:	2001      	movne	r0, #1
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop

08013ccc <rcl_validate_topic_name>:
 8013ccc:	2800      	cmp	r0, #0
 8013cce:	d07a      	beq.n	8013dc6 <rcl_validate_topic_name+0xfa>
 8013cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd4:	460e      	mov	r6, r1
 8013cd6:	2900      	cmp	r1, #0
 8013cd8:	d07c      	beq.n	8013dd4 <rcl_validate_topic_name+0x108>
 8013cda:	4617      	mov	r7, r2
 8013cdc:	4605      	mov	r5, r0
 8013cde:	f7ec fa89 	bl	80001f4 <strlen>
 8013ce2:	b1b0      	cbz	r0, 8013d12 <rcl_validate_topic_name+0x46>
 8013ce4:	f895 9000 	ldrb.w	r9, [r5]
 8013ce8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8013e6c <rcl_validate_topic_name+0x1a0>
 8013cec:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013cf0:	f013 0304 	ands.w	r3, r3, #4
 8013cf4:	d169      	bne.n	8013dca <rcl_validate_topic_name+0xfe>
 8013cf6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8013cfa:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013cfe:	2a2f      	cmp	r2, #47	@ 0x2f
 8013d00:	d10e      	bne.n	8013d20 <rcl_validate_topic_name+0x54>
 8013d02:	2202      	movs	r2, #2
 8013d04:	6032      	str	r2, [r6, #0]
 8013d06:	b36f      	cbz	r7, 8013d64 <rcl_validate_topic_name+0x98>
 8013d08:	f8c7 8000 	str.w	r8, [r7]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d12:	2301      	movs	r3, #1
 8013d14:	6033      	str	r3, [r6, #0]
 8013d16:	b32f      	cbz	r7, 8013d64 <rcl_validate_topic_name+0x98>
 8013d18:	2000      	movs	r0, #0
 8013d1a:	6038      	str	r0, [r7, #0]
 8013d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d20:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8013d24:	461c      	mov	r4, r3
 8013d26:	4619      	mov	r1, r3
 8013d28:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013d2c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013d30:	f1be 0f09 	cmp.w	lr, #9
 8013d34:	d919      	bls.n	8013d6a <rcl_validate_topic_name+0x9e>
 8013d36:	f022 0e20 	bic.w	lr, r2, #32
 8013d3a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8013d3e:	f1be 0f19 	cmp.w	lr, #25
 8013d42:	d912      	bls.n	8013d6a <rcl_validate_topic_name+0x9e>
 8013d44:	2a5f      	cmp	r2, #95	@ 0x5f
 8013d46:	d019      	beq.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013d48:	2a2f      	cmp	r2, #47	@ 0x2f
 8013d4a:	d051      	beq.n	8013df0 <rcl_validate_topic_name+0x124>
 8013d4c:	2a7e      	cmp	r2, #126	@ 0x7e
 8013d4e:	d048      	beq.n	8013de2 <rcl_validate_topic_name+0x116>
 8013d50:	2a7b      	cmp	r2, #123	@ 0x7b
 8013d52:	d054      	beq.n	8013dfe <rcl_validate_topic_name+0x132>
 8013d54:	2a7d      	cmp	r2, #125	@ 0x7d
 8013d56:	d161      	bne.n	8013e1c <rcl_validate_topic_name+0x150>
 8013d58:	2c00      	cmp	r4, #0
 8013d5a:	d155      	bne.n	8013e08 <rcl_validate_topic_name+0x13c>
 8013d5c:	2305      	movs	r3, #5
 8013d5e:	6033      	str	r3, [r6, #0]
 8013d60:	b107      	cbz	r7, 8013d64 <rcl_validate_topic_name+0x98>
 8013d62:	6039      	str	r1, [r7, #0]
 8013d64:	2000      	movs	r0, #0
 8013d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013d6e:	0752      	lsls	r2, r2, #29
 8013d70:	d504      	bpl.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013d72:	b11c      	cbz	r4, 8013d7c <rcl_validate_topic_name+0xb0>
 8013d74:	b111      	cbz	r1, 8013d7c <rcl_validate_topic_name+0xb0>
 8013d76:	1e4a      	subs	r2, r1, #1
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d02d      	beq.n	8013dd8 <rcl_validate_topic_name+0x10c>
 8013d7c:	3101      	adds	r1, #1
 8013d7e:	4288      	cmp	r0, r1
 8013d80:	d1d2      	bne.n	8013d28 <rcl_validate_topic_name+0x5c>
 8013d82:	2c00      	cmp	r4, #0
 8013d84:	d145      	bne.n	8013e12 <rcl_validate_topic_name+0x146>
 8013d86:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8013d8a:	d04f      	beq.n	8013e2c <rcl_validate_topic_name+0x160>
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	2301      	movs	r3, #1
 8013d90:	e006      	b.n	8013da0 <rcl_validate_topic_name+0xd4>
 8013d92:	428b      	cmp	r3, r1
 8013d94:	f105 0501 	add.w	r5, r5, #1
 8013d98:	f103 0201 	add.w	r2, r3, #1
 8013d9c:	d236      	bcs.n	8013e0c <rcl_validate_topic_name+0x140>
 8013d9e:	4613      	mov	r3, r2
 8013da0:	4580      	cmp	r8, r0
 8013da2:	f100 0001 	add.w	r0, r0, #1
 8013da6:	d0f4      	beq.n	8013d92 <rcl_validate_topic_name+0xc6>
 8013da8:	782a      	ldrb	r2, [r5, #0]
 8013daa:	2a2f      	cmp	r2, #47	@ 0x2f
 8013dac:	d1f1      	bne.n	8013d92 <rcl_validate_topic_name+0xc6>
 8013dae:	786a      	ldrb	r2, [r5, #1]
 8013db0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013db4:	0754      	lsls	r4, r2, #29
 8013db6:	d5ec      	bpl.n	8013d92 <rcl_validate_topic_name+0xc6>
 8013db8:	2204      	movs	r2, #4
 8013dba:	6032      	str	r2, [r6, #0]
 8013dbc:	2f00      	cmp	r7, #0
 8013dbe:	d0d1      	beq.n	8013d64 <rcl_validate_topic_name+0x98>
 8013dc0:	603b      	str	r3, [r7, #0]
 8013dc2:	2000      	movs	r0, #0
 8013dc4:	e7aa      	b.n	8013d1c <rcl_validate_topic_name+0x50>
 8013dc6:	200b      	movs	r0, #11
 8013dc8:	4770      	bx	lr
 8013dca:	2304      	movs	r3, #4
 8013dcc:	6033      	str	r3, [r6, #0]
 8013dce:	2f00      	cmp	r7, #0
 8013dd0:	d1a2      	bne.n	8013d18 <rcl_validate_topic_name+0x4c>
 8013dd2:	e7c7      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013dd4:	200b      	movs	r0, #11
 8013dd6:	e7a1      	b.n	8013d1c <rcl_validate_topic_name+0x50>
 8013dd8:	2309      	movs	r3, #9
 8013dda:	6033      	str	r3, [r6, #0]
 8013ddc:	2f00      	cmp	r7, #0
 8013dde:	d1c0      	bne.n	8013d62 <rcl_validate_topic_name+0x96>
 8013de0:	e7c0      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013de2:	2900      	cmp	r1, #0
 8013de4:	d0ca      	beq.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013de6:	2306      	movs	r3, #6
 8013de8:	6033      	str	r3, [r6, #0]
 8013dea:	2f00      	cmp	r7, #0
 8013dec:	d1b9      	bne.n	8013d62 <rcl_validate_topic_name+0x96>
 8013dee:	e7b9      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013df0:	2c00      	cmp	r4, #0
 8013df2:	d0c3      	beq.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013df4:	2308      	movs	r3, #8
 8013df6:	6033      	str	r3, [r6, #0]
 8013df8:	2f00      	cmp	r7, #0
 8013dfa:	d1b2      	bne.n	8013d62 <rcl_validate_topic_name+0x96>
 8013dfc:	e7b2      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013dfe:	2c00      	cmp	r4, #0
 8013e00:	d1f8      	bne.n	8013df4 <rcl_validate_topic_name+0x128>
 8013e02:	460b      	mov	r3, r1
 8013e04:	2401      	movs	r4, #1
 8013e06:	e7b9      	b.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013e08:	2400      	movs	r4, #0
 8013e0a:	e7b7      	b.n	8013d7c <rcl_validate_topic_name+0xb0>
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	6030      	str	r0, [r6, #0]
 8013e10:	e784      	b.n	8013d1c <rcl_validate_topic_name+0x50>
 8013e12:	2205      	movs	r2, #5
 8013e14:	6032      	str	r2, [r6, #0]
 8013e16:	2f00      	cmp	r7, #0
 8013e18:	d1d2      	bne.n	8013dc0 <rcl_validate_topic_name+0xf4>
 8013e1a:	e7a3      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013e1c:	2c00      	cmp	r4, #0
 8013e1e:	bf14      	ite	ne
 8013e20:	2308      	movne	r3, #8
 8013e22:	2303      	moveq	r3, #3
 8013e24:	6033      	str	r3, [r6, #0]
 8013e26:	2f00      	cmp	r7, #0
 8013e28:	d19b      	bne.n	8013d62 <rcl_validate_topic_name+0x96>
 8013e2a:	e79b      	b.n	8013d64 <rcl_validate_topic_name+0x98>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e00a      	b.n	8013e46 <rcl_validate_topic_name+0x17a>
 8013e30:	2c01      	cmp	r4, #1
 8013e32:	d013      	beq.n	8013e5c <rcl_validate_topic_name+0x190>
 8013e34:	4299      	cmp	r1, r3
 8013e36:	f104 0401 	add.w	r4, r4, #1
 8013e3a:	f105 0501 	add.w	r5, r5, #1
 8013e3e:	f103 0201 	add.w	r2, r3, #1
 8013e42:	d9e3      	bls.n	8013e0c <rcl_validate_topic_name+0x140>
 8013e44:	4613      	mov	r3, r2
 8013e46:	45a0      	cmp	r8, r4
 8013e48:	d0f4      	beq.n	8013e34 <rcl_validate_topic_name+0x168>
 8013e4a:	782a      	ldrb	r2, [r5, #0]
 8013e4c:	2a2f      	cmp	r2, #47	@ 0x2f
 8013e4e:	d1ef      	bne.n	8013e30 <rcl_validate_topic_name+0x164>
 8013e50:	786a      	ldrb	r2, [r5, #1]
 8013e52:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013e56:	0752      	lsls	r2, r2, #29
 8013e58:	d5ec      	bpl.n	8013e34 <rcl_validate_topic_name+0x168>
 8013e5a:	e7ad      	b.n	8013db8 <rcl_validate_topic_name+0xec>
 8013e5c:	2307      	movs	r3, #7
 8013e5e:	6033      	str	r3, [r6, #0]
 8013e60:	2f00      	cmp	r7, #0
 8013e62:	f43f af7f 	beq.w	8013d64 <rcl_validate_topic_name+0x98>
 8013e66:	603c      	str	r4, [r7, #0]
 8013e68:	2000      	movs	r0, #0
 8013e6a:	e757      	b.n	8013d1c <rcl_validate_topic_name+0x50>
 8013e6c:	08017454 	.word	0x08017454

08013e70 <rcutils_string_array_fini>:
 8013e70:	b320      	cbz	r0, 8013ebc <rcutils_string_array_fini+0x4c>
 8013e72:	b570      	push	{r4, r5, r6, lr}
 8013e74:	4604      	mov	r4, r0
 8013e76:	6840      	ldr	r0, [r0, #4]
 8013e78:	b1d8      	cbz	r0, 8013eb2 <rcutils_string_array_fini+0x42>
 8013e7a:	f104 0008 	add.w	r0, r4, #8
 8013e7e:	f7f6 f891 	bl	8009fa4 <rcutils_allocator_is_valid>
 8013e82:	b1b8      	cbz	r0, 8013eb4 <rcutils_string_array_fini+0x44>
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	b1bb      	cbz	r3, 8013eb8 <rcutils_string_array_fini+0x48>
 8013e88:	2500      	movs	r5, #0
 8013e8a:	6860      	ldr	r0, [r4, #4]
 8013e8c:	462e      	mov	r6, r5
 8013e8e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8013e92:	68e3      	ldr	r3, [r4, #12]
 8013e94:	69a1      	ldr	r1, [r4, #24]
 8013e96:	4798      	blx	r3
 8013e98:	e9d4 3000 	ldrd	r3, r0, [r4]
 8013e9c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8013ea0:	3501      	adds	r5, #1
 8013ea2:	429d      	cmp	r5, r3
 8013ea4:	d3f3      	bcc.n	8013e8e <rcutils_string_array_fini+0x1e>
 8013ea6:	68e3      	ldr	r3, [r4, #12]
 8013ea8:	69a1      	ldr	r1, [r4, #24]
 8013eaa:	4798      	blx	r3
 8013eac:	2000      	movs	r0, #0
 8013eae:	e9c4 0000 	strd	r0, r0, [r4]
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
 8013eb4:	200b      	movs	r0, #11
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}
 8013eb8:	6860      	ldr	r0, [r4, #4]
 8013eba:	e7f4      	b.n	8013ea6 <rcutils_string_array_fini+0x36>
 8013ebc:	200b      	movs	r0, #11
 8013ebe:	4770      	bx	lr

08013ec0 <rmw_time_equal>:
 8013ec0:	b4f0      	push	{r4, r5, r6, r7}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	ac04      	add	r4, sp, #16
 8013ec6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013eca:	4603      	mov	r3, r0
 8013ecc:	4924      	ldr	r1, [pc, #144]	@ (8013f60 <rmw_time_equal+0xa0>)
 8013ece:	9e03      	ldr	r6, [sp, #12]
 8013ed0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013ed4:	2202      	movs	r2, #2
 8013ed6:	4299      	cmp	r1, r3
 8013ed8:	41aa      	sbcs	r2, r5
 8013eda:	d330      	bcc.n	8013f3e <rmw_time_equal+0x7e>
 8013edc:	4c21      	ldr	r4, [pc, #132]	@ (8013f64 <rmw_time_equal+0xa4>)
 8013ede:	fba3 3204 	umull	r3, r2, r3, r4
 8013ee2:	fb04 2205 	mla	r2, r4, r5, r2
 8013ee6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013eea:	43dd      	mvns	r5, r3
 8013eec:	1a8c      	subs	r4, r1, r2
 8013eee:	4285      	cmp	r5, r0
 8013ef0:	41b4      	sbcs	r4, r6
 8013ef2:	d332      	bcc.n	8013f5a <rmw_time_equal+0x9a>
 8013ef4:	eb10 0c03 	adds.w	ip, r0, r3
 8013ef8:	eb42 0106 	adc.w	r1, r2, r6
 8013efc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013f00:	4817      	ldr	r0, [pc, #92]	@ (8013f60 <rmw_time_equal+0xa0>)
 8013f02:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013f04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013f06:	2202      	movs	r2, #2
 8013f08:	4298      	cmp	r0, r3
 8013f0a:	41b2      	sbcs	r2, r6
 8013f0c:	d31c      	bcc.n	8013f48 <rmw_time_equal+0x88>
 8013f0e:	4c15      	ldr	r4, [pc, #84]	@ (8013f64 <rmw_time_equal+0xa4>)
 8013f10:	fba3 3204 	umull	r3, r2, r3, r4
 8013f14:	fb04 2206 	mla	r2, r4, r6, r2
 8013f18:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013f1c:	43de      	mvns	r6, r3
 8013f1e:	1a84      	subs	r4, r0, r2
 8013f20:	42ae      	cmp	r6, r5
 8013f22:	41bc      	sbcs	r4, r7
 8013f24:	d315      	bcc.n	8013f52 <rmw_time_equal+0x92>
 8013f26:	195b      	adds	r3, r3, r5
 8013f28:	eb42 0207 	adc.w	r2, r2, r7
 8013f2c:	428a      	cmp	r2, r1
 8013f2e:	bf08      	it	eq
 8013f30:	4563      	cmpeq	r3, ip
 8013f32:	bf0c      	ite	eq
 8013f34:	2001      	moveq	r0, #1
 8013f36:	2000      	movne	r0, #0
 8013f38:	b004      	add	sp, #16
 8013f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8013f3c:	4770      	bx	lr
 8013f3e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013f42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013f46:	e7d9      	b.n	8013efc <rmw_time_equal+0x3c>
 8013f48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f4c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013f50:	e7ec      	b.n	8013f2c <rmw_time_equal+0x6c>
 8013f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f56:	4602      	mov	r2, r0
 8013f58:	e7e8      	b.n	8013f2c <rmw_time_equal+0x6c>
 8013f5a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013f5e:	e7cd      	b.n	8013efc <rmw_time_equal+0x3c>
 8013f60:	25c17d04 	.word	0x25c17d04
 8013f64:	3b9aca00 	.word	0x3b9aca00

08013f68 <rmw_time_total_nsec>:
 8013f68:	b470      	push	{r4, r5, r6}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	ac04      	add	r4, sp, #16
 8013f6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013f72:	4603      	mov	r3, r0
 8013f74:	4912      	ldr	r1, [pc, #72]	@ (8013fc0 <rmw_time_total_nsec+0x58>)
 8013f76:	9e03      	ldr	r6, [sp, #12]
 8013f78:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013f7c:	2202      	movs	r2, #2
 8013f7e:	4299      	cmp	r1, r3
 8013f80:	41aa      	sbcs	r2, r5
 8013f82:	d311      	bcc.n	8013fa8 <rmw_time_total_nsec+0x40>
 8013f84:	4c0f      	ldr	r4, [pc, #60]	@ (8013fc4 <rmw_time_total_nsec+0x5c>)
 8013f86:	fba3 3204 	umull	r3, r2, r3, r4
 8013f8a:	fb04 2205 	mla	r2, r4, r5, r2
 8013f8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013f92:	43dd      	mvns	r5, r3
 8013f94:	1a8c      	subs	r4, r1, r2
 8013f96:	4285      	cmp	r5, r0
 8013f98:	41b4      	sbcs	r4, r6
 8013f9a:	d30c      	bcc.n	8013fb6 <rmw_time_total_nsec+0x4e>
 8013f9c:	1818      	adds	r0, r3, r0
 8013f9e:	eb42 0106 	adc.w	r1, r2, r6
 8013fa2:	b005      	add	sp, #20
 8013fa4:	bc70      	pop	{r4, r5, r6}
 8013fa6:	4770      	bx	lr
 8013fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013fb0:	b005      	add	sp, #20
 8013fb2:	bc70      	pop	{r4, r5, r6}
 8013fb4:	4770      	bx	lr
 8013fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013fba:	b005      	add	sp, #20
 8013fbc:	bc70      	pop	{r4, r5, r6}
 8013fbe:	4770      	bx	lr
 8013fc0:	25c17d04 	.word	0x25c17d04
 8013fc4:	3b9aca00 	.word	0x3b9aca00

08013fc8 <on_status>:
 8013fc8:	b082      	sub	sp, #8
 8013fca:	b002      	add	sp, #8
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop

08013fd0 <on_topic>:
 8013fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd4:	4a22      	ldr	r2, [pc, #136]	@ (8014060 <on_topic+0x90>)
 8013fd6:	b094      	sub	sp, #80	@ 0x50
 8013fd8:	6812      	ldr	r2, [r2, #0]
 8013fda:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8013fdc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013fe0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013fe4:	b3c2      	cbz	r2, 8014058 <on_topic+0x88>
 8013fe6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8013fea:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8013fee:	e001      	b.n	8013ff4 <on_topic+0x24>
 8013ff0:	6852      	ldr	r2, [r2, #4]
 8013ff2:	b38a      	cbz	r2, 8014058 <on_topic+0x88>
 8013ff4:	6894      	ldr	r4, [r2, #8]
 8013ff6:	8aa3      	ldrh	r3, [r4, #20]
 8013ff8:	428b      	cmp	r3, r1
 8013ffa:	d1f9      	bne.n	8013ff0 <on_topic+0x20>
 8013ffc:	7da3      	ldrb	r3, [r4, #22]
 8013ffe:	4283      	cmp	r3, r0
 8014000:	d1f6      	bne.n	8013ff0 <on_topic+0x20>
 8014002:	2248      	movs	r2, #72	@ 0x48
 8014004:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014008:	4668      	mov	r0, sp
 801400a:	f001 fd16 	bl	8015a3a <memcpy>
 801400e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8014012:	cb0c      	ldmia	r3, {r2, r3}
 8014014:	4620      	mov	r0, r4
 8014016:	f7fb ffdd 	bl	800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801401a:	4607      	mov	r7, r0
 801401c:	b1e0      	cbz	r0, 8014058 <on_topic+0x88>
 801401e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014022:	4632      	mov	r2, r6
 8014024:	4628      	mov	r0, r5
 8014026:	f108 0110 	add.w	r1, r8, #16
 801402a:	f000 fa49 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 801402e:	b930      	cbnz	r0, 801403e <on_topic+0x6e>
 8014030:	480c      	ldr	r0, [pc, #48]	@ (8014064 <on_topic+0x94>)
 8014032:	4639      	mov	r1, r7
 8014034:	b014      	add	sp, #80	@ 0x50
 8014036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801403a:	f000 b8bd 	b.w	80141b8 <put_memory>
 801403e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8014042:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8014046:	f000 f965 	bl	8014314 <rmw_uros_epoch_nanos>
 801404a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801404e:	2305      	movs	r3, #5
 8014050:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014054:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014058:	b014      	add	sp, #80	@ 0x50
 801405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801405e:	bf00      	nop
 8014060:	2000df14 	.word	0x2000df14
 8014064:	2000df04 	.word	0x2000df04

08014068 <on_request>:
 8014068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801406c:	4823      	ldr	r0, [pc, #140]	@ (80140fc <on_request+0x94>)
 801406e:	b094      	sub	sp, #80	@ 0x50
 8014070:	6800      	ldr	r0, [r0, #0]
 8014072:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014074:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014078:	9113      	str	r1, [sp, #76]	@ 0x4c
 801407a:	2800      	cmp	r0, #0
 801407c:	d03b      	beq.n	80140f6 <on_request+0x8e>
 801407e:	461d      	mov	r5, r3
 8014080:	e001      	b.n	8014086 <on_request+0x1e>
 8014082:	6840      	ldr	r0, [r0, #4]
 8014084:	b3b8      	cbz	r0, 80140f6 <on_request+0x8e>
 8014086:	6884      	ldr	r4, [r0, #8]
 8014088:	8b21      	ldrh	r1, [r4, #24]
 801408a:	4291      	cmp	r1, r2
 801408c:	d1f9      	bne.n	8014082 <on_request+0x1a>
 801408e:	2248      	movs	r2, #72	@ 0x48
 8014090:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014094:	4668      	mov	r0, sp
 8014096:	f001 fcd0 	bl	8015a3a <memcpy>
 801409a:	f104 0320 	add.w	r3, r4, #32
 801409e:	cb0c      	ldmia	r3, {r2, r3}
 80140a0:	4620      	mov	r0, r4
 80140a2:	f7fb ff97 	bl	800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80140a6:	4680      	mov	r8, r0
 80140a8:	b328      	cbz	r0, 80140f6 <on_request+0x8e>
 80140aa:	4638      	mov	r0, r7
 80140ac:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80140b0:	4632      	mov	r2, r6
 80140b2:	f107 0110 	add.w	r1, r7, #16
 80140b6:	f000 fa03 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 80140ba:	b930      	cbnz	r0, 80140ca <on_request+0x62>
 80140bc:	4810      	ldr	r0, [pc, #64]	@ (8014100 <on_request+0x98>)
 80140be:	4641      	mov	r1, r8
 80140c0:	b014      	add	sp, #80	@ 0x50
 80140c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140c6:	f000 b877 	b.w	80141b8 <put_memory>
 80140ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140cc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80140d0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80140d4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80140d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80140e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80140e4:	f000 f916 	bl	8014314 <rmw_uros_epoch_nanos>
 80140e8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80140ec:	2303      	movs	r3, #3
 80140ee:	e942 0102 	strd	r0, r1, [r2, #-8]
 80140f2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80140f6:	b014      	add	sp, #80	@ 0x50
 80140f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140fc:	2000dee4 	.word	0x2000dee4
 8014100:	2000df04 	.word	0x2000df04

08014104 <on_reply>:
 8014104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014108:	4821      	ldr	r0, [pc, #132]	@ (8014190 <on_reply+0x8c>)
 801410a:	b094      	sub	sp, #80	@ 0x50
 801410c:	6800      	ldr	r0, [r0, #0]
 801410e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014110:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014114:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014116:	b3b8      	cbz	r0, 8014188 <on_reply+0x84>
 8014118:	461d      	mov	r5, r3
 801411a:	e001      	b.n	8014120 <on_reply+0x1c>
 801411c:	6840      	ldr	r0, [r0, #4]
 801411e:	b398      	cbz	r0, 8014188 <on_reply+0x84>
 8014120:	6884      	ldr	r4, [r0, #8]
 8014122:	8b21      	ldrh	r1, [r4, #24]
 8014124:	4291      	cmp	r1, r2
 8014126:	d1f9      	bne.n	801411c <on_reply+0x18>
 8014128:	2248      	movs	r2, #72	@ 0x48
 801412a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801412e:	4668      	mov	r0, sp
 8014130:	f001 fc83 	bl	8015a3a <memcpy>
 8014134:	f104 0320 	add.w	r3, r4, #32
 8014138:	cb0c      	ldmia	r3, {r2, r3}
 801413a:	4620      	mov	r0, r4
 801413c:	f7fb ff4a 	bl	800ffd4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014140:	4680      	mov	r8, r0
 8014142:	b308      	cbz	r0, 8014188 <on_reply+0x84>
 8014144:	4638      	mov	r0, r7
 8014146:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801414a:	4632      	mov	r2, r6
 801414c:	f107 0110 	add.w	r1, r7, #16
 8014150:	f000 f9b6 	bl	80144c0 <ucdr_deserialize_array_uint8_t>
 8014154:	b930      	cbnz	r0, 8014164 <on_reply+0x60>
 8014156:	480f      	ldr	r0, [pc, #60]	@ (8014194 <on_reply+0x90>)
 8014158:	4641      	mov	r1, r8
 801415a:	b014      	add	sp, #80	@ 0x50
 801415c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014160:	f000 b82a 	b.w	80141b8 <put_memory>
 8014164:	2200      	movs	r2, #0
 8014166:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801416a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801416e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014172:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8014176:	f000 f8cd 	bl	8014314 <rmw_uros_epoch_nanos>
 801417a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801417e:	2304      	movs	r3, #4
 8014180:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014184:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014188:	b014      	add	sp, #80	@ 0x50
 801418a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801418e:	bf00      	nop
 8014190:	200095f8 	.word	0x200095f8
 8014194:	2000df04 	.word	0x2000df04

08014198 <get_memory>:
 8014198:	4603      	mov	r3, r0
 801419a:	6840      	ldr	r0, [r0, #4]
 801419c:	b158      	cbz	r0, 80141b6 <get_memory+0x1e>
 801419e:	6842      	ldr	r2, [r0, #4]
 80141a0:	605a      	str	r2, [r3, #4]
 80141a2:	b10a      	cbz	r2, 80141a8 <get_memory+0x10>
 80141a4:	2100      	movs	r1, #0
 80141a6:	6011      	str	r1, [r2, #0]
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	6042      	str	r2, [r0, #4]
 80141ac:	b102      	cbz	r2, 80141b0 <get_memory+0x18>
 80141ae:	6010      	str	r0, [r2, #0]
 80141b0:	2200      	movs	r2, #0
 80141b2:	6002      	str	r2, [r0, #0]
 80141b4:	6018      	str	r0, [r3, #0]
 80141b6:	4770      	bx	lr

080141b8 <put_memory>:
 80141b8:	680b      	ldr	r3, [r1, #0]
 80141ba:	b10b      	cbz	r3, 80141c0 <put_memory+0x8>
 80141bc:	684a      	ldr	r2, [r1, #4]
 80141be:	605a      	str	r2, [r3, #4]
 80141c0:	684a      	ldr	r2, [r1, #4]
 80141c2:	b102      	cbz	r2, 80141c6 <put_memory+0xe>
 80141c4:	6013      	str	r3, [r2, #0]
 80141c6:	6803      	ldr	r3, [r0, #0]
 80141c8:	428b      	cmp	r3, r1
 80141ca:	6843      	ldr	r3, [r0, #4]
 80141cc:	bf08      	it	eq
 80141ce:	6002      	streq	r2, [r0, #0]
 80141d0:	604b      	str	r3, [r1, #4]
 80141d2:	b103      	cbz	r3, 80141d6 <put_memory+0x1e>
 80141d4:	6019      	str	r1, [r3, #0]
 80141d6:	2300      	movs	r3, #0
 80141d8:	600b      	str	r3, [r1, #0]
 80141da:	6041      	str	r1, [r0, #4]
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop

080141e0 <rmw_create_guard_condition>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	4605      	mov	r5, r0
 80141e4:	4807      	ldr	r0, [pc, #28]	@ (8014204 <rmw_create_guard_condition+0x24>)
 80141e6:	f7ff ffd7 	bl	8014198 <get_memory>
 80141ea:	b148      	cbz	r0, 8014200 <rmw_create_guard_condition+0x20>
 80141ec:	6884      	ldr	r4, [r0, #8]
 80141ee:	2300      	movs	r3, #0
 80141f0:	7423      	strb	r3, [r4, #16]
 80141f2:	61e5      	str	r5, [r4, #28]
 80141f4:	f7fa fc2c 	bl	800ea50 <rmw_get_implementation_identifier>
 80141f8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80141fc:	f104 0014 	add.w	r0, r4, #20
 8014200:	bd38      	pop	{r3, r4, r5, pc}
 8014202:	bf00      	nop
 8014204:	2000dea4 	.word	0x2000dea4

08014208 <rmw_destroy_guard_condition>:
 8014208:	b508      	push	{r3, lr}
 801420a:	4b08      	ldr	r3, [pc, #32]	@ (801422c <rmw_destroy_guard_condition+0x24>)
 801420c:	6819      	ldr	r1, [r3, #0]
 801420e:	b911      	cbnz	r1, 8014216 <rmw_destroy_guard_condition+0xe>
 8014210:	e00a      	b.n	8014228 <rmw_destroy_guard_condition+0x20>
 8014212:	6849      	ldr	r1, [r1, #4]
 8014214:	b141      	cbz	r1, 8014228 <rmw_destroy_guard_condition+0x20>
 8014216:	688b      	ldr	r3, [r1, #8]
 8014218:	3314      	adds	r3, #20
 801421a:	4298      	cmp	r0, r3
 801421c:	d1f9      	bne.n	8014212 <rmw_destroy_guard_condition+0xa>
 801421e:	4803      	ldr	r0, [pc, #12]	@ (801422c <rmw_destroy_guard_condition+0x24>)
 8014220:	f7ff ffca 	bl	80141b8 <put_memory>
 8014224:	2000      	movs	r0, #0
 8014226:	bd08      	pop	{r3, pc}
 8014228:	2001      	movs	r0, #1
 801422a:	bd08      	pop	{r3, pc}
 801422c:	2000dea4 	.word	0x2000dea4

08014230 <create_topic>:
 8014230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014234:	4605      	mov	r5, r0
 8014236:	b084      	sub	sp, #16
 8014238:	4822      	ldr	r0, [pc, #136]	@ (80142c4 <create_topic+0x94>)
 801423a:	460f      	mov	r7, r1
 801423c:	4616      	mov	r6, r2
 801423e:	f7ff ffab 	bl	8014198 <get_memory>
 8014242:	4604      	mov	r4, r0
 8014244:	2800      	cmp	r0, #0
 8014246:	d039      	beq.n	80142bc <create_topic+0x8c>
 8014248:	692b      	ldr	r3, [r5, #16]
 801424a:	6884      	ldr	r4, [r0, #8]
 801424c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80142cc <create_topic+0x9c>
 8014250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014254:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014258:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801425c:	1c42      	adds	r2, r0, #1
 801425e:	2102      	movs	r1, #2
 8014260:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014264:	f7fc fa9c 	bl	80107a0 <uxr_object_id>
 8014268:	223c      	movs	r2, #60	@ 0x3c
 801426a:	6120      	str	r0, [r4, #16]
 801426c:	4641      	mov	r1, r8
 801426e:	4638      	mov	r0, r7
 8014270:	f7fc f80a 	bl	8010288 <generate_topic_name>
 8014274:	b1f0      	cbz	r0, 80142b4 <create_topic+0x84>
 8014276:	4f14      	ldr	r7, [pc, #80]	@ (80142c8 <create_topic+0x98>)
 8014278:	4630      	mov	r0, r6
 801427a:	2264      	movs	r2, #100	@ 0x64
 801427c:	4639      	mov	r1, r7
 801427e:	f7fb ffd3 	bl	8010228 <generate_type_name>
 8014282:	b1b8      	cbz	r0, 80142b4 <create_topic+0x84>
 8014284:	6928      	ldr	r0, [r5, #16]
 8014286:	2306      	movs	r3, #6
 8014288:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801428c:	f8cd 8000 	str.w	r8, [sp]
 8014290:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014294:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014298:	6811      	ldr	r1, [r2, #0]
 801429a:	696b      	ldr	r3, [r5, #20]
 801429c:	6922      	ldr	r2, [r4, #16]
 801429e:	f7fc f8df 	bl	8010460 <uxr_buffer_create_topic_bin>
 80142a2:	4602      	mov	r2, r0
 80142a4:	6928      	ldr	r0, [r5, #16]
 80142a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80142aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80142ae:	f7fb ff85 	bl	80101bc <run_xrce_session>
 80142b2:	b918      	cbnz	r0, 80142bc <create_topic+0x8c>
 80142b4:	4620      	mov	r0, r4
 80142b6:	f7fb fe81 	bl	800ffbc <rmw_uxrce_fini_topic_memory>
 80142ba:	2400      	movs	r4, #0
 80142bc:	4620      	mov	r0, r4
 80142be:	b004      	add	sp, #16
 80142c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c4:	2000df24 	.word	0x2000df24
 80142c8:	2000df98 	.word	0x2000df98
 80142cc:	2000df5c 	.word	0x2000df5c

080142d0 <destroy_topic>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	6985      	ldr	r5, [r0, #24]
 80142d4:	b1d5      	cbz	r5, 801430c <destroy_topic+0x3c>
 80142d6:	4604      	mov	r4, r0
 80142d8:	6928      	ldr	r0, [r5, #16]
 80142da:	6922      	ldr	r2, [r4, #16]
 80142dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80142e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142e4:	6819      	ldr	r1, [r3, #0]
 80142e6:	f7fc f83d 	bl	8010364 <uxr_buffer_delete_entity>
 80142ea:	4602      	mov	r2, r0
 80142ec:	6928      	ldr	r0, [r5, #16]
 80142ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80142f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80142f6:	f7fb ff61 	bl	80101bc <run_xrce_session>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	4620      	mov	r0, r4
 80142fe:	bf14      	ite	ne
 8014300:	2400      	movne	r4, #0
 8014302:	2402      	moveq	r4, #2
 8014304:	f7fb fe5a 	bl	800ffbc <rmw_uxrce_fini_topic_memory>
 8014308:	4620      	mov	r0, r4
 801430a:	bd38      	pop	{r3, r4, r5, pc}
 801430c:	2401      	movs	r4, #1
 801430e:	4620      	mov	r0, r4
 8014310:	bd38      	pop	{r3, r4, r5, pc}
 8014312:	bf00      	nop

08014314 <rmw_uros_epoch_nanos>:
 8014314:	4b05      	ldr	r3, [pc, #20]	@ (801432c <rmw_uros_epoch_nanos+0x18>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	b123      	cbz	r3, 8014324 <rmw_uros_epoch_nanos+0x10>
 801431a:	6898      	ldr	r0, [r3, #8]
 801431c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014320:	f7fc bcb4 	b.w	8010c8c <uxr_epoch_nanos>
 8014324:	2000      	movs	r0, #0
 8014326:	2100      	movs	r1, #0
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	2000def4 	.word	0x2000def4

08014330 <ucdr_serialize_endian_array_char>:
 8014330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014334:	4619      	mov	r1, r3
 8014336:	461f      	mov	r7, r3
 8014338:	4605      	mov	r5, r0
 801433a:	4690      	mov	r8, r2
 801433c:	f7f7 f9b6 	bl	800b6ac <ucdr_check_buffer_available_for>
 8014340:	b9e0      	cbnz	r0, 801437c <ucdr_serialize_endian_array_char+0x4c>
 8014342:	463e      	mov	r6, r7
 8014344:	e009      	b.n	801435a <ucdr_serialize_endian_array_char+0x2a>
 8014346:	68a8      	ldr	r0, [r5, #8]
 8014348:	f001 fb77 	bl	8015a3a <memcpy>
 801434c:	68ab      	ldr	r3, [r5, #8]
 801434e:	6928      	ldr	r0, [r5, #16]
 8014350:	4423      	add	r3, r4
 8014352:	4420      	add	r0, r4
 8014354:	1b36      	subs	r6, r6, r4
 8014356:	60ab      	str	r3, [r5, #8]
 8014358:	6128      	str	r0, [r5, #16]
 801435a:	4631      	mov	r1, r6
 801435c:	2201      	movs	r2, #1
 801435e:	4628      	mov	r0, r5
 8014360:	f7f7 fa2c 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 8014364:	1bb9      	subs	r1, r7, r6
 8014366:	4441      	add	r1, r8
 8014368:	4604      	mov	r4, r0
 801436a:	4602      	mov	r2, r0
 801436c:	2800      	cmp	r0, #0
 801436e:	d1ea      	bne.n	8014346 <ucdr_serialize_endian_array_char+0x16>
 8014370:	2301      	movs	r3, #1
 8014372:	7da8      	ldrb	r0, [r5, #22]
 8014374:	756b      	strb	r3, [r5, #21]
 8014376:	4058      	eors	r0, r3
 8014378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801437c:	463a      	mov	r2, r7
 801437e:	68a8      	ldr	r0, [r5, #8]
 8014380:	4641      	mov	r1, r8
 8014382:	f001 fb5a 	bl	8015a3a <memcpy>
 8014386:	68aa      	ldr	r2, [r5, #8]
 8014388:	692b      	ldr	r3, [r5, #16]
 801438a:	443a      	add	r2, r7
 801438c:	443b      	add	r3, r7
 801438e:	60aa      	str	r2, [r5, #8]
 8014390:	612b      	str	r3, [r5, #16]
 8014392:	e7ed      	b.n	8014370 <ucdr_serialize_endian_array_char+0x40>

08014394 <ucdr_deserialize_endian_array_char>:
 8014394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014398:	4619      	mov	r1, r3
 801439a:	461f      	mov	r7, r3
 801439c:	4605      	mov	r5, r0
 801439e:	4690      	mov	r8, r2
 80143a0:	f7f7 f984 	bl	800b6ac <ucdr_check_buffer_available_for>
 80143a4:	b9e0      	cbnz	r0, 80143e0 <ucdr_deserialize_endian_array_char+0x4c>
 80143a6:	463e      	mov	r6, r7
 80143a8:	e009      	b.n	80143be <ucdr_deserialize_endian_array_char+0x2a>
 80143aa:	68a9      	ldr	r1, [r5, #8]
 80143ac:	f001 fb45 	bl	8015a3a <memcpy>
 80143b0:	68ab      	ldr	r3, [r5, #8]
 80143b2:	6928      	ldr	r0, [r5, #16]
 80143b4:	4423      	add	r3, r4
 80143b6:	4420      	add	r0, r4
 80143b8:	1b36      	subs	r6, r6, r4
 80143ba:	60ab      	str	r3, [r5, #8]
 80143bc:	6128      	str	r0, [r5, #16]
 80143be:	2201      	movs	r2, #1
 80143c0:	4631      	mov	r1, r6
 80143c2:	4628      	mov	r0, r5
 80143c4:	f7f7 f9fa 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 80143c8:	4604      	mov	r4, r0
 80143ca:	1bb8      	subs	r0, r7, r6
 80143cc:	4440      	add	r0, r8
 80143ce:	4622      	mov	r2, r4
 80143d0:	2c00      	cmp	r4, #0
 80143d2:	d1ea      	bne.n	80143aa <ucdr_deserialize_endian_array_char+0x16>
 80143d4:	2301      	movs	r3, #1
 80143d6:	7da8      	ldrb	r0, [r5, #22]
 80143d8:	756b      	strb	r3, [r5, #21]
 80143da:	4058      	eors	r0, r3
 80143dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e0:	463a      	mov	r2, r7
 80143e2:	68a9      	ldr	r1, [r5, #8]
 80143e4:	4640      	mov	r0, r8
 80143e6:	f001 fb28 	bl	8015a3a <memcpy>
 80143ea:	68aa      	ldr	r2, [r5, #8]
 80143ec:	692b      	ldr	r3, [r5, #16]
 80143ee:	443a      	add	r2, r7
 80143f0:	443b      	add	r3, r7
 80143f2:	60aa      	str	r2, [r5, #8]
 80143f4:	612b      	str	r3, [r5, #16]
 80143f6:	e7ed      	b.n	80143d4 <ucdr_deserialize_endian_array_char+0x40>

080143f8 <ucdr_serialize_array_uint8_t>:
 80143f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fc:	4688      	mov	r8, r1
 80143fe:	4611      	mov	r1, r2
 8014400:	4617      	mov	r7, r2
 8014402:	4605      	mov	r5, r0
 8014404:	f7f7 f952 	bl	800b6ac <ucdr_check_buffer_available_for>
 8014408:	b9e0      	cbnz	r0, 8014444 <ucdr_serialize_array_uint8_t+0x4c>
 801440a:	463e      	mov	r6, r7
 801440c:	e009      	b.n	8014422 <ucdr_serialize_array_uint8_t+0x2a>
 801440e:	68a8      	ldr	r0, [r5, #8]
 8014410:	f001 fb13 	bl	8015a3a <memcpy>
 8014414:	68aa      	ldr	r2, [r5, #8]
 8014416:	692b      	ldr	r3, [r5, #16]
 8014418:	4422      	add	r2, r4
 801441a:	4423      	add	r3, r4
 801441c:	1b36      	subs	r6, r6, r4
 801441e:	60aa      	str	r2, [r5, #8]
 8014420:	612b      	str	r3, [r5, #16]
 8014422:	4631      	mov	r1, r6
 8014424:	2201      	movs	r2, #1
 8014426:	4628      	mov	r0, r5
 8014428:	f7f7 f9c8 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 801442c:	1bb9      	subs	r1, r7, r6
 801442e:	4441      	add	r1, r8
 8014430:	4604      	mov	r4, r0
 8014432:	4602      	mov	r2, r0
 8014434:	2800      	cmp	r0, #0
 8014436:	d1ea      	bne.n	801440e <ucdr_serialize_array_uint8_t+0x16>
 8014438:	2301      	movs	r3, #1
 801443a:	7da8      	ldrb	r0, [r5, #22]
 801443c:	756b      	strb	r3, [r5, #21]
 801443e:	4058      	eors	r0, r3
 8014440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014444:	463a      	mov	r2, r7
 8014446:	68a8      	ldr	r0, [r5, #8]
 8014448:	4641      	mov	r1, r8
 801444a:	f001 faf6 	bl	8015a3a <memcpy>
 801444e:	68aa      	ldr	r2, [r5, #8]
 8014450:	692b      	ldr	r3, [r5, #16]
 8014452:	443a      	add	r2, r7
 8014454:	443b      	add	r3, r7
 8014456:	60aa      	str	r2, [r5, #8]
 8014458:	612b      	str	r3, [r5, #16]
 801445a:	e7ed      	b.n	8014438 <ucdr_serialize_array_uint8_t+0x40>

0801445c <ucdr_serialize_endian_array_uint8_t>:
 801445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014460:	4619      	mov	r1, r3
 8014462:	461f      	mov	r7, r3
 8014464:	4605      	mov	r5, r0
 8014466:	4690      	mov	r8, r2
 8014468:	f7f7 f920 	bl	800b6ac <ucdr_check_buffer_available_for>
 801446c:	b9e0      	cbnz	r0, 80144a8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801446e:	463e      	mov	r6, r7
 8014470:	e009      	b.n	8014486 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014472:	68a8      	ldr	r0, [r5, #8]
 8014474:	f001 fae1 	bl	8015a3a <memcpy>
 8014478:	68ab      	ldr	r3, [r5, #8]
 801447a:	6928      	ldr	r0, [r5, #16]
 801447c:	4423      	add	r3, r4
 801447e:	4420      	add	r0, r4
 8014480:	1b36      	subs	r6, r6, r4
 8014482:	60ab      	str	r3, [r5, #8]
 8014484:	6128      	str	r0, [r5, #16]
 8014486:	4631      	mov	r1, r6
 8014488:	2201      	movs	r2, #1
 801448a:	4628      	mov	r0, r5
 801448c:	f7f7 f996 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 8014490:	1bb9      	subs	r1, r7, r6
 8014492:	4441      	add	r1, r8
 8014494:	4604      	mov	r4, r0
 8014496:	4602      	mov	r2, r0
 8014498:	2800      	cmp	r0, #0
 801449a:	d1ea      	bne.n	8014472 <ucdr_serialize_endian_array_uint8_t+0x16>
 801449c:	2301      	movs	r3, #1
 801449e:	7da8      	ldrb	r0, [r5, #22]
 80144a0:	756b      	strb	r3, [r5, #21]
 80144a2:	4058      	eors	r0, r3
 80144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a8:	463a      	mov	r2, r7
 80144aa:	68a8      	ldr	r0, [r5, #8]
 80144ac:	4641      	mov	r1, r8
 80144ae:	f001 fac4 	bl	8015a3a <memcpy>
 80144b2:	68aa      	ldr	r2, [r5, #8]
 80144b4:	692b      	ldr	r3, [r5, #16]
 80144b6:	443a      	add	r2, r7
 80144b8:	443b      	add	r3, r7
 80144ba:	60aa      	str	r2, [r5, #8]
 80144bc:	612b      	str	r3, [r5, #16]
 80144be:	e7ed      	b.n	801449c <ucdr_serialize_endian_array_uint8_t+0x40>

080144c0 <ucdr_deserialize_array_uint8_t>:
 80144c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c4:	4688      	mov	r8, r1
 80144c6:	4611      	mov	r1, r2
 80144c8:	4617      	mov	r7, r2
 80144ca:	4605      	mov	r5, r0
 80144cc:	f7f7 f8ee 	bl	800b6ac <ucdr_check_buffer_available_for>
 80144d0:	b9e0      	cbnz	r0, 801450c <ucdr_deserialize_array_uint8_t+0x4c>
 80144d2:	463e      	mov	r6, r7
 80144d4:	e009      	b.n	80144ea <ucdr_deserialize_array_uint8_t+0x2a>
 80144d6:	68a9      	ldr	r1, [r5, #8]
 80144d8:	f001 faaf 	bl	8015a3a <memcpy>
 80144dc:	68aa      	ldr	r2, [r5, #8]
 80144de:	692b      	ldr	r3, [r5, #16]
 80144e0:	4422      	add	r2, r4
 80144e2:	4423      	add	r3, r4
 80144e4:	1b36      	subs	r6, r6, r4
 80144e6:	60aa      	str	r2, [r5, #8]
 80144e8:	612b      	str	r3, [r5, #16]
 80144ea:	2201      	movs	r2, #1
 80144ec:	4631      	mov	r1, r6
 80144ee:	4628      	mov	r0, r5
 80144f0:	f7f7 f964 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 80144f4:	4604      	mov	r4, r0
 80144f6:	1bb8      	subs	r0, r7, r6
 80144f8:	4440      	add	r0, r8
 80144fa:	4622      	mov	r2, r4
 80144fc:	2c00      	cmp	r4, #0
 80144fe:	d1ea      	bne.n	80144d6 <ucdr_deserialize_array_uint8_t+0x16>
 8014500:	2301      	movs	r3, #1
 8014502:	7da8      	ldrb	r0, [r5, #22]
 8014504:	756b      	strb	r3, [r5, #21]
 8014506:	4058      	eors	r0, r3
 8014508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450c:	463a      	mov	r2, r7
 801450e:	68a9      	ldr	r1, [r5, #8]
 8014510:	4640      	mov	r0, r8
 8014512:	f001 fa92 	bl	8015a3a <memcpy>
 8014516:	68aa      	ldr	r2, [r5, #8]
 8014518:	692b      	ldr	r3, [r5, #16]
 801451a:	443a      	add	r2, r7
 801451c:	443b      	add	r3, r7
 801451e:	60aa      	str	r2, [r5, #8]
 8014520:	612b      	str	r3, [r5, #16]
 8014522:	e7ed      	b.n	8014500 <ucdr_deserialize_array_uint8_t+0x40>

08014524 <ucdr_deserialize_endian_array_uint8_t>:
 8014524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014528:	4619      	mov	r1, r3
 801452a:	461f      	mov	r7, r3
 801452c:	4605      	mov	r5, r0
 801452e:	4690      	mov	r8, r2
 8014530:	f7f7 f8bc 	bl	800b6ac <ucdr_check_buffer_available_for>
 8014534:	b9e0      	cbnz	r0, 8014570 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014536:	463e      	mov	r6, r7
 8014538:	e009      	b.n	801454e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801453a:	68a9      	ldr	r1, [r5, #8]
 801453c:	f001 fa7d 	bl	8015a3a <memcpy>
 8014540:	68ab      	ldr	r3, [r5, #8]
 8014542:	6928      	ldr	r0, [r5, #16]
 8014544:	4423      	add	r3, r4
 8014546:	4420      	add	r0, r4
 8014548:	1b36      	subs	r6, r6, r4
 801454a:	60ab      	str	r3, [r5, #8]
 801454c:	6128      	str	r0, [r5, #16]
 801454e:	2201      	movs	r2, #1
 8014550:	4631      	mov	r1, r6
 8014552:	4628      	mov	r0, r5
 8014554:	f7f7 f932 	bl	800b7bc <ucdr_check_final_buffer_behavior_array>
 8014558:	4604      	mov	r4, r0
 801455a:	1bb8      	subs	r0, r7, r6
 801455c:	4440      	add	r0, r8
 801455e:	4622      	mov	r2, r4
 8014560:	2c00      	cmp	r4, #0
 8014562:	d1ea      	bne.n	801453a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014564:	2301      	movs	r3, #1
 8014566:	7da8      	ldrb	r0, [r5, #22]
 8014568:	756b      	strb	r3, [r5, #21]
 801456a:	4058      	eors	r0, r3
 801456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014570:	463a      	mov	r2, r7
 8014572:	68a9      	ldr	r1, [r5, #8]
 8014574:	4640      	mov	r0, r8
 8014576:	f001 fa60 	bl	8015a3a <memcpy>
 801457a:	68aa      	ldr	r2, [r5, #8]
 801457c:	692b      	ldr	r3, [r5, #16]
 801457e:	443a      	add	r2, r7
 8014580:	443b      	add	r3, r7
 8014582:	60aa      	str	r2, [r5, #8]
 8014584:	612b      	str	r3, [r5, #16]
 8014586:	e7ed      	b.n	8014564 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014588 <ucdr_serialize_sequence_char>:
 8014588:	b570      	push	{r4, r5, r6, lr}
 801458a:	4615      	mov	r5, r2
 801458c:	460e      	mov	r6, r1
 801458e:	7d01      	ldrb	r1, [r0, #20]
 8014590:	4604      	mov	r4, r0
 8014592:	f7f6 fa8d 	bl	800aab0 <ucdr_serialize_endian_uint32_t>
 8014596:	b90d      	cbnz	r5, 801459c <ucdr_serialize_sequence_char+0x14>
 8014598:	2001      	movs	r0, #1
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	7d21      	ldrb	r1, [r4, #20]
 801459e:	462b      	mov	r3, r5
 80145a0:	4632      	mov	r2, r6
 80145a2:	4620      	mov	r0, r4
 80145a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145a8:	f7ff bec2 	b.w	8014330 <ucdr_serialize_endian_array_char>

080145ac <ucdr_deserialize_sequence_char>:
 80145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b0:	461d      	mov	r5, r3
 80145b2:	4616      	mov	r6, r2
 80145b4:	460f      	mov	r7, r1
 80145b6:	461a      	mov	r2, r3
 80145b8:	7d01      	ldrb	r1, [r0, #20]
 80145ba:	4604      	mov	r4, r0
 80145bc:	f7f6 fba0 	bl	800ad00 <ucdr_deserialize_endian_uint32_t>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	429e      	cmp	r6, r3
 80145c4:	bf3c      	itt	cc
 80145c6:	2201      	movcc	r2, #1
 80145c8:	75a2      	strbcc	r2, [r4, #22]
 80145ca:	b913      	cbnz	r3, 80145d2 <ucdr_deserialize_sequence_char+0x26>
 80145cc:	2001      	movs	r0, #1
 80145ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d2:	7d21      	ldrb	r1, [r4, #20]
 80145d4:	463a      	mov	r2, r7
 80145d6:	4620      	mov	r0, r4
 80145d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145dc:	f7ff beda 	b.w	8014394 <ucdr_deserialize_endian_array_char>

080145e0 <ucdr_serialize_sequence_uint8_t>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	4615      	mov	r5, r2
 80145e4:	460e      	mov	r6, r1
 80145e6:	7d01      	ldrb	r1, [r0, #20]
 80145e8:	4604      	mov	r4, r0
 80145ea:	f7f6 fa61 	bl	800aab0 <ucdr_serialize_endian_uint32_t>
 80145ee:	b90d      	cbnz	r5, 80145f4 <ucdr_serialize_sequence_uint8_t+0x14>
 80145f0:	2001      	movs	r0, #1
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	7d21      	ldrb	r1, [r4, #20]
 80145f6:	462b      	mov	r3, r5
 80145f8:	4632      	mov	r2, r6
 80145fa:	4620      	mov	r0, r4
 80145fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014600:	f7ff bf2c 	b.w	801445c <ucdr_serialize_endian_array_uint8_t>

08014604 <ucdr_deserialize_sequence_uint8_t>:
 8014604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014608:	461d      	mov	r5, r3
 801460a:	4616      	mov	r6, r2
 801460c:	460f      	mov	r7, r1
 801460e:	461a      	mov	r2, r3
 8014610:	7d01      	ldrb	r1, [r0, #20]
 8014612:	4604      	mov	r4, r0
 8014614:	f7f6 fb74 	bl	800ad00 <ucdr_deserialize_endian_uint32_t>
 8014618:	682b      	ldr	r3, [r5, #0]
 801461a:	429e      	cmp	r6, r3
 801461c:	bf3c      	itt	cc
 801461e:	2201      	movcc	r2, #1
 8014620:	75a2      	strbcc	r2, [r4, #22]
 8014622:	b913      	cbnz	r3, 801462a <ucdr_deserialize_sequence_uint8_t+0x26>
 8014624:	2001      	movs	r0, #1
 8014626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462a:	7d21      	ldrb	r1, [r4, #20]
 801462c:	463a      	mov	r2, r7
 801462e:	4620      	mov	r0, r4
 8014630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014634:	f7ff bf76 	b.w	8014524 <ucdr_deserialize_endian_array_uint8_t>

08014638 <ucdr_serialize_string>:
 8014638:	b510      	push	{r4, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	4604      	mov	r4, r0
 801463e:	4608      	mov	r0, r1
 8014640:	9101      	str	r1, [sp, #4]
 8014642:	f7eb fdd7 	bl	80001f4 <strlen>
 8014646:	9901      	ldr	r1, [sp, #4]
 8014648:	1c42      	adds	r2, r0, #1
 801464a:	4620      	mov	r0, r4
 801464c:	b002      	add	sp, #8
 801464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014652:	f7ff bf99 	b.w	8014588 <ucdr_serialize_sequence_char>
 8014656:	bf00      	nop

08014658 <ucdr_deserialize_string>:
 8014658:	b500      	push	{lr}
 801465a:	b083      	sub	sp, #12
 801465c:	ab01      	add	r3, sp, #4
 801465e:	f7ff ffa5 	bl	80145ac <ucdr_deserialize_sequence_char>
 8014662:	b003      	add	sp, #12
 8014664:	f85d fb04 	ldr.w	pc, [sp], #4

08014668 <uxr_init_input_best_effort_stream>:
 8014668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801466c:	8003      	strh	r3, [r0, #0]
 801466e:	4770      	bx	lr

08014670 <uxr_reset_input_best_effort_stream>:
 8014670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014674:	8003      	strh	r3, [r0, #0]
 8014676:	4770      	bx	lr

08014678 <uxr_receive_best_effort_message>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	4604      	mov	r4, r0
 801467c:	8800      	ldrh	r0, [r0, #0]
 801467e:	460d      	mov	r5, r1
 8014680:	f000 fd22 	bl	80150c8 <uxr_seq_num_cmp>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801468c:	bfb8      	it	lt
 801468e:	8025      	strhlt	r5, [r4, #0]
 8014690:	bd38      	pop	{r3, r4, r5, pc}
 8014692:	bf00      	nop

08014694 <on_full_input_buffer>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	4605      	mov	r5, r0
 8014698:	460c      	mov	r4, r1
 801469a:	682b      	ldr	r3, [r5, #0]
 801469c:	6809      	ldr	r1, [r1, #0]
 801469e:	8920      	ldrh	r0, [r4, #8]
 80146a0:	6862      	ldr	r2, [r4, #4]
 80146a2:	fbb2 f2f0 	udiv	r2, r2, r0
 80146a6:	eba3 0c01 	sub.w	ip, r3, r1
 80146aa:	fbbc fcf2 	udiv	ip, ip, r2
 80146ae:	f10c 0c01 	add.w	ip, ip, #1
 80146b2:	fa1f f38c 	uxth.w	r3, ip
 80146b6:	fbb3 f6f0 	udiv	r6, r3, r0
 80146ba:	fb00 3316 	mls	r3, r0, r6, r3
 80146be:	b29b      	uxth	r3, r3
 80146c0:	fb02 f303 	mul.w	r3, r2, r3
 80146c4:	1d18      	adds	r0, r3, #4
 80146c6:	4408      	add	r0, r1
 80146c8:	7d26      	ldrb	r6, [r4, #20]
 80146ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80146ce:	b116      	cbz	r6, 80146d6 <on_full_input_buffer+0x42>
 80146d0:	2600      	movs	r6, #0
 80146d2:	f840 6c04 	str.w	r6, [r0, #-4]
 80146d6:	2a03      	cmp	r2, #3
 80146d8:	d801      	bhi.n	80146de <on_full_input_buffer+0x4a>
 80146da:	2001      	movs	r0, #1
 80146dc:	bd70      	pop	{r4, r5, r6, pc}
 80146de:	3308      	adds	r3, #8
 80146e0:	4419      	add	r1, r3
 80146e2:	4628      	mov	r0, r5
 80146e4:	692b      	ldr	r3, [r5, #16]
 80146e6:	3a04      	subs	r2, #4
 80146e8:	f7f7 f82c 	bl	800b744 <ucdr_init_buffer_origin>
 80146ec:	4628      	mov	r0, r5
 80146ee:	4903      	ldr	r1, [pc, #12]	@ (80146fc <on_full_input_buffer+0x68>)
 80146f0:	4622      	mov	r2, r4
 80146f2:	f7f7 f803 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 80146f6:	2000      	movs	r0, #0
 80146f8:	bd70      	pop	{r4, r5, r6, pc}
 80146fa:	bf00      	nop
 80146fc:	08014695 	.word	0x08014695

08014700 <uxr_init_input_reliable_stream>:
 8014700:	b500      	push	{lr}
 8014702:	e9c0 1200 	strd	r1, r2, [r0]
 8014706:	f04f 0e00 	mov.w	lr, #0
 801470a:	9a01      	ldr	r2, [sp, #4]
 801470c:	8103      	strh	r3, [r0, #8]
 801470e:	6102      	str	r2, [r0, #16]
 8014710:	f880 e014 	strb.w	lr, [r0, #20]
 8014714:	b1d3      	cbz	r3, 801474c <uxr_init_input_reliable_stream+0x4c>
 8014716:	f8c1 e000 	str.w	lr, [r1]
 801471a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801471e:	f1bc 0f01 	cmp.w	ip, #1
 8014722:	d913      	bls.n	801474c <uxr_init_input_reliable_stream+0x4c>
 8014724:	2301      	movs	r3, #1
 8014726:	fbb3 f1fc 	udiv	r1, r3, ip
 801472a:	fb0c 3111 	mls	r1, ip, r1, r3
 801472e:	b289      	uxth	r1, r1
 8014730:	6842      	ldr	r2, [r0, #4]
 8014732:	fbb2 f2fc 	udiv	r2, r2, ip
 8014736:	fb01 f202 	mul.w	r2, r1, r2
 801473a:	6801      	ldr	r1, [r0, #0]
 801473c:	f841 e002 	str.w	lr, [r1, r2]
 8014740:	3301      	adds	r3, #1
 8014742:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014746:	b29b      	uxth	r3, r3
 8014748:	459c      	cmp	ip, r3
 801474a:	d8ec      	bhi.n	8014726 <uxr_init_input_reliable_stream+0x26>
 801474c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014750:	60c3      	str	r3, [r0, #12]
 8014752:	f85d fb04 	ldr.w	pc, [sp], #4
 8014756:	bf00      	nop

08014758 <uxr_reset_input_reliable_stream>:
 8014758:	8901      	ldrh	r1, [r0, #8]
 801475a:	b1e9      	cbz	r1, 8014798 <uxr_reset_input_reliable_stream+0x40>
 801475c:	f04f 0c00 	mov.w	ip, #0
 8014760:	b500      	push	{lr}
 8014762:	4663      	mov	r3, ip
 8014764:	46e6      	mov	lr, ip
 8014766:	fbb3 f2f1 	udiv	r2, r3, r1
 801476a:	fb01 3312 	mls	r3, r1, r2, r3
 801476e:	b29b      	uxth	r3, r3
 8014770:	6842      	ldr	r2, [r0, #4]
 8014772:	fbb2 f2f1 	udiv	r2, r2, r1
 8014776:	fb02 f303 	mul.w	r3, r2, r3
 801477a:	6802      	ldr	r2, [r0, #0]
 801477c:	f842 e003 	str.w	lr, [r2, r3]
 8014780:	f10c 0c01 	add.w	ip, ip, #1
 8014784:	8901      	ldrh	r1, [r0, #8]
 8014786:	fa1f f38c 	uxth.w	r3, ip
 801478a:	4299      	cmp	r1, r3
 801478c:	d8eb      	bhi.n	8014766 <uxr_reset_input_reliable_stream+0xe>
 801478e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014792:	60c3      	str	r3, [r0, #12]
 8014794:	f85d fb04 	ldr.w	pc, [sp], #4
 8014798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801479c:	60c3      	str	r3, [r0, #12]
 801479e:	4770      	bx	lr

080147a0 <uxr_receive_reliable_message>:
 80147a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147a4:	4604      	mov	r4, r0
 80147a6:	460d      	mov	r5, r1
 80147a8:	8901      	ldrh	r1, [r0, #8]
 80147aa:	8980      	ldrh	r0, [r0, #12]
 80147ac:	4690      	mov	r8, r2
 80147ae:	461f      	mov	r7, r3
 80147b0:	f000 fc82 	bl	80150b8 <uxr_seq_num_add>
 80147b4:	4629      	mov	r1, r5
 80147b6:	4606      	mov	r6, r0
 80147b8:	89a0      	ldrh	r0, [r4, #12]
 80147ba:	f000 fc85 	bl	80150c8 <uxr_seq_num_cmp>
 80147be:	2800      	cmp	r0, #0
 80147c0:	db0a      	blt.n	80147d8 <uxr_receive_reliable_message+0x38>
 80147c2:	2600      	movs	r6, #0
 80147c4:	89e0      	ldrh	r0, [r4, #14]
 80147c6:	4629      	mov	r1, r5
 80147c8:	f000 fc7e 	bl	80150c8 <uxr_seq_num_cmp>
 80147cc:	2800      	cmp	r0, #0
 80147ce:	da00      	bge.n	80147d2 <uxr_receive_reliable_message+0x32>
 80147d0:	81e5      	strh	r5, [r4, #14]
 80147d2:	4630      	mov	r0, r6
 80147d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d8:	4630      	mov	r0, r6
 80147da:	4629      	mov	r1, r5
 80147dc:	f000 fc74 	bl	80150c8 <uxr_seq_num_cmp>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	dbee      	blt.n	80147c2 <uxr_receive_reliable_message+0x22>
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	4640      	mov	r0, r8
 80147e8:	4798      	blx	r3
 80147ea:	2101      	movs	r1, #1
 80147ec:	4681      	mov	r9, r0
 80147ee:	89a0      	ldrh	r0, [r4, #12]
 80147f0:	f000 fc62 	bl	80150b8 <uxr_seq_num_add>
 80147f4:	f1b9 0f00 	cmp.w	r9, #0
 80147f8:	d101      	bne.n	80147fe <uxr_receive_reliable_message+0x5e>
 80147fa:	4285      	cmp	r5, r0
 80147fc:	d047      	beq.n	801488e <uxr_receive_reliable_message+0xee>
 80147fe:	8922      	ldrh	r2, [r4, #8]
 8014800:	fbb5 f0f2 	udiv	r0, r5, r2
 8014804:	fb02 5010 	mls	r0, r2, r0, r5
 8014808:	b280      	uxth	r0, r0
 801480a:	6863      	ldr	r3, [r4, #4]
 801480c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014810:	fb00 f303 	mul.w	r3, r0, r3
 8014814:	6820      	ldr	r0, [r4, #0]
 8014816:	3304      	adds	r3, #4
 8014818:	4418      	add	r0, r3
 801481a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1cf      	bne.n	80147c2 <uxr_receive_reliable_message+0x22>
 8014822:	4641      	mov	r1, r8
 8014824:	463a      	mov	r2, r7
 8014826:	f001 f908 	bl	8015a3a <memcpy>
 801482a:	8921      	ldrh	r1, [r4, #8]
 801482c:	fbb5 f2f1 	udiv	r2, r5, r1
 8014830:	fb01 5212 	mls	r2, r1, r2, r5
 8014834:	b292      	uxth	r2, r2
 8014836:	6863      	ldr	r3, [r4, #4]
 8014838:	fbb3 f3f1 	udiv	r3, r3, r1
 801483c:	fb02 f303 	mul.w	r3, r2, r3
 8014840:	6822      	ldr	r2, [r4, #0]
 8014842:	50d7      	str	r7, [r2, r3]
 8014844:	9a08      	ldr	r2, [sp, #32]
 8014846:	2301      	movs	r3, #1
 8014848:	7013      	strb	r3, [r2, #0]
 801484a:	f1b9 0f00 	cmp.w	r9, #0
 801484e:	d0b8      	beq.n	80147c2 <uxr_receive_reliable_message+0x22>
 8014850:	89a6      	ldrh	r6, [r4, #12]
 8014852:	4630      	mov	r0, r6
 8014854:	2101      	movs	r1, #1
 8014856:	f000 fc2f 	bl	80150b8 <uxr_seq_num_add>
 801485a:	8922      	ldrh	r2, [r4, #8]
 801485c:	6863      	ldr	r3, [r4, #4]
 801485e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014862:	4606      	mov	r6, r0
 8014864:	fbb0 f0f2 	udiv	r0, r0, r2
 8014868:	fb02 6010 	mls	r0, r2, r0, r6
 801486c:	b280      	uxth	r0, r0
 801486e:	fb00 f303 	mul.w	r3, r0, r3
 8014872:	6820      	ldr	r0, [r4, #0]
 8014874:	3304      	adds	r3, #4
 8014876:	4418      	add	r0, r3
 8014878:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d0a0      	beq.n	80147c2 <uxr_receive_reliable_message+0x22>
 8014880:	6923      	ldr	r3, [r4, #16]
 8014882:	4798      	blx	r3
 8014884:	2802      	cmp	r0, #2
 8014886:	d008      	beq.n	801489a <uxr_receive_reliable_message+0xfa>
 8014888:	2801      	cmp	r0, #1
 801488a:	d0e2      	beq.n	8014852 <uxr_receive_reliable_message+0xb2>
 801488c:	e799      	b.n	80147c2 <uxr_receive_reliable_message+0x22>
 801488e:	9b08      	ldr	r3, [sp, #32]
 8014890:	81a5      	strh	r5, [r4, #12]
 8014892:	2601      	movs	r6, #1
 8014894:	f883 9000 	strb.w	r9, [r3]
 8014898:	e794      	b.n	80147c4 <uxr_receive_reliable_message+0x24>
 801489a:	2601      	movs	r6, #1
 801489c:	e792      	b.n	80147c4 <uxr_receive_reliable_message+0x24>
 801489e:	bf00      	nop

080148a0 <uxr_next_input_reliable_buffer_available>:
 80148a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148a4:	4604      	mov	r4, r0
 80148a6:	460f      	mov	r7, r1
 80148a8:	8980      	ldrh	r0, [r0, #12]
 80148aa:	2101      	movs	r1, #1
 80148ac:	4690      	mov	r8, r2
 80148ae:	f000 fc03 	bl	80150b8 <uxr_seq_num_add>
 80148b2:	8922      	ldrh	r2, [r4, #8]
 80148b4:	fbb0 f6f2 	udiv	r6, r0, r2
 80148b8:	fb02 0616 	mls	r6, r2, r6, r0
 80148bc:	b2b6      	uxth	r6, r6
 80148be:	6863      	ldr	r3, [r4, #4]
 80148c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80148c4:	fb06 f303 	mul.w	r3, r6, r3
 80148c8:	6826      	ldr	r6, [r4, #0]
 80148ca:	3304      	adds	r3, #4
 80148cc:	441e      	add	r6, r3
 80148ce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80148d2:	f1b9 0f00 	cmp.w	r9, #0
 80148d6:	d023      	beq.n	8014920 <uxr_next_input_reliable_buffer_available+0x80>
 80148d8:	6923      	ldr	r3, [r4, #16]
 80148da:	4605      	mov	r5, r0
 80148dc:	4630      	mov	r0, r6
 80148de:	4798      	blx	r3
 80148e0:	4682      	mov	sl, r0
 80148e2:	b300      	cbz	r0, 8014926 <uxr_next_input_reliable_buffer_available+0x86>
 80148e4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80148e8:	2101      	movs	r1, #1
 80148ea:	4650      	mov	r0, sl
 80148ec:	f000 fbe4 	bl	80150b8 <uxr_seq_num_add>
 80148f0:	8921      	ldrh	r1, [r4, #8]
 80148f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80148f6:	4682      	mov	sl, r0
 80148f8:	fb01 0212 	mls	r2, r1, r2, r0
 80148fc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014900:	b292      	uxth	r2, r2
 8014902:	fbb3 f3f1 	udiv	r3, r3, r1
 8014906:	fb02 f303 	mul.w	r3, r2, r3
 801490a:	3304      	adds	r3, #4
 801490c:	4418      	add	r0, r3
 801490e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014912:	b12b      	cbz	r3, 8014920 <uxr_next_input_reliable_buffer_available+0x80>
 8014914:	6923      	ldr	r3, [r4, #16]
 8014916:	4798      	blx	r3
 8014918:	2802      	cmp	r0, #2
 801491a:	d01b      	beq.n	8014954 <uxr_next_input_reliable_buffer_available+0xb4>
 801491c:	2801      	cmp	r0, #1
 801491e:	d0e3      	beq.n	80148e8 <uxr_next_input_reliable_buffer_available+0x48>
 8014920:	2000      	movs	r0, #0
 8014922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014926:	464a      	mov	r2, r9
 8014928:	4631      	mov	r1, r6
 801492a:	4638      	mov	r0, r7
 801492c:	f7f6 ff12 	bl	800b754 <ucdr_init_buffer>
 8014930:	8921      	ldrh	r1, [r4, #8]
 8014932:	fbb5 f2f1 	udiv	r2, r5, r1
 8014936:	fb01 5212 	mls	r2, r1, r2, r5
 801493a:	b292      	uxth	r2, r2
 801493c:	6863      	ldr	r3, [r4, #4]
 801493e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014942:	fb02 f303 	mul.w	r3, r2, r3
 8014946:	6822      	ldr	r2, [r4, #0]
 8014948:	f842 a003 	str.w	sl, [r2, r3]
 801494c:	2001      	movs	r0, #1
 801494e:	81a5      	strh	r5, [r4, #12]
 8014950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014954:	8920      	ldrh	r0, [r4, #8]
 8014956:	fbb5 f3f0 	udiv	r3, r5, r0
 801495a:	fb00 5513 	mls	r5, r0, r3, r5
 801495e:	b2ad      	uxth	r5, r5
 8014960:	6863      	ldr	r3, [r4, #4]
 8014962:	fbb3 f3f0 	udiv	r3, r3, r0
 8014966:	fb03 f505 	mul.w	r5, r3, r5
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	2000      	movs	r0, #0
 801496e:	5158      	str	r0, [r3, r5]
 8014970:	eb06 0108 	add.w	r1, r6, r8
 8014974:	eba9 0208 	sub.w	r2, r9, r8
 8014978:	4638      	mov	r0, r7
 801497a:	f7f6 feeb 	bl	800b754 <ucdr_init_buffer>
 801497e:	4638      	mov	r0, r7
 8014980:	4903      	ldr	r1, [pc, #12]	@ (8014990 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014982:	4622      	mov	r2, r4
 8014984:	f7f6 feba 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8014988:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801498c:	2001      	movs	r0, #1
 801498e:	e7c8      	b.n	8014922 <uxr_next_input_reliable_buffer_available+0x82>
 8014990:	08014695 	.word	0x08014695

08014994 <uxr_process_heartbeat>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4611      	mov	r1, r2
 8014998:	4604      	mov	r4, r0
 801499a:	89c0      	ldrh	r0, [r0, #14]
 801499c:	4615      	mov	r5, r2
 801499e:	f000 fb93 	bl	80150c8 <uxr_seq_num_cmp>
 80149a2:	2800      	cmp	r0, #0
 80149a4:	bfb8      	it	lt
 80149a6:	81e5      	strhlt	r5, [r4, #14]
 80149a8:	bd38      	pop	{r3, r4, r5, pc}
 80149aa:	bf00      	nop

080149ac <uxr_compute_acknack>:
 80149ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149b0:	8903      	ldrh	r3, [r0, #8]
 80149b2:	8985      	ldrh	r5, [r0, #12]
 80149b4:	4604      	mov	r4, r0
 80149b6:	460e      	mov	r6, r1
 80149b8:	b1d3      	cbz	r3, 80149f0 <uxr_compute_acknack+0x44>
 80149ba:	4628      	mov	r0, r5
 80149bc:	2701      	movs	r7, #1
 80149be:	e003      	b.n	80149c8 <uxr_compute_acknack+0x1c>
 80149c0:	4567      	cmp	r7, ip
 80149c2:	d215      	bcs.n	80149f0 <uxr_compute_acknack+0x44>
 80149c4:	89a0      	ldrh	r0, [r4, #12]
 80149c6:	3701      	adds	r7, #1
 80149c8:	b2b9      	uxth	r1, r7
 80149ca:	f000 fb75 	bl	80150b8 <uxr_seq_num_add>
 80149ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80149d2:	fbb0 f3fc 	udiv	r3, r0, ip
 80149d6:	fb0c 0313 	mls	r3, ip, r3, r0
 80149da:	b29a      	uxth	r2, r3
 80149dc:	e9d4 1300 	ldrd	r1, r3, [r4]
 80149e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80149e4:	fb02 f303 	mul.w	r3, r2, r3
 80149e8:	58cb      	ldr	r3, [r1, r3]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d1e8      	bne.n	80149c0 <uxr_compute_acknack+0x14>
 80149ee:	4605      	mov	r5, r0
 80149f0:	8035      	strh	r5, [r6, #0]
 80149f2:	2101      	movs	r1, #1
 80149f4:	4628      	mov	r0, r5
 80149f6:	89e7      	ldrh	r7, [r4, #14]
 80149f8:	f000 fb62 	bl	80150c0 <uxr_seq_num_sub>
 80149fc:	4601      	mov	r1, r0
 80149fe:	4638      	mov	r0, r7
 8014a00:	f000 fb5e 	bl	80150c0 <uxr_seq_num_sub>
 8014a04:	4605      	mov	r5, r0
 8014a06:	b318      	cbz	r0, 8014a50 <uxr_compute_acknack+0xa4>
 8014a08:	f04f 0900 	mov.w	r9, #0
 8014a0c:	464f      	mov	r7, r9
 8014a0e:	f04f 0801 	mov.w	r8, #1
 8014a12:	fa1f f189 	uxth.w	r1, r9
 8014a16:	8830      	ldrh	r0, [r6, #0]
 8014a18:	f000 fb4e 	bl	80150b8 <uxr_seq_num_add>
 8014a1c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014a20:	fbb0 f3fc 	udiv	r3, r0, ip
 8014a24:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014a28:	fb03 001c 	mls	r0, r3, ip, r0
 8014a2c:	b283      	uxth	r3, r0
 8014a2e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014a32:	fb02 f303 	mul.w	r3, r2, r3
 8014a36:	fa08 f209 	lsl.w	r2, r8, r9
 8014a3a:	58cb      	ldr	r3, [r1, r3]
 8014a3c:	f109 0901 	add.w	r9, r9, #1
 8014a40:	b90b      	cbnz	r3, 8014a46 <uxr_compute_acknack+0x9a>
 8014a42:	4317      	orrs	r7, r2
 8014a44:	b2bf      	uxth	r7, r7
 8014a46:	454d      	cmp	r5, r9
 8014a48:	d1e3      	bne.n	8014a12 <uxr_compute_acknack+0x66>
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a50:	4607      	mov	r7, r0
 8014a52:	4638      	mov	r0, r7
 8014a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014a58 <uxr_init_output_best_effort_stream>:
 8014a58:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014a5c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014a60:	6001      	str	r1, [r0, #0]
 8014a62:	7303      	strb	r3, [r0, #12]
 8014a64:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014a68:	4770      	bx	lr
 8014a6a:	bf00      	nop

08014a6c <uxr_reset_output_best_effort_stream>:
 8014a6c:	7b02      	ldrb	r2, [r0, #12]
 8014a6e:	6042      	str	r2, [r0, #4]
 8014a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a74:	81c3      	strh	r3, [r0, #14]
 8014a76:	4770      	bx	lr

08014a78 <uxr_prepare_best_effort_buffer_to_write>:
 8014a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	b083      	sub	sp, #12
 8014a7e:	6840      	ldr	r0, [r0, #4]
 8014a80:	460d      	mov	r5, r1
 8014a82:	4616      	mov	r6, r2
 8014a84:	f7fd fe8a 	bl	801279c <uxr_submessage_padding>
 8014a88:	6863      	ldr	r3, [r4, #4]
 8014a8a:	4418      	add	r0, r3
 8014a8c:	68a3      	ldr	r3, [r4, #8]
 8014a8e:	1942      	adds	r2, r0, r5
 8014a90:	4293      	cmp	r3, r2
 8014a92:	bf2c      	ite	cs
 8014a94:	2701      	movcs	r7, #1
 8014a96:	2700      	movcc	r7, #0
 8014a98:	d202      	bcs.n	8014aa0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014a9a:	4638      	mov	r0, r7
 8014a9c:	b003      	add	sp, #12
 8014a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aa0:	9000      	str	r0, [sp, #0]
 8014aa2:	6821      	ldr	r1, [r4, #0]
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	f7f6 fe42 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8014aac:	6861      	ldr	r1, [r4, #4]
 8014aae:	4638      	mov	r0, r7
 8014ab0:	4429      	add	r1, r5
 8014ab2:	6061      	str	r1, [r4, #4]
 8014ab4:	b003      	add	sp, #12
 8014ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ab8 <uxr_prepare_best_effort_buffer_to_send>:
 8014ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014abc:	4604      	mov	r4, r0
 8014abe:	461d      	mov	r5, r3
 8014ac0:	6840      	ldr	r0, [r0, #4]
 8014ac2:	7b23      	ldrb	r3, [r4, #12]
 8014ac4:	4298      	cmp	r0, r3
 8014ac6:	bf8c      	ite	hi
 8014ac8:	2601      	movhi	r6, #1
 8014aca:	2600      	movls	r6, #0
 8014acc:	d802      	bhi.n	8014ad4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014ace:	4630      	mov	r0, r6
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad4:	4688      	mov	r8, r1
 8014ad6:	89e0      	ldrh	r0, [r4, #14]
 8014ad8:	2101      	movs	r1, #1
 8014ada:	4617      	mov	r7, r2
 8014adc:	f000 faec 	bl	80150b8 <uxr_seq_num_add>
 8014ae0:	6823      	ldr	r3, [r4, #0]
 8014ae2:	81e0      	strh	r0, [r4, #14]
 8014ae4:	8028      	strh	r0, [r5, #0]
 8014ae6:	f8c8 3000 	str.w	r3, [r8]
 8014aea:	6863      	ldr	r3, [r4, #4]
 8014aec:	603b      	str	r3, [r7, #0]
 8014aee:	7b23      	ldrb	r3, [r4, #12]
 8014af0:	6063      	str	r3, [r4, #4]
 8014af2:	4630      	mov	r0, r6
 8014af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014af8 <on_full_output_buffer>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	6802      	ldr	r2, [r0, #0]
 8014afc:	460c      	mov	r4, r1
 8014afe:	6809      	ldr	r1, [r1, #0]
 8014b00:	8923      	ldrh	r3, [r4, #8]
 8014b02:	eba2 0c01 	sub.w	ip, r2, r1
 8014b06:	6862      	ldr	r2, [r4, #4]
 8014b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b0c:	fbbc fcf2 	udiv	ip, ip, r2
 8014b10:	f10c 0c01 	add.w	ip, ip, #1
 8014b14:	fa1f fc8c 	uxth.w	ip, ip
 8014b18:	fbbc fef3 	udiv	lr, ip, r3
 8014b1c:	fb03 c31e 	mls	r3, r3, lr, ip
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	fb02 f303 	mul.w	r3, r2, r3
 8014b26:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014b2a:	58ca      	ldr	r2, [r1, r3]
 8014b2c:	4463      	add	r3, ip
 8014b2e:	eba2 020c 	sub.w	r2, r2, ip
 8014b32:	3308      	adds	r3, #8
 8014b34:	4605      	mov	r5, r0
 8014b36:	4419      	add	r1, r3
 8014b38:	3a04      	subs	r2, #4
 8014b3a:	6903      	ldr	r3, [r0, #16]
 8014b3c:	f7f6 fe02 	bl	800b744 <ucdr_init_buffer_origin>
 8014b40:	4628      	mov	r0, r5
 8014b42:	4903      	ldr	r1, [pc, #12]	@ (8014b50 <on_full_output_buffer+0x58>)
 8014b44:	4622      	mov	r2, r4
 8014b46:	f7f6 fdd9 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	bd38      	pop	{r3, r4, r5, pc}
 8014b4e:	bf00      	nop
 8014b50:	08014af9 	.word	0x08014af9

08014b54 <uxr_init_output_reliable_stream>:
 8014b54:	b410      	push	{r4}
 8014b56:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014b5a:	8103      	strh	r3, [r0, #8]
 8014b5c:	e9c0 1200 	strd	r1, r2, [r0]
 8014b60:	f880 c00c 	strb.w	ip, [r0, #12]
 8014b64:	b1d3      	cbz	r3, 8014b9c <uxr_init_output_reliable_stream+0x48>
 8014b66:	f8c1 c000 	str.w	ip, [r1]
 8014b6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b6e:	f1bc 0f01 	cmp.w	ip, #1
 8014b72:	d913      	bls.n	8014b9c <uxr_init_output_reliable_stream+0x48>
 8014b74:	2301      	movs	r3, #1
 8014b76:	fbb3 f1fc 	udiv	r1, r3, ip
 8014b7a:	fb0c 3111 	mls	r1, ip, r1, r3
 8014b7e:	b289      	uxth	r1, r1
 8014b80:	6842      	ldr	r2, [r0, #4]
 8014b82:	6804      	ldr	r4, [r0, #0]
 8014b84:	fbb2 f2fc 	udiv	r2, r2, ip
 8014b88:	fb01 f202 	mul.w	r2, r1, r2
 8014b8c:	7b01      	ldrb	r1, [r0, #12]
 8014b8e:	50a1      	str	r1, [r4, r2]
 8014b90:	3301      	adds	r3, #1
 8014b92:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	459c      	cmp	ip, r3
 8014b9a:	d8ec      	bhi.n	8014b76 <uxr_init_output_reliable_stream+0x22>
 8014b9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014ba0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014ba4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014ba8:	4905      	ldr	r1, [pc, #20]	@ (8014bc0 <uxr_init_output_reliable_stream+0x6c>)
 8014baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bae:	f8c0 100e 	str.w	r1, [r0, #14]
 8014bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	8242      	strh	r2, [r0, #18]
 8014bba:	8403      	strh	r3, [r0, #32]
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop
 8014bc0:	ffff0000 	.word	0xffff0000

08014bc4 <uxr_reset_output_reliable_stream>:
 8014bc4:	8901      	ldrh	r1, [r0, #8]
 8014bc6:	b1b1      	cbz	r1, 8014bf6 <uxr_reset_output_reliable_stream+0x32>
 8014bc8:	f04f 0c00 	mov.w	ip, #0
 8014bcc:	4663      	mov	r3, ip
 8014bce:	fbb3 f2f1 	udiv	r2, r3, r1
 8014bd2:	fb01 3312 	mls	r3, r1, r2, r3
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	6842      	ldr	r2, [r0, #4]
 8014bda:	fbb2 f2f1 	udiv	r2, r2, r1
 8014bde:	6801      	ldr	r1, [r0, #0]
 8014be0:	fb02 f303 	mul.w	r3, r2, r3
 8014be4:	7b02      	ldrb	r2, [r0, #12]
 8014be6:	50ca      	str	r2, [r1, r3]
 8014be8:	f10c 0c01 	add.w	ip, ip, #1
 8014bec:	8901      	ldrh	r1, [r0, #8]
 8014bee:	fa1f f38c 	uxth.w	r3, ip
 8014bf2:	4299      	cmp	r1, r3
 8014bf4:	d8eb      	bhi.n	8014bce <uxr_reset_output_reliable_stream+0xa>
 8014bf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014bfa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014bfe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014c02:	4904      	ldr	r1, [pc, #16]	@ (8014c14 <uxr_reset_output_reliable_stream+0x50>)
 8014c04:	f8c0 100e 	str.w	r1, [r0, #14]
 8014c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	8242      	strh	r2, [r0, #18]
 8014c10:	8403      	strh	r3, [r0, #32]
 8014c12:	4770      	bx	lr
 8014c14:	ffff0000 	.word	0xffff0000

08014c18 <uxr_prepare_reliable_buffer_to_write>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	b091      	sub	sp, #68	@ 0x44
 8014c20:	8900      	ldrh	r0, [r0, #8]
 8014c22:	89e6      	ldrh	r6, [r4, #14]
 8014c24:	6823      	ldr	r3, [r4, #0]
 8014c26:	9204      	str	r2, [sp, #16]
 8014c28:	fbb6 f2f0 	udiv	r2, r6, r0
 8014c2c:	fb00 6212 	mls	r2, r0, r2, r6
 8014c30:	b292      	uxth	r2, r2
 8014c32:	6865      	ldr	r5, [r4, #4]
 8014c34:	fbb5 f5f0 	udiv	r5, r5, r0
 8014c38:	fb05 3202 	mla	r2, r5, r2, r3
 8014c3c:	3204      	adds	r2, #4
 8014c3e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014c42:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014c46:	9203      	str	r2, [sp, #12]
 8014c48:	468b      	mov	fp, r1
 8014c4a:	1f2f      	subs	r7, r5, #4
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	f000 814c 	beq.w	8014eea <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014c52:	f04f 0c00 	mov.w	ip, #0
 8014c56:	46e2      	mov	sl, ip
 8014c58:	4661      	mov	r1, ip
 8014c5a:	fbb1 f2f0 	udiv	r2, r1, r0
 8014c5e:	fb00 1212 	mls	r2, r0, r2, r1
 8014c62:	b292      	uxth	r2, r2
 8014c64:	fb05 f202 	mul.w	r2, r5, r2
 8014c68:	f10c 0c01 	add.w	ip, ip, #1
 8014c6c:	589a      	ldr	r2, [r3, r2]
 8014c6e:	454a      	cmp	r2, r9
 8014c70:	bf08      	it	eq
 8014c72:	f10a 0a01 	addeq.w	sl, sl, #1
 8014c76:	fa1f f18c 	uxth.w	r1, ip
 8014c7a:	bf08      	it	eq
 8014c7c:	fa1f fa8a 	uxtheq.w	sl, sl
 8014c80:	4281      	cmp	r1, r0
 8014c82:	d3ea      	bcc.n	8014c5a <uxr_prepare_reliable_buffer_to_write+0x42>
 8014c84:	4640      	mov	r0, r8
 8014c86:	2104      	movs	r1, #4
 8014c88:	f8cd a014 	str.w	sl, [sp, #20]
 8014c8c:	f7f6 fd66 	bl	800b75c <ucdr_alignment>
 8014c90:	4480      	add	r8, r0
 8014c92:	eb08 020b 	add.w	r2, r8, fp
 8014c96:	42ba      	cmp	r2, r7
 8014c98:	f240 80cd 	bls.w	8014e36 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014c9c:	7b22      	ldrb	r2, [r4, #12]
 8014c9e:	445a      	add	r2, fp
 8014ca0:	42ba      	cmp	r2, r7
 8014ca2:	f240 80b5 	bls.w	8014e10 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014ca6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014caa:	33fc      	adds	r3, #252	@ 0xfc
 8014cac:	b2ba      	uxth	r2, r7
 8014cae:	4413      	add	r3, r2
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	fb0a f903 	mul.w	r9, sl, r3
 8014cb6:	45d9      	cmp	r9, fp
 8014cb8:	9305      	str	r3, [sp, #20]
 8014cba:	9306      	str	r3, [sp, #24]
 8014cbc:	f0c0 80b7 	bcc.w	8014e2e <uxr_prepare_reliable_buffer_to_write+0x216>
 8014cc0:	f108 0304 	add.w	r3, r8, #4
 8014cc4:	42bb      	cmp	r3, r7
 8014cc6:	f080 80db 	bcs.w	8014e80 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014cca:	f1a2 0904 	sub.w	r9, r2, #4
 8014cce:	eba9 0908 	sub.w	r9, r9, r8
 8014cd2:	9b05      	ldr	r3, [sp, #20]
 8014cd4:	fa1f f989 	uxth.w	r9, r9
 8014cd8:	ebab 0b09 	sub.w	fp, fp, r9
 8014cdc:	fbbb f2f3 	udiv	r2, fp, r3
 8014ce0:	fb03 b312 	mls	r3, r3, r2, fp
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 80c8 	beq.w	8014e7a <uxr_prepare_reliable_buffer_to_write+0x262>
 8014cea:	3201      	adds	r2, #1
 8014cec:	b292      	uxth	r2, r2
 8014cee:	9306      	str	r3, [sp, #24]
 8014cf0:	4552      	cmp	r2, sl
 8014cf2:	f200 809c 	bhi.w	8014e2e <uxr_prepare_reliable_buffer_to_write+0x216>
 8014cf6:	f10d 0b20 	add.w	fp, sp, #32
 8014cfa:	2a00      	cmp	r2, #0
 8014cfc:	d042      	beq.n	8014d84 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014cfe:	f8cd 801c 	str.w	r8, [sp, #28]
 8014d02:	f04f 0a00 	mov.w	sl, #0
 8014d06:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014d0a:	9505      	str	r5, [sp, #20]
 8014d0c:	f10d 0b20 	add.w	fp, sp, #32
 8014d10:	4615      	mov	r5, r2
 8014d12:	e000      	b.n	8014d16 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014d14:	46c1      	mov	r9, r8
 8014d16:	8920      	ldrh	r0, [r4, #8]
 8014d18:	fbb6 f2f0 	udiv	r2, r6, r0
 8014d1c:	fb00 6112 	mls	r1, r0, r2, r6
 8014d20:	b28a      	uxth	r2, r1
 8014d22:	6863      	ldr	r3, [r4, #4]
 8014d24:	fbb3 f1f0 	udiv	r1, r3, r0
 8014d28:	6823      	ldr	r3, [r4, #0]
 8014d2a:	fb02 f101 	mul.w	r1, r2, r1
 8014d2e:	3104      	adds	r1, #4
 8014d30:	4419      	add	r1, r3
 8014d32:	4658      	mov	r0, fp
 8014d34:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014d38:	9200      	str	r2, [sp, #0]
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	463a      	mov	r2, r7
 8014d3e:	f7f6 fcf7 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8014d42:	464a      	mov	r2, r9
 8014d44:	2300      	movs	r3, #0
 8014d46:	210d      	movs	r1, #13
 8014d48:	4658      	mov	r0, fp
 8014d4a:	f7fd fce7 	bl	801271c <uxr_buffer_submessage_header>
 8014d4e:	8921      	ldrh	r1, [r4, #8]
 8014d50:	fbb6 f2f1 	udiv	r2, r6, r1
 8014d54:	fb01 6212 	mls	r2, r1, r2, r6
 8014d58:	b292      	uxth	r2, r2
 8014d5a:	6863      	ldr	r3, [r4, #4]
 8014d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d60:	fb02 f303 	mul.w	r3, r2, r3
 8014d64:	6822      	ldr	r2, [r4, #0]
 8014d66:	4630      	mov	r0, r6
 8014d68:	50d7      	str	r7, [r2, r3]
 8014d6a:	2101      	movs	r1, #1
 8014d6c:	f000 f9a4 	bl	80150b8 <uxr_seq_num_add>
 8014d70:	f10a 0a01 	add.w	sl, sl, #1
 8014d74:	fa1f f38a 	uxth.w	r3, sl
 8014d78:	429d      	cmp	r5, r3
 8014d7a:	4606      	mov	r6, r0
 8014d7c:	d8ca      	bhi.n	8014d14 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014d7e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014d82:	9d05      	ldr	r5, [sp, #20]
 8014d84:	8920      	ldrh	r0, [r4, #8]
 8014d86:	fbb6 f3f0 	udiv	r3, r6, r0
 8014d8a:	fb00 6313 	mls	r3, r0, r3, r6
 8014d8e:	b299      	uxth	r1, r3
 8014d90:	6863      	ldr	r3, [r4, #4]
 8014d92:	fbb3 f3f0 	udiv	r3, r3, r0
 8014d96:	fb01 f303 	mul.w	r3, r1, r3
 8014d9a:	6821      	ldr	r1, [r4, #0]
 8014d9c:	3304      	adds	r3, #4
 8014d9e:	4419      	add	r1, r3
 8014da0:	463a      	mov	r2, r7
 8014da2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014da6:	9000      	str	r0, [sp, #0]
 8014da8:	2300      	movs	r3, #0
 8014daa:	4658      	mov	r0, fp
 8014dac:	f7f6 fcc0 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8014db0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014db4:	4658      	mov	r0, fp
 8014db6:	fa1f f289 	uxth.w	r2, r9
 8014dba:	2302      	movs	r3, #2
 8014dbc:	210d      	movs	r1, #13
 8014dbe:	f7fd fcad 	bl	801271c <uxr_buffer_submessage_header>
 8014dc2:	9b03      	ldr	r3, [sp, #12]
 8014dc4:	8927      	ldrh	r7, [r4, #8]
 8014dc6:	7b20      	ldrb	r0, [r4, #12]
 8014dc8:	f108 0104 	add.w	r1, r8, #4
 8014dcc:	440b      	add	r3, r1
 8014dce:	4619      	mov	r1, r3
 8014dd0:	fbb6 f3f7 	udiv	r3, r6, r7
 8014dd4:	fb07 6313 	mls	r3, r7, r3, r6
 8014dd8:	f1a5 0208 	sub.w	r2, r5, #8
 8014ddc:	b29d      	uxth	r5, r3
 8014dde:	3004      	adds	r0, #4
 8014de0:	6863      	ldr	r3, [r4, #4]
 8014de2:	fbb3 f3f7 	udiv	r3, r3, r7
 8014de6:	fb05 f303 	mul.w	r3, r5, r3
 8014dea:	6825      	ldr	r5, [r4, #0]
 8014dec:	4448      	add	r0, r9
 8014dee:	50e8      	str	r0, [r5, r3]
 8014df0:	9d04      	ldr	r5, [sp, #16]
 8014df2:	eba2 0208 	sub.w	r2, r2, r8
 8014df6:	4628      	mov	r0, r5
 8014df8:	f7f6 fcac 	bl	800b754 <ucdr_init_buffer>
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	493c      	ldr	r1, [pc, #240]	@ (8014ef0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014e00:	4622      	mov	r2, r4
 8014e02:	f7f6 fc7b 	bl	800b6fc <ucdr_set_on_full_buffer_callback>
 8014e06:	2001      	movs	r0, #1
 8014e08:	81e6      	strh	r6, [r4, #14]
 8014e0a:	b011      	add	sp, #68	@ 0x44
 8014e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e10:	2101      	movs	r1, #1
 8014e12:	89e0      	ldrh	r0, [r4, #14]
 8014e14:	f000 f950 	bl	80150b8 <uxr_seq_num_add>
 8014e18:	8921      	ldrh	r1, [r4, #8]
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	8a60      	ldrh	r0, [r4, #18]
 8014e1e:	f000 f94b 	bl	80150b8 <uxr_seq_num_add>
 8014e22:	4601      	mov	r1, r0
 8014e24:	4628      	mov	r0, r5
 8014e26:	f000 f94f 	bl	80150c8 <uxr_seq_num_cmp>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	dd42      	ble.n	8014eb4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014e2e:	2000      	movs	r0, #0
 8014e30:	b011      	add	sp, #68	@ 0x44
 8014e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e36:	8921      	ldrh	r1, [r4, #8]
 8014e38:	8a60      	ldrh	r0, [r4, #18]
 8014e3a:	9205      	str	r2, [sp, #20]
 8014e3c:	f000 f93c 	bl	80150b8 <uxr_seq_num_add>
 8014e40:	4601      	mov	r1, r0
 8014e42:	4630      	mov	r0, r6
 8014e44:	f000 f940 	bl	80150c8 <uxr_seq_num_cmp>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	9a05      	ldr	r2, [sp, #20]
 8014e4c:	dcef      	bgt.n	8014e2e <uxr_prepare_reliable_buffer_to_write+0x216>
 8014e4e:	8927      	ldrh	r7, [r4, #8]
 8014e50:	fbb6 f3f7 	udiv	r3, r6, r7
 8014e54:	fb07 6313 	mls	r3, r7, r3, r6
 8014e58:	b29d      	uxth	r5, r3
 8014e5a:	6863      	ldr	r3, [r4, #4]
 8014e5c:	6824      	ldr	r4, [r4, #0]
 8014e5e:	fbb3 f3f7 	udiv	r3, r3, r7
 8014e62:	fb05 f303 	mul.w	r3, r5, r3
 8014e66:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014e6a:	50e2      	str	r2, [r4, r3]
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	f8cd 8000 	str.w	r8, [sp]
 8014e72:	f7f6 fc5d 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8014e76:	2001      	movs	r0, #1
 8014e78:	e7da      	b.n	8014e30 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014e7a:	b293      	uxth	r3, r2
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	e737      	b.n	8014cf0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014e80:	4630      	mov	r0, r6
 8014e82:	2101      	movs	r1, #1
 8014e84:	9207      	str	r2, [sp, #28]
 8014e86:	f000 f917 	bl	80150b8 <uxr_seq_num_add>
 8014e8a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014e8e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014e92:	fb0c 0111 	mls	r1, ip, r1, r0
 8014e96:	4606      	mov	r6, r0
 8014e98:	b288      	uxth	r0, r1
 8014e9a:	6863      	ldr	r3, [r4, #4]
 8014e9c:	fbb3 f1fc 	udiv	r1, r3, ip
 8014ea0:	6823      	ldr	r3, [r4, #0]
 8014ea2:	9a07      	ldr	r2, [sp, #28]
 8014ea4:	fb00 f101 	mul.w	r1, r0, r1
 8014ea8:	3104      	adds	r1, #4
 8014eaa:	440b      	add	r3, r1
 8014eac:	9303      	str	r3, [sp, #12]
 8014eae:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014eb2:	e70a      	b.n	8014cca <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014eb4:	8921      	ldrh	r1, [r4, #8]
 8014eb6:	fbb5 f3f1 	udiv	r3, r5, r1
 8014eba:	fb01 5313 	mls	r3, r1, r3, r5
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	6863      	ldr	r3, [r4, #4]
 8014ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ec6:	6821      	ldr	r1, [r4, #0]
 8014ec8:	9804      	ldr	r0, [sp, #16]
 8014eca:	fb02 f303 	mul.w	r3, r2, r3
 8014ece:	3304      	adds	r3, #4
 8014ed0:	7b22      	ldrb	r2, [r4, #12]
 8014ed2:	4419      	add	r1, r3
 8014ed4:	445a      	add	r2, fp
 8014ed6:	f841 2c04 	str.w	r2, [r1, #-4]
 8014eda:	7b23      	ldrb	r3, [r4, #12]
 8014edc:	9300      	str	r3, [sp, #0]
 8014ede:	2300      	movs	r3, #0
 8014ee0:	f7f6 fc26 	bl	800b730 <ucdr_init_buffer_origin_offset>
 8014ee4:	81e5      	strh	r5, [r4, #14]
 8014ee6:	2001      	movs	r0, #1
 8014ee8:	e7a2      	b.n	8014e30 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014eea:	4682      	mov	sl, r0
 8014eec:	e6ca      	b.n	8014c84 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014eee:	bf00      	nop
 8014ef0:	08014af9 	.word	0x08014af9

08014ef4 <uxr_prepare_next_reliable_buffer_to_send>:
 8014ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	460f      	mov	r7, r1
 8014efa:	8a00      	ldrh	r0, [r0, #16]
 8014efc:	2101      	movs	r1, #1
 8014efe:	4616      	mov	r6, r2
 8014f00:	461d      	mov	r5, r3
 8014f02:	f000 f8d9 	bl	80150b8 <uxr_seq_num_add>
 8014f06:	8028      	strh	r0, [r5, #0]
 8014f08:	8922      	ldrh	r2, [r4, #8]
 8014f0a:	fbb0 f3f2 	udiv	r3, r0, r2
 8014f0e:	fb02 0c13 	mls	ip, r2, r3, r0
 8014f12:	fa1f fc8c 	uxth.w	ip, ip
 8014f16:	6863      	ldr	r3, [r4, #4]
 8014f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f1c:	fb0c fc03 	mul.w	ip, ip, r3
 8014f20:	6823      	ldr	r3, [r4, #0]
 8014f22:	89e1      	ldrh	r1, [r4, #14]
 8014f24:	f10c 0c04 	add.w	ip, ip, #4
 8014f28:	4463      	add	r3, ip
 8014f2a:	603b      	str	r3, [r7, #0]
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	449c      	add	ip, r3
 8014f30:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014f34:	6033      	str	r3, [r6, #0]
 8014f36:	f000 f8c7 	bl	80150c8 <uxr_seq_num_cmp>
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	dd01      	ble.n	8014f42 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014f3e:	2000      	movs	r0, #0
 8014f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f42:	7b23      	ldrb	r3, [r4, #12]
 8014f44:	6832      	ldr	r2, [r6, #0]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d9f9      	bls.n	8014f3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014f4a:	8a61      	ldrh	r1, [r4, #18]
 8014f4c:	8a20      	ldrh	r0, [r4, #16]
 8014f4e:	f000 f8b7 	bl	80150c0 <uxr_seq_num_sub>
 8014f52:	8923      	ldrh	r3, [r4, #8]
 8014f54:	4283      	cmp	r3, r0
 8014f56:	d0f2      	beq.n	8014f3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014f58:	8828      	ldrh	r0, [r5, #0]
 8014f5a:	89e3      	ldrh	r3, [r4, #14]
 8014f5c:	8220      	strh	r0, [r4, #16]
 8014f5e:	4298      	cmp	r0, r3
 8014f60:	d001      	beq.n	8014f66 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014f62:	2001      	movs	r0, #1
 8014f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f66:	2101      	movs	r1, #1
 8014f68:	f000 f8a6 	bl	80150b8 <uxr_seq_num_add>
 8014f6c:	81e0      	strh	r0, [r4, #14]
 8014f6e:	2001      	movs	r0, #1
 8014f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f72:	bf00      	nop

08014f74 <uxr_update_output_stream_heartbeat_timestamp>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	8a01      	ldrh	r1, [r0, #16]
 8014f78:	4604      	mov	r4, r0
 8014f7a:	8a40      	ldrh	r0, [r0, #18]
 8014f7c:	4615      	mov	r5, r2
 8014f7e:	461e      	mov	r6, r3
 8014f80:	f000 f8a2 	bl	80150c8 <uxr_seq_num_cmp>
 8014f84:	2800      	cmp	r0, #0
 8014f86:	db07      	blt.n	8014f98 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014f8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014f90:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014f94:	2000      	movs	r0, #0
 8014f96:	bd70      	pop	{r4, r5, r6, pc}
 8014f98:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014f9c:	b940      	cbnz	r0, 8014fb0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	f884 3020 	strb.w	r3, [r4, #32]
 8014fa4:	3564      	adds	r5, #100	@ 0x64
 8014fa6:	f146 0600 	adc.w	r6, r6, #0
 8014faa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014fae:	bd70      	pop	{r4, r5, r6, pc}
 8014fb0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014fb4:	4295      	cmp	r5, r2
 8014fb6:	eb76 0303 	sbcs.w	r3, r6, r3
 8014fba:	bfa5      	ittet	ge
 8014fbc:	3001      	addge	r0, #1
 8014fbe:	f884 0020 	strbge.w	r0, [r4, #32]
 8014fc2:	2000      	movlt	r0, #0
 8014fc4:	2001      	movge	r0, #1
 8014fc6:	e7ed      	b.n	8014fa4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014fc8 <uxr_begin_output_nack_buffer_it>:
 8014fc8:	8a40      	ldrh	r0, [r0, #18]
 8014fca:	4770      	bx	lr

08014fcc <uxr_next_reliable_nack_buffer_to_send>:
 8014fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014fd4:	b082      	sub	sp, #8
 8014fd6:	f1b8 0f00 	cmp.w	r8, #0
 8014fda:	d011      	beq.n	8015000 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014fdc:	4604      	mov	r4, r0
 8014fde:	8818      	ldrh	r0, [r3, #0]
 8014fe0:	460e      	mov	r6, r1
 8014fe2:	4617      	mov	r7, r2
 8014fe4:	461d      	mov	r5, r3
 8014fe6:	2101      	movs	r1, #1
 8014fe8:	f000 f866 	bl	80150b8 <uxr_seq_num_add>
 8014fec:	8028      	strh	r0, [r5, #0]
 8014fee:	8a21      	ldrh	r1, [r4, #16]
 8014ff0:	f000 f86a 	bl	80150c8 <uxr_seq_num_cmp>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	dd07      	ble.n	8015008 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014ff8:	f04f 0800 	mov.w	r8, #0
 8014ffc:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015000:	4640      	mov	r0, r8
 8015002:	b002      	add	sp, #8
 8015004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015008:	8921      	ldrh	r1, [r4, #8]
 801500a:	8828      	ldrh	r0, [r5, #0]
 801500c:	6823      	ldr	r3, [r4, #0]
 801500e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015012:	fb01 0c12 	mls	ip, r1, r2, r0
 8015016:	fa1f f28c 	uxth.w	r2, ip
 801501a:	9301      	str	r3, [sp, #4]
 801501c:	6863      	ldr	r3, [r4, #4]
 801501e:	fbb3 fcf1 	udiv	ip, r3, r1
 8015022:	9b01      	ldr	r3, [sp, #4]
 8015024:	fb02 fc0c 	mul.w	ip, r2, ip
 8015028:	f10c 0c04 	add.w	ip, ip, #4
 801502c:	4463      	add	r3, ip
 801502e:	6033      	str	r3, [r6, #0]
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	4463      	add	r3, ip
 8015034:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015038:	603b      	str	r3, [r7, #0]
 801503a:	7b22      	ldrb	r2, [r4, #12]
 801503c:	429a      	cmp	r2, r3
 801503e:	d0d2      	beq.n	8014fe6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015040:	4640      	mov	r0, r8
 8015042:	b002      	add	sp, #8
 8015044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015048 <uxr_process_acknack>:
 8015048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504a:	4604      	mov	r4, r0
 801504c:	460e      	mov	r6, r1
 801504e:	4610      	mov	r0, r2
 8015050:	2101      	movs	r1, #1
 8015052:	f000 f835 	bl	80150c0 <uxr_seq_num_sub>
 8015056:	8a61      	ldrh	r1, [r4, #18]
 8015058:	f000 f832 	bl	80150c0 <uxr_seq_num_sub>
 801505c:	b1c0      	cbz	r0, 8015090 <uxr_process_acknack+0x48>
 801505e:	4605      	mov	r5, r0
 8015060:	2700      	movs	r7, #0
 8015062:	2101      	movs	r1, #1
 8015064:	8a60      	ldrh	r0, [r4, #18]
 8015066:	f000 f827 	bl	80150b8 <uxr_seq_num_add>
 801506a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801506e:	fbb0 f1fc 	udiv	r1, r0, ip
 8015072:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015076:	fb0c 0111 	mls	r1, ip, r1, r0
 801507a:	b289      	uxth	r1, r1
 801507c:	3701      	adds	r7, #1
 801507e:	fbb3 f3fc 	udiv	r3, r3, ip
 8015082:	fb01 f303 	mul.w	r3, r1, r3
 8015086:	42bd      	cmp	r5, r7
 8015088:	7b21      	ldrb	r1, [r4, #12]
 801508a:	8260      	strh	r0, [r4, #18]
 801508c:	50d1      	str	r1, [r2, r3]
 801508e:	d1e8      	bne.n	8015062 <uxr_process_acknack+0x1a>
 8015090:	3e00      	subs	r6, #0
 8015092:	f04f 0300 	mov.w	r3, #0
 8015096:	bf18      	it	ne
 8015098:	2601      	movne	r6, #1
 801509a:	f884 3020 	strb.w	r3, [r4, #32]
 801509e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80150a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080150a4 <uxr_is_output_up_to_date>:
 80150a4:	8a01      	ldrh	r1, [r0, #16]
 80150a6:	8a40      	ldrh	r0, [r0, #18]
 80150a8:	b508      	push	{r3, lr}
 80150aa:	f000 f80d 	bl	80150c8 <uxr_seq_num_cmp>
 80150ae:	fab0 f080 	clz	r0, r0
 80150b2:	0940      	lsrs	r0, r0, #5
 80150b4:	bd08      	pop	{r3, pc}
 80150b6:	bf00      	nop

080150b8 <uxr_seq_num_add>:
 80150b8:	4408      	add	r0, r1
 80150ba:	b280      	uxth	r0, r0
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop

080150c0 <uxr_seq_num_sub>:
 80150c0:	1a40      	subs	r0, r0, r1
 80150c2:	b280      	uxth	r0, r0
 80150c4:	4770      	bx	lr
 80150c6:	bf00      	nop

080150c8 <uxr_seq_num_cmp>:
 80150c8:	4288      	cmp	r0, r1
 80150ca:	d011      	beq.n	80150f0 <uxr_seq_num_cmp+0x28>
 80150cc:	d309      	bcc.n	80150e2 <uxr_seq_num_cmp+0x1a>
 80150ce:	4288      	cmp	r0, r1
 80150d0:	d910      	bls.n	80150f4 <uxr_seq_num_cmp+0x2c>
 80150d2:	1a40      	subs	r0, r0, r1
 80150d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80150d8:	bfd4      	ite	le
 80150da:	2001      	movle	r0, #1
 80150dc:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80150e0:	4770      	bx	lr
 80150e2:	1a0b      	subs	r3, r1, r0
 80150e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80150e8:	daf1      	bge.n	80150ce <uxr_seq_num_cmp+0x6>
 80150ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150ee:	4770      	bx	lr
 80150f0:	2000      	movs	r0, #0
 80150f2:	4770      	bx	lr
 80150f4:	2001      	movs	r0, #1
 80150f6:	4770      	bx	lr

080150f8 <calloc>:
 80150f8:	4b02      	ldr	r3, [pc, #8]	@ (8015104 <calloc+0xc>)
 80150fa:	460a      	mov	r2, r1
 80150fc:	4601      	mov	r1, r0
 80150fe:	6818      	ldr	r0, [r3, #0]
 8015100:	f000 b802 	b.w	8015108 <_calloc_r>
 8015104:	200004e4 	.word	0x200004e4

08015108 <_calloc_r>:
 8015108:	b570      	push	{r4, r5, r6, lr}
 801510a:	fba1 5402 	umull	r5, r4, r1, r2
 801510e:	b93c      	cbnz	r4, 8015120 <_calloc_r+0x18>
 8015110:	4629      	mov	r1, r5
 8015112:	f000 f887 	bl	8015224 <_malloc_r>
 8015116:	4606      	mov	r6, r0
 8015118:	b928      	cbnz	r0, 8015126 <_calloc_r+0x1e>
 801511a:	2600      	movs	r6, #0
 801511c:	4630      	mov	r0, r6
 801511e:	bd70      	pop	{r4, r5, r6, pc}
 8015120:	220c      	movs	r2, #12
 8015122:	6002      	str	r2, [r0, #0]
 8015124:	e7f9      	b.n	801511a <_calloc_r+0x12>
 8015126:	462a      	mov	r2, r5
 8015128:	4621      	mov	r1, r4
 801512a:	f000 fbbd 	bl	80158a8 <memset>
 801512e:	e7f5      	b.n	801511c <_calloc_r+0x14>

08015130 <getenv>:
 8015130:	b507      	push	{r0, r1, r2, lr}
 8015132:	4b04      	ldr	r3, [pc, #16]	@ (8015144 <getenv+0x14>)
 8015134:	4601      	mov	r1, r0
 8015136:	aa01      	add	r2, sp, #4
 8015138:	6818      	ldr	r0, [r3, #0]
 801513a:	f000 f805 	bl	8015148 <_findenv_r>
 801513e:	b003      	add	sp, #12
 8015140:	f85d fb04 	ldr.w	pc, [sp], #4
 8015144:	200004e4 	.word	0x200004e4

08015148 <_findenv_r>:
 8015148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80151bc <_findenv_r+0x74>
 8015150:	4606      	mov	r6, r0
 8015152:	4689      	mov	r9, r1
 8015154:	4617      	mov	r7, r2
 8015156:	f000 fc9d 	bl	8015a94 <__env_lock>
 801515a:	f8da 4000 	ldr.w	r4, [sl]
 801515e:	b134      	cbz	r4, 801516e <_findenv_r+0x26>
 8015160:	464b      	mov	r3, r9
 8015162:	4698      	mov	r8, r3
 8015164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015168:	b13a      	cbz	r2, 801517a <_findenv_r+0x32>
 801516a:	2a3d      	cmp	r2, #61	@ 0x3d
 801516c:	d1f9      	bne.n	8015162 <_findenv_r+0x1a>
 801516e:	4630      	mov	r0, r6
 8015170:	f000 fc96 	bl	8015aa0 <__env_unlock>
 8015174:	2000      	movs	r0, #0
 8015176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801517a:	eba8 0809 	sub.w	r8, r8, r9
 801517e:	46a3      	mov	fp, r4
 8015180:	f854 0b04 	ldr.w	r0, [r4], #4
 8015184:	2800      	cmp	r0, #0
 8015186:	d0f2      	beq.n	801516e <_findenv_r+0x26>
 8015188:	4642      	mov	r2, r8
 801518a:	4649      	mov	r1, r9
 801518c:	f000 fba1 	bl	80158d2 <strncmp>
 8015190:	2800      	cmp	r0, #0
 8015192:	d1f4      	bne.n	801517e <_findenv_r+0x36>
 8015194:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015198:	eb03 0508 	add.w	r5, r3, r8
 801519c:	f813 3008 	ldrb.w	r3, [r3, r8]
 80151a0:	2b3d      	cmp	r3, #61	@ 0x3d
 80151a2:	d1ec      	bne.n	801517e <_findenv_r+0x36>
 80151a4:	f8da 3000 	ldr.w	r3, [sl]
 80151a8:	ebab 0303 	sub.w	r3, fp, r3
 80151ac:	109b      	asrs	r3, r3, #2
 80151ae:	4630      	mov	r0, r6
 80151b0:	603b      	str	r3, [r7, #0]
 80151b2:	f000 fc75 	bl	8015aa0 <__env_unlock>
 80151b6:	1c68      	adds	r0, r5, #1
 80151b8:	e7dd      	b.n	8015176 <_findenv_r+0x2e>
 80151ba:	bf00      	nop
 80151bc:	20000094 	.word	0x20000094

080151c0 <malloc>:
 80151c0:	4b02      	ldr	r3, [pc, #8]	@ (80151cc <malloc+0xc>)
 80151c2:	4601      	mov	r1, r0
 80151c4:	6818      	ldr	r0, [r3, #0]
 80151c6:	f000 b82d 	b.w	8015224 <_malloc_r>
 80151ca:	bf00      	nop
 80151cc:	200004e4 	.word	0x200004e4

080151d0 <free>:
 80151d0:	4b02      	ldr	r3, [pc, #8]	@ (80151dc <free+0xc>)
 80151d2:	4601      	mov	r1, r0
 80151d4:	6818      	ldr	r0, [r3, #0]
 80151d6:	f000 bc69 	b.w	8015aac <_free_r>
 80151da:	bf00      	nop
 80151dc:	200004e4 	.word	0x200004e4

080151e0 <sbrk_aligned>:
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	4e0f      	ldr	r6, [pc, #60]	@ (8015220 <sbrk_aligned+0x40>)
 80151e4:	460c      	mov	r4, r1
 80151e6:	6831      	ldr	r1, [r6, #0]
 80151e8:	4605      	mov	r5, r0
 80151ea:	b911      	cbnz	r1, 80151f2 <sbrk_aligned+0x12>
 80151ec:	f000 fbce 	bl	801598c <_sbrk_r>
 80151f0:	6030      	str	r0, [r6, #0]
 80151f2:	4621      	mov	r1, r4
 80151f4:	4628      	mov	r0, r5
 80151f6:	f000 fbc9 	bl	801598c <_sbrk_r>
 80151fa:	1c43      	adds	r3, r0, #1
 80151fc:	d103      	bne.n	8015206 <sbrk_aligned+0x26>
 80151fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015202:	4620      	mov	r0, r4
 8015204:	bd70      	pop	{r4, r5, r6, pc}
 8015206:	1cc4      	adds	r4, r0, #3
 8015208:	f024 0403 	bic.w	r4, r4, #3
 801520c:	42a0      	cmp	r0, r4
 801520e:	d0f8      	beq.n	8015202 <sbrk_aligned+0x22>
 8015210:	1a21      	subs	r1, r4, r0
 8015212:	4628      	mov	r0, r5
 8015214:	f000 fbba 	bl	801598c <_sbrk_r>
 8015218:	3001      	adds	r0, #1
 801521a:	d1f2      	bne.n	8015202 <sbrk_aligned+0x22>
 801521c:	e7ef      	b.n	80151fe <sbrk_aligned+0x1e>
 801521e:	bf00      	nop
 8015220:	2000dffc 	.word	0x2000dffc

08015224 <_malloc_r>:
 8015224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015228:	1ccd      	adds	r5, r1, #3
 801522a:	f025 0503 	bic.w	r5, r5, #3
 801522e:	3508      	adds	r5, #8
 8015230:	2d0c      	cmp	r5, #12
 8015232:	bf38      	it	cc
 8015234:	250c      	movcc	r5, #12
 8015236:	2d00      	cmp	r5, #0
 8015238:	4606      	mov	r6, r0
 801523a:	db01      	blt.n	8015240 <_malloc_r+0x1c>
 801523c:	42a9      	cmp	r1, r5
 801523e:	d904      	bls.n	801524a <_malloc_r+0x26>
 8015240:	230c      	movs	r3, #12
 8015242:	6033      	str	r3, [r6, #0]
 8015244:	2000      	movs	r0, #0
 8015246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801524a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015320 <_malloc_r+0xfc>
 801524e:	f000 f869 	bl	8015324 <__malloc_lock>
 8015252:	f8d8 3000 	ldr.w	r3, [r8]
 8015256:	461c      	mov	r4, r3
 8015258:	bb44      	cbnz	r4, 80152ac <_malloc_r+0x88>
 801525a:	4629      	mov	r1, r5
 801525c:	4630      	mov	r0, r6
 801525e:	f7ff ffbf 	bl	80151e0 <sbrk_aligned>
 8015262:	1c43      	adds	r3, r0, #1
 8015264:	4604      	mov	r4, r0
 8015266:	d158      	bne.n	801531a <_malloc_r+0xf6>
 8015268:	f8d8 4000 	ldr.w	r4, [r8]
 801526c:	4627      	mov	r7, r4
 801526e:	2f00      	cmp	r7, #0
 8015270:	d143      	bne.n	80152fa <_malloc_r+0xd6>
 8015272:	2c00      	cmp	r4, #0
 8015274:	d04b      	beq.n	801530e <_malloc_r+0xea>
 8015276:	6823      	ldr	r3, [r4, #0]
 8015278:	4639      	mov	r1, r7
 801527a:	4630      	mov	r0, r6
 801527c:	eb04 0903 	add.w	r9, r4, r3
 8015280:	f000 fb84 	bl	801598c <_sbrk_r>
 8015284:	4581      	cmp	r9, r0
 8015286:	d142      	bne.n	801530e <_malloc_r+0xea>
 8015288:	6821      	ldr	r1, [r4, #0]
 801528a:	1a6d      	subs	r5, r5, r1
 801528c:	4629      	mov	r1, r5
 801528e:	4630      	mov	r0, r6
 8015290:	f7ff ffa6 	bl	80151e0 <sbrk_aligned>
 8015294:	3001      	adds	r0, #1
 8015296:	d03a      	beq.n	801530e <_malloc_r+0xea>
 8015298:	6823      	ldr	r3, [r4, #0]
 801529a:	442b      	add	r3, r5
 801529c:	6023      	str	r3, [r4, #0]
 801529e:	f8d8 3000 	ldr.w	r3, [r8]
 80152a2:	685a      	ldr	r2, [r3, #4]
 80152a4:	bb62      	cbnz	r2, 8015300 <_malloc_r+0xdc>
 80152a6:	f8c8 7000 	str.w	r7, [r8]
 80152aa:	e00f      	b.n	80152cc <_malloc_r+0xa8>
 80152ac:	6822      	ldr	r2, [r4, #0]
 80152ae:	1b52      	subs	r2, r2, r5
 80152b0:	d420      	bmi.n	80152f4 <_malloc_r+0xd0>
 80152b2:	2a0b      	cmp	r2, #11
 80152b4:	d917      	bls.n	80152e6 <_malloc_r+0xc2>
 80152b6:	1961      	adds	r1, r4, r5
 80152b8:	42a3      	cmp	r3, r4
 80152ba:	6025      	str	r5, [r4, #0]
 80152bc:	bf18      	it	ne
 80152be:	6059      	strne	r1, [r3, #4]
 80152c0:	6863      	ldr	r3, [r4, #4]
 80152c2:	bf08      	it	eq
 80152c4:	f8c8 1000 	streq.w	r1, [r8]
 80152c8:	5162      	str	r2, [r4, r5]
 80152ca:	604b      	str	r3, [r1, #4]
 80152cc:	4630      	mov	r0, r6
 80152ce:	f000 f82f 	bl	8015330 <__malloc_unlock>
 80152d2:	f104 000b 	add.w	r0, r4, #11
 80152d6:	1d23      	adds	r3, r4, #4
 80152d8:	f020 0007 	bic.w	r0, r0, #7
 80152dc:	1ac2      	subs	r2, r0, r3
 80152de:	bf1c      	itt	ne
 80152e0:	1a1b      	subne	r3, r3, r0
 80152e2:	50a3      	strne	r3, [r4, r2]
 80152e4:	e7af      	b.n	8015246 <_malloc_r+0x22>
 80152e6:	6862      	ldr	r2, [r4, #4]
 80152e8:	42a3      	cmp	r3, r4
 80152ea:	bf0c      	ite	eq
 80152ec:	f8c8 2000 	streq.w	r2, [r8]
 80152f0:	605a      	strne	r2, [r3, #4]
 80152f2:	e7eb      	b.n	80152cc <_malloc_r+0xa8>
 80152f4:	4623      	mov	r3, r4
 80152f6:	6864      	ldr	r4, [r4, #4]
 80152f8:	e7ae      	b.n	8015258 <_malloc_r+0x34>
 80152fa:	463c      	mov	r4, r7
 80152fc:	687f      	ldr	r7, [r7, #4]
 80152fe:	e7b6      	b.n	801526e <_malloc_r+0x4a>
 8015300:	461a      	mov	r2, r3
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	42a3      	cmp	r3, r4
 8015306:	d1fb      	bne.n	8015300 <_malloc_r+0xdc>
 8015308:	2300      	movs	r3, #0
 801530a:	6053      	str	r3, [r2, #4]
 801530c:	e7de      	b.n	80152cc <_malloc_r+0xa8>
 801530e:	230c      	movs	r3, #12
 8015310:	6033      	str	r3, [r6, #0]
 8015312:	4630      	mov	r0, r6
 8015314:	f000 f80c 	bl	8015330 <__malloc_unlock>
 8015318:	e794      	b.n	8015244 <_malloc_r+0x20>
 801531a:	6005      	str	r5, [r0, #0]
 801531c:	e7d6      	b.n	80152cc <_malloc_r+0xa8>
 801531e:	bf00      	nop
 8015320:	2000e000 	.word	0x2000e000

08015324 <__malloc_lock>:
 8015324:	4801      	ldr	r0, [pc, #4]	@ (801532c <__malloc_lock+0x8>)
 8015326:	f000 bb7e 	b.w	8015a26 <__retarget_lock_acquire_recursive>
 801532a:	bf00      	nop
 801532c:	2000e145 	.word	0x2000e145

08015330 <__malloc_unlock>:
 8015330:	4801      	ldr	r0, [pc, #4]	@ (8015338 <__malloc_unlock+0x8>)
 8015332:	f000 bb79 	b.w	8015a28 <__retarget_lock_release_recursive>
 8015336:	bf00      	nop
 8015338:	2000e145 	.word	0x2000e145

0801533c <srand>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4b10      	ldr	r3, [pc, #64]	@ (8015380 <srand+0x44>)
 8015340:	681d      	ldr	r5, [r3, #0]
 8015342:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015344:	4604      	mov	r4, r0
 8015346:	b9b3      	cbnz	r3, 8015376 <srand+0x3a>
 8015348:	2018      	movs	r0, #24
 801534a:	f7ff ff39 	bl	80151c0 <malloc>
 801534e:	4602      	mov	r2, r0
 8015350:	6328      	str	r0, [r5, #48]	@ 0x30
 8015352:	b920      	cbnz	r0, 801535e <srand+0x22>
 8015354:	4b0b      	ldr	r3, [pc, #44]	@ (8015384 <srand+0x48>)
 8015356:	480c      	ldr	r0, [pc, #48]	@ (8015388 <srand+0x4c>)
 8015358:	2146      	movs	r1, #70	@ 0x46
 801535a:	f000 fb7d 	bl	8015a58 <__assert_func>
 801535e:	490b      	ldr	r1, [pc, #44]	@ (801538c <srand+0x50>)
 8015360:	4b0b      	ldr	r3, [pc, #44]	@ (8015390 <srand+0x54>)
 8015362:	e9c0 1300 	strd	r1, r3, [r0]
 8015366:	4b0b      	ldr	r3, [pc, #44]	@ (8015394 <srand+0x58>)
 8015368:	6083      	str	r3, [r0, #8]
 801536a:	230b      	movs	r3, #11
 801536c:	8183      	strh	r3, [r0, #12]
 801536e:	2100      	movs	r1, #0
 8015370:	2001      	movs	r0, #1
 8015372:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015376:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015378:	2200      	movs	r2, #0
 801537a:	611c      	str	r4, [r3, #16]
 801537c:	615a      	str	r2, [r3, #20]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	200004e4 	.word	0x200004e4
 8015384:	080173e4 	.word	0x080173e4
 8015388:	080173fb 	.word	0x080173fb
 801538c:	abcd330e 	.word	0xabcd330e
 8015390:	e66d1234 	.word	0xe66d1234
 8015394:	0005deec 	.word	0x0005deec

08015398 <rand>:
 8015398:	4b16      	ldr	r3, [pc, #88]	@ (80153f4 <rand+0x5c>)
 801539a:	b510      	push	{r4, lr}
 801539c:	681c      	ldr	r4, [r3, #0]
 801539e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153a0:	b9b3      	cbnz	r3, 80153d0 <rand+0x38>
 80153a2:	2018      	movs	r0, #24
 80153a4:	f7ff ff0c 	bl	80151c0 <malloc>
 80153a8:	4602      	mov	r2, r0
 80153aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80153ac:	b920      	cbnz	r0, 80153b8 <rand+0x20>
 80153ae:	4b12      	ldr	r3, [pc, #72]	@ (80153f8 <rand+0x60>)
 80153b0:	4812      	ldr	r0, [pc, #72]	@ (80153fc <rand+0x64>)
 80153b2:	2152      	movs	r1, #82	@ 0x52
 80153b4:	f000 fb50 	bl	8015a58 <__assert_func>
 80153b8:	4911      	ldr	r1, [pc, #68]	@ (8015400 <rand+0x68>)
 80153ba:	4b12      	ldr	r3, [pc, #72]	@ (8015404 <rand+0x6c>)
 80153bc:	e9c0 1300 	strd	r1, r3, [r0]
 80153c0:	4b11      	ldr	r3, [pc, #68]	@ (8015408 <rand+0x70>)
 80153c2:	6083      	str	r3, [r0, #8]
 80153c4:	230b      	movs	r3, #11
 80153c6:	8183      	strh	r3, [r0, #12]
 80153c8:	2100      	movs	r1, #0
 80153ca:	2001      	movs	r0, #1
 80153cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80153d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80153d2:	480e      	ldr	r0, [pc, #56]	@ (801540c <rand+0x74>)
 80153d4:	690b      	ldr	r3, [r1, #16]
 80153d6:	694c      	ldr	r4, [r1, #20]
 80153d8:	4a0d      	ldr	r2, [pc, #52]	@ (8015410 <rand+0x78>)
 80153da:	4358      	muls	r0, r3
 80153dc:	fb02 0004 	mla	r0, r2, r4, r0
 80153e0:	fba3 3202 	umull	r3, r2, r3, r2
 80153e4:	3301      	adds	r3, #1
 80153e6:	eb40 0002 	adc.w	r0, r0, r2
 80153ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80153ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80153f2:	bd10      	pop	{r4, pc}
 80153f4:	200004e4 	.word	0x200004e4
 80153f8:	080173e4 	.word	0x080173e4
 80153fc:	080173fb 	.word	0x080173fb
 8015400:	abcd330e 	.word	0xabcd330e
 8015404:	e66d1234 	.word	0xe66d1234
 8015408:	0005deec 	.word	0x0005deec
 801540c:	5851f42d 	.word	0x5851f42d
 8015410:	4c957f2d 	.word	0x4c957f2d

08015414 <realloc>:
 8015414:	4b02      	ldr	r3, [pc, #8]	@ (8015420 <realloc+0xc>)
 8015416:	460a      	mov	r2, r1
 8015418:	4601      	mov	r1, r0
 801541a:	6818      	ldr	r0, [r3, #0]
 801541c:	f000 b802 	b.w	8015424 <_realloc_r>
 8015420:	200004e4 	.word	0x200004e4

08015424 <_realloc_r>:
 8015424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015428:	4680      	mov	r8, r0
 801542a:	4615      	mov	r5, r2
 801542c:	460c      	mov	r4, r1
 801542e:	b921      	cbnz	r1, 801543a <_realloc_r+0x16>
 8015430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015434:	4611      	mov	r1, r2
 8015436:	f7ff bef5 	b.w	8015224 <_malloc_r>
 801543a:	b92a      	cbnz	r2, 8015448 <_realloc_r+0x24>
 801543c:	f000 fb36 	bl	8015aac <_free_r>
 8015440:	2400      	movs	r4, #0
 8015442:	4620      	mov	r0, r4
 8015444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015448:	f000 fb7a 	bl	8015b40 <_malloc_usable_size_r>
 801544c:	4285      	cmp	r5, r0
 801544e:	4606      	mov	r6, r0
 8015450:	d802      	bhi.n	8015458 <_realloc_r+0x34>
 8015452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015456:	d8f4      	bhi.n	8015442 <_realloc_r+0x1e>
 8015458:	4629      	mov	r1, r5
 801545a:	4640      	mov	r0, r8
 801545c:	f7ff fee2 	bl	8015224 <_malloc_r>
 8015460:	4607      	mov	r7, r0
 8015462:	2800      	cmp	r0, #0
 8015464:	d0ec      	beq.n	8015440 <_realloc_r+0x1c>
 8015466:	42b5      	cmp	r5, r6
 8015468:	462a      	mov	r2, r5
 801546a:	4621      	mov	r1, r4
 801546c:	bf28      	it	cs
 801546e:	4632      	movcs	r2, r6
 8015470:	f000 fae3 	bl	8015a3a <memcpy>
 8015474:	4621      	mov	r1, r4
 8015476:	4640      	mov	r0, r8
 8015478:	f000 fb18 	bl	8015aac <_free_r>
 801547c:	463c      	mov	r4, r7
 801547e:	e7e0      	b.n	8015442 <_realloc_r+0x1e>

08015480 <_strtoul_l.constprop.0>:
 8015480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015484:	4e34      	ldr	r6, [pc, #208]	@ (8015558 <_strtoul_l.constprop.0+0xd8>)
 8015486:	4686      	mov	lr, r0
 8015488:	460d      	mov	r5, r1
 801548a:	4628      	mov	r0, r5
 801548c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015490:	5d37      	ldrb	r7, [r6, r4]
 8015492:	f017 0708 	ands.w	r7, r7, #8
 8015496:	d1f8      	bne.n	801548a <_strtoul_l.constprop.0+0xa>
 8015498:	2c2d      	cmp	r4, #45	@ 0x2d
 801549a:	d12f      	bne.n	80154fc <_strtoul_l.constprop.0+0x7c>
 801549c:	782c      	ldrb	r4, [r5, #0]
 801549e:	2701      	movs	r7, #1
 80154a0:	1c85      	adds	r5, r0, #2
 80154a2:	f033 0010 	bics.w	r0, r3, #16
 80154a6:	d109      	bne.n	80154bc <_strtoul_l.constprop.0+0x3c>
 80154a8:	2c30      	cmp	r4, #48	@ 0x30
 80154aa:	d12c      	bne.n	8015506 <_strtoul_l.constprop.0+0x86>
 80154ac:	7828      	ldrb	r0, [r5, #0]
 80154ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80154b2:	2858      	cmp	r0, #88	@ 0x58
 80154b4:	d127      	bne.n	8015506 <_strtoul_l.constprop.0+0x86>
 80154b6:	786c      	ldrb	r4, [r5, #1]
 80154b8:	2310      	movs	r3, #16
 80154ba:	3502      	adds	r5, #2
 80154bc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80154c0:	2600      	movs	r6, #0
 80154c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80154c6:	fb03 f908 	mul.w	r9, r3, r8
 80154ca:	ea6f 0909 	mvn.w	r9, r9
 80154ce:	4630      	mov	r0, r6
 80154d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80154d4:	f1bc 0f09 	cmp.w	ip, #9
 80154d8:	d81c      	bhi.n	8015514 <_strtoul_l.constprop.0+0x94>
 80154da:	4664      	mov	r4, ip
 80154dc:	42a3      	cmp	r3, r4
 80154de:	dd2a      	ble.n	8015536 <_strtoul_l.constprop.0+0xb6>
 80154e0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80154e4:	d007      	beq.n	80154f6 <_strtoul_l.constprop.0+0x76>
 80154e6:	4580      	cmp	r8, r0
 80154e8:	d322      	bcc.n	8015530 <_strtoul_l.constprop.0+0xb0>
 80154ea:	d101      	bne.n	80154f0 <_strtoul_l.constprop.0+0x70>
 80154ec:	45a1      	cmp	r9, r4
 80154ee:	db1f      	blt.n	8015530 <_strtoul_l.constprop.0+0xb0>
 80154f0:	fb00 4003 	mla	r0, r0, r3, r4
 80154f4:	2601      	movs	r6, #1
 80154f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154fa:	e7e9      	b.n	80154d0 <_strtoul_l.constprop.0+0x50>
 80154fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80154fe:	bf04      	itt	eq
 8015500:	782c      	ldrbeq	r4, [r5, #0]
 8015502:	1c85      	addeq	r5, r0, #2
 8015504:	e7cd      	b.n	80154a2 <_strtoul_l.constprop.0+0x22>
 8015506:	2b00      	cmp	r3, #0
 8015508:	d1d8      	bne.n	80154bc <_strtoul_l.constprop.0+0x3c>
 801550a:	2c30      	cmp	r4, #48	@ 0x30
 801550c:	bf0c      	ite	eq
 801550e:	2308      	moveq	r3, #8
 8015510:	230a      	movne	r3, #10
 8015512:	e7d3      	b.n	80154bc <_strtoul_l.constprop.0+0x3c>
 8015514:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015518:	f1bc 0f19 	cmp.w	ip, #25
 801551c:	d801      	bhi.n	8015522 <_strtoul_l.constprop.0+0xa2>
 801551e:	3c37      	subs	r4, #55	@ 0x37
 8015520:	e7dc      	b.n	80154dc <_strtoul_l.constprop.0+0x5c>
 8015522:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015526:	f1bc 0f19 	cmp.w	ip, #25
 801552a:	d804      	bhi.n	8015536 <_strtoul_l.constprop.0+0xb6>
 801552c:	3c57      	subs	r4, #87	@ 0x57
 801552e:	e7d5      	b.n	80154dc <_strtoul_l.constprop.0+0x5c>
 8015530:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015534:	e7df      	b.n	80154f6 <_strtoul_l.constprop.0+0x76>
 8015536:	1c73      	adds	r3, r6, #1
 8015538:	d106      	bne.n	8015548 <_strtoul_l.constprop.0+0xc8>
 801553a:	2322      	movs	r3, #34	@ 0x22
 801553c:	f8ce 3000 	str.w	r3, [lr]
 8015540:	4630      	mov	r0, r6
 8015542:	b932      	cbnz	r2, 8015552 <_strtoul_l.constprop.0+0xd2>
 8015544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015548:	b107      	cbz	r7, 801554c <_strtoul_l.constprop.0+0xcc>
 801554a:	4240      	negs	r0, r0
 801554c:	2a00      	cmp	r2, #0
 801554e:	d0f9      	beq.n	8015544 <_strtoul_l.constprop.0+0xc4>
 8015550:	b106      	cbz	r6, 8015554 <_strtoul_l.constprop.0+0xd4>
 8015552:	1e69      	subs	r1, r5, #1
 8015554:	6011      	str	r1, [r2, #0]
 8015556:	e7f5      	b.n	8015544 <_strtoul_l.constprop.0+0xc4>
 8015558:	08017454 	.word	0x08017454

0801555c <strtoul>:
 801555c:	4613      	mov	r3, r2
 801555e:	460a      	mov	r2, r1
 8015560:	4601      	mov	r1, r0
 8015562:	4802      	ldr	r0, [pc, #8]	@ (801556c <strtoul+0x10>)
 8015564:	6800      	ldr	r0, [r0, #0]
 8015566:	f7ff bf8b 	b.w	8015480 <_strtoul_l.constprop.0>
 801556a:	bf00      	nop
 801556c:	200004e4 	.word	0x200004e4

08015570 <std>:
 8015570:	2300      	movs	r3, #0
 8015572:	b510      	push	{r4, lr}
 8015574:	4604      	mov	r4, r0
 8015576:	e9c0 3300 	strd	r3, r3, [r0]
 801557a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801557e:	6083      	str	r3, [r0, #8]
 8015580:	8181      	strh	r1, [r0, #12]
 8015582:	6643      	str	r3, [r0, #100]	@ 0x64
 8015584:	81c2      	strh	r2, [r0, #14]
 8015586:	6183      	str	r3, [r0, #24]
 8015588:	4619      	mov	r1, r3
 801558a:	2208      	movs	r2, #8
 801558c:	305c      	adds	r0, #92	@ 0x5c
 801558e:	f000 f98b 	bl	80158a8 <memset>
 8015592:	4b0d      	ldr	r3, [pc, #52]	@ (80155c8 <std+0x58>)
 8015594:	6263      	str	r3, [r4, #36]	@ 0x24
 8015596:	4b0d      	ldr	r3, [pc, #52]	@ (80155cc <std+0x5c>)
 8015598:	62a3      	str	r3, [r4, #40]	@ 0x28
 801559a:	4b0d      	ldr	r3, [pc, #52]	@ (80155d0 <std+0x60>)
 801559c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801559e:	4b0d      	ldr	r3, [pc, #52]	@ (80155d4 <std+0x64>)
 80155a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80155a2:	4b0d      	ldr	r3, [pc, #52]	@ (80155d8 <std+0x68>)
 80155a4:	6224      	str	r4, [r4, #32]
 80155a6:	429c      	cmp	r4, r3
 80155a8:	d006      	beq.n	80155b8 <std+0x48>
 80155aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80155ae:	4294      	cmp	r4, r2
 80155b0:	d002      	beq.n	80155b8 <std+0x48>
 80155b2:	33d0      	adds	r3, #208	@ 0xd0
 80155b4:	429c      	cmp	r4, r3
 80155b6:	d105      	bne.n	80155c4 <std+0x54>
 80155b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80155bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155c0:	f000 ba30 	b.w	8015a24 <__retarget_lock_init_recursive>
 80155c4:	bd10      	pop	{r4, pc}
 80155c6:	bf00      	nop
 80155c8:	0801575d 	.word	0x0801575d
 80155cc:	0801577f 	.word	0x0801577f
 80155d0:	080157b7 	.word	0x080157b7
 80155d4:	080157db 	.word	0x080157db
 80155d8:	2000e004 	.word	0x2000e004

080155dc <stdio_exit_handler>:
 80155dc:	4a02      	ldr	r2, [pc, #8]	@ (80155e8 <stdio_exit_handler+0xc>)
 80155de:	4903      	ldr	r1, [pc, #12]	@ (80155ec <stdio_exit_handler+0x10>)
 80155e0:	4803      	ldr	r0, [pc, #12]	@ (80155f0 <stdio_exit_handler+0x14>)
 80155e2:	f000 b869 	b.w	80156b8 <_fwalk_sglue>
 80155e6:	bf00      	nop
 80155e8:	200004d8 	.word	0x200004d8
 80155ec:	08016225 	.word	0x08016225
 80155f0:	200004e8 	.word	0x200004e8

080155f4 <cleanup_stdio>:
 80155f4:	6841      	ldr	r1, [r0, #4]
 80155f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015628 <cleanup_stdio+0x34>)
 80155f8:	4299      	cmp	r1, r3
 80155fa:	b510      	push	{r4, lr}
 80155fc:	4604      	mov	r4, r0
 80155fe:	d001      	beq.n	8015604 <cleanup_stdio+0x10>
 8015600:	f000 fe10 	bl	8016224 <_fflush_r>
 8015604:	68a1      	ldr	r1, [r4, #8]
 8015606:	4b09      	ldr	r3, [pc, #36]	@ (801562c <cleanup_stdio+0x38>)
 8015608:	4299      	cmp	r1, r3
 801560a:	d002      	beq.n	8015612 <cleanup_stdio+0x1e>
 801560c:	4620      	mov	r0, r4
 801560e:	f000 fe09 	bl	8016224 <_fflush_r>
 8015612:	68e1      	ldr	r1, [r4, #12]
 8015614:	4b06      	ldr	r3, [pc, #24]	@ (8015630 <cleanup_stdio+0x3c>)
 8015616:	4299      	cmp	r1, r3
 8015618:	d004      	beq.n	8015624 <cleanup_stdio+0x30>
 801561a:	4620      	mov	r0, r4
 801561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015620:	f000 be00 	b.w	8016224 <_fflush_r>
 8015624:	bd10      	pop	{r4, pc}
 8015626:	bf00      	nop
 8015628:	2000e004 	.word	0x2000e004
 801562c:	2000e06c 	.word	0x2000e06c
 8015630:	2000e0d4 	.word	0x2000e0d4

08015634 <global_stdio_init.part.0>:
 8015634:	b510      	push	{r4, lr}
 8015636:	4b0b      	ldr	r3, [pc, #44]	@ (8015664 <global_stdio_init.part.0+0x30>)
 8015638:	4c0b      	ldr	r4, [pc, #44]	@ (8015668 <global_stdio_init.part.0+0x34>)
 801563a:	4a0c      	ldr	r2, [pc, #48]	@ (801566c <global_stdio_init.part.0+0x38>)
 801563c:	601a      	str	r2, [r3, #0]
 801563e:	4620      	mov	r0, r4
 8015640:	2200      	movs	r2, #0
 8015642:	2104      	movs	r1, #4
 8015644:	f7ff ff94 	bl	8015570 <std>
 8015648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801564c:	2201      	movs	r2, #1
 801564e:	2109      	movs	r1, #9
 8015650:	f7ff ff8e 	bl	8015570 <std>
 8015654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015658:	2202      	movs	r2, #2
 801565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801565e:	2112      	movs	r1, #18
 8015660:	f7ff bf86 	b.w	8015570 <std>
 8015664:	2000e13c 	.word	0x2000e13c
 8015668:	2000e004 	.word	0x2000e004
 801566c:	080155dd 	.word	0x080155dd

08015670 <__sfp_lock_acquire>:
 8015670:	4801      	ldr	r0, [pc, #4]	@ (8015678 <__sfp_lock_acquire+0x8>)
 8015672:	f000 b9d8 	b.w	8015a26 <__retarget_lock_acquire_recursive>
 8015676:	bf00      	nop
 8015678:	2000e146 	.word	0x2000e146

0801567c <__sfp_lock_release>:
 801567c:	4801      	ldr	r0, [pc, #4]	@ (8015684 <__sfp_lock_release+0x8>)
 801567e:	f000 b9d3 	b.w	8015a28 <__retarget_lock_release_recursive>
 8015682:	bf00      	nop
 8015684:	2000e146 	.word	0x2000e146

08015688 <__sinit>:
 8015688:	b510      	push	{r4, lr}
 801568a:	4604      	mov	r4, r0
 801568c:	f7ff fff0 	bl	8015670 <__sfp_lock_acquire>
 8015690:	6a23      	ldr	r3, [r4, #32]
 8015692:	b11b      	cbz	r3, 801569c <__sinit+0x14>
 8015694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015698:	f7ff bff0 	b.w	801567c <__sfp_lock_release>
 801569c:	4b04      	ldr	r3, [pc, #16]	@ (80156b0 <__sinit+0x28>)
 801569e:	6223      	str	r3, [r4, #32]
 80156a0:	4b04      	ldr	r3, [pc, #16]	@ (80156b4 <__sinit+0x2c>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d1f5      	bne.n	8015694 <__sinit+0xc>
 80156a8:	f7ff ffc4 	bl	8015634 <global_stdio_init.part.0>
 80156ac:	e7f2      	b.n	8015694 <__sinit+0xc>
 80156ae:	bf00      	nop
 80156b0:	080155f5 	.word	0x080155f5
 80156b4:	2000e13c 	.word	0x2000e13c

080156b8 <_fwalk_sglue>:
 80156b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156bc:	4607      	mov	r7, r0
 80156be:	4688      	mov	r8, r1
 80156c0:	4614      	mov	r4, r2
 80156c2:	2600      	movs	r6, #0
 80156c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80156c8:	f1b9 0901 	subs.w	r9, r9, #1
 80156cc:	d505      	bpl.n	80156da <_fwalk_sglue+0x22>
 80156ce:	6824      	ldr	r4, [r4, #0]
 80156d0:	2c00      	cmp	r4, #0
 80156d2:	d1f7      	bne.n	80156c4 <_fwalk_sglue+0xc>
 80156d4:	4630      	mov	r0, r6
 80156d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156da:	89ab      	ldrh	r3, [r5, #12]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d907      	bls.n	80156f0 <_fwalk_sglue+0x38>
 80156e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80156e4:	3301      	adds	r3, #1
 80156e6:	d003      	beq.n	80156f0 <_fwalk_sglue+0x38>
 80156e8:	4629      	mov	r1, r5
 80156ea:	4638      	mov	r0, r7
 80156ec:	47c0      	blx	r8
 80156ee:	4306      	orrs	r6, r0
 80156f0:	3568      	adds	r5, #104	@ 0x68
 80156f2:	e7e9      	b.n	80156c8 <_fwalk_sglue+0x10>

080156f4 <sniprintf>:
 80156f4:	b40c      	push	{r2, r3}
 80156f6:	b530      	push	{r4, r5, lr}
 80156f8:	4b17      	ldr	r3, [pc, #92]	@ (8015758 <sniprintf+0x64>)
 80156fa:	1e0c      	subs	r4, r1, #0
 80156fc:	681d      	ldr	r5, [r3, #0]
 80156fe:	b09d      	sub	sp, #116	@ 0x74
 8015700:	da08      	bge.n	8015714 <sniprintf+0x20>
 8015702:	238b      	movs	r3, #139	@ 0x8b
 8015704:	602b      	str	r3, [r5, #0]
 8015706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801570a:	b01d      	add	sp, #116	@ 0x74
 801570c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015710:	b002      	add	sp, #8
 8015712:	4770      	bx	lr
 8015714:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015718:	f8ad 3014 	strh.w	r3, [sp, #20]
 801571c:	bf14      	ite	ne
 801571e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015722:	4623      	moveq	r3, r4
 8015724:	9304      	str	r3, [sp, #16]
 8015726:	9307      	str	r3, [sp, #28]
 8015728:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801572c:	9002      	str	r0, [sp, #8]
 801572e:	9006      	str	r0, [sp, #24]
 8015730:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015734:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015736:	ab21      	add	r3, sp, #132	@ 0x84
 8015738:	a902      	add	r1, sp, #8
 801573a:	4628      	mov	r0, r5
 801573c:	9301      	str	r3, [sp, #4]
 801573e:	f000 fa63 	bl	8015c08 <_svfiprintf_r>
 8015742:	1c43      	adds	r3, r0, #1
 8015744:	bfbc      	itt	lt
 8015746:	238b      	movlt	r3, #139	@ 0x8b
 8015748:	602b      	strlt	r3, [r5, #0]
 801574a:	2c00      	cmp	r4, #0
 801574c:	d0dd      	beq.n	801570a <sniprintf+0x16>
 801574e:	9b02      	ldr	r3, [sp, #8]
 8015750:	2200      	movs	r2, #0
 8015752:	701a      	strb	r2, [r3, #0]
 8015754:	e7d9      	b.n	801570a <sniprintf+0x16>
 8015756:	bf00      	nop
 8015758:	200004e4 	.word	0x200004e4

0801575c <__sread>:
 801575c:	b510      	push	{r4, lr}
 801575e:	460c      	mov	r4, r1
 8015760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015764:	f000 f900 	bl	8015968 <_read_r>
 8015768:	2800      	cmp	r0, #0
 801576a:	bfab      	itete	ge
 801576c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801576e:	89a3      	ldrhlt	r3, [r4, #12]
 8015770:	181b      	addge	r3, r3, r0
 8015772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015776:	bfac      	ite	ge
 8015778:	6563      	strge	r3, [r4, #84]	@ 0x54
 801577a:	81a3      	strhlt	r3, [r4, #12]
 801577c:	bd10      	pop	{r4, pc}

0801577e <__swrite>:
 801577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015782:	461f      	mov	r7, r3
 8015784:	898b      	ldrh	r3, [r1, #12]
 8015786:	05db      	lsls	r3, r3, #23
 8015788:	4605      	mov	r5, r0
 801578a:	460c      	mov	r4, r1
 801578c:	4616      	mov	r6, r2
 801578e:	d505      	bpl.n	801579c <__swrite+0x1e>
 8015790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015794:	2302      	movs	r3, #2
 8015796:	2200      	movs	r2, #0
 8015798:	f000 f8d4 	bl	8015944 <_lseek_r>
 801579c:	89a3      	ldrh	r3, [r4, #12]
 801579e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80157a6:	81a3      	strh	r3, [r4, #12]
 80157a8:	4632      	mov	r2, r6
 80157aa:	463b      	mov	r3, r7
 80157ac:	4628      	mov	r0, r5
 80157ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157b2:	f000 b8fb 	b.w	80159ac <_write_r>

080157b6 <__sseek>:
 80157b6:	b510      	push	{r4, lr}
 80157b8:	460c      	mov	r4, r1
 80157ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157be:	f000 f8c1 	bl	8015944 <_lseek_r>
 80157c2:	1c43      	adds	r3, r0, #1
 80157c4:	89a3      	ldrh	r3, [r4, #12]
 80157c6:	bf15      	itete	ne
 80157c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80157ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80157ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80157d2:	81a3      	strheq	r3, [r4, #12]
 80157d4:	bf18      	it	ne
 80157d6:	81a3      	strhne	r3, [r4, #12]
 80157d8:	bd10      	pop	{r4, pc}

080157da <__sclose>:
 80157da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157de:	f000 b8a1 	b.w	8015924 <_close_r>

080157e2 <_vsniprintf_r>:
 80157e2:	b530      	push	{r4, r5, lr}
 80157e4:	4614      	mov	r4, r2
 80157e6:	2c00      	cmp	r4, #0
 80157e8:	b09b      	sub	sp, #108	@ 0x6c
 80157ea:	4605      	mov	r5, r0
 80157ec:	461a      	mov	r2, r3
 80157ee:	da05      	bge.n	80157fc <_vsniprintf_r+0x1a>
 80157f0:	238b      	movs	r3, #139	@ 0x8b
 80157f2:	6003      	str	r3, [r0, #0]
 80157f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157f8:	b01b      	add	sp, #108	@ 0x6c
 80157fa:	bd30      	pop	{r4, r5, pc}
 80157fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015800:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015804:	bf14      	ite	ne
 8015806:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801580a:	4623      	moveq	r3, r4
 801580c:	9302      	str	r3, [sp, #8]
 801580e:	9305      	str	r3, [sp, #20]
 8015810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015814:	9100      	str	r1, [sp, #0]
 8015816:	9104      	str	r1, [sp, #16]
 8015818:	f8ad 300e 	strh.w	r3, [sp, #14]
 801581c:	4669      	mov	r1, sp
 801581e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015820:	f000 f9f2 	bl	8015c08 <_svfiprintf_r>
 8015824:	1c43      	adds	r3, r0, #1
 8015826:	bfbc      	itt	lt
 8015828:	238b      	movlt	r3, #139	@ 0x8b
 801582a:	602b      	strlt	r3, [r5, #0]
 801582c:	2c00      	cmp	r4, #0
 801582e:	d0e3      	beq.n	80157f8 <_vsniprintf_r+0x16>
 8015830:	9b00      	ldr	r3, [sp, #0]
 8015832:	2200      	movs	r2, #0
 8015834:	701a      	strb	r2, [r3, #0]
 8015836:	e7df      	b.n	80157f8 <_vsniprintf_r+0x16>

08015838 <vsniprintf>:
 8015838:	b507      	push	{r0, r1, r2, lr}
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	4613      	mov	r3, r2
 801583e:	460a      	mov	r2, r1
 8015840:	4601      	mov	r1, r0
 8015842:	4803      	ldr	r0, [pc, #12]	@ (8015850 <vsniprintf+0x18>)
 8015844:	6800      	ldr	r0, [r0, #0]
 8015846:	f7ff ffcc 	bl	80157e2 <_vsniprintf_r>
 801584a:	b003      	add	sp, #12
 801584c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015850:	200004e4 	.word	0x200004e4

08015854 <memcmp>:
 8015854:	b510      	push	{r4, lr}
 8015856:	3901      	subs	r1, #1
 8015858:	4402      	add	r2, r0
 801585a:	4290      	cmp	r0, r2
 801585c:	d101      	bne.n	8015862 <memcmp+0xe>
 801585e:	2000      	movs	r0, #0
 8015860:	e005      	b.n	801586e <memcmp+0x1a>
 8015862:	7803      	ldrb	r3, [r0, #0]
 8015864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015868:	42a3      	cmp	r3, r4
 801586a:	d001      	beq.n	8015870 <memcmp+0x1c>
 801586c:	1b18      	subs	r0, r3, r4
 801586e:	bd10      	pop	{r4, pc}
 8015870:	3001      	adds	r0, #1
 8015872:	e7f2      	b.n	801585a <memcmp+0x6>

08015874 <memmove>:
 8015874:	4288      	cmp	r0, r1
 8015876:	b510      	push	{r4, lr}
 8015878:	eb01 0402 	add.w	r4, r1, r2
 801587c:	d902      	bls.n	8015884 <memmove+0x10>
 801587e:	4284      	cmp	r4, r0
 8015880:	4623      	mov	r3, r4
 8015882:	d807      	bhi.n	8015894 <memmove+0x20>
 8015884:	1e43      	subs	r3, r0, #1
 8015886:	42a1      	cmp	r1, r4
 8015888:	d008      	beq.n	801589c <memmove+0x28>
 801588a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801588e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015892:	e7f8      	b.n	8015886 <memmove+0x12>
 8015894:	4402      	add	r2, r0
 8015896:	4601      	mov	r1, r0
 8015898:	428a      	cmp	r2, r1
 801589a:	d100      	bne.n	801589e <memmove+0x2a>
 801589c:	bd10      	pop	{r4, pc}
 801589e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158a6:	e7f7      	b.n	8015898 <memmove+0x24>

080158a8 <memset>:
 80158a8:	4402      	add	r2, r0
 80158aa:	4603      	mov	r3, r0
 80158ac:	4293      	cmp	r3, r2
 80158ae:	d100      	bne.n	80158b2 <memset+0xa>
 80158b0:	4770      	bx	lr
 80158b2:	f803 1b01 	strb.w	r1, [r3], #1
 80158b6:	e7f9      	b.n	80158ac <memset+0x4>

080158b8 <strchr>:
 80158b8:	b2c9      	uxtb	r1, r1
 80158ba:	4603      	mov	r3, r0
 80158bc:	4618      	mov	r0, r3
 80158be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158c2:	b112      	cbz	r2, 80158ca <strchr+0x12>
 80158c4:	428a      	cmp	r2, r1
 80158c6:	d1f9      	bne.n	80158bc <strchr+0x4>
 80158c8:	4770      	bx	lr
 80158ca:	2900      	cmp	r1, #0
 80158cc:	bf18      	it	ne
 80158ce:	2000      	movne	r0, #0
 80158d0:	4770      	bx	lr

080158d2 <strncmp>:
 80158d2:	b510      	push	{r4, lr}
 80158d4:	b16a      	cbz	r2, 80158f2 <strncmp+0x20>
 80158d6:	3901      	subs	r1, #1
 80158d8:	1884      	adds	r4, r0, r2
 80158da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d103      	bne.n	80158ee <strncmp+0x1c>
 80158e6:	42a0      	cmp	r0, r4
 80158e8:	d001      	beq.n	80158ee <strncmp+0x1c>
 80158ea:	2a00      	cmp	r2, #0
 80158ec:	d1f5      	bne.n	80158da <strncmp+0x8>
 80158ee:	1ad0      	subs	r0, r2, r3
 80158f0:	bd10      	pop	{r4, pc}
 80158f2:	4610      	mov	r0, r2
 80158f4:	e7fc      	b.n	80158f0 <strncmp+0x1e>

080158f6 <strstr>:
 80158f6:	780a      	ldrb	r2, [r1, #0]
 80158f8:	b570      	push	{r4, r5, r6, lr}
 80158fa:	b96a      	cbnz	r2, 8015918 <strstr+0x22>
 80158fc:	bd70      	pop	{r4, r5, r6, pc}
 80158fe:	429a      	cmp	r2, r3
 8015900:	d109      	bne.n	8015916 <strstr+0x20>
 8015902:	460c      	mov	r4, r1
 8015904:	4605      	mov	r5, r0
 8015906:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801590a:	2b00      	cmp	r3, #0
 801590c:	d0f6      	beq.n	80158fc <strstr+0x6>
 801590e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015912:	429e      	cmp	r6, r3
 8015914:	d0f7      	beq.n	8015906 <strstr+0x10>
 8015916:	3001      	adds	r0, #1
 8015918:	7803      	ldrb	r3, [r0, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d1ef      	bne.n	80158fe <strstr+0x8>
 801591e:	4618      	mov	r0, r3
 8015920:	e7ec      	b.n	80158fc <strstr+0x6>
	...

08015924 <_close_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	4d06      	ldr	r5, [pc, #24]	@ (8015940 <_close_r+0x1c>)
 8015928:	2300      	movs	r3, #0
 801592a:	4604      	mov	r4, r0
 801592c:	4608      	mov	r0, r1
 801592e:	602b      	str	r3, [r5, #0]
 8015930:	f7ed f880 	bl	8002a34 <_close>
 8015934:	1c43      	adds	r3, r0, #1
 8015936:	d102      	bne.n	801593e <_close_r+0x1a>
 8015938:	682b      	ldr	r3, [r5, #0]
 801593a:	b103      	cbz	r3, 801593e <_close_r+0x1a>
 801593c:	6023      	str	r3, [r4, #0]
 801593e:	bd38      	pop	{r3, r4, r5, pc}
 8015940:	2000e140 	.word	0x2000e140

08015944 <_lseek_r>:
 8015944:	b538      	push	{r3, r4, r5, lr}
 8015946:	4d07      	ldr	r5, [pc, #28]	@ (8015964 <_lseek_r+0x20>)
 8015948:	4604      	mov	r4, r0
 801594a:	4608      	mov	r0, r1
 801594c:	4611      	mov	r1, r2
 801594e:	2200      	movs	r2, #0
 8015950:	602a      	str	r2, [r5, #0]
 8015952:	461a      	mov	r2, r3
 8015954:	f7ed f895 	bl	8002a82 <_lseek>
 8015958:	1c43      	adds	r3, r0, #1
 801595a:	d102      	bne.n	8015962 <_lseek_r+0x1e>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	b103      	cbz	r3, 8015962 <_lseek_r+0x1e>
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	bd38      	pop	{r3, r4, r5, pc}
 8015964:	2000e140 	.word	0x2000e140

08015968 <_read_r>:
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4d07      	ldr	r5, [pc, #28]	@ (8015988 <_read_r+0x20>)
 801596c:	4604      	mov	r4, r0
 801596e:	4608      	mov	r0, r1
 8015970:	4611      	mov	r1, r2
 8015972:	2200      	movs	r2, #0
 8015974:	602a      	str	r2, [r5, #0]
 8015976:	461a      	mov	r2, r3
 8015978:	f7ed f823 	bl	80029c2 <_read>
 801597c:	1c43      	adds	r3, r0, #1
 801597e:	d102      	bne.n	8015986 <_read_r+0x1e>
 8015980:	682b      	ldr	r3, [r5, #0]
 8015982:	b103      	cbz	r3, 8015986 <_read_r+0x1e>
 8015984:	6023      	str	r3, [r4, #0]
 8015986:	bd38      	pop	{r3, r4, r5, pc}
 8015988:	2000e140 	.word	0x2000e140

0801598c <_sbrk_r>:
 801598c:	b538      	push	{r3, r4, r5, lr}
 801598e:	4d06      	ldr	r5, [pc, #24]	@ (80159a8 <_sbrk_r+0x1c>)
 8015990:	2300      	movs	r3, #0
 8015992:	4604      	mov	r4, r0
 8015994:	4608      	mov	r0, r1
 8015996:	602b      	str	r3, [r5, #0]
 8015998:	f7ed f880 	bl	8002a9c <_sbrk>
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	d102      	bne.n	80159a6 <_sbrk_r+0x1a>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	b103      	cbz	r3, 80159a6 <_sbrk_r+0x1a>
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	bd38      	pop	{r3, r4, r5, pc}
 80159a8:	2000e140 	.word	0x2000e140

080159ac <_write_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4d07      	ldr	r5, [pc, #28]	@ (80159cc <_write_r+0x20>)
 80159b0:	4604      	mov	r4, r0
 80159b2:	4608      	mov	r0, r1
 80159b4:	4611      	mov	r1, r2
 80159b6:	2200      	movs	r2, #0
 80159b8:	602a      	str	r2, [r5, #0]
 80159ba:	461a      	mov	r2, r3
 80159bc:	f7ed f81e 	bl	80029fc <_write>
 80159c0:	1c43      	adds	r3, r0, #1
 80159c2:	d102      	bne.n	80159ca <_write_r+0x1e>
 80159c4:	682b      	ldr	r3, [r5, #0]
 80159c6:	b103      	cbz	r3, 80159ca <_write_r+0x1e>
 80159c8:	6023      	str	r3, [r4, #0]
 80159ca:	bd38      	pop	{r3, r4, r5, pc}
 80159cc:	2000e140 	.word	0x2000e140

080159d0 <__errno>:
 80159d0:	4b01      	ldr	r3, [pc, #4]	@ (80159d8 <__errno+0x8>)
 80159d2:	6818      	ldr	r0, [r3, #0]
 80159d4:	4770      	bx	lr
 80159d6:	bf00      	nop
 80159d8:	200004e4 	.word	0x200004e4

080159dc <__libc_init_array>:
 80159dc:	b570      	push	{r4, r5, r6, lr}
 80159de:	4d0d      	ldr	r5, [pc, #52]	@ (8015a14 <__libc_init_array+0x38>)
 80159e0:	4c0d      	ldr	r4, [pc, #52]	@ (8015a18 <__libc_init_array+0x3c>)
 80159e2:	1b64      	subs	r4, r4, r5
 80159e4:	10a4      	asrs	r4, r4, #2
 80159e6:	2600      	movs	r6, #0
 80159e8:	42a6      	cmp	r6, r4
 80159ea:	d109      	bne.n	8015a00 <__libc_init_array+0x24>
 80159ec:	4d0b      	ldr	r5, [pc, #44]	@ (8015a1c <__libc_init_array+0x40>)
 80159ee:	4c0c      	ldr	r4, [pc, #48]	@ (8015a20 <__libc_init_array+0x44>)
 80159f0:	f000 fef6 	bl	80167e0 <_init>
 80159f4:	1b64      	subs	r4, r4, r5
 80159f6:	10a4      	asrs	r4, r4, #2
 80159f8:	2600      	movs	r6, #0
 80159fa:	42a6      	cmp	r6, r4
 80159fc:	d105      	bne.n	8015a0a <__libc_init_array+0x2e>
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a04:	4798      	blx	r3
 8015a06:	3601      	adds	r6, #1
 8015a08:	e7ee      	b.n	80159e8 <__libc_init_array+0xc>
 8015a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a0e:	4798      	blx	r3
 8015a10:	3601      	adds	r6, #1
 8015a12:	e7f2      	b.n	80159fa <__libc_init_array+0x1e>
 8015a14:	080175cc 	.word	0x080175cc
 8015a18:	080175cc 	.word	0x080175cc
 8015a1c:	080175cc 	.word	0x080175cc
 8015a20:	080175d8 	.word	0x080175d8

08015a24 <__retarget_lock_init_recursive>:
 8015a24:	4770      	bx	lr

08015a26 <__retarget_lock_acquire_recursive>:
 8015a26:	4770      	bx	lr

08015a28 <__retarget_lock_release_recursive>:
 8015a28:	4770      	bx	lr

08015a2a <strcpy>:
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a30:	f803 2b01 	strb.w	r2, [r3], #1
 8015a34:	2a00      	cmp	r2, #0
 8015a36:	d1f9      	bne.n	8015a2c <strcpy+0x2>
 8015a38:	4770      	bx	lr

08015a3a <memcpy>:
 8015a3a:	440a      	add	r2, r1
 8015a3c:	4291      	cmp	r1, r2
 8015a3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015a42:	d100      	bne.n	8015a46 <memcpy+0xc>
 8015a44:	4770      	bx	lr
 8015a46:	b510      	push	{r4, lr}
 8015a48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a50:	4291      	cmp	r1, r2
 8015a52:	d1f9      	bne.n	8015a48 <memcpy+0xe>
 8015a54:	bd10      	pop	{r4, pc}
	...

08015a58 <__assert_func>:
 8015a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a5a:	4614      	mov	r4, r2
 8015a5c:	461a      	mov	r2, r3
 8015a5e:	4b09      	ldr	r3, [pc, #36]	@ (8015a84 <__assert_func+0x2c>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	4605      	mov	r5, r0
 8015a64:	68d8      	ldr	r0, [r3, #12]
 8015a66:	b954      	cbnz	r4, 8015a7e <__assert_func+0x26>
 8015a68:	4b07      	ldr	r3, [pc, #28]	@ (8015a88 <__assert_func+0x30>)
 8015a6a:	461c      	mov	r4, r3
 8015a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a70:	9100      	str	r1, [sp, #0]
 8015a72:	462b      	mov	r3, r5
 8015a74:	4905      	ldr	r1, [pc, #20]	@ (8015a8c <__assert_func+0x34>)
 8015a76:	f000 fbfd 	bl	8016274 <fiprintf>
 8015a7a:	f000 fc0d 	bl	8016298 <abort>
 8015a7e:	4b04      	ldr	r3, [pc, #16]	@ (8015a90 <__assert_func+0x38>)
 8015a80:	e7f4      	b.n	8015a6c <__assert_func+0x14>
 8015a82:	bf00      	nop
 8015a84:	200004e4 	.word	0x200004e4
 8015a88:	0801758f 	.word	0x0801758f
 8015a8c:	08017561 	.word	0x08017561
 8015a90:	08017554 	.word	0x08017554

08015a94 <__env_lock>:
 8015a94:	4801      	ldr	r0, [pc, #4]	@ (8015a9c <__env_lock+0x8>)
 8015a96:	f7ff bfc6 	b.w	8015a26 <__retarget_lock_acquire_recursive>
 8015a9a:	bf00      	nop
 8015a9c:	2000e144 	.word	0x2000e144

08015aa0 <__env_unlock>:
 8015aa0:	4801      	ldr	r0, [pc, #4]	@ (8015aa8 <__env_unlock+0x8>)
 8015aa2:	f7ff bfc1 	b.w	8015a28 <__retarget_lock_release_recursive>
 8015aa6:	bf00      	nop
 8015aa8:	2000e144 	.word	0x2000e144

08015aac <_free_r>:
 8015aac:	b538      	push	{r3, r4, r5, lr}
 8015aae:	4605      	mov	r5, r0
 8015ab0:	2900      	cmp	r1, #0
 8015ab2:	d041      	beq.n	8015b38 <_free_r+0x8c>
 8015ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ab8:	1f0c      	subs	r4, r1, #4
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	bfb8      	it	lt
 8015abe:	18e4      	addlt	r4, r4, r3
 8015ac0:	f7ff fc30 	bl	8015324 <__malloc_lock>
 8015ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8015b3c <_free_r+0x90>)
 8015ac6:	6813      	ldr	r3, [r2, #0]
 8015ac8:	b933      	cbnz	r3, 8015ad8 <_free_r+0x2c>
 8015aca:	6063      	str	r3, [r4, #4]
 8015acc:	6014      	str	r4, [r2, #0]
 8015ace:	4628      	mov	r0, r5
 8015ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ad4:	f7ff bc2c 	b.w	8015330 <__malloc_unlock>
 8015ad8:	42a3      	cmp	r3, r4
 8015ada:	d908      	bls.n	8015aee <_free_r+0x42>
 8015adc:	6820      	ldr	r0, [r4, #0]
 8015ade:	1821      	adds	r1, r4, r0
 8015ae0:	428b      	cmp	r3, r1
 8015ae2:	bf01      	itttt	eq
 8015ae4:	6819      	ldreq	r1, [r3, #0]
 8015ae6:	685b      	ldreq	r3, [r3, #4]
 8015ae8:	1809      	addeq	r1, r1, r0
 8015aea:	6021      	streq	r1, [r4, #0]
 8015aec:	e7ed      	b.n	8015aca <_free_r+0x1e>
 8015aee:	461a      	mov	r2, r3
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	b10b      	cbz	r3, 8015af8 <_free_r+0x4c>
 8015af4:	42a3      	cmp	r3, r4
 8015af6:	d9fa      	bls.n	8015aee <_free_r+0x42>
 8015af8:	6811      	ldr	r1, [r2, #0]
 8015afa:	1850      	adds	r0, r2, r1
 8015afc:	42a0      	cmp	r0, r4
 8015afe:	d10b      	bne.n	8015b18 <_free_r+0x6c>
 8015b00:	6820      	ldr	r0, [r4, #0]
 8015b02:	4401      	add	r1, r0
 8015b04:	1850      	adds	r0, r2, r1
 8015b06:	4283      	cmp	r3, r0
 8015b08:	6011      	str	r1, [r2, #0]
 8015b0a:	d1e0      	bne.n	8015ace <_free_r+0x22>
 8015b0c:	6818      	ldr	r0, [r3, #0]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	6053      	str	r3, [r2, #4]
 8015b12:	4408      	add	r0, r1
 8015b14:	6010      	str	r0, [r2, #0]
 8015b16:	e7da      	b.n	8015ace <_free_r+0x22>
 8015b18:	d902      	bls.n	8015b20 <_free_r+0x74>
 8015b1a:	230c      	movs	r3, #12
 8015b1c:	602b      	str	r3, [r5, #0]
 8015b1e:	e7d6      	b.n	8015ace <_free_r+0x22>
 8015b20:	6820      	ldr	r0, [r4, #0]
 8015b22:	1821      	adds	r1, r4, r0
 8015b24:	428b      	cmp	r3, r1
 8015b26:	bf04      	itt	eq
 8015b28:	6819      	ldreq	r1, [r3, #0]
 8015b2a:	685b      	ldreq	r3, [r3, #4]
 8015b2c:	6063      	str	r3, [r4, #4]
 8015b2e:	bf04      	itt	eq
 8015b30:	1809      	addeq	r1, r1, r0
 8015b32:	6021      	streq	r1, [r4, #0]
 8015b34:	6054      	str	r4, [r2, #4]
 8015b36:	e7ca      	b.n	8015ace <_free_r+0x22>
 8015b38:	bd38      	pop	{r3, r4, r5, pc}
 8015b3a:	bf00      	nop
 8015b3c:	2000e000 	.word	0x2000e000

08015b40 <_malloc_usable_size_r>:
 8015b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b44:	1f18      	subs	r0, r3, #4
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	bfbc      	itt	lt
 8015b4a:	580b      	ldrlt	r3, [r1, r0]
 8015b4c:	18c0      	addlt	r0, r0, r3
 8015b4e:	4770      	bx	lr

08015b50 <__ssputs_r>:
 8015b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b54:	688e      	ldr	r6, [r1, #8]
 8015b56:	461f      	mov	r7, r3
 8015b58:	42be      	cmp	r6, r7
 8015b5a:	680b      	ldr	r3, [r1, #0]
 8015b5c:	4682      	mov	sl, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	4690      	mov	r8, r2
 8015b62:	d82d      	bhi.n	8015bc0 <__ssputs_r+0x70>
 8015b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015b6c:	d026      	beq.n	8015bbc <__ssputs_r+0x6c>
 8015b6e:	6965      	ldr	r5, [r4, #20]
 8015b70:	6909      	ldr	r1, [r1, #16]
 8015b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b76:	eba3 0901 	sub.w	r9, r3, r1
 8015b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b7e:	1c7b      	adds	r3, r7, #1
 8015b80:	444b      	add	r3, r9
 8015b82:	106d      	asrs	r5, r5, #1
 8015b84:	429d      	cmp	r5, r3
 8015b86:	bf38      	it	cc
 8015b88:	461d      	movcc	r5, r3
 8015b8a:	0553      	lsls	r3, r2, #21
 8015b8c:	d527      	bpl.n	8015bde <__ssputs_r+0x8e>
 8015b8e:	4629      	mov	r1, r5
 8015b90:	f7ff fb48 	bl	8015224 <_malloc_r>
 8015b94:	4606      	mov	r6, r0
 8015b96:	b360      	cbz	r0, 8015bf2 <__ssputs_r+0xa2>
 8015b98:	6921      	ldr	r1, [r4, #16]
 8015b9a:	464a      	mov	r2, r9
 8015b9c:	f7ff ff4d 	bl	8015a3a <memcpy>
 8015ba0:	89a3      	ldrh	r3, [r4, #12]
 8015ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015baa:	81a3      	strh	r3, [r4, #12]
 8015bac:	6126      	str	r6, [r4, #16]
 8015bae:	6165      	str	r5, [r4, #20]
 8015bb0:	444e      	add	r6, r9
 8015bb2:	eba5 0509 	sub.w	r5, r5, r9
 8015bb6:	6026      	str	r6, [r4, #0]
 8015bb8:	60a5      	str	r5, [r4, #8]
 8015bba:	463e      	mov	r6, r7
 8015bbc:	42be      	cmp	r6, r7
 8015bbe:	d900      	bls.n	8015bc2 <__ssputs_r+0x72>
 8015bc0:	463e      	mov	r6, r7
 8015bc2:	6820      	ldr	r0, [r4, #0]
 8015bc4:	4632      	mov	r2, r6
 8015bc6:	4641      	mov	r1, r8
 8015bc8:	f7ff fe54 	bl	8015874 <memmove>
 8015bcc:	68a3      	ldr	r3, [r4, #8]
 8015bce:	1b9b      	subs	r3, r3, r6
 8015bd0:	60a3      	str	r3, [r4, #8]
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	4433      	add	r3, r6
 8015bd6:	6023      	str	r3, [r4, #0]
 8015bd8:	2000      	movs	r0, #0
 8015bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bde:	462a      	mov	r2, r5
 8015be0:	f7ff fc20 	bl	8015424 <_realloc_r>
 8015be4:	4606      	mov	r6, r0
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d1e0      	bne.n	8015bac <__ssputs_r+0x5c>
 8015bea:	6921      	ldr	r1, [r4, #16]
 8015bec:	4650      	mov	r0, sl
 8015bee:	f7ff ff5d 	bl	8015aac <_free_r>
 8015bf2:	230c      	movs	r3, #12
 8015bf4:	f8ca 3000 	str.w	r3, [sl]
 8015bf8:	89a3      	ldrh	r3, [r4, #12]
 8015bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015bfe:	81a3      	strh	r3, [r4, #12]
 8015c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c04:	e7e9      	b.n	8015bda <__ssputs_r+0x8a>
	...

08015c08 <_svfiprintf_r>:
 8015c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c0c:	4698      	mov	r8, r3
 8015c0e:	898b      	ldrh	r3, [r1, #12]
 8015c10:	061b      	lsls	r3, r3, #24
 8015c12:	b09d      	sub	sp, #116	@ 0x74
 8015c14:	4607      	mov	r7, r0
 8015c16:	460d      	mov	r5, r1
 8015c18:	4614      	mov	r4, r2
 8015c1a:	d510      	bpl.n	8015c3e <_svfiprintf_r+0x36>
 8015c1c:	690b      	ldr	r3, [r1, #16]
 8015c1e:	b973      	cbnz	r3, 8015c3e <_svfiprintf_r+0x36>
 8015c20:	2140      	movs	r1, #64	@ 0x40
 8015c22:	f7ff faff 	bl	8015224 <_malloc_r>
 8015c26:	6028      	str	r0, [r5, #0]
 8015c28:	6128      	str	r0, [r5, #16]
 8015c2a:	b930      	cbnz	r0, 8015c3a <_svfiprintf_r+0x32>
 8015c2c:	230c      	movs	r3, #12
 8015c2e:	603b      	str	r3, [r7, #0]
 8015c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c34:	b01d      	add	sp, #116	@ 0x74
 8015c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c3a:	2340      	movs	r3, #64	@ 0x40
 8015c3c:	616b      	str	r3, [r5, #20]
 8015c3e:	2300      	movs	r3, #0
 8015c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c42:	2320      	movs	r3, #32
 8015c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c4c:	2330      	movs	r3, #48	@ 0x30
 8015c4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015dec <_svfiprintf_r+0x1e4>
 8015c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c56:	f04f 0901 	mov.w	r9, #1
 8015c5a:	4623      	mov	r3, r4
 8015c5c:	469a      	mov	sl, r3
 8015c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c62:	b10a      	cbz	r2, 8015c68 <_svfiprintf_r+0x60>
 8015c64:	2a25      	cmp	r2, #37	@ 0x25
 8015c66:	d1f9      	bne.n	8015c5c <_svfiprintf_r+0x54>
 8015c68:	ebba 0b04 	subs.w	fp, sl, r4
 8015c6c:	d00b      	beq.n	8015c86 <_svfiprintf_r+0x7e>
 8015c6e:	465b      	mov	r3, fp
 8015c70:	4622      	mov	r2, r4
 8015c72:	4629      	mov	r1, r5
 8015c74:	4638      	mov	r0, r7
 8015c76:	f7ff ff6b 	bl	8015b50 <__ssputs_r>
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	f000 80a7 	beq.w	8015dce <_svfiprintf_r+0x1c6>
 8015c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c82:	445a      	add	r2, fp
 8015c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c86:	f89a 3000 	ldrb.w	r3, [sl]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 809f 	beq.w	8015dce <_svfiprintf_r+0x1c6>
 8015c90:	2300      	movs	r3, #0
 8015c92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c9a:	f10a 0a01 	add.w	sl, sl, #1
 8015c9e:	9304      	str	r3, [sp, #16]
 8015ca0:	9307      	str	r3, [sp, #28]
 8015ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ca8:	4654      	mov	r4, sl
 8015caa:	2205      	movs	r2, #5
 8015cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb0:	484e      	ldr	r0, [pc, #312]	@ (8015dec <_svfiprintf_r+0x1e4>)
 8015cb2:	f7ea faad 	bl	8000210 <memchr>
 8015cb6:	9a04      	ldr	r2, [sp, #16]
 8015cb8:	b9d8      	cbnz	r0, 8015cf2 <_svfiprintf_r+0xea>
 8015cba:	06d0      	lsls	r0, r2, #27
 8015cbc:	bf44      	itt	mi
 8015cbe:	2320      	movmi	r3, #32
 8015cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015cc4:	0711      	lsls	r1, r2, #28
 8015cc6:	bf44      	itt	mi
 8015cc8:	232b      	movmi	r3, #43	@ 0x2b
 8015cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015cce:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cd4:	d015      	beq.n	8015d02 <_svfiprintf_r+0xfa>
 8015cd6:	9a07      	ldr	r2, [sp, #28]
 8015cd8:	4654      	mov	r4, sl
 8015cda:	2000      	movs	r0, #0
 8015cdc:	f04f 0c0a 	mov.w	ip, #10
 8015ce0:	4621      	mov	r1, r4
 8015ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ce6:	3b30      	subs	r3, #48	@ 0x30
 8015ce8:	2b09      	cmp	r3, #9
 8015cea:	d94b      	bls.n	8015d84 <_svfiprintf_r+0x17c>
 8015cec:	b1b0      	cbz	r0, 8015d1c <_svfiprintf_r+0x114>
 8015cee:	9207      	str	r2, [sp, #28]
 8015cf0:	e014      	b.n	8015d1c <_svfiprintf_r+0x114>
 8015cf2:	eba0 0308 	sub.w	r3, r0, r8
 8015cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8015cfa:	4313      	orrs	r3, r2
 8015cfc:	9304      	str	r3, [sp, #16]
 8015cfe:	46a2      	mov	sl, r4
 8015d00:	e7d2      	b.n	8015ca8 <_svfiprintf_r+0xa0>
 8015d02:	9b03      	ldr	r3, [sp, #12]
 8015d04:	1d19      	adds	r1, r3, #4
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	9103      	str	r1, [sp, #12]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	bfbb      	ittet	lt
 8015d0e:	425b      	neglt	r3, r3
 8015d10:	f042 0202 	orrlt.w	r2, r2, #2
 8015d14:	9307      	strge	r3, [sp, #28]
 8015d16:	9307      	strlt	r3, [sp, #28]
 8015d18:	bfb8      	it	lt
 8015d1a:	9204      	strlt	r2, [sp, #16]
 8015d1c:	7823      	ldrb	r3, [r4, #0]
 8015d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d20:	d10a      	bne.n	8015d38 <_svfiprintf_r+0x130>
 8015d22:	7863      	ldrb	r3, [r4, #1]
 8015d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d26:	d132      	bne.n	8015d8e <_svfiprintf_r+0x186>
 8015d28:	9b03      	ldr	r3, [sp, #12]
 8015d2a:	1d1a      	adds	r2, r3, #4
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	9203      	str	r2, [sp, #12]
 8015d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d34:	3402      	adds	r4, #2
 8015d36:	9305      	str	r3, [sp, #20]
 8015d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015dfc <_svfiprintf_r+0x1f4>
 8015d3c:	7821      	ldrb	r1, [r4, #0]
 8015d3e:	2203      	movs	r2, #3
 8015d40:	4650      	mov	r0, sl
 8015d42:	f7ea fa65 	bl	8000210 <memchr>
 8015d46:	b138      	cbz	r0, 8015d58 <_svfiprintf_r+0x150>
 8015d48:	9b04      	ldr	r3, [sp, #16]
 8015d4a:	eba0 000a 	sub.w	r0, r0, sl
 8015d4e:	2240      	movs	r2, #64	@ 0x40
 8015d50:	4082      	lsls	r2, r0
 8015d52:	4313      	orrs	r3, r2
 8015d54:	3401      	adds	r4, #1
 8015d56:	9304      	str	r3, [sp, #16]
 8015d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d5c:	4824      	ldr	r0, [pc, #144]	@ (8015df0 <_svfiprintf_r+0x1e8>)
 8015d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d62:	2206      	movs	r2, #6
 8015d64:	f7ea fa54 	bl	8000210 <memchr>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d036      	beq.n	8015dda <_svfiprintf_r+0x1d2>
 8015d6c:	4b21      	ldr	r3, [pc, #132]	@ (8015df4 <_svfiprintf_r+0x1ec>)
 8015d6e:	bb1b      	cbnz	r3, 8015db8 <_svfiprintf_r+0x1b0>
 8015d70:	9b03      	ldr	r3, [sp, #12]
 8015d72:	3307      	adds	r3, #7
 8015d74:	f023 0307 	bic.w	r3, r3, #7
 8015d78:	3308      	adds	r3, #8
 8015d7a:	9303      	str	r3, [sp, #12]
 8015d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d7e:	4433      	add	r3, r6
 8015d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d82:	e76a      	b.n	8015c5a <_svfiprintf_r+0x52>
 8015d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d88:	460c      	mov	r4, r1
 8015d8a:	2001      	movs	r0, #1
 8015d8c:	e7a8      	b.n	8015ce0 <_svfiprintf_r+0xd8>
 8015d8e:	2300      	movs	r3, #0
 8015d90:	3401      	adds	r4, #1
 8015d92:	9305      	str	r3, [sp, #20]
 8015d94:	4619      	mov	r1, r3
 8015d96:	f04f 0c0a 	mov.w	ip, #10
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015da0:	3a30      	subs	r2, #48	@ 0x30
 8015da2:	2a09      	cmp	r2, #9
 8015da4:	d903      	bls.n	8015dae <_svfiprintf_r+0x1a6>
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d0c6      	beq.n	8015d38 <_svfiprintf_r+0x130>
 8015daa:	9105      	str	r1, [sp, #20]
 8015dac:	e7c4      	b.n	8015d38 <_svfiprintf_r+0x130>
 8015dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8015db2:	4604      	mov	r4, r0
 8015db4:	2301      	movs	r3, #1
 8015db6:	e7f0      	b.n	8015d9a <_svfiprintf_r+0x192>
 8015db8:	ab03      	add	r3, sp, #12
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	462a      	mov	r2, r5
 8015dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8015df8 <_svfiprintf_r+0x1f0>)
 8015dc0:	a904      	add	r1, sp, #16
 8015dc2:	4638      	mov	r0, r7
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	1c42      	adds	r2, r0, #1
 8015dca:	4606      	mov	r6, r0
 8015dcc:	d1d6      	bne.n	8015d7c <_svfiprintf_r+0x174>
 8015dce:	89ab      	ldrh	r3, [r5, #12]
 8015dd0:	065b      	lsls	r3, r3, #25
 8015dd2:	f53f af2d 	bmi.w	8015c30 <_svfiprintf_r+0x28>
 8015dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015dd8:	e72c      	b.n	8015c34 <_svfiprintf_r+0x2c>
 8015dda:	ab03      	add	r3, sp, #12
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	462a      	mov	r2, r5
 8015de0:	4b05      	ldr	r3, [pc, #20]	@ (8015df8 <_svfiprintf_r+0x1f0>)
 8015de2:	a904      	add	r1, sp, #16
 8015de4:	4638      	mov	r0, r7
 8015de6:	f000 f879 	bl	8015edc <_printf_i>
 8015dea:	e7ed      	b.n	8015dc8 <_svfiprintf_r+0x1c0>
 8015dec:	08017590 	.word	0x08017590
 8015df0:	0801759a 	.word	0x0801759a
 8015df4:	00000000 	.word	0x00000000
 8015df8:	08015b51 	.word	0x08015b51
 8015dfc:	08017596 	.word	0x08017596

08015e00 <_printf_common>:
 8015e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e04:	4616      	mov	r6, r2
 8015e06:	4698      	mov	r8, r3
 8015e08:	688a      	ldr	r2, [r1, #8]
 8015e0a:	690b      	ldr	r3, [r1, #16]
 8015e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015e10:	4293      	cmp	r3, r2
 8015e12:	bfb8      	it	lt
 8015e14:	4613      	movlt	r3, r2
 8015e16:	6033      	str	r3, [r6, #0]
 8015e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015e1c:	4607      	mov	r7, r0
 8015e1e:	460c      	mov	r4, r1
 8015e20:	b10a      	cbz	r2, 8015e26 <_printf_common+0x26>
 8015e22:	3301      	adds	r3, #1
 8015e24:	6033      	str	r3, [r6, #0]
 8015e26:	6823      	ldr	r3, [r4, #0]
 8015e28:	0699      	lsls	r1, r3, #26
 8015e2a:	bf42      	ittt	mi
 8015e2c:	6833      	ldrmi	r3, [r6, #0]
 8015e2e:	3302      	addmi	r3, #2
 8015e30:	6033      	strmi	r3, [r6, #0]
 8015e32:	6825      	ldr	r5, [r4, #0]
 8015e34:	f015 0506 	ands.w	r5, r5, #6
 8015e38:	d106      	bne.n	8015e48 <_printf_common+0x48>
 8015e3a:	f104 0a19 	add.w	sl, r4, #25
 8015e3e:	68e3      	ldr	r3, [r4, #12]
 8015e40:	6832      	ldr	r2, [r6, #0]
 8015e42:	1a9b      	subs	r3, r3, r2
 8015e44:	42ab      	cmp	r3, r5
 8015e46:	dc26      	bgt.n	8015e96 <_printf_common+0x96>
 8015e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015e4c:	6822      	ldr	r2, [r4, #0]
 8015e4e:	3b00      	subs	r3, #0
 8015e50:	bf18      	it	ne
 8015e52:	2301      	movne	r3, #1
 8015e54:	0692      	lsls	r2, r2, #26
 8015e56:	d42b      	bmi.n	8015eb0 <_printf_common+0xb0>
 8015e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015e5c:	4641      	mov	r1, r8
 8015e5e:	4638      	mov	r0, r7
 8015e60:	47c8      	blx	r9
 8015e62:	3001      	adds	r0, #1
 8015e64:	d01e      	beq.n	8015ea4 <_printf_common+0xa4>
 8015e66:	6823      	ldr	r3, [r4, #0]
 8015e68:	6922      	ldr	r2, [r4, #16]
 8015e6a:	f003 0306 	and.w	r3, r3, #6
 8015e6e:	2b04      	cmp	r3, #4
 8015e70:	bf02      	ittt	eq
 8015e72:	68e5      	ldreq	r5, [r4, #12]
 8015e74:	6833      	ldreq	r3, [r6, #0]
 8015e76:	1aed      	subeq	r5, r5, r3
 8015e78:	68a3      	ldr	r3, [r4, #8]
 8015e7a:	bf0c      	ite	eq
 8015e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e80:	2500      	movne	r5, #0
 8015e82:	4293      	cmp	r3, r2
 8015e84:	bfc4      	itt	gt
 8015e86:	1a9b      	subgt	r3, r3, r2
 8015e88:	18ed      	addgt	r5, r5, r3
 8015e8a:	2600      	movs	r6, #0
 8015e8c:	341a      	adds	r4, #26
 8015e8e:	42b5      	cmp	r5, r6
 8015e90:	d11a      	bne.n	8015ec8 <_printf_common+0xc8>
 8015e92:	2000      	movs	r0, #0
 8015e94:	e008      	b.n	8015ea8 <_printf_common+0xa8>
 8015e96:	2301      	movs	r3, #1
 8015e98:	4652      	mov	r2, sl
 8015e9a:	4641      	mov	r1, r8
 8015e9c:	4638      	mov	r0, r7
 8015e9e:	47c8      	blx	r9
 8015ea0:	3001      	adds	r0, #1
 8015ea2:	d103      	bne.n	8015eac <_printf_common+0xac>
 8015ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eac:	3501      	adds	r5, #1
 8015eae:	e7c6      	b.n	8015e3e <_printf_common+0x3e>
 8015eb0:	18e1      	adds	r1, r4, r3
 8015eb2:	1c5a      	adds	r2, r3, #1
 8015eb4:	2030      	movs	r0, #48	@ 0x30
 8015eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015eba:	4422      	add	r2, r4
 8015ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015ec4:	3302      	adds	r3, #2
 8015ec6:	e7c7      	b.n	8015e58 <_printf_common+0x58>
 8015ec8:	2301      	movs	r3, #1
 8015eca:	4622      	mov	r2, r4
 8015ecc:	4641      	mov	r1, r8
 8015ece:	4638      	mov	r0, r7
 8015ed0:	47c8      	blx	r9
 8015ed2:	3001      	adds	r0, #1
 8015ed4:	d0e6      	beq.n	8015ea4 <_printf_common+0xa4>
 8015ed6:	3601      	adds	r6, #1
 8015ed8:	e7d9      	b.n	8015e8e <_printf_common+0x8e>
	...

08015edc <_printf_i>:
 8015edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee0:	7e0f      	ldrb	r7, [r1, #24]
 8015ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015ee4:	2f78      	cmp	r7, #120	@ 0x78
 8015ee6:	4691      	mov	r9, r2
 8015ee8:	4680      	mov	r8, r0
 8015eea:	460c      	mov	r4, r1
 8015eec:	469a      	mov	sl, r3
 8015eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015ef2:	d807      	bhi.n	8015f04 <_printf_i+0x28>
 8015ef4:	2f62      	cmp	r7, #98	@ 0x62
 8015ef6:	d80a      	bhi.n	8015f0e <_printf_i+0x32>
 8015ef8:	2f00      	cmp	r7, #0
 8015efa:	f000 80d2 	beq.w	80160a2 <_printf_i+0x1c6>
 8015efe:	2f58      	cmp	r7, #88	@ 0x58
 8015f00:	f000 80b9 	beq.w	8016076 <_printf_i+0x19a>
 8015f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015f0c:	e03a      	b.n	8015f84 <_printf_i+0xa8>
 8015f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015f12:	2b15      	cmp	r3, #21
 8015f14:	d8f6      	bhi.n	8015f04 <_printf_i+0x28>
 8015f16:	a101      	add	r1, pc, #4	@ (adr r1, 8015f1c <_printf_i+0x40>)
 8015f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f1c:	08015f75 	.word	0x08015f75
 8015f20:	08015f89 	.word	0x08015f89
 8015f24:	08015f05 	.word	0x08015f05
 8015f28:	08015f05 	.word	0x08015f05
 8015f2c:	08015f05 	.word	0x08015f05
 8015f30:	08015f05 	.word	0x08015f05
 8015f34:	08015f89 	.word	0x08015f89
 8015f38:	08015f05 	.word	0x08015f05
 8015f3c:	08015f05 	.word	0x08015f05
 8015f40:	08015f05 	.word	0x08015f05
 8015f44:	08015f05 	.word	0x08015f05
 8015f48:	08016089 	.word	0x08016089
 8015f4c:	08015fb3 	.word	0x08015fb3
 8015f50:	08016043 	.word	0x08016043
 8015f54:	08015f05 	.word	0x08015f05
 8015f58:	08015f05 	.word	0x08015f05
 8015f5c:	080160ab 	.word	0x080160ab
 8015f60:	08015f05 	.word	0x08015f05
 8015f64:	08015fb3 	.word	0x08015fb3
 8015f68:	08015f05 	.word	0x08015f05
 8015f6c:	08015f05 	.word	0x08015f05
 8015f70:	0801604b 	.word	0x0801604b
 8015f74:	6833      	ldr	r3, [r6, #0]
 8015f76:	1d1a      	adds	r2, r3, #4
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	6032      	str	r2, [r6, #0]
 8015f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015f84:	2301      	movs	r3, #1
 8015f86:	e09d      	b.n	80160c4 <_printf_i+0x1e8>
 8015f88:	6833      	ldr	r3, [r6, #0]
 8015f8a:	6820      	ldr	r0, [r4, #0]
 8015f8c:	1d19      	adds	r1, r3, #4
 8015f8e:	6031      	str	r1, [r6, #0]
 8015f90:	0606      	lsls	r6, r0, #24
 8015f92:	d501      	bpl.n	8015f98 <_printf_i+0xbc>
 8015f94:	681d      	ldr	r5, [r3, #0]
 8015f96:	e003      	b.n	8015fa0 <_printf_i+0xc4>
 8015f98:	0645      	lsls	r5, r0, #25
 8015f9a:	d5fb      	bpl.n	8015f94 <_printf_i+0xb8>
 8015f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015fa0:	2d00      	cmp	r5, #0
 8015fa2:	da03      	bge.n	8015fac <_printf_i+0xd0>
 8015fa4:	232d      	movs	r3, #45	@ 0x2d
 8015fa6:	426d      	negs	r5, r5
 8015fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fac:	4859      	ldr	r0, [pc, #356]	@ (8016114 <_printf_i+0x238>)
 8015fae:	230a      	movs	r3, #10
 8015fb0:	e011      	b.n	8015fd6 <_printf_i+0xfa>
 8015fb2:	6821      	ldr	r1, [r4, #0]
 8015fb4:	6833      	ldr	r3, [r6, #0]
 8015fb6:	0608      	lsls	r0, r1, #24
 8015fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8015fbc:	d402      	bmi.n	8015fc4 <_printf_i+0xe8>
 8015fbe:	0649      	lsls	r1, r1, #25
 8015fc0:	bf48      	it	mi
 8015fc2:	b2ad      	uxthmi	r5, r5
 8015fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8015fc6:	4853      	ldr	r0, [pc, #332]	@ (8016114 <_printf_i+0x238>)
 8015fc8:	6033      	str	r3, [r6, #0]
 8015fca:	bf14      	ite	ne
 8015fcc:	230a      	movne	r3, #10
 8015fce:	2308      	moveq	r3, #8
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015fd6:	6866      	ldr	r6, [r4, #4]
 8015fd8:	60a6      	str	r6, [r4, #8]
 8015fda:	2e00      	cmp	r6, #0
 8015fdc:	bfa2      	ittt	ge
 8015fde:	6821      	ldrge	r1, [r4, #0]
 8015fe0:	f021 0104 	bicge.w	r1, r1, #4
 8015fe4:	6021      	strge	r1, [r4, #0]
 8015fe6:	b90d      	cbnz	r5, 8015fec <_printf_i+0x110>
 8015fe8:	2e00      	cmp	r6, #0
 8015fea:	d04b      	beq.n	8016084 <_printf_i+0x1a8>
 8015fec:	4616      	mov	r6, r2
 8015fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8015ff6:	5dc7      	ldrb	r7, [r0, r7]
 8015ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015ffc:	462f      	mov	r7, r5
 8015ffe:	42bb      	cmp	r3, r7
 8016000:	460d      	mov	r5, r1
 8016002:	d9f4      	bls.n	8015fee <_printf_i+0x112>
 8016004:	2b08      	cmp	r3, #8
 8016006:	d10b      	bne.n	8016020 <_printf_i+0x144>
 8016008:	6823      	ldr	r3, [r4, #0]
 801600a:	07df      	lsls	r7, r3, #31
 801600c:	d508      	bpl.n	8016020 <_printf_i+0x144>
 801600e:	6923      	ldr	r3, [r4, #16]
 8016010:	6861      	ldr	r1, [r4, #4]
 8016012:	4299      	cmp	r1, r3
 8016014:	bfde      	ittt	le
 8016016:	2330      	movle	r3, #48	@ 0x30
 8016018:	f806 3c01 	strble.w	r3, [r6, #-1]
 801601c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016020:	1b92      	subs	r2, r2, r6
 8016022:	6122      	str	r2, [r4, #16]
 8016024:	f8cd a000 	str.w	sl, [sp]
 8016028:	464b      	mov	r3, r9
 801602a:	aa03      	add	r2, sp, #12
 801602c:	4621      	mov	r1, r4
 801602e:	4640      	mov	r0, r8
 8016030:	f7ff fee6 	bl	8015e00 <_printf_common>
 8016034:	3001      	adds	r0, #1
 8016036:	d14a      	bne.n	80160ce <_printf_i+0x1f2>
 8016038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801603c:	b004      	add	sp, #16
 801603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	f043 0320 	orr.w	r3, r3, #32
 8016048:	6023      	str	r3, [r4, #0]
 801604a:	4833      	ldr	r0, [pc, #204]	@ (8016118 <_printf_i+0x23c>)
 801604c:	2778      	movs	r7, #120	@ 0x78
 801604e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	6831      	ldr	r1, [r6, #0]
 8016056:	061f      	lsls	r7, r3, #24
 8016058:	f851 5b04 	ldr.w	r5, [r1], #4
 801605c:	d402      	bmi.n	8016064 <_printf_i+0x188>
 801605e:	065f      	lsls	r7, r3, #25
 8016060:	bf48      	it	mi
 8016062:	b2ad      	uxthmi	r5, r5
 8016064:	6031      	str	r1, [r6, #0]
 8016066:	07d9      	lsls	r1, r3, #31
 8016068:	bf44      	itt	mi
 801606a:	f043 0320 	orrmi.w	r3, r3, #32
 801606e:	6023      	strmi	r3, [r4, #0]
 8016070:	b11d      	cbz	r5, 801607a <_printf_i+0x19e>
 8016072:	2310      	movs	r3, #16
 8016074:	e7ac      	b.n	8015fd0 <_printf_i+0xf4>
 8016076:	4827      	ldr	r0, [pc, #156]	@ (8016114 <_printf_i+0x238>)
 8016078:	e7e9      	b.n	801604e <_printf_i+0x172>
 801607a:	6823      	ldr	r3, [r4, #0]
 801607c:	f023 0320 	bic.w	r3, r3, #32
 8016080:	6023      	str	r3, [r4, #0]
 8016082:	e7f6      	b.n	8016072 <_printf_i+0x196>
 8016084:	4616      	mov	r6, r2
 8016086:	e7bd      	b.n	8016004 <_printf_i+0x128>
 8016088:	6833      	ldr	r3, [r6, #0]
 801608a:	6825      	ldr	r5, [r4, #0]
 801608c:	6961      	ldr	r1, [r4, #20]
 801608e:	1d18      	adds	r0, r3, #4
 8016090:	6030      	str	r0, [r6, #0]
 8016092:	062e      	lsls	r6, r5, #24
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	d501      	bpl.n	801609c <_printf_i+0x1c0>
 8016098:	6019      	str	r1, [r3, #0]
 801609a:	e002      	b.n	80160a2 <_printf_i+0x1c6>
 801609c:	0668      	lsls	r0, r5, #25
 801609e:	d5fb      	bpl.n	8016098 <_printf_i+0x1bc>
 80160a0:	8019      	strh	r1, [r3, #0]
 80160a2:	2300      	movs	r3, #0
 80160a4:	6123      	str	r3, [r4, #16]
 80160a6:	4616      	mov	r6, r2
 80160a8:	e7bc      	b.n	8016024 <_printf_i+0x148>
 80160aa:	6833      	ldr	r3, [r6, #0]
 80160ac:	1d1a      	adds	r2, r3, #4
 80160ae:	6032      	str	r2, [r6, #0]
 80160b0:	681e      	ldr	r6, [r3, #0]
 80160b2:	6862      	ldr	r2, [r4, #4]
 80160b4:	2100      	movs	r1, #0
 80160b6:	4630      	mov	r0, r6
 80160b8:	f7ea f8aa 	bl	8000210 <memchr>
 80160bc:	b108      	cbz	r0, 80160c2 <_printf_i+0x1e6>
 80160be:	1b80      	subs	r0, r0, r6
 80160c0:	6060      	str	r0, [r4, #4]
 80160c2:	6863      	ldr	r3, [r4, #4]
 80160c4:	6123      	str	r3, [r4, #16]
 80160c6:	2300      	movs	r3, #0
 80160c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80160cc:	e7aa      	b.n	8016024 <_printf_i+0x148>
 80160ce:	6923      	ldr	r3, [r4, #16]
 80160d0:	4632      	mov	r2, r6
 80160d2:	4649      	mov	r1, r9
 80160d4:	4640      	mov	r0, r8
 80160d6:	47d0      	blx	sl
 80160d8:	3001      	adds	r0, #1
 80160da:	d0ad      	beq.n	8016038 <_printf_i+0x15c>
 80160dc:	6823      	ldr	r3, [r4, #0]
 80160de:	079b      	lsls	r3, r3, #30
 80160e0:	d413      	bmi.n	801610a <_printf_i+0x22e>
 80160e2:	68e0      	ldr	r0, [r4, #12]
 80160e4:	9b03      	ldr	r3, [sp, #12]
 80160e6:	4298      	cmp	r0, r3
 80160e8:	bfb8      	it	lt
 80160ea:	4618      	movlt	r0, r3
 80160ec:	e7a6      	b.n	801603c <_printf_i+0x160>
 80160ee:	2301      	movs	r3, #1
 80160f0:	4632      	mov	r2, r6
 80160f2:	4649      	mov	r1, r9
 80160f4:	4640      	mov	r0, r8
 80160f6:	47d0      	blx	sl
 80160f8:	3001      	adds	r0, #1
 80160fa:	d09d      	beq.n	8016038 <_printf_i+0x15c>
 80160fc:	3501      	adds	r5, #1
 80160fe:	68e3      	ldr	r3, [r4, #12]
 8016100:	9903      	ldr	r1, [sp, #12]
 8016102:	1a5b      	subs	r3, r3, r1
 8016104:	42ab      	cmp	r3, r5
 8016106:	dcf2      	bgt.n	80160ee <_printf_i+0x212>
 8016108:	e7eb      	b.n	80160e2 <_printf_i+0x206>
 801610a:	2500      	movs	r5, #0
 801610c:	f104 0619 	add.w	r6, r4, #25
 8016110:	e7f5      	b.n	80160fe <_printf_i+0x222>
 8016112:	bf00      	nop
 8016114:	080175a1 	.word	0x080175a1
 8016118:	080175b2 	.word	0x080175b2

0801611c <__sflush_r>:
 801611c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016124:	0716      	lsls	r6, r2, #28
 8016126:	4605      	mov	r5, r0
 8016128:	460c      	mov	r4, r1
 801612a:	d454      	bmi.n	80161d6 <__sflush_r+0xba>
 801612c:	684b      	ldr	r3, [r1, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	dc02      	bgt.n	8016138 <__sflush_r+0x1c>
 8016132:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016134:	2b00      	cmp	r3, #0
 8016136:	dd48      	ble.n	80161ca <__sflush_r+0xae>
 8016138:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801613a:	2e00      	cmp	r6, #0
 801613c:	d045      	beq.n	80161ca <__sflush_r+0xae>
 801613e:	2300      	movs	r3, #0
 8016140:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016144:	682f      	ldr	r7, [r5, #0]
 8016146:	6a21      	ldr	r1, [r4, #32]
 8016148:	602b      	str	r3, [r5, #0]
 801614a:	d030      	beq.n	80161ae <__sflush_r+0x92>
 801614c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801614e:	89a3      	ldrh	r3, [r4, #12]
 8016150:	0759      	lsls	r1, r3, #29
 8016152:	d505      	bpl.n	8016160 <__sflush_r+0x44>
 8016154:	6863      	ldr	r3, [r4, #4]
 8016156:	1ad2      	subs	r2, r2, r3
 8016158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801615a:	b10b      	cbz	r3, 8016160 <__sflush_r+0x44>
 801615c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801615e:	1ad2      	subs	r2, r2, r3
 8016160:	2300      	movs	r3, #0
 8016162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016164:	6a21      	ldr	r1, [r4, #32]
 8016166:	4628      	mov	r0, r5
 8016168:	47b0      	blx	r6
 801616a:	1c43      	adds	r3, r0, #1
 801616c:	89a3      	ldrh	r3, [r4, #12]
 801616e:	d106      	bne.n	801617e <__sflush_r+0x62>
 8016170:	6829      	ldr	r1, [r5, #0]
 8016172:	291d      	cmp	r1, #29
 8016174:	d82b      	bhi.n	80161ce <__sflush_r+0xb2>
 8016176:	4a2a      	ldr	r2, [pc, #168]	@ (8016220 <__sflush_r+0x104>)
 8016178:	410a      	asrs	r2, r1
 801617a:	07d6      	lsls	r6, r2, #31
 801617c:	d427      	bmi.n	80161ce <__sflush_r+0xb2>
 801617e:	2200      	movs	r2, #0
 8016180:	6062      	str	r2, [r4, #4]
 8016182:	04d9      	lsls	r1, r3, #19
 8016184:	6922      	ldr	r2, [r4, #16]
 8016186:	6022      	str	r2, [r4, #0]
 8016188:	d504      	bpl.n	8016194 <__sflush_r+0x78>
 801618a:	1c42      	adds	r2, r0, #1
 801618c:	d101      	bne.n	8016192 <__sflush_r+0x76>
 801618e:	682b      	ldr	r3, [r5, #0]
 8016190:	b903      	cbnz	r3, 8016194 <__sflush_r+0x78>
 8016192:	6560      	str	r0, [r4, #84]	@ 0x54
 8016194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016196:	602f      	str	r7, [r5, #0]
 8016198:	b1b9      	cbz	r1, 80161ca <__sflush_r+0xae>
 801619a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801619e:	4299      	cmp	r1, r3
 80161a0:	d002      	beq.n	80161a8 <__sflush_r+0x8c>
 80161a2:	4628      	mov	r0, r5
 80161a4:	f7ff fc82 	bl	8015aac <_free_r>
 80161a8:	2300      	movs	r3, #0
 80161aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80161ac:	e00d      	b.n	80161ca <__sflush_r+0xae>
 80161ae:	2301      	movs	r3, #1
 80161b0:	4628      	mov	r0, r5
 80161b2:	47b0      	blx	r6
 80161b4:	4602      	mov	r2, r0
 80161b6:	1c50      	adds	r0, r2, #1
 80161b8:	d1c9      	bne.n	801614e <__sflush_r+0x32>
 80161ba:	682b      	ldr	r3, [r5, #0]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d0c6      	beq.n	801614e <__sflush_r+0x32>
 80161c0:	2b1d      	cmp	r3, #29
 80161c2:	d001      	beq.n	80161c8 <__sflush_r+0xac>
 80161c4:	2b16      	cmp	r3, #22
 80161c6:	d11e      	bne.n	8016206 <__sflush_r+0xea>
 80161c8:	602f      	str	r7, [r5, #0]
 80161ca:	2000      	movs	r0, #0
 80161cc:	e022      	b.n	8016214 <__sflush_r+0xf8>
 80161ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161d2:	b21b      	sxth	r3, r3
 80161d4:	e01b      	b.n	801620e <__sflush_r+0xf2>
 80161d6:	690f      	ldr	r7, [r1, #16]
 80161d8:	2f00      	cmp	r7, #0
 80161da:	d0f6      	beq.n	80161ca <__sflush_r+0xae>
 80161dc:	0793      	lsls	r3, r2, #30
 80161de:	680e      	ldr	r6, [r1, #0]
 80161e0:	bf08      	it	eq
 80161e2:	694b      	ldreq	r3, [r1, #20]
 80161e4:	600f      	str	r7, [r1, #0]
 80161e6:	bf18      	it	ne
 80161e8:	2300      	movne	r3, #0
 80161ea:	eba6 0807 	sub.w	r8, r6, r7
 80161ee:	608b      	str	r3, [r1, #8]
 80161f0:	f1b8 0f00 	cmp.w	r8, #0
 80161f4:	dde9      	ble.n	80161ca <__sflush_r+0xae>
 80161f6:	6a21      	ldr	r1, [r4, #32]
 80161f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80161fa:	4643      	mov	r3, r8
 80161fc:	463a      	mov	r2, r7
 80161fe:	4628      	mov	r0, r5
 8016200:	47b0      	blx	r6
 8016202:	2800      	cmp	r0, #0
 8016204:	dc08      	bgt.n	8016218 <__sflush_r+0xfc>
 8016206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801620a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801620e:	81a3      	strh	r3, [r4, #12]
 8016210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016218:	4407      	add	r7, r0
 801621a:	eba8 0800 	sub.w	r8, r8, r0
 801621e:	e7e7      	b.n	80161f0 <__sflush_r+0xd4>
 8016220:	dfbffffe 	.word	0xdfbffffe

08016224 <_fflush_r>:
 8016224:	b538      	push	{r3, r4, r5, lr}
 8016226:	690b      	ldr	r3, [r1, #16]
 8016228:	4605      	mov	r5, r0
 801622a:	460c      	mov	r4, r1
 801622c:	b913      	cbnz	r3, 8016234 <_fflush_r+0x10>
 801622e:	2500      	movs	r5, #0
 8016230:	4628      	mov	r0, r5
 8016232:	bd38      	pop	{r3, r4, r5, pc}
 8016234:	b118      	cbz	r0, 801623e <_fflush_r+0x1a>
 8016236:	6a03      	ldr	r3, [r0, #32]
 8016238:	b90b      	cbnz	r3, 801623e <_fflush_r+0x1a>
 801623a:	f7ff fa25 	bl	8015688 <__sinit>
 801623e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d0f3      	beq.n	801622e <_fflush_r+0xa>
 8016246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016248:	07d0      	lsls	r0, r2, #31
 801624a:	d404      	bmi.n	8016256 <_fflush_r+0x32>
 801624c:	0599      	lsls	r1, r3, #22
 801624e:	d402      	bmi.n	8016256 <_fflush_r+0x32>
 8016250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016252:	f7ff fbe8 	bl	8015a26 <__retarget_lock_acquire_recursive>
 8016256:	4628      	mov	r0, r5
 8016258:	4621      	mov	r1, r4
 801625a:	f7ff ff5f 	bl	801611c <__sflush_r>
 801625e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016260:	07da      	lsls	r2, r3, #31
 8016262:	4605      	mov	r5, r0
 8016264:	d4e4      	bmi.n	8016230 <_fflush_r+0xc>
 8016266:	89a3      	ldrh	r3, [r4, #12]
 8016268:	059b      	lsls	r3, r3, #22
 801626a:	d4e1      	bmi.n	8016230 <_fflush_r+0xc>
 801626c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801626e:	f7ff fbdb 	bl	8015a28 <__retarget_lock_release_recursive>
 8016272:	e7dd      	b.n	8016230 <_fflush_r+0xc>

08016274 <fiprintf>:
 8016274:	b40e      	push	{r1, r2, r3}
 8016276:	b503      	push	{r0, r1, lr}
 8016278:	4601      	mov	r1, r0
 801627a:	ab03      	add	r3, sp, #12
 801627c:	4805      	ldr	r0, [pc, #20]	@ (8016294 <fiprintf+0x20>)
 801627e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016282:	6800      	ldr	r0, [r0, #0]
 8016284:	9301      	str	r3, [sp, #4]
 8016286:	f000 f837 	bl	80162f8 <_vfiprintf_r>
 801628a:	b002      	add	sp, #8
 801628c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016290:	b003      	add	sp, #12
 8016292:	4770      	bx	lr
 8016294:	200004e4 	.word	0x200004e4

08016298 <abort>:
 8016298:	b508      	push	{r3, lr}
 801629a:	2006      	movs	r0, #6
 801629c:	f000 fa00 	bl	80166a0 <raise>
 80162a0:	2001      	movs	r0, #1
 80162a2:	f7ec fb83 	bl	80029ac <_exit>

080162a6 <__sfputc_r>:
 80162a6:	6893      	ldr	r3, [r2, #8]
 80162a8:	3b01      	subs	r3, #1
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	b410      	push	{r4}
 80162ae:	6093      	str	r3, [r2, #8]
 80162b0:	da08      	bge.n	80162c4 <__sfputc_r+0x1e>
 80162b2:	6994      	ldr	r4, [r2, #24]
 80162b4:	42a3      	cmp	r3, r4
 80162b6:	db01      	blt.n	80162bc <__sfputc_r+0x16>
 80162b8:	290a      	cmp	r1, #10
 80162ba:	d103      	bne.n	80162c4 <__sfputc_r+0x1e>
 80162bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162c0:	f000 b932 	b.w	8016528 <__swbuf_r>
 80162c4:	6813      	ldr	r3, [r2, #0]
 80162c6:	1c58      	adds	r0, r3, #1
 80162c8:	6010      	str	r0, [r2, #0]
 80162ca:	7019      	strb	r1, [r3, #0]
 80162cc:	4608      	mov	r0, r1
 80162ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <__sfputs_r>:
 80162d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d6:	4606      	mov	r6, r0
 80162d8:	460f      	mov	r7, r1
 80162da:	4614      	mov	r4, r2
 80162dc:	18d5      	adds	r5, r2, r3
 80162de:	42ac      	cmp	r4, r5
 80162e0:	d101      	bne.n	80162e6 <__sfputs_r+0x12>
 80162e2:	2000      	movs	r0, #0
 80162e4:	e007      	b.n	80162f6 <__sfputs_r+0x22>
 80162e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162ea:	463a      	mov	r2, r7
 80162ec:	4630      	mov	r0, r6
 80162ee:	f7ff ffda 	bl	80162a6 <__sfputc_r>
 80162f2:	1c43      	adds	r3, r0, #1
 80162f4:	d1f3      	bne.n	80162de <__sfputs_r+0xa>
 80162f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080162f8 <_vfiprintf_r>:
 80162f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fc:	460d      	mov	r5, r1
 80162fe:	b09d      	sub	sp, #116	@ 0x74
 8016300:	4614      	mov	r4, r2
 8016302:	4698      	mov	r8, r3
 8016304:	4606      	mov	r6, r0
 8016306:	b118      	cbz	r0, 8016310 <_vfiprintf_r+0x18>
 8016308:	6a03      	ldr	r3, [r0, #32]
 801630a:	b90b      	cbnz	r3, 8016310 <_vfiprintf_r+0x18>
 801630c:	f7ff f9bc 	bl	8015688 <__sinit>
 8016310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016312:	07d9      	lsls	r1, r3, #31
 8016314:	d405      	bmi.n	8016322 <_vfiprintf_r+0x2a>
 8016316:	89ab      	ldrh	r3, [r5, #12]
 8016318:	059a      	lsls	r2, r3, #22
 801631a:	d402      	bmi.n	8016322 <_vfiprintf_r+0x2a>
 801631c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801631e:	f7ff fb82 	bl	8015a26 <__retarget_lock_acquire_recursive>
 8016322:	89ab      	ldrh	r3, [r5, #12]
 8016324:	071b      	lsls	r3, r3, #28
 8016326:	d501      	bpl.n	801632c <_vfiprintf_r+0x34>
 8016328:	692b      	ldr	r3, [r5, #16]
 801632a:	b99b      	cbnz	r3, 8016354 <_vfiprintf_r+0x5c>
 801632c:	4629      	mov	r1, r5
 801632e:	4630      	mov	r0, r6
 8016330:	f000 f938 	bl	80165a4 <__swsetup_r>
 8016334:	b170      	cbz	r0, 8016354 <_vfiprintf_r+0x5c>
 8016336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016338:	07dc      	lsls	r4, r3, #31
 801633a:	d504      	bpl.n	8016346 <_vfiprintf_r+0x4e>
 801633c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016340:	b01d      	add	sp, #116	@ 0x74
 8016342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016346:	89ab      	ldrh	r3, [r5, #12]
 8016348:	0598      	lsls	r0, r3, #22
 801634a:	d4f7      	bmi.n	801633c <_vfiprintf_r+0x44>
 801634c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801634e:	f7ff fb6b 	bl	8015a28 <__retarget_lock_release_recursive>
 8016352:	e7f3      	b.n	801633c <_vfiprintf_r+0x44>
 8016354:	2300      	movs	r3, #0
 8016356:	9309      	str	r3, [sp, #36]	@ 0x24
 8016358:	2320      	movs	r3, #32
 801635a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801635e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016362:	2330      	movs	r3, #48	@ 0x30
 8016364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016514 <_vfiprintf_r+0x21c>
 8016368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801636c:	f04f 0901 	mov.w	r9, #1
 8016370:	4623      	mov	r3, r4
 8016372:	469a      	mov	sl, r3
 8016374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016378:	b10a      	cbz	r2, 801637e <_vfiprintf_r+0x86>
 801637a:	2a25      	cmp	r2, #37	@ 0x25
 801637c:	d1f9      	bne.n	8016372 <_vfiprintf_r+0x7a>
 801637e:	ebba 0b04 	subs.w	fp, sl, r4
 8016382:	d00b      	beq.n	801639c <_vfiprintf_r+0xa4>
 8016384:	465b      	mov	r3, fp
 8016386:	4622      	mov	r2, r4
 8016388:	4629      	mov	r1, r5
 801638a:	4630      	mov	r0, r6
 801638c:	f7ff ffa2 	bl	80162d4 <__sfputs_r>
 8016390:	3001      	adds	r0, #1
 8016392:	f000 80a7 	beq.w	80164e4 <_vfiprintf_r+0x1ec>
 8016396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016398:	445a      	add	r2, fp
 801639a:	9209      	str	r2, [sp, #36]	@ 0x24
 801639c:	f89a 3000 	ldrb.w	r3, [sl]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f000 809f 	beq.w	80164e4 <_vfiprintf_r+0x1ec>
 80163a6:	2300      	movs	r3, #0
 80163a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80163ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163b0:	f10a 0a01 	add.w	sl, sl, #1
 80163b4:	9304      	str	r3, [sp, #16]
 80163b6:	9307      	str	r3, [sp, #28]
 80163b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80163bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80163be:	4654      	mov	r4, sl
 80163c0:	2205      	movs	r2, #5
 80163c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163c6:	4853      	ldr	r0, [pc, #332]	@ (8016514 <_vfiprintf_r+0x21c>)
 80163c8:	f7e9 ff22 	bl	8000210 <memchr>
 80163cc:	9a04      	ldr	r2, [sp, #16]
 80163ce:	b9d8      	cbnz	r0, 8016408 <_vfiprintf_r+0x110>
 80163d0:	06d1      	lsls	r1, r2, #27
 80163d2:	bf44      	itt	mi
 80163d4:	2320      	movmi	r3, #32
 80163d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163da:	0713      	lsls	r3, r2, #28
 80163dc:	bf44      	itt	mi
 80163de:	232b      	movmi	r3, #43	@ 0x2b
 80163e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163e4:	f89a 3000 	ldrb.w	r3, [sl]
 80163e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80163ea:	d015      	beq.n	8016418 <_vfiprintf_r+0x120>
 80163ec:	9a07      	ldr	r2, [sp, #28]
 80163ee:	4654      	mov	r4, sl
 80163f0:	2000      	movs	r0, #0
 80163f2:	f04f 0c0a 	mov.w	ip, #10
 80163f6:	4621      	mov	r1, r4
 80163f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163fc:	3b30      	subs	r3, #48	@ 0x30
 80163fe:	2b09      	cmp	r3, #9
 8016400:	d94b      	bls.n	801649a <_vfiprintf_r+0x1a2>
 8016402:	b1b0      	cbz	r0, 8016432 <_vfiprintf_r+0x13a>
 8016404:	9207      	str	r2, [sp, #28]
 8016406:	e014      	b.n	8016432 <_vfiprintf_r+0x13a>
 8016408:	eba0 0308 	sub.w	r3, r0, r8
 801640c:	fa09 f303 	lsl.w	r3, r9, r3
 8016410:	4313      	orrs	r3, r2
 8016412:	9304      	str	r3, [sp, #16]
 8016414:	46a2      	mov	sl, r4
 8016416:	e7d2      	b.n	80163be <_vfiprintf_r+0xc6>
 8016418:	9b03      	ldr	r3, [sp, #12]
 801641a:	1d19      	adds	r1, r3, #4
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	9103      	str	r1, [sp, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	bfbb      	ittet	lt
 8016424:	425b      	neglt	r3, r3
 8016426:	f042 0202 	orrlt.w	r2, r2, #2
 801642a:	9307      	strge	r3, [sp, #28]
 801642c:	9307      	strlt	r3, [sp, #28]
 801642e:	bfb8      	it	lt
 8016430:	9204      	strlt	r2, [sp, #16]
 8016432:	7823      	ldrb	r3, [r4, #0]
 8016434:	2b2e      	cmp	r3, #46	@ 0x2e
 8016436:	d10a      	bne.n	801644e <_vfiprintf_r+0x156>
 8016438:	7863      	ldrb	r3, [r4, #1]
 801643a:	2b2a      	cmp	r3, #42	@ 0x2a
 801643c:	d132      	bne.n	80164a4 <_vfiprintf_r+0x1ac>
 801643e:	9b03      	ldr	r3, [sp, #12]
 8016440:	1d1a      	adds	r2, r3, #4
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	9203      	str	r2, [sp, #12]
 8016446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801644a:	3402      	adds	r4, #2
 801644c:	9305      	str	r3, [sp, #20]
 801644e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016524 <_vfiprintf_r+0x22c>
 8016452:	7821      	ldrb	r1, [r4, #0]
 8016454:	2203      	movs	r2, #3
 8016456:	4650      	mov	r0, sl
 8016458:	f7e9 feda 	bl	8000210 <memchr>
 801645c:	b138      	cbz	r0, 801646e <_vfiprintf_r+0x176>
 801645e:	9b04      	ldr	r3, [sp, #16]
 8016460:	eba0 000a 	sub.w	r0, r0, sl
 8016464:	2240      	movs	r2, #64	@ 0x40
 8016466:	4082      	lsls	r2, r0
 8016468:	4313      	orrs	r3, r2
 801646a:	3401      	adds	r4, #1
 801646c:	9304      	str	r3, [sp, #16]
 801646e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016472:	4829      	ldr	r0, [pc, #164]	@ (8016518 <_vfiprintf_r+0x220>)
 8016474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016478:	2206      	movs	r2, #6
 801647a:	f7e9 fec9 	bl	8000210 <memchr>
 801647e:	2800      	cmp	r0, #0
 8016480:	d03f      	beq.n	8016502 <_vfiprintf_r+0x20a>
 8016482:	4b26      	ldr	r3, [pc, #152]	@ (801651c <_vfiprintf_r+0x224>)
 8016484:	bb1b      	cbnz	r3, 80164ce <_vfiprintf_r+0x1d6>
 8016486:	9b03      	ldr	r3, [sp, #12]
 8016488:	3307      	adds	r3, #7
 801648a:	f023 0307 	bic.w	r3, r3, #7
 801648e:	3308      	adds	r3, #8
 8016490:	9303      	str	r3, [sp, #12]
 8016492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016494:	443b      	add	r3, r7
 8016496:	9309      	str	r3, [sp, #36]	@ 0x24
 8016498:	e76a      	b.n	8016370 <_vfiprintf_r+0x78>
 801649a:	fb0c 3202 	mla	r2, ip, r2, r3
 801649e:	460c      	mov	r4, r1
 80164a0:	2001      	movs	r0, #1
 80164a2:	e7a8      	b.n	80163f6 <_vfiprintf_r+0xfe>
 80164a4:	2300      	movs	r3, #0
 80164a6:	3401      	adds	r4, #1
 80164a8:	9305      	str	r3, [sp, #20]
 80164aa:	4619      	mov	r1, r3
 80164ac:	f04f 0c0a 	mov.w	ip, #10
 80164b0:	4620      	mov	r0, r4
 80164b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164b6:	3a30      	subs	r2, #48	@ 0x30
 80164b8:	2a09      	cmp	r2, #9
 80164ba:	d903      	bls.n	80164c4 <_vfiprintf_r+0x1cc>
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d0c6      	beq.n	801644e <_vfiprintf_r+0x156>
 80164c0:	9105      	str	r1, [sp, #20]
 80164c2:	e7c4      	b.n	801644e <_vfiprintf_r+0x156>
 80164c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80164c8:	4604      	mov	r4, r0
 80164ca:	2301      	movs	r3, #1
 80164cc:	e7f0      	b.n	80164b0 <_vfiprintf_r+0x1b8>
 80164ce:	ab03      	add	r3, sp, #12
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	462a      	mov	r2, r5
 80164d4:	4b12      	ldr	r3, [pc, #72]	@ (8016520 <_vfiprintf_r+0x228>)
 80164d6:	a904      	add	r1, sp, #16
 80164d8:	4630      	mov	r0, r6
 80164da:	f3af 8000 	nop.w
 80164de:	4607      	mov	r7, r0
 80164e0:	1c78      	adds	r0, r7, #1
 80164e2:	d1d6      	bne.n	8016492 <_vfiprintf_r+0x19a>
 80164e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80164e6:	07d9      	lsls	r1, r3, #31
 80164e8:	d405      	bmi.n	80164f6 <_vfiprintf_r+0x1fe>
 80164ea:	89ab      	ldrh	r3, [r5, #12]
 80164ec:	059a      	lsls	r2, r3, #22
 80164ee:	d402      	bmi.n	80164f6 <_vfiprintf_r+0x1fe>
 80164f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80164f2:	f7ff fa99 	bl	8015a28 <__retarget_lock_release_recursive>
 80164f6:	89ab      	ldrh	r3, [r5, #12]
 80164f8:	065b      	lsls	r3, r3, #25
 80164fa:	f53f af1f 	bmi.w	801633c <_vfiprintf_r+0x44>
 80164fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016500:	e71e      	b.n	8016340 <_vfiprintf_r+0x48>
 8016502:	ab03      	add	r3, sp, #12
 8016504:	9300      	str	r3, [sp, #0]
 8016506:	462a      	mov	r2, r5
 8016508:	4b05      	ldr	r3, [pc, #20]	@ (8016520 <_vfiprintf_r+0x228>)
 801650a:	a904      	add	r1, sp, #16
 801650c:	4630      	mov	r0, r6
 801650e:	f7ff fce5 	bl	8015edc <_printf_i>
 8016512:	e7e4      	b.n	80164de <_vfiprintf_r+0x1e6>
 8016514:	08017590 	.word	0x08017590
 8016518:	0801759a 	.word	0x0801759a
 801651c:	00000000 	.word	0x00000000
 8016520:	080162d5 	.word	0x080162d5
 8016524:	08017596 	.word	0x08017596

08016528 <__swbuf_r>:
 8016528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801652a:	460e      	mov	r6, r1
 801652c:	4614      	mov	r4, r2
 801652e:	4605      	mov	r5, r0
 8016530:	b118      	cbz	r0, 801653a <__swbuf_r+0x12>
 8016532:	6a03      	ldr	r3, [r0, #32]
 8016534:	b90b      	cbnz	r3, 801653a <__swbuf_r+0x12>
 8016536:	f7ff f8a7 	bl	8015688 <__sinit>
 801653a:	69a3      	ldr	r3, [r4, #24]
 801653c:	60a3      	str	r3, [r4, #8]
 801653e:	89a3      	ldrh	r3, [r4, #12]
 8016540:	071a      	lsls	r2, r3, #28
 8016542:	d501      	bpl.n	8016548 <__swbuf_r+0x20>
 8016544:	6923      	ldr	r3, [r4, #16]
 8016546:	b943      	cbnz	r3, 801655a <__swbuf_r+0x32>
 8016548:	4621      	mov	r1, r4
 801654a:	4628      	mov	r0, r5
 801654c:	f000 f82a 	bl	80165a4 <__swsetup_r>
 8016550:	b118      	cbz	r0, 801655a <__swbuf_r+0x32>
 8016552:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016556:	4638      	mov	r0, r7
 8016558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801655a:	6823      	ldr	r3, [r4, #0]
 801655c:	6922      	ldr	r2, [r4, #16]
 801655e:	1a98      	subs	r0, r3, r2
 8016560:	6963      	ldr	r3, [r4, #20]
 8016562:	b2f6      	uxtb	r6, r6
 8016564:	4283      	cmp	r3, r0
 8016566:	4637      	mov	r7, r6
 8016568:	dc05      	bgt.n	8016576 <__swbuf_r+0x4e>
 801656a:	4621      	mov	r1, r4
 801656c:	4628      	mov	r0, r5
 801656e:	f7ff fe59 	bl	8016224 <_fflush_r>
 8016572:	2800      	cmp	r0, #0
 8016574:	d1ed      	bne.n	8016552 <__swbuf_r+0x2a>
 8016576:	68a3      	ldr	r3, [r4, #8]
 8016578:	3b01      	subs	r3, #1
 801657a:	60a3      	str	r3, [r4, #8]
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	1c5a      	adds	r2, r3, #1
 8016580:	6022      	str	r2, [r4, #0]
 8016582:	701e      	strb	r6, [r3, #0]
 8016584:	6962      	ldr	r2, [r4, #20]
 8016586:	1c43      	adds	r3, r0, #1
 8016588:	429a      	cmp	r2, r3
 801658a:	d004      	beq.n	8016596 <__swbuf_r+0x6e>
 801658c:	89a3      	ldrh	r3, [r4, #12]
 801658e:	07db      	lsls	r3, r3, #31
 8016590:	d5e1      	bpl.n	8016556 <__swbuf_r+0x2e>
 8016592:	2e0a      	cmp	r6, #10
 8016594:	d1df      	bne.n	8016556 <__swbuf_r+0x2e>
 8016596:	4621      	mov	r1, r4
 8016598:	4628      	mov	r0, r5
 801659a:	f7ff fe43 	bl	8016224 <_fflush_r>
 801659e:	2800      	cmp	r0, #0
 80165a0:	d0d9      	beq.n	8016556 <__swbuf_r+0x2e>
 80165a2:	e7d6      	b.n	8016552 <__swbuf_r+0x2a>

080165a4 <__swsetup_r>:
 80165a4:	b538      	push	{r3, r4, r5, lr}
 80165a6:	4b29      	ldr	r3, [pc, #164]	@ (801664c <__swsetup_r+0xa8>)
 80165a8:	4605      	mov	r5, r0
 80165aa:	6818      	ldr	r0, [r3, #0]
 80165ac:	460c      	mov	r4, r1
 80165ae:	b118      	cbz	r0, 80165b8 <__swsetup_r+0x14>
 80165b0:	6a03      	ldr	r3, [r0, #32]
 80165b2:	b90b      	cbnz	r3, 80165b8 <__swsetup_r+0x14>
 80165b4:	f7ff f868 	bl	8015688 <__sinit>
 80165b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165bc:	0719      	lsls	r1, r3, #28
 80165be:	d422      	bmi.n	8016606 <__swsetup_r+0x62>
 80165c0:	06da      	lsls	r2, r3, #27
 80165c2:	d407      	bmi.n	80165d4 <__swsetup_r+0x30>
 80165c4:	2209      	movs	r2, #9
 80165c6:	602a      	str	r2, [r5, #0]
 80165c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165cc:	81a3      	strh	r3, [r4, #12]
 80165ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165d2:	e033      	b.n	801663c <__swsetup_r+0x98>
 80165d4:	0758      	lsls	r0, r3, #29
 80165d6:	d512      	bpl.n	80165fe <__swsetup_r+0x5a>
 80165d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80165da:	b141      	cbz	r1, 80165ee <__swsetup_r+0x4a>
 80165dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165e0:	4299      	cmp	r1, r3
 80165e2:	d002      	beq.n	80165ea <__swsetup_r+0x46>
 80165e4:	4628      	mov	r0, r5
 80165e6:	f7ff fa61 	bl	8015aac <_free_r>
 80165ea:	2300      	movs	r3, #0
 80165ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80165ee:	89a3      	ldrh	r3, [r4, #12]
 80165f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80165f4:	81a3      	strh	r3, [r4, #12]
 80165f6:	2300      	movs	r3, #0
 80165f8:	6063      	str	r3, [r4, #4]
 80165fa:	6923      	ldr	r3, [r4, #16]
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	f043 0308 	orr.w	r3, r3, #8
 8016604:	81a3      	strh	r3, [r4, #12]
 8016606:	6923      	ldr	r3, [r4, #16]
 8016608:	b94b      	cbnz	r3, 801661e <__swsetup_r+0x7a>
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016614:	d003      	beq.n	801661e <__swsetup_r+0x7a>
 8016616:	4621      	mov	r1, r4
 8016618:	4628      	mov	r0, r5
 801661a:	f000 f883 	bl	8016724 <__smakebuf_r>
 801661e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016622:	f013 0201 	ands.w	r2, r3, #1
 8016626:	d00a      	beq.n	801663e <__swsetup_r+0x9a>
 8016628:	2200      	movs	r2, #0
 801662a:	60a2      	str	r2, [r4, #8]
 801662c:	6962      	ldr	r2, [r4, #20]
 801662e:	4252      	negs	r2, r2
 8016630:	61a2      	str	r2, [r4, #24]
 8016632:	6922      	ldr	r2, [r4, #16]
 8016634:	b942      	cbnz	r2, 8016648 <__swsetup_r+0xa4>
 8016636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801663a:	d1c5      	bne.n	80165c8 <__swsetup_r+0x24>
 801663c:	bd38      	pop	{r3, r4, r5, pc}
 801663e:	0799      	lsls	r1, r3, #30
 8016640:	bf58      	it	pl
 8016642:	6962      	ldrpl	r2, [r4, #20]
 8016644:	60a2      	str	r2, [r4, #8]
 8016646:	e7f4      	b.n	8016632 <__swsetup_r+0x8e>
 8016648:	2000      	movs	r0, #0
 801664a:	e7f7      	b.n	801663c <__swsetup_r+0x98>
 801664c:	200004e4 	.word	0x200004e4

08016650 <_raise_r>:
 8016650:	291f      	cmp	r1, #31
 8016652:	b538      	push	{r3, r4, r5, lr}
 8016654:	4605      	mov	r5, r0
 8016656:	460c      	mov	r4, r1
 8016658:	d904      	bls.n	8016664 <_raise_r+0x14>
 801665a:	2316      	movs	r3, #22
 801665c:	6003      	str	r3, [r0, #0]
 801665e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016662:	bd38      	pop	{r3, r4, r5, pc}
 8016664:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016666:	b112      	cbz	r2, 801666e <_raise_r+0x1e>
 8016668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801666c:	b94b      	cbnz	r3, 8016682 <_raise_r+0x32>
 801666e:	4628      	mov	r0, r5
 8016670:	f000 f830 	bl	80166d4 <_getpid_r>
 8016674:	4622      	mov	r2, r4
 8016676:	4601      	mov	r1, r0
 8016678:	4628      	mov	r0, r5
 801667a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801667e:	f000 b817 	b.w	80166b0 <_kill_r>
 8016682:	2b01      	cmp	r3, #1
 8016684:	d00a      	beq.n	801669c <_raise_r+0x4c>
 8016686:	1c59      	adds	r1, r3, #1
 8016688:	d103      	bne.n	8016692 <_raise_r+0x42>
 801668a:	2316      	movs	r3, #22
 801668c:	6003      	str	r3, [r0, #0]
 801668e:	2001      	movs	r0, #1
 8016690:	e7e7      	b.n	8016662 <_raise_r+0x12>
 8016692:	2100      	movs	r1, #0
 8016694:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016698:	4620      	mov	r0, r4
 801669a:	4798      	blx	r3
 801669c:	2000      	movs	r0, #0
 801669e:	e7e0      	b.n	8016662 <_raise_r+0x12>

080166a0 <raise>:
 80166a0:	4b02      	ldr	r3, [pc, #8]	@ (80166ac <raise+0xc>)
 80166a2:	4601      	mov	r1, r0
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	f7ff bfd3 	b.w	8016650 <_raise_r>
 80166aa:	bf00      	nop
 80166ac:	200004e4 	.word	0x200004e4

080166b0 <_kill_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4d07      	ldr	r5, [pc, #28]	@ (80166d0 <_kill_r+0x20>)
 80166b4:	2300      	movs	r3, #0
 80166b6:	4604      	mov	r4, r0
 80166b8:	4608      	mov	r0, r1
 80166ba:	4611      	mov	r1, r2
 80166bc:	602b      	str	r3, [r5, #0]
 80166be:	f7ec f965 	bl	800298c <_kill>
 80166c2:	1c43      	adds	r3, r0, #1
 80166c4:	d102      	bne.n	80166cc <_kill_r+0x1c>
 80166c6:	682b      	ldr	r3, [r5, #0]
 80166c8:	b103      	cbz	r3, 80166cc <_kill_r+0x1c>
 80166ca:	6023      	str	r3, [r4, #0]
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
 80166ce:	bf00      	nop
 80166d0:	2000e140 	.word	0x2000e140

080166d4 <_getpid_r>:
 80166d4:	f7ec b952 	b.w	800297c <_getpid>

080166d8 <__swhatbuf_r>:
 80166d8:	b570      	push	{r4, r5, r6, lr}
 80166da:	460c      	mov	r4, r1
 80166dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166e0:	2900      	cmp	r1, #0
 80166e2:	b096      	sub	sp, #88	@ 0x58
 80166e4:	4615      	mov	r5, r2
 80166e6:	461e      	mov	r6, r3
 80166e8:	da0d      	bge.n	8016706 <__swhatbuf_r+0x2e>
 80166ea:	89a3      	ldrh	r3, [r4, #12]
 80166ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80166f0:	f04f 0100 	mov.w	r1, #0
 80166f4:	bf14      	ite	ne
 80166f6:	2340      	movne	r3, #64	@ 0x40
 80166f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80166fc:	2000      	movs	r0, #0
 80166fe:	6031      	str	r1, [r6, #0]
 8016700:	602b      	str	r3, [r5, #0]
 8016702:	b016      	add	sp, #88	@ 0x58
 8016704:	bd70      	pop	{r4, r5, r6, pc}
 8016706:	466a      	mov	r2, sp
 8016708:	f000 f848 	bl	801679c <_fstat_r>
 801670c:	2800      	cmp	r0, #0
 801670e:	dbec      	blt.n	80166ea <__swhatbuf_r+0x12>
 8016710:	9901      	ldr	r1, [sp, #4]
 8016712:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016716:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801671a:	4259      	negs	r1, r3
 801671c:	4159      	adcs	r1, r3
 801671e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016722:	e7eb      	b.n	80166fc <__swhatbuf_r+0x24>

08016724 <__smakebuf_r>:
 8016724:	898b      	ldrh	r3, [r1, #12]
 8016726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016728:	079d      	lsls	r5, r3, #30
 801672a:	4606      	mov	r6, r0
 801672c:	460c      	mov	r4, r1
 801672e:	d507      	bpl.n	8016740 <__smakebuf_r+0x1c>
 8016730:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016734:	6023      	str	r3, [r4, #0]
 8016736:	6123      	str	r3, [r4, #16]
 8016738:	2301      	movs	r3, #1
 801673a:	6163      	str	r3, [r4, #20]
 801673c:	b003      	add	sp, #12
 801673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016740:	ab01      	add	r3, sp, #4
 8016742:	466a      	mov	r2, sp
 8016744:	f7ff ffc8 	bl	80166d8 <__swhatbuf_r>
 8016748:	9f00      	ldr	r7, [sp, #0]
 801674a:	4605      	mov	r5, r0
 801674c:	4639      	mov	r1, r7
 801674e:	4630      	mov	r0, r6
 8016750:	f7fe fd68 	bl	8015224 <_malloc_r>
 8016754:	b948      	cbnz	r0, 801676a <__smakebuf_r+0x46>
 8016756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801675a:	059a      	lsls	r2, r3, #22
 801675c:	d4ee      	bmi.n	801673c <__smakebuf_r+0x18>
 801675e:	f023 0303 	bic.w	r3, r3, #3
 8016762:	f043 0302 	orr.w	r3, r3, #2
 8016766:	81a3      	strh	r3, [r4, #12]
 8016768:	e7e2      	b.n	8016730 <__smakebuf_r+0xc>
 801676a:	89a3      	ldrh	r3, [r4, #12]
 801676c:	6020      	str	r0, [r4, #0]
 801676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016772:	81a3      	strh	r3, [r4, #12]
 8016774:	9b01      	ldr	r3, [sp, #4]
 8016776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801677a:	b15b      	cbz	r3, 8016794 <__smakebuf_r+0x70>
 801677c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016780:	4630      	mov	r0, r6
 8016782:	f000 f81d 	bl	80167c0 <_isatty_r>
 8016786:	b128      	cbz	r0, 8016794 <__smakebuf_r+0x70>
 8016788:	89a3      	ldrh	r3, [r4, #12]
 801678a:	f023 0303 	bic.w	r3, r3, #3
 801678e:	f043 0301 	orr.w	r3, r3, #1
 8016792:	81a3      	strh	r3, [r4, #12]
 8016794:	89a3      	ldrh	r3, [r4, #12]
 8016796:	431d      	orrs	r5, r3
 8016798:	81a5      	strh	r5, [r4, #12]
 801679a:	e7cf      	b.n	801673c <__smakebuf_r+0x18>

0801679c <_fstat_r>:
 801679c:	b538      	push	{r3, r4, r5, lr}
 801679e:	4d07      	ldr	r5, [pc, #28]	@ (80167bc <_fstat_r+0x20>)
 80167a0:	2300      	movs	r3, #0
 80167a2:	4604      	mov	r4, r0
 80167a4:	4608      	mov	r0, r1
 80167a6:	4611      	mov	r1, r2
 80167a8:	602b      	str	r3, [r5, #0]
 80167aa:	f7ec f94f 	bl	8002a4c <_fstat>
 80167ae:	1c43      	adds	r3, r0, #1
 80167b0:	d102      	bne.n	80167b8 <_fstat_r+0x1c>
 80167b2:	682b      	ldr	r3, [r5, #0]
 80167b4:	b103      	cbz	r3, 80167b8 <_fstat_r+0x1c>
 80167b6:	6023      	str	r3, [r4, #0]
 80167b8:	bd38      	pop	{r3, r4, r5, pc}
 80167ba:	bf00      	nop
 80167bc:	2000e140 	.word	0x2000e140

080167c0 <_isatty_r>:
 80167c0:	b538      	push	{r3, r4, r5, lr}
 80167c2:	4d06      	ldr	r5, [pc, #24]	@ (80167dc <_isatty_r+0x1c>)
 80167c4:	2300      	movs	r3, #0
 80167c6:	4604      	mov	r4, r0
 80167c8:	4608      	mov	r0, r1
 80167ca:	602b      	str	r3, [r5, #0]
 80167cc:	f7ec f94e 	bl	8002a6c <_isatty>
 80167d0:	1c43      	adds	r3, r0, #1
 80167d2:	d102      	bne.n	80167da <_isatty_r+0x1a>
 80167d4:	682b      	ldr	r3, [r5, #0]
 80167d6:	b103      	cbz	r3, 80167da <_isatty_r+0x1a>
 80167d8:	6023      	str	r3, [r4, #0]
 80167da:	bd38      	pop	{r3, r4, r5, pc}
 80167dc:	2000e140 	.word	0x2000e140

080167e0 <_init>:
 80167e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167e2:	bf00      	nop
 80167e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167e6:	bc08      	pop	{r3}
 80167e8:	469e      	mov	lr, r3
 80167ea:	4770      	bx	lr

080167ec <_fini>:
 80167ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ee:	bf00      	nop
 80167f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167f2:	bc08      	pop	{r3}
 80167f4:	469e      	mov	lr, r3
 80167f6:	4770      	bx	lr
