
custom_msgs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016238  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  080163d8  080163d8  000173d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fa0  08016fa0  00018114  2**0
                  CONTENTS
  4 .ARM          00000008  08016fa0  08016fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fa8  08016fa8  00018114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fa8  08016fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016fac  08016fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  08016fb0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc78  20000118  080170c4  00018118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd90  080170c4  00018d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b27d  00000000  00000000  00018144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404c  00000000  00000000  000333c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001185  00000000  00000000  00038ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008cb3  00000000  00000000  00039c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acf7  00000000  00000000  00042908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a8c  00000000  00000000  0005d5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  0010008b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eac  00000000  00000000  00100128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00106fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000118 	.word	0x20000118
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080163c0 	.word	0x080163c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	080163c0 	.word	0x080163c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_ldivmod>:
 8000bac:	b97b      	cbnz	r3, 8000bce <__aeabi_ldivmod+0x22>
 8000bae:	b972      	cbnz	r2, 8000bce <__aeabi_ldivmod+0x22>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bfbe      	ittt	lt
 8000bb4:	2000      	movlt	r0, #0
 8000bb6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bba:	e006      	blt.n	8000bca <__aeabi_ldivmod+0x1e>
 8000bbc:	bf08      	it	eq
 8000bbe:	2800      	cmpeq	r0, #0
 8000bc0:	bf1c      	itt	ne
 8000bc2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bca:	f000 b9b5 	b.w	8000f38 <__aeabi_idiv0>
 8000bce:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	db09      	blt.n	8000bee <__aeabi_ldivmod+0x42>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db1a      	blt.n	8000c14 <__aeabi_ldivmod+0x68>
 8000bde:	f000 f84d 	bl	8000c7c <__udivmoddi4>
 8000be2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bea:	b004      	add	sp, #16
 8000bec:	4770      	bx	lr
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db1b      	blt.n	8000c30 <__aeabi_ldivmod+0x84>
 8000bf8:	f000 f840 	bl	8000c7c <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4240      	negs	r0, r0
 8000c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0c:	4252      	negs	r2, r2
 8000c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c12:	4770      	bx	lr
 8000c14:	4252      	negs	r2, r2
 8000c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1a:	f000 f82f 	bl	8000c7c <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4240      	negs	r0, r0
 8000c2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f821 	bl	8000c7c <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4252      	negs	r2, r2
 8000c46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b96a 	b.w	8000f38 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	460c      	mov	r4, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14e      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c88:	4694      	mov	ip, r2
 8000c8a:	458c      	cmp	ip, r1
 8000c8c:	4686      	mov	lr, r0
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	d962      	bls.n	8000d5a <__udivmoddi4+0xde>
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f f68c 	uxth.w	r6, ip
 8000cb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb07 1114 	mls	r1, r7, r4, r1
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc2:	fb04 f106 	mul.w	r1, r4, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cd2:	f080 8112 	bcs.w	8000efa <__udivmoddi4+0x27e>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 810f 	bls.w	8000efa <__udivmoddi4+0x27e>
 8000cdc:	3c02      	subs	r4, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cea:	fb07 1110 	mls	r1, r7, r0, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb00 f606 	mul.w	r6, r0, r6
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x94>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d02:	f080 80fc 	bcs.w	8000efe <__udivmoddi4+0x282>
 8000d06:	429e      	cmp	r6, r3
 8000d08:	f240 80f9 	bls.w	8000efe <__udivmoddi4+0x282>
 8000d0c:	4463      	add	r3, ip
 8000d0e:	3802      	subs	r0, #2
 8000d10:	1b9b      	subs	r3, r3, r6
 8000d12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa6>
 8000d1a:	40d3      	lsrs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xba>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb4>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d146      	bne.n	8000dcc <__udivmoddi4+0x150>
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xcc>
 8000d42:	4290      	cmp	r0, r2
 8000d44:	f0c0 80f0 	bcc.w	8000f28 <__udivmoddi4+0x2ac>
 8000d48:	1a86      	subs	r6, r0, r2
 8000d4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d0e6      	beq.n	8000d22 <__udivmoddi4+0xa6>
 8000d54:	e9c5 6300 	strd	r6, r3, [r5]
 8000d58:	e7e3      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	f040 8090 	bne.w	8000e80 <__udivmoddi4+0x204>
 8000d60:	eba1 040c 	sub.w	r4, r1, ip
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb08 4416 	mls	r4, r8, r6, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb07 f006 	mul.w	r0, r7, r6
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x11c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x11a>
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f200 80cd 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d96:	4626      	mov	r6, r4
 8000d98:	1a1c      	subs	r4, r3, r0
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000da2:	fb08 4410 	mls	r4, r8, r0, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb00 f707 	mul.w	r7, r0, r7
 8000dae:	429f      	cmp	r7, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x148>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x146>
 8000dbc:	429f      	cmp	r7, r3
 8000dbe:	f200 80b0 	bhi.w	8000f22 <__udivmoddi4+0x2a6>
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	1bdb      	subs	r3, r3, r7
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0x9c>
 8000dcc:	f1c1 0620 	rsb	r6, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ddc:	fa04 f301 	lsl.w	r3, r4, r1
 8000de0:	ea43 030c 	orr.w	r3, r3, ip
 8000de4:	40f4      	lsrs	r4, r6
 8000de6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dea:	0c38      	lsrs	r0, r7, #16
 8000dec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df0:	fbb4 fef0 	udiv	lr, r4, r0
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e00:	fb0e f90c 	mul.w	r9, lr, ip
 8000e04:	45a1      	cmp	r9, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d90a      	bls.n	8000e22 <__udivmoddi4+0x1a6>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e12:	f080 8084 	bcs.w	8000f1e <__udivmoddi4+0x2a2>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f240 8081 	bls.w	8000f1e <__udivmoddi4+0x2a2>
 8000e1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	eba4 0409 	sub.w	r4, r4, r9
 8000e26:	fa1f f983 	uxth.w	r9, r3
 8000e2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x1d2>
 8000e3e:	193c      	adds	r4, r7, r4
 8000e40:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e44:	d267      	bcs.n	8000f16 <__udivmoddi4+0x29a>
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d965      	bls.n	8000f16 <__udivmoddi4+0x29a>
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e52:	fba0 9302 	umull	r9, r3, r0, r2
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	469c      	mov	ip, r3
 8000e60:	d351      	bcc.n	8000f06 <__udivmoddi4+0x28a>
 8000e62:	d04e      	beq.n	8000f02 <__udivmoddi4+0x286>
 8000e64:	b155      	cbz	r5, 8000e7c <__udivmoddi4+0x200>
 8000e66:	ebb8 030e 	subs.w	r3, r8, lr
 8000e6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431e      	orrs	r6, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e750      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000e80:	f1c2 0320 	rsb	r3, r2, #32
 8000e84:	fa20 f103 	lsr.w	r1, r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e90:	4094      	lsls	r4, r2
 8000e92:	430c      	orrs	r4, r1
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e9c:	fa1f f78c 	uxth.w	r7, ip
 8000ea0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea8:	0c23      	lsrs	r3, r4, #16
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb00 f107 	mul.w	r1, r0, r7
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x24c>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ebe:	d22c      	bcs.n	8000f1a <__udivmoddi4+0x29e>
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d92a      	bls.n	8000f1a <__udivmoddi4+0x29e>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb01 f307 	mul.w	r3, r1, r7
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x276>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee8:	d213      	bcs.n	8000f12 <__udivmoddi4+0x296>
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	d911      	bls.n	8000f12 <__udivmoddi4+0x296>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	1ae4      	subs	r4, r4, r3
 8000ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef8:	e739      	b.n	8000d6e <__udivmoddi4+0xf2>
 8000efa:	4604      	mov	r4, r0
 8000efc:	e6f0      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e706      	b.n	8000d10 <__udivmoddi4+0x94>
 8000f02:	45c8      	cmp	r8, r9
 8000f04:	d2ae      	bcs.n	8000e64 <__udivmoddi4+0x1e8>
 8000f06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0e:	3801      	subs	r0, #1
 8000f10:	e7a8      	b.n	8000e64 <__udivmoddi4+0x1e8>
 8000f12:	4631      	mov	r1, r6
 8000f14:	e7ed      	b.n	8000ef2 <__udivmoddi4+0x276>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e799      	b.n	8000e4e <__udivmoddi4+0x1d2>
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	e7d4      	b.n	8000ec8 <__udivmoddi4+0x24c>
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	e77f      	b.n	8000e22 <__udivmoddi4+0x1a6>
 8000f22:	4463      	add	r3, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e74d      	b.n	8000dc4 <__udivmoddi4+0x148>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e70f      	b.n	8000d50 <__udivmoddi4+0xd4>
 8000f30:	3e02      	subs	r6, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	e730      	b.n	8000d98 <__udivmoddi4+0x11c>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f48:	f007 f9f8 	bl	800833c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80010b8 <pvPortMallocMicroROS+0x17c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f54:	f000 f986 	bl	8001264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f58:	4b58      	ldr	r3, [pc, #352]	@ (80010bc <pvPortMallocMicroROS+0x180>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f040 8090 	bne.w	8001086 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d01e      	beq.n	8000faa <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d015      	beq.n	8000faa <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	3308      	adds	r3, #8
 8000f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f96:	f383 8811 	msr	BASEPRI, r3
 8000f9a:	f3bf 8f6f 	isb	sy
 8000f9e:	f3bf 8f4f 	dsb	sy
 8000fa2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	e7fd      	b.n	8000fa6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d06a      	beq.n	8001086 <pvPortMallocMicroROS+0x14a>
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <pvPortMallocMicroROS+0x184>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d865      	bhi.n	8001086 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000fba:	4b42      	ldr	r3, [pc, #264]	@ (80010c4 <pvPortMallocMicroROS+0x188>)
 8000fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000fbe:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <pvPortMallocMicroROS+0x188>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fc4:	e004      	b.n	8000fd0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d903      	bls.n	8000fe2 <pvPortMallocMicroROS+0xa6>
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f1      	bne.n	8000fc6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000fe2:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <pvPortMallocMicroROS+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d04c      	beq.n	8001086 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	4413      	add	r3, r2
 8000ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	2308      	movs	r3, #8
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	429a      	cmp	r2, r3
 800100c:	d920      	bls.n	8001050 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001024:	f383 8811 	msr	BASEPRI, r3
 8001028:	f3bf 8f6f 	isb	sy
 800102c:	f3bf 8f4f 	dsb	sy
 8001030:	613b      	str	r3, [r7, #16]
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800104a:	69b8      	ldr	r0, [r7, #24]
 800104c:	f000 f96c 	bl	8001328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <pvPortMallocMicroROS+0x184>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4a19      	ldr	r2, [pc, #100]	@ (80010c0 <pvPortMallocMicroROS+0x184>)
 800105c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <pvPortMallocMicroROS+0x184>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <pvPortMallocMicroROS+0x18c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d203      	bcs.n	8001072 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <pvPortMallocMicroROS+0x184>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <pvPortMallocMicroROS+0x18c>)
 8001070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <pvPortMallocMicroROS+0x180>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	431a      	orrs	r2, r3
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001086:	f007 f967 	bl	8008358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001098:	f383 8811 	msr	BASEPRI, r3
 800109c:	f3bf 8f6f 	isb	sy
 80010a0:	f3bf 8f4f 	dsb	sy
 80010a4:	60fb      	str	r3, [r7, #12]
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010ac:	69fb      	ldr	r3, [r7, #28]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3728      	adds	r7, #40	@ 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20003d3c 	.word	0x20003d3c
 80010bc:	20003d48 	.word	0x20003d48
 80010c0:	20003d40 	.word	0x20003d40
 80010c4:	20003d34 	.word	0x20003d34
 80010c8:	20003d44 	.word	0x20003d44

080010cc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d04a      	beq.n	8001174 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010de:	2308      	movs	r3, #8
 80010e0:	425b      	negs	r3, r3
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b22      	ldr	r3, [pc, #136]	@ (800117c <vPortFreeMicroROS+0xb0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <vPortFreeMicroROS+0x46>
	__asm volatile
 80010fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	f3bf 8f6f 	isb	sy
 8001106:	f3bf 8f4f 	dsb	sy
 800110a:	60fb      	str	r3, [r7, #12]
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	e7fd      	b.n	800110e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <vPortFreeMicroROS+0x66>
	__asm volatile
 800111a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800111e:	f383 8811 	msr	BASEPRI, r3
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	60bb      	str	r3, [r7, #8]
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <vPortFreeMicroROS+0xb0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d019      	beq.n	8001174 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d115      	bne.n	8001174 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001158:	f007 f8f0 	bl	800833c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <vPortFreeMicroROS+0xb4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <vPortFreeMicroROS+0xb4>)
 8001168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800116a:	6938      	ldr	r0, [r7, #16]
 800116c:	f000 f8dc 	bl	8001328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001170:	f007 f8f2 	bl	8008358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20003d48 	.word	0x20003d48
 8001180:	20003d40 	.word	0x20003d40

08001184 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001190:	2308      	movs	r3, #8
 8001192:	425b      	negs	r3, r3
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <getBlockSize+0x38>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

	return count;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20003d48 	.word	0x20003d48

080011c0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011ca:	f007 f8b7 	bl	800833c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff feb4 	bl	8000f3c <pvPortMallocMicroROS>
 80011d4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d017      	beq.n	800120c <pvPortReallocMicroROS+0x4c>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d014      	beq.n	800120c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffce 	bl	8001184 <getBlockSize>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2208      	movs	r2, #8
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d201      	bcs.n	80011fc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f013 ff9e 	bl	8015142 <memcpy>

		vPortFreeMicroROS(pv);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff60 	bl	80010cc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800120c:	f007 f8a4 	bl	8008358 <xTaskResumeAll>

	return newmem;
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001224:	f007 f88a 	bl	800833c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff fe82 	bl	8000f3c <pvPortMallocMicroROS>
 8001238:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800123e:	e004      	b.n	800124a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	613a      	str	r2, [r7, #16]
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	617a      	str	r2, [r7, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f5      	bne.n	8001240 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001254:	f007 f880 	bl	8008358 <xTaskResumeAll>
  	return mem;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800126a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800126e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001270:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <prvHeapInit+0xac>)
 8001272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3307      	adds	r3, #7
 8001282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f023 0307 	bic.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <prvHeapInit+0xac>)
 8001294:	4413      	add	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800129c:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <prvHeapInit+0xb0>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <prvHeapInit+0xb0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	4413      	add	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012b0:	2208      	movs	r2, #8
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 0307 	bic.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <prvHeapInit+0xb4>)
 80012c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <prvHeapInit+0xb4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <prvHeapInit+0xb4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	1ad2      	subs	r2, r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <prvHeapInit+0xb4>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <prvHeapInit+0xb8>)
 80012f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <prvHeapInit+0xbc>)
 80012fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <prvHeapInit+0xc0>)
 80012fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000134 	.word	0x20000134
 8001314:	20003d34 	.word	0x20003d34
 8001318:	20003d3c 	.word	0x20003d3c
 800131c:	20003d44 	.word	0x20003d44
 8001320:	20003d40 	.word	0x20003d40
 8001324:	20003d48 	.word	0x20003d48

08001328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <prvInsertBlockIntoFreeList+0xac>)
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e002      	b.n	800133c <prvInsertBlockIntoFreeList+0x14>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	d8f7      	bhi.n	8001336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d108      	bne.n	800136a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	441a      	add	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	441a      	add	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d118      	bne.n	80013b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <prvInsertBlockIntoFreeList+0xb0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00d      	beq.n	80013a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	441a      	add	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e008      	b.n	80013b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <prvInsertBlockIntoFreeList+0xb0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e003      	b.n	80013b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d002      	beq.n	80013c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20003d34 	.word	0x20003d34
 80013d8:	20003d3c 	.word	0x20003d3c

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f002 f9c2 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f832 	bl	800144c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f000 faf2 	bl	80019d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ec:	f000 fac8 	bl	8001980 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013f0:	f000 fa9c 	bl	800192c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013f4:	f000 f896 	bl	8001524 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013f8:	f000 f968 	bl	80016cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80013fc:	f000 f9ee 	bl	80017dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001400:	2100      	movs	r1, #0
 8001402:	480e      	ldr	r0, [pc, #56]	@ (800143c <main+0x60>)
 8001404:	f003 fe14 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001408:	2104      	movs	r1, #4
 800140a:	480c      	ldr	r0, [pc, #48]	@ (800143c <main+0x60>)
 800140c:	f003 fe10 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001410:	2108      	movs	r1, #8
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <main+0x60>)
 8001414:	f003 fe0c 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001418:	210c      	movs	r1, #12
 800141a:	4808      	ldr	r0, [pc, #32]	@ (800143c <main+0x60>)
 800141c:	f003 fe08 	bl	8005030 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001420:	f005 fe6e 	bl	8007100 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <main+0x64>)
 8001426:	2100      	movs	r1, #0
 8001428:	4806      	ldr	r0, [pc, #24]	@ (8001444 <main+0x68>)
 800142a:	f005 feb3 	bl	8007194 <osThreadNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <main+0x6c>)
 8001432:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001434:	f005 fe88 	bl	8007148 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <main+0x5c>
 800143c:	20003d4c 	.word	0x20003d4c
 8001440:	08016464 	.word	0x08016464
 8001444:	08001c6d 	.word	0x08001c6d
 8001448:	20003f2c 	.word	0x20003f2c

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f013 fda8 	bl	8014fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <SystemClock_Config+0xd0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a28      	ldr	r2, [pc, #160]	@ (800151c <SystemClock_Config+0xd0>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <SystemClock_Config+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <SystemClock_Config+0xd4>)
 800149a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SystemClock_Config+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c0:	2310      	movs	r3, #16
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ce:	2307      	movs	r3, #7
 80014d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f86a 	bl	80045b0 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014e2:	f000 fc9b 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ea:	2302      	movs	r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2102      	movs	r1, #2
 8001502:	4618      	mov	r0, r3
 8001504:	f003 facc 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800150e:	f000 fc85 	bl	8001e1c <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b096      	sub	sp, #88	@ 0x58
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2220      	movs	r2, #32
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f013 fd27 	bl	8014fb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001562:	4b58      	ldr	r3, [pc, #352]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001564:	4a58      	ldr	r2, [pc, #352]	@ (80016c8 <MX_TIM1_Init+0x1a4>)
 8001566:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001568:	4b56      	ldr	r3, [pc, #344]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800156a:	2206      	movs	r2, #6
 800156c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b55      	ldr	r3, [pc, #340]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001574:	4b53      	ldr	r3, [pc, #332]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001576:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800157a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001582:	4b50      	ldr	r3, [pc, #320]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b4e      	ldr	r3, [pc, #312]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800158e:	484d      	ldr	r0, [pc, #308]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001590:	f003 fca6 	bl	8004ee0 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800159a:	f000 fc3f 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015a8:	4619      	mov	r1, r3
 80015aa:	4846      	ldr	r0, [pc, #280]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80015ac:	f003 feb2 	bl	8005314 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015b6:	f000 fc31 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ba:	4842      	ldr	r0, [pc, #264]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80015bc:	f003 fcdf 	bl	8004f7e <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015c6:	f000 fc29 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015d6:	4619      	mov	r1, r3
 80015d8:	483a      	ldr	r0, [pc, #232]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80015da:	f004 fa3b 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015e4:	f000 fc1a 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	482d      	ldr	r0, [pc, #180]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800160e:	f003 fdbf 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001618:	f000 fc00 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	2204      	movs	r2, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4827      	ldr	r0, [pc, #156]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001626:	f003 fdb3 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001630:	f000 fbf4 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800163e:	f003 fda7 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001648:	f000 fbe8 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	220c      	movs	r2, #12
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001656:	f003 fd9b 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001660:	f000 fbdc 	bl	8001e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 8001688:	f004 fa52 	bl	8005b30 <HAL_TIMEx_ConfigBreakDeadTime>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001692:	f000 fbc3 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 800169a:	f003 fcc9 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800169e:	2104      	movs	r1, #4
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80016a2:	f003 fcc5 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016a6:	2108      	movs	r1, #8
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80016aa:	f003 fcc1 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016ae:	210c      	movs	r1, #12
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80016b2:	f003 fcbd 	bl	8005030 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <MX_TIM1_Init+0x1a0>)
 80016b8:	f000 fd92 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 80016bc:	bf00      	nop
 80016be:	3758      	adds	r7, #88	@ 0x58
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20003d4c 	.word	0x20003d4c
 80016c8:	40010000 	.word	0x40010000

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	@ 0x38
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001704:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001706:	2253      	movs	r2, #83	@ 0x53
 8001708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001712:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001724:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001726:	f003 fbdb 	bl	8004ee0 <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001730:	f000 fb74 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173e:	4619      	mov	r1, r3
 8001740:	4825      	ldr	r0, [pc, #148]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001742:	f003 fde7 	bl	8005314 <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800174c:	f000 fb66 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001750:	4821      	ldr	r0, [pc, #132]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001752:	f003 fc14 	bl	8004f7e <HAL_TIM_PWM_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800175c:	f000 fb5e 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	4619      	mov	r1, r3
 800176e:	481a      	ldr	r0, [pc, #104]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001770:	f004 f970 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800177a:	f000 fb4f 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177e:	2360      	movs	r3, #96	@ 0x60
 8001780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 8001796:	f003 fcfb 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017a0:	f000 fb3c 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2204      	movs	r2, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 80017ac:	f003 fcf0 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80017b6:	f000 fb31 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017ba:	2100      	movs	r1, #0
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 80017be:	f003 fc37 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017c2:	2104      	movs	r1, #4
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 80017c6:	f003 fc33 	bl	8005030 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017ca:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <MX_TIM2_Init+0x10c>)
 80017cc:	f000 fd08 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 80017d0:	bf00      	nop
 80017d2:	3738      	adds	r7, #56	@ 0x38
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20003d94 	.word	0x20003d94

080017dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	@ 0x38
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180c:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <MX_TIM3_Init+0x148>)
 800180e:	4a46      	ldr	r2, [pc, #280]	@ (8001928 <MX_TIM3_Init+0x14c>)
 8001810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 8001812:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001814:	2206      	movs	r2, #6
 8001816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b42      	ldr	r3, [pc, #264]	@ (8001924 <MX_TIM3_Init+0x148>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800181e:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b3f      	ldr	r3, [pc, #252]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <MX_TIM3_Init+0x148>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001832:	483c      	ldr	r0, [pc, #240]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001834:	f003 fb54 	bl	8004ee0 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800183e:	f000 faed 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184c:	4619      	mov	r1, r3
 800184e:	4835      	ldr	r0, [pc, #212]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001850:	f003 fd60 	bl	8005314 <HAL_TIM_ConfigClockSource>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800185a:	f000 fadf 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800185e:	4831      	ldr	r0, [pc, #196]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001860:	f003 fb8d 	bl	8004f7e <HAL_TIM_PWM_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800186a:	f000 fad7 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	4619      	mov	r1, r3
 800187c:	4829      	ldr	r0, [pc, #164]	@ (8001924 <MX_TIM3_Init+0x148>)
 800187e:	f004 f8e9 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001888:	f000 fac8 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188c:	2360      	movs	r3, #96	@ 0x60
 800188e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4820      	ldr	r0, [pc, #128]	@ (8001924 <MX_TIM3_Init+0x148>)
 80018a4:	f003 fc74 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018ae:	f000 fab5 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2204      	movs	r2, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	481a      	ldr	r0, [pc, #104]	@ (8001924 <MX_TIM3_Init+0x148>)
 80018ba:	f003 fc69 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018c4:	f000 faaa 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2208      	movs	r2, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	4815      	ldr	r0, [pc, #84]	@ (8001924 <MX_TIM3_Init+0x148>)
 80018d0:	f003 fc5e 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80018da:	f000 fa9f 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	220c      	movs	r2, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	@ (8001924 <MX_TIM3_Init+0x148>)
 80018e6:	f003 fc53 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80018f0:	f000 fa94 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018f4:	2100      	movs	r1, #0
 80018f6:	480b      	ldr	r0, [pc, #44]	@ (8001924 <MX_TIM3_Init+0x148>)
 80018f8:	f003 fb9a 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018fc:	2104      	movs	r1, #4
 80018fe:	4809      	ldr	r0, [pc, #36]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001900:	f003 fb96 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001904:	2108      	movs	r1, #8
 8001906:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001908:	f003 fb92 	bl	8005030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800190c:	210c      	movs	r1, #12
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001910:	f003 fb8e 	bl	8005030 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <MX_TIM3_Init+0x148>)
 8001916:	f000 fc63 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 800191a:	bf00      	nop
 800191c:	3738      	adds	r7, #56	@ 0x38
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20003ddc 	.word	0x20003ddc
 8001928:	40000400 	.word	0x40000400

0800192c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <MX_USART2_UART_Init+0x50>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001964:	f004 f936 	bl	8005bd4 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800196e:	f000 fa55 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20003e24 	.word	0x20003e24
 800197c:	40004400 	.word	0x40004400

08001980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_DMA_Init+0x4c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <MX_DMA_Init+0x4c>)
 8001990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <MX_DMA_Init+0x4c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2105      	movs	r1, #5
 80019a6:	2010      	movs	r0, #16
 80019a8:	f002 f82b 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019ac:	2010      	movs	r0, #16
 80019ae:	f002 f844 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2105      	movs	r1, #5
 80019b6:	2011      	movs	r0, #17
 80019b8:	f002 f823 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019bc:	2011      	movs	r0, #17
 80019be:	f002 f83c 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a25      	ldr	r2, [pc, #148]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <MX_GPIO_Init+0xd0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2120      	movs	r1, #32
 8001a5a:	4812      	ldr	r0, [pc, #72]	@ (8001aa4 <MX_GPIO_Init+0xd4>)
 8001a5c:	f002 fd8e 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <MX_GPIO_Init+0xd8>)
 8001a78:	f002 fbfc 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_GPIO_Init+0xd4>)
 8001a94:	f002 fbee 	bl	8004274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020800 	.word	0x40020800

08001aac <subscription_callback_encoder>:
int16_t rotation_speedR = 0;/*300 ile -300 arasında olsun*/
volatile uint32_t last_heartbeat_time = 0,heartbeat_time = 0;
bool connection_lost = false;

void subscription_callback_encoder(const void * msgin)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	const rover_msgs__msg__EncoderMsg * incoming_msg = (const rover_msgs__msg__EncoderMsg *)msgin;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]

	leftFrontWheel.currentSpeed = incoming_msg->m1 ;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <subscription_callback_encoder+0x50>)
 8001ac0:	805a      	strh	r2, [r3, #2]
	rightFrontWheel.currentSpeed = incoming_msg->m2;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <subscription_callback_encoder+0x54>)
 8001aca:	805a      	strh	r2, [r3, #2]
	leftBackWheel.currentSpeed = incoming_msg->m3;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <subscription_callback_encoder+0x58>)
 8001ad4:	805a      	strh	r2, [r3, #2]
	rightBackWheel.currentSpeed = incoming_msg->m4;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <subscription_callback_encoder+0x5c>)
 8001ade:	805a      	strh	r2, [r3, #2]
	if (leftFrontWheel.currentSpeed >0)
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <subscription_callback_encoder+0x50>)
 8001ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dd04      	ble.n	8001af4 <subscription_callback_encoder+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <subscription_callback_encoder+0x60>)
 8001af0:	f002 fd44 	bl	800457c <HAL_GPIO_WritePin>

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20003f64 	.word	0x20003f64
 8001b00:	20003f70 	.word	0x20003f70
 8001b04:	20003f7c 	.word	0x20003f7c
 8001b08:	20003f88 	.word	0x20003f88
 8001b0c:	40020000 	.word	0x40020000

08001b10 <subscription_callback_controller>:


void subscription_callback_controller(const void * msgin){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	6078      	str	r0, [r7, #4]

	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2120      	movs	r1, #32
 8001b20:	4846      	ldr	r0, [pc, #280]	@ (8001c3c <subscription_callback_controller+0x12c>)
 8001b22:	f002 fd2b 	bl	800457c <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_heartbeat_time = HAL_GetTick();
 8001b26:	f001 fe85 	bl	8003834 <HAL_GetTick>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a44      	ldr	r2, [pc, #272]	@ (8001c40 <subscription_callback_controller+0x130>)
 8001b2e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2120      	movs	r1, #32
 8001b34:	4841      	ldr	r0, [pc, #260]	@ (8001c3c <subscription_callback_controller+0x12c>)
 8001b36:	f002 fd21 	bl	800457c <HAL_GPIO_WritePin>
	rcjoystick.x = (int)incoming_msg->x;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b48:	4b3e      	ldr	r3, [pc, #248]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
	rcjoystick.y = (int)incoming_msg->y;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b5e:	edc3 7a01 	vstr	s15, [r3, #4]
	rcjoystick.throttle = (int)incoming_msg->throttle;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b34      	ldr	r3, [pc, #208]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b74:	811a      	strh	r2, [r3, #8]
	rcjoystick.camerax = (int)incoming_msg->camerax;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b7e:	735a      	strb	r2, [r3, #13]
	rcjoystick.cameray = (int)incoming_msg->cameray;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b88:	815a      	strh	r2, [r3, #10]
	rcjoystick.gear = incoming_msg->gear;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001b94:	741a      	strb	r2, [r3, #16]
	roverDirection.currentDirection = incoming_msg->yaw;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <subscription_callback_controller+0x138>)
 8001b9e:	805a      	strh	r2, [r3, #2]

	rcjoystick.imu_speed = (leftBackWheel.currentSpeed+leftFrontWheel.currentSpeed+rightBackWheel.currentSpeed+rightFrontWheel.currentSpeed)/4;
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <subscription_callback_controller+0x13c>)
 8001ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <subscription_callback_controller+0x140>)
 8001baa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a28      	ldr	r2, [pc, #160]	@ (8001c54 <subscription_callback_controller+0x144>)
 8001bb2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <subscription_callback_controller+0x148>)
 8001bba:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da00      	bge.n	8001bc6 <subscription_callback_controller+0xb6>
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	109b      	asrs	r3, r3, #2
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001bcc:	81da      	strh	r2, [r3, #14]



    // Rover'ı kontrol et
    controlDirection(rcjoystick.y, rcjoystick.x, &roverDirection, &rotation_speedL, &rotation_speedR, rcjoystick.gear);
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd8:	ee17 3a90 	vmov	r3, s15
 8001bdc:	b218      	sxth	r0, r3
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	b219      	sxth	r1, r3
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001bf0:	7c1b      	ldrb	r3, [r3, #16]
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <subscription_callback_controller+0x14c>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <subscription_callback_controller+0x150>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <subscription_callback_controller+0x138>)
 8001bfc:	f001 f870 	bl	8002ce0 <controlDirection>
    controlRover(&htim1, &htim3, rotation_speedL, rotation_speedR, rcjoystick.throttle, rcjoystick.imu_speed, rcjoystick.gear);
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <subscription_callback_controller+0x150>)
 8001c02:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <subscription_callback_controller+0x14c>)
 8001c08:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001c0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001c16:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001c1a:	490a      	ldr	r1, [pc, #40]	@ (8001c44 <subscription_callback_controller+0x134>)
 8001c1c:	7c09      	ldrb	r1, [r1, #16]
 8001c1e:	9102      	str	r1, [sp, #8]
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4623      	mov	r3, r4
 8001c26:	4602      	mov	r2, r0
 8001c28:	490e      	ldr	r1, [pc, #56]	@ (8001c64 <subscription_callback_controller+0x154>)
 8001c2a:	480f      	ldr	r0, [pc, #60]	@ (8001c68 <subscription_callback_controller+0x158>)
 8001c2c:	f001 f940 	bl	8002eb0 <controlRover>
    KameraKontrol();
 8001c30:	f000 fda6 	bl	8002780 <KameraKontrol>
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	20003f44 	.word	0x20003f44
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	20000020 	.word	0x20000020
 8001c4c:	20003f7c 	.word	0x20003f7c
 8001c50:	20003f64 	.word	0x20003f64
 8001c54:	20003f88 	.word	0x20003f88
 8001c58:	20003f70 	.word	0x20003f70
 8001c5c:	20003f42 	.word	0x20003f42
 8001c60:	20003f40 	.word	0x20003f40
 8001c64:	20003ddc 	.word	0x20003ddc
 8001c68:	20003d4c 	.word	0x20003d4c

08001c6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b0d0      	sub	sp, #320	@ 0x140
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c7a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <StartDefaultTask+0x154>)
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <StartDefaultTask+0x158>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <StartDefaultTask+0x15c>)
 8001c86:	4a51      	ldr	r2, [pc, #324]	@ (8001dcc <StartDefaultTask+0x160>)
 8001c88:	4951      	ldr	r1, [pc, #324]	@ (8001dd0 <StartDefaultTask+0x164>)
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f008 fca4 	bl	800a5d8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001c90:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001c94:	4618      	mov	r0, r3
 8001c96:	f008 fbf7 	bl	800a488 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <StartDefaultTask+0x168>)
 8001c9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <StartDefaultTask+0x16c>)
 8001ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ddc <StartDefaultTask+0x170>)
 8001ca8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <StartDefaultTask+0x174>)
 8001cae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	      rclc_support_t support;
	      rclc_executor_t executor;
	      rcl_allocator_t allocator;


	      allocator = rcl_get_default_allocator();
 8001cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cb6:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f008 fbf1 	bl	800a4a4 <rcutils_get_default_allocator>
 8001cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cc6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001cca:	461d      	mov	r5, r3
 8001ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd8:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f008 fb0c 	bl	800a2fc <rclc_support_init>


	      	    // create node
	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 8001ce4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8001de4 <StartDefaultTask+0x178>)
 8001cea:	493f      	ldr	r1, [pc, #252]	@ (8001de8 <StartDefaultTask+0x17c>)
 8001cec:	483f      	ldr	r0, [pc, #252]	@ (8001dec <StartDefaultTask+0x180>)
 8001cee:	f008 fb53 	bl	800a398 <rclc_node_init_default>
	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001cf2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001cf6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001cfa:	1d19      	adds	r1, r3, #4
 8001cfc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001d00:	4613      	mov	r3, r2
 8001d02:	2202      	movs	r2, #2
 8001d04:	f008 f89c 	bl	8009e40 <rclc_executor_init>


	      	    // create subscription
	      rclc_subscription_init_default(
 8001d08:	f008 fc7c 	bl	800a604 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <StartDefaultTask+0x184>)
 8001d10:	4936      	ldr	r1, [pc, #216]	@ (8001dec <StartDefaultTask+0x180>)
 8001d12:	4838      	ldr	r0, [pc, #224]	@ (8001df4 <StartDefaultTask+0x188>)
 8001d14:	f008 fb7c 	bl	800a410 <rclc_subscription_init_default>
	      	        &subscriber,
	      	        &nodesub,
	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	      	        "joystick_cmd");

	      rclc_subscription_init_default(
 8001d18:	f008 fc76 	bl	800a608 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <StartDefaultTask+0x18c>)
 8001d20:	4932      	ldr	r1, [pc, #200]	@ (8001dec <StartDefaultTask+0x180>)
 8001d22:	4836      	ldr	r0, [pc, #216]	@ (8001dfc <StartDefaultTask+0x190>)
 8001d24:	f008 fb74 	bl	800a410 <rclc_subscription_init_default>
	      	      	        &subscriber2,
	      	      	        &nodesub,
	      	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, EncoderMsg),
	      	      	        "encoder");

	      rclc_executor_add_subscription(
 8001d28:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001d2c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <StartDefaultTask+0x194>)
 8001d36:	4931      	ldr	r1, [pc, #196]	@ (8001dfc <StartDefaultTask+0x190>)
 8001d38:	f008 f8f6 	bl	8009f28 <rclc_executor_add_subscription>
	      	      	      &executor, &subscriber2, &encodermsg,
	      	      	      &subscription_callback_encoder, ON_NEW_DATA);



	      rclc_executor_add_subscription(
 8001d3c:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8001d40:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <StartDefaultTask+0x198>)
 8001d4a:	492a      	ldr	r1, [pc, #168]	@ (8001df4 <StartDefaultTask+0x188>)
 8001d4c:	f008 f8ec 	bl	8009f28 <rclc_executor_add_subscription>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 8001d50:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001d54:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	f008 fa97 	bl	800a290 <rclc_executor_spin_some>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 8001d62:	f001 fd67 	bl	8003834 <HAL_GetTick>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a27      	ldr	r2, [pc, #156]	@ (8001e08 <StartDefaultTask+0x19c>)
 8001d6a:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_heartbeat_time > 250) {
 8001d6c:	f001 fd62 	bl	8003834 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <StartDefaultTask+0x1a0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2bfa      	cmp	r3, #250	@ 0xfa
 8001d7a:	d903      	bls.n	8001d84 <StartDefaultTask+0x118>
		      connection_lost = true;
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <StartDefaultTask+0x1a4>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e002      	b.n	8001d8a <StartDefaultTask+0x11e>
		  }
		  else {
		      connection_lost = false;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <StartDefaultTask+0x1a4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <StartDefaultTask+0x1a4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0de      	beq.n	8001d50 <StartDefaultTask+0xe4>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <StartDefaultTask+0x1a8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <StartDefaultTask+0x1a8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8001da2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <StartDefaultTask+0x1a8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <StartDefaultTask+0x1a8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2120      	movs	r1, #32
 8001db6:	4818      	ldr	r0, [pc, #96]	@ (8001e18 <StartDefaultTask+0x1ac>)
 8001db8:	f002 fbe0 	bl	800457c <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 8001dbc:	e7c8      	b.n	8001d50 <StartDefaultTask+0xe4>
 8001dbe:	bf00      	nop
 8001dc0:	0800366d 	.word	0x0800366d
 8001dc4:	08003605 	.word	0x08003605
 8001dc8:	080035e5 	.word	0x080035e5
 8001dcc:	080035b9 	.word	0x080035b9
 8001dd0:	20003e24 	.word	0x20003e24
 8001dd4:	08001e25 	.word	0x08001e25
 8001dd8:	08001e69 	.word	0x08001e69
 8001ddc:	08001ea1 	.word	0x08001ea1
 8001de0:	08001f0d 	.word	0x08001f0d
 8001de4:	080163e4 	.word	0x080163e4
 8001de8:	080163e8 	.word	0x080163e8
 8001dec:	20003f30 	.word	0x20003f30
 8001df0:	080163f4 	.word	0x080163f4
 8001df4:	20003f38 	.word	0x20003f38
 8001df8:	08016404 	.word	0x08016404
 8001dfc:	20003f3c 	.word	0x20003f3c
 8001e00:	08001aad 	.word	0x08001aad
 8001e04:	08001b11 	.word	0x08001b11
 8001e08:	20003f48 	.word	0x20003f48
 8001e0c:	20003f44 	.word	0x20003f44
 8001e10:	20003f4c 	.word	0x20003f4c
 8001e14:	20003d4c 	.word	0x20003d4c
 8001e18:	40020000 	.word	0x40020000

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <Error_Handler+0x4>

08001e24 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <microros_allocate+0x3c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <microros_allocate+0x3c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <microros_allocate+0x40>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <microros_allocate+0x40>)
 8001e4c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff f874 	bl	8000f3c <pvPortMallocMicroROS>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20003f50 	.word	0x20003f50
 8001e64:	20003f54 	.word	0x20003f54

08001e68 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff f983 	bl	8001184 <getBlockSize>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a06      	ldr	r2, [pc, #24]	@ (8001e9c <microros_deallocate+0x34>)
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <microros_deallocate+0x34>)
 8001e8a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff f91d 	bl	80010cc <vPortFreeMicroROS>
  }
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20003f54 	.word	0x20003f54

08001ea0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <microros_reallocate+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <microros_reallocate+0x64>)
 8001eba:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <microros_reallocate+0x68>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <microros_reallocate+0x68>)
 8001eca:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ed2:	68b8      	ldr	r0, [r7, #8]
 8001ed4:	f7ff f832 	bl	8000f3c <pvPortMallocMicroROS>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	e00e      	b.n	8001efa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff f951 	bl	8001184 <getBlockSize>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <microros_reallocate+0x68>)
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <microros_reallocate+0x68>)
 8001eee:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff f964 	bl	80011c0 <pvPortReallocMicroROS>
 8001ef8:	4603      	mov	r3, r0
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20003f50 	.word	0x20003f50
 8001f08:	20003f54 	.word	0x20003f54

08001f0c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	4a0c      	ldr	r2, [pc, #48]	@ (8001f54 <microros_zero_allocate+0x48>)
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <microros_zero_allocate+0x48>)
 8001f2a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <microros_zero_allocate+0x4c>)
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <microros_zero_allocate+0x4c>)
 8001f3e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff f969 	bl	800121a <pvPortCallocMicroROS>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20003f50 	.word	0x20003f50
 8001f58:	20003f54 	.word	0x20003f54
 8001f5c:	00000000 	.word	0x00000000

08001f60 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f76:	a320      	add	r3, pc, #128	@ (adr r3, 8001ff8 <UTILS_NanosecondsToTimespec+0x98>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fe16 	bl	8000bac <__aeabi_ldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ff8 <UTILS_NanosecondsToTimespec+0x98>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fe0a 	bl	8000bac <__aeabi_ldivmod>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da20      	bge.n	8001fe6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <UTILS_NanosecondsToTimespec+0x90>)
 8001faa:	fb82 1203 	smull	r1, r2, r2, r3
 8001fae:	1712      	asrs	r2, r2, #28
 8001fb0:	17db      	asrs	r3, r3, #31
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	17c8      	asrs	r0, r1, #31
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4605      	mov	r5, r0
 8001fc6:	ebb2 0804 	subs.w	r8, r2, r4
 8001fca:	eb63 0905 	sbc.w	r9, r3, r5
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <UTILS_NanosecondsToTimespec+0x94>)
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
    }
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff0:	44b82fa1 	.word	0x44b82fa1
 8001ff4:	3b9aca00 	.word	0x3b9aca00
 8001ff8:	3b9aca00 	.word	0x3b9aca00
 8001ffc:	00000000 	.word	0x00000000

08002000 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b08e      	sub	sp, #56	@ 0x38
 8002006:	af00      	add	r7, sp, #0
 8002008:	6278      	str	r0, [r7, #36]	@ 0x24
 800200a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800200c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	4618      	mov	r0, r3
 8002028:	f006 fc12 	bl	8008850 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202e:	17da      	asrs	r2, r3, #31
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	61fa      	str	r2, [r7, #28]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	000b      	movs	r3, r1
 8002040:	2200      	movs	r2, #0
 8002042:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002048:	2200      	movs	r2, #0
 800204a:	461c      	mov	r4, r3
 800204c:	4615      	mov	r5, r2
 800204e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002052:	1911      	adds	r1, r2, r4
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	416b      	adcs	r3, r5
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800205e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	f04f 0400 	mov.w	r4, #0
 800206e:	f04f 0500 	mov.w	r5, #0
 8002072:	015d      	lsls	r5, r3, #5
 8002074:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	4622      	mov	r2, r4
 800207c:	462b      	mov	r3, r5
 800207e:	ebb2 0800 	subs.w	r8, r2, r0
 8002082:	eb63 0901 	sbc.w	r9, r3, r1
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002092:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002096:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800209a:	4690      	mov	r8, r2
 800209c:	4699      	mov	r9, r3
 800209e:	eb18 0a00 	adds.w	sl, r8, r0
 80020a2:	eb49 0b01 	adc.w	fp, r9, r1
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020ba:	ebb2 040a 	subs.w	r4, r2, sl
 80020be:	603c      	str	r4, [r7, #0]
 80020c0:	eb63 030b 	sbc.w	r3, r3, fp
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4623      	mov	r3, r4
 80020cc:	181b      	adds	r3, r3, r0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	462b      	mov	r3, r5
 80020d2:	eb41 0303 	adc.w	r3, r1, r3
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020de:	f7ff ff3f 	bl	8001f60 <UTILS_NanosecondsToTimespec>

    return 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	3738      	adds	r7, #56	@ 0x38
 80020e8:	46bd      	mov	sp, r7
 80020ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080020f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_MspInit+0x54>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <HAL_MspInit+0x54>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002104:	6453      	str	r3, [r2, #68]	@ 0x44
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_MspInit+0x54>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_MspInit+0x54>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_MspInit+0x54>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_MspInit+0x54>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	f06f 0001 	mvn.w	r0, #1
 8002136:	f001 fc64 	bl	8003a02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <HAL_TIM_Base_MspInit+0x8c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002176:	e026      	b.n	80021c6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
}
 800219e:	e012      	b.n	80021c6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <HAL_TIM_Base_MspInit+0x94>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <HAL_TIM_Base_MspInit+0x90>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40000400 	.word	0x40000400

080021e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a45      	ldr	r2, [pc, #276]	@ (8002314 <HAL_TIM_MspPostInit+0x134>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11f      	bne.n	8002242 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a43      	ldr	r2, [pc, #268]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b41      	ldr	r3, [pc, #260]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800221e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002230:	2301      	movs	r3, #1
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4838      	ldr	r0, [pc, #224]	@ (800231c <HAL_TIM_MspPostInit+0x13c>)
 800223c:	f002 f81a 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002240:	e064      	b.n	800230c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800224a:	d11e      	bne.n	800228a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	4a30      	ldr	r2, [pc, #192]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6313      	str	r3, [r2, #48]	@ 0x30
 800225c:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Camera_X_Pin|Camera_Y_Pin;
 8002268:	2303      	movs	r3, #3
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002278:	2301      	movs	r3, #1
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4826      	ldr	r0, [pc, #152]	@ (800231c <HAL_TIM_MspPostInit+0x13c>)
 8002284:	f001 fff6 	bl	8004274 <HAL_GPIO_Init>
}
 8002288:	e040      	b.n	800230c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_TIM_MspPostInit+0x140>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d13b      	bne.n	800230c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	4a17      	ldr	r2, [pc, #92]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_TIM_MspPostInit+0x138>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022cc:	23c0      	movs	r3, #192	@ 0xc0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022dc:	2302      	movs	r3, #2
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	480d      	ldr	r0, [pc, #52]	@ (800231c <HAL_TIM_MspPostInit+0x13c>)
 80022e8:	f001 ffc4 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022ec:	2303      	movs	r3, #3
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4807      	ldr	r0, [pc, #28]	@ (8002324 <HAL_TIM_MspPostInit+0x144>)
 8002308:	f001 ffb4 	bl	8004274 <HAL_GPIO_Init>
}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	@ 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010000 	.word	0x40010000
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	40000400 	.word	0x40000400
 8002324:	40020400 	.word	0x40020400

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a4d      	ldr	r2, [pc, #308]	@ (800247c <HAL_UART_MspInit+0x154>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 8093 	bne.w	8002472 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	4b4b      	ldr	r3, [pc, #300]	@ (8002480 <HAL_UART_MspInit+0x158>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	4a4a      	ldr	r2, [pc, #296]	@ (8002480 <HAL_UART_MspInit+0x158>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235a:	6413      	str	r3, [r2, #64]	@ 0x40
 800235c:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <HAL_UART_MspInit+0x158>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <HAL_UART_MspInit+0x158>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	4a43      	ldr	r2, [pc, #268]	@ (8002480 <HAL_UART_MspInit+0x158>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6313      	str	r3, [r2, #48]	@ 0x30
 8002378:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_UART_MspInit+0x158>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002384:	230c      	movs	r3, #12
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002394:	2307      	movs	r3, #7
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	4839      	ldr	r0, [pc, #228]	@ (8002484 <HAL_UART_MspInit+0x15c>)
 80023a0:	f001 ff68 	bl	8004274 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023a4:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023a6:	4a39      	ldr	r2, [pc, #228]	@ (800248c <HAL_UART_MspInit+0x164>)
 80023a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023aa:	4b37      	ldr	r3, [pc, #220]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023be:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023da:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023e8:	4827      	ldr	r0, [pc, #156]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023ea:	f001 fb41 	bl	8003a70 <HAL_DMA_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80023f4:	f7ff fd12 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a23      	ldr	r2, [pc, #140]	@ (8002488 <HAL_UART_MspInit+0x160>)
 80023fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023fe:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <HAL_UART_MspInit+0x160>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002404:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002406:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_UART_MspInit+0x16c>)
 8002408:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800240c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002410:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002412:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002414:	2240      	movs	r2, #64	@ 0x40
 8002416:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002420:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002424:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002426:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242c:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800243a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002446:	4812      	ldr	r0, [pc, #72]	@ (8002490 <HAL_UART_MspInit+0x168>)
 8002448:	f001 fb12 	bl	8003a70 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002452:	f7ff fce3 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800245a:	639a      	str	r2, [r3, #56]	@ 0x38
 800245c:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <HAL_UART_MspInit+0x168>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2105      	movs	r1, #5
 8002466:	2026      	movs	r0, #38	@ 0x26
 8002468:	f001 facb 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246c:	2026      	movs	r0, #38	@ 0x26
 800246e:	f001 fae4 	bl	8003a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	@ 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40004400 	.word	0x40004400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	20003e6c 	.word	0x20003e6c
 800248c:	40026088 	.word	0x40026088
 8002490:	20003ecc 	.word	0x20003ecc
 8002494:	400260a0 	.word	0x400260a0

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <NMI_Handler+0x4>

080024a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <MemManage_Handler+0x4>

080024b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <UsageFault_Handler+0x4>

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d2:	f001 f99b 	bl	800380c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80024d6:	f006 fb3f 	bl	8008b58 <xTaskGetSchedulerState>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80024e0:	f007 f93a 	bl	8009758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <DMA1_Stream5_IRQHandler+0x10>)
 80024ee:	f001 fc57 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20003e6c 	.word	0x20003e6c

080024fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <DMA1_Stream6_IRQHandler+0x10>)
 8002502:	f001 fc4d 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20003ecc 	.word	0x20003ecc

08002510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <USART2_IRQHandler+0x10>)
 8002516:	f003 fcc1 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20003e24 	.word	0x20003e24

08002524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_kill>:

int _kill(int pid, int sig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800253e:	f012 fdcb 	bl	80150d8 <__errno>
 8002542:	4603      	mov	r3, r0
 8002544:	2216      	movs	r2, #22
 8002546:	601a      	str	r2, [r3, #0]
  return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_exit>:

void _exit (int status)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800255c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffe7 	bl	8002534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002566:	bf00      	nop
 8002568:	e7fd      	b.n	8002566 <_exit+0x12>

0800256a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e00a      	b.n	8002592 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800257c:	f3af 8000 	nop.w
 8002580:	4601      	mov	r1, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf0      	blt.n	800257c <_read+0x12>
  }

  return len;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e009      	b.n	80025ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60ba      	str	r2, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf1      	blt.n	80025b6 <_write+0x12>
  }
  return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_close>:

int _close(int file)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002604:	605a      	str	r2, [r3, #4]
  return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_isatty>:

int _isatty(int file)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800264c:	4a14      	ldr	r2, [pc, #80]	@ (80026a0 <_sbrk+0x5c>)
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <_sbrk+0x60>)
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <_sbrk+0x64>)
 8002662:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <_sbrk+0x68>)
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d207      	bcs.n	8002684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002674:	f012 fd30 	bl	80150d8 <__errno>
 8002678:	4603      	mov	r3, r0
 800267a:	220c      	movs	r2, #12
 800267c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002682:	e009      	b.n	8002698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <_sbrk+0x64>)
 8002694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20018000 	.word	0x20018000
 80026a4:	00000400 	.word	0x00000400
 80026a8:	20003f5c 	.word	0x20003f5c
 80026ac:	2000dd90 	.word	0x2000dd90

080026b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <SystemInit+0x20>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <SystemInit+0x20>)
 80026bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <SetServoPosition>:
#define DEGREE_STEP 10
extern TIM_HandleTypeDef htim2;

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CAMERA KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
void SetServoPosition(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t* position, uint8_t step, uint8_t servoDirection, uint16_t camera) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	70fb      	strb	r3, [r7, #3]
    if (servoDirection > 0) {
 80026e2:	7e3b      	ldrb	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <SetServoPosition+0x30>
        *position = (*position + step <= DEGREE_MAX) ? *position + step : DEGREE_MAX;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	4413      	add	r3, r2
 80026f2:	f640 2228 	movw	r2, #2600	@ 0xa28
 80026f6:	4293      	cmp	r3, r2
 80026f8:	bfa8      	it	ge
 80026fa:	4613      	movge	r3, r2
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e013      	b.n	800272c <SetServoPosition+0x58>
    }
    	else if (servoDirection < 0) {
        *position = (*position - step >= DEGREE_MIN) ? *position - step : DEGREE_MIN;
    }
    	else if (servoDirection == 0) {
 8002704:	7e3b      	ldrb	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d110      	bne.n	800272c <SetServoPosition+0x58>
    	*position = (camera > DEGREE_MAX) ? DEGREE_MAX : (camera < DEGREE_MIN) ? DEGREE_MIN : camera;
 800270a:	8bbb      	ldrh	r3, [r7, #28]
 800270c:	f640 2228 	movw	r2, #2600	@ 0xa28
 8002710:	4293      	cmp	r3, r2
 8002712:	d807      	bhi.n	8002724 <SetServoPosition+0x50>
 8002714:	8bbb      	ldrh	r3, [r7, #28]
 8002716:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800271a:	bf38      	it	cc
 800271c:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 8002720:	b29a      	uxth	r2, r3
 8002722:	e001      	b.n	8002728 <SetServoPosition+0x54>
 8002724:	f640 2228 	movw	r2, #2600	@ 0xa28
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <SetServoPosition+0x6a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800273c:	e019      	b.n	8002772 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d106      	bne.n	8002752 <SetServoPosition+0x7e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8819      	ldrh	r1, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	460b      	mov	r3, r1
 800274e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002750:	e00f      	b.n	8002772 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d106      	bne.n	8002766 <SetServoPosition+0x92>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8819      	ldrh	r1, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002764:	e005      	b.n	8002772 <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	460b      	mov	r3, r1
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <KameraKontrol>:

void KameraKontrol()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af02      	add	r7, sp, #8
    static uint16_t degreey = 2200;
    static uint16_t degreex = 1500;

    degreex = (degreex > DEGREE_MAX) ? DEGREE_MAX : (degreex < DEGREE_MIN) ? DEGREE_MIN : degreex;
 8002786:	4b35      	ldr	r3, [pc, #212]	@ (800285c <KameraKontrol+0xdc>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	f640 2228 	movw	r2, #2600	@ 0xa28
 800278e:	4293      	cmp	r3, r2
 8002790:	d808      	bhi.n	80027a4 <KameraKontrol+0x24>
 8002792:	4b32      	ldr	r3, [pc, #200]	@ (800285c <KameraKontrol+0xdc>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800279a:	bf38      	it	cc
 800279c:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	e001      	b.n	80027a8 <KameraKontrol+0x28>
 80027a4:	f640 2328 	movw	r3, #2600	@ 0xa28
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <KameraKontrol+0xdc>)
 80027aa:	8013      	strh	r3, [r2, #0]
    degreey = (degreey > DEGREE_MAX) ? DEGREE_MAX : (degreey < DEGREE_MIN) ? DEGREE_MIN : degreey;
 80027ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <KameraKontrol+0xe0>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	f640 2228 	movw	r2, #2600	@ 0xa28
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d808      	bhi.n	80027ca <KameraKontrol+0x4a>
 80027b8:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <KameraKontrol+0xe0>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80027c0:	bf38      	it	cc
 80027c2:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	e001      	b.n	80027ce <KameraKontrol+0x4e>
 80027ca:	f640 2328 	movw	r3, #2600	@ 0xa28
 80027ce:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <KameraKontrol+0xe0>)
 80027d0:	8013      	strh	r3, [r2, #0]



    		SetServoPosition(&htim2, TIM_CHANNEL_2, &degreey, DEGREE_STEP, 0, rcjoystick.cameray);
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <KameraKontrol+0xe4>)
 80027d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2300      	movs	r3, #0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	230a      	movs	r3, #10
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <KameraKontrol+0xe0>)
 80027e4:	2104      	movs	r1, #4
 80027e6:	4820      	ldr	r0, [pc, #128]	@ (8002868 <KameraKontrol+0xe8>)
 80027e8:	f7ff ff74 	bl	80026d4 <SetServoPosition>


    switch (rcjoystick.camerax)
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <KameraKontrol+0xe4>)
 80027ee:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d011      	beq.n	800281a <KameraKontrol+0x9a>
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	dc2b      	bgt.n	8002852 <KameraKontrol+0xd2>
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027fe:	d01a      	beq.n	8002836 <KameraKontrol+0xb6>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d126      	bne.n	8002852 <KameraKontrol+0xd2>
    {
    	case 0: // Dur
    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, degreex);
 8002804:	4b15      	ldr	r3, [pc, #84]	@ (800285c <KameraKontrol+0xdc>)
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	4b17      	ldr	r3, [pc, #92]	@ (8002868 <KameraKontrol+0xe8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800280e:	2201      	movs	r2, #1
 8002810:	2120      	movs	r1, #32
 8002812:	4816      	ldr	r0, [pc, #88]	@ (800286c <KameraKontrol+0xec>)
 8002814:	f001 feb2 	bl	800457c <HAL_GPIO_WritePin>
    		break;
 8002818:	e01c      	b.n	8002854 <KameraKontrol+0xd4>

        case 1: // Sağa
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, 1, rcjoystick.camerax);
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <KameraKontrol+0xe4>)
 800281c:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8002820:	b29b      	uxth	r3, r3
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2301      	movs	r3, #1
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	230a      	movs	r3, #10
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <KameraKontrol+0xdc>)
 800282c:	2100      	movs	r1, #0
 800282e:	480e      	ldr	r0, [pc, #56]	@ (8002868 <KameraKontrol+0xe8>)
 8002830:	f7ff ff50 	bl	80026d4 <SetServoPosition>
            break;
 8002834:	e00e      	b.n	8002854 <KameraKontrol+0xd4>

        case -1: // Sola
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, -1, rcjoystick.camerax);
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <KameraKontrol+0xe4>)
 8002838:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800283c:	b29b      	uxth	r3, r3
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	23ff      	movs	r3, #255	@ 0xff
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	230a      	movs	r3, #10
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <KameraKontrol+0xdc>)
 8002848:	2100      	movs	r1, #0
 800284a:	4807      	ldr	r0, [pc, #28]	@ (8002868 <KameraKontrol+0xe8>)
 800284c:	f7ff ff42 	bl	80026d4 <SetServoPosition>
            break;
 8002850:	e000      	b.n	8002854 <KameraKontrol+0xd4>

        default:
            // Geçersiz joystick z değeri
            break;
 8002852:	bf00      	nop
    }
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	2000000a 	.word	0x2000000a
 8002864:	2000000c 	.word	0x2000000c
 8002868:	20003d94 	.word	0x20003d94
 800286c:	40020000 	.word	0x40020000

08002870 <speedToPWM>:


//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< MOTOR KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
/* --- Hız-PWM Uyumluluğu --- */
int speedToPWM(uint16_t speed, int16_t max_speed) {
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	460a      	mov	r2, r1
 800287a:	80fb      	strh	r3, [r7, #6]
 800287c:	4613      	mov	r3, r2
 800287e:	80bb      	strh	r3, [r7, #4]
    return (uint16_t)((speed / max_speed) * MAX_SPEED_PWM);
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002886:	fb92 f3f3 	sdiv	r3, r2, r3
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	0152      	lsls	r2, r2, #5
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	b29b      	uxth	r3, r3
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <setPWM>:

/* --- PWM Ayarı --- */
void setPWM(TIM_HandleTypeDef *htim, uint32_t channel, int16_t pwmvalue, int16_t imu_speed) {
 80028a6:	b5b0      	push	{r4, r5, r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	4611      	mov	r1, r2
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	80fb      	strh	r3, [r7, #6]
 80028b8:	4613      	mov	r3, r2
 80028ba:	80bb      	strh	r3, [r7, #4]

	pwmvalue=fabs(pwmvalue);
 80028bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe47 	bl	8000554 <__aeabi_i2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4614      	mov	r4, r2
 80028cc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fe f942 	bl	8000b5c <__aeabi_d2iz>
 80028d8:	4603      	mov	r3, r0
 80028da:	80fb      	strh	r3, [r7, #6]

	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 80028dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db25      	blt.n	8002930 <setPWM+0x8a>
 80028e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ec:	dc20      	bgt.n	8002930 <setPWM+0x8a>
        __HAL_TIM_SET_COMPARE(htim, channel, pwmvalue);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <setPWM+0x5a>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028fe:	e05e      	b.n	80029be <setPWM+0x118>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d105      	bne.n	8002912 <setPWM+0x6c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002910:	e055      	b.n	80029be <setPWM+0x118>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d105      	bne.n	8002924 <setPWM+0x7e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002920:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002922:	e04c      	b.n	80029be <setPWM+0x118>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292c:	6413      	str	r3, [r2, #64]	@ 0x40
 800292e:	e046      	b.n	80029be <setPWM+0x118>
    }

    else if(pwmvalue < 0 ) {
 8002930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	da1c      	bge.n	8002972 <setPWM+0xcc>
        __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d104      	bne.n	8002948 <setPWM+0xa2>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 8002946:	e03a      	b.n	80029be <setPWM+0x118>
        __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d104      	bne.n	8002958 <setPWM+0xb2>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	6393      	str	r3, [r2, #56]	@ 0x38
 8002956:	e032      	b.n	80029be <setPWM+0x118>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b08      	cmp	r3, #8
 800295c:	d104      	bne.n	8002968 <setPWM+0xc2>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2300      	movs	r3, #0
 8002964:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002966:	e02a      	b.n	80029be <setPWM+0x118>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002970:	e025      	b.n	80029be <setPWM+0x118>
    else if(pwmvalue > 1000 ) {
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800297a:	dd20      	ble.n	80029be <setPWM+0x118>
        __HAL_TIM_SET_COMPARE(htim, channel, 1000);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <setPWM+0xe8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800298a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800298c:	e017      	b.n	80029be <setPWM+0x118>
        __HAL_TIM_SET_COMPARE(htim, channel, 1000);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d105      	bne.n	80029a0 <setPWM+0xfa>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800299e:	e00e      	b.n	80029be <setPWM+0x118>
        __HAL_TIM_SET_COMPARE(htim, channel, 1000);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d105      	bne.n	80029b2 <setPWM+0x10c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80029b0:	e005      	b.n	80029be <setPWM+0x118>
        __HAL_TIM_SET_COMPARE(htim, channel, 1000);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80029bc:	e7ff      	b.n	80029be <setPWM+0x118>
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029c8 <calculatePID>:

/* --- PID Hesaplama --- */
int16_t calculatePID(int *integral, int16_t *previousError, int16_t ramped, int16_t current) {
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	460b      	mov	r3, r1
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	4613      	mov	r3, r2
 80029dc:	80bb      	strh	r3, [r7, #4]

	if (*integral > integralLimit) * integral = integralLimit;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ea:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002ac8 <calculatePID+0x100>
 80029ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	dd03      	ble.n	8002a00 <calculatePID+0x38>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80029fe:	601a      	str	r2, [r3, #0]
	if (*integral < -integralLimit) *integral = -integralLimit;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002acc <calculatePID+0x104>
 8002a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	d502      	bpl.n	8002a20 <calculatePID+0x58>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad0 <calculatePID+0x108>)
 8002a1e:	601a      	str	r2, [r3, #0]


	int16_t error = ramped - current;
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	82bb      	strh	r3, [r7, #20]
    *integral += error;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a32:	441a      	add	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	601a      	str	r2, [r3, #0]
    int16_t derivative = error - *previousError;
 8002a38:	8aba      	ldrh	r2, [r7, #20]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	827b      	strh	r3, [r7, #18]
    *previousError = error;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	8aba      	ldrh	r2, [r7, #20]
 8002a4c:	801a      	strh	r2, [r3, #0]

    int16_t output = KP * error + KI * *integral + KD * derivative;
 8002a4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6e:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002ad4 <calculatePID+0x10c>
 8002a72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002ad8 <calculatePID+0x110>
 8002a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a96:	ee17 3a90 	vmov	r3, s15
 8002a9a:	82fb      	strh	r3, [r7, #22]

    if (output > MAX_SPEED_PWM) output = MAX_SPEED_PWM;
 8002a9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aa4:	dd02      	ble.n	8002aac <calculatePID+0xe4>
 8002aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aaa:	82fb      	strh	r3, [r7, #22]
    if (output < MIN_SPEED_PWM) output = MIN_SPEED_PWM;
 8002aac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da01      	bge.n	8002ab8 <calculatePID+0xf0>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	82fb      	strh	r3, [r7, #22]

    return output;
 8002ab8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	461c4000 	.word	0x461c4000
 8002acc:	c61c4000 	.word	0xc61c4000
 8002ad0:	ffffd8f0 	.word	0xffffd8f0
 8002ad4:	3dcccccd 	.word	0x3dcccccd
 8002ad8:	3d4ccccd 	.word	0x3d4ccccd

08002adc <applyRamp>:

/* --- Rampalı Hız Kontrolü --- */
int16_t applyRamp(uint16_t current, uint16_t target ,uint8_t RAMP_RATE) {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	80bb      	strh	r3, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70fb      	strb	r3, [r7, #3]
    if (fabsf(target - current) > RAMP_RATE) {
 8002aee:	88ba      	ldrh	r2, [r7, #4]
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afc:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	dd11      	ble.n	8002b38 <applyRamp+0x5c>
        if (target > current) {
 8002b14:	88ba      	ldrh	r2, [r7, #4]
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d906      	bls.n	8002b2a <applyRamp+0x4e>
            return current + RAMP_RATE;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	4413      	add	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	e008      	b.n	8002b3c <applyRamp+0x60>
        } else {
            return current - RAMP_RATE;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	e001      	b.n	8002b3c <applyRamp+0x60>
        }
    }
    return target;
 8002b38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <limitSpeedToPWM>:

/* --- Hız Sınırlandırma --- */
int16_t limitSpeedToPWM(int16_t speed, GroundType groundType, int16_t max_speed) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
 8002b52:	460b      	mov	r3, r1
 8002b54:	717b      	strb	r3, [r7, #5]
 8002b56:	4613      	mov	r3, r2
 8002b58:	807b      	strh	r3, [r7, #2]
	if (speed > max_speed) {speed = max_speed;}/*rgb yak*/
 8002b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dd01      	ble.n	8002b6a <limitSpeedToPWM+0x22>
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	80fb      	strh	r3, [r7, #6]
	if (speed < MIN_SPEED_D) {speed = MIN_SPEED_D;}/*rgb yak*/
 8002b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b6e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002b72:	da02      	bge.n	8002b7a <limitSpeedToPWM+0x32>
 8002b74:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8002b78:	80fb      	strh	r3, [r7, #6]


	switch (groundType) {
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d002      	beq.n	8002b86 <limitSpeedToPWM+0x3e>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d015      	beq.n	8002bb0 <limitSpeedToPWM+0x68>
 8002b84:	e029      	b.n	8002bda <limitSpeedToPWM+0x92>
        case GROUND_SLIPPERY:
            return speedToPWM(speed, max_speed)*0.5f; // Kaygan zemin: %50 hız
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe6e 	bl	8002870 <speedToPWM>
 8002b94:	ee07 0a90 	vmov	s15, r0
 8002b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba8:	ee17 3a90 	vmov	r3, s15
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	e01d      	b.n	8002bec <limitSpeedToPWM+0xa4>
        case GROUND_ROUGH:
            return speedToPWM(speed, max_speed)*0.8f; // Engebeli zemin: %80 hız
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe59 	bl	8002870 <speedToPWM>
 8002bbe:	ee07 0a90 	vmov	s15, r0
 8002bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002bf4 <limitSpeedToPWM+0xac>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd2:	ee17 3a90 	vmov	r3, s15
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	e008      	b.n	8002bec <limitSpeedToPWM+0xa4>
        default:
            return speedToPWM(speed, max_speed);        // Normal zemin: Tam hız
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fe44 	bl	8002870 <speedToPWM>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b21b      	sxth	r3, r3
		}
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	3f4ccccd 	.word	0x3f4ccccd

08002bf8 <applySlipControl>:

/* --- Patinaj Kontrolü --- */
void applySlipControl(Wheel *wheel, int16_t referenceSpeed) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
    if (wheel->currentSpeed > referenceSpeed * 1.1f || wheel->currentSpeed < referenceSpeed * 0.9f  ) //%10 sapma
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002c70 <applySlipControl+0x78>
 8002c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dc16      	bgt.n	8002c5e <applySlipControl+0x66>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002c74 <applySlipControl+0x7c>
 8002c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d400      	bmi.n	8002c5e <applySlipControl+0x66>
    {
        wheel->targetSpeed = referenceSpeed; // Hedef hızı ayarla
    }
}
 8002c5c:	e002      	b.n	8002c64 <applySlipControl+0x6c>
        wheel->targetSpeed = referenceSpeed; // Hedef hızı ayarla
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	887a      	ldrh	r2, [r7, #2]
 8002c62:	801a      	strh	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	3f8ccccd 	.word	0x3f8ccccd
 8002c74:	3f666666 	.word	0x3f666666

08002c78 <controlWheel>:

/* --- Tekerlek Kontrolü --- */
void controlWheel(TIM_HandleTypeDef *htim, uint32_t channel, Wheel *wheel, uint8_t Ramp_Rate, int16_t imu_speed) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	70fb      	strb	r3, [r7, #3]
    wheel->rampedSpeed = applyRamp(wheel->currentSpeed, wheel->targetSpeed, Ramp_Rate);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c8c:	b298      	uxth	r0, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f7ff ff1f 	bl	8002adc <applyRamp>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	809a      	strh	r2, [r3, #4]
    int16_t pwmValue = calculatePID(&wheel->integralSpeed, &wheel->previousErrorSpeed, wheel->rampedSpeed, wheel->currentSpeed);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 0008 	add.w	r0, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	1d99      	adds	r1, r3, #6
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cbc:	f7ff fe84 	bl	80029c8 <calculatePID>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	82fb      	strh	r3, [r7, #22]
    setPWM(htim, channel, pwmValue, imu_speed);
 8002cc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002cc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fde9 	bl	80028a6 <setPWM>

}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	0000      	movs	r0, r0
	...

08002ce0 <controlDirection>:

/* --- Yon Kontrolü --- */
void controlDirection(int16_t Y, int16_t X, Direction *direction, int16_t *rotation_speedL, int16_t *rotation_speedR, uint8_t Gear){
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4603      	mov	r3, r0
 8002cec:	81fb      	strh	r3, [r7, #14]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	81bb      	strh	r3, [r7, #12]

	direction->targetDirection = atan2(Y,X) * (180 / M_PI) + 180;
 8002cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc2c 	bl	8000554 <__aeabi_i2d>
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc25 	bl	8000554 <__aeabi_i2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	ec43 2b11 	vmov	d1, r2, r3
 8002d12:	ec45 4b10 	vmov	d0, r4, r5
 8002d16:	f013 f8e7 	bl	8015ee8 <atan2>
 8002d1a:	ec51 0b10 	vmov	r0, r1, d0
 8002d1e:	a362      	add	r3, pc, #392	@ (adr r3, 8002ea8 <controlDirection+0x1c8>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc80 	bl	8000628 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <controlDirection+0x1b8>)
 8002d36:	f7fd fac1 	bl	80002bc <__adddf3>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff0b 	bl	8000b5c <__aeabi_d2iz>
 8002d46:	4603      	mov	r3, r0
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	801a      	strh	r2, [r3, #0]

    int16_t error = 	direction->targetDirection - direction->currentDirection;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	82fb      	strh	r3, [r7, #22]
    while (error > 180) error -= 360;
 8002d64:	e004      	b.n	8002d70 <controlDirection+0x90>
 8002d66:	8afb      	ldrh	r3, [r7, #22]
 8002d68:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	82fb      	strh	r3, [r7, #22]
 8002d70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d74:	2bb4      	cmp	r3, #180	@ 0xb4
 8002d76:	dcf6      	bgt.n	8002d66 <controlDirection+0x86>
    while (error < -180) error += 360;
 8002d78:	e004      	b.n	8002d84 <controlDirection+0xa4>
 8002d7a:	8afb      	ldrh	r3, [r7, #22]
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	82fb      	strh	r3, [r7, #22]
 8002d84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d88:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8002d8c:	dbf5      	blt.n	8002d7a <controlDirection+0x9a>

    direction->integralDirection += error;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d96:	441a      	add	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
    int16_t derivative = (error - direction->previousErrorDirection);
 8002d9c:	8afa      	ldrh	r2, [r7, #22]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	827b      	strh	r3, [r7, #18]
    direction->previousErrorDirection = error;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	8afa      	ldrh	r2, [r7, #22]
 8002db0:	80da      	strh	r2, [r3, #6]

    int16_t output = Direction_KP * error + Direction_KI * direction->integralDirection + Direction_KD * derivative;
 8002db2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbe:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002e9c <controlDirection+0x1bc>
 8002dc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002ea0 <controlDirection+0x1c0>
 8002dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dea:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002ea4 <controlDirection+0x1c4>
 8002dee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	82bb      	strh	r3, [r7, #20]


    if (output > MAX_DIRECTION_SPEED) output = MAX_DIRECTION_SPEED;
 8002e00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e04:	2b1e      	cmp	r3, #30
 8002e06:	dd01      	ble.n	8002e0c <controlDirection+0x12c>
 8002e08:	231e      	movs	r3, #30
 8002e0a:	82bb      	strh	r3, [r7, #20]
    if (output < MIN_DIRECTION_SPEED) output = MIN_DIRECTION_SPEED;
 8002e0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e10:	f113 0f1e 	cmn.w	r3, #30
 8002e14:	da02      	bge.n	8002e1c <controlDirection+0x13c>
 8002e16:	f64f 73e2 	movw	r3, #65506	@ 0xffe2
 8002e1a:	82bb      	strh	r3, [r7, #20]
switch(Gear){
 8002e1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e20:	3b02      	subs	r3, #2
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d834      	bhi.n	8002e90 <controlDirection+0x1b0>
 8002e26:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <controlDirection+0x14c>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e69 	.word	0x08002e69
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e7d 	.word	0x08002e7d
 8002e38:	08002e91 	.word	0x08002e91
 8002e3c:	08002e55 	.word	0x08002e55

	case 3://D
		*rotation_speedL=+output;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8aba      	ldrh	r2, [r7, #20]
 8002e44:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=-output;
 8002e46:	8abb      	ldrh	r3, [r7, #20]
 8002e48:	425b      	negs	r3, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	801a      	strh	r2, [r3, #0]
		break;
 8002e52:	e01d      	b.n	8002e90 <controlDirection+0x1b0>
	case 6://T
		*rotation_speedL=+output;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8aba      	ldrh	r2, [r7, #20]
 8002e58:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=-output;
 8002e5a:	8abb      	ldrh	r3, [r7, #20]
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	801a      	strh	r2, [r3, #0]
		break;
 8002e66:	e013      	b.n	8002e90 <controlDirection+0x1b0>
	case 2://R
		*rotation_speedL=-output;
 8002e68:	8abb      	ldrh	r3, [r7, #20]
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=+output;
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	8aba      	ldrh	r2, [r7, #20]
 8002e78:	801a      	strh	r2, [r3, #0]
		break;
 8002e7a:	e009      	b.n	8002e90 <controlDirection+0x1b0>
	case 4://S
		*rotation_speedL=+output;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8aba      	ldrh	r2, [r7, #20]
 8002e80:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=-output;
 8002e82:	8abb      	ldrh	r3, [r7, #20]
 8002e84:	425b      	negs	r3, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	801a      	strh	r2, [r3, #0]
		break;
 8002e8e:	bf00      	nop
	}


}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}
 8002e98:	40668000 	.word	0x40668000
 8002e9c:	3ecccccd 	.word	0x3ecccccd
 8002ea0:	3dcccccd 	.word	0x3dcccccd
 8002ea4:	3cf5c28f 	.word	0x3cf5c28f
 8002ea8:	1a63c1f8 	.word	0x1a63c1f8
 8002eac:	404ca5dc 	.word	0x404ca5dc

08002eb0 <controlRover>:


/* --- Rover Kontrol Fonksiyonu --- */
void controlRover(TIM_HandleTypeDef *htim1,TIM_HandleTypeDef *htim3 , int16_t rotation_speedL, int16_t rotation_speedR, uint16_t throttle, int16_t imu_speed, uint8_t Gear) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	80fb      	strh	r3, [r7, #6]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80bb      	strh	r3, [r7, #4]

	switch (Gear)
 8002ec6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	f200 836f 	bhi.w	80035b0 <controlRover+0x700>
 8002ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <controlRover+0x28>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f63 	.word	0x08002f63
 8002edc:	08003107 	.word	0x08003107
 8002ee0:	08002fd5 	.word	0x08002fd5
 8002ee4:	0800324d 	.word	0x0800324d
 8002ee8:	08002ef1 	.word	0x08002ef1
 8002eec:	0800337f 	.word	0x0800337f
	{
        case 5://P

        	setPWM(htim1, TIM_CHANNEL_1, 0, imu_speed);
 8002ef0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fcd4 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_2, 0, imu_speed);
 8002efe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2104      	movs	r1, #4
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fccd 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_3, 0, imu_speed);
 8002f0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2108      	movs	r1, #8
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fcc6 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_4, 0, imu_speed);
 8002f1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	210c      	movs	r1, #12
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fcbf 	bl	80028a6 <setPWM>

            setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 8002f28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f7ff fcb8 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 8002f36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	f7ff fcb1 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 8002f44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7ff fcaa 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 8002f52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f56:	2200      	movs	r2, #0
 8002f58:	210c      	movs	r1, #12
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	f7ff fca3 	bl	80028a6 <setPWM>
            Fren yapınca buraya eklenecek


            */

            break;
 8002f60:	e326      	b.n	80035b0 <controlRover+0x700>
        case 1://N

        	setPWM(htim1, TIM_CHANNEL_1, 0, imu_speed);
 8002f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff fc9b 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_2, 0, imu_speed);
 8002f70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2104      	movs	r1, #4
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fc94 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_3, 0, imu_speed);
 8002f7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2108      	movs	r1, #8
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff fc8d 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_4, 0, imu_speed);
 8002f8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f90:	2200      	movs	r2, #0
 8002f92:	210c      	movs	r1, #12
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fc86 	bl	80028a6 <setPWM>

            setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 8002f9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	68b8      	ldr	r0, [r7, #8]
 8002fa4:	f7ff fc7f 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 8002fa8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fac:	2200      	movs	r2, #0
 8002fae:	2104      	movs	r1, #4
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f7ff fc78 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 8002fb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	68b8      	ldr	r0, [r7, #8]
 8002fc0:	f7ff fc71 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 8002fc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	210c      	movs	r1, #12
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f7ff fc6a 	bl	80028a6 <setPWM>


            break;
 8002fd2:	e2ed      	b.n	80035b0 <controlRover+0x700>
        case 3://D

            leftFrontWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedL, currentGround, MAX_SPEED_D);
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	8b3b      	ldrh	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	4a96      	ldr	r2, [pc, #600]	@ (8003238 <controlRover+0x388>)
 8002fe0:	7811      	ldrb	r1, [r2, #0]
 8002fe2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fdae 	bl	8002b48 <limitSpeedToPWM>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b92      	ldr	r3, [pc, #584]	@ (800323c <controlRover+0x38c>)
 8002ff2:	801a      	strh	r2, [r3, #0]
            leftBackWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedL, currentGround, MAX_SPEED_D);
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	8b3b      	ldrh	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4a8e      	ldr	r2, [pc, #568]	@ (8003238 <controlRover+0x388>)
 8003000:	7811      	ldrb	r1, [r2, #0]
 8003002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fd9e 	bl	8002b48 <limitSpeedToPWM>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	4b8b      	ldr	r3, [pc, #556]	@ (8003240 <controlRover+0x390>)
 8003012:	801a      	strh	r2, [r3, #0]
            rightFrontWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedR, currentGround, MAX_SPEED_D);
 8003014:	88ba      	ldrh	r2, [r7, #4]
 8003016:	8b3b      	ldrh	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	b21b      	sxth	r3, r3
 800301e:	4a86      	ldr	r2, [pc, #536]	@ (8003238 <controlRover+0x388>)
 8003020:	7811      	ldrb	r1, [r2, #0]
 8003022:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd8e 	bl	8002b48 <limitSpeedToPWM>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	4b84      	ldr	r3, [pc, #528]	@ (8003244 <controlRover+0x394>)
 8003032:	801a      	strh	r2, [r3, #0]
            rightBackWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedR, currentGround, MAX_SPEED_D);
 8003034:	88ba      	ldrh	r2, [r7, #4]
 8003036:	8b3b      	ldrh	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	b21b      	sxth	r3, r3
 800303e:	4a7e      	ldr	r2, [pc, #504]	@ (8003238 <controlRover+0x388>)
 8003040:	7811      	ldrb	r1, [r2, #0]
 8003042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fd7e 	bl	8002b48 <limitSpeedToPWM>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	4b7d      	ldr	r3, [pc, #500]	@ (8003248 <controlRover+0x398>)
 8003052:	801a      	strh	r2, [r3, #0]

            // Patinaj kontrolü uygula (örneğin, ön tekerlekleri referans al)
            applySlipControl(&leftFrontWheel, imu_speed);
 8003054:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003058:	4619      	mov	r1, r3
 800305a:	4878      	ldr	r0, [pc, #480]	@ (800323c <controlRover+0x38c>)
 800305c:	f7ff fdcc 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightFrontWheel, imu_speed);
 8003060:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003064:	4619      	mov	r1, r3
 8003066:	4877      	ldr	r0, [pc, #476]	@ (8003244 <controlRover+0x394>)
 8003068:	f7ff fdc6 	bl	8002bf8 <applySlipControl>
            applySlipControl(&leftBackWheel, imu_speed);
 800306c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003070:	4619      	mov	r1, r3
 8003072:	4873      	ldr	r0, [pc, #460]	@ (8003240 <controlRover+0x390>)
 8003074:	f7ff fdc0 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightBackWheel, imu_speed);
 8003078:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800307c:	4619      	mov	r1, r3
 800307e:	4872      	ldr	r0, [pc, #456]	@ (8003248 <controlRover+0x398>)
 8003080:	f7ff fdba 	bl	8002bf8 <applySlipControl>

            // Tekerlekleri kontrol et

            controlWheel(htim1, TIM_CHANNEL_1, &leftFrontWheel, D_RAMP_RATE, imu_speed);
 8003084:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2332      	movs	r3, #50	@ 0x32
 800308c:	4a6b      	ldr	r2, [pc, #428]	@ (800323c <controlRover+0x38c>)
 800308e:	2100      	movs	r1, #0
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff fdf1 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_2, &leftBackWheel, D_RAMP_RATE, imu_speed);
 8003096:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2332      	movs	r3, #50	@ 0x32
 800309e:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <controlRover+0x390>)
 80030a0:	2104      	movs	r1, #4
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fde8 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_3, &rightFrontWheel, D_RAMP_RATE, imu_speed);
 80030a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2332      	movs	r3, #50	@ 0x32
 80030b0:	4a64      	ldr	r2, [pc, #400]	@ (8003244 <controlRover+0x394>)
 80030b2:	2108      	movs	r1, #8
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fddf 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_4, &rightBackWheel, D_RAMP_RATE, imu_speed);
 80030ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2332      	movs	r3, #50	@ 0x32
 80030c2:	4a61      	ldr	r2, [pc, #388]	@ (8003248 <controlRover+0x398>)
 80030c4:	210c      	movs	r1, #12
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff fdd6 	bl	8002c78 <controlWheel>

            setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 80030cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	68b8      	ldr	r0, [r7, #8]
 80030d6:	f7ff fbe6 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 80030da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030de:	2200      	movs	r2, #0
 80030e0:	2104      	movs	r1, #4
 80030e2:	68b8      	ldr	r0, [r7, #8]
 80030e4:	f7ff fbdf 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 80030e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2108      	movs	r1, #8
 80030f0:	68b8      	ldr	r0, [r7, #8]
 80030f2:	f7ff fbd8 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 80030f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030fa:	2200      	movs	r2, #0
 80030fc:	210c      	movs	r1, #12
 80030fe:	68b8      	ldr	r0, [r7, #8]
 8003100:	f7ff fbd1 	bl	80028a6 <setPWM>

            break;
 8003104:	e254      	b.n	80035b0 <controlRover+0x700>
        case 2://R

            leftFrontWheel.targetSpeed = limitSpeedToPWM(-throttle + rotation_speedL, currentGround, MAX_SPEED_D);
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	8b3b      	ldrh	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b29b      	uxth	r3, r3
 800310e:	b21b      	sxth	r3, r3
 8003110:	4a49      	ldr	r2, [pc, #292]	@ (8003238 <controlRover+0x388>)
 8003112:	7811      	ldrb	r1, [r2, #0]
 8003114:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fd15 	bl	8002b48 <limitSpeedToPWM>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b46      	ldr	r3, [pc, #280]	@ (800323c <controlRover+0x38c>)
 8003124:	801a      	strh	r2, [r3, #0]
            leftBackWheel.targetSpeed = limitSpeedToPWM(-throttle + rotation_speedL, currentGround, MAX_SPEED_D);
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	8b3b      	ldrh	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	b21b      	sxth	r3, r3
 8003130:	4a41      	ldr	r2, [pc, #260]	@ (8003238 <controlRover+0x388>)
 8003132:	7811      	ldrb	r1, [r2, #0]
 8003134:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd05 	bl	8002b48 <limitSpeedToPWM>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <controlRover+0x390>)
 8003144:	801a      	strh	r2, [r3, #0]
            rightFrontWheel.targetSpeed = limitSpeedToPWM(-throttle + rotation_speedR, currentGround, MAX_SPEED_D);
 8003146:	88ba      	ldrh	r2, [r7, #4]
 8003148:	8b3b      	ldrh	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b29b      	uxth	r3, r3
 800314e:	b21b      	sxth	r3, r3
 8003150:	4a39      	ldr	r2, [pc, #228]	@ (8003238 <controlRover+0x388>)
 8003152:	7811      	ldrb	r1, [r2, #0]
 8003154:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fcf5 	bl	8002b48 <limitSpeedToPWM>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <controlRover+0x394>)
 8003164:	801a      	strh	r2, [r3, #0]
            rightBackWheel.targetSpeed = limitSpeedToPWM(-throttle + rotation_speedR, currentGround, MAX_SPEED_D);
 8003166:	88ba      	ldrh	r2, [r7, #4]
 8003168:	8b3b      	ldrh	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	b29b      	uxth	r3, r3
 800316e:	b21b      	sxth	r3, r3
 8003170:	4a31      	ldr	r2, [pc, #196]	@ (8003238 <controlRover+0x388>)
 8003172:	7811      	ldrb	r1, [r2, #0]
 8003174:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fce5 	bl	8002b48 <limitSpeedToPWM>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <controlRover+0x398>)
 8003184:	801a      	strh	r2, [r3, #0]

            // Patinaj kontrolü uygula (örneğin, ön tekerlekleri referans al)
            applySlipControl(&leftFrontWheel, imu_speed);
 8003186:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800318a:	4619      	mov	r1, r3
 800318c:	482b      	ldr	r0, [pc, #172]	@ (800323c <controlRover+0x38c>)
 800318e:	f7ff fd33 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightFrontWheel, imu_speed);
 8003192:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003196:	4619      	mov	r1, r3
 8003198:	482a      	ldr	r0, [pc, #168]	@ (8003244 <controlRover+0x394>)
 800319a:	f7ff fd2d 	bl	8002bf8 <applySlipControl>
            applySlipControl(&leftBackWheel, imu_speed);
 800319e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031a2:	4619      	mov	r1, r3
 80031a4:	4826      	ldr	r0, [pc, #152]	@ (8003240 <controlRover+0x390>)
 80031a6:	f7ff fd27 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightBackWheel, imu_speed);
 80031aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4825      	ldr	r0, [pc, #148]	@ (8003248 <controlRover+0x398>)
 80031b2:	f7ff fd21 	bl	8002bf8 <applySlipControl>
            // Tekerlekleri kontrol et

            controlWheel(htim3, TIM_CHANNEL_1, &leftFrontWheel, D_RAMP_RATE, imu_speed);
 80031b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2332      	movs	r3, #50	@ 0x32
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <controlRover+0x38c>)
 80031c0:	2100      	movs	r1, #0
 80031c2:	68b8      	ldr	r0, [r7, #8]
 80031c4:	f7ff fd58 	bl	8002c78 <controlWheel>
            controlWheel(htim3, TIM_CHANNEL_2, &rightFrontWheel, D_RAMP_RATE, imu_speed);
 80031c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2332      	movs	r3, #50	@ 0x32
 80031d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003244 <controlRover+0x394>)
 80031d2:	2104      	movs	r1, #4
 80031d4:	68b8      	ldr	r0, [r7, #8]
 80031d6:	f7ff fd4f 	bl	8002c78 <controlWheel>
            controlWheel(htim3, TIM_CHANNEL_3, &leftBackWheel, D_RAMP_RATE, imu_speed);
 80031da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2332      	movs	r3, #50	@ 0x32
 80031e2:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <controlRover+0x390>)
 80031e4:	2108      	movs	r1, #8
 80031e6:	68b8      	ldr	r0, [r7, #8]
 80031e8:	f7ff fd46 	bl	8002c78 <controlWheel>
            controlWheel(htim3, TIM_CHANNEL_4, &rightBackWheel, D_RAMP_RATE, imu_speed);
 80031ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2332      	movs	r3, #50	@ 0x32
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <controlRover+0x398>)
 80031f6:	210c      	movs	r1, #12
 80031f8:	68b8      	ldr	r0, [r7, #8]
 80031fa:	f7ff fd3d 	bl	8002c78 <controlWheel>

            setPWM(htim1, TIM_CHANNEL_1, 0, imu_speed);
 80031fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fb4d 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_2, 0, imu_speed);
 800320c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003210:	2200      	movs	r2, #0
 8003212:	2104      	movs	r1, #4
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fb46 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_3, 0, imu_speed);
 800321a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800321e:	2200      	movs	r2, #0
 8003220:	2108      	movs	r1, #8
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fb3f 	bl	80028a6 <setPWM>
            setPWM(htim1, TIM_CHANNEL_4, 0, imu_speed);
 8003228:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800322c:	2200      	movs	r2, #0
 800322e:	210c      	movs	r1, #12
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff fb38 	bl	80028a6 <setPWM>

            break;
 8003236:	e1bb      	b.n	80035b0 <controlRover+0x700>
 8003238:	20003f60 	.word	0x20003f60
 800323c:	20003f64 	.word	0x20003f64
 8003240:	20003f7c 	.word	0x20003f7c
 8003244:	20003f70 	.word	0x20003f70
 8003248:	20003f88 	.word	0x20003f88
        case 4://S

            leftFrontWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedL, currentGround, MAX_SPEED_S);
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	8b3b      	ldrh	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	b21b      	sxth	r3, r3
 8003256:	4ab4      	ldr	r2, [pc, #720]	@ (8003528 <controlRover+0x678>)
 8003258:	7811      	ldrb	r1, [r2, #0]
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fc72 	bl	8002b48 <limitSpeedToPWM>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4bb0      	ldr	r3, [pc, #704]	@ (800352c <controlRover+0x67c>)
 800326a:	801a      	strh	r2, [r3, #0]
            leftBackWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedL, currentGround, MAX_SPEED_S);
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	8b3b      	ldrh	r3, [r7, #24]
 8003270:	4413      	add	r3, r2
 8003272:	b29b      	uxth	r3, r3
 8003274:	b21b      	sxth	r3, r3
 8003276:	4aac      	ldr	r2, [pc, #688]	@ (8003528 <controlRover+0x678>)
 8003278:	7811      	ldrb	r1, [r2, #0]
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fc62 	bl	8002b48 <limitSpeedToPWM>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	4ba9      	ldr	r3, [pc, #676]	@ (8003530 <controlRover+0x680>)
 800328a:	801a      	strh	r2, [r3, #0]
            rightFrontWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedR, currentGround, MAX_SPEED_S);
 800328c:	88ba      	ldrh	r2, [r7, #4]
 800328e:	8b3b      	ldrh	r3, [r7, #24]
 8003290:	4413      	add	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	b21b      	sxth	r3, r3
 8003296:	4aa4      	ldr	r2, [pc, #656]	@ (8003528 <controlRover+0x678>)
 8003298:	7811      	ldrb	r1, [r2, #0]
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fc52 	bl	8002b48 <limitSpeedToPWM>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	4ba2      	ldr	r3, [pc, #648]	@ (8003534 <controlRover+0x684>)
 80032aa:	801a      	strh	r2, [r3, #0]
            rightBackWheel.targetSpeed = limitSpeedToPWM(throttle + rotation_speedR, currentGround, MAX_SPEED_S);
 80032ac:	88ba      	ldrh	r2, [r7, #4]
 80032ae:	8b3b      	ldrh	r3, [r7, #24]
 80032b0:	4413      	add	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	4a9c      	ldr	r2, [pc, #624]	@ (8003528 <controlRover+0x678>)
 80032b8:	7811      	ldrb	r1, [r2, #0]
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fc42 	bl	8002b48 <limitSpeedToPWM>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b9b      	ldr	r3, [pc, #620]	@ (8003538 <controlRover+0x688>)
 80032ca:	801a      	strh	r2, [r3, #0]

            // Patinaj kontrolü uygula (örneğin, ön tekerlekleri referans al)
            applySlipControl(&leftFrontWheel, imu_speed);
 80032cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4896      	ldr	r0, [pc, #600]	@ (800352c <controlRover+0x67c>)
 80032d4:	f7ff fc90 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightFrontWheel, imu_speed);
 80032d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032dc:	4619      	mov	r1, r3
 80032de:	4895      	ldr	r0, [pc, #596]	@ (8003534 <controlRover+0x684>)
 80032e0:	f7ff fc8a 	bl	8002bf8 <applySlipControl>
            applySlipControl(&leftBackWheel, imu_speed);
 80032e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4891      	ldr	r0, [pc, #580]	@ (8003530 <controlRover+0x680>)
 80032ec:	f7ff fc84 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightBackWheel, imu_speed);
 80032f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4890      	ldr	r0, [pc, #576]	@ (8003538 <controlRover+0x688>)
 80032f8:	f7ff fc7e 	bl	8002bf8 <applySlipControl>
            // Tekerlekleri kontrol et

            controlWheel(htim1, TIM_CHANNEL_1, &leftFrontWheel, S_RAMP_RATE, imu_speed);
 80032fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2364      	movs	r3, #100	@ 0x64
 8003304:	4a89      	ldr	r2, [pc, #548]	@ (800352c <controlRover+0x67c>)
 8003306:	2100      	movs	r1, #0
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff fcb5 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_2, &rightFrontWheel, S_RAMP_RATE, imu_speed);
 800330e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2364      	movs	r3, #100	@ 0x64
 8003316:	4a87      	ldr	r2, [pc, #540]	@ (8003534 <controlRover+0x684>)
 8003318:	2104      	movs	r1, #4
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff fcac 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_3, &leftBackWheel, S_RAMP_RATE, imu_speed);
 8003320:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2364      	movs	r3, #100	@ 0x64
 8003328:	4a81      	ldr	r2, [pc, #516]	@ (8003530 <controlRover+0x680>)
 800332a:	2108      	movs	r1, #8
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fca3 	bl	8002c78 <controlWheel>
            controlWheel(htim1, TIM_CHANNEL_4, &rightBackWheel, S_RAMP_RATE, imu_speed);
 8003332:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2364      	movs	r3, #100	@ 0x64
 800333a:	4a7f      	ldr	r2, [pc, #508]	@ (8003538 <controlRover+0x688>)
 800333c:	210c      	movs	r1, #12
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fc9a 	bl	8002c78 <controlWheel>

            setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 8003344:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003348:	2200      	movs	r2, #0
 800334a:	2100      	movs	r1, #0
 800334c:	68b8      	ldr	r0, [r7, #8]
 800334e:	f7ff faaa 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 8003352:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003356:	2200      	movs	r2, #0
 8003358:	2104      	movs	r1, #4
 800335a:	68b8      	ldr	r0, [r7, #8]
 800335c:	f7ff faa3 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 8003360:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003364:	2200      	movs	r2, #0
 8003366:	2108      	movs	r1, #8
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f7ff fa9c 	bl	80028a6 <setPWM>
            setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 800336e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003372:	2200      	movs	r2, #0
 8003374:	210c      	movs	r1, #12
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f7ff fa95 	bl	80028a6 <setPWM>

            break;
 800337c:	e118      	b.n	80035b0 <controlRover+0x700>

        case 6://T

            leftFrontWheel.targetSpeed = limitSpeedToPWM(rotation_speedL, currentGround, MAX_SPEED_D);
 800337e:	4b6a      	ldr	r3, [pc, #424]	@ (8003528 <controlRover+0x678>)
 8003380:	7819      	ldrb	r1, [r3, #0]
 8003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fbdc 	bl	8002b48 <limitSpeedToPWM>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b65      	ldr	r3, [pc, #404]	@ (800352c <controlRover+0x67c>)
 8003396:	801a      	strh	r2, [r3, #0]
            leftBackWheel.targetSpeed = limitSpeedToPWM(rotation_speedL, currentGround, MAX_SPEED_D);
 8003398:	4b63      	ldr	r3, [pc, #396]	@ (8003528 <controlRover+0x678>)
 800339a:	7819      	ldrb	r1, [r3, #0]
 800339c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fbcf 	bl	8002b48 <limitSpeedToPWM>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b60      	ldr	r3, [pc, #384]	@ (8003530 <controlRover+0x680>)
 80033b0:	801a      	strh	r2, [r3, #0]
            rightFrontWheel.targetSpeed = limitSpeedToPWM(rotation_speedR, currentGround, MAX_SPEED_D);
 80033b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003528 <controlRover+0x678>)
 80033b4:	7819      	ldrb	r1, [r3, #0]
 80033b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fbc2 	bl	8002b48 <limitSpeedToPWM>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003534 <controlRover+0x684>)
 80033ca:	801a      	strh	r2, [r3, #0]
            rightBackWheel.targetSpeed = limitSpeedToPWM(rotation_speedR, currentGround, MAX_SPEED_D);
 80033cc:	4b56      	ldr	r3, [pc, #344]	@ (8003528 <controlRover+0x678>)
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fbb5 	bl	8002b48 <limitSpeedToPWM>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b55      	ldr	r3, [pc, #340]	@ (8003538 <controlRover+0x688>)
 80033e4:	801a      	strh	r2, [r3, #0]

            // Patinaj kontrolü uygula (örneğin, ön tekerlekleri referans al)

            applySlipControl(&leftBackWheel, leftFrontWheel.currentSpeed);
 80033e6:	4b51      	ldr	r3, [pc, #324]	@ (800352c <controlRover+0x67c>)
 80033e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ec:	4619      	mov	r1, r3
 80033ee:	4850      	ldr	r0, [pc, #320]	@ (8003530 <controlRover+0x680>)
 80033f0:	f7ff fc02 	bl	8002bf8 <applySlipControl>
            applySlipControl(&rightBackWheel, rightFrontWheel.currentSpeed);
 80033f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003534 <controlRover+0x684>)
 80033f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033fa:	4619      	mov	r1, r3
 80033fc:	484e      	ldr	r0, [pc, #312]	@ (8003538 <controlRover+0x688>)
 80033fe:	f7ff fbfb 	bl	8002bf8 <applySlipControl>

            // Tekerlekleri kontrol et
           if(rotation_speedL>0 && rotation_speedR<0)
 8003402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	dd44      	ble.n	8003494 <controlRover+0x5e4>
 800340a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da40      	bge.n	8003494 <controlRover+0x5e4>
            {
                controlWheel(htim1, TIM_CHANNEL_1, &leftFrontWheel, D_RAMP_RATE, imu_speed);
 8003412:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2332      	movs	r3, #50	@ 0x32
 800341a:	4a44      	ldr	r2, [pc, #272]	@ (800352c <controlRover+0x67c>)
 800341c:	2100      	movs	r1, #0
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff fc2a 	bl	8002c78 <controlWheel>
                controlWheel(htim3, TIM_CHANNEL_2, &rightFrontWheel, D_RAMP_RATE, imu_speed);
 8003424:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2332      	movs	r3, #50	@ 0x32
 800342c:	4a41      	ldr	r2, [pc, #260]	@ (8003534 <controlRover+0x684>)
 800342e:	2104      	movs	r1, #4
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f7ff fc21 	bl	8002c78 <controlWheel>
                controlWheel(htim1, TIM_CHANNEL_3, &leftBackWheel, D_RAMP_RATE, imu_speed);
 8003436:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2332      	movs	r3, #50	@ 0x32
 800343e:	4a3c      	ldr	r2, [pc, #240]	@ (8003530 <controlRover+0x680>)
 8003440:	2108      	movs	r1, #8
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fc18 	bl	8002c78 <controlWheel>
                controlWheel(htim3, TIM_CHANNEL_4, &rightBackWheel, D_RAMP_RATE, imu_speed);
 8003448:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2332      	movs	r3, #50	@ 0x32
 8003450:	4a39      	ldr	r2, [pc, #228]	@ (8003538 <controlRover+0x688>)
 8003452:	210c      	movs	r1, #12
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f7ff fc0f 	bl	8002c78 <controlWheel>

                setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 800345a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800345e:	2200      	movs	r2, #0
 8003460:	2100      	movs	r1, #0
 8003462:	68b8      	ldr	r0, [r7, #8]
 8003464:	f7ff fa1f 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_2, 0, imu_speed);
 8003468:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800346c:	2200      	movs	r2, #0
 800346e:	2104      	movs	r1, #4
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff fa18 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 8003476:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800347a:	2200      	movs	r2, #0
 800347c:	2108      	movs	r1, #8
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f7ff fa11 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_4, 0, imu_speed);
 8003484:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003488:	2200      	movs	r2, #0
 800348a:	210c      	movs	r1, #12
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff fa0a 	bl	80028a6 <setPWM>
 8003492:	e08c      	b.n	80035ae <controlRover+0x6fe>

            }
            else if(rotation_speedL<0 && rotation_speedR>0)
 8003494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da4f      	bge.n	800353c <controlRover+0x68c>
 800349c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dd4b      	ble.n	800353c <controlRover+0x68c>
            {
                controlWheel(htim3, TIM_CHANNEL_1, &leftFrontWheel, D_RAMP_RATE, imu_speed);
 80034a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2332      	movs	r3, #50	@ 0x32
 80034ac:	4a1f      	ldr	r2, [pc, #124]	@ (800352c <controlRover+0x67c>)
 80034ae:	2100      	movs	r1, #0
 80034b0:	68b8      	ldr	r0, [r7, #8]
 80034b2:	f7ff fbe1 	bl	8002c78 <controlWheel>
                controlWheel(htim1, TIM_CHANNEL_2, &rightFrontWheel, D_RAMP_RATE, imu_speed);
 80034b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2332      	movs	r3, #50	@ 0x32
 80034be:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <controlRover+0x684>)
 80034c0:	2104      	movs	r1, #4
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fbd8 	bl	8002c78 <controlWheel>
                controlWheel(htim3, TIM_CHANNEL_3, &leftBackWheel, D_RAMP_RATE, imu_speed);
 80034c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2332      	movs	r3, #50	@ 0x32
 80034d0:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <controlRover+0x680>)
 80034d2:	2108      	movs	r1, #8
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f7ff fbcf 	bl	8002c78 <controlWheel>
                controlWheel(htim1, TIM_CHANNEL_4, &rightBackWheel, D_RAMP_RATE, imu_speed);
 80034da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2332      	movs	r3, #50	@ 0x32
 80034e2:	4a15      	ldr	r2, [pc, #84]	@ (8003538 <controlRover+0x688>)
 80034e4:	210c      	movs	r1, #12
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fbc6 	bl	8002c78 <controlWheel>

                setPWM(htim1, TIM_CHANNEL_1, 0, imu_speed);
 80034ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2100      	movs	r1, #0
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff f9d6 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 80034fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034fe:	2200      	movs	r2, #0
 8003500:	2104      	movs	r1, #4
 8003502:	68b8      	ldr	r0, [r7, #8]
 8003504:	f7ff f9cf 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_3, 0, imu_speed);
 8003508:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800350c:	2200      	movs	r2, #0
 800350e:	2108      	movs	r1, #8
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff f9c8 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 8003516:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800351a:	2200      	movs	r2, #0
 800351c:	210c      	movs	r1, #12
 800351e:	68b8      	ldr	r0, [r7, #8]
 8003520:	f7ff f9c1 	bl	80028a6 <setPWM>
 8003524:	e043      	b.n	80035ae <controlRover+0x6fe>
 8003526:	bf00      	nop
 8003528:	20003f60 	.word	0x20003f60
 800352c:	20003f64 	.word	0x20003f64
 8003530:	20003f7c 	.word	0x20003f7c
 8003534:	20003f70 	.word	0x20003f70
 8003538:	20003f88 	.word	0x20003f88

            }

            else
            {
            	setPWM(htim1, TIM_CHANNEL_1, 0, imu_speed);
 800353c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff f9ae 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_2, 0, imu_speed);
 800354a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800354e:	2200      	movs	r2, #0
 8003550:	2104      	movs	r1, #4
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff f9a7 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_3, 0, imu_speed);
 8003558:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800355c:	2200      	movs	r2, #0
 800355e:	2108      	movs	r1, #8
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff f9a0 	bl	80028a6 <setPWM>
                setPWM(htim1, TIM_CHANNEL_4, 0, imu_speed);
 8003566:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800356a:	2200      	movs	r2, #0
 800356c:	210c      	movs	r1, #12
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff f999 	bl	80028a6 <setPWM>

                setPWM(htim3, TIM_CHANNEL_1, 0, imu_speed);
 8003574:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	f7ff f992 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_2, 0, imu_speed);
 8003582:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003586:	2200      	movs	r2, #0
 8003588:	2104      	movs	r1, #4
 800358a:	68b8      	ldr	r0, [r7, #8]
 800358c:	f7ff f98b 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_3, 0, imu_speed);
 8003590:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003594:	2200      	movs	r2, #0
 8003596:	2108      	movs	r1, #8
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f7ff f984 	bl	80028a6 <setPWM>
                setPWM(htim3, TIM_CHANNEL_4, 0, imu_speed);
 800359e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035a2:	2200      	movs	r2, #0
 80035a4:	210c      	movs	r1, #12
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f7ff f97d 	bl	80028a6 <setPWM>
            }

            break;
 80035ac:	e7ff      	b.n	80035ae <controlRover+0x6fe>
 80035ae:	bf00      	nop

	}

	// Hedef hızları joystick'e göre ayarla

}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80035c6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80035c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035cc:	4904      	ldr	r1, [pc, #16]	@ (80035e0 <cubemx_transport_open+0x28>)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f002 fbc0 	bl	8005d54 <HAL_UART_Receive_DMA>
    return true;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20003f94 	.word	0x20003f94

080035e4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80035f2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f002 fbd2 	bl	8005d9e <HAL_UART_DMAStop>
    return true;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003618:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d11c      	bne.n	8003660 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f002 fb20 	bl	8005c74 <HAL_UART_Transmit_DMA>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003638:	e002      	b.n	8003640 <cubemx_transport_write+0x3c>
            osDelay(1);
 800363a:	2001      	movs	r0, #1
 800363c:	f003 fe3c 	bl	80072b8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <cubemx_transport_write+0x4e>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b20      	cmp	r3, #32
 8003650:	d1f3      	bne.n	800363a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <cubemx_transport_write+0x58>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	e002      	b.n	8003662 <cubemx_transport_write+0x5e>
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8003660:	2300      	movs	r3, #0
    }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003680:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003686:	b672      	cpsid	i
}
 8003688:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <cubemx_transport_read+0x9c>)
 8003698:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800369a:	b662      	cpsie	i
}
 800369c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80036a4:	2001      	movs	r0, #1
 80036a6:	f003 fe07 	bl	80072b8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80036aa:	4b18      	ldr	r3, [pc, #96]	@ (800370c <cubemx_transport_read+0xa0>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <cubemx_transport_read+0x9c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d103      	bne.n	80036be <cubemx_transport_read+0x52>
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	dbe3      	blt.n	8003686 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80036c2:	e011      	b.n	80036e8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <cubemx_transport_read+0xa0>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	440b      	add	r3, r1
 80036ce:	4910      	ldr	r1, [pc, #64]	@ (8003710 <cubemx_transport_read+0xa4>)
 80036d0:	5c8a      	ldrb	r2, [r1, r2]
 80036d2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80036d4:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <cubemx_transport_read+0xa0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036de:	4a0b      	ldr	r2, [pc, #44]	@ (800370c <cubemx_transport_read+0xa0>)
 80036e0:	6013      	str	r3, [r2, #0]
        wrote++;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <cubemx_transport_read+0xa0>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <cubemx_transport_read+0x9c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d003      	beq.n	80036fc <cubemx_transport_read+0x90>
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3e3      	bcc.n	80036c4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80036fc:	69bb      	ldr	r3, [r7, #24]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20004798 	.word	0x20004798
 800370c:	20004794 	.word	0x20004794
 8003710:	20003f94 	.word	0x20003f94

08003714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800374c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003718:	f7fe ffca 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800371c:	480c      	ldr	r0, [pc, #48]	@ (8003750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800371e:	490d      	ldr	r1, [pc, #52]	@ (8003754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003720:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003724:	e002      	b.n	800372c <LoopCopyDataInit>

08003726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800372a:	3304      	adds	r3, #4

0800372c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800372c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003730:	d3f9      	bcc.n	8003726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003734:	4c0a      	ldr	r4, [pc, #40]	@ (8003760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003738:	e001      	b.n	800373e <LoopFillZerobss>

0800373a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800373a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800373c:	3204      	adds	r2, #4

0800373e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003740:	d3fb      	bcc.n	800373a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003742:	f011 fccf 	bl	80150e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003746:	f7fd fe49 	bl	80013dc <main>
  bx  lr    
 800374a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800374c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8003758:	08016fb0 	.word	0x08016fb0
  ldr r2, =_sbss
 800375c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8003760:	2000dd90 	.word	0x2000dd90

08003764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>
	...

08003768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800376c:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <HAL_Init+0x40>)
 8003772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <HAL_Init+0x40>)
 800377e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <HAL_Init+0x40>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 f92b 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	200f      	movs	r0, #15
 8003798:	f000 f808 	bl	80037ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800379c:	f7fe fca8 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00

080037ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_InitTick+0x54>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_InitTick+0x58>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f943 	bl	8003a56 <HAL_SYSTICK_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00e      	b.n	80037f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d80a      	bhi.n	80037f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037e8:	f000 f90b 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ec:	4a06      	ldr	r2, [pc, #24]	@ (8003808 <HAL_InitTick+0x5c>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000004 	.word	0x20000004
 8003804:	20000030 	.word	0x20000030
 8003808:	2000002c 	.word	0x2000002c

0800380c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_IncTick+0x20>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_IncTick+0x24>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4413      	add	r3, r2
 800381c:	4a04      	ldr	r2, [pc, #16]	@ (8003830 <HAL_IncTick+0x24>)
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000030 	.word	0x20000030
 8003830:	2000479c 	.word	0x2000479c

08003834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return uwTick;
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <HAL_GetTick+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000479c 	.word	0x2000479c

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	@ (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	@ (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff3e 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff8e 	bl	8003940 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff31 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa2 	bl	80039a8 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff feda 	bl	8003834 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e099      	b.n	8003bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	e00f      	b.n	8003ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aae:	f7ff fec1 	bl	8003834 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d908      	bls.n	8003ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e078      	b.n	8003bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e8      	bne.n	8003aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_DMA_Init+0x158>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4313      	orrs	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d117      	bne.n	8003b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb01 	bl	800417c <DMA_CheckFifoParam>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fab8 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	223f      	movs	r2, #63	@ 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	f010803f 	.word	0xf010803f

08003bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x26>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e040      	b.n	8003c74 <HAL_DMA_Start_IT+0xa8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12f      	bne.n	8003c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa4a 	bl	80040b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0216 	orr.w	r2, r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e005      	b.n	8003c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7ff fdd3 	bl	8003834 <HAL_GetTick>
 8003c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e052      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0216 	bic.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_DMA_Abort+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	e013      	b.n	8003d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d00:	f7ff fd98 	bl	8003834 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d90c      	bls.n	8003d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e015      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e4      	bne.n	8003d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	223f      	movs	r2, #63	@ 0x3f
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00c      	b.n	8003d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dac:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_DMA_IRQHandler+0x248>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8e      	ldr	r2, [pc, #568]	@ (8003fec <HAL_DMA_IRQHandler+0x24c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d043      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e01f      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e016      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2220      	movs	r2, #32
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8087 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d136      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0216 	bic.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	223f      	movs	r2, #63	@ 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
        }
        return;
 8003fb6:	e079      	b.n	80040ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e02c      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
 8003fe6:	bf00      	nop
 8003fe8:	20000004 	.word	0x20000004
 8003fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e01e      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f2      	bne.n	800406c <HAL_DMA_IRQHandler+0x2cc>
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ac:	bf00      	nop
    }
  }
}
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d108      	bne.n	80040f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040f2:	e007      	b.n	8004104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3b10      	subs	r3, #16
 8004120:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <DMA_CalcBaseAndBitshift+0x64>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <DMA_CalcBaseAndBitshift+0x68>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d909      	bls.n	8004152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004150:	e007      	b.n	8004162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	080164a0 	.word	0x080164a0

0800417c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11f      	bne.n	80041d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d856      	bhi.n	800424a <DMA_CheckFifoParam+0xce>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <DMA_CheckFifoParam+0x28>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c7 	.word	0x080041c7
 80041ac:	080041b5 	.word	0x080041b5
 80041b0:	0800424b 	.word	0x0800424b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d046      	beq.n	800424e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e043      	b.n	800424e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ce:	d140      	bne.n	8004252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e03d      	b.n	8004252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041de:	d121      	bne.n	8004224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d837      	bhi.n	8004256 <DMA_CheckFifoParam+0xda>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <DMA_CheckFifoParam+0x70>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	08004215 	.word	0x08004215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e030      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d025      	beq.n	800425a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004212:	e022      	b.n	800425a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800421c:	d11f      	bne.n	800425e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004222:	e01c      	b.n	800425e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d903      	bls.n	8004232 <DMA_CheckFifoParam+0xb6>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d003      	beq.n	8004238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004230:	e018      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      break;
 8004236:	e015      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e00b      	b.n	8004262 <DMA_CheckFifoParam+0xe6>
      break;
 800424a:	bf00      	nop
 800424c:	e00a      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e008      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e006      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;   
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004262:	bf00      	nop
    }
  } 
  
  return status; 
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e159      	b.n	8004544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 8148 	bne.w	800453e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d130      	bne.n	8004328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a2 	beq.w	800453e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b57      	ldr	r3, [pc, #348]	@ (800455c <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	4a56      	ldr	r2, [pc, #344]	@ (800455c <HAL_GPIO_Init+0x2e8>)
 8004404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004408:	6453      	str	r3, [r2, #68]	@ 0x44
 800440a:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_GPIO_Init+0x2e8>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004416:	4a52      	ldr	r2, [pc, #328]	@ (8004560 <HAL_GPIO_Init+0x2ec>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3302      	adds	r3, #2
 800441e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a49      	ldr	r2, [pc, #292]	@ (8004564 <HAL_GPIO_Init+0x2f0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d019      	beq.n	8004476 <HAL_GPIO_Init+0x202>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a48      	ldr	r2, [pc, #288]	@ (8004568 <HAL_GPIO_Init+0x2f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_GPIO_Init+0x1fe>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a47      	ldr	r2, [pc, #284]	@ (800456c <HAL_GPIO_Init+0x2f8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00d      	beq.n	800446e <HAL_GPIO_Init+0x1fa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <HAL_GPIO_Init+0x2fc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <HAL_GPIO_Init+0x1f6>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a45      	ldr	r2, [pc, #276]	@ (8004574 <HAL_GPIO_Init+0x300>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_GPIO_Init+0x1f2>
 8004462:	2304      	movs	r3, #4
 8004464:	e008      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004466:	2307      	movs	r3, #7
 8004468:	e006      	b.n	8004478 <HAL_GPIO_Init+0x204>
 800446a:	2303      	movs	r3, #3
 800446c:	e004      	b.n	8004478 <HAL_GPIO_Init+0x204>
 800446e:	2302      	movs	r3, #2
 8004470:	e002      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_GPIO_Init+0x204>
 8004476:	2300      	movs	r3, #0
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	f002 0203 	and.w	r2, r2, #3
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	4093      	lsls	r3, r2
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004488:	4935      	ldr	r1, [pc, #212]	@ (8004560 <HAL_GPIO_Init+0x2ec>)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004496:	4b38      	ldr	r3, [pc, #224]	@ (8004578 <HAL_GPIO_Init+0x304>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004578 <HAL_GPIO_Init+0x304>)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004578 <HAL_GPIO_Init+0x304>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e4:	4a24      	ldr	r2, [pc, #144]	@ (8004578 <HAL_GPIO_Init+0x304>)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ea:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_GPIO_Init+0x304>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800450e:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <HAL_GPIO_Init+0x304>)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004514:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <HAL_GPIO_Init+0x304>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004538:	4a0f      	ldr	r2, [pc, #60]	@ (8004578 <HAL_GPIO_Init+0x304>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	f67f aea2 	bls.w	8004290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3724      	adds	r7, #36	@ 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	40013800 	.word	0x40013800
 8004564:	40020000 	.word	0x40020000
 8004568:	40020400 	.word	0x40020400
 800456c:	40020800 	.word	0x40020800
 8004570:	40020c00 	.word	0x40020c00
 8004574:	40021000 	.word	0x40021000
 8004578:	40013c00 	.word	0x40013c00

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e267      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d075      	beq.n	80046ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ce:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b85      	ldr	r3, [pc, #532]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d112      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e6:	4b82      	ldr	r3, [pc, #520]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f2:	d10b      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	4b7e      	ldr	r3, [pc, #504]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d157      	bne.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e242      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x74>
 8004616:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a75      	ldr	r2, [pc, #468]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x98>
 800462e:	4b70      	ldr	r3, [pc, #448]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6f      	ldr	r2, [pc, #444]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b6d      	ldr	r3, [pc, #436]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004648:	4b69      	ldr	r3, [pc, #420]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a68      	ldr	r2, [pc, #416]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b66      	ldr	r3, [pc, #408]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a65      	ldr	r2, [pc, #404]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7ff f8e4 	bl	8003834 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7ff f8e0 	bl	8003834 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e207      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xc0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7ff f8d0 	bl	8003834 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7ff f8cc 	bl	8003834 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1f3      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0xe8>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1c7      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4937      	ldr	r1, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7ff f885 	bl	8003834 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7ff f881 	bl	8003834 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1a8      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4925      	ldr	r1, [pc, #148]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7ff f864 	bl	8003834 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7ff f860 	bl	8003834 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e187      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d036      	beq.n	8004808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7ff f844 	bl	8003834 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7ff f840 	bl	8003834 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e167      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x200>
 80047ce:	e01b      	b.n	8004808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7ff f82d 	bl	8003834 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	e00e      	b.n	80047fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7ff f829 	bl	8003834 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d907      	bls.n	80047fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e150      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	42470000 	.word	0x42470000
 80047f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ea      	bne.n	80047de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8097 	beq.w	8004944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b7a      	ldr	r3, [pc, #488]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b77      	ldr	r3, [pc, #476]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b74      	ldr	r3, [pc, #464]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a73      	ldr	r2, [pc, #460]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fe ffe9 	bl	8003834 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fe ffe5 	bl	8003834 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e10c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b6a      	ldr	r3, [pc, #424]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x2ea>
 800488c:	4b64      	ldr	r3, [pc, #400]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a63      	ldr	r2, [pc, #396]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x30c>
 80048a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 80048bc:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a57      	ldr	r2, [pc, #348]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	4b55      	ldr	r3, [pc, #340]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fe ffaa 	bl	8003834 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fe ffa6 	bl	8003834 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0cb      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RCC_OscConfig+0x334>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004908:	f7fe ff94 	bl	8003834 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	e00a      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fe ff90 	bl	8003834 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0b5      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ee      	bne.n	8004910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a1 	beq.w	8004a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800494e:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d05c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d141      	bne.n	80049e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fe ff64 	bl	8003834 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fe ff60 	bl	8003834 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e087      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	491b      	ldr	r1, [pc, #108]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fe ff39 	bl	8003834 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fe ff35 	bl	8003834 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e05c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x416>
 80049e4:	e054      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fe ff22 	bl	8003834 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fe ff1e 	bl	8003834 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e045      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x444>
 8004a12:	e03d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e038      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
 8004a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d028      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d121      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d11a      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	3b01      	subs	r3, #1
 8004a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fe fe50 	bl	8003834 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fe fe4c 	bl	8003834 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	490a      	ldr	r1, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fdb0 	bl	80037ac <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08016488 	.word	0x08016488
 8004c64:	20000004 	.word	0x20000004
 8004c68:	2000002c 	.word	0x2000002c

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b094      	sub	sp, #80	@ 0x50
 8004c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	4b79      	ldr	r3, [pc, #484]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x40>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	f200 80e1 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9e:	e0db      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b73      	ldr	r3, [pc, #460]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca4:	e0db      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca6:	4b73      	ldr	r3, [pc, #460]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004caa:	e0d8      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cac:	4b6f      	ldr	r3, [pc, #444]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	1a51      	subs	r1, r2, r1
 8004cfa:	6139      	str	r1, [r7, #16]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d10:	4659      	mov	r1, fp
 8004d12:	018b      	lsls	r3, r1, #6
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	018a      	lsls	r2, r1, #6
 8004d1e:	4651      	mov	r1, sl
 8004d20:	ebb2 0801 	subs.w	r8, r2, r1
 8004d24:	4659      	mov	r1, fp
 8004d26:	eb63 0901 	sbc.w	r9, r3, r1
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3e:	4690      	mov	r8, r2
 8004d40:	4699      	mov	r9, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	eb18 0303 	adds.w	r3, r8, r3
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	eb49 0303 	adc.w	r3, r9, r3
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	024b      	lsls	r3, r1, #9
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d68:	4621      	mov	r1, r4
 8004d6a:	024a      	lsls	r2, r1, #9
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d7c:	f7fb ff66 	bl	8000c4c <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	e058      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	4611      	mov	r1, r2
 8004d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	0159      	lsls	r1, r3, #5
 8004db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db6:	0150      	lsls	r0, r2, #5
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8004de0:	eb63 050b 	sbc.w	r5, r3, fp
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	eb45 0303 	adc.w	r3, r5, r3
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e12:	4629      	mov	r1, r5
 8004e14:	028b      	lsls	r3, r1, #10
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	028a      	lsls	r2, r1, #10
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e30:	f7fb ff0c 	bl	8000c4c <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3750      	adds	r7, #80	@ 0x50
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	007a1200 	.word	0x007a1200

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000004 	.word	0x20000004

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e94:	f7ff fff0 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08016498 	.word	0x08016498

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ebc:	f7ff ffdc 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0b5b      	lsrs	r3, r3, #13
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	08016498 	.word	0x08016498

08004ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e041      	b.n	8004f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd f91e 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fac0 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e041      	b.n	8005014 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f839 	bl	800501c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fa71 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_TIM_PWM_Start+0x24>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e022      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d109      	bne.n	800506e <HAL_TIM_PWM_Start+0x3e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e015      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start+0x58>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e008      	b.n	800509a <HAL_TIM_PWM_Start+0x6a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e068      	b.n	8005174 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0x82>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	e013      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x92>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c0:	e00b      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0xa2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d0:	e003      	b.n	80050da <HAL_TIM_PWM_Start+0xaa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fc90 	bl	8005a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a23      	ldr	r2, [pc, #140]	@ (800517c <HAL_TIM_PWM_Start+0x14c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <HAL_TIM_PWM_Start+0x14c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <HAL_TIM_PWM_Start+0x10e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005114:	d013      	beq.n	800513e <HAL_TIM_PWM_Start+0x10e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <HAL_TIM_PWM_Start+0x150>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIM_PWM_Start+0x10e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <HAL_TIM_PWM_Start+0x154>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIM_PWM_Start+0x10e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <HAL_TIM_PWM_Start+0x158>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIM_PWM_Start+0x10e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a14      	ldr	r2, [pc, #80]	@ (800518c <HAL_TIM_PWM_Start+0x15c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d111      	bne.n	8005162 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b06      	cmp	r3, #6
 800514e:	d010      	beq.n	8005172 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	e007      	b.n	8005172 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40014000 	.word	0x40014000

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0ae      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	f200 809f 	bhi.w	80052fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	080052fd 	.word	0x080052fd
 80051cc:	080052fd 	.word	0x080052fd
 80051d0:	080052fd 	.word	0x080052fd
 80051d4:	08005239 	.word	0x08005239
 80051d8:	080052fd 	.word	0x080052fd
 80051dc:	080052fd 	.word	0x080052fd
 80051e0:	080052fd 	.word	0x080052fd
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	080052fd 	.word	0x080052fd
 80051ec:	080052fd 	.word	0x080052fd
 80051f0:	080052fd 	.word	0x080052fd
 80051f4:	080052bb 	.word	0x080052bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f9dc 	bl	80055bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0204 	bic.w	r2, r2, #4
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	619a      	str	r2, [r3, #24]
      break;
 8005236:	e064      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fa22 	bl	8005688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	619a      	str	r2, [r3, #24]
      break;
 8005278:	e043      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fa6d 	bl	8005760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0208 	orr.w	r2, r2, #8
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0204 	bic.w	r2, r2, #4
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	61da      	str	r2, [r3, #28]
      break;
 80052b8:	e023      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fab7 	bl	8005834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	021a      	lsls	r2, r3, #8
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	61da      	str	r2, [r3, #28]
      break;
 80052fa:	e002      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIM_ConfigClockSource+0x1c>
 800532c:	2302      	movs	r3, #2
 800532e:	e0b4      	b.n	800549a <HAL_TIM_ConfigClockSource+0x186>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800534e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005368:	d03e      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0xd4>
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536e:	f200 8087 	bhi.w	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	f000 8086 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x172>
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537e:	d87f      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b70      	cmp	r3, #112	@ 0x70
 8005382:	d01a      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0xa6>
 8005384:	2b70      	cmp	r3, #112	@ 0x70
 8005386:	d87b      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b60      	cmp	r3, #96	@ 0x60
 800538a:	d050      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x11a>
 800538c:	2b60      	cmp	r3, #96	@ 0x60
 800538e:	d877      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b50      	cmp	r3, #80	@ 0x50
 8005392:	d03c      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xfa>
 8005394:	2b50      	cmp	r3, #80	@ 0x50
 8005396:	d873      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	d058      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x13a>
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	d86f      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b30      	cmp	r3, #48	@ 0x30
 80053a2:	d064      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	2b30      	cmp	r3, #48	@ 0x30
 80053a6:	d86b      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d060      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d867      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05c      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d05a      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	e062      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ca:	f000 fafd 	bl	80059c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	609a      	str	r2, [r3, #8]
      break;
 80053e6:	e04f      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	f000 fae6 	bl	80059c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e03c      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	461a      	mov	r2, r3
 800541c:	f000 fa5a 	bl	80058d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2150      	movs	r1, #80	@ 0x50
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fab3 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 800542c:	e02c      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fa79 	bl	8005932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2160      	movs	r1, #96	@ 0x60
 8005446:	4618      	mov	r0, r3
 8005448:	f000 faa3 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 800544c:	e01c      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fa3a 	bl	80058d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2140      	movs	r1, #64	@ 0x40
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa93 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 800546c:	e00c      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f000 fa8a 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 800547e:	e003      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
      break;
 8005484:	e000      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3a      	ldr	r2, [pc, #232]	@ (80055a0 <TIM_Base_SetConfig+0xfc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x38>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x38>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a37      	ldr	r2, [pc, #220]	@ (80055a4 <TIM_Base_SetConfig+0x100>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x38>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a36      	ldr	r2, [pc, #216]	@ (80055a8 <TIM_Base_SetConfig+0x104>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x38>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <TIM_Base_SetConfig+0x108>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	@ (80055a0 <TIM_Base_SetConfig+0xfc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01b      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fc:	d017      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a28      	ldr	r2, [pc, #160]	@ (80055a4 <TIM_Base_SetConfig+0x100>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a27      	ldr	r2, [pc, #156]	@ (80055a8 <TIM_Base_SetConfig+0x104>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a26      	ldr	r2, [pc, #152]	@ (80055ac <TIM_Base_SetConfig+0x108>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a25      	ldr	r2, [pc, #148]	@ (80055b0 <TIM_Base_SetConfig+0x10c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <TIM_Base_SetConfig+0x110>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_Base_SetConfig+0x8a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a23      	ldr	r2, [pc, #140]	@ (80055b8 <TIM_Base_SetConfig+0x114>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d108      	bne.n	8005540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0e      	ldr	r2, [pc, #56]	@ (80055a0 <TIM_Base_SetConfig+0xfc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d103      	bne.n	8005574 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b01      	cmp	r3, #1
 8005584:	d105      	bne.n	8005592 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	611a      	str	r2, [r3, #16]
  }
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800

080055bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0201 	bic.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 0302 	bic.w	r3, r3, #2
 8005604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <TIM_OC1_SetConfig+0xc8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0308 	bic.w	r3, r3, #8
 800561e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a13      	ldr	r2, [pc, #76]	@ (8005684 <TIM_OC1_SetConfig+0xc8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d111      	bne.n	800565e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	621a      	str	r2, [r3, #32]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40010000 	.word	0x40010000

08005688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 0210 	bic.w	r2, r3, #16
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0320 	bic.w	r3, r3, #32
 80056d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <TIM_OC2_SetConfig+0xd4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10d      	bne.n	8005704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a15      	ldr	r2, [pc, #84]	@ (800575c <TIM_OC2_SetConfig+0xd4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d113      	bne.n	8005734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800571a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000

08005760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005830 <TIM_OC3_SetConfig+0xd0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10d      	bne.n	80057da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <TIM_OC3_SetConfig+0xd0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000

08005834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800587e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a10      	ldr	r2, [pc, #64]	@ (80058d0 <TIM_OC4_SetConfig+0x9c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d109      	bne.n	80058a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800589a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40010000 	.word	0x40010000

080058d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f023 0201 	bic.w	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f023 030a 	bic.w	r3, r3, #10
 8005910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005932:	b480      	push	{r7}
 8005934:	b087      	sub	sp, #28
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f023 0210 	bic.w	r2, r3, #16
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800595c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800596e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f043 0307 	orr.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e050      	b.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d013      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a15      	ldr	r2, [pc, #84]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a13      	ldr	r2, [pc, #76]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10c      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40014000 	.word	0x40014000

08005b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e03d      	b.n	8005bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e042      	b.n	8005c6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fc fb94 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	@ 0x24
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 ffc9 	bl	8006bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	@ 0x30
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d156      	bne.n	8005d3c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_UART_Transmit_DMA+0x26>
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e04f      	b.n	8005d3e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2221      	movs	r2, #33	@ 0x21
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc2:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <HAL_UART_Transmit_DMA+0xd4>)
 8005cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <HAL_UART_Transmit_DMA+0xd8>)
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_UART_Transmit_DMA+0xdc>)
 8005cd4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	2200      	movs	r2, #0
 8005cdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	f7fd ff69 	bl	8003bcc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	617b      	str	r3, [r7, #20]
   return(result);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d24:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3730      	adds	r7, #48	@ 0x30
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	0800643d 	.word	0x0800643d
 8005d4c:	080064d7 	.word	0x080064d7
 8005d50:	0800665b 	.word	0x0800665b

08005d54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d112      	bne.n	8005d94 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_UART_Receive_DMA+0x26>
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e00b      	b.n	8005d96 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	461a      	mov	r2, r3
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fcb0 	bl	80066f0 <UART_Start_Receive_DMA>
 8005d90:	4603      	mov	r3, r0
 8005d92:	e000      	b.n	8005d96 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b090      	sub	sp, #64	@ 0x40
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	2b80      	cmp	r3, #128	@ 0x80
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b21      	cmp	r3, #33	@ 0x21
 8005dca:	d128      	bne.n	8005e1e <HAL_UART_DMAStop+0x80>
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d025      	beq.n	8005e1e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3314      	adds	r3, #20
 8005df0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005df2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e5      	bne.n	8005dd2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fd ff32 	bl	8003c7c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd03 	bl	8006824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b22      	cmp	r3, #34	@ 0x22
 8005e3e:	d128      	bne.n	8005e92 <HAL_UART_DMAStop+0xf4>
 8005e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d025      	beq.n	8005e92 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e66:	61fa      	str	r2, [r7, #28]
 8005e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	69b9      	ldr	r1, [r7, #24]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	617b      	str	r3, [r7, #20]
   return(result);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd fef8 	bl	8003c7c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fcf1 	bl	8006874 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3740      	adds	r7, #64	@ 0x40
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x66>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fd99 	bl	8006a32 <UART_Receive_IT>
      return;
 8005f00:	e25b      	b.n	80063ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80de 	beq.w	80060c8 <HAL_UART_IRQHandler+0x22c>
 8005f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80d1 	beq.w	80060c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xae>
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xd2>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f043 0202 	orr.w	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_UART_IRQHandler+0xf6>
 8005f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	f043 0204 	orr.w	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x126>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fba:	f043 0208 	orr.w	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 81f2 	beq.w	80063b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_UART_IRQHandler+0x14e>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fd24 	bl	8006a32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b40      	cmp	r3, #64	@ 0x40
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_UART_IRQHandler+0x17a>
 800600e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d04f      	beq.n	80060b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fc2c 	bl	8006874 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d141      	bne.n	80060ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006040:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006056:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800605a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800606e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1d9      	bne.n	800602a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d013      	beq.n	80060a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	4a7e      	ldr	r2, [pc, #504]	@ (800627c <HAL_UART_IRQHandler+0x3e0>)
 8006084:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608a:	4618      	mov	r0, r3
 800608c:	f7fd fe66 	bl	8003d5c <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d016      	beq.n	80060c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	e00e      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9b2 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e00a      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f9ae 	bl	8006410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e006      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9aa 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80060c2:	e175      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	bf00      	nop
    return;
 80060c6:	e173      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 814f 	bne.w	8006370 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8148 	beq.w	8006370 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8141 	beq.w	8006370 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	f040 80b6 	bne.w	8006280 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8145 	beq.w	80063b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800612e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006132:	429a      	cmp	r2, r3
 8006134:	f080 813e 	bcs.w	80063b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800613e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800614a:	f000 8088 	beq.w	800625e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800616c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800617a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800617e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006186:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1d9      	bne.n	800614e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3314      	adds	r3, #20
 80061ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e1      	bne.n	800619a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006200:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800622c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006240:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006242:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006246:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800624e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e3      	bne.n	800621c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd fd0f 	bl	8003c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800626c:	b29b      	uxth	r3, r3
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f8d5 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800627a:	e09b      	b.n	80063b4 <HAL_UART_IRQHandler+0x518>
 800627c:	0800693b 	.word	0x0800693b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006288:	b29b      	uxth	r3, r3
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 808e 	beq.w	80063b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800629c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8089 	beq.w	80063b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80062cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e3      	bne.n	80062a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	623b      	str	r3, [r7, #32]
   return(result);
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3314      	adds	r3, #20
 80062fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006302:	633a      	str	r2, [r7, #48]	@ 0x30
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e3      	bne.n	80062de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60fb      	str	r3, [r7, #12]
   return(result);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0310 	bic.w	r3, r3, #16
 800633a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006348:	61fa      	str	r2, [r7, #28]
 800634a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	617b      	str	r3, [r7, #20]
   return(result);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e3      	bne.n	8006324 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f85b 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800636e:	e023      	b.n	80063b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <HAL_UART_IRQHandler+0x4f4>
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 faea 	bl	8006962 <UART_Transmit_IT>
    return;
 800638e:	e014      	b.n	80063ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <HAL_UART_IRQHandler+0x51e>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb2a 	bl	8006a02 <UART_EndTransmit_IT>
    return;
 80063ae:	e004      	b.n	80063ba <HAL_UART_IRQHandler+0x51e>
    return;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <HAL_UART_IRQHandler+0x51e>
      return;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <HAL_UART_IRQHandler+0x51e>
      return;
 80063b8:	bf00      	nop
  }
}
 80063ba:	37e8      	adds	r7, #232	@ 0xe8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b090      	sub	sp, #64	@ 0x40
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d137      	bne.n	80064c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645a:	2200      	movs	r2, #0
 800645c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800645e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3314      	adds	r3, #20
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	623b      	str	r3, [r7, #32]
   return(result);
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3314      	adds	r3, #20
 800647c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800647e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064b2:	61fa      	str	r2, [r7, #28]
 80064b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	69b9      	ldr	r1, [r7, #24]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	617b      	str	r3, [r7, #20]
   return(result);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e5      	bne.n	8006492 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064c6:	e002      	b.n	80064ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80064ca:	f7ff ff79 	bl	80063c0 <HAL_UART_TxCpltCallback>
}
 80064ce:	bf00      	nop
 80064d0:	3740      	adds	r7, #64	@ 0x40
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff ff75 	bl	80063d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b09c      	sub	sp, #112	@ 0x70
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d172      	bne.n	80065f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800650e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006510:	2200      	movs	r2, #0
 8006512:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006526:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800652a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800652c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006534:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006536:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800653a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006568:	647a      	str	r2, [r7, #68]	@ 0x44
 800656a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800656e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	623b      	str	r3, [r7, #32]
   return(result);
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006592:	663b      	str	r3, [r7, #96]	@ 0x60
 8006594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3314      	adds	r3, #20
 800659a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800659c:	633a      	str	r2, [r7, #48]	@ 0x30
 800659e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d119      	bne.n	80065f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0310 	bic.w	r3, r3, #16
 80065d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	617b      	str	r3, [r7, #20]
   return(result);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f6:	2200      	movs	r2, #0
 80065f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d106      	bne.n	8006610 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006606:	4619      	mov	r1, r3
 8006608:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800660a:	f7ff ff0b 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800660e:	e002      	b.n	8006616 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006610:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006612:	f7ff fee9 	bl	80063e8 <HAL_UART_RxCpltCallback>
}
 8006616:	bf00      	nop
 8006618:	3770      	adds	r7, #112	@ 0x70
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	2b01      	cmp	r3, #1
 8006638:	d108      	bne.n	800664c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff feed 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800664a:	e002      	b.n	8006652 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff fed5 	bl	80063fc <HAL_UART_RxHalfCpltCallback>
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006676:	2b80      	cmp	r3, #128	@ 0x80
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b21      	cmp	r3, #33	@ 0x21
 800668c:	d108      	bne.n	80066a0 <UART_DMAError+0x46>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800669a:	68b8      	ldr	r0, [r7, #8]
 800669c:	f000 f8c2 	bl	8006824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b40      	cmp	r3, #64	@ 0x40
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b22      	cmp	r3, #34	@ 0x22
 80066c0:	d108      	bne.n	80066d4 <UART_DMAError+0x7a>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80066ce:	68b8      	ldr	r0, [r7, #8]
 80066d0:	f000 f8d0 	bl	8006874 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d8:	f043 0210 	orr.w	r2, r3, #16
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e0:	68b8      	ldr	r0, [r7, #8]
 80066e2:	f7ff fe95 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b098      	sub	sp, #96	@ 0x60
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2222      	movs	r2, #34	@ 0x22
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	4a3e      	ldr	r2, [pc, #248]	@ (8006818 <UART_Start_Receive_DMA+0x128>)
 800671e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006724:	4a3d      	ldr	r2, [pc, #244]	@ (800681c <UART_Start_Receive_DMA+0x12c>)
 8006726:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672c:	4a3c      	ldr	r2, [pc, #240]	@ (8006820 <UART_Start_Receive_DMA+0x130>)
 800672e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006734:	2200      	movs	r2, #0
 8006736:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	f7fd fa3c 	bl	8003bcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d019      	beq.n	80067a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006792:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006794:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e5      	bne.n	8006772 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3314      	adds	r3, #20
 80067c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80067cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3314      	adds	r3, #20
 80067f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80067fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6a39      	ldr	r1, [r7, #32]
 8006800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	61fb      	str	r3, [r7, #28]
   return(result);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3760      	adds	r7, #96	@ 0x60
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	080064f3 	.word	0x080064f3
 800681c:	0800661f 	.word	0x0800661f
 8006820:	0800665b 	.word	0x0800665b

08006824 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b089      	sub	sp, #36	@ 0x24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60bb      	str	r3, [r7, #8]
   return(result);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	61ba      	str	r2, [r7, #24]
 800684e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	613b      	str	r3, [r7, #16]
   return(result);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006868:	bf00      	nop
 800686a:	3724      	adds	r7, #36	@ 0x24
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b095      	sub	sp, #84	@ 0x54
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800689c:	643a      	str	r2, [r7, #64]	@ 0x40
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e5      	bne.n	800687c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3314      	adds	r3, #20
 80068b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e5      	bne.n	80068b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d119      	bne.n	8006920 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	647b      	str	r3, [r7, #68]	@ 0x44
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690c:	61ba      	str	r2, [r7, #24]
 800690e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	613b      	str	r3, [r7, #16]
   return(result);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800692e:	bf00      	nop
 8006930:	3754      	adds	r7, #84	@ 0x54
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff fd5b 	bl	8006410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b21      	cmp	r3, #33	@ 0x21
 8006974:	d13e      	bne.n	80069f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697e:	d114      	bne.n	80069aa <UART_Transmit_IT+0x48>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d110      	bne.n	80069aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	1c9a      	adds	r2, r3, #2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	621a      	str	r2, [r3, #32]
 80069a8:	e008      	b.n	80069bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	1c59      	adds	r1, r3, #1
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6211      	str	r1, [r2, #32]
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4619      	mov	r1, r3
 80069ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10f      	bne.n	80069f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
  }
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fccc 	bl	80063c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08c      	sub	sp, #48	@ 0x30
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b22      	cmp	r3, #34	@ 0x22
 8006a44:	f040 80ae 	bne.w	8006ba4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a50:	d117      	bne.n	8006a82 <UART_Receive_IT+0x50>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d113      	bne.n	8006a82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a80:	e026      	b.n	8006ad0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a94:	d007      	beq.n	8006aa6 <UART_Receive_IT+0x74>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <UART_Receive_IT+0x82>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e008      	b.n	8006ac6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4619      	mov	r1, r3
 8006ade:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d15d      	bne.n	8006ba0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0220 	bic.w	r2, r2, #32
 8006af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695a      	ldr	r2, [r3, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0201 	bic.w	r2, r2, #1
 8006b12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d135      	bne.n	8006b96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b50:	623a      	str	r2, [r7, #32]
 8006b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	69f9      	ldr	r1, [r7, #28]
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e5      	bne.n	8006b30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b10      	cmp	r3, #16
 8006b70:	d10a      	bne.n	8006b88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fc48 	bl	8006424 <HAL_UARTEx_RxEventCallback>
 8006b94:	e002      	b.n	8006b9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fc26 	bl	80063e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e002      	b.n	8006ba6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3730      	adds	r7, #48	@ 0x30
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b0c0      	sub	sp, #256	@ 0x100
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	68d9      	ldr	r1, [r3, #12]
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	ea40 0301 	orr.w	r3, r0, r1
 8006bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c08:	f021 010c 	bic.w	r1, r1, #12
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c16:	430b      	orrs	r3, r1
 8006c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	6999      	ldr	r1, [r3, #24]
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	ea40 0301 	orr.w	r3, r0, r1
 8006c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8006e7c <UART_SetConfig+0x2cc>)
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d005      	beq.n	8006c50 <UART_SetConfig+0xa0>
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006e80 <UART_SetConfig+0x2d0>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d104      	bne.n	8006c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c50:	f7fe f932 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8006c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c58:	e003      	b.n	8006c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5a:	f7fe f919 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c6c:	f040 810c 	bne.w	8006e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	1891      	adds	r1, r2, r2
 8006c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c92:	4621      	mov	r1, r4
 8006c94:	eb12 0801 	adds.w	r8, r2, r1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	eb43 0901 	adc.w	r9, r3, r1
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	eb18 0303 	adds.w	r3, r8, r3
 8006cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	eb49 0303 	adc.w	r3, r9, r3
 8006cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cde:	460b      	mov	r3, r1
 8006ce0:	18db      	adds	r3, r3, r3
 8006ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	eb42 0303 	adc.w	r3, r2, r3
 8006cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cf4:	f7f9 ffaa 	bl	8000c4c <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b61      	ldr	r3, [pc, #388]	@ (8006e84 <UART_SetConfig+0x2d4>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	011c      	lsls	r4, r3, #4
 8006d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d20:	415b      	adcs	r3, r3
 8006d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d28:	4641      	mov	r1, r8
 8006d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d2e:	4649      	mov	r1, r9
 8006d30:	eb43 0b01 	adc.w	fp, r3, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d48:	4692      	mov	sl, r2
 8006d4a:	469b      	mov	fp, r3
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d56:	464b      	mov	r3, r9
 8006d58:	eb4b 0303 	adc.w	r3, fp, r3
 8006d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d74:	460b      	mov	r3, r1
 8006d76:	18db      	adds	r3, r3, r3
 8006d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d8a:	f7f9 ff5f 	bl	8000c4c <__aeabi_uldivmod>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	4b3b      	ldr	r3, [pc, #236]	@ (8006e84 <UART_SetConfig+0x2d4>)
 8006d96:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2264      	movs	r2, #100	@ 0x64
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	1acb      	subs	r3, r1, r3
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006daa:	4b36      	ldr	r3, [pc, #216]	@ (8006e84 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 2302 	umull	r2, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006db8:	441c      	add	r4, r3
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	1891      	adds	r1, r2, r2
 8006dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ddc:	4641      	mov	r1, r8
 8006dde:	1851      	adds	r1, r2, r1
 8006de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006de2:	4649      	mov	r1, r9
 8006de4:	414b      	adcs	r3, r1
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006df4:	4659      	mov	r1, fp
 8006df6:	00cb      	lsls	r3, r1, #3
 8006df8:	4651      	mov	r1, sl
 8006dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfe:	4651      	mov	r1, sl
 8006e00:	00ca      	lsls	r2, r1, #3
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	4642      	mov	r2, r8
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e10:	464b      	mov	r3, r9
 8006e12:	460a      	mov	r2, r1
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e30:	460b      	mov	r3, r1
 8006e32:	18db      	adds	r3, r3, r3
 8006e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e36:	4613      	mov	r3, r2
 8006e38:	eb42 0303 	adc.w	r3, r2, r3
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e46:	f7f9 ff01 	bl	8000c4c <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <UART_SetConfig+0x2d4>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	@ 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	3332      	adds	r3, #50	@ 0x32
 8006e62:	4a08      	ldr	r2, [pc, #32]	@ (8006e84 <UART_SetConfig+0x2d4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 0207 	and.w	r2, r3, #7
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4422      	add	r2, r4
 8006e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e78:	e106      	b.n	8007088 <UART_SetConfig+0x4d8>
 8006e7a:	bf00      	nop
 8006e7c:	40011000 	.word	0x40011000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	6239      	str	r1, [r7, #32]
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eaa:	4641      	mov	r1, r8
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	4649      	mov	r1, r9
 8006eb0:	eb43 0501 	adc.w	r5, r3, r1
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	00eb      	lsls	r3, r5, #3
 8006ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec2:	00e2      	lsls	r2, r4, #3
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	4643      	mov	r3, r8
 8006eca:	18e3      	adds	r3, r4, r3
 8006ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	eb45 0303 	adc.w	r3, r5, r3
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	008b      	lsls	r3, r1, #2
 8006efa:	4621      	mov	r1, r4
 8006efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f00:	4621      	mov	r1, r4
 8006f02:	008a      	lsls	r2, r1, #2
 8006f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f08:	f7f9 fea0 	bl	8000c4c <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4b60      	ldr	r3, [pc, #384]	@ (8007094 <UART_SetConfig+0x4e4>)
 8006f12:	fba3 2302 	umull	r2, r3, r3, r2
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	011c      	lsls	r4, r3, #4
 8006f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	1891      	adds	r1, r2, r2
 8006f32:	61b9      	str	r1, [r7, #24]
 8006f34:	415b      	adcs	r3, r3
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	1851      	adds	r1, r2, r1
 8006f40:	6139      	str	r1, [r7, #16]
 8006f42:	4649      	mov	r1, r9
 8006f44:	414b      	adcs	r3, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f54:	4659      	mov	r1, fp
 8006f56:	00cb      	lsls	r3, r1, #3
 8006f58:	4651      	mov	r1, sl
 8006f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5e:	4651      	mov	r1, sl
 8006f60:	00ca      	lsls	r2, r1, #3
 8006f62:	4610      	mov	r0, r2
 8006f64:	4619      	mov	r1, r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	4642      	mov	r2, r8
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f70:	464b      	mov	r3, r9
 8006f72:	460a      	mov	r2, r1
 8006f74:	eb42 0303 	adc.w	r3, r2, r3
 8006f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f94:	4649      	mov	r1, r9
 8006f96:	008b      	lsls	r3, r1, #2
 8006f98:	4641      	mov	r1, r8
 8006f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	008a      	lsls	r2, r1, #2
 8006fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fa6:	f7f9 fe51 	bl	8000c4c <__aeabi_uldivmod>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4b38      	ldr	r3, [pc, #224]	@ (8007094 <UART_SetConfig+0x4e4>)
 8006fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	2264      	movs	r2, #100	@ 0x64
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	1acb      	subs	r3, r1, r3
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	3332      	adds	r3, #50	@ 0x32
 8006fc4:	4a33      	ldr	r2, [pc, #204]	@ (8007094 <UART_SetConfig+0x4e4>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	1891      	adds	r1, r2, r2
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	415b      	adcs	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	1851      	adds	r1, r2, r1
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	414b      	adcs	r3, r1
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007008:	4659      	mov	r1, fp
 800700a:	00cb      	lsls	r3, r1, #3
 800700c:	4651      	mov	r1, sl
 800700e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007012:	4651      	mov	r1, sl
 8007014:	00ca      	lsls	r2, r1, #3
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	4603      	mov	r3, r0
 800701c:	4642      	mov	r2, r8
 800701e:	189b      	adds	r3, r3, r2
 8007020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007022:	464b      	mov	r3, r9
 8007024:	460a      	mov	r2, r1
 8007026:	eb42 0303 	adc.w	r3, r2, r3
 800702a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	663b      	str	r3, [r7, #96]	@ 0x60
 8007036:	667a      	str	r2, [r7, #100]	@ 0x64
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007044:	4649      	mov	r1, r9
 8007046:	008b      	lsls	r3, r1, #2
 8007048:	4641      	mov	r1, r8
 800704a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704e:	4641      	mov	r1, r8
 8007050:	008a      	lsls	r2, r1, #2
 8007052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007056:	f7f9 fdf9 	bl	8000c4c <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <UART_SetConfig+0x4e4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	@ 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	3332      	adds	r3, #50	@ 0x32
 8007072:	4a08      	ldr	r2, [pc, #32]	@ (8007094 <UART_SetConfig+0x4e4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4422      	add	r2, r4
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800708e:	46bd      	mov	sp, r7
 8007090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007094:	51eb851f 	.word	0x51eb851f

08007098 <__NVIC_SetPriority>:
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db0a      	blt.n	80070c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	490c      	ldr	r1, [pc, #48]	@ (80070e4 <__NVIC_SetPriority+0x4c>)
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	0112      	lsls	r2, r2, #4
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	440b      	add	r3, r1
 80070bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070c0:	e00a      	b.n	80070d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4908      	ldr	r1, [pc, #32]	@ (80070e8 <__NVIC_SetPriority+0x50>)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	3b04      	subs	r3, #4
 80070d0:	0112      	lsls	r2, r2, #4
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	440b      	add	r3, r1
 80070d6:	761a      	strb	r2, [r3, #24]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000e100 	.word	0xe000e100
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070f0:	2100      	movs	r1, #0
 80070f2:	f06f 0004 	mvn.w	r0, #4
 80070f6:	f7ff ffcf 	bl	8007098 <__NVIC_SetPriority>
#endif
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007106:	f3ef 8305 	mrs	r3, IPSR
 800710a:	603b      	str	r3, [r7, #0]
  return(result);
 800710c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007112:	f06f 0305 	mvn.w	r3, #5
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	e00c      	b.n	8007134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800711a:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <osKernelInitialize+0x44>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007122:	4b08      	ldr	r3, [pc, #32]	@ (8007144 <osKernelInitialize+0x44>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007128:	2300      	movs	r3, #0
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	e002      	b.n	8007134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007134:	687b      	ldr	r3, [r7, #4]
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	200047a0 	.word	0x200047a0

08007148 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	603b      	str	r3, [r7, #0]
  return(result);
 8007154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <osKernelStart+0x1a>
    stat = osErrorISR;
 800715a:	f06f 0305 	mvn.w	r3, #5
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	e010      	b.n	8007184 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <osKernelStart+0x48>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d109      	bne.n	800717e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800716a:	f7ff ffbf 	bl	80070ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <osKernelStart+0x48>)
 8007170:	2202      	movs	r2, #2
 8007172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007174:	f001 f87a 	bl	800826c <vTaskStartScheduler>
      stat = osOK;
 8007178:	2300      	movs	r3, #0
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	e002      	b.n	8007184 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800717e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007184:	687b      	ldr	r3, [r7, #4]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200047a0 	.word	0x200047a0

08007194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	@ 0x38
 8007198:	af04      	add	r7, sp, #16
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a4:	f3ef 8305 	mrs	r3, IPSR
 80071a8:	617b      	str	r3, [r7, #20]
  return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d17e      	bne.n	80072ae <osThreadNew+0x11a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07b      	beq.n	80072ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071b6:	2380      	movs	r3, #128	@ 0x80
 80071b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071ba:	2318      	movs	r3, #24
 80071bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d045      	beq.n	800725a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <osThreadNew+0x48>
        name = attr->name;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <osThreadNew+0x6e>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b38      	cmp	r3, #56	@ 0x38
 80071f4:	d805      	bhi.n	8007202 <osThreadNew+0x6e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <osThreadNew+0x72>
        return (NULL);
 8007202:	2300      	movs	r3, #0
 8007204:	e054      	b.n	80072b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00e      	beq.n	800723c <osThreadNew+0xa8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b5b      	cmp	r3, #91	@ 0x5b
 8007224:	d90a      	bls.n	800723c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <osThreadNew+0xa8>
        mem = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e010      	b.n	800725e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <osThreadNew+0xca>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <osThreadNew+0xca>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <osThreadNew+0xca>
          mem = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	e001      	b.n	800725e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d110      	bne.n	8007286 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a3a      	ldr	r2, [r7, #32]
 8007278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fe1a 	bl	8007eb4 <xTaskCreateStatic>
 8007280:	4603      	mov	r3, r0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	e013      	b.n	80072ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d110      	bne.n	80072ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fe68 	bl	8007f74 <xTaskCreate>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d001      	beq.n	80072ae <osThreadNew+0x11a>
            hTask = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072ae:	693b      	ldr	r3, [r7, #16]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3728      	adds	r7, #40	@ 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072c0:	f3ef 8305 	mrs	r3, IPSR
 80072c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <osDelay+0x1c>
    stat = osErrorISR;
 80072cc:	f06f 0305 	mvn.w	r3, #5
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e007      	b.n	80072e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 ff8e 	bl	8008200 <vTaskDelay>
    }
  }

  return (stat);
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a07      	ldr	r2, [pc, #28]	@ (800731c <vApplicationGetIdleTaskMemory+0x2c>)
 8007300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4a06      	ldr	r2, [pc, #24]	@ (8007320 <vApplicationGetIdleTaskMemory+0x30>)
 8007306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2280      	movs	r2, #128	@ 0x80
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	200047a4 	.word	0x200047a4
 8007320:	20004800 	.word	0x20004800

08007324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4a07      	ldr	r2, [pc, #28]	@ (8007350 <vApplicationGetTimerTaskMemory+0x2c>)
 8007334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4a06      	ldr	r2, [pc, #24]	@ (8007354 <vApplicationGetTimerTaskMemory+0x30>)
 800733a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20004a00 	.word	0x20004a00
 8007354:	20004a5c 	.word	0x20004a5c

08007358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f103 0208 	add.w	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f103 0208 	add.w	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f103 0208 	add.w	r2, r3, #8
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007410:	d103      	bne.n	800741a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e00c      	b.n	8007434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3308      	adds	r3, #8
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e002      	b.n	8007428 <vListInsert+0x2e>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	d2f6      	bcs.n	8007422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6892      	ldr	r2, [r2, #8]
 8007482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6852      	ldr	r2, [r2, #4]
 800748c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d103      	bne.n	80074a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	1e5a      	subs	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10b      	bne.n	80074ec <xQueueGenericReset+0x2c>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60bb      	str	r3, [r7, #8]
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	e7fd      	b.n	80074e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074ec:	f002 f8a4 	bl	8009638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f8:	68f9      	ldr	r1, [r7, #12]
 80074fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751c:	3b01      	subs	r3, #1
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	441a      	add	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	22ff      	movs	r2, #255	@ 0xff
 8007530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	22ff      	movs	r2, #255	@ 0xff
 8007538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d114      	bne.n	800756c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01a      	beq.n	8007580 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3310      	adds	r3, #16
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f91a 	bl	8008788 <xTaskRemoveFromEventList>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d012      	beq.n	8007580 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800755a:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <xQueueGenericReset+0xd0>)
 800755c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	e009      	b.n	8007580 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3310      	adds	r3, #16
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fef1 	bl	8007358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3324      	adds	r3, #36	@ 0x24
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff feec 	bl	8007358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007580:	f002 f88c 	bl	800969c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007584:	2301      	movs	r3, #1
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08e      	sub	sp, #56	@ 0x38
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <xQueueGenericCreateStatic+0x56>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <xQueueGenericCreateStatic+0x5a>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericCreateStatic+0x5c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	623b      	str	r3, [r7, #32]
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <xQueueGenericCreateStatic+0x84>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <xQueueGenericCreateStatic+0x88>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <xQueueGenericCreateStatic+0x8a>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10b      	bne.n	800763a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	61fb      	str	r3, [r7, #28]
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	e7fd      	b.n	8007636 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800763a:	2350      	movs	r3, #80	@ 0x50
 800763c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b50      	cmp	r3, #80	@ 0x50
 8007642:	d00b      	beq.n	800765c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	61bb      	str	r3, [r7, #24]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800765c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007670:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f805 	bl	800768e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3730      	adds	r7, #48	@ 0x30
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	e002      	b.n	80076b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076bc:	2101      	movs	r1, #1
 80076be:	69b8      	ldr	r0, [r7, #24]
 80076c0:	f7ff fefe 	bl	80074c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	78fa      	ldrb	r2, [r7, #3]
 80076c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	@ 0x38
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericSend+0x34>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <xQueueGenericSend+0x42>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <xQueueGenericSend+0x46>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericSend+0x48>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xQueueGenericSend+0x64>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d103      	bne.n	8007746 <xQueueGenericSend+0x72>
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <xQueueGenericSend+0x76>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <xQueueGenericSend+0x78>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <xQueueGenericSend+0x94>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007768:	f001 f9f6 	bl	8008b58 <xTaskGetSchedulerState>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <xQueueGenericSend+0xa4>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <xQueueGenericSend+0xa8>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <xQueueGenericSend+0xaa>
 800777c:	2300      	movs	r3, #0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <xQueueGenericSend+0xc6>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	61fb      	str	r3, [r7, #28]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800779a:	f001 ff4d 	bl	8009638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <xQueueGenericSend+0xdc>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d129      	bne.n	8007804 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077b6:	f000 fa0f 	bl	8007bd8 <prvCopyDataToQueue>
 80077ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	3324      	adds	r3, #36	@ 0x24
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 ffdd 	bl	8008788 <xTaskRemoveFromEventList>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077d4:	4b3f      	ldr	r3, [pc, #252]	@ (80078d4 <xQueueGenericSend+0x200>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	e00a      	b.n	80077fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077ec:	4b39      	ldr	r3, [pc, #228]	@ (80078d4 <xQueueGenericSend+0x200>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077fc:	f001 ff4e 	bl	800969c <vPortExitCritical>
				return pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	e063      	b.n	80078cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800780a:	f001 ff47 	bl	800969c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800780e:	2300      	movs	r3, #0
 8007810:	e05c      	b.n	80078cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f83f 	bl	80088a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007826:	f001 ff39 	bl	800969c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800782a:	f000 fd87 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782e:	f001 ff03 	bl	8009638 <vPortEnterCritical>
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007838:	b25b      	sxtb	r3, r3
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800783e:	d103      	bne.n	8007848 <xQueueGenericSend+0x174>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800784e:	b25b      	sxtb	r3, r3
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007854:	d103      	bne.n	800785e <xQueueGenericSend+0x18a>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800785e:	f001 ff1d 	bl	800969c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007862:	1d3a      	adds	r2, r7, #4
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f001 f82e 	bl	80088cc <xTaskCheckForTimeOut>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d124      	bne.n	80078c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007876:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007878:	f000 faa6 	bl	8007dc8 <prvIsQueueFull>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f000 ff2a 	bl	80086e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007892:	f000 fa31 	bl	8007cf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007896:	f000 fd5f 	bl	8008358 <xTaskResumeAll>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f af7c 	bne.w	800779a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078a2:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <xQueueGenericSend+0x200>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	e772      	b.n	800779a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078b6:	f000 fa1f 	bl	8007cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ba:	f000 fd4d 	bl	8008358 <xTaskResumeAll>
 80078be:	e76c      	b.n	800779a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078c2:	f000 fa19 	bl	8007cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c6:	f000 fd47 	bl	8008358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3738      	adds	r7, #56	@ 0x38
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b090      	sub	sp, #64	@ 0x40
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <xQueueGenericSendFromISR+0x3e>
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <xQueueGenericSendFromISR+0x42>
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <xQueueGenericSendFromISR+0x44>
 800791a:	2300      	movs	r3, #0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d103      	bne.n	8007946 <xQueueGenericSendFromISR+0x6e>
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <xQueueGenericSendFromISR+0x72>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <xQueueGenericSendFromISR+0x74>
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623b      	str	r3, [r7, #32]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007968:	f001 ff46 	bl	80097f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800796c:	f3ef 8211 	mrs	r2, BASEPRI
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61fa      	str	r2, [r7, #28]
 8007982:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007984:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <xQueueGenericSendFromISR+0xc2>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d12f      	bne.n	80079fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079b0:	f000 f912 	bl	8007bd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079bc:	d112      	bne.n	80079e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	3324      	adds	r3, #36	@ 0x24
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fedc 	bl	8008788 <xTaskRemoveFromEventList>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00e      	beq.n	80079f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e007      	b.n	80079f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80079e8:	3301      	adds	r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	b25a      	sxtb	r2, r3
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079f4:	2301      	movs	r3, #1
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80079f8:	e001      	b.n	80079fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3740      	adds	r7, #64	@ 0x40
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	@ 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xQueueReceive+0x32>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	623b      	str	r3, [r7, #32]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <xQueueReceive+0x40>
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <xQueueReceive+0x44>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <xQueueReceive+0x46>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10b      	bne.n	8007a76 <xQueueReceive+0x62>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61fb      	str	r3, [r7, #28]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a76:	f001 f86f 	bl	8008b58 <xTaskGetSchedulerState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <xQueueReceive+0x72>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <xQueueReceive+0x76>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueReceive+0x78>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <xQueueReceive+0x94>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	61bb      	str	r3, [r7, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aa8:	f001 fdc6 	bl	8009638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01f      	beq.n	8007af8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007abc:	f000 f8f6 	bl	8007cac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	1e5a      	subs	r2, r3, #1
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00f      	beq.n	8007af0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	3310      	adds	r3, #16
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fe57 	bl	8008788 <xTaskRemoveFromEventList>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd4 <xQueueReceive+0x1c0>)
 8007ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007af0:	f001 fdd4 	bl	800969c <vPortExitCritical>
				return pdPASS;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e069      	b.n	8007bcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007afe:	f001 fdcd 	bl	800969c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e062      	b.n	8007bcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b0c:	f107 0310 	add.w	r3, r7, #16
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fec5 	bl	80088a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b16:	2301      	movs	r3, #1
 8007b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b1a:	f001 fdbf 	bl	800969c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b1e:	f000 fc0d 	bl	800833c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b22:	f001 fd89 	bl	8009638 <vPortEnterCritical>
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b32:	d103      	bne.n	8007b3c <xQueueReceive+0x128>
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b48:	d103      	bne.n	8007b52 <xQueueReceive+0x13e>
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b52:	f001 fda3 	bl	800969c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b56:	1d3a      	adds	r2, r7, #4
 8007b58:	f107 0310 	add.w	r3, r7, #16
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 feb4 	bl	80088cc <xTaskCheckForTimeOut>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d123      	bne.n	8007bb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6c:	f000 f916 	bl	8007d9c <prvIsQueueEmpty>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d017      	beq.n	8007ba6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	3324      	adds	r3, #36	@ 0x24
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fdb0 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b86:	f000 f8b7 	bl	8007cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b8a:	f000 fbe5 	bl	8008358 <xTaskResumeAll>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d189      	bne.n	8007aa8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b94:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <xQueueReceive+0x1c0>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	e780      	b.n	8007aa8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ba8:	f000 f8a6 	bl	8007cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bac:	f000 fbd4 	bl	8008358 <xTaskResumeAll>
 8007bb0:	e77a      	b.n	8007aa8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb4:	f000 f8a0 	bl	8007cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb8:	f000 fbce 	bl	8008358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bbe:	f000 f8ed 	bl	8007d9c <prvIsQueueEmpty>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f43f af6f 	beq.w	8007aa8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3730      	adds	r7, #48	@ 0x30
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	e000ed04 	.word	0xe000ed04

08007bd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10d      	bne.n	8007c12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d14d      	bne.n	8007c9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 ffc6 	bl	8008b94 <xTaskPriorityDisinherit>
 8007c08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	e043      	b.n	8007c9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d119      	bne.n	8007c4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6858      	ldr	r0, [r3, #4]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c20:	461a      	mov	r2, r3
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	f00d fa8d 	bl	8015142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c30:	441a      	add	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d32b      	bcc.n	8007c9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e026      	b.n	8007c9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68d8      	ldr	r0, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	461a      	mov	r2, r3
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	f00d fa73 	bl	8015142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	425b      	negs	r3, r3
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d207      	bcs.n	8007c88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c80:	425b      	negs	r3, r3
 8007c82:	441a      	add	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d105      	bne.n	8007c9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ca2:	697b      	ldr	r3, [r7, #20]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d018      	beq.n	8007cf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	441a      	add	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d303      	bcc.n	8007ce0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68d9      	ldr	r1, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6838      	ldr	r0, [r7, #0]
 8007cec:	f00d fa29 	bl	8015142 <memcpy>
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d00:	f001 fc9a 	bl	8009638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d0c:	e011      	b.n	8007d32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d012      	beq.n	8007d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3324      	adds	r3, #36	@ 0x24
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fd34 	bl	8008788 <xTaskRemoveFromEventList>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d26:	f000 fe35 	bl	8008994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dce9      	bgt.n	8007d0e <prvUnlockQueue+0x16>
 8007d3a:	e000      	b.n	8007d3e <prvUnlockQueue+0x46>
					break;
 8007d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	22ff      	movs	r2, #255	@ 0xff
 8007d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d46:	f001 fca9 	bl	800969c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d4a:	f001 fc75 	bl	8009638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d56:	e011      	b.n	8007d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d012      	beq.n	8007d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3310      	adds	r3, #16
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fd0f 	bl	8008788 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d70:	f000 fe10 	bl	8008994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dce9      	bgt.n	8007d58 <prvUnlockQueue+0x60>
 8007d84:	e000      	b.n	8007d88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	22ff      	movs	r2, #255	@ 0xff
 8007d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d90:	f001 fc84 	bl	800969c <vPortExitCritical>
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da4:	f001 fc48 	bl	8009638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e001      	b.n	8007dba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dba:	f001 fc6f 	bl	800969c <vPortExitCritical>

	return xReturn;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd0:	f001 fc32 	bl	8009638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d102      	bne.n	8007de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e001      	b.n	8007dea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dea:	f001 fc57 	bl	800969c <vPortExitCritical>

	return xReturn;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e014      	b.n	8007e32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e08:	4a0f      	ldr	r2, [pc, #60]	@ (8007e48 <vQueueAddToRegistry+0x50>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e14:	490c      	ldr	r1, [pc, #48]	@ (8007e48 <vQueueAddToRegistry+0x50>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e48 <vQueueAddToRegistry+0x50>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e2a:	e006      	b.n	8007e3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b07      	cmp	r3, #7
 8007e36:	d9e7      	bls.n	8007e08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20004e5c 	.word	0x20004e5c

08007e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e5c:	f001 fbec 	bl	8009638 <vPortEnterCritical>
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e6c:	d103      	bne.n	8007e76 <vQueueWaitForMessageRestricted+0x2a>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e7c:	b25b      	sxtb	r3, r3
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e82:	d103      	bne.n	8007e8c <vQueueWaitForMessageRestricted+0x40>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e8c:	f001 fc06 	bl	800969c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d106      	bne.n	8007ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3324      	adds	r3, #36	@ 0x24
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fc45 	bl	8008730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ea6:	6978      	ldr	r0, [r7, #20]
 8007ea8:	f7ff ff26 	bl	8007cf8 <prvUnlockQueue>
	}
 8007eac:	bf00      	nop
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08e      	sub	sp, #56	@ 0x38
 8007eb8:	af04      	add	r7, sp, #16
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61fb      	str	r3, [r7, #28]
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	e7fd      	b.n	8007efa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007efe:	235c      	movs	r3, #92	@ 0x5c
 8007f00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f06:	d00b      	beq.n	8007f20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61bb      	str	r3, [r7, #24]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01e      	beq.n	8007f66 <xTaskCreateStatic+0xb2>
 8007f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f40:	2300      	movs	r3, #0
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	f107 0314 	add.w	r3, r7, #20
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f850 	bl	8007ffe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f60:	f000 f8de 	bl	8008120 <prvAddNewTaskToReadyList>
 8007f64:	e001      	b.n	8007f6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f6a:	697b      	ldr	r3, [r7, #20]
	}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3728      	adds	r7, #40	@ 0x28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	@ 0x30
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	4613      	mov	r3, r2
 8007f82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fc77 	bl	800987c <pvPortMalloc>
 8007f8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f96:	205c      	movs	r0, #92	@ 0x5c
 8007f98:	f001 fc70 	bl	800987c <pvPortMalloc>
 8007f9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007faa:	e005      	b.n	8007fb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	f001 fd33 	bl	8009a18 <vPortFree>
 8007fb2:	e001      	b.n	8007fb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d017      	beq.n	8007fee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fc6:	88fa      	ldrh	r2, [r7, #6]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f80e 	bl	8007ffe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fe2:	69f8      	ldr	r0, [r7, #28]
 8007fe4:	f000 f89c 	bl	8008120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	e002      	b.n	8007ff4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ff2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b088      	sub	sp, #32
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	461a      	mov	r2, r3
 8008016:	21a5      	movs	r1, #165	@ 0xa5
 8008018:	f00c ffca 	bl	8014fb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008026:	3b01      	subs	r3, #1
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f023 0307 	bic.w	r3, r3, #7
 8008034:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	617b      	str	r3, [r7, #20]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01f      	beq.n	800809e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	e012      	b.n	800808a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	7819      	ldrb	r1, [r3, #0]
 800806c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	3334      	adds	r3, #52	@ 0x34
 8008074:	460a      	mov	r2, r1
 8008076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b0f      	cmp	r3, #15
 800808e:	d9e9      	bls.n	8008064 <prvInitialiseNewTask+0x66>
 8008090:	e000      	b.n	8008094 <prvInitialiseNewTask+0x96>
			{
				break;
 8008092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800809c:	e003      	b.n	80080a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	2b37      	cmp	r3, #55	@ 0x37
 80080aa:	d901      	bls.n	80080b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080ac:	2337      	movs	r3, #55	@ 0x37
 80080ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	2200      	movs	r2, #0
 80080c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff f966 	bl	8007398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	3318      	adds	r3, #24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff f961 	bl	8007398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2200      	movs	r2, #0
 80080f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	68f9      	ldr	r1, [r7, #12]
 80080fe:	69b8      	ldr	r0, [r7, #24]
 8008100:	f001 f966 	bl	80093d0 <pxPortInitialiseStack>
 8008104:	4602      	mov	r2, r0
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008116:	bf00      	nop
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008128:	f001 fa86 	bl	8009638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800812c:	4b2d      	ldr	r3, [pc, #180]	@ (80081e4 <prvAddNewTaskToReadyList+0xc4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	4a2c      	ldr	r2, [pc, #176]	@ (80081e4 <prvAddNewTaskToReadyList+0xc4>)
 8008134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008136:	4b2c      	ldr	r3, [pc, #176]	@ (80081e8 <prvAddNewTaskToReadyList+0xc8>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800813e:	4a2a      	ldr	r2, [pc, #168]	@ (80081e8 <prvAddNewTaskToReadyList+0xc8>)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008144:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <prvAddNewTaskToReadyList+0xc4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d110      	bne.n	800816e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800814c:	f000 fc46 	bl	80089dc <prvInitialiseTaskLists>
 8008150:	e00d      	b.n	800816e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008152:	4b26      	ldr	r3, [pc, #152]	@ (80081ec <prvAddNewTaskToReadyList+0xcc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800815a:	4b23      	ldr	r3, [pc, #140]	@ (80081e8 <prvAddNewTaskToReadyList+0xc8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	429a      	cmp	r2, r3
 8008166:	d802      	bhi.n	800816e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008168:	4a1f      	ldr	r2, [pc, #124]	@ (80081e8 <prvAddNewTaskToReadyList+0xc8>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800816e:	4b20      	ldr	r3, [pc, #128]	@ (80081f0 <prvAddNewTaskToReadyList+0xd0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	4a1e      	ldr	r2, [pc, #120]	@ (80081f0 <prvAddNewTaskToReadyList+0xd0>)
 8008176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008178:	4b1d      	ldr	r3, [pc, #116]	@ (80081f0 <prvAddNewTaskToReadyList+0xd0>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008184:	4b1b      	ldr	r3, [pc, #108]	@ (80081f4 <prvAddNewTaskToReadyList+0xd4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <prvAddNewTaskToReadyList+0x74>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <prvAddNewTaskToReadyList+0xd4>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a15      	ldr	r2, [pc, #84]	@ (80081f8 <prvAddNewTaskToReadyList+0xd8>)
 80081a2:	441a      	add	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7ff f901 	bl	80073b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081b0:	f001 fa74 	bl	800969c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081b4:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <prvAddNewTaskToReadyList+0xcc>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081bc:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <prvAddNewTaskToReadyList+0xc8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d207      	bcs.n	80081da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081ca:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <prvAddNewTaskToReadyList+0xdc>)
 80081cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20005370 	.word	0x20005370
 80081e8:	20004e9c 	.word	0x20004e9c
 80081ec:	2000537c 	.word	0x2000537c
 80081f0:	2000538c 	.word	0x2000538c
 80081f4:	20005378 	.word	0x20005378
 80081f8:	20004ea0 	.word	0x20004ea0
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d018      	beq.n	8008244 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008212:	4b14      	ldr	r3, [pc, #80]	@ (8008264 <vTaskDelay+0x64>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <vTaskDelay+0x32>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60bb      	str	r3, [r7, #8]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008232:	f000 f883 	bl	800833c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008236:	2100      	movs	r1, #0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fd1b 	bl	8008c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800823e:	f000 f88b 	bl	8008358 <xTaskResumeAll>
 8008242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d107      	bne.n	800825a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800824a:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <vTaskDelay+0x68>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20005398 	.word	0x20005398
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	@ 0x28
 8008270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800827a:	463a      	mov	r2, r7
 800827c:	1d39      	adds	r1, r7, #4
 800827e:	f107 0308 	add.w	r3, r7, #8
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff f834 	bl	80072f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	9202      	str	r2, [sp, #8]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	460a      	mov	r2, r1
 800829a:	4922      	ldr	r1, [pc, #136]	@ (8008324 <vTaskStartScheduler+0xb8>)
 800829c:	4822      	ldr	r0, [pc, #136]	@ (8008328 <vTaskStartScheduler+0xbc>)
 800829e:	f7ff fe09 	bl	8007eb4 <xTaskCreateStatic>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4a21      	ldr	r2, [pc, #132]	@ (800832c <vTaskStartScheduler+0xc0>)
 80082a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082a8:	4b20      	ldr	r3, [pc, #128]	@ (800832c <vTaskStartScheduler+0xc0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	e001      	b.n	80082ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d102      	bne.n	80082c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80082c0:	f000 fd2c 	bl	8008d1c <xTimerCreateTimerTask>
 80082c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d116      	bne.n	80082fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	613b      	str	r3, [r7, #16]
}
 80082de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082e0:	4b13      	ldr	r3, [pc, #76]	@ (8008330 <vTaskStartScheduler+0xc4>)
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082e8:	4b12      	ldr	r3, [pc, #72]	@ (8008334 <vTaskStartScheduler+0xc8>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082ee:	4b12      	ldr	r3, [pc, #72]	@ (8008338 <vTaskStartScheduler+0xcc>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082f4:	f001 f8fc 	bl	80094f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082f8:	e00f      	b.n	800831a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008300:	d10b      	bne.n	800831a <vTaskStartScheduler+0xae>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60fb      	str	r3, [r7, #12]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <vTaskStartScheduler+0xaa>
}
 800831a:	bf00      	nop
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	0801640c 	.word	0x0801640c
 8008328:	080089ad 	.word	0x080089ad
 800832c:	20005394 	.word	0x20005394
 8008330:	20005390 	.word	0x20005390
 8008334:	2000537c 	.word	0x2000537c
 8008338:	20005374 	.word	0x20005374

0800833c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008340:	4b04      	ldr	r3, [pc, #16]	@ (8008354 <vTaskSuspendAll+0x18>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a03      	ldr	r2, [pc, #12]	@ (8008354 <vTaskSuspendAll+0x18>)
 8008348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	20005398 	.word	0x20005398

08008358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008366:	4b42      	ldr	r3, [pc, #264]	@ (8008470 <xTaskResumeAll+0x118>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xTaskResumeAll+0x2e>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	603b      	str	r3, [r7, #0]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008386:	f001 f957 	bl	8009638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800838a:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <xTaskResumeAll+0x118>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3b01      	subs	r3, #1
 8008390:	4a37      	ldr	r2, [pc, #220]	@ (8008470 <xTaskResumeAll+0x118>)
 8008392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008394:	4b36      	ldr	r3, [pc, #216]	@ (8008470 <xTaskResumeAll+0x118>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d162      	bne.n	8008462 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800839c:	4b35      	ldr	r3, [pc, #212]	@ (8008474 <xTaskResumeAll+0x11c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d05e      	beq.n	8008462 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a4:	e02f      	b.n	8008406 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a6:	4b34      	ldr	r3, [pc, #208]	@ (8008478 <xTaskResumeAll+0x120>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3318      	adds	r3, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff f85a 	bl	800746c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff f855 	bl	800746c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	4b2d      	ldr	r3, [pc, #180]	@ (800847c <xTaskResumeAll+0x124>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d903      	bls.n	80083d6 <xTaskResumeAll+0x7e>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	4a2a      	ldr	r2, [pc, #168]	@ (800847c <xTaskResumeAll+0x124>)
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4a27      	ldr	r2, [pc, #156]	@ (8008480 <xTaskResumeAll+0x128>)
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7fe ffe0 	bl	80073b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f6:	4b23      	ldr	r3, [pc, #140]	@ (8008484 <xTaskResumeAll+0x12c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008400:	4b21      	ldr	r3, [pc, #132]	@ (8008488 <xTaskResumeAll+0x130>)
 8008402:	2201      	movs	r2, #1
 8008404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008406:	4b1c      	ldr	r3, [pc, #112]	@ (8008478 <xTaskResumeAll+0x120>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1cb      	bne.n	80083a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008414:	f000 fb80 	bl	8008b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008418:	4b1c      	ldr	r3, [pc, #112]	@ (800848c <xTaskResumeAll+0x134>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008424:	f000 f846 	bl	80084b4 <xTaskIncrementTick>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800842e:	4b16      	ldr	r3, [pc, #88]	@ (8008488 <xTaskResumeAll+0x130>)
 8008430:	2201      	movs	r2, #1
 8008432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3b01      	subs	r3, #1
 8008438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f1      	bne.n	8008424 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008440:	4b12      	ldr	r3, [pc, #72]	@ (800848c <xTaskResumeAll+0x134>)
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008446:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <xTaskResumeAll+0x130>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008452:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <xTaskResumeAll+0x138>)
 8008454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008462:	f001 f91b 	bl	800969c <vPortExitCritical>

	return xAlreadyYielded;
 8008466:	68bb      	ldr	r3, [r7, #8]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20005398 	.word	0x20005398
 8008474:	20005370 	.word	0x20005370
 8008478:	20005330 	.word	0x20005330
 800847c:	20005378 	.word	0x20005378
 8008480:	20004ea0 	.word	0x20004ea0
 8008484:	20004e9c 	.word	0x20004e9c
 8008488:	20005384 	.word	0x20005384
 800848c:	20005380 	.word	0x20005380
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800849a:	4b05      	ldr	r3, [pc, #20]	@ (80084b0 <xTaskGetTickCount+0x1c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084a0:	687b      	ldr	r3, [r7, #4]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20005374 	.word	0x20005374

080084b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084be:	4b4f      	ldr	r3, [pc, #316]	@ (80085fc <xTaskIncrementTick+0x148>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 8090 	bne.w	80085e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008600 <xTaskIncrementTick+0x14c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008600 <xTaskIncrementTick+0x14c>)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d121      	bne.n	8008520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80084dc:	4b49      	ldr	r3, [pc, #292]	@ (8008604 <xTaskIncrementTick+0x150>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	603b      	str	r3, [r7, #0]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <xTaskIncrementTick+0x46>
 80084fe:	4b41      	ldr	r3, [pc, #260]	@ (8008604 <xTaskIncrementTick+0x150>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	4b40      	ldr	r3, [pc, #256]	@ (8008608 <xTaskIncrementTick+0x154>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a3e      	ldr	r2, [pc, #248]	@ (8008604 <xTaskIncrementTick+0x150>)
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	4a3e      	ldr	r2, [pc, #248]	@ (8008608 <xTaskIncrementTick+0x154>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	4b3e      	ldr	r3, [pc, #248]	@ (800860c <xTaskIncrementTick+0x158>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	4a3c      	ldr	r2, [pc, #240]	@ (800860c <xTaskIncrementTick+0x158>)
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	f000 fafc 	bl	8008b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008520:	4b3b      	ldr	r3, [pc, #236]	@ (8008610 <xTaskIncrementTick+0x15c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	429a      	cmp	r2, r3
 8008528:	d349      	bcc.n	80085be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852a:	4b36      	ldr	r3, [pc, #216]	@ (8008604 <xTaskIncrementTick+0x150>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008534:	4b36      	ldr	r3, [pc, #216]	@ (8008610 <xTaskIncrementTick+0x15c>)
 8008536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800853a:	601a      	str	r2, [r3, #0]
					break;
 800853c:	e03f      	b.n	80085be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b31      	ldr	r3, [pc, #196]	@ (8008604 <xTaskIncrementTick+0x150>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d203      	bcs.n	800855e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008556:	4a2e      	ldr	r2, [pc, #184]	@ (8008610 <xTaskIncrementTick+0x15c>)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800855c:	e02f      	b.n	80085be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe ff82 	bl	800746c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3318      	adds	r3, #24
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe ff79 	bl	800746c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857e:	4b25      	ldr	r3, [pc, #148]	@ (8008614 <xTaskIncrementTick+0x160>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d903      	bls.n	800858e <xTaskIncrementTick+0xda>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858a:	4a22      	ldr	r2, [pc, #136]	@ (8008614 <xTaskIncrementTick+0x160>)
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4a1f      	ldr	r2, [pc, #124]	@ (8008618 <xTaskIncrementTick+0x164>)
 800859c:	441a      	add	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7fe ff04 	bl	80073b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ae:	4b1b      	ldr	r3, [pc, #108]	@ (800861c <xTaskIncrementTick+0x168>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3b8      	bcc.n	800852a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085bc:	e7b5      	b.n	800852a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085be:	4b17      	ldr	r3, [pc, #92]	@ (800861c <xTaskIncrementTick+0x168>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c4:	4914      	ldr	r1, [pc, #80]	@ (8008618 <xTaskIncrementTick+0x164>)
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d901      	bls.n	80085da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085da:	4b11      	ldr	r3, [pc, #68]	@ (8008620 <xTaskIncrementTick+0x16c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e004      	b.n	80085f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <xTaskIncrementTick+0x170>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008624 <xTaskIncrementTick+0x170>)
 80085f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20005398 	.word	0x20005398
 8008600:	20005374 	.word	0x20005374
 8008604:	20005328 	.word	0x20005328
 8008608:	2000532c 	.word	0x2000532c
 800860c:	20005388 	.word	0x20005388
 8008610:	20005390 	.word	0x20005390
 8008614:	20005378 	.word	0x20005378
 8008618:	20004ea0 	.word	0x20004ea0
 800861c:	20004e9c 	.word	0x20004e9c
 8008620:	20005384 	.word	0x20005384
 8008624:	20005380 	.word	0x20005380

08008628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800862e:	4b28      	ldr	r3, [pc, #160]	@ (80086d0 <vTaskSwitchContext+0xa8>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008636:	4b27      	ldr	r3, [pc, #156]	@ (80086d4 <vTaskSwitchContext+0xac>)
 8008638:	2201      	movs	r2, #1
 800863a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800863c:	e042      	b.n	80086c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800863e:	4b25      	ldr	r3, [pc, #148]	@ (80086d4 <vTaskSwitchContext+0xac>)
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008644:	4b24      	ldr	r3, [pc, #144]	@ (80086d8 <vTaskSwitchContext+0xb0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	e011      	b.n	8008670 <vTaskSwitchContext+0x48>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <vTaskSwitchContext+0x42>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	607b      	str	r3, [r7, #4]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <vTaskSwitchContext+0x3e>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3b01      	subs	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	491a      	ldr	r1, [pc, #104]	@ (80086dc <vTaskSwitchContext+0xb4>)
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0e3      	beq.n	800864c <vTaskSwitchContext+0x24>
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4a13      	ldr	r2, [pc, #76]	@ (80086dc <vTaskSwitchContext+0xb4>)
 8008690:	4413      	add	r3, r2
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3308      	adds	r3, #8
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d104      	bne.n	80086b4 <vTaskSwitchContext+0x8c>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	4a09      	ldr	r2, [pc, #36]	@ (80086e0 <vTaskSwitchContext+0xb8>)
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	4a06      	ldr	r2, [pc, #24]	@ (80086d8 <vTaskSwitchContext+0xb0>)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6013      	str	r3, [r2, #0]
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	20005398 	.word	0x20005398
 80086d4:	20005384 	.word	0x20005384
 80086d8:	20005378 	.word	0x20005378
 80086dc:	20004ea0 	.word	0x20004ea0
 80086e0:	20004e9c 	.word	0x20004e9c

080086e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	60fb      	str	r3, [r7, #12]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vTaskPlaceOnEventList+0x48>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3318      	adds	r3, #24
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fe fe70 	bl	80073fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800871a:	2101      	movs	r1, #1
 800871c:	6838      	ldr	r0, [r7, #0]
 800871e:	f000 faa9 	bl	8008c74 <prvAddCurrentTaskToDelayedList>
}
 8008722:	bf00      	nop
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20004e9c 	.word	0x20004e9c

08008730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	617b      	str	r3, [r7, #20]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <vTaskPlaceOnEventListRestricted+0x54>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3318      	adds	r3, #24
 8008760:	4619      	mov	r1, r3
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7fe fe25 	bl	80073b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800876e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008772:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	68b8      	ldr	r0, [r7, #8]
 8008778:	f000 fa7c 	bl	8008c74 <prvAddCurrentTaskToDelayedList>
	}
 800877c:	bf00      	nop
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20004e9c 	.word	0x20004e9c

08008788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	60fb      	str	r3, [r7, #12]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fe56 	bl	800746c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008838 <xTaskRemoveFromEventList+0xb0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11d      	bne.n	8008804 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fe4d 	bl	800746c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d6:	4b19      	ldr	r3, [pc, #100]	@ (800883c <xTaskRemoveFromEventList+0xb4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d903      	bls.n	80087e6 <xTaskRemoveFromEventList+0x5e>
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	4a16      	ldr	r2, [pc, #88]	@ (800883c <xTaskRemoveFromEventList+0xb4>)
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a13      	ldr	r2, [pc, #76]	@ (8008840 <xTaskRemoveFromEventList+0xb8>)
 80087f4:	441a      	add	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7fe fdd8 	bl	80073b2 <vListInsertEnd>
 8008802:	e005      	b.n	8008810 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3318      	adds	r3, #24
 8008808:	4619      	mov	r1, r3
 800880a:	480e      	ldr	r0, [pc, #56]	@ (8008844 <xTaskRemoveFromEventList+0xbc>)
 800880c:	f7fe fdd1 	bl	80073b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	4b0c      	ldr	r3, [pc, #48]	@ (8008848 <xTaskRemoveFromEventList+0xc0>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	429a      	cmp	r2, r3
 800881c:	d905      	bls.n	800882a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800881e:	2301      	movs	r3, #1
 8008820:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008822:	4b0a      	ldr	r3, [pc, #40]	@ (800884c <xTaskRemoveFromEventList+0xc4>)
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e001      	b.n	800882e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800882e:	697b      	ldr	r3, [r7, #20]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20005398 	.word	0x20005398
 800883c:	20005378 	.word	0x20005378
 8008840:	20004ea0 	.word	0x20004ea0
 8008844:	20005330 	.word	0x20005330
 8008848:	20004e9c 	.word	0x20004e9c
 800884c:	20005384 	.word	0x20005384

08008850 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60fb      	str	r3, [r7, #12]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008876:	f000 fedf 	bl	8009638 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800887a:	4b07      	ldr	r3, [pc, #28]	@ (8008898 <vTaskSetTimeOutState+0x48>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008882:	4b06      	ldr	r3, [pc, #24]	@ (800889c <vTaskSetTimeOutState+0x4c>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800888a:	f000 ff07 	bl	800969c <vPortExitCritical>
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20005388 	.word	0x20005388
 800889c:	20005374 	.word	0x20005374

080088a0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088a8:	4b06      	ldr	r3, [pc, #24]	@ (80088c4 <vTaskInternalSetTimeOutState+0x24>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <vTaskInternalSetTimeOutState+0x28>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	20005388 	.word	0x20005388
 80088c8:	20005374 	.word	0x20005374

080088cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10b      	bne.n	80088f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	613b      	str	r3, [r7, #16]
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	e7fd      	b.n	80088f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60fb      	str	r3, [r7, #12]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008912:	f000 fe91 	bl	8009638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008916:	4b1d      	ldr	r3, [pc, #116]	@ (800898c <xTaskCheckForTimeOut+0xc0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800892e:	d102      	bne.n	8008936 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	e023      	b.n	800897e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4b15      	ldr	r3, [pc, #84]	@ (8008990 <xTaskCheckForTimeOut+0xc4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d007      	beq.n	8008952 <xTaskCheckForTimeOut+0x86>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	d302      	bcc.n	8008952 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e015      	b.n	800897e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	429a      	cmp	r2, r3
 800895a:	d20b      	bcs.n	8008974 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff99 	bl	80088a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]
 8008972:	e004      	b.n	800897e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800897a:	2301      	movs	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800897e:	f000 fe8d 	bl	800969c <vPortExitCritical>

	return xReturn;
 8008982:	69fb      	ldr	r3, [r7, #28]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20005374 	.word	0x20005374
 8008990:	20005388 	.word	0x20005388

08008994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008998:	4b03      	ldr	r3, [pc, #12]	@ (80089a8 <vTaskMissedYield+0x14>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
}
 800899e:	bf00      	nop
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	20005384 	.word	0x20005384

080089ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089b4:	f000 f852 	bl	8008a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <prvIdleTask+0x28>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d9f9      	bls.n	80089b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089c0:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <prvIdleTask+0x2c>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089d0:	e7f0      	b.n	80089b4 <prvIdleTask+0x8>
 80089d2:	bf00      	nop
 80089d4:	20004ea0 	.word	0x20004ea0
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089e2:	2300      	movs	r3, #0
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	e00c      	b.n	8008a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4a12      	ldr	r2, [pc, #72]	@ (8008a3c <prvInitialiseTaskLists+0x60>)
 80089f4:	4413      	add	r3, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fcae 	bl	8007358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3301      	adds	r3, #1
 8008a00:	607b      	str	r3, [r7, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b37      	cmp	r3, #55	@ 0x37
 8008a06:	d9ef      	bls.n	80089e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a08:	480d      	ldr	r0, [pc, #52]	@ (8008a40 <prvInitialiseTaskLists+0x64>)
 8008a0a:	f7fe fca5 	bl	8007358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a0e:	480d      	ldr	r0, [pc, #52]	@ (8008a44 <prvInitialiseTaskLists+0x68>)
 8008a10:	f7fe fca2 	bl	8007358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a14:	480c      	ldr	r0, [pc, #48]	@ (8008a48 <prvInitialiseTaskLists+0x6c>)
 8008a16:	f7fe fc9f 	bl	8007358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a1a:	480c      	ldr	r0, [pc, #48]	@ (8008a4c <prvInitialiseTaskLists+0x70>)
 8008a1c:	f7fe fc9c 	bl	8007358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a20:	480b      	ldr	r0, [pc, #44]	@ (8008a50 <prvInitialiseTaskLists+0x74>)
 8008a22:	f7fe fc99 	bl	8007358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a26:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <prvInitialiseTaskLists+0x78>)
 8008a28:	4a05      	ldr	r2, [pc, #20]	@ (8008a40 <prvInitialiseTaskLists+0x64>)
 8008a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <prvInitialiseTaskLists+0x7c>)
 8008a2e:	4a05      	ldr	r2, [pc, #20]	@ (8008a44 <prvInitialiseTaskLists+0x68>)
 8008a30:	601a      	str	r2, [r3, #0]
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20004ea0 	.word	0x20004ea0
 8008a40:	20005300 	.word	0x20005300
 8008a44:	20005314 	.word	0x20005314
 8008a48:	20005330 	.word	0x20005330
 8008a4c:	20005344 	.word	0x20005344
 8008a50:	2000535c 	.word	0x2000535c
 8008a54:	20005328 	.word	0x20005328
 8008a58:	2000532c 	.word	0x2000532c

08008a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a62:	e019      	b.n	8008a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a64:	f000 fde8 	bl	8009638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a68:	4b10      	ldr	r3, [pc, #64]	@ (8008aac <prvCheckTasksWaitingTermination+0x50>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fcf9 	bl	800746c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <prvCheckTasksWaitingTermination+0x54>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab0 <prvCheckTasksWaitingTermination+0x54>)
 8008a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a84:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <prvCheckTasksWaitingTermination+0x58>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab4 <prvCheckTasksWaitingTermination+0x58>)
 8008a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a8e:	f000 fe05 	bl	800969c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f810 	bl	8008ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a98:	4b06      	ldr	r3, [pc, #24]	@ (8008ab4 <prvCheckTasksWaitingTermination+0x58>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e1      	bne.n	8008a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20005344 	.word	0x20005344
 8008ab0:	20005370 	.word	0x20005370
 8008ab4:	20005358 	.word	0x20005358

08008ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d108      	bne.n	8008adc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 ffa2 	bl	8009a18 <vPortFree>
				vPortFree( pxTCB );
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 ff9f 	bl	8009a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ada:	e019      	b.n	8008b10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d103      	bne.n	8008aee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 ff96 	bl	8009a18 <vPortFree>
	}
 8008aec:	e010      	b.n	8008b10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d00b      	beq.n	8008b10 <prvDeleteTCB+0x58>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	e7fd      	b.n	8008b0c <prvDeleteTCB+0x54>
	}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <prvResetNextTaskUnblockTime+0x38>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b28:	4b0a      	ldr	r3, [pc, #40]	@ (8008b54 <prvResetNextTaskUnblockTime+0x3c>)
 8008b2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b30:	e008      	b.n	8008b44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <prvResetNextTaskUnblockTime+0x38>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a04      	ldr	r2, [pc, #16]	@ (8008b54 <prvResetNextTaskUnblockTime+0x3c>)
 8008b42:	6013      	str	r3, [r2, #0]
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	20005328 	.word	0x20005328
 8008b54:	20005390 	.word	0x20005390

08008b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <xTaskGetSchedulerState+0x34>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b66:	2301      	movs	r3, #1
 8008b68:	607b      	str	r3, [r7, #4]
 8008b6a:	e008      	b.n	8008b7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b6c:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <xTaskGetSchedulerState+0x38>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b74:	2302      	movs	r3, #2
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	e001      	b.n	8008b7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b7e:	687b      	ldr	r3, [r7, #4]
	}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	2000537c 	.word	0x2000537c
 8008b90:	20005398 	.word	0x20005398

08008b94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d058      	beq.n	8008c5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008baa:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <xTaskPriorityDisinherit+0xd4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d00b      	beq.n	8008bcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
}
 8008bc6:	bf00      	nop
 8008bc8:	bf00      	nop
 8008bca:	e7fd      	b.n	8008bc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60bb      	str	r3, [r7, #8]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf0:	1e5a      	subs	r2, r3, #1
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d02c      	beq.n	8008c5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d128      	bne.n	8008c5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fc2c 	bl	800746c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <xTaskPriorityDisinherit+0xd8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <xTaskPriorityDisinherit+0xa8>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	4a0c      	ldr	r2, [pc, #48]	@ (8008c6c <xTaskPriorityDisinherit+0xd8>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4a09      	ldr	r2, [pc, #36]	@ (8008c70 <xTaskPriorityDisinherit+0xdc>)
 8008c4a:	441a      	add	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fbad 	bl	80073b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c5c:	697b      	ldr	r3, [r7, #20]
	}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20004e9c 	.word	0x20004e9c
 8008c6c:	20005378 	.word	0x20005378
 8008c70:	20004ea0 	.word	0x20004ea0

08008c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c7e:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <prvAddCurrentTaskToDelayedList+0x90>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c84:	4b20      	ldr	r3, [pc, #128]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fbee 	bl	800746c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c96:	d10a      	bne.n	8008cae <prvAddCurrentTaskToDelayedList+0x3a>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4819      	ldr	r0, [pc, #100]	@ (8008d0c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ca8:	f7fe fb83 	bl	80073b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cac:	e026      	b.n	8008cfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cb6:	4b14      	ldr	r3, [pc, #80]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d209      	bcs.n	8008cda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc6:	4b12      	ldr	r3, [pc, #72]	@ (8008d10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	4b0f      	ldr	r3, [pc, #60]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7fe fb91 	bl	80073fa <vListInsert>
}
 8008cd8:	e010      	b.n	8008cfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cda:	4b0e      	ldr	r3, [pc, #56]	@ (8008d14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fb87 	bl	80073fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cec:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d202      	bcs.n	8008cfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008cf6:	4a08      	ldr	r2, [pc, #32]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6013      	str	r3, [r2, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20005374 	.word	0x20005374
 8008d08:	20004e9c 	.word	0x20004e9c
 8008d0c:	2000535c 	.word	0x2000535c
 8008d10:	2000532c 	.word	0x2000532c
 8008d14:	20005328 	.word	0x20005328
 8008d18:	20005390 	.word	0x20005390

08008d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	@ 0x28
 8008d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d26:	f000 fb13 	bl	8009350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008da0 <xTimerCreateTimerTask+0x84>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d021      	beq.n	8008d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d3a:	1d3a      	adds	r2, r7, #4
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe faed 	bl	8007324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	9202      	str	r2, [sp, #8]
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	2302      	movs	r3, #2
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	4911      	ldr	r1, [pc, #68]	@ (8008da4 <xTimerCreateTimerTask+0x88>)
 8008d5e:	4812      	ldr	r0, [pc, #72]	@ (8008da8 <xTimerCreateTimerTask+0x8c>)
 8008d60:	f7ff f8a8 	bl	8007eb4 <xTaskCreateStatic>
 8008d64:	4603      	mov	r3, r0
 8008d66:	4a11      	ldr	r2, [pc, #68]	@ (8008dac <xTimerCreateTimerTask+0x90>)
 8008d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d6a:	4b10      	ldr	r3, [pc, #64]	@ (8008dac <xTimerCreateTimerTask+0x90>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d72:	2301      	movs	r3, #1
 8008d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	613b      	str	r3, [r7, #16]
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	e7fd      	b.n	8008d90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d94:	697b      	ldr	r3, [r7, #20]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200053cc 	.word	0x200053cc
 8008da4:	08016414 	.word	0x08016414
 8008da8:	08008ee9 	.word	0x08008ee9
 8008dac:	200053d0 	.word	0x200053d0

08008db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	@ 0x28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	623b      	str	r3, [r7, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008de0:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <xTimerGenericCommand+0x98>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02a      	beq.n	8008e3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b05      	cmp	r3, #5
 8008df8:	dc18      	bgt.n	8008e2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008dfa:	f7ff fead 	bl	8008b58 <xTaskGetSchedulerState>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d109      	bne.n	8008e18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e04:	4b10      	ldr	r3, [pc, #64]	@ (8008e48 <xTimerGenericCommand+0x98>)
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	f107 0110 	add.w	r1, r7, #16
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e10:	f7fe fc60 	bl	80076d4 <xQueueGenericSend>
 8008e14:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e16:	e012      	b.n	8008e3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e18:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <xTimerGenericCommand+0x98>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	f107 0110 	add.w	r1, r7, #16
 8008e20:	2300      	movs	r3, #0
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7fe fc56 	bl	80076d4 <xQueueGenericSend>
 8008e28:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e2a:	e008      	b.n	8008e3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e2c:	4b06      	ldr	r3, [pc, #24]	@ (8008e48 <xTimerGenericCommand+0x98>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	f107 0110 	add.w	r1, r7, #16
 8008e34:	2300      	movs	r3, #0
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	f7fe fd4e 	bl	80078d8 <xQueueGenericSendFromISR>
 8008e3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3728      	adds	r7, #40	@ 0x28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200053cc 	.word	0x200053cc

08008e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e56:	4b23      	ldr	r3, [pc, #140]	@ (8008ee4 <prvProcessExpiredTimer+0x98>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fb01 	bl	800746c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d023      	beq.n	8008ec0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	699a      	ldr	r2, [r3, #24]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	18d1      	adds	r1, r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	6978      	ldr	r0, [r7, #20]
 8008e86:	f000 f8d5 	bl	8009034 <prvInsertTimerInActiveList>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d020      	beq.n	8008ed2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e90:	2300      	movs	r3, #0
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	2300      	movs	r3, #0
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f7ff ff88 	bl	8008db0 <xTimerGenericCommand>
 8008ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d114      	bne.n	8008ed2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	60fb      	str	r3, [r7, #12]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	6978      	ldr	r0, [r7, #20]
 8008ed8:	4798      	blx	r3
}
 8008eda:	bf00      	nop
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200053c4 	.word	0x200053c4

08008ee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ef0:	f107 0308 	add.w	r3, r7, #8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f859 	bl	8008fac <prvGetNextExpireTime>
 8008efa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4619      	mov	r1, r3
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f805 	bl	8008f10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f06:	f000 f8d7 	bl	80090b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f0a:	bf00      	nop
 8008f0c:	e7f0      	b.n	8008ef0 <prvTimerTask+0x8>
	...

08008f10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f1a:	f7ff fa0f 	bl	800833c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f1e:	f107 0308 	add.w	r3, r7, #8
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 f866 	bl	8008ff4 <prvSampleTimeNow>
 8008f28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d130      	bne.n	8008f92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <prvProcessTimerOrBlockTask+0x3c>
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d806      	bhi.n	8008f4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f3e:	f7ff fa0b 	bl	8008358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ff81 	bl	8008e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f4a:	e024      	b.n	8008f96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d008      	beq.n	8008f64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f52:	4b13      	ldr	r3, [pc, #76]	@ (8008fa0 <prvProcessTimerOrBlockTask+0x90>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <prvProcessTimerOrBlockTask+0x50>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <prvProcessTimerOrBlockTask+0x52>
 8008f60:	2300      	movs	r3, #0
 8008f62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f64:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa4 <prvProcessTimerOrBlockTask+0x94>)
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7fe ff6b 	bl	8007e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f76:	f7ff f9ef 	bl	8008358 <xTaskResumeAll>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f80:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <prvProcessTimerOrBlockTask+0x98>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
}
 8008f90:	e001      	b.n	8008f96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f92:	f7ff f9e1 	bl	8008358 <xTaskResumeAll>
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200053c8 	.word	0x200053c8
 8008fa4:	200053cc 	.word	0x200053cc
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff0 <prvGetNextExpireTime+0x44>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <prvGetNextExpireTime+0x16>
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	e000      	b.n	8008fc4 <prvGetNextExpireTime+0x18>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fd0:	4b07      	ldr	r3, [pc, #28]	@ (8008ff0 <prvGetNextExpireTime+0x44>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e001      	b.n	8008fe0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	200053c4 	.word	0x200053c4

08008ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ffc:	f7ff fa4a 	bl	8008494 <xTaskGetTickCount>
 8009000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009002:	4b0b      	ldr	r3, [pc, #44]	@ (8009030 <prvSampleTimeNow+0x3c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	429a      	cmp	r2, r3
 800900a:	d205      	bcs.n	8009018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800900c:	f000 f93a 	bl	8009284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e002      	b.n	800901e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800901e:	4a04      	ldr	r2, [pc, #16]	@ (8009030 <prvSampleTimeNow+0x3c>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009024:	68fb      	ldr	r3, [r7, #12]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200053d4 	.word	0x200053d4

08009034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d812      	bhi.n	8009080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	429a      	cmp	r2, r3
 8009066:	d302      	bcc.n	800906e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e01b      	b.n	80090a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800906e:	4b10      	ldr	r3, [pc, #64]	@ (80090b0 <prvInsertTimerInActiveList+0x7c>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f7fe f9be 	bl	80073fa <vListInsert>
 800907e:	e012      	b.n	80090a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d206      	bcs.n	8009096 <prvInsertTimerInActiveList+0x62>
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d302      	bcc.n	8009096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	e007      	b.n	80090a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009096:	4b07      	ldr	r3, [pc, #28]	@ (80090b4 <prvInsertTimerInActiveList+0x80>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f7fe f9aa 	bl	80073fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200053c8 	.word	0x200053c8
 80090b4:	200053c4 	.word	0x200053c4

080090b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	@ 0x38
 80090bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090be:	e0ce      	b.n	800925e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da19      	bge.n	80090fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090c6:	1d3b      	adds	r3, r7, #4
 80090c8:	3304      	adds	r3, #4
 80090ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	61fb      	str	r3, [r7, #28]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090f0:	6850      	ldr	r0, [r2, #4]
 80090f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090f4:	6892      	ldr	r2, [r2, #8]
 80090f6:	4611      	mov	r1, r2
 80090f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f2c0 80ae 	blt.w	800925e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	3304      	adds	r3, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe f9aa 	bl	800746c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009118:	463b      	mov	r3, r7
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff ff6a 	bl	8008ff4 <prvSampleTimeNow>
 8009120:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b09      	cmp	r3, #9
 8009126:	f200 8097 	bhi.w	8009258 <prvProcessReceivedCommands+0x1a0>
 800912a:	a201      	add	r2, pc, #4	@ (adr r2, 8009130 <prvProcessReceivedCommands+0x78>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009159 	.word	0x08009159
 8009134:	08009159 	.word	0x08009159
 8009138:	08009159 	.word	0x08009159
 800913c:	080091cf 	.word	0x080091cf
 8009140:	080091e3 	.word	0x080091e3
 8009144:	0800922f 	.word	0x0800922f
 8009148:	08009159 	.word	0x08009159
 800914c:	08009159 	.word	0x08009159
 8009150:	080091cf 	.word	0x080091cf
 8009154:	080091e3 	.word	0x080091e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	b2da      	uxtb	r2, r3
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	18d1      	adds	r1, r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009178:	f7ff ff5c 	bl	8009034 <prvInsertTimerInActiveList>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d06c      	beq.n	800925c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009188:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800918a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d061      	beq.n	800925c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	441a      	add	r2, r3
 80091a0:	2300      	movs	r3, #0
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091aa:	f7ff fe01 	bl	8008db0 <xTimerGenericCommand>
 80091ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d152      	bne.n	800925c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	61bb      	str	r3, [r7, #24]
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	e7fd      	b.n	80091ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80091e0:	e03d      	b.n	800925e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	617b      	str	r3, [r7, #20]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009220:	18d1      	adds	r1, r2, r3
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009228:	f7ff ff04 	bl	8009034 <prvInsertTimerInActiveList>
					break;
 800922c:	e017      	b.n	800925e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800923c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923e:	f000 fbeb 	bl	8009a18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009242:	e00c      	b.n	800925e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	b2da      	uxtb	r2, r3
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009256:	e002      	b.n	800925e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009258:	bf00      	nop
 800925a:	e000      	b.n	800925e <prvProcessReceivedCommands+0x1a6>
					break;
 800925c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800925e:	4b08      	ldr	r3, [pc, #32]	@ (8009280 <prvProcessReceivedCommands+0x1c8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	1d39      	adds	r1, r7, #4
 8009264:	2200      	movs	r2, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fbd4 	bl	8007a14 <xQueueReceive>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	f47f af26 	bne.w	80090c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	3730      	adds	r7, #48	@ 0x30
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200053cc 	.word	0x200053cc

08009284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800928a:	e049      	b.n	8009320 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800928c:	4b2e      	ldr	r3, [pc, #184]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009296:	4b2c      	ldr	r3, [pc, #176]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe f8e1 	bl	800746c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02f      	beq.n	8009320 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d90e      	bls.n	80092f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092de:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f7fe f886 	bl	80073fa <vListInsert>
 80092ee:	e017      	b.n	8009320 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092f0:	2300      	movs	r3, #0
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	2100      	movs	r1, #0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fd58 	bl	8008db0 <xTimerGenericCommand>
 8009300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10b      	bne.n	8009320 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	603b      	str	r3, [r7, #0]
}
 800931a:	bf00      	nop
 800931c:	bf00      	nop
 800931e:	e7fd      	b.n	800931c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009320:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1b0      	bne.n	800928c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800932a:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009330:	4b06      	ldr	r3, [pc, #24]	@ (800934c <prvSwitchTimerLists+0xc8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a04      	ldr	r2, [pc, #16]	@ (8009348 <prvSwitchTimerLists+0xc4>)
 8009336:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009338:	4a04      	ldr	r2, [pc, #16]	@ (800934c <prvSwitchTimerLists+0xc8>)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6013      	str	r3, [r2, #0]
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200053c4 	.word	0x200053c4
 800934c:	200053c8 	.word	0x200053c8

08009350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009356:	f000 f96f 	bl	8009638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800935a:	4b15      	ldr	r3, [pc, #84]	@ (80093b0 <prvCheckForValidListAndQueue+0x60>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d120      	bne.n	80093a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009362:	4814      	ldr	r0, [pc, #80]	@ (80093b4 <prvCheckForValidListAndQueue+0x64>)
 8009364:	f7fd fff8 	bl	8007358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009368:	4813      	ldr	r0, [pc, #76]	@ (80093b8 <prvCheckForValidListAndQueue+0x68>)
 800936a:	f7fd fff5 	bl	8007358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800936e:	4b13      	ldr	r3, [pc, #76]	@ (80093bc <prvCheckForValidListAndQueue+0x6c>)
 8009370:	4a10      	ldr	r2, [pc, #64]	@ (80093b4 <prvCheckForValidListAndQueue+0x64>)
 8009372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009374:	4b12      	ldr	r3, [pc, #72]	@ (80093c0 <prvCheckForValidListAndQueue+0x70>)
 8009376:	4a10      	ldr	r2, [pc, #64]	@ (80093b8 <prvCheckForValidListAndQueue+0x68>)
 8009378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800937a:	2300      	movs	r3, #0
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <prvCheckForValidListAndQueue+0x74>)
 8009380:	4a11      	ldr	r2, [pc, #68]	@ (80093c8 <prvCheckForValidListAndQueue+0x78>)
 8009382:	2110      	movs	r1, #16
 8009384:	200a      	movs	r0, #10
 8009386:	f7fe f905 	bl	8007594 <xQueueGenericCreateStatic>
 800938a:	4603      	mov	r3, r0
 800938c:	4a08      	ldr	r2, [pc, #32]	@ (80093b0 <prvCheckForValidListAndQueue+0x60>)
 800938e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009390:	4b07      	ldr	r3, [pc, #28]	@ (80093b0 <prvCheckForValidListAndQueue+0x60>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <prvCheckForValidListAndQueue+0x60>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	490b      	ldr	r1, [pc, #44]	@ (80093cc <prvCheckForValidListAndQueue+0x7c>)
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fd2a 	bl	8007df8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093a4:	f000 f97a 	bl	800969c <vPortExitCritical>
}
 80093a8:	bf00      	nop
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200053cc 	.word	0x200053cc
 80093b4:	2000539c 	.word	0x2000539c
 80093b8:	200053b0 	.word	0x200053b0
 80093bc:	200053c4 	.word	0x200053c4
 80093c0:	200053c8 	.word	0x200053c8
 80093c4:	20005478 	.word	0x20005478
 80093c8:	200053d8 	.word	0x200053d8
 80093cc:	0801641c 	.word	0x0801641c

080093d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3b04      	subs	r3, #4
 80093e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80093e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3b04      	subs	r3, #4
 80093ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f023 0201 	bic.w	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3b04      	subs	r3, #4
 80093fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009400:	4a0c      	ldr	r2, [pc, #48]	@ (8009434 <pxPortInitialiseStack+0x64>)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3b14      	subs	r3, #20
 800940a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3b04      	subs	r3, #4
 8009416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f06f 0202 	mvn.w	r2, #2
 800941e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3b20      	subs	r3, #32
 8009424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009426:	68fb      	ldr	r3, [r7, #12]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	08009439 	.word	0x08009439

08009438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009442:	4b13      	ldr	r3, [pc, #76]	@ (8009490 <prvTaskExitError+0x58>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800944a:	d00b      	beq.n	8009464 <prvTaskExitError+0x2c>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60fb      	str	r3, [r7, #12]
}
 800945e:	bf00      	nop
 8009460:	bf00      	nop
 8009462:	e7fd      	b.n	8009460 <prvTaskExitError+0x28>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	60bb      	str	r3, [r7, #8]
}
 8009476:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009478:	bf00      	nop
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0fc      	beq.n	800947a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20000034 	.word	0x20000034
	...

080094a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094a0:	4b07      	ldr	r3, [pc, #28]	@ (80094c0 <pxCurrentTCBConst2>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	6808      	ldr	r0, [r1, #0]
 80094a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	f380 8809 	msr	PSP, r0
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	4770      	bx	lr
 80094bc:	f3af 8000 	nop.w

080094c0 <pxCurrentTCBConst2>:
 80094c0:	20004e9c 	.word	0x20004e9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094c8:	4808      	ldr	r0, [pc, #32]	@ (80094ec <prvPortStartFirstTask+0x24>)
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	6800      	ldr	r0, [r0, #0]
 80094ce:	f380 8808 	msr	MSP, r0
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f380 8814 	msr	CONTROL, r0
 80094da:	b662      	cpsie	i
 80094dc:	b661      	cpsie	f
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	df00      	svc	0
 80094e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ea:	bf00      	nop
 80094ec:	e000ed08 	.word	0xe000ed08

080094f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094f6:	4b47      	ldr	r3, [pc, #284]	@ (8009614 <xPortStartScheduler+0x124>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a47      	ldr	r2, [pc, #284]	@ (8009618 <xPortStartScheduler+0x128>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d10b      	bne.n	8009518 <xPortStartScheduler+0x28>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	613b      	str	r3, [r7, #16]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009518:	4b3e      	ldr	r3, [pc, #248]	@ (8009614 <xPortStartScheduler+0x124>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a3f      	ldr	r2, [pc, #252]	@ (800961c <xPortStartScheduler+0x12c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d10b      	bne.n	800953a <xPortStartScheduler+0x4a>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	60fb      	str	r3, [r7, #12]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800953a:	4b39      	ldr	r3, [pc, #228]	@ (8009620 <xPortStartScheduler+0x130>)
 800953c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	22ff      	movs	r2, #255	@ 0xff
 800954a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800955c:	b2da      	uxtb	r2, r3
 800955e:	4b31      	ldr	r3, [pc, #196]	@ (8009624 <xPortStartScheduler+0x134>)
 8009560:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009562:	4b31      	ldr	r3, [pc, #196]	@ (8009628 <xPortStartScheduler+0x138>)
 8009564:	2207      	movs	r2, #7
 8009566:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009568:	e009      	b.n	800957e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800956a:	4b2f      	ldr	r3, [pc, #188]	@ (8009628 <xPortStartScheduler+0x138>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3b01      	subs	r3, #1
 8009570:	4a2d      	ldr	r2, [pc, #180]	@ (8009628 <xPortStartScheduler+0x138>)
 8009572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	b2db      	uxtb	r3, r3
 800957c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009586:	2b80      	cmp	r3, #128	@ 0x80
 8009588:	d0ef      	beq.n	800956a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800958a:	4b27      	ldr	r3, [pc, #156]	@ (8009628 <xPortStartScheduler+0x138>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f1c3 0307 	rsb	r3, r3, #7
 8009592:	2b04      	cmp	r3, #4
 8009594:	d00b      	beq.n	80095ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60bb      	str	r3, [r7, #8]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009628 <xPortStartScheduler+0x138>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009628 <xPortStartScheduler+0x138>)
 80095b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009628 <xPortStartScheduler+0x138>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095c0:	4a19      	ldr	r2, [pc, #100]	@ (8009628 <xPortStartScheduler+0x138>)
 80095c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095cc:	4b17      	ldr	r3, [pc, #92]	@ (800962c <xPortStartScheduler+0x13c>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a16      	ldr	r2, [pc, #88]	@ (800962c <xPortStartScheduler+0x13c>)
 80095d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80095d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095d8:	4b14      	ldr	r3, [pc, #80]	@ (800962c <xPortStartScheduler+0x13c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a13      	ldr	r2, [pc, #76]	@ (800962c <xPortStartScheduler+0x13c>)
 80095de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80095e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095e4:	f000 f8da 	bl	800979c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095e8:	4b11      	ldr	r3, [pc, #68]	@ (8009630 <xPortStartScheduler+0x140>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095ee:	f000 f8f9 	bl	80097e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095f2:	4b10      	ldr	r3, [pc, #64]	@ (8009634 <xPortStartScheduler+0x144>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009634 <xPortStartScheduler+0x144>)
 80095f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80095fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095fe:	f7ff ff63 	bl	80094c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009602:	f7ff f811 	bl	8008628 <vTaskSwitchContext>
	prvTaskExitError();
 8009606:	f7ff ff17 	bl	8009438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	e000ed00 	.word	0xe000ed00
 8009618:	410fc271 	.word	0x410fc271
 800961c:	410fc270 	.word	0x410fc270
 8009620:	e000e400 	.word	0xe000e400
 8009624:	200054c8 	.word	0x200054c8
 8009628:	200054cc 	.word	0x200054cc
 800962c:	e000ed20 	.word	0xe000ed20
 8009630:	20000034 	.word	0x20000034
 8009634:	e000ef34 	.word	0xe000ef34

08009638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009652:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <vPortEnterCritical+0x5c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	4a0e      	ldr	r2, [pc, #56]	@ (8009694 <vPortEnterCritical+0x5c>)
 800965a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <vPortEnterCritical+0x5c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d110      	bne.n	8009686 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009664:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <vPortEnterCritical+0x60>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <vPortEnterCritical+0x4e>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	603b      	str	r3, [r7, #0]
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	e7fd      	b.n	8009682 <vPortEnterCritical+0x4a>
	}
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000034 	.word	0x20000034
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096a2:	4b12      	ldr	r3, [pc, #72]	@ (80096ec <vPortExitCritical+0x50>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <vPortExitCritical+0x26>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	607b      	str	r3, [r7, #4]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096c2:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <vPortExitCritical+0x50>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	4a08      	ldr	r2, [pc, #32]	@ (80096ec <vPortExitCritical+0x50>)
 80096ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096cc:	4b07      	ldr	r3, [pc, #28]	@ (80096ec <vPortExitCritical+0x50>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <vPortExitCritical+0x44>
 80096d4:	2300      	movs	r3, #0
 80096d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f383 8811 	msr	BASEPRI, r3
}
 80096de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	20000034 	.word	0x20000034

080096f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096f0:	f3ef 8009 	mrs	r0, PSP
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	4b15      	ldr	r3, [pc, #84]	@ (8009750 <pxCurrentTCBConst>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	f01e 0f10 	tst.w	lr, #16
 8009700:	bf08      	it	eq
 8009702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009714:	f380 8811 	msr	BASEPRI, r0
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f7fe ff82 	bl	8008628 <vTaskSwitchContext>
 8009724:	f04f 0000 	mov.w	r0, #0
 8009728:	f380 8811 	msr	BASEPRI, r0
 800972c:	bc09      	pop	{r0, r3}
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	6808      	ldr	r0, [r1, #0]
 8009732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009736:	f01e 0f10 	tst.w	lr, #16
 800973a:	bf08      	it	eq
 800973c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009740:	f380 8809 	msr	PSP, r0
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w

08009750 <pxCurrentTCBConst>:
 8009750:	20004e9c 	.word	0x20004e9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009772:	f7fe fe9f 	bl	80084b4 <xTaskIncrementTick>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <xPortSysTickHandler+0x40>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097a0:	4b0b      	ldr	r3, [pc, #44]	@ (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a6:	4b0b      	ldr	r3, [pc, #44]	@ (80097d4 <vPortSetupTimerInterrupt+0x38>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ac:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <vPortSetupTimerInterrupt+0x3c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	@ (80097dc <vPortSetupTimerInterrupt+0x40>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a09      	ldr	r2, [pc, #36]	@ (80097e0 <vPortSetupTimerInterrupt+0x44>)
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097be:	4b04      	ldr	r3, [pc, #16]	@ (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	e000e010 	.word	0xe000e010
 80097d4:	e000e018 	.word	0xe000e018
 80097d8:	20000004 	.word	0x20000004
 80097dc:	10624dd3 	.word	0x10624dd3
 80097e0:	e000e014 	.word	0xe000e014

080097e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80097f4 <vPortEnableVFP+0x10>
 80097e8:	6801      	ldr	r1, [r0, #0]
 80097ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80097ee:	6001      	str	r1, [r0, #0]
 80097f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097f2:	bf00      	nop
 80097f4:	e000ed88 	.word	0xe000ed88

080097f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097fe:	f3ef 8305 	mrs	r3, IPSR
 8009802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	d915      	bls.n	8009836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800980a:	4a18      	ldr	r2, [pc, #96]	@ (800986c <vPortValidateInterruptPriority+0x74>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009814:	4b16      	ldr	r3, [pc, #88]	@ (8009870 <vPortValidateInterruptPriority+0x78>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	7afa      	ldrb	r2, [r7, #11]
 800981a:	429a      	cmp	r2, r3
 800981c:	d20b      	bcs.n	8009836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
 8009832:	bf00      	nop
 8009834:	e7fd      	b.n	8009832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009836:	4b0f      	ldr	r3, [pc, #60]	@ (8009874 <vPortValidateInterruptPriority+0x7c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800983e:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <vPortValidateInterruptPriority+0x80>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d90b      	bls.n	800985e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	603b      	str	r3, [r7, #0]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <vPortValidateInterruptPriority+0x62>
	}
 800985e:	bf00      	nop
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	e000e3f0 	.word	0xe000e3f0
 8009870:	200054c8 	.word	0x200054c8
 8009874:	e000ed0c 	.word	0xe000ed0c
 8009878:	200054cc 	.word	0x200054cc

0800987c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	@ 0x28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009884:	2300      	movs	r3, #0
 8009886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009888:	f7fe fd58 	bl	800833c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800988c:	4b5c      	ldr	r3, [pc, #368]	@ (8009a00 <pvPortMalloc+0x184>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009894:	f000 f924 	bl	8009ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009898:	4b5a      	ldr	r3, [pc, #360]	@ (8009a04 <pvPortMalloc+0x188>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4013      	ands	r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 8095 	bne.w	80099d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01e      	beq.n	80098ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098ac:	2208      	movs	r2, #8
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4413      	add	r3, r2
 80098b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d015      	beq.n	80098ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f023 0307 	bic.w	r3, r3, #7
 80098c4:	3308      	adds	r3, #8
 80098c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <pvPortMalloc+0x6e>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	617b      	str	r3, [r7, #20]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d06f      	beq.n	80099d0 <pvPortMalloc+0x154>
 80098f0:	4b45      	ldr	r3, [pc, #276]	@ (8009a08 <pvPortMalloc+0x18c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d86a      	bhi.n	80099d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098fa:	4b44      	ldr	r3, [pc, #272]	@ (8009a0c <pvPortMalloc+0x190>)
 80098fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098fe:	4b43      	ldr	r3, [pc, #268]	@ (8009a0c <pvPortMalloc+0x190>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009904:	e004      	b.n	8009910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d903      	bls.n	8009922 <pvPortMalloc+0xa6>
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f1      	bne.n	8009906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009922:	4b37      	ldr	r3, [pc, #220]	@ (8009a00 <pvPortMalloc+0x184>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009928:	429a      	cmp	r2, r3
 800992a:	d051      	beq.n	80099d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2208      	movs	r2, #8
 8009932:	4413      	add	r3, r2
 8009934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	1ad2      	subs	r2, r2, r3
 8009946:	2308      	movs	r3, #8
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	429a      	cmp	r2, r3
 800994c:	d920      	bls.n	8009990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800994e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4413      	add	r3, r2
 8009954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <pvPortMalloc+0xfc>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	613b      	str	r3, [r7, #16]
}
 8009972:	bf00      	nop
 8009974:	bf00      	nop
 8009976:	e7fd      	b.n	8009974 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800998a:	69b8      	ldr	r0, [r7, #24]
 800998c:	f000 f90a 	bl	8009ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009990:	4b1d      	ldr	r3, [pc, #116]	@ (8009a08 <pvPortMalloc+0x18c>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a08 <pvPortMalloc+0x18c>)
 800999c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800999e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a08 <pvPortMalloc+0x18c>)
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <pvPortMalloc+0x194>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d203      	bcs.n	80099b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099aa:	4b17      	ldr	r3, [pc, #92]	@ (8009a08 <pvPortMalloc+0x18c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a18      	ldr	r2, [pc, #96]	@ (8009a10 <pvPortMalloc+0x194>)
 80099b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <pvPortMalloc+0x188>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099c6:	4b13      	ldr	r3, [pc, #76]	@ (8009a14 <pvPortMalloc+0x198>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a11      	ldr	r2, [pc, #68]	@ (8009a14 <pvPortMalloc+0x198>)
 80099ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099d0:	f7fe fcc2 	bl	8008358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <pvPortMalloc+0x17a>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	60fb      	str	r3, [r7, #12]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <pvPortMalloc+0x176>
	return pvReturn;
 80099f6:	69fb      	ldr	r3, [r7, #28]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3728      	adds	r7, #40	@ 0x28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200090d8 	.word	0x200090d8
 8009a04:	200090ec 	.word	0x200090ec
 8009a08:	200090dc 	.word	0x200090dc
 8009a0c:	200090d0 	.word	0x200090d0
 8009a10:	200090e0 	.word	0x200090e0
 8009a14:	200090e4 	.word	0x200090e4

08009a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d04f      	beq.n	8009aca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a2a:	2308      	movs	r3, #8
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	4b25      	ldr	r3, [pc, #148]	@ (8009ad4 <vPortFree+0xbc>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4013      	ands	r3, r2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <vPortFree+0x46>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	60fb      	str	r3, [r7, #12]
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00b      	beq.n	8009a7e <vPortFree+0x66>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60bb      	str	r3, [r7, #8]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	4b14      	ldr	r3, [pc, #80]	@ (8009ad4 <vPortFree+0xbc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01e      	beq.n	8009aca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d11a      	bne.n	8009aca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad4 <vPortFree+0xbc>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	401a      	ands	r2, r3
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009aa4:	f7fe fc4a 	bl	800833c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <vPortFree+0xc0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	4a09      	ldr	r2, [pc, #36]	@ (8009ad8 <vPortFree+0xc0>)
 8009ab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ab6:	6938      	ldr	r0, [r7, #16]
 8009ab8:	f000 f874 	bl	8009ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009abc:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <vPortFree+0xc4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	4a06      	ldr	r2, [pc, #24]	@ (8009adc <vPortFree+0xc4>)
 8009ac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ac6:	f7fe fc47 	bl	8008358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009aca:	bf00      	nop
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200090ec 	.word	0x200090ec
 8009ad8:	200090dc 	.word	0x200090dc
 8009adc:	200090e8 	.word	0x200090e8

08009ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ae6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009aec:	4b27      	ldr	r3, [pc, #156]	@ (8009b8c <prvHeapInit+0xac>)
 8009aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00c      	beq.n	8009b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3307      	adds	r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0307 	bic.w	r3, r3, #7
 8009b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b8c <prvHeapInit+0xac>)
 8009b10:	4413      	add	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b18:	4a1d      	ldr	r2, [pc, #116]	@ (8009b90 <prvHeapInit+0xb0>)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009b90 <prvHeapInit+0xb0>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	4413      	add	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b2c:	2208      	movs	r2, #8
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	1a9b      	subs	r3, r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0307 	bic.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4a15      	ldr	r2, [pc, #84]	@ (8009b94 <prvHeapInit+0xb4>)
 8009b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b42:	4b14      	ldr	r3, [pc, #80]	@ (8009b94 <prvHeapInit+0xb4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b4a:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <prvHeapInit+0xb4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	1ad2      	subs	r2, r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b60:	4b0c      	ldr	r3, [pc, #48]	@ (8009b94 <prvHeapInit+0xb4>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009b98 <prvHeapInit+0xb8>)
 8009b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	4a09      	ldr	r2, [pc, #36]	@ (8009b9c <prvHeapInit+0xbc>)
 8009b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b78:	4b09      	ldr	r3, [pc, #36]	@ (8009ba0 <prvHeapInit+0xc0>)
 8009b7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b7e:	601a      	str	r2, [r3, #0]
}
 8009b80:	bf00      	nop
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	200054d0 	.word	0x200054d0
 8009b90:	200090d0 	.word	0x200090d0
 8009b94:	200090d8 	.word	0x200090d8
 8009b98:	200090e0 	.word	0x200090e0
 8009b9c:	200090dc 	.word	0x200090dc
 8009ba0:	200090ec 	.word	0x200090ec

08009ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bac:	4b28      	ldr	r3, [pc, #160]	@ (8009c50 <prvInsertBlockIntoFreeList+0xac>)
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e002      	b.n	8009bb8 <prvInsertBlockIntoFreeList+0x14>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d8f7      	bhi.n	8009bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d108      	bne.n	8009be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	441a      	add	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	441a      	add	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d118      	bne.n	8009c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4b15      	ldr	r3, [pc, #84]	@ (8009c54 <prvInsertBlockIntoFreeList+0xb0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d00d      	beq.n	8009c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	441a      	add	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e008      	b.n	8009c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c22:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <prvInsertBlockIntoFreeList+0xb0>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	e003      	b.n	8009c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d002      	beq.n	8009c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c42:	bf00      	nop
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	200090d0 	.word	0x200090d0
 8009c54:	200090d8 	.word	0x200090d8

08009c58 <_rclc_check_for_new_data>:
 8009c58:	b1e0      	cbz	r0, 8009c94 <_rclc_check_for_new_data+0x3c>
 8009c5a:	7803      	ldrb	r3, [r0, #0]
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d81b      	bhi.n	8009c98 <_rclc_check_for_new_data+0x40>
 8009c60:	e8df f003 	tbb	[pc, r3]
 8009c64:	12161010 	.word	0x12161010
 8009c68:	05050512 	.word	0x05050512
 8009c6c:	14          	.byte	0x14
 8009c6d:	00          	.byte	0x00
 8009c6e:	6a0b      	ldr	r3, [r1, #32]
 8009c70:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c76:	3b00      	subs	r3, #0
 8009c78:	bf18      	it	ne
 8009c7a:	2301      	movne	r3, #1
 8009c7c:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 8009c80:	2000      	movs	r0, #0
 8009c82:	4770      	bx	lr
 8009c84:	680b      	ldr	r3, [r1, #0]
 8009c86:	e7f3      	b.n	8009c70 <_rclc_check_for_new_data+0x18>
 8009c88:	698b      	ldr	r3, [r1, #24]
 8009c8a:	e7f1      	b.n	8009c70 <_rclc_check_for_new_data+0x18>
 8009c8c:	688b      	ldr	r3, [r1, #8]
 8009c8e:	e7ef      	b.n	8009c70 <_rclc_check_for_new_data+0x18>
 8009c90:	690b      	ldr	r3, [r1, #16]
 8009c92:	e7ed      	b.n	8009c70 <_rclc_check_for_new_data+0x18>
 8009c94:	200b      	movs	r0, #11
 8009c96:	4770      	bx	lr
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <_rclc_take_new_data>:
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d049      	beq.n	8009d3c <_rclc_take_new_data+0x98>
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	7803      	ldrb	r3, [r0, #0]
 8009cac:	b08e      	sub	sp, #56	@ 0x38
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d84a      	bhi.n	8009d4a <_rclc_take_new_data+0xa6>
 8009cb4:	e8df f003 	tbb	[pc, r3]
 8009cb8:	2b121515 	.word	0x2b121515
 8009cbc:	0505052b 	.word	0x0505052b
 8009cc0:	12          	.byte	0x12
 8009cc1:	00          	.byte	0x00
 8009cc2:	6a0b      	ldr	r3, [r1, #32]
 8009cc4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	b13b      	cbz	r3, 8009cdc <_rclc_take_new_data+0x38>
 8009ccc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009cd0:	f104 0110 	add.w	r1, r4, #16
 8009cd4:	f002 fee2 	bl	800ca9c <rcl_take_request>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d131      	bne.n	8009d40 <_rclc_take_new_data+0x9c>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	b00e      	add	sp, #56	@ 0x38
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	680b      	ldr	r3, [r1, #0]
 8009ce4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0f6      	beq.n	8009cdc <_rclc_take_new_data+0x38>
 8009cee:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	aa02      	add	r2, sp, #8
 8009cf6:	f003 f847 	bl	800cd88 <rcl_take>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d0ef      	beq.n	8009cde <_rclc_take_new_data+0x3a>
 8009cfe:	f240 1391 	movw	r3, #401	@ 0x191
 8009d02:	4298      	cmp	r0, r3
 8009d04:	d115      	bne.n	8009d32 <_rclc_take_new_data+0x8e>
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009d0c:	e7e7      	b.n	8009cde <_rclc_take_new_data+0x3a>
 8009d0e:	698b      	ldr	r3, [r1, #24]
 8009d10:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0e0      	beq.n	8009cdc <_rclc_take_new_data+0x38>
 8009d1a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009d1e:	f104 0110 	add.w	r1, r4, #16
 8009d22:	f001 ff7f 	bl	800bc24 <rcl_take_response>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d0d8      	beq.n	8009cdc <_rclc_take_new_data+0x38>
 8009d2a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009d2e:	4298      	cmp	r0, r3
 8009d30:	d0d5      	beq.n	8009cde <_rclc_take_new_data+0x3a>
 8009d32:	9001      	str	r0, [sp, #4]
 8009d34:	f000 fbe8 	bl	800a508 <rcutils_reset_error>
 8009d38:	9801      	ldr	r0, [sp, #4]
 8009d3a:	e7d0      	b.n	8009cde <_rclc_take_new_data+0x3a>
 8009d3c:	200b      	movs	r0, #11
 8009d3e:	4770      	bx	lr
 8009d40:	f240 2359 	movw	r3, #601	@ 0x259
 8009d44:	4298      	cmp	r0, r3
 8009d46:	d0de      	beq.n	8009d06 <_rclc_take_new_data+0x62>
 8009d48:	e7f3      	b.n	8009d32 <_rclc_take_new_data+0x8e>
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	e7c7      	b.n	8009cde <_rclc_take_new_data+0x3a>
 8009d4e:	bf00      	nop

08009d50 <rclc_executor_trigger_any>:
 8009d50:	b170      	cbz	r0, 8009d70 <rclc_executor_trigger_any+0x20>
 8009d52:	b179      	cbz	r1, 8009d74 <rclc_executor_trigger_any+0x24>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2200      	movs	r2, #0
 8009d58:	e005      	b.n	8009d66 <rclc_executor_trigger_any+0x16>
 8009d5a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009d5e:	3340      	adds	r3, #64	@ 0x40
 8009d60:	b930      	cbnz	r0, 8009d70 <rclc_executor_trigger_any+0x20>
 8009d62:	4291      	cmp	r1, r2
 8009d64:	d005      	beq.n	8009d72 <rclc_executor_trigger_any+0x22>
 8009d66:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d1f4      	bne.n	8009d5a <rclc_executor_trigger_any+0xa>
 8009d70:	4770      	bx	lr
 8009d72:	4770      	bx	lr
 8009d74:	4608      	mov	r0, r1
 8009d76:	e7fb      	b.n	8009d70 <rclc_executor_trigger_any+0x20>

08009d78 <_rclc_execute.part.0>:
 8009d78:	b530      	push	{r4, r5, lr}
 8009d7a:	7803      	ldrb	r3, [r0, #0]
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d85b      	bhi.n	8009e3c <_rclc_execute.part.0+0xc4>
 8009d84:	e8df f003 	tbb	[pc, r3]
 8009d88:	3036271f 	.word	0x3036271f
 8009d8c:	0505053f 	.word	0x0505053f
 8009d90:	1a          	.byte	0x1a
 8009d91:	00          	.byte	0x00
 8009d92:	2b06      	cmp	r3, #6
 8009d94:	d049      	beq.n	8009e2a <_rclc_execute.part.0+0xb2>
 8009d96:	2b07      	cmp	r3, #7
 8009d98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009d9a:	d140      	bne.n	8009e1e <_rclc_execute.part.0+0xa6>
 8009d9c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009da0:	6880      	ldr	r0, [r0, #8]
 8009da2:	4798      	blx	r3
 8009da4:	f104 0110 	add.w	r1, r4, #16
 8009da8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009daa:	6860      	ldr	r0, [r4, #4]
 8009dac:	f002 feae 	bl	800cb0c <rcl_send_response>
 8009db0:	b138      	cbz	r0, 8009dc2 <_rclc_execute.part.0+0x4a>
 8009db2:	9001      	str	r0, [sp, #4]
 8009db4:	f000 fba8 	bl	800a508 <rcutils_reset_error>
 8009db8:	9801      	ldr	r0, [sp, #4]
 8009dba:	e002      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>
 8009dbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009dbe:	4798      	blx	r3
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	b003      	add	sp, #12
 8009dc4:	bd30      	pop	{r4, r5, pc}
 8009dc6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009dca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009dcc:	b96d      	cbnz	r5, 8009dea <_rclc_execute.part.0+0x72>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4798      	blx	r3
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	e7f5      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>
 8009dd6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009dda:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009dde:	b1d5      	cbz	r5, 8009e16 <_rclc_execute.part.0+0x9e>
 8009de0:	6880      	ldr	r0, [r0, #8]
 8009de2:	4798      	blx	r3
 8009de4:	2000      	movs	r0, #0
 8009de6:	e7ec      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>
 8009de8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009dea:	68a0      	ldr	r0, [r4, #8]
 8009dec:	4798      	blx	r3
 8009dee:	2000      	movs	r0, #0
 8009df0:	b003      	add	sp, #12
 8009df2:	bd30      	pop	{r4, r5, pc}
 8009df4:	6840      	ldr	r0, [r0, #4]
 8009df6:	f003 f8bd 	bl	800cf74 <rcl_timer_call>
 8009dfa:	f240 3321 	movw	r3, #801	@ 0x321
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	d1d6      	bne.n	8009db0 <_rclc_execute.part.0+0x38>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e7dd      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>
 8009e06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e08:	6880      	ldr	r0, [r0, #8]
 8009e0a:	f104 0110 	add.w	r1, r4, #16
 8009e0e:	4798      	blx	r3
 8009e10:	2000      	movs	r0, #0
 8009e12:	b003      	add	sp, #12
 8009e14:	bd30      	pop	{r4, r5, pc}
 8009e16:	4628      	mov	r0, r5
 8009e18:	4798      	blx	r3
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	e7d1      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>
 8009e1e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009e20:	6880      	ldr	r0, [r0, #8]
 8009e22:	4798      	blx	r3
 8009e24:	f104 0110 	add.w	r1, r4, #16
 8009e28:	e7be      	b.n	8009da8 <_rclc_execute.part.0+0x30>
 8009e2a:	f100 0110 	add.w	r1, r0, #16
 8009e2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e30:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009e32:	6880      	ldr	r0, [r0, #8]
 8009e34:	9101      	str	r1, [sp, #4]
 8009e36:	4798      	blx	r3
 8009e38:	9901      	ldr	r1, [sp, #4]
 8009e3a:	e7b5      	b.n	8009da8 <_rclc_execute.part.0+0x30>
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	e7c0      	b.n	8009dc2 <_rclc_execute.part.0+0x4a>

08009e40 <rclc_executor_init>:
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d063      	beq.n	8009f0c <rclc_executor_init+0xcc>
 8009e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e48:	460f      	mov	r7, r1
 8009e4a:	b0ae      	sub	sp, #184	@ 0xb8
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	d055      	beq.n	8009efc <rclc_executor_init+0xbc>
 8009e50:	4605      	mov	r5, r0
 8009e52:	4618      	mov	r0, r3
 8009e54:	4616      	mov	r6, r2
 8009e56:	4698      	mov	r8, r3
 8009e58:	f000 fb32 	bl	800a4c0 <rcutils_allocator_is_valid>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d04d      	beq.n	8009efc <rclc_executor_init+0xbc>
 8009e60:	2e00      	cmp	r6, #0
 8009e62:	d04b      	beq.n	8009efc <rclc_executor_init+0xbc>
 8009e64:	492e      	ldr	r1, [pc, #184]	@ (8009f20 <rclc_executor_init+0xe0>)
 8009e66:	2280      	movs	r2, #128	@ 0x80
 8009e68:	a80e      	add	r0, sp, #56	@ 0x38
 8009e6a:	f00b f96a 	bl	8015142 <memcpy>
 8009e6e:	2400      	movs	r4, #0
 8009e70:	a90e      	add	r1, sp, #56	@ 0x38
 8009e72:	2280      	movs	r2, #128	@ 0x80
 8009e74:	4628      	mov	r0, r5
 8009e76:	f00b f964 	bl	8015142 <memcpy>
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	4668      	mov	r0, sp
 8009e7e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 8009e82:	466f      	mov	r7, sp
 8009e84:	f003 fad0 	bl	800d428 <rcl_get_zero_initialized_wait_set>
 8009e88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e8a:	f105 0c14 	add.w	ip, r5, #20
 8009e8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e9e:	a31e      	add	r3, pc, #120	@ (adr r3, 8009f18 <rclc_executor_init+0xd8>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	f8cc 1000 	str.w	r1, [ip]
 8009eaa:	f8d8 7000 	ldr.w	r7, [r8]
 8009eae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009eb2:	f8c5 8010 	str.w	r8, [r5, #16]
 8009eb6:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 8009eba:	01b0      	lsls	r0, r6, #6
 8009ebc:	47b8      	blx	r7
 8009ebe:	6068      	str	r0, [r5, #4]
 8009ec0:	b908      	cbnz	r0, 8009ec6 <rclc_executor_init+0x86>
 8009ec2:	e025      	b.n	8009f10 <rclc_executor_init+0xd0>
 8009ec4:	6868      	ldr	r0, [r5, #4]
 8009ec6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009eca:	4631      	mov	r1, r6
 8009ecc:	3401      	adds	r4, #1
 8009ece:	f000 fa01 	bl	800a2d4 <rclc_executor_handle_init>
 8009ed2:	42a6      	cmp	r6, r4
 8009ed4:	d1f6      	bne.n	8009ec4 <rclc_executor_init+0x84>
 8009ed6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009eda:	f000 f9ef 	bl	800a2bc <rclc_executor_handle_counters_zero_init>
 8009ede:	686b      	ldr	r3, [r5, #4]
 8009ee0:	4a10      	ldr	r2, [pc, #64]	@ (8009f24 <rclc_executor_init+0xe4>)
 8009ee2:	672a      	str	r2, [r5, #112]	@ 0x70
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	6768      	str	r0, [r5, #116]	@ 0x74
 8009ee8:	b163      	cbz	r3, 8009f04 <rclc_executor_init+0xc4>
 8009eea:	692b      	ldr	r3, [r5, #16]
 8009eec:	b153      	cbz	r3, 8009f04 <rclc_executor_init+0xc4>
 8009eee:	68ab      	ldr	r3, [r5, #8]
 8009ef0:	b143      	cbz	r3, 8009f04 <rclc_executor_init+0xc4>
 8009ef2:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 8009ef6:	b02e      	add	sp, #184	@ 0xb8
 8009ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efc:	200b      	movs	r0, #11
 8009efe:	b02e      	add	sp, #184	@ 0xb8
 8009f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f04:	4618      	mov	r0, r3
 8009f06:	b02e      	add	sp, #184	@ 0xb8
 8009f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f0c:	200b      	movs	r0, #11
 8009f0e:	4770      	bx	lr
 8009f10:	200a      	movs	r0, #10
 8009f12:	e7f4      	b.n	8009efe <rclc_executor_init+0xbe>
 8009f14:	f3af 8000 	nop.w
 8009f18:	3b9aca00 	.word	0x3b9aca00
 8009f1c:	00000000 	.word	0x00000000
 8009f20:	080164a8 	.word	0x080164a8
 8009f24:	08009d51 	.word	0x08009d51

08009f28 <rclc_executor_add_subscription>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8009f30:	b358      	cbz	r0, 8009f8a <rclc_executor_add_subscription+0x62>
 8009f32:	b351      	cbz	r1, 8009f8a <rclc_executor_add_subscription+0x62>
 8009f34:	b34a      	cbz	r2, 8009f8a <rclc_executor_add_subscription+0x62>
 8009f36:	b343      	cbz	r3, 8009f8a <rclc_executor_add_subscription+0x62>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 8009f3e:	4285      	cmp	r5, r0
 8009f40:	d302      	bcc.n	8009f48 <rclc_executor_add_subscription+0x20>
 8009f42:	2001      	movs	r0, #1
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009f4c:	ea4f 1885 	mov.w	r8, r5, lsl #6
 8009f50:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 8009f54:	f04f 0c00 	mov.w	ip, #0
 8009f58:	f80e c008 	strb.w	ip, [lr, r8]
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	3501      	adds	r5, #1
 8009f60:	f104 0814 	add.w	r8, r4, #20
 8009f64:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 8009f68:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8009f6c:	6333      	str	r3, [r6, #48]	@ 0x30
 8009f6e:	7077      	strb	r7, [r6, #1]
 8009f70:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 8009f74:	4640      	mov	r0, r8
 8009f76:	60e5      	str	r5, [r4, #12]
 8009f78:	f003 fa68 	bl	800d44c <rcl_wait_set_is_valid>
 8009f7c:	b940      	cbnz	r0, 8009f90 <rclc_executor_add_subscription+0x68>
 8009f7e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009f80:	3301      	adds	r3, #1
 8009f82:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009f84:	2000      	movs	r0, #0
 8009f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f8a:	200b      	movs	r0, #11
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	4640      	mov	r0, r8
 8009f92:	f003 fa61 	bl	800d458 <rcl_wait_set_fini>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d0f1      	beq.n	8009f7e <rclc_executor_add_subscription+0x56>
 8009f9a:	e7d3      	b.n	8009f44 <rclc_executor_add_subscription+0x1c>

08009f9c <rclc_executor_prepare>:
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d03d      	beq.n	800a01c <rclc_executor_prepare+0x80>
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	f100 0814 	add.w	r8, r0, #20
 8009fa8:	b09a      	sub	sp, #104	@ 0x68
 8009faa:	4604      	mov	r4, r0
 8009fac:	4640      	mov	r0, r8
 8009fae:	f003 fa4d 	bl	800d44c <rcl_wait_set_is_valid>
 8009fb2:	b118      	cbz	r0, 8009fbc <rclc_executor_prepare+0x20>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	b01a      	add	sp, #104	@ 0x68
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f003 fa4b 	bl	800d458 <rcl_wait_set_fini>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d127      	bne.n	800a016 <rclc_executor_prepare+0x7a>
 8009fc6:	a80c      	add	r0, sp, #48	@ 0x30
 8009fc8:	ad0c      	add	r5, sp, #48	@ 0x30
 8009fca:	f003 fa2d 	bl	800d428 <rcl_get_zero_initialized_wait_set>
 8009fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd0:	4646      	mov	r6, r8
 8009fd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fda:	6927      	ldr	r7, [r4, #16]
 8009fdc:	682d      	ldr	r5, [r5, #0]
 8009fde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009fe0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009fe2:	6035      	str	r5, [r6, #0]
 8009fe4:	ad04      	add	r5, sp, #16
 8009fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fe8:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009fec:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8009fee:	6826      	ldr	r6, [r4, #0]
 8009ff0:	6838      	ldr	r0, [r7, #0]
 8009ff2:	6028      	str	r0, [r5, #0]
 8009ff4:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8009ff8:	e9cd 3200 	strd	r3, r2, [sp]
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a000:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800a002:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a004:	f003 fd46 	bl	800da94 <rcl_wait_set_init>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0d4      	beq.n	8009fb6 <rclc_executor_prepare+0x1a>
 800a00c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a00e:	f000 fa7b 	bl	800a508 <rcutils_reset_error>
 800a012:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a014:	e7cf      	b.n	8009fb6 <rclc_executor_prepare+0x1a>
 800a016:	f000 fa77 	bl	800a508 <rcutils_reset_error>
 800a01a:	e7d4      	b.n	8009fc6 <rclc_executor_prepare+0x2a>
 800a01c:	200b      	movs	r0, #11
 800a01e:	4770      	bx	lr

0800a020 <rclc_executor_spin_some.part.0>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	f100 0814 	add.w	r8, r0, #20
 800a028:	b083      	sub	sp, #12
 800a02a:	4692      	mov	sl, r2
 800a02c:	4699      	mov	r9, r3
 800a02e:	4605      	mov	r5, r0
 800a030:	f7ff ffb4 	bl	8009f9c <rclc_executor_prepare>
 800a034:	4640      	mov	r0, r8
 800a036:	f003 fadb 	bl	800d5f0 <rcl_wait_set_clear>
 800a03a:	4607      	mov	r7, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f040 80be 	bne.w	800a1be <rclc_executor_spin_some.part.0+0x19e>
 800a042:	68ab      	ldr	r3, [r5, #8]
 800a044:	4604      	mov	r4, r0
 800a046:	b1eb      	cbz	r3, 800a084 <rclc_executor_spin_some.part.0+0x64>
 800a048:	686e      	ldr	r6, [r5, #4]
 800a04a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800a04e:	01a2      	lsls	r2, r4, #6
 800a050:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800a054:	b1b3      	cbz	r3, 800a084 <rclc_executor_spin_some.part.0+0x64>
 800a056:	5cb3      	ldrb	r3, [r6, r2]
 800a058:	2b08      	cmp	r3, #8
 800a05a:	f200 80a9 	bhi.w	800a1b0 <rclc_executor_spin_some.part.0+0x190>
 800a05e:	e8df f003 	tbb	[pc, r3]
 800a062:	8989      	.short	0x8989
 800a064:	057b7b93 	.word	0x057b7b93
 800a068:	0505      	.short	0x0505
 800a06a:	9d          	.byte	0x9d
 800a06b:	00          	.byte	0x00
 800a06c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800a070:	4640      	mov	r0, r8
 800a072:	6849      	ldr	r1, [r1, #4]
 800a074:	f003 fe24 	bl	800dcc0 <rcl_wait_set_add_service>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d175      	bne.n	800a168 <rclc_executor_spin_some.part.0+0x148>
 800a07c:	68ab      	ldr	r3, [r5, #8]
 800a07e:	3401      	adds	r4, #1
 800a080:	429c      	cmp	r4, r3
 800a082:	d3e1      	bcc.n	800a048 <rclc_executor_spin_some.part.0+0x28>
 800a084:	464b      	mov	r3, r9
 800a086:	4652      	mov	r2, sl
 800a088:	4640      	mov	r0, r8
 800a08a:	f003 fe45 	bl	800dd18 <rcl_wait>
 800a08e:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 809b 	beq.w	800a1ce <rclc_executor_spin_some.part.0+0x1ae>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	f040 8089 	bne.w	800a1b0 <rclc_executor_spin_some.part.0+0x190>
 800a09e:	68ab      	ldr	r3, [r5, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80ef 	beq.w	800a284 <rclc_executor_spin_some.part.0+0x264>
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	4626      	mov	r6, r4
 800a0aa:	f240 1991 	movw	r9, #401	@ 0x191
 800a0ae:	e00a      	b.n	800a0c6 <rclc_executor_spin_some.part.0+0xa6>
 800a0b0:	f7ff fdd2 	bl	8009c58 <_rclc_check_for_new_data>
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	b110      	cbz	r0, 800a0be <rclc_executor_spin_some.part.0+0x9e>
 800a0b8:	4548      	cmp	r0, r9
 800a0ba:	f040 8086 	bne.w	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a0be:	68ab      	ldr	r3, [r5, #8]
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	f080 80db 	bcs.w	800a27c <rclc_executor_spin_some.part.0+0x25c>
 800a0c6:	686a      	ldr	r2, [r5, #4]
 800a0c8:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a0cc:	4641      	mov	r1, r8
 800a0ce:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	f1bc 0f00 	cmp.w	ip, #0
 800a0d8:	d1ea      	bne.n	800a0b0 <rclc_executor_spin_some.part.0+0x90>
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800a0e2:	4798      	blx	r3
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d070      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a0e8:	68aa      	ldr	r2, [r5, #8]
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d06d      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a0ee:	2600      	movs	r6, #0
 800a0f0:	f240 1991 	movw	r9, #401	@ 0x191
 800a0f4:	e008      	b.n	800a108 <rclc_executor_spin_some.part.0+0xe8>
 800a0f6:	f7ff fdd5 	bl	8009ca4 <_rclc_take_new_data>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	b108      	cbz	r0, 800a102 <rclc_executor_spin_some.part.0+0xe2>
 800a0fe:	4548      	cmp	r0, r9
 800a100:	d163      	bne.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a102:	68aa      	ldr	r2, [r5, #8]
 800a104:	4296      	cmp	r6, r2
 800a106:	d208      	bcs.n	800a11a <rclc_executor_spin_some.part.0+0xfa>
 800a108:	6868      	ldr	r0, [r5, #4]
 800a10a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a10e:	4641      	mov	r1, r8
 800a110:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a114:	3601      	adds	r6, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1ed      	bne.n	800a0f6 <rclc_executor_spin_some.part.0+0xd6>
 800a11a:	2600      	movs	r6, #0
 800a11c:	b932      	cbnz	r2, 800a12c <rclc_executor_spin_some.part.0+0x10c>
 800a11e:	e054      	b.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a120:	2901      	cmp	r1, #1
 800a122:	d012      	beq.n	800a14a <rclc_executor_spin_some.part.0+0x12a>
 800a124:	3601      	adds	r6, #1
 800a126:	4296      	cmp	r6, r2
 800a128:	d245      	bcs.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a12a:	2400      	movs	r4, #0
 800a12c:	686b      	ldr	r3, [r5, #4]
 800a12e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800a132:	4618      	mov	r0, r3
 800a134:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800a138:	2900      	cmp	r1, #0
 800a13a:	d046      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a13c:	7859      	ldrb	r1, [r3, #1]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d1ee      	bne.n	800a120 <rclc_executor_spin_some.part.0+0x100>
 800a142:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0ec      	beq.n	800a124 <rclc_executor_spin_some.part.0+0x104>
 800a14a:	f7ff fe15 	bl	8009d78 <_rclc_execute.part.0>
 800a14e:	2800      	cmp	r0, #0
 800a150:	f040 8096 	bne.w	800a280 <rclc_executor_spin_some.part.0+0x260>
 800a154:	68aa      	ldr	r2, [r5, #8]
 800a156:	e7e5      	b.n	800a124 <rclc_executor_spin_some.part.0+0x104>
 800a158:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800a15c:	4640      	mov	r0, r8
 800a15e:	6849      	ldr	r1, [r1, #4]
 800a160:	f003 fd82 	bl	800dc68 <rcl_wait_set_add_client>
 800a164:	2800      	cmp	r0, #0
 800a166:	d089      	beq.n	800a07c <rclc_executor_spin_some.part.0+0x5c>
 800a168:	9001      	str	r0, [sp, #4]
 800a16a:	f000 f9cd 	bl	800a508 <rcutils_reset_error>
 800a16e:	9801      	ldr	r0, [sp, #4]
 800a170:	4607      	mov	r7, r0
 800a172:	e020      	b.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a174:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800a178:	4640      	mov	r0, r8
 800a17a:	6849      	ldr	r1, [r1, #4]
 800a17c:	f003 fa0c 	bl	800d598 <rcl_wait_set_add_subscription>
 800a180:	2800      	cmp	r0, #0
 800a182:	f43f af7b 	beq.w	800a07c <rclc_executor_spin_some.part.0+0x5c>
 800a186:	e7ef      	b.n	800a168 <rclc_executor_spin_some.part.0+0x148>
 800a188:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800a18c:	4640      	mov	r0, r8
 800a18e:	6849      	ldr	r1, [r1, #4]
 800a190:	f003 fd3a 	bl	800dc08 <rcl_wait_set_add_timer>
 800a194:	2800      	cmp	r0, #0
 800a196:	f43f af71 	beq.w	800a07c <rclc_executor_spin_some.part.0+0x5c>
 800a19a:	e7e5      	b.n	800a168 <rclc_executor_spin_some.part.0+0x148>
 800a19c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	6849      	ldr	r1, [r1, #4]
 800a1a4:	f003 fd04 	bl	800dbb0 <rcl_wait_set_add_guard_condition>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f43f af67 	beq.w	800a07c <rclc_executor_spin_some.part.0+0x5c>
 800a1ae:	e7db      	b.n	800a168 <rclc_executor_spin_some.part.0+0x148>
 800a1b0:	f000 f9aa 	bl	800a508 <rcutils_reset_error>
 800a1b4:	2701      	movs	r7, #1
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	b003      	add	sp, #12
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	f000 f9a3 	bl	800a508 <rcutils_reset_error>
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	b003      	add	sp, #12
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	4627      	mov	r7, r4
 800a1cc:	e7f3      	b.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a1ce:	68ab      	ldr	r3, [r5, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d05a      	beq.n	800a28a <rclc_executor_spin_some.part.0+0x26a>
 800a1d4:	2400      	movs	r4, #0
 800a1d6:	4626      	mov	r6, r4
 800a1d8:	f240 1991 	movw	r9, #401	@ 0x191
 800a1dc:	e008      	b.n	800a1f0 <rclc_executor_spin_some.part.0+0x1d0>
 800a1de:	f7ff fd3b 	bl	8009c58 <_rclc_check_for_new_data>
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	b108      	cbz	r0, 800a1ea <rclc_executor_spin_some.part.0+0x1ca>
 800a1e6:	4548      	cmp	r0, r9
 800a1e8:	d1ef      	bne.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a1ea:	68ab      	ldr	r3, [r5, #8]
 800a1ec:	429e      	cmp	r6, r3
 800a1ee:	d243      	bcs.n	800a278 <rclc_executor_spin_some.part.0+0x258>
 800a1f0:	686a      	ldr	r2, [r5, #4]
 800a1f2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	f1bc 0f00 	cmp.w	ip, #0
 800a202:	d1ec      	bne.n	800a1de <rclc_executor_spin_some.part.0+0x1be>
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800a20c:	4798      	blx	r3
 800a20e:	2800      	cmp	r0, #0
 800a210:	d0db      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a212:	68ab      	ldr	r3, [r5, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0d8      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a218:	f04f 0a00 	mov.w	sl, #0
 800a21c:	f240 1691 	movw	r6, #401	@ 0x191
 800a220:	f240 2959 	movw	r9, #601	@ 0x259
 800a224:	e00b      	b.n	800a23e <rclc_executor_spin_some.part.0+0x21e>
 800a226:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a22a:	b113      	cbz	r3, 800a232 <rclc_executor_spin_some.part.0+0x212>
 800a22c:	f7ff fda4 	bl	8009d78 <_rclc_execute.part.0>
 800a230:	bb30      	cbnz	r0, 800a280 <rclc_executor_spin_some.part.0+0x260>
 800a232:	68ab      	ldr	r3, [r5, #8]
 800a234:	f10a 0a01 	add.w	sl, sl, #1
 800a238:	459a      	cmp	sl, r3
 800a23a:	d2bc      	bcs.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a23c:	2400      	movs	r4, #0
 800a23e:	6868      	ldr	r0, [r5, #4]
 800a240:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a244:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a248:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0bc      	beq.n	800a1ca <rclc_executor_spin_some.part.0+0x1aa>
 800a250:	4641      	mov	r1, r8
 800a252:	f7ff fd27 	bl	8009ca4 <_rclc_take_new_data>
 800a256:	b118      	cbz	r0, 800a260 <rclc_executor_spin_some.part.0+0x240>
 800a258:	42b0      	cmp	r0, r6
 800a25a:	d001      	beq.n	800a260 <rclc_executor_spin_some.part.0+0x240>
 800a25c:	4548      	cmp	r0, r9
 800a25e:	d10f      	bne.n	800a280 <rclc_executor_spin_some.part.0+0x260>
 800a260:	6868      	ldr	r0, [r5, #4]
 800a262:	eb10 000b 	adds.w	r0, r0, fp
 800a266:	d005      	beq.n	800a274 <rclc_executor_spin_some.part.0+0x254>
 800a268:	7843      	ldrb	r3, [r0, #1]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0db      	beq.n	800a226 <rclc_executor_spin_some.part.0+0x206>
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d1df      	bne.n	800a232 <rclc_executor_spin_some.part.0+0x212>
 800a272:	e7db      	b.n	800a22c <rclc_executor_spin_some.part.0+0x20c>
 800a274:	270b      	movs	r7, #11
 800a276:	e79e      	b.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a278:	686a      	ldr	r2, [r5, #4]
 800a27a:	e7c3      	b.n	800a204 <rclc_executor_spin_some.part.0+0x1e4>
 800a27c:	686a      	ldr	r2, [r5, #4]
 800a27e:	e72c      	b.n	800a0da <rclc_executor_spin_some.part.0+0xba>
 800a280:	4607      	mov	r7, r0
 800a282:	e798      	b.n	800a1b6 <rclc_executor_spin_some.part.0+0x196>
 800a284:	686a      	ldr	r2, [r5, #4]
 800a286:	461c      	mov	r4, r3
 800a288:	e727      	b.n	800a0da <rclc_executor_spin_some.part.0+0xba>
 800a28a:	686a      	ldr	r2, [r5, #4]
 800a28c:	461c      	mov	r4, r3
 800a28e:	e7b9      	b.n	800a204 <rclc_executor_spin_some.part.0+0x1e4>

0800a290 <rclc_executor_spin_some>:
 800a290:	b190      	cbz	r0, 800a2b8 <rclc_executor_spin_some+0x28>
 800a292:	b570      	push	{r4, r5, r6, lr}
 800a294:	4604      	mov	r4, r0
 800a296:	6800      	ldr	r0, [r0, #0]
 800a298:	4616      	mov	r6, r2
 800a29a:	461d      	mov	r5, r3
 800a29c:	f001 fd08 	bl	800bcb0 <rcl_context_is_valid>
 800a2a0:	b130      	cbz	r0, 800a2b0 <rclc_executor_spin_some+0x20>
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ac:	f7ff beb8 	b.w	800a020 <rclc_executor_spin_some.part.0>
 800a2b0:	f000 f92a 	bl	800a508 <rcutils_reset_error>
 800a2b4:	2001      	movs	r0, #1
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}
 800a2b8:	200b      	movs	r0, #11
 800a2ba:	4770      	bx	lr

0800a2bc <rclc_executor_handle_counters_zero_init>:
 800a2bc:	b140      	cbz	r0, 800a2d0 <rclc_executor_handle_counters_zero_init+0x14>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	6043      	str	r3, [r0, #4]
 800a2c4:	6083      	str	r3, [r0, #8]
 800a2c6:	60c3      	str	r3, [r0, #12]
 800a2c8:	6103      	str	r3, [r0, #16]
 800a2ca:	6143      	str	r3, [r0, #20]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	4770      	bx	lr
 800a2d0:	200b      	movs	r0, #11
 800a2d2:	4770      	bx	lr

0800a2d4 <rclc_executor_handle_init>:
 800a2d4:	b178      	cbz	r0, 800a2f6 <rclc_executor_handle_init+0x22>
 800a2d6:	b430      	push	{r4, r5}
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2209      	movs	r2, #9
 800a2dc:	2000      	movs	r0, #0
 800a2de:	2400      	movs	r4, #0
 800a2e0:	2500      	movs	r5, #0
 800a2e2:	801a      	strh	r2, [r3, #0]
 800a2e4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800a2e8:	bc30      	pop	{r4, r5}
 800a2ea:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800a2ee:	6359      	str	r1, [r3, #52]	@ 0x34
 800a2f0:	6318      	str	r0, [r3, #48]	@ 0x30
 800a2f2:	8718      	strh	r0, [r3, #56]	@ 0x38
 800a2f4:	4770      	bx	lr
 800a2f6:	200b      	movs	r0, #11
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop

0800a2fc <rclc_support_init>:
 800a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	2800      	cmp	r0, #0
 800a304:	d042      	beq.n	800a38c <rclc_support_init+0x90>
 800a306:	461c      	mov	r4, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d03f      	beq.n	800a38c <rclc_support_init+0x90>
 800a30c:	460f      	mov	r7, r1
 800a30e:	4690      	mov	r8, r2
 800a310:	4606      	mov	r6, r0
 800a312:	f001 ffad 	bl	800c270 <rcl_get_zero_initialized_init_options>
 800a316:	4603      	mov	r3, r0
 800a318:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800a31c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a320:	9305      	str	r3, [sp, #20]
 800a322:	a805      	add	r0, sp, #20
 800a324:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a328:	f001 ffa4 	bl	800c274 <rcl_init_options_init>
 800a32c:	4605      	mov	r5, r0
 800a32e:	bb38      	cbnz	r0, 800a380 <rclc_support_init+0x84>
 800a330:	f001 ff9e 	bl	800c270 <rcl_get_zero_initialized_init_options>
 800a334:	4631      	mov	r1, r6
 800a336:	6030      	str	r0, [r6, #0]
 800a338:	a805      	add	r0, sp, #20
 800a33a:	f002 f811 	bl	800c360 <rcl_init_options_copy>
 800a33e:	4605      	mov	r5, r0
 800a340:	b9c0      	cbnz	r0, 800a374 <rclc_support_init+0x78>
 800a342:	ad02      	add	r5, sp, #8
 800a344:	4628      	mov	r0, r5
 800a346:	f001 fca9 	bl	800bc9c <rcl_get_zero_initialized_context>
 800a34a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a34e:	1d33      	adds	r3, r6, #4
 800a350:	e883 0003 	stmia.w	r3, {r0, r1}
 800a354:	4632      	mov	r2, r6
 800a356:	4641      	mov	r1, r8
 800a358:	4638      	mov	r0, r7
 800a35a:	f001 fe7f 	bl	800c05c <rcl_init>
 800a35e:	4605      	mov	r5, r0
 800a360:	b940      	cbnz	r0, 800a374 <rclc_support_init+0x78>
 800a362:	60f4      	str	r4, [r6, #12]
 800a364:	4622      	mov	r2, r4
 800a366:	f106 0110 	add.w	r1, r6, #16
 800a36a:	2003      	movs	r0, #3
 800a36c:	f002 fd76 	bl	800ce5c <rcl_clock_init>
 800a370:	4605      	mov	r5, r0
 800a372:	b108      	cbz	r0, 800a378 <rclc_support_init+0x7c>
 800a374:	f000 f8c8 	bl	800a508 <rcutils_reset_error>
 800a378:	a805      	add	r0, sp, #20
 800a37a:	f001 ffcd 	bl	800c318 <rcl_init_options_fini>
 800a37e:	b108      	cbz	r0, 800a384 <rclc_support_init+0x88>
 800a380:	f000 f8c2 	bl	800a508 <rcutils_reset_error>
 800a384:	4628      	mov	r0, r5
 800a386:	b006      	add	sp, #24
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	250b      	movs	r5, #11
 800a38e:	4628      	mov	r0, r5
 800a390:	b006      	add	sp, #24
 800a392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a396:	bf00      	nop

0800a398 <rclc_node_init_default>:
 800a398:	b3b8      	cbz	r0, 800a40a <rclc_node_init_default+0x72>
 800a39a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a39e:	460d      	mov	r5, r1
 800a3a0:	b08f      	sub	sp, #60	@ 0x3c
 800a3a2:	b329      	cbz	r1, 800a3f0 <rclc_node_init_default+0x58>
 800a3a4:	4616      	mov	r6, r2
 800a3a6:	b31a      	cbz	r2, 800a3f0 <rclc_node_init_default+0x58>
 800a3a8:	461f      	mov	r7, r3
 800a3aa:	b30b      	cbz	r3, 800a3f0 <rclc_node_init_default+0x58>
 800a3ac:	f10d 0810 	add.w	r8, sp, #16
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f002 f89c 	bl	800c4f0 <rcl_get_zero_initialized_node>
 800a3b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a3bc:	f10d 091c 	add.w	r9, sp, #28
 800a3c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f002 fa35 	bl	800c834 <rcl_node_get_default_options>
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	f002 f890 	bl	800c4f0 <rcl_get_zero_initialized_node>
 800a3d0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a3d4:	1d3b      	adds	r3, r7, #4
 800a3d6:	f8cd 9000 	str.w	r9, [sp]
 800a3da:	4632      	mov	r2, r6
 800a3dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f002 f88e 	bl	800c504 <rcl_node_init>
 800a3e8:	b930      	cbnz	r0, 800a3f8 <rclc_node_init_default+0x60>
 800a3ea:	b00f      	add	sp, #60	@ 0x3c
 800a3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3f0:	200b      	movs	r0, #11
 800a3f2:	b00f      	add	sp, #60	@ 0x3c
 800a3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3f8:	9003      	str	r0, [sp, #12]
 800a3fa:	f000 f885 	bl	800a508 <rcutils_reset_error>
 800a3fe:	f000 f883 	bl	800a508 <rcutils_reset_error>
 800a402:	9803      	ldr	r0, [sp, #12]
 800a404:	b00f      	add	sp, #60	@ 0x3c
 800a406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40a:	200b      	movs	r0, #11
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop

0800a410 <rclc_subscription_init_default>:
 800a410:	b368      	cbz	r0, 800a46e <rclc_subscription_init_default+0x5e>
 800a412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	460d      	mov	r5, r1
 800a418:	b0a0      	sub	sp, #128	@ 0x80
 800a41a:	b321      	cbz	r1, 800a466 <rclc_subscription_init_default+0x56>
 800a41c:	4616      	mov	r6, r2
 800a41e:	b312      	cbz	r2, 800a466 <rclc_subscription_init_default+0x56>
 800a420:	461f      	mov	r7, r3
 800a422:	b303      	cbz	r3, 800a466 <rclc_subscription_init_default+0x56>
 800a424:	4604      	mov	r4, r0
 800a426:	f002 fb87 	bl	800cb38 <rcl_get_zero_initialized_subscription>
 800a42a:	f10d 0810 	add.w	r8, sp, #16
 800a42e:	6020      	str	r0, [r4, #0]
 800a430:	4640      	mov	r0, r8
 800a432:	f002 fc7d 	bl	800cd30 <rcl_subscription_get_default_options>
 800a436:	490f      	ldr	r1, [pc, #60]	@ (800a474 <rclc_subscription_init_default+0x64>)
 800a438:	2250      	movs	r2, #80	@ 0x50
 800a43a:	4640      	mov	r0, r8
 800a43c:	f00a fe81 	bl	8015142 <memcpy>
 800a440:	f8cd 8000 	str.w	r8, [sp]
 800a444:	463b      	mov	r3, r7
 800a446:	4632      	mov	r2, r6
 800a448:	4629      	mov	r1, r5
 800a44a:	4620      	mov	r0, r4
 800a44c:	f002 fb7a 	bl	800cb44 <rcl_subscription_init>
 800a450:	b910      	cbnz	r0, 800a458 <rclc_subscription_init_default+0x48>
 800a452:	b020      	add	sp, #128	@ 0x80
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a458:	9003      	str	r0, [sp, #12]
 800a45a:	f000 f855 	bl	800a508 <rcutils_reset_error>
 800a45e:	9803      	ldr	r0, [sp, #12]
 800a460:	b020      	add	sp, #128	@ 0x80
 800a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a466:	200b      	movs	r0, #11
 800a468:	b020      	add	sp, #128	@ 0x80
 800a46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46e:	200b      	movs	r0, #11
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	08016528 	.word	0x08016528

0800a478 <__default_zero_allocate>:
 800a478:	f00a b9d2 	b.w	8014820 <calloc>

0800a47c <__default_reallocate>:
 800a47c:	f00a bb5e 	b.w	8014b3c <realloc>

0800a480 <__default_deallocate>:
 800a480:	f00a ba3a 	b.w	80148f8 <free>

0800a484 <__default_allocate>:
 800a484:	f00a ba30 	b.w	80148e8 <malloc>

0800a488 <rcutils_get_zero_initialized_allocator>:
 800a488:	b470      	push	{r4, r5, r6}
 800a48a:	4d05      	ldr	r5, [pc, #20]	@ (800a4a0 <rcutils_get_zero_initialized_allocator+0x18>)
 800a48c:	4606      	mov	r6, r0
 800a48e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a490:	4634      	mov	r4, r6
 800a492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	4630      	mov	r0, r6
 800a49a:	bc70      	pop	{r4, r5, r6}
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	08016578 	.word	0x08016578

0800a4a4 <rcutils_get_default_allocator>:
 800a4a4:	b470      	push	{r4, r5, r6}
 800a4a6:	4d05      	ldr	r5, [pc, #20]	@ (800a4bc <rcutils_get_default_allocator+0x18>)
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ac:	4634      	mov	r4, r6
 800a4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	6023      	str	r3, [r4, #0]
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	bc70      	pop	{r4, r5, r6}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20000038 	.word	0x20000038

0800a4c0 <rcutils_allocator_is_valid>:
 800a4c0:	b158      	cbz	r0, 800a4da <rcutils_allocator_is_valid+0x1a>
 800a4c2:	6803      	ldr	r3, [r0, #0]
 800a4c4:	b143      	cbz	r3, 800a4d8 <rcutils_allocator_is_valid+0x18>
 800a4c6:	6843      	ldr	r3, [r0, #4]
 800a4c8:	b133      	cbz	r3, 800a4d8 <rcutils_allocator_is_valid+0x18>
 800a4ca:	68c3      	ldr	r3, [r0, #12]
 800a4cc:	b123      	cbz	r3, 800a4d8 <rcutils_allocator_is_valid+0x18>
 800a4ce:	6880      	ldr	r0, [r0, #8]
 800a4d0:	3800      	subs	r0, #0
 800a4d2:	bf18      	it	ne
 800a4d4:	2001      	movne	r0, #1
 800a4d6:	4770      	bx	lr
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4770      	bx	lr

0800a4dc <rcutils_get_error_string>:
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <rcutils_get_error_string+0x1c>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	b13b      	cbz	r3, 800a4f2 <rcutils_get_error_string+0x16>
 800a4e2:	4b06      	ldr	r3, [pc, #24]	@ (800a4fc <rcutils_get_error_string+0x20>)
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	b90a      	cbnz	r2, 800a4ec <rcutils_get_error_string+0x10>
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	4b04      	ldr	r3, [pc, #16]	@ (800a500 <rcutils_get_error_string+0x24>)
 800a4ee:	7818      	ldrb	r0, [r3, #0]
 800a4f0:	4770      	bx	lr
 800a4f2:	4b04      	ldr	r3, [pc, #16]	@ (800a504 <rcutils_get_error_string+0x28>)
 800a4f4:	7818      	ldrb	r0, [r3, #0]
 800a4f6:	4770      	bx	lr
 800a4f8:	200090f0 	.word	0x200090f0
 800a4fc:	200090f1 	.word	0x200090f1
 800a500:	200093c8 	.word	0x200093c8
 800a504:	0801658c 	.word	0x0801658c

0800a508 <rcutils_reset_error>:
 800a508:	b4d0      	push	{r4, r6, r7}
 800a50a:	4a07      	ldr	r2, [pc, #28]	@ (800a528 <rcutils_reset_error+0x20>)
 800a50c:	4807      	ldr	r0, [pc, #28]	@ (800a52c <rcutils_reset_error+0x24>)
 800a50e:	4c08      	ldr	r4, [pc, #32]	@ (800a530 <rcutils_reset_error+0x28>)
 800a510:	4908      	ldr	r1, [pc, #32]	@ (800a534 <rcutils_reset_error+0x2c>)
 800a512:	2300      	movs	r3, #0
 800a514:	2600      	movs	r6, #0
 800a516:	2700      	movs	r7, #0
 800a518:	8013      	strh	r3, [r2, #0]
 800a51a:	7003      	strb	r3, [r0, #0]
 800a51c:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800a520:	7023      	strb	r3, [r4, #0]
 800a522:	700b      	strb	r3, [r1, #0]
 800a524:	bcd0      	pop	{r4, r6, r7}
 800a526:	4770      	bx	lr
 800a528:	200093d0 	.word	0x200093d0
 800a52c:	200093c8 	.word	0x200093c8
 800a530:	200090f1 	.word	0x200090f1
 800a534:	200090f0 	.word	0x200090f0

0800a538 <rcutils_system_time_now>:
 800a538:	b310      	cbz	r0, 800a580 <rcutils_system_time_now+0x48>
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	4669      	mov	r1, sp
 800a540:	4604      	mov	r4, r0
 800a542:	2001      	movs	r0, #1
 800a544:	f7f7 fd5c 	bl	8002000 <clock_gettime>
 800a548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54c:	2800      	cmp	r0, #0
 800a54e:	f171 0300 	sbcs.w	r3, r1, #0
 800a552:	db12      	blt.n	800a57a <rcutils_system_time_now+0x42>
 800a554:	9d02      	ldr	r5, [sp, #8]
 800a556:	2d00      	cmp	r5, #0
 800a558:	db0c      	blt.n	800a574 <rcutils_system_time_now+0x3c>
 800a55a:	4e0a      	ldr	r6, [pc, #40]	@ (800a584 <rcutils_system_time_now+0x4c>)
 800a55c:	fba0 2306 	umull	r2, r3, r0, r6
 800a560:	1952      	adds	r2, r2, r5
 800a562:	fb06 3301 	mla	r3, r6, r1, r3
 800a566:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800a56a:	2000      	movs	r0, #0
 800a56c:	e9c4 2300 	strd	r2, r3, [r4]
 800a570:	b004      	add	sp, #16
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	ea50 0301 	orrs.w	r3, r0, r1
 800a578:	d1ef      	bne.n	800a55a <rcutils_system_time_now+0x22>
 800a57a:	2002      	movs	r0, #2
 800a57c:	b004      	add	sp, #16
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	200b      	movs	r0, #11
 800a582:	4770      	bx	lr
 800a584:	3b9aca00 	.word	0x3b9aca00

0800a588 <rcutils_steady_time_now>:
 800a588:	b310      	cbz	r0, 800a5d0 <rcutils_steady_time_now+0x48>
 800a58a:	b570      	push	{r4, r5, r6, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	4669      	mov	r1, sp
 800a590:	4604      	mov	r4, r0
 800a592:	2000      	movs	r0, #0
 800a594:	f7f7 fd34 	bl	8002000 <clock_gettime>
 800a598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f171 0300 	sbcs.w	r3, r1, #0
 800a5a2:	db12      	blt.n	800a5ca <rcutils_steady_time_now+0x42>
 800a5a4:	9d02      	ldr	r5, [sp, #8]
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	db0c      	blt.n	800a5c4 <rcutils_steady_time_now+0x3c>
 800a5aa:	4e0a      	ldr	r6, [pc, #40]	@ (800a5d4 <rcutils_steady_time_now+0x4c>)
 800a5ac:	fba0 2306 	umull	r2, r3, r0, r6
 800a5b0:	1952      	adds	r2, r2, r5
 800a5b2:	fb06 3301 	mla	r3, r6, r1, r3
 800a5b6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e9c4 2300 	strd	r2, r3, [r4]
 800a5c0:	b004      	add	sp, #16
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	ea50 0301 	orrs.w	r3, r0, r1
 800a5c8:	d1ef      	bne.n	800a5aa <rcutils_steady_time_now+0x22>
 800a5ca:	2002      	movs	r0, #2
 800a5cc:	b004      	add	sp, #16
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	200b      	movs	r0, #11
 800a5d2:	4770      	bx	lr
 800a5d4:	3b9aca00 	.word	0x3b9aca00

0800a5d8 <rmw_uros_set_custom_transport>:
 800a5d8:	b470      	push	{r4, r5, r6}
 800a5da:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a5de:	b162      	cbz	r2, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e0:	b15b      	cbz	r3, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e2:	b155      	cbz	r5, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e4:	b14e      	cbz	r6, 800a5fa <rmw_uros_set_custom_transport+0x22>
 800a5e6:	4c06      	ldr	r4, [pc, #24]	@ (800a600 <rmw_uros_set_custom_transport+0x28>)
 800a5e8:	7020      	strb	r0, [r4, #0]
 800a5ea:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a5ee:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a5f2:	6166      	str	r6, [r4, #20]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	bc70      	pop	{r4, r5, r6}
 800a5f8:	4770      	bx	lr
 800a5fa:	200b      	movs	r0, #11
 800a5fc:	bc70      	pop	{r4, r5, r6}
 800a5fe:	4770      	bx	lr
 800a600:	200093e0 	.word	0x200093e0

0800a604 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a604:	f000 b8dc 	b.w	800a7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>

0800a608 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a608:	f000 b964 	b.w	800a8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>

0800a60c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	2104      	movs	r1, #4
 800a610:	4604      	mov	r4, r0
 800a612:	f001 fa95 	bl	800bb40 <ucdr_alignment>
 800a616:	1d26      	adds	r6, r4, #4
 800a618:	4406      	add	r6, r0
 800a61a:	4630      	mov	r0, r6
 800a61c:	2104      	movs	r1, #4
 800a61e:	f001 fa8f 	bl	800bb40 <ucdr_alignment>
 800a622:	1d05      	adds	r5, r0, #4
 800a624:	442e      	add	r6, r5
 800a626:	4630      	mov	r0, r6
 800a628:	2104      	movs	r1, #4
 800a62a:	f001 fa89 	bl	800bb40 <ucdr_alignment>
 800a62e:	1d05      	adds	r5, r0, #4
 800a630:	4435      	add	r5, r6
 800a632:	4628      	mov	r0, r5
 800a634:	2104      	movs	r1, #4
 800a636:	f001 fa83 	bl	800bb40 <ucdr_alignment>
 800a63a:	3004      	adds	r0, #4
 800a63c:	4405      	add	r5, r0
 800a63e:	4628      	mov	r0, r5
 800a640:	2104      	movs	r1, #4
 800a642:	f001 fa7d 	bl	800bb40 <ucdr_alignment>
 800a646:	3004      	adds	r0, #4
 800a648:	1946      	adds	r6, r0, r5
 800a64a:	4630      	mov	r0, r6
 800a64c:	2104      	movs	r1, #4
 800a64e:	f001 fa77 	bl	800bb40 <ucdr_alignment>
 800a652:	1d05      	adds	r5, r0, #4
 800a654:	4435      	add	r5, r6
 800a656:	4628      	mov	r0, r5
 800a658:	2101      	movs	r1, #1
 800a65a:	f001 fa71 	bl	800bb40 <ucdr_alignment>
 800a65e:	3001      	adds	r0, #1
 800a660:	4405      	add	r5, r0
 800a662:	4628      	mov	r0, r5
 800a664:	2104      	movs	r1, #4
 800a666:	f001 fa6b 	bl	800bb40 <ucdr_alignment>
 800a66a:	f1c4 0404 	rsb	r4, r4, #4
 800a66e:	4420      	add	r0, r4
 800a670:	4428      	add	r0, r5
 800a672:	bd70      	pop	{r4, r5, r6, pc}

0800a674 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 800a674:	b110      	cbz	r0, 800a67c <get_serialized_size_rover_msgs__msg__ControllerMsg+0x8>
 800a676:	4608      	mov	r0, r1
 800a678:	f7ff bfc8 	b.w	800a60c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop

0800a680 <_ControllerMsg__get_serialized_size>:
 800a680:	b110      	cbz	r0, 800a688 <_ControllerMsg__get_serialized_size+0x8>
 800a682:	2000      	movs	r0, #0
 800a684:	f7ff bfc2 	b.w	800a60c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <_ControllerMsg__cdr_deserialize>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	460c      	mov	r4, r1
 800a690:	b331      	cbz	r1, 800a6e0 <_ControllerMsg__cdr_deserialize+0x54>
 800a692:	4605      	mov	r5, r0
 800a694:	f001 f96e 	bl	800b974 <ucdr_deserialize_float>
 800a698:	1d21      	adds	r1, r4, #4
 800a69a:	4628      	mov	r0, r5
 800a69c:	f001 f96a 	bl	800b974 <ucdr_deserialize_float>
 800a6a0:	f104 0108 	add.w	r1, r4, #8
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f001 f965 	bl	800b974 <ucdr_deserialize_float>
 800a6aa:	f104 010c 	add.w	r1, r4, #12
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f001 f838 	bl	800b724 <ucdr_deserialize_int32_t>
 800a6b4:	f104 0110 	add.w	r1, r4, #16
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f001 f833 	bl	800b724 <ucdr_deserialize_int32_t>
 800a6be:	f104 0114 	add.w	r1, r4, #20
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f001 f82e 	bl	800b724 <ucdr_deserialize_int32_t>
 800a6c8:	f104 0118 	add.w	r1, r4, #24
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f000 fe87 	bl	800b3e0 <ucdr_deserialize_int8_t>
 800a6d2:	f104 011c 	add.w	r1, r4, #28
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6dc:	f001 b822 	b.w	800b724 <ucdr_deserialize_int32_t>
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}

0800a6e4 <_ControllerMsg__cdr_serialize>:
 800a6e4:	b340      	cbz	r0, 800a738 <_ControllerMsg__cdr_serialize+0x54>
 800a6e6:	b538      	push	{r3, r4, r5, lr}
 800a6e8:	ed90 0a00 	vldr	s0, [r0]
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	f001 f8a7 	bl	800b844 <ucdr_serialize_float>
 800a6f6:	ed94 0a01 	vldr	s0, [r4, #4]
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f001 f8a2 	bl	800b844 <ucdr_serialize_float>
 800a700:	ed94 0a02 	vldr	s0, [r4, #8]
 800a704:	4628      	mov	r0, r5
 800a706:	f001 f89d 	bl	800b844 <ucdr_serialize_float>
 800a70a:	68e1      	ldr	r1, [r4, #12]
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 ff71 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a712:	6921      	ldr	r1, [r4, #16]
 800a714:	4628      	mov	r0, r5
 800a716:	f000 ff6d 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a71a:	6961      	ldr	r1, [r4, #20]
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 ff69 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a722:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fe44 	bl	800b3b4 <ucdr_serialize_int8_t>
 800a72c:	69e1      	ldr	r1, [r4, #28]
 800a72e:	4628      	mov	r0, r5
 800a730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a734:	f000 bf5e 	b.w	800b5f4 <ucdr_serialize_int32_t>
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop

0800a73c <max_serialized_size_rover_msgs__msg__ControllerMsg>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	2701      	movs	r7, #1
 800a740:	460c      	mov	r4, r1
 800a742:	7007      	strb	r7, [r0, #0]
 800a744:	4608      	mov	r0, r1
 800a746:	2104      	movs	r1, #4
 800a748:	f001 f9fa 	bl	800bb40 <ucdr_alignment>
 800a74c:	1d26      	adds	r6, r4, #4
 800a74e:	4406      	add	r6, r0
 800a750:	4630      	mov	r0, r6
 800a752:	2104      	movs	r1, #4
 800a754:	f001 f9f4 	bl	800bb40 <ucdr_alignment>
 800a758:	1d05      	adds	r5, r0, #4
 800a75a:	442e      	add	r6, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	2104      	movs	r1, #4
 800a760:	f001 f9ee 	bl	800bb40 <ucdr_alignment>
 800a764:	1d05      	adds	r5, r0, #4
 800a766:	4435      	add	r5, r6
 800a768:	4628      	mov	r0, r5
 800a76a:	2104      	movs	r1, #4
 800a76c:	f001 f9e8 	bl	800bb40 <ucdr_alignment>
 800a770:	3004      	adds	r0, #4
 800a772:	4405      	add	r5, r0
 800a774:	4628      	mov	r0, r5
 800a776:	2104      	movs	r1, #4
 800a778:	f001 f9e2 	bl	800bb40 <ucdr_alignment>
 800a77c:	3004      	adds	r0, #4
 800a77e:	1946      	adds	r6, r0, r5
 800a780:	4630      	mov	r0, r6
 800a782:	2104      	movs	r1, #4
 800a784:	f001 f9dc 	bl	800bb40 <ucdr_alignment>
 800a788:	1d05      	adds	r5, r0, #4
 800a78a:	4435      	add	r5, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	4628      	mov	r0, r5
 800a790:	f001 f9d6 	bl	800bb40 <ucdr_alignment>
 800a794:	4438      	add	r0, r7
 800a796:	4405      	add	r5, r0
 800a798:	4628      	mov	r0, r5
 800a79a:	2104      	movs	r1, #4
 800a79c:	f001 f9d0 	bl	800bb40 <ucdr_alignment>
 800a7a0:	f1c4 0404 	rsb	r4, r4, #4
 800a7a4:	4420      	add	r0, r4
 800a7a6:	4428      	add	r0, r5
 800a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7aa:	bf00      	nop

0800a7ac <_ControllerMsg__max_serialized_size>:
 800a7ac:	b500      	push	{lr}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f10d 0007 	add.w	r0, sp, #7
 800a7b6:	f7ff ffc1 	bl	800a73c <max_serialized_size_rover_msgs__msg__ControllerMsg>
 800a7ba:	b003      	add	sp, #12
 800a7bc:	f85d fb04 	ldr.w	pc, [sp], #4

0800a7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800a7c0:	4800      	ldr	r0, [pc, #0]	@ (800a7c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 800a7c2:	4770      	bx	lr
 800a7c4:	2000004c 	.word	0x2000004c

0800a7c8 <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 800a7c8:	b1e0      	cbz	r0, 800a804 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 800a7ca:	b570      	push	{r4, r5, r6, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	2104      	movs	r1, #4
 800a7d2:	f001 f9b5 	bl	800bb40 <ucdr_alignment>
 800a7d6:	1d2b      	adds	r3, r5, #4
 800a7d8:	181e      	adds	r6, r3, r0
 800a7da:	4630      	mov	r0, r6
 800a7dc:	2104      	movs	r1, #4
 800a7de:	f001 f9af 	bl	800bb40 <ucdr_alignment>
 800a7e2:	1d04      	adds	r4, r0, #4
 800a7e4:	4434      	add	r4, r6
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	2104      	movs	r1, #4
 800a7ea:	f001 f9a9 	bl	800bb40 <ucdr_alignment>
 800a7ee:	3004      	adds	r0, #4
 800a7f0:	4404      	add	r4, r0
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	2104      	movs	r1, #4
 800a7f6:	f001 f9a3 	bl	800bb40 <ucdr_alignment>
 800a7fa:	f1c5 0504 	rsb	r5, r5, #4
 800a7fe:	4428      	add	r0, r5
 800a800:	4420      	add	r0, r4
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop

0800a808 <_EncoderMsg__cdr_deserialize>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	460c      	mov	r4, r1
 800a80c:	b191      	cbz	r1, 800a834 <_EncoderMsg__cdr_deserialize+0x2c>
 800a80e:	4605      	mov	r5, r0
 800a810:	f000 ff88 	bl	800b724 <ucdr_deserialize_int32_t>
 800a814:	1d21      	adds	r1, r4, #4
 800a816:	4628      	mov	r0, r5
 800a818:	f000 ff84 	bl	800b724 <ucdr_deserialize_int32_t>
 800a81c:	f104 0108 	add.w	r1, r4, #8
 800a820:	4628      	mov	r0, r5
 800a822:	f000 ff7f 	bl	800b724 <ucdr_deserialize_int32_t>
 800a826:	f104 010c 	add.w	r1, r4, #12
 800a82a:	4628      	mov	r0, r5
 800a82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a830:	f000 bf78 	b.w	800b724 <ucdr_deserialize_int32_t>
 800a834:	4608      	mov	r0, r1
 800a836:	bd38      	pop	{r3, r4, r5, pc}

0800a838 <_EncoderMsg__cdr_serialize>:
 800a838:	b1a0      	cbz	r0, 800a864 <_EncoderMsg__cdr_serialize+0x2c>
 800a83a:	b538      	push	{r3, r4, r5, lr}
 800a83c:	460d      	mov	r5, r1
 800a83e:	4604      	mov	r4, r0
 800a840:	6801      	ldr	r1, [r0, #0]
 800a842:	4628      	mov	r0, r5
 800a844:	f000 fed6 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a848:	6861      	ldr	r1, [r4, #4]
 800a84a:	4628      	mov	r0, r5
 800a84c:	f000 fed2 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a850:	68a1      	ldr	r1, [r4, #8]
 800a852:	4628      	mov	r0, r5
 800a854:	f000 fece 	bl	800b5f4 <ucdr_serialize_int32_t>
 800a858:	68e1      	ldr	r1, [r4, #12]
 800a85a:	4628      	mov	r0, r5
 800a85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a860:	f000 bec8 	b.w	800b5f4 <ucdr_serialize_int32_t>
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <_EncoderMsg__get_serialized_size>:
 800a868:	b1c0      	cbz	r0, 800a89c <_EncoderMsg__get_serialized_size+0x34>
 800a86a:	b538      	push	{r3, r4, r5, lr}
 800a86c:	2104      	movs	r1, #4
 800a86e:	2000      	movs	r0, #0
 800a870:	f001 f966 	bl	800bb40 <ucdr_alignment>
 800a874:	1d05      	adds	r5, r0, #4
 800a876:	4628      	mov	r0, r5
 800a878:	2104      	movs	r1, #4
 800a87a:	f001 f961 	bl	800bb40 <ucdr_alignment>
 800a87e:	1d04      	adds	r4, r0, #4
 800a880:	442c      	add	r4, r5
 800a882:	4620      	mov	r0, r4
 800a884:	2104      	movs	r1, #4
 800a886:	f001 f95b 	bl	800bb40 <ucdr_alignment>
 800a88a:	3004      	adds	r0, #4
 800a88c:	4404      	add	r4, r0
 800a88e:	4620      	mov	r0, r4
 800a890:	2104      	movs	r1, #4
 800a892:	f001 f955 	bl	800bb40 <ucdr_alignment>
 800a896:	3004      	adds	r0, #4
 800a898:	4420      	add	r0, r4
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop

0800a8a0 <_EncoderMsg__max_serialized_size>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f001 f94b 	bl	800bb40 <ucdr_alignment>
 800a8aa:	1d05      	adds	r5, r0, #4
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	2104      	movs	r1, #4
 800a8b0:	f001 f946 	bl	800bb40 <ucdr_alignment>
 800a8b4:	1d04      	adds	r4, r0, #4
 800a8b6:	442c      	add	r4, r5
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	f001 f940 	bl	800bb40 <ucdr_alignment>
 800a8c0:	3004      	adds	r0, #4
 800a8c2:	4404      	add	r4, r0
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	2104      	movs	r1, #4
 800a8c8:	f001 f93a 	bl	800bb40 <ucdr_alignment>
 800a8cc:	3004      	adds	r0, #4
 800a8ce:	4420      	add	r0, r4
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop

0800a8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800a8d4:	4800      	ldr	r0, [pc, #0]	@ (800a8d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 800a8d6:	4770      	bx	lr
 800a8d8:	20000074 	.word	0x20000074

0800a8dc <ucdr_serialize_bool>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	460d      	mov	r5, r1
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	f001 f8e2 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a8e8:	b148      	cbz	r0, 800a8fe <ucdr_serialize_bool+0x22>
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	701d      	strb	r5, [r3, #0]
 800a8ee:	68a2      	ldr	r2, [r4, #8]
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	3201      	adds	r2, #1
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	60a2      	str	r2, [r4, #8]
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	7561      	strb	r1, [r4, #21]
 800a8fe:	7da0      	ldrb	r0, [r4, #22]
 800a900:	f080 0001 	eor.w	r0, r0, #1
 800a904:	bd38      	pop	{r3, r4, r5, pc}
 800a906:	bf00      	nop

0800a908 <ucdr_deserialize_bool>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	460d      	mov	r5, r1
 800a90c:	2101      	movs	r1, #1
 800a90e:	4604      	mov	r4, r0
 800a910:	f001 f8cc 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a914:	b168      	cbz	r0, 800a932 <ucdr_deserialize_bool+0x2a>
 800a916:	68a2      	ldr	r2, [r4, #8]
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a91e:	3900      	subs	r1, #0
 800a920:	f103 0301 	add.w	r3, r3, #1
 800a924:	bf18      	it	ne
 800a926:	2101      	movne	r1, #1
 800a928:	2001      	movs	r0, #1
 800a92a:	7029      	strb	r1, [r5, #0]
 800a92c:	60a2      	str	r2, [r4, #8]
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	7560      	strb	r0, [r4, #21]
 800a932:	7da0      	ldrb	r0, [r4, #22]
 800a934:	f080 0001 	eor.w	r0, r0, #1
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop

0800a93c <ucdr_serialize_uint8_t>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	460d      	mov	r5, r1
 800a940:	2101      	movs	r1, #1
 800a942:	4604      	mov	r4, r0
 800a944:	f001 f8b2 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a948:	b148      	cbz	r0, 800a95e <ucdr_serialize_uint8_t+0x22>
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	701d      	strb	r5, [r3, #0]
 800a94e:	68a2      	ldr	r2, [r4, #8]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	3201      	adds	r2, #1
 800a954:	3301      	adds	r3, #1
 800a956:	2101      	movs	r1, #1
 800a958:	60a2      	str	r2, [r4, #8]
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	7561      	strb	r1, [r4, #21]
 800a95e:	7da0      	ldrb	r0, [r4, #22]
 800a960:	f080 0001 	eor.w	r0, r0, #1
 800a964:	bd38      	pop	{r3, r4, r5, pc}
 800a966:	bf00      	nop

0800a968 <ucdr_deserialize_uint8_t>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	460d      	mov	r5, r1
 800a96c:	2101      	movs	r1, #1
 800a96e:	4604      	mov	r4, r0
 800a970:	f001 f89c 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a974:	b150      	cbz	r0, 800a98c <ucdr_deserialize_uint8_t+0x24>
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	702b      	strb	r3, [r5, #0]
 800a97c:	68a2      	ldr	r2, [r4, #8]
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	3201      	adds	r2, #1
 800a982:	3301      	adds	r3, #1
 800a984:	2101      	movs	r1, #1
 800a986:	60a2      	str	r2, [r4, #8]
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	7561      	strb	r1, [r4, #21]
 800a98c:	7da0      	ldrb	r0, [r4, #22]
 800a98e:	f080 0001 	eor.w	r0, r0, #1
 800a992:	bd38      	pop	{r3, r4, r5, pc}

0800a994 <ucdr_serialize_uint16_t>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	b082      	sub	sp, #8
 800a99a:	460b      	mov	r3, r1
 800a99c:	2102      	movs	r1, #2
 800a99e:	4604      	mov	r4, r0
 800a9a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a9a4:	f001 f8d4 	bl	800bb50 <ucdr_buffer_alignment>
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	7d67      	ldrb	r7, [r4, #21]
 800a9ae:	f001 f913 	bl	800bbd8 <ucdr_advance_buffer>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	2102      	movs	r1, #2
 800a9b6:	f001 f86d 	bl	800ba94 <ucdr_check_buffer_available_for>
 800a9ba:	bb78      	cbnz	r0, 800aa1c <ucdr_serialize_uint16_t+0x88>
 800a9bc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a9c0:	42b5      	cmp	r5, r6
 800a9c2:	d926      	bls.n	800aa12 <ucdr_serialize_uint16_t+0x7e>
 800a9c4:	6922      	ldr	r2, [r4, #16]
 800a9c6:	60a5      	str	r5, [r4, #8]
 800a9c8:	1bad      	subs	r5, r5, r6
 800a9ca:	442a      	add	r2, r5
 800a9cc:	f1c5 0802 	rsb	r8, r5, #2
 800a9d0:	6122      	str	r2, [r4, #16]
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f001 f869 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d03b      	beq.n	800aa56 <ucdr_serialize_uint16_t+0xc2>
 800a9de:	7d23      	ldrb	r3, [r4, #20]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d04a      	beq.n	800aa7a <ucdr_serialize_uint16_t+0xe6>
 800a9e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9e8:	7033      	strb	r3, [r6, #0]
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	d040      	beq.n	800aa70 <ucdr_serialize_uint16_t+0xdc>
 800a9ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9f2:	7073      	strb	r3, [r6, #1]
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	68a2      	ldr	r2, [r4, #8]
 800a9f8:	7da0      	ldrb	r0, [r4, #22]
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	1b5b      	subs	r3, r3, r5
 800a9fe:	4442      	add	r2, r8
 800aa00:	2102      	movs	r1, #2
 800aa02:	f080 0001 	eor.w	r0, r0, #1
 800aa06:	6123      	str	r3, [r4, #16]
 800aa08:	60a2      	str	r2, [r4, #8]
 800aa0a:	7561      	strb	r1, [r4, #21]
 800aa0c:	b002      	add	sp, #8
 800aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa12:	2102      	movs	r1, #2
 800aa14:	4620      	mov	r0, r4
 800aa16:	f001 f849 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aa1a:	b190      	cbz	r0, 800aa42 <ucdr_serialize_uint16_t+0xae>
 800aa1c:	7d23      	ldrb	r3, [r4, #20]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	d014      	beq.n	800aa4e <ucdr_serialize_uint16_t+0xba>
 800aa24:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa30:	705a      	strb	r2, [r3, #1]
 800aa32:	68a2      	ldr	r2, [r4, #8]
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	3202      	adds	r2, #2
 800aa38:	3302      	adds	r3, #2
 800aa3a:	2102      	movs	r1, #2
 800aa3c:	60a2      	str	r2, [r4, #8]
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	7561      	strb	r1, [r4, #21]
 800aa42:	7da0      	ldrb	r0, [r4, #22]
 800aa44:	f080 0001 	eor.w	r0, r0, #1
 800aa48:	b002      	add	sp, #8
 800aa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa4e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa52:	801a      	strh	r2, [r3, #0]
 800aa54:	e7ed      	b.n	800aa32 <ucdr_serialize_uint16_t+0x9e>
 800aa56:	68a2      	ldr	r2, [r4, #8]
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	7da0      	ldrb	r0, [r4, #22]
 800aa5c:	7567      	strb	r7, [r4, #21]
 800aa5e:	1b52      	subs	r2, r2, r5
 800aa60:	1b5b      	subs	r3, r3, r5
 800aa62:	f080 0001 	eor.w	r0, r0, #1
 800aa66:	60a2      	str	r2, [r4, #8]
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	b002      	add	sp, #8
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa76:	701a      	strb	r2, [r3, #0]
 800aa78:	e7bc      	b.n	800a9f4 <ucdr_serialize_uint16_t+0x60>
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f10d 0606 	add.w	r6, sp, #6
 800aa80:	4631      	mov	r1, r6
 800aa82:	462a      	mov	r2, r5
 800aa84:	f00a fb5d 	bl	8015142 <memcpy>
 800aa88:	68a0      	ldr	r0, [r4, #8]
 800aa8a:	4642      	mov	r2, r8
 800aa8c:	1971      	adds	r1, r6, r5
 800aa8e:	f00a fb58 	bl	8015142 <memcpy>
 800aa92:	e7af      	b.n	800a9f4 <ucdr_serialize_uint16_t+0x60>

0800aa94 <ucdr_serialize_endian_uint16_t>:
 800aa94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	2102      	movs	r1, #2
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aaa4:	f001 f854 	bl	800bb50 <ucdr_buffer_alignment>
 800aaa8:	4601      	mov	r1, r0
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aab0:	f001 f892 	bl	800bbd8 <ucdr_advance_buffer>
 800aab4:	4620      	mov	r0, r4
 800aab6:	2102      	movs	r1, #2
 800aab8:	f000 ffec 	bl	800ba94 <ucdr_check_buffer_available_for>
 800aabc:	bb70      	cbnz	r0, 800ab1c <ucdr_serialize_endian_uint16_t+0x88>
 800aabe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aac2:	42be      	cmp	r6, r7
 800aac4:	d925      	bls.n	800ab12 <ucdr_serialize_endian_uint16_t+0x7e>
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	60a6      	str	r6, [r4, #8]
 800aaca:	1bf6      	subs	r6, r6, r7
 800aacc:	4432      	add	r2, r6
 800aace:	f1c6 0902 	rsb	r9, r6, #2
 800aad2:	6122      	str	r2, [r4, #16]
 800aad4:	4649      	mov	r1, r9
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 ffe8 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d039      	beq.n	800ab54 <ucdr_serialize_endian_uint16_t+0xc0>
 800aae0:	2d01      	cmp	r5, #1
 800aae2:	d04a      	beq.n	800ab7a <ucdr_serialize_endian_uint16_t+0xe6>
 800aae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aae8:	703b      	strb	r3, [r7, #0]
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d040      	beq.n	800ab70 <ucdr_serialize_endian_uint16_t+0xdc>
 800aaee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aaf2:	707b      	strb	r3, [r7, #1]
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	68a2      	ldr	r2, [r4, #8]
 800aaf8:	7da0      	ldrb	r0, [r4, #22]
 800aafa:	3302      	adds	r3, #2
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	444a      	add	r2, r9
 800ab00:	2102      	movs	r1, #2
 800ab02:	f080 0001 	eor.w	r0, r0, #1
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	60a2      	str	r2, [r4, #8]
 800ab0a:	7561      	strb	r1, [r4, #21]
 800ab0c:	b003      	add	sp, #12
 800ab0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab12:	2102      	movs	r1, #2
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 ffc9 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ab1a:	b188      	cbz	r0, 800ab40 <ucdr_serialize_endian_uint16_t+0xac>
 800ab1c:	2d01      	cmp	r5, #1
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	d014      	beq.n	800ab4c <ucdr_serialize_endian_uint16_t+0xb8>
 800ab22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ab26:	701a      	strb	r2, [r3, #0]
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab2e:	705a      	strb	r2, [r3, #1]
 800ab30:	68a2      	ldr	r2, [r4, #8]
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	3202      	adds	r2, #2
 800ab36:	3302      	adds	r3, #2
 800ab38:	2102      	movs	r1, #2
 800ab3a:	60a2      	str	r2, [r4, #8]
 800ab3c:	6123      	str	r3, [r4, #16]
 800ab3e:	7561      	strb	r1, [r4, #21]
 800ab40:	7da0      	ldrb	r0, [r4, #22]
 800ab42:	f080 0001 	eor.w	r0, r0, #1
 800ab46:	b003      	add	sp, #12
 800ab48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	e7ed      	b.n	800ab30 <ucdr_serialize_endian_uint16_t+0x9c>
 800ab54:	68a2      	ldr	r2, [r4, #8]
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	7da0      	ldrb	r0, [r4, #22]
 800ab5a:	f884 8015 	strb.w	r8, [r4, #21]
 800ab5e:	1b92      	subs	r2, r2, r6
 800ab60:	1b9b      	subs	r3, r3, r6
 800ab62:	f080 0001 	eor.w	r0, r0, #1
 800ab66:	60a2      	str	r2, [r4, #8]
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	b003      	add	sp, #12
 800ab6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab70:	68a3      	ldr	r3, [r4, #8]
 800ab72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab76:	701a      	strb	r2, [r3, #0]
 800ab78:	e7bc      	b.n	800aaf4 <ucdr_serialize_endian_uint16_t+0x60>
 800ab7a:	f10d 0506 	add.w	r5, sp, #6
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4632      	mov	r2, r6
 800ab82:	4638      	mov	r0, r7
 800ab84:	f00a fadd 	bl	8015142 <memcpy>
 800ab88:	68a0      	ldr	r0, [r4, #8]
 800ab8a:	464a      	mov	r2, r9
 800ab8c:	19a9      	adds	r1, r5, r6
 800ab8e:	f00a fad8 	bl	8015142 <memcpy>
 800ab92:	e7af      	b.n	800aaf4 <ucdr_serialize_endian_uint16_t+0x60>

0800ab94 <ucdr_deserialize_uint16_t>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	460d      	mov	r5, r1
 800ab9a:	2102      	movs	r1, #2
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	f000 ffd7 	bl	800bb50 <ucdr_buffer_alignment>
 800aba2:	4601      	mov	r1, r0
 800aba4:	4620      	mov	r0, r4
 800aba6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800abaa:	f001 f815 	bl	800bbd8 <ucdr_advance_buffer>
 800abae:	4620      	mov	r0, r4
 800abb0:	2102      	movs	r1, #2
 800abb2:	f000 ff6f 	bl	800ba94 <ucdr_check_buffer_available_for>
 800abb6:	bb60      	cbnz	r0, 800ac12 <ucdr_deserialize_uint16_t+0x7e>
 800abb8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800abbc:	42be      	cmp	r6, r7
 800abbe:	d923      	bls.n	800ac08 <ucdr_deserialize_uint16_t+0x74>
 800abc0:	6922      	ldr	r2, [r4, #16]
 800abc2:	60a6      	str	r6, [r4, #8]
 800abc4:	1bf6      	subs	r6, r6, r7
 800abc6:	4432      	add	r2, r6
 800abc8:	f1c6 0902 	rsb	r9, r6, #2
 800abcc:	6122      	str	r2, [r4, #16]
 800abce:	4649      	mov	r1, r9
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 ff6b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d034      	beq.n	800ac44 <ucdr_deserialize_uint16_t+0xb0>
 800abda:	7d23      	ldrb	r3, [r4, #20]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d042      	beq.n	800ac66 <ucdr_deserialize_uint16_t+0xd2>
 800abe0:	787b      	ldrb	r3, [r7, #1]
 800abe2:	702b      	strb	r3, [r5, #0]
 800abe4:	2e00      	cmp	r6, #0
 800abe6:	d03a      	beq.n	800ac5e <ucdr_deserialize_uint16_t+0xca>
 800abe8:	783b      	ldrb	r3, [r7, #0]
 800abea:	706b      	strb	r3, [r5, #1]
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	68a2      	ldr	r2, [r4, #8]
 800abf0:	7da0      	ldrb	r0, [r4, #22]
 800abf2:	2102      	movs	r1, #2
 800abf4:	3302      	adds	r3, #2
 800abf6:	1b9b      	subs	r3, r3, r6
 800abf8:	444a      	add	r2, r9
 800abfa:	7561      	strb	r1, [r4, #21]
 800abfc:	6123      	str	r3, [r4, #16]
 800abfe:	60a2      	str	r2, [r4, #8]
 800ac00:	f080 0001 	eor.w	r0, r0, #1
 800ac04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 ff4e 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ac10:	b180      	cbz	r0, 800ac34 <ucdr_deserialize_uint16_t+0xa0>
 800ac12:	7d23      	ldrb	r3, [r4, #20]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	68a3      	ldr	r3, [r4, #8]
 800ac18:	d011      	beq.n	800ac3e <ucdr_deserialize_uint16_t+0xaa>
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	702b      	strb	r3, [r5, #0]
 800ac1e:	68a3      	ldr	r3, [r4, #8]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	706b      	strb	r3, [r5, #1]
 800ac24:	68a2      	ldr	r2, [r4, #8]
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	3202      	adds	r2, #2
 800ac2a:	3302      	adds	r3, #2
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	60a2      	str	r2, [r4, #8]
 800ac30:	6123      	str	r3, [r4, #16]
 800ac32:	7561      	strb	r1, [r4, #21]
 800ac34:	7da0      	ldrb	r0, [r4, #22]
 800ac36:	f080 0001 	eor.w	r0, r0, #1
 800ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	802b      	strh	r3, [r5, #0]
 800ac42:	e7ef      	b.n	800ac24 <ucdr_deserialize_uint16_t+0x90>
 800ac44:	68a2      	ldr	r2, [r4, #8]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	7da0      	ldrb	r0, [r4, #22]
 800ac4a:	f884 8015 	strb.w	r8, [r4, #21]
 800ac4e:	1b92      	subs	r2, r2, r6
 800ac50:	1b9b      	subs	r3, r3, r6
 800ac52:	60a2      	str	r2, [r4, #8]
 800ac54:	6123      	str	r3, [r4, #16]
 800ac56:	f080 0001 	eor.w	r0, r0, #1
 800ac5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5e:	68a3      	ldr	r3, [r4, #8]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	706b      	strb	r3, [r5, #1]
 800ac64:	e7c2      	b.n	800abec <ucdr_deserialize_uint16_t+0x58>
 800ac66:	4639      	mov	r1, r7
 800ac68:	4632      	mov	r2, r6
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f00a fa69 	bl	8015142 <memcpy>
 800ac70:	68a1      	ldr	r1, [r4, #8]
 800ac72:	464a      	mov	r2, r9
 800ac74:	19a8      	adds	r0, r5, r6
 800ac76:	f00a fa64 	bl	8015142 <memcpy>
 800ac7a:	e7b7      	b.n	800abec <ucdr_deserialize_uint16_t+0x58>

0800ac7c <ucdr_deserialize_endian_uint16_t>:
 800ac7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	460e      	mov	r6, r1
 800ac82:	2102      	movs	r1, #2
 800ac84:	4604      	mov	r4, r0
 800ac86:	4615      	mov	r5, r2
 800ac88:	f000 ff62 	bl	800bb50 <ucdr_buffer_alignment>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ac94:	f000 ffa0 	bl	800bbd8 <ucdr_advance_buffer>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	f000 fefa 	bl	800ba94 <ucdr_check_buffer_available_for>
 800aca0:	bb70      	cbnz	r0, 800ad00 <ucdr_deserialize_endian_uint16_t+0x84>
 800aca2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aca6:	4547      	cmp	r7, r8
 800aca8:	d925      	bls.n	800acf6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800acaa:	6922      	ldr	r2, [r4, #16]
 800acac:	60a7      	str	r7, [r4, #8]
 800acae:	eba7 0708 	sub.w	r7, r7, r8
 800acb2:	443a      	add	r2, r7
 800acb4:	f1c7 0a02 	rsb	sl, r7, #2
 800acb8:	6122      	str	r2, [r4, #16]
 800acba:	4651      	mov	r1, sl
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fef5 	bl	800baac <ucdr_check_final_buffer_behavior>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d034      	beq.n	800ad30 <ucdr_deserialize_endian_uint16_t+0xb4>
 800acc6:	2e01      	cmp	r6, #1
 800acc8:	d043      	beq.n	800ad52 <ucdr_deserialize_endian_uint16_t+0xd6>
 800acca:	f898 3001 	ldrb.w	r3, [r8, #1]
 800acce:	702b      	strb	r3, [r5, #0]
 800acd0:	2f00      	cmp	r7, #0
 800acd2:	d03a      	beq.n	800ad4a <ucdr_deserialize_endian_uint16_t+0xce>
 800acd4:	f898 3000 	ldrb.w	r3, [r8]
 800acd8:	706b      	strb	r3, [r5, #1]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	68a2      	ldr	r2, [r4, #8]
 800acde:	7da0      	ldrb	r0, [r4, #22]
 800ace0:	2102      	movs	r1, #2
 800ace2:	3302      	adds	r3, #2
 800ace4:	1bdb      	subs	r3, r3, r7
 800ace6:	4452      	add	r2, sl
 800ace8:	7561      	strb	r1, [r4, #21]
 800acea:	6123      	str	r3, [r4, #16]
 800acec:	60a2      	str	r2, [r4, #8]
 800acee:	f080 0001 	eor.w	r0, r0, #1
 800acf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf6:	2102      	movs	r1, #2
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fed7 	bl	800baac <ucdr_check_final_buffer_behavior>
 800acfe:	b178      	cbz	r0, 800ad20 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ad00:	2e01      	cmp	r6, #1
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	d011      	beq.n	800ad2a <ucdr_deserialize_endian_uint16_t+0xae>
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	702b      	strb	r3, [r5, #0]
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	706b      	strb	r3, [r5, #1]
 800ad10:	68a2      	ldr	r2, [r4, #8]
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	3202      	adds	r2, #2
 800ad16:	3302      	adds	r3, #2
 800ad18:	2102      	movs	r1, #2
 800ad1a:	60a2      	str	r2, [r4, #8]
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	7561      	strb	r1, [r4, #21]
 800ad20:	7da0      	ldrb	r0, [r4, #22]
 800ad22:	f080 0001 	eor.w	r0, r0, #1
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	802b      	strh	r3, [r5, #0]
 800ad2e:	e7ef      	b.n	800ad10 <ucdr_deserialize_endian_uint16_t+0x94>
 800ad30:	68a2      	ldr	r2, [r4, #8]
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	7da0      	ldrb	r0, [r4, #22]
 800ad36:	f884 9015 	strb.w	r9, [r4, #21]
 800ad3a:	1bd2      	subs	r2, r2, r7
 800ad3c:	1bdb      	subs	r3, r3, r7
 800ad3e:	60a2      	str	r2, [r4, #8]
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	f080 0001 	eor.w	r0, r0, #1
 800ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	706b      	strb	r3, [r5, #1]
 800ad50:	e7c3      	b.n	800acda <ucdr_deserialize_endian_uint16_t+0x5e>
 800ad52:	4641      	mov	r1, r8
 800ad54:	463a      	mov	r2, r7
 800ad56:	4628      	mov	r0, r5
 800ad58:	f00a f9f3 	bl	8015142 <memcpy>
 800ad5c:	68a1      	ldr	r1, [r4, #8]
 800ad5e:	4652      	mov	r2, sl
 800ad60:	19e8      	adds	r0, r5, r7
 800ad62:	f00a f9ee 	bl	8015142 <memcpy>
 800ad66:	e7b8      	b.n	800acda <ucdr_deserialize_endian_uint16_t+0x5e>

0800ad68 <ucdr_serialize_uint32_t>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	4604      	mov	r4, r0
 800ad70:	9101      	str	r1, [sp, #4]
 800ad72:	2104      	movs	r1, #4
 800ad74:	f000 feec 	bl	800bb50 <ucdr_buffer_alignment>
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	7d67      	ldrb	r7, [r4, #21]
 800ad7e:	f000 ff2b 	bl	800bbd8 <ucdr_advance_buffer>
 800ad82:	4620      	mov	r0, r4
 800ad84:	2104      	movs	r1, #4
 800ad86:	f000 fe85 	bl	800ba94 <ucdr_check_buffer_available_for>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d139      	bne.n	800ae02 <ucdr_serialize_uint32_t+0x9a>
 800ad8e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ad92:	42ae      	cmp	r6, r5
 800ad94:	d930      	bls.n	800adf8 <ucdr_serialize_uint32_t+0x90>
 800ad96:	6922      	ldr	r2, [r4, #16]
 800ad98:	60a6      	str	r6, [r4, #8]
 800ad9a:	1b76      	subs	r6, r6, r5
 800ad9c:	4432      	add	r2, r6
 800ad9e:	f1c6 0804 	rsb	r8, r6, #4
 800ada2:	6122      	str	r2, [r4, #16]
 800ada4:	4641      	mov	r1, r8
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fe80 	bl	800baac <ucdr_check_final_buffer_behavior>
 800adac:	2800      	cmp	r0, #0
 800adae:	d04c      	beq.n	800ae4a <ucdr_serialize_uint32_t+0xe2>
 800adb0:	7d23      	ldrb	r3, [r4, #20]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d063      	beq.n	800ae7e <ucdr_serialize_uint32_t+0x116>
 800adb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adba:	702b      	strb	r3, [r5, #0]
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	d051      	beq.n	800ae64 <ucdr_serialize_uint32_t+0xfc>
 800adc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800adc4:	706b      	strb	r3, [r5, #1]
 800adc6:	2e01      	cmp	r6, #1
 800adc8:	d050      	beq.n	800ae6c <ucdr_serialize_uint32_t+0x104>
 800adca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800adce:	70ab      	strb	r3, [r5, #2]
 800add0:	2e02      	cmp	r6, #2
 800add2:	d04f      	beq.n	800ae74 <ucdr_serialize_uint32_t+0x10c>
 800add4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800add8:	70eb      	strb	r3, [r5, #3]
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	68a2      	ldr	r2, [r4, #8]
 800adde:	7da0      	ldrb	r0, [r4, #22]
 800ade0:	3304      	adds	r3, #4
 800ade2:	1b9b      	subs	r3, r3, r6
 800ade4:	4442      	add	r2, r8
 800ade6:	2104      	movs	r1, #4
 800ade8:	f080 0001 	eor.w	r0, r0, #1
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	60a2      	str	r2, [r4, #8]
 800adf0:	7561      	strb	r1, [r4, #21]
 800adf2:	b002      	add	sp, #8
 800adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf8:	2104      	movs	r1, #4
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fe56 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ae00:	b1d0      	cbz	r0, 800ae38 <ucdr_serialize_uint32_t+0xd0>
 800ae02:	7d23      	ldrb	r3, [r4, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	d01c      	beq.n	800ae44 <ucdr_serialize_uint32_t+0xdc>
 800ae0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	68a3      	ldr	r3, [r4, #8]
 800ae12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae16:	705a      	strb	r2, [r3, #1]
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae1e:	709a      	strb	r2, [r3, #2]
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae26:	70da      	strb	r2, [r3, #3]
 800ae28:	68a2      	ldr	r2, [r4, #8]
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	3204      	adds	r2, #4
 800ae2e:	3304      	adds	r3, #4
 800ae30:	2104      	movs	r1, #4
 800ae32:	60a2      	str	r2, [r4, #8]
 800ae34:	6123      	str	r3, [r4, #16]
 800ae36:	7561      	strb	r1, [r4, #21]
 800ae38:	7da0      	ldrb	r0, [r4, #22]
 800ae3a:	f080 0001 	eor.w	r0, r0, #1
 800ae3e:	b002      	add	sp, #8
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae44:	9a01      	ldr	r2, [sp, #4]
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	e7ee      	b.n	800ae28 <ucdr_serialize_uint32_t+0xc0>
 800ae4a:	68a2      	ldr	r2, [r4, #8]
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	7da0      	ldrb	r0, [r4, #22]
 800ae50:	7567      	strb	r7, [r4, #21]
 800ae52:	1b92      	subs	r2, r2, r6
 800ae54:	1b9b      	subs	r3, r3, r6
 800ae56:	f080 0001 	eor.w	r0, r0, #1
 800ae5a:	60a2      	str	r2, [r4, #8]
 800ae5c:	6123      	str	r3, [r4, #16]
 800ae5e:	b002      	add	sp, #8
 800ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae64:	68a3      	ldr	r3, [r4, #8]
 800ae66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	68a3      	ldr	r3, [r4, #8]
 800ae6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae7a:	701a      	strb	r2, [r3, #0]
 800ae7c:	e7ad      	b.n	800adda <ucdr_serialize_uint32_t+0x72>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	ad01      	add	r5, sp, #4
 800ae82:	4629      	mov	r1, r5
 800ae84:	4632      	mov	r2, r6
 800ae86:	f00a f95c 	bl	8015142 <memcpy>
 800ae8a:	68a0      	ldr	r0, [r4, #8]
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	19a9      	adds	r1, r5, r6
 800ae90:	f00a f957 	bl	8015142 <memcpy>
 800ae94:	e7a1      	b.n	800adda <ucdr_serialize_uint32_t+0x72>
 800ae96:	bf00      	nop

0800ae98 <ucdr_serialize_endian_uint32_t>:
 800ae98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	460d      	mov	r5, r1
 800aea0:	2104      	movs	r1, #4
 800aea2:	4604      	mov	r4, r0
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	f000 fe53 	bl	800bb50 <ucdr_buffer_alignment>
 800aeaa:	4601      	mov	r1, r0
 800aeac:	4620      	mov	r0, r4
 800aeae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aeb2:	f000 fe91 	bl	800bbd8 <ucdr_advance_buffer>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	2104      	movs	r1, #4
 800aeba:	f000 fdeb 	bl	800ba94 <ucdr_check_buffer_available_for>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d138      	bne.n	800af34 <ucdr_serialize_endian_uint32_t+0x9c>
 800aec2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aec6:	42b7      	cmp	r7, r6
 800aec8:	d92f      	bls.n	800af2a <ucdr_serialize_endian_uint32_t+0x92>
 800aeca:	6922      	ldr	r2, [r4, #16]
 800aecc:	60a7      	str	r7, [r4, #8]
 800aece:	1bbf      	subs	r7, r7, r6
 800aed0:	443a      	add	r2, r7
 800aed2:	f1c7 0904 	rsb	r9, r7, #4
 800aed6:	6122      	str	r2, [r4, #16]
 800aed8:	4649      	mov	r1, r9
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 fde6 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d04a      	beq.n	800af7a <ucdr_serialize_endian_uint32_t+0xe2>
 800aee4:	2d01      	cmp	r5, #1
 800aee6:	d063      	beq.n	800afb0 <ucdr_serialize_endian_uint32_t+0x118>
 800aee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aeec:	7033      	strb	r3, [r6, #0]
 800aeee:	2f00      	cmp	r7, #0
 800aef0:	d051      	beq.n	800af96 <ucdr_serialize_endian_uint32_t+0xfe>
 800aef2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aef6:	7073      	strb	r3, [r6, #1]
 800aef8:	2f01      	cmp	r7, #1
 800aefa:	d050      	beq.n	800af9e <ucdr_serialize_endian_uint32_t+0x106>
 800aefc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800af00:	70b3      	strb	r3, [r6, #2]
 800af02:	2f02      	cmp	r7, #2
 800af04:	d04f      	beq.n	800afa6 <ucdr_serialize_endian_uint32_t+0x10e>
 800af06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af0a:	70f3      	strb	r3, [r6, #3]
 800af0c:	6923      	ldr	r3, [r4, #16]
 800af0e:	68a2      	ldr	r2, [r4, #8]
 800af10:	7da0      	ldrb	r0, [r4, #22]
 800af12:	3304      	adds	r3, #4
 800af14:	1bdb      	subs	r3, r3, r7
 800af16:	444a      	add	r2, r9
 800af18:	2104      	movs	r1, #4
 800af1a:	f080 0001 	eor.w	r0, r0, #1
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	60a2      	str	r2, [r4, #8]
 800af22:	7561      	strb	r1, [r4, #21]
 800af24:	b003      	add	sp, #12
 800af26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af2a:	2104      	movs	r1, #4
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fdbd 	bl	800baac <ucdr_check_final_buffer_behavior>
 800af32:	b1c8      	cbz	r0, 800af68 <ucdr_serialize_endian_uint32_t+0xd0>
 800af34:	2d01      	cmp	r5, #1
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	d01c      	beq.n	800af74 <ucdr_serialize_endian_uint32_t+0xdc>
 800af3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af46:	705a      	strb	r2, [r3, #1]
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af4e:	709a      	strb	r2, [r3, #2]
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af56:	70da      	strb	r2, [r3, #3]
 800af58:	68a2      	ldr	r2, [r4, #8]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	3204      	adds	r2, #4
 800af5e:	3304      	adds	r3, #4
 800af60:	2104      	movs	r1, #4
 800af62:	60a2      	str	r2, [r4, #8]
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	7561      	strb	r1, [r4, #21]
 800af68:	7da0      	ldrb	r0, [r4, #22]
 800af6a:	f080 0001 	eor.w	r0, r0, #1
 800af6e:	b003      	add	sp, #12
 800af70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af74:	9a01      	ldr	r2, [sp, #4]
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	e7ee      	b.n	800af58 <ucdr_serialize_endian_uint32_t+0xc0>
 800af7a:	68a2      	ldr	r2, [r4, #8]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	7da0      	ldrb	r0, [r4, #22]
 800af80:	f884 8015 	strb.w	r8, [r4, #21]
 800af84:	1bd2      	subs	r2, r2, r7
 800af86:	1bdb      	subs	r3, r3, r7
 800af88:	f080 0001 	eor.w	r0, r0, #1
 800af8c:	60a2      	str	r2, [r4, #8]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	b003      	add	sp, #12
 800af92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afac:	701a      	strb	r2, [r3, #0]
 800afae:	e7ad      	b.n	800af0c <ucdr_serialize_endian_uint32_t+0x74>
 800afb0:	ad01      	add	r5, sp, #4
 800afb2:	4629      	mov	r1, r5
 800afb4:	463a      	mov	r2, r7
 800afb6:	4630      	mov	r0, r6
 800afb8:	f00a f8c3 	bl	8015142 <memcpy>
 800afbc:	68a0      	ldr	r0, [r4, #8]
 800afbe:	464a      	mov	r2, r9
 800afc0:	19e9      	adds	r1, r5, r7
 800afc2:	f00a f8be 	bl	8015142 <memcpy>
 800afc6:	e7a1      	b.n	800af0c <ucdr_serialize_endian_uint32_t+0x74>

0800afc8 <ucdr_deserialize_uint32_t>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	460d      	mov	r5, r1
 800afce:	2104      	movs	r1, #4
 800afd0:	4604      	mov	r4, r0
 800afd2:	f000 fdbd 	bl	800bb50 <ucdr_buffer_alignment>
 800afd6:	4601      	mov	r1, r0
 800afd8:	4620      	mov	r0, r4
 800afda:	f894 8015 	ldrb.w	r8, [r4, #21]
 800afde:	f000 fdfb 	bl	800bbd8 <ucdr_advance_buffer>
 800afe2:	4620      	mov	r0, r4
 800afe4:	2104      	movs	r1, #4
 800afe6:	f000 fd55 	bl	800ba94 <ucdr_check_buffer_available_for>
 800afea:	2800      	cmp	r0, #0
 800afec:	d138      	bne.n	800b060 <ucdr_deserialize_uint32_t+0x98>
 800afee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aff2:	42b7      	cmp	r7, r6
 800aff4:	d92f      	bls.n	800b056 <ucdr_deserialize_uint32_t+0x8e>
 800aff6:	6922      	ldr	r2, [r4, #16]
 800aff8:	60a7      	str	r7, [r4, #8]
 800affa:	1bbf      	subs	r7, r7, r6
 800affc:	443a      	add	r2, r7
 800affe:	f1c7 0904 	rsb	r9, r7, #4
 800b002:	6122      	str	r2, [r4, #16]
 800b004:	4649      	mov	r1, r9
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fd50 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d046      	beq.n	800b09e <ucdr_deserialize_uint32_t+0xd6>
 800b010:	7d23      	ldrb	r3, [r4, #20]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d05c      	beq.n	800b0d0 <ucdr_deserialize_uint32_t+0x108>
 800b016:	78f3      	ldrb	r3, [r6, #3]
 800b018:	702b      	strb	r3, [r5, #0]
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	d04c      	beq.n	800b0b8 <ucdr_deserialize_uint32_t+0xf0>
 800b01e:	78b3      	ldrb	r3, [r6, #2]
 800b020:	706b      	strb	r3, [r5, #1]
 800b022:	2f01      	cmp	r7, #1
 800b024:	f105 0302 	add.w	r3, r5, #2
 800b028:	d04a      	beq.n	800b0c0 <ucdr_deserialize_uint32_t+0xf8>
 800b02a:	7873      	ldrb	r3, [r6, #1]
 800b02c:	70ab      	strb	r3, [r5, #2]
 800b02e:	2f02      	cmp	r7, #2
 800b030:	f105 0303 	add.w	r3, r5, #3
 800b034:	d048      	beq.n	800b0c8 <ucdr_deserialize_uint32_t+0x100>
 800b036:	7833      	ldrb	r3, [r6, #0]
 800b038:	70eb      	strb	r3, [r5, #3]
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	68a2      	ldr	r2, [r4, #8]
 800b03e:	7da0      	ldrb	r0, [r4, #22]
 800b040:	2104      	movs	r1, #4
 800b042:	3304      	adds	r3, #4
 800b044:	1bdb      	subs	r3, r3, r7
 800b046:	444a      	add	r2, r9
 800b048:	7561      	strb	r1, [r4, #21]
 800b04a:	6123      	str	r3, [r4, #16]
 800b04c:	60a2      	str	r2, [r4, #8]
 800b04e:	f080 0001 	eor.w	r0, r0, #1
 800b052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b056:	2104      	movs	r1, #4
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fd27 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b05e:	b1b0      	cbz	r0, 800b08e <ucdr_deserialize_uint32_t+0xc6>
 800b060:	7d23      	ldrb	r3, [r4, #20]
 800b062:	2b01      	cmp	r3, #1
 800b064:	68a3      	ldr	r3, [r4, #8]
 800b066:	d017      	beq.n	800b098 <ucdr_deserialize_uint32_t+0xd0>
 800b068:	78db      	ldrb	r3, [r3, #3]
 800b06a:	702b      	strb	r3, [r5, #0]
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	789b      	ldrb	r3, [r3, #2]
 800b070:	706b      	strb	r3, [r5, #1]
 800b072:	68a3      	ldr	r3, [r4, #8]
 800b074:	785b      	ldrb	r3, [r3, #1]
 800b076:	70ab      	strb	r3, [r5, #2]
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	70eb      	strb	r3, [r5, #3]
 800b07e:	68a2      	ldr	r2, [r4, #8]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	3204      	adds	r2, #4
 800b084:	3304      	adds	r3, #4
 800b086:	2104      	movs	r1, #4
 800b088:	60a2      	str	r2, [r4, #8]
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	7561      	strb	r1, [r4, #21]
 800b08e:	7da0      	ldrb	r0, [r4, #22]
 800b090:	f080 0001 	eor.w	r0, r0, #1
 800b094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	e7ef      	b.n	800b07e <ucdr_deserialize_uint32_t+0xb6>
 800b09e:	68a2      	ldr	r2, [r4, #8]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	7da0      	ldrb	r0, [r4, #22]
 800b0a4:	f884 8015 	strb.w	r8, [r4, #21]
 800b0a8:	1bd2      	subs	r2, r2, r7
 800b0aa:	1bdb      	subs	r3, r3, r7
 800b0ac:	60a2      	str	r2, [r4, #8]
 800b0ae:	6123      	str	r3, [r4, #16]
 800b0b0:	f080 0001 	eor.w	r0, r0, #1
 800b0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	789b      	ldrb	r3, [r3, #2]
 800b0bc:	706b      	strb	r3, [r5, #1]
 800b0be:	1cab      	adds	r3, r5, #2
 800b0c0:	68a2      	ldr	r2, [r4, #8]
 800b0c2:	7852      	ldrb	r2, [r2, #1]
 800b0c4:	f803 2b01 	strb.w	r2, [r3], #1
 800b0c8:	68a2      	ldr	r2, [r4, #8]
 800b0ca:	7812      	ldrb	r2, [r2, #0]
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	e7b4      	b.n	800b03a <ucdr_deserialize_uint32_t+0x72>
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	463a      	mov	r2, r7
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f00a f834 	bl	8015142 <memcpy>
 800b0da:	68a1      	ldr	r1, [r4, #8]
 800b0dc:	464a      	mov	r2, r9
 800b0de:	19e8      	adds	r0, r5, r7
 800b0e0:	f00a f82f 	bl	8015142 <memcpy>
 800b0e4:	e7a9      	b.n	800b03a <ucdr_deserialize_uint32_t+0x72>
 800b0e6:	bf00      	nop

0800b0e8 <ucdr_deserialize_endian_uint32_t>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	460e      	mov	r6, r1
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	4615      	mov	r5, r2
 800b0f4:	f000 fd2c 	bl	800bb50 <ucdr_buffer_alignment>
 800b0f8:	4601      	mov	r1, r0
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b100:	f000 fd6a 	bl	800bbd8 <ucdr_advance_buffer>
 800b104:	4620      	mov	r0, r4
 800b106:	2104      	movs	r1, #4
 800b108:	f000 fcc4 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d13c      	bne.n	800b18a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b110:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b114:	42bb      	cmp	r3, r7
 800b116:	d933      	bls.n	800b180 <ucdr_deserialize_endian_uint32_t+0x98>
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	60a3      	str	r3, [r4, #8]
 800b11c:	eba3 0807 	sub.w	r8, r3, r7
 800b120:	4442      	add	r2, r8
 800b122:	f1c8 0a04 	rsb	sl, r8, #4
 800b126:	6122      	str	r2, [r4, #16]
 800b128:	4651      	mov	r1, sl
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fcbe 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b130:	2800      	cmp	r0, #0
 800b132:	d048      	beq.n	800b1c6 <ucdr_deserialize_endian_uint32_t+0xde>
 800b134:	2e01      	cmp	r6, #1
 800b136:	d061      	beq.n	800b1fc <ucdr_deserialize_endian_uint32_t+0x114>
 800b138:	78fb      	ldrb	r3, [r7, #3]
 800b13a:	702b      	strb	r3, [r5, #0]
 800b13c:	f1b8 0f00 	cmp.w	r8, #0
 800b140:	d050      	beq.n	800b1e4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b142:	78bb      	ldrb	r3, [r7, #2]
 800b144:	706b      	strb	r3, [r5, #1]
 800b146:	f1b8 0f01 	cmp.w	r8, #1
 800b14a:	f105 0302 	add.w	r3, r5, #2
 800b14e:	d04d      	beq.n	800b1ec <ucdr_deserialize_endian_uint32_t+0x104>
 800b150:	787b      	ldrb	r3, [r7, #1]
 800b152:	70ab      	strb	r3, [r5, #2]
 800b154:	f1b8 0f02 	cmp.w	r8, #2
 800b158:	f105 0303 	add.w	r3, r5, #3
 800b15c:	d04a      	beq.n	800b1f4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b15e:	783b      	ldrb	r3, [r7, #0]
 800b160:	70eb      	strb	r3, [r5, #3]
 800b162:	6923      	ldr	r3, [r4, #16]
 800b164:	68a2      	ldr	r2, [r4, #8]
 800b166:	7da0      	ldrb	r0, [r4, #22]
 800b168:	2104      	movs	r1, #4
 800b16a:	3304      	adds	r3, #4
 800b16c:	eba3 0308 	sub.w	r3, r3, r8
 800b170:	4452      	add	r2, sl
 800b172:	7561      	strb	r1, [r4, #21]
 800b174:	6123      	str	r3, [r4, #16]
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	f080 0001 	eor.w	r0, r0, #1
 800b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b180:	2104      	movs	r1, #4
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fc92 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b188:	b1a8      	cbz	r0, 800b1b6 <ucdr_deserialize_endian_uint32_t+0xce>
 800b18a:	2e01      	cmp	r6, #1
 800b18c:	68a3      	ldr	r3, [r4, #8]
 800b18e:	d017      	beq.n	800b1c0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b190:	78db      	ldrb	r3, [r3, #3]
 800b192:	702b      	strb	r3, [r5, #0]
 800b194:	68a3      	ldr	r3, [r4, #8]
 800b196:	789b      	ldrb	r3, [r3, #2]
 800b198:	706b      	strb	r3, [r5, #1]
 800b19a:	68a3      	ldr	r3, [r4, #8]
 800b19c:	785b      	ldrb	r3, [r3, #1]
 800b19e:	70ab      	strb	r3, [r5, #2]
 800b1a0:	68a3      	ldr	r3, [r4, #8]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	70eb      	strb	r3, [r5, #3]
 800b1a6:	68a2      	ldr	r2, [r4, #8]
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	3204      	adds	r2, #4
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	2104      	movs	r1, #4
 800b1b0:	60a2      	str	r2, [r4, #8]
 800b1b2:	6123      	str	r3, [r4, #16]
 800b1b4:	7561      	strb	r1, [r4, #21]
 800b1b6:	7da0      	ldrb	r0, [r4, #22]
 800b1b8:	f080 0001 	eor.w	r0, r0, #1
 800b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	e7ef      	b.n	800b1a6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b1c6:	68a2      	ldr	r2, [r4, #8]
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	7da0      	ldrb	r0, [r4, #22]
 800b1cc:	f884 9015 	strb.w	r9, [r4, #21]
 800b1d0:	eba2 0208 	sub.w	r2, r2, r8
 800b1d4:	eba3 0308 	sub.w	r3, r3, r8
 800b1d8:	60a2      	str	r2, [r4, #8]
 800b1da:	6123      	str	r3, [r4, #16]
 800b1dc:	f080 0001 	eor.w	r0, r0, #1
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	706b      	strb	r3, [r5, #1]
 800b1ea:	1cab      	adds	r3, r5, #2
 800b1ec:	68a2      	ldr	r2, [r4, #8]
 800b1ee:	7852      	ldrb	r2, [r2, #1]
 800b1f0:	f803 2b01 	strb.w	r2, [r3], #1
 800b1f4:	68a2      	ldr	r2, [r4, #8]
 800b1f6:	7812      	ldrb	r2, [r2, #0]
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	e7b2      	b.n	800b162 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	4642      	mov	r2, r8
 800b200:	4628      	mov	r0, r5
 800b202:	f009 ff9e 	bl	8015142 <memcpy>
 800b206:	68a1      	ldr	r1, [r4, #8]
 800b208:	4652      	mov	r2, sl
 800b20a:	eb05 0008 	add.w	r0, r5, r8
 800b20e:	f009 ff98 	bl	8015142 <memcpy>
 800b212:	e7a6      	b.n	800b162 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b214 <ucdr_serialize_uint64_t>:
 800b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b218:	2108      	movs	r1, #8
 800b21a:	b082      	sub	sp, #8
 800b21c:	4604      	mov	r4, r0
 800b21e:	e9cd 2300 	strd	r2, r3, [sp]
 800b222:	f000 fc95 	bl	800bb50 <ucdr_buffer_alignment>
 800b226:	4601      	mov	r1, r0
 800b228:	4620      	mov	r0, r4
 800b22a:	7d67      	ldrb	r7, [r4, #21]
 800b22c:	f000 fcd4 	bl	800bbd8 <ucdr_advance_buffer>
 800b230:	4620      	mov	r0, r4
 800b232:	2108      	movs	r1, #8
 800b234:	f000 fc2e 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d14e      	bne.n	800b2da <ucdr_serialize_uint64_t+0xc6>
 800b23c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800b240:	42b5      	cmp	r5, r6
 800b242:	d945      	bls.n	800b2d0 <ucdr_serialize_uint64_t+0xbc>
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	60a5      	str	r5, [r4, #8]
 800b248:	1bad      	subs	r5, r5, r6
 800b24a:	442b      	add	r3, r5
 800b24c:	f1c5 0808 	rsb	r8, r5, #8
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	4641      	mov	r1, r8
 800b254:	4620      	mov	r0, r4
 800b256:	f000 fc29 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d074      	beq.n	800b348 <ucdr_serialize_uint64_t+0x134>
 800b25e:	7d23      	ldrb	r3, [r4, #20]
 800b260:	2b01      	cmp	r3, #1
 800b262:	f000 809b 	beq.w	800b39c <ucdr_serialize_uint64_t+0x188>
 800b266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b26a:	7033      	strb	r3, [r6, #0]
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	d078      	beq.n	800b362 <ucdr_serialize_uint64_t+0x14e>
 800b270:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b274:	7073      	strb	r3, [r6, #1]
 800b276:	2d01      	cmp	r5, #1
 800b278:	d077      	beq.n	800b36a <ucdr_serialize_uint64_t+0x156>
 800b27a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b27e:	70b3      	strb	r3, [r6, #2]
 800b280:	2d02      	cmp	r5, #2
 800b282:	d076      	beq.n	800b372 <ucdr_serialize_uint64_t+0x15e>
 800b284:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b288:	70f3      	strb	r3, [r6, #3]
 800b28a:	2d03      	cmp	r5, #3
 800b28c:	d075      	beq.n	800b37a <ucdr_serialize_uint64_t+0x166>
 800b28e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b292:	7133      	strb	r3, [r6, #4]
 800b294:	2d04      	cmp	r5, #4
 800b296:	d074      	beq.n	800b382 <ucdr_serialize_uint64_t+0x16e>
 800b298:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b29c:	7173      	strb	r3, [r6, #5]
 800b29e:	2d05      	cmp	r5, #5
 800b2a0:	d073      	beq.n	800b38a <ucdr_serialize_uint64_t+0x176>
 800b2a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b2a6:	71b3      	strb	r3, [r6, #6]
 800b2a8:	2d06      	cmp	r5, #6
 800b2aa:	d072      	beq.n	800b392 <ucdr_serialize_uint64_t+0x17e>
 800b2ac:	f89d 3000 	ldrb.w	r3, [sp]
 800b2b0:	71f3      	strb	r3, [r6, #7]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	68a2      	ldr	r2, [r4, #8]
 800b2b6:	7da0      	ldrb	r0, [r4, #22]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	1b5d      	subs	r5, r3, r5
 800b2bc:	4442      	add	r2, r8
 800b2be:	2308      	movs	r3, #8
 800b2c0:	f080 0001 	eor.w	r0, r0, #1
 800b2c4:	6125      	str	r5, [r4, #16]
 800b2c6:	60a2      	str	r2, [r4, #8]
 800b2c8:	7563      	strb	r3, [r4, #21]
 800b2ca:	b002      	add	sp, #8
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	2108      	movs	r1, #8
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fbea 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b2d8:	b350      	cbz	r0, 800b330 <ucdr_serialize_uint64_t+0x11c>
 800b2da:	7d23      	ldrb	r3, [r4, #20]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d02d      	beq.n	800b33c <ucdr_serialize_uint64_t+0x128>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2ee:	705a      	strb	r2, [r3, #1]
 800b2f0:	68a3      	ldr	r3, [r4, #8]
 800b2f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2f6:	709a      	strb	r2, [r3, #2]
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2fe:	70da      	strb	r2, [r3, #3]
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b306:	711a      	strb	r2, [r3, #4]
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b30e:	715a      	strb	r2, [r3, #5]
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b316:	719a      	strb	r2, [r3, #6]
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	f89d 2000 	ldrb.w	r2, [sp]
 800b31e:	71da      	strb	r2, [r3, #7]
 800b320:	68a2      	ldr	r2, [r4, #8]
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	3208      	adds	r2, #8
 800b326:	3308      	adds	r3, #8
 800b328:	2108      	movs	r1, #8
 800b32a:	60a2      	str	r2, [r4, #8]
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	7561      	strb	r1, [r4, #21]
 800b330:	7da0      	ldrb	r0, [r4, #22]
 800b332:	f080 0001 	eor.w	r0, r0, #1
 800b336:	b002      	add	sp, #8
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	466b      	mov	r3, sp
 800b33e:	cb03      	ldmia	r3!, {r0, r1}
 800b340:	68a3      	ldr	r3, [r4, #8]
 800b342:	6018      	str	r0, [r3, #0]
 800b344:	6059      	str	r1, [r3, #4]
 800b346:	e7eb      	b.n	800b320 <ucdr_serialize_uint64_t+0x10c>
 800b348:	68a2      	ldr	r2, [r4, #8]
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	7da0      	ldrb	r0, [r4, #22]
 800b34e:	7567      	strb	r7, [r4, #21]
 800b350:	1b52      	subs	r2, r2, r5
 800b352:	f080 0001 	eor.w	r0, r0, #1
 800b356:	1b5d      	subs	r5, r3, r5
 800b358:	60a2      	str	r2, [r4, #8]
 800b35a:	6125      	str	r5, [r4, #16]
 800b35c:	b002      	add	sp, #8
 800b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b362:	68a3      	ldr	r3, [r4, #8]
 800b364:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b378:	701a      	strb	r2, [r3, #0]
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	f89d 2000 	ldrb.w	r2, [sp]
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e78a      	b.n	800b2b2 <ucdr_serialize_uint64_t+0x9e>
 800b39c:	4630      	mov	r0, r6
 800b39e:	466e      	mov	r6, sp
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	f009 fecd 	bl	8015142 <memcpy>
 800b3a8:	68a0      	ldr	r0, [r4, #8]
 800b3aa:	4642      	mov	r2, r8
 800b3ac:	1971      	adds	r1, r6, r5
 800b3ae:	f009 fec8 	bl	8015142 <memcpy>
 800b3b2:	e77e      	b.n	800b2b2 <ucdr_serialize_uint64_t+0x9e>

0800b3b4 <ucdr_serialize_int8_t>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f000 fb76 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b3c0:	b148      	cbz	r0, 800b3d6 <ucdr_serialize_int8_t+0x22>
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	701d      	strb	r5, [r3, #0]
 800b3c6:	68a2      	ldr	r2, [r4, #8]
 800b3c8:	6923      	ldr	r3, [r4, #16]
 800b3ca:	3201      	adds	r2, #1
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	60a2      	str	r2, [r4, #8]
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	7561      	strb	r1, [r4, #21]
 800b3d6:	7da0      	ldrb	r0, [r4, #22]
 800b3d8:	f080 0001 	eor.w	r0, r0, #1
 800b3dc:	bd38      	pop	{r3, r4, r5, pc}
 800b3de:	bf00      	nop

0800b3e0 <ucdr_deserialize_int8_t>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	f000 fb60 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b3ec:	b150      	cbz	r0, 800b404 <ucdr_deserialize_int8_t+0x24>
 800b3ee:	68a3      	ldr	r3, [r4, #8]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	702b      	strb	r3, [r5, #0]
 800b3f4:	68a2      	ldr	r2, [r4, #8]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	3201      	adds	r2, #1
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	60a2      	str	r2, [r4, #8]
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	7561      	strb	r1, [r4, #21]
 800b404:	7da0      	ldrb	r0, [r4, #22]
 800b406:	f080 0001 	eor.w	r0, r0, #1
 800b40a:	bd38      	pop	{r3, r4, r5, pc}

0800b40c <ucdr_serialize_int16_t>:
 800b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b410:	b082      	sub	sp, #8
 800b412:	460b      	mov	r3, r1
 800b414:	2102      	movs	r1, #2
 800b416:	4604      	mov	r4, r0
 800b418:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b41c:	f000 fb98 	bl	800bb50 <ucdr_buffer_alignment>
 800b420:	4601      	mov	r1, r0
 800b422:	4620      	mov	r0, r4
 800b424:	7d67      	ldrb	r7, [r4, #21]
 800b426:	f000 fbd7 	bl	800bbd8 <ucdr_advance_buffer>
 800b42a:	4620      	mov	r0, r4
 800b42c:	2102      	movs	r1, #2
 800b42e:	f000 fb31 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b432:	bb78      	cbnz	r0, 800b494 <ucdr_serialize_int16_t+0x88>
 800b434:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800b438:	42b5      	cmp	r5, r6
 800b43a:	d926      	bls.n	800b48a <ucdr_serialize_int16_t+0x7e>
 800b43c:	6922      	ldr	r2, [r4, #16]
 800b43e:	60a5      	str	r5, [r4, #8]
 800b440:	1bad      	subs	r5, r5, r6
 800b442:	442a      	add	r2, r5
 800b444:	f1c5 0802 	rsb	r8, r5, #2
 800b448:	6122      	str	r2, [r4, #16]
 800b44a:	4641      	mov	r1, r8
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fb2d 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b452:	2800      	cmp	r0, #0
 800b454:	d03b      	beq.n	800b4ce <ucdr_serialize_int16_t+0xc2>
 800b456:	7d23      	ldrb	r3, [r4, #20]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d04a      	beq.n	800b4f2 <ucdr_serialize_int16_t+0xe6>
 800b45c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b460:	7033      	strb	r3, [r6, #0]
 800b462:	2d00      	cmp	r5, #0
 800b464:	d040      	beq.n	800b4e8 <ucdr_serialize_int16_t+0xdc>
 800b466:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b46a:	7073      	strb	r3, [r6, #1]
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	68a2      	ldr	r2, [r4, #8]
 800b470:	7da0      	ldrb	r0, [r4, #22]
 800b472:	3302      	adds	r3, #2
 800b474:	1b5b      	subs	r3, r3, r5
 800b476:	4442      	add	r2, r8
 800b478:	2102      	movs	r1, #2
 800b47a:	f080 0001 	eor.w	r0, r0, #1
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	60a2      	str	r2, [r4, #8]
 800b482:	7561      	strb	r1, [r4, #21]
 800b484:	b002      	add	sp, #8
 800b486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b48a:	2102      	movs	r1, #2
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fb0d 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b492:	b190      	cbz	r0, 800b4ba <ucdr_serialize_int16_t+0xae>
 800b494:	7d23      	ldrb	r3, [r4, #20]
 800b496:	2b01      	cmp	r3, #1
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	d014      	beq.n	800b4c6 <ucdr_serialize_int16_t+0xba>
 800b49c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	68a3      	ldr	r3, [r4, #8]
 800b4a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4a8:	705a      	strb	r2, [r3, #1]
 800b4aa:	68a2      	ldr	r2, [r4, #8]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	3202      	adds	r2, #2
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	60a2      	str	r2, [r4, #8]
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	7561      	strb	r1, [r4, #21]
 800b4ba:	7da0      	ldrb	r0, [r4, #22]
 800b4bc:	f080 0001 	eor.w	r0, r0, #1
 800b4c0:	b002      	add	sp, #8
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b4ca:	801a      	strh	r2, [r3, #0]
 800b4cc:	e7ed      	b.n	800b4aa <ucdr_serialize_int16_t+0x9e>
 800b4ce:	68a2      	ldr	r2, [r4, #8]
 800b4d0:	6923      	ldr	r3, [r4, #16]
 800b4d2:	7da0      	ldrb	r0, [r4, #22]
 800b4d4:	7567      	strb	r7, [r4, #21]
 800b4d6:	1b52      	subs	r2, r2, r5
 800b4d8:	1b5b      	subs	r3, r3, r5
 800b4da:	f080 0001 	eor.w	r0, r0, #1
 800b4de:	60a2      	str	r2, [r4, #8]
 800b4e0:	6123      	str	r3, [r4, #16]
 800b4e2:	b002      	add	sp, #8
 800b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e7bc      	b.n	800b46c <ucdr_serialize_int16_t+0x60>
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f10d 0606 	add.w	r6, sp, #6
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	f009 fe21 	bl	8015142 <memcpy>
 800b500:	68a0      	ldr	r0, [r4, #8]
 800b502:	4642      	mov	r2, r8
 800b504:	1971      	adds	r1, r6, r5
 800b506:	f009 fe1c 	bl	8015142 <memcpy>
 800b50a:	e7af      	b.n	800b46c <ucdr_serialize_int16_t+0x60>

0800b50c <ucdr_deserialize_int16_t>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	460d      	mov	r5, r1
 800b512:	2102      	movs	r1, #2
 800b514:	4604      	mov	r4, r0
 800b516:	f000 fb1b 	bl	800bb50 <ucdr_buffer_alignment>
 800b51a:	4601      	mov	r1, r0
 800b51c:	4620      	mov	r0, r4
 800b51e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b522:	f000 fb59 	bl	800bbd8 <ucdr_advance_buffer>
 800b526:	4620      	mov	r0, r4
 800b528:	2102      	movs	r1, #2
 800b52a:	f000 fab3 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b52e:	bb60      	cbnz	r0, 800b58a <ucdr_deserialize_int16_t+0x7e>
 800b530:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b534:	42be      	cmp	r6, r7
 800b536:	d923      	bls.n	800b580 <ucdr_deserialize_int16_t+0x74>
 800b538:	6922      	ldr	r2, [r4, #16]
 800b53a:	60a6      	str	r6, [r4, #8]
 800b53c:	1bf6      	subs	r6, r6, r7
 800b53e:	4432      	add	r2, r6
 800b540:	f1c6 0902 	rsb	r9, r6, #2
 800b544:	6122      	str	r2, [r4, #16]
 800b546:	4649      	mov	r1, r9
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 faaf 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d034      	beq.n	800b5bc <ucdr_deserialize_int16_t+0xb0>
 800b552:	7d23      	ldrb	r3, [r4, #20]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d042      	beq.n	800b5de <ucdr_deserialize_int16_t+0xd2>
 800b558:	787b      	ldrb	r3, [r7, #1]
 800b55a:	702b      	strb	r3, [r5, #0]
 800b55c:	2e00      	cmp	r6, #0
 800b55e:	d03a      	beq.n	800b5d6 <ucdr_deserialize_int16_t+0xca>
 800b560:	783b      	ldrb	r3, [r7, #0]
 800b562:	706b      	strb	r3, [r5, #1]
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	68a2      	ldr	r2, [r4, #8]
 800b568:	7da0      	ldrb	r0, [r4, #22]
 800b56a:	2102      	movs	r1, #2
 800b56c:	3302      	adds	r3, #2
 800b56e:	1b9b      	subs	r3, r3, r6
 800b570:	444a      	add	r2, r9
 800b572:	7561      	strb	r1, [r4, #21]
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	60a2      	str	r2, [r4, #8]
 800b578:	f080 0001 	eor.w	r0, r0, #1
 800b57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b580:	2102      	movs	r1, #2
 800b582:	4620      	mov	r0, r4
 800b584:	f000 fa92 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b588:	b180      	cbz	r0, 800b5ac <ucdr_deserialize_int16_t+0xa0>
 800b58a:	7d23      	ldrb	r3, [r4, #20]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	d011      	beq.n	800b5b6 <ucdr_deserialize_int16_t+0xaa>
 800b592:	785b      	ldrb	r3, [r3, #1]
 800b594:	702b      	strb	r3, [r5, #0]
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	706b      	strb	r3, [r5, #1]
 800b59c:	68a2      	ldr	r2, [r4, #8]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	3202      	adds	r2, #2
 800b5a2:	3302      	adds	r3, #2
 800b5a4:	2102      	movs	r1, #2
 800b5a6:	60a2      	str	r2, [r4, #8]
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	7561      	strb	r1, [r4, #21]
 800b5ac:	7da0      	ldrb	r0, [r4, #22]
 800b5ae:	f080 0001 	eor.w	r0, r0, #1
 800b5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	802b      	strh	r3, [r5, #0]
 800b5ba:	e7ef      	b.n	800b59c <ucdr_deserialize_int16_t+0x90>
 800b5bc:	68a2      	ldr	r2, [r4, #8]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	7da0      	ldrb	r0, [r4, #22]
 800b5c2:	f884 8015 	strb.w	r8, [r4, #21]
 800b5c6:	1b92      	subs	r2, r2, r6
 800b5c8:	1b9b      	subs	r3, r3, r6
 800b5ca:	60a2      	str	r2, [r4, #8]
 800b5cc:	6123      	str	r3, [r4, #16]
 800b5ce:	f080 0001 	eor.w	r0, r0, #1
 800b5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d6:	68a3      	ldr	r3, [r4, #8]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	706b      	strb	r3, [r5, #1]
 800b5dc:	e7c2      	b.n	800b564 <ucdr_deserialize_int16_t+0x58>
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f009 fdad 	bl	8015142 <memcpy>
 800b5e8:	68a1      	ldr	r1, [r4, #8]
 800b5ea:	464a      	mov	r2, r9
 800b5ec:	19a8      	adds	r0, r5, r6
 800b5ee:	f009 fda8 	bl	8015142 <memcpy>
 800b5f2:	e7b7      	b.n	800b564 <ucdr_deserialize_int16_t+0x58>

0800b5f4 <ucdr_serialize_int32_t>:
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	9101      	str	r1, [sp, #4]
 800b5fe:	2104      	movs	r1, #4
 800b600:	f000 faa6 	bl	800bb50 <ucdr_buffer_alignment>
 800b604:	4601      	mov	r1, r0
 800b606:	4620      	mov	r0, r4
 800b608:	7d67      	ldrb	r7, [r4, #21]
 800b60a:	f000 fae5 	bl	800bbd8 <ucdr_advance_buffer>
 800b60e:	4620      	mov	r0, r4
 800b610:	2104      	movs	r1, #4
 800b612:	f000 fa3f 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b616:	2800      	cmp	r0, #0
 800b618:	d139      	bne.n	800b68e <ucdr_serialize_int32_t+0x9a>
 800b61a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800b61e:	42ae      	cmp	r6, r5
 800b620:	d930      	bls.n	800b684 <ucdr_serialize_int32_t+0x90>
 800b622:	6922      	ldr	r2, [r4, #16]
 800b624:	60a6      	str	r6, [r4, #8]
 800b626:	1b76      	subs	r6, r6, r5
 800b628:	4432      	add	r2, r6
 800b62a:	f1c6 0804 	rsb	r8, r6, #4
 800b62e:	6122      	str	r2, [r4, #16]
 800b630:	4641      	mov	r1, r8
 800b632:	4620      	mov	r0, r4
 800b634:	f000 fa3a 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d04c      	beq.n	800b6d6 <ucdr_serialize_int32_t+0xe2>
 800b63c:	7d23      	ldrb	r3, [r4, #20]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d063      	beq.n	800b70a <ucdr_serialize_int32_t+0x116>
 800b642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b646:	702b      	strb	r3, [r5, #0]
 800b648:	2e00      	cmp	r6, #0
 800b64a:	d051      	beq.n	800b6f0 <ucdr_serialize_int32_t+0xfc>
 800b64c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b650:	706b      	strb	r3, [r5, #1]
 800b652:	2e01      	cmp	r6, #1
 800b654:	d050      	beq.n	800b6f8 <ucdr_serialize_int32_t+0x104>
 800b656:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b65a:	70ab      	strb	r3, [r5, #2]
 800b65c:	2e02      	cmp	r6, #2
 800b65e:	d04f      	beq.n	800b700 <ucdr_serialize_int32_t+0x10c>
 800b660:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b664:	70eb      	strb	r3, [r5, #3]
 800b666:	6923      	ldr	r3, [r4, #16]
 800b668:	68a2      	ldr	r2, [r4, #8]
 800b66a:	7da0      	ldrb	r0, [r4, #22]
 800b66c:	3304      	adds	r3, #4
 800b66e:	1b9b      	subs	r3, r3, r6
 800b670:	4442      	add	r2, r8
 800b672:	2104      	movs	r1, #4
 800b674:	f080 0001 	eor.w	r0, r0, #1
 800b678:	6123      	str	r3, [r4, #16]
 800b67a:	60a2      	str	r2, [r4, #8]
 800b67c:	7561      	strb	r1, [r4, #21]
 800b67e:	b002      	add	sp, #8
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	2104      	movs	r1, #4
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fa10 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b68c:	b1d0      	cbz	r0, 800b6c4 <ucdr_serialize_int32_t+0xd0>
 800b68e:	7d23      	ldrb	r3, [r4, #20]
 800b690:	2b01      	cmp	r3, #1
 800b692:	68a3      	ldr	r3, [r4, #8]
 800b694:	d01c      	beq.n	800b6d0 <ucdr_serialize_int32_t+0xdc>
 800b696:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6a2:	705a      	strb	r2, [r3, #1]
 800b6a4:	68a3      	ldr	r3, [r4, #8]
 800b6a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6aa:	709a      	strb	r2, [r3, #2]
 800b6ac:	68a3      	ldr	r3, [r4, #8]
 800b6ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6b2:	70da      	strb	r2, [r3, #3]
 800b6b4:	68a2      	ldr	r2, [r4, #8]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	3204      	adds	r2, #4
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	2104      	movs	r1, #4
 800b6be:	60a2      	str	r2, [r4, #8]
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	7561      	strb	r1, [r4, #21]
 800b6c4:	7da0      	ldrb	r0, [r4, #22]
 800b6c6:	f080 0001 	eor.w	r0, r0, #1
 800b6ca:	b002      	add	sp, #8
 800b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e7ee      	b.n	800b6b4 <ucdr_serialize_int32_t+0xc0>
 800b6d6:	68a2      	ldr	r2, [r4, #8]
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	7da0      	ldrb	r0, [r4, #22]
 800b6dc:	7567      	strb	r7, [r4, #21]
 800b6de:	1b92      	subs	r2, r2, r6
 800b6e0:	1b9b      	subs	r3, r3, r6
 800b6e2:	f080 0001 	eor.w	r0, r0, #1
 800b6e6:	60a2      	str	r2, [r4, #8]
 800b6e8:	6123      	str	r3, [r4, #16]
 800b6ea:	b002      	add	sp, #8
 800b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	68a3      	ldr	r3, [r4, #8]
 800b702:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	e7ad      	b.n	800b666 <ucdr_serialize_int32_t+0x72>
 800b70a:	4628      	mov	r0, r5
 800b70c:	ad01      	add	r5, sp, #4
 800b70e:	4629      	mov	r1, r5
 800b710:	4632      	mov	r2, r6
 800b712:	f009 fd16 	bl	8015142 <memcpy>
 800b716:	68a0      	ldr	r0, [r4, #8]
 800b718:	4642      	mov	r2, r8
 800b71a:	19a9      	adds	r1, r5, r6
 800b71c:	f009 fd11 	bl	8015142 <memcpy>
 800b720:	e7a1      	b.n	800b666 <ucdr_serialize_int32_t+0x72>
 800b722:	bf00      	nop

0800b724 <ucdr_deserialize_int32_t>:
 800b724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b728:	460d      	mov	r5, r1
 800b72a:	2104      	movs	r1, #4
 800b72c:	4604      	mov	r4, r0
 800b72e:	f000 fa0f 	bl	800bb50 <ucdr_buffer_alignment>
 800b732:	4601      	mov	r1, r0
 800b734:	4620      	mov	r0, r4
 800b736:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b73a:	f000 fa4d 	bl	800bbd8 <ucdr_advance_buffer>
 800b73e:	4620      	mov	r0, r4
 800b740:	2104      	movs	r1, #4
 800b742:	f000 f9a7 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b746:	2800      	cmp	r0, #0
 800b748:	d138      	bne.n	800b7bc <ucdr_deserialize_int32_t+0x98>
 800b74a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b74e:	42b7      	cmp	r7, r6
 800b750:	d92f      	bls.n	800b7b2 <ucdr_deserialize_int32_t+0x8e>
 800b752:	6922      	ldr	r2, [r4, #16]
 800b754:	60a7      	str	r7, [r4, #8]
 800b756:	1bbf      	subs	r7, r7, r6
 800b758:	443a      	add	r2, r7
 800b75a:	f1c7 0904 	rsb	r9, r7, #4
 800b75e:	6122      	str	r2, [r4, #16]
 800b760:	4649      	mov	r1, r9
 800b762:	4620      	mov	r0, r4
 800b764:	f000 f9a2 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d046      	beq.n	800b7fa <ucdr_deserialize_int32_t+0xd6>
 800b76c:	7d23      	ldrb	r3, [r4, #20]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d05c      	beq.n	800b82c <ucdr_deserialize_int32_t+0x108>
 800b772:	78f3      	ldrb	r3, [r6, #3]
 800b774:	702b      	strb	r3, [r5, #0]
 800b776:	2f00      	cmp	r7, #0
 800b778:	d04c      	beq.n	800b814 <ucdr_deserialize_int32_t+0xf0>
 800b77a:	78b3      	ldrb	r3, [r6, #2]
 800b77c:	706b      	strb	r3, [r5, #1]
 800b77e:	2f01      	cmp	r7, #1
 800b780:	f105 0302 	add.w	r3, r5, #2
 800b784:	d04a      	beq.n	800b81c <ucdr_deserialize_int32_t+0xf8>
 800b786:	7873      	ldrb	r3, [r6, #1]
 800b788:	70ab      	strb	r3, [r5, #2]
 800b78a:	2f02      	cmp	r7, #2
 800b78c:	f105 0303 	add.w	r3, r5, #3
 800b790:	d048      	beq.n	800b824 <ucdr_deserialize_int32_t+0x100>
 800b792:	7833      	ldrb	r3, [r6, #0]
 800b794:	70eb      	strb	r3, [r5, #3]
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	68a2      	ldr	r2, [r4, #8]
 800b79a:	7da0      	ldrb	r0, [r4, #22]
 800b79c:	2104      	movs	r1, #4
 800b79e:	3304      	adds	r3, #4
 800b7a0:	1bdb      	subs	r3, r3, r7
 800b7a2:	444a      	add	r2, r9
 800b7a4:	7561      	strb	r1, [r4, #21]
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	60a2      	str	r2, [r4, #8]
 800b7aa:	f080 0001 	eor.w	r0, r0, #1
 800b7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 f979 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b7ba:	b1b0      	cbz	r0, 800b7ea <ucdr_deserialize_int32_t+0xc6>
 800b7bc:	7d23      	ldrb	r3, [r4, #20]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	d017      	beq.n	800b7f4 <ucdr_deserialize_int32_t+0xd0>
 800b7c4:	78db      	ldrb	r3, [r3, #3]
 800b7c6:	702b      	strb	r3, [r5, #0]
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	789b      	ldrb	r3, [r3, #2]
 800b7cc:	706b      	strb	r3, [r5, #1]
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	785b      	ldrb	r3, [r3, #1]
 800b7d2:	70ab      	strb	r3, [r5, #2]
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	70eb      	strb	r3, [r5, #3]
 800b7da:	68a2      	ldr	r2, [r4, #8]
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	3204      	adds	r2, #4
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	2104      	movs	r1, #4
 800b7e4:	60a2      	str	r2, [r4, #8]
 800b7e6:	6123      	str	r3, [r4, #16]
 800b7e8:	7561      	strb	r1, [r4, #21]
 800b7ea:	7da0      	ldrb	r0, [r4, #22]
 800b7ec:	f080 0001 	eor.w	r0, r0, #1
 800b7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	e7ef      	b.n	800b7da <ucdr_deserialize_int32_t+0xb6>
 800b7fa:	68a2      	ldr	r2, [r4, #8]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	7da0      	ldrb	r0, [r4, #22]
 800b800:	f884 8015 	strb.w	r8, [r4, #21]
 800b804:	1bd2      	subs	r2, r2, r7
 800b806:	1bdb      	subs	r3, r3, r7
 800b808:	60a2      	str	r2, [r4, #8]
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	f080 0001 	eor.w	r0, r0, #1
 800b810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b814:	68a3      	ldr	r3, [r4, #8]
 800b816:	789b      	ldrb	r3, [r3, #2]
 800b818:	706b      	strb	r3, [r5, #1]
 800b81a:	1cab      	adds	r3, r5, #2
 800b81c:	68a2      	ldr	r2, [r4, #8]
 800b81e:	7852      	ldrb	r2, [r2, #1]
 800b820:	f803 2b01 	strb.w	r2, [r3], #1
 800b824:	68a2      	ldr	r2, [r4, #8]
 800b826:	7812      	ldrb	r2, [r2, #0]
 800b828:	701a      	strb	r2, [r3, #0]
 800b82a:	e7b4      	b.n	800b796 <ucdr_deserialize_int32_t+0x72>
 800b82c:	4631      	mov	r1, r6
 800b82e:	463a      	mov	r2, r7
 800b830:	4628      	mov	r0, r5
 800b832:	f009 fc86 	bl	8015142 <memcpy>
 800b836:	68a1      	ldr	r1, [r4, #8]
 800b838:	464a      	mov	r2, r9
 800b83a:	19e8      	adds	r0, r5, r7
 800b83c:	f009 fc81 	bl	8015142 <memcpy>
 800b840:	e7a9      	b.n	800b796 <ucdr_deserialize_int32_t+0x72>
 800b842:	bf00      	nop

0800b844 <ucdr_serialize_float>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	2104      	movs	r1, #4
 800b84a:	b082      	sub	sp, #8
 800b84c:	4604      	mov	r4, r0
 800b84e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b852:	f000 f97d 	bl	800bb50 <ucdr_buffer_alignment>
 800b856:	4601      	mov	r1, r0
 800b858:	4620      	mov	r0, r4
 800b85a:	7d67      	ldrb	r7, [r4, #21]
 800b85c:	f000 f9bc 	bl	800bbd8 <ucdr_advance_buffer>
 800b860:	4620      	mov	r0, r4
 800b862:	2104      	movs	r1, #4
 800b864:	f000 f916 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d139      	bne.n	800b8e0 <ucdr_serialize_float+0x9c>
 800b86c:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800b870:	42ae      	cmp	r6, r5
 800b872:	d930      	bls.n	800b8d6 <ucdr_serialize_float+0x92>
 800b874:	6922      	ldr	r2, [r4, #16]
 800b876:	60a6      	str	r6, [r4, #8]
 800b878:	1b76      	subs	r6, r6, r5
 800b87a:	4432      	add	r2, r6
 800b87c:	f1c6 0804 	rsb	r8, r6, #4
 800b880:	6122      	str	r2, [r4, #16]
 800b882:	4641      	mov	r1, r8
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f911 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d04c      	beq.n	800b928 <ucdr_serialize_float+0xe4>
 800b88e:	7d23      	ldrb	r3, [r4, #20]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d063      	beq.n	800b95c <ucdr_serialize_float+0x118>
 800b894:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b898:	702b      	strb	r3, [r5, #0]
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	d051      	beq.n	800b942 <ucdr_serialize_float+0xfe>
 800b89e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b8a2:	706b      	strb	r3, [r5, #1]
 800b8a4:	2e01      	cmp	r6, #1
 800b8a6:	d050      	beq.n	800b94a <ucdr_serialize_float+0x106>
 800b8a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b8ac:	70ab      	strb	r3, [r5, #2]
 800b8ae:	2e02      	cmp	r6, #2
 800b8b0:	d04f      	beq.n	800b952 <ucdr_serialize_float+0x10e>
 800b8b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b8b6:	70eb      	strb	r3, [r5, #3]
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	68a2      	ldr	r2, [r4, #8]
 800b8bc:	7da0      	ldrb	r0, [r4, #22]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	1b9b      	subs	r3, r3, r6
 800b8c2:	4442      	add	r2, r8
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	f080 0001 	eor.w	r0, r0, #1
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	60a2      	str	r2, [r4, #8]
 800b8ce:	7561      	strb	r1, [r4, #21]
 800b8d0:	b002      	add	sp, #8
 800b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d6:	2104      	movs	r1, #4
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f000 f8e7 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b8de:	b1d0      	cbz	r0, 800b916 <ucdr_serialize_float+0xd2>
 800b8e0:	7d23      	ldrb	r3, [r4, #20]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	d01c      	beq.n	800b922 <ucdr_serialize_float+0xde>
 800b8e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8f4:	705a      	strb	r2, [r3, #1]
 800b8f6:	68a3      	ldr	r3, [r4, #8]
 800b8f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8fc:	709a      	strb	r2, [r3, #2]
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b904:	70da      	strb	r2, [r3, #3]
 800b906:	68a2      	ldr	r2, [r4, #8]
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	3204      	adds	r2, #4
 800b90c:	3304      	adds	r3, #4
 800b90e:	2104      	movs	r1, #4
 800b910:	60a2      	str	r2, [r4, #8]
 800b912:	6123      	str	r3, [r4, #16]
 800b914:	7561      	strb	r1, [r4, #21]
 800b916:	7da0      	ldrb	r0, [r4, #22]
 800b918:	f080 0001 	eor.w	r0, r0, #1
 800b91c:	b002      	add	sp, #8
 800b91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b922:	9a01      	ldr	r2, [sp, #4]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e7ee      	b.n	800b906 <ucdr_serialize_float+0xc2>
 800b928:	68a2      	ldr	r2, [r4, #8]
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	7da0      	ldrb	r0, [r4, #22]
 800b92e:	7567      	strb	r7, [r4, #21]
 800b930:	1b92      	subs	r2, r2, r6
 800b932:	1b9b      	subs	r3, r3, r6
 800b934:	f080 0001 	eor.w	r0, r0, #1
 800b938:	60a2      	str	r2, [r4, #8]
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	b002      	add	sp, #8
 800b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	e7ad      	b.n	800b8b8 <ucdr_serialize_float+0x74>
 800b95c:	4628      	mov	r0, r5
 800b95e:	ad01      	add	r5, sp, #4
 800b960:	4629      	mov	r1, r5
 800b962:	4632      	mov	r2, r6
 800b964:	f009 fbed 	bl	8015142 <memcpy>
 800b968:	68a0      	ldr	r0, [r4, #8]
 800b96a:	4642      	mov	r2, r8
 800b96c:	19a9      	adds	r1, r5, r6
 800b96e:	f009 fbe8 	bl	8015142 <memcpy>
 800b972:	e7a1      	b.n	800b8b8 <ucdr_serialize_float+0x74>

0800b974 <ucdr_deserialize_float>:
 800b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b978:	460d      	mov	r5, r1
 800b97a:	2104      	movs	r1, #4
 800b97c:	4604      	mov	r4, r0
 800b97e:	f000 f8e7 	bl	800bb50 <ucdr_buffer_alignment>
 800b982:	4601      	mov	r1, r0
 800b984:	4620      	mov	r0, r4
 800b986:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b98a:	f000 f925 	bl	800bbd8 <ucdr_advance_buffer>
 800b98e:	4620      	mov	r0, r4
 800b990:	2104      	movs	r1, #4
 800b992:	f000 f87f 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b996:	2800      	cmp	r0, #0
 800b998:	d138      	bne.n	800ba0c <ucdr_deserialize_float+0x98>
 800b99a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b99e:	42b7      	cmp	r7, r6
 800b9a0:	d92f      	bls.n	800ba02 <ucdr_deserialize_float+0x8e>
 800b9a2:	6922      	ldr	r2, [r4, #16]
 800b9a4:	60a7      	str	r7, [r4, #8]
 800b9a6:	1bbf      	subs	r7, r7, r6
 800b9a8:	443a      	add	r2, r7
 800b9aa:	f1c7 0904 	rsb	r9, r7, #4
 800b9ae:	6122      	str	r2, [r4, #16]
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f87a 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d046      	beq.n	800ba4a <ucdr_deserialize_float+0xd6>
 800b9bc:	7d23      	ldrb	r3, [r4, #20]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d05c      	beq.n	800ba7c <ucdr_deserialize_float+0x108>
 800b9c2:	78f3      	ldrb	r3, [r6, #3]
 800b9c4:	702b      	strb	r3, [r5, #0]
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	d04c      	beq.n	800ba64 <ucdr_deserialize_float+0xf0>
 800b9ca:	78b3      	ldrb	r3, [r6, #2]
 800b9cc:	706b      	strb	r3, [r5, #1]
 800b9ce:	2f01      	cmp	r7, #1
 800b9d0:	f105 0302 	add.w	r3, r5, #2
 800b9d4:	d04a      	beq.n	800ba6c <ucdr_deserialize_float+0xf8>
 800b9d6:	7873      	ldrb	r3, [r6, #1]
 800b9d8:	70ab      	strb	r3, [r5, #2]
 800b9da:	2f02      	cmp	r7, #2
 800b9dc:	f105 0303 	add.w	r3, r5, #3
 800b9e0:	d048      	beq.n	800ba74 <ucdr_deserialize_float+0x100>
 800b9e2:	7833      	ldrb	r3, [r6, #0]
 800b9e4:	70eb      	strb	r3, [r5, #3]
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	68a2      	ldr	r2, [r4, #8]
 800b9ea:	7da0      	ldrb	r0, [r4, #22]
 800b9ec:	2104      	movs	r1, #4
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	1bdb      	subs	r3, r3, r7
 800b9f2:	444a      	add	r2, r9
 800b9f4:	7561      	strb	r1, [r4, #21]
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	60a2      	str	r2, [r4, #8]
 800b9fa:	f080 0001 	eor.w	r0, r0, #1
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	2104      	movs	r1, #4
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 f851 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ba0a:	b1b0      	cbz	r0, 800ba3a <ucdr_deserialize_float+0xc6>
 800ba0c:	7d23      	ldrb	r3, [r4, #20]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	68a3      	ldr	r3, [r4, #8]
 800ba12:	d017      	beq.n	800ba44 <ucdr_deserialize_float+0xd0>
 800ba14:	78db      	ldrb	r3, [r3, #3]
 800ba16:	702b      	strb	r3, [r5, #0]
 800ba18:	68a3      	ldr	r3, [r4, #8]
 800ba1a:	789b      	ldrb	r3, [r3, #2]
 800ba1c:	706b      	strb	r3, [r5, #1]
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	70ab      	strb	r3, [r5, #2]
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	70eb      	strb	r3, [r5, #3]
 800ba2a:	68a2      	ldr	r2, [r4, #8]
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	3204      	adds	r2, #4
 800ba30:	3304      	adds	r3, #4
 800ba32:	2104      	movs	r1, #4
 800ba34:	60a2      	str	r2, [r4, #8]
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	7561      	strb	r1, [r4, #21]
 800ba3a:	7da0      	ldrb	r0, [r4, #22]
 800ba3c:	f080 0001 	eor.w	r0, r0, #1
 800ba40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	e7ef      	b.n	800ba2a <ucdr_deserialize_float+0xb6>
 800ba4a:	68a2      	ldr	r2, [r4, #8]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	7da0      	ldrb	r0, [r4, #22]
 800ba50:	f884 8015 	strb.w	r8, [r4, #21]
 800ba54:	1bd2      	subs	r2, r2, r7
 800ba56:	1bdb      	subs	r3, r3, r7
 800ba58:	60a2      	str	r2, [r4, #8]
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	f080 0001 	eor.w	r0, r0, #1
 800ba60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba64:	68a3      	ldr	r3, [r4, #8]
 800ba66:	789b      	ldrb	r3, [r3, #2]
 800ba68:	706b      	strb	r3, [r5, #1]
 800ba6a:	1cab      	adds	r3, r5, #2
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	7852      	ldrb	r2, [r2, #1]
 800ba70:	f803 2b01 	strb.w	r2, [r3], #1
 800ba74:	68a2      	ldr	r2, [r4, #8]
 800ba76:	7812      	ldrb	r2, [r2, #0]
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	e7b4      	b.n	800b9e6 <ucdr_deserialize_float+0x72>
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4628      	mov	r0, r5
 800ba82:	f009 fb5e 	bl	8015142 <memcpy>
 800ba86:	68a1      	ldr	r1, [r4, #8]
 800ba88:	464a      	mov	r2, r9
 800ba8a:	19e8      	adds	r0, r5, r7
 800ba8c:	f009 fb59 	bl	8015142 <memcpy>
 800ba90:	e7a9      	b.n	800b9e6 <ucdr_deserialize_float+0x72>
 800ba92:	bf00      	nop

0800ba94 <ucdr_check_buffer_available_for>:
 800ba94:	7d83      	ldrb	r3, [r0, #22]
 800ba96:	b93b      	cbnz	r3, 800baa8 <ucdr_check_buffer_available_for+0x14>
 800ba98:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ba9c:	4419      	add	r1, r3
 800ba9e:	4288      	cmp	r0, r1
 800baa0:	bf34      	ite	cc
 800baa2:	2000      	movcc	r0, #0
 800baa4:	2001      	movcs	r0, #1
 800baa6:	4770      	bx	lr
 800baa8:	2000      	movs	r0, #0
 800baaa:	4770      	bx	lr

0800baac <ucdr_check_final_buffer_behavior>:
 800baac:	7d83      	ldrb	r3, [r0, #22]
 800baae:	b943      	cbnz	r3, 800bac2 <ucdr_check_final_buffer_behavior+0x16>
 800bab0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bab4:	4291      	cmp	r1, r2
 800bab6:	b510      	push	{r4, lr}
 800bab8:	4604      	mov	r4, r0
 800baba:	d205      	bcs.n	800bac8 <ucdr_check_final_buffer_behavior+0x1c>
 800babc:	2301      	movs	r3, #1
 800babe:	4618      	mov	r0, r3
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	4770      	bx	lr
 800bac8:	6982      	ldr	r2, [r0, #24]
 800baca:	b13a      	cbz	r2, 800badc <ucdr_check_final_buffer_behavior+0x30>
 800bacc:	69c1      	ldr	r1, [r0, #28]
 800bace:	4790      	blx	r2
 800bad0:	f080 0301 	eor.w	r3, r0, #1
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	75a0      	strb	r0, [r4, #22]
 800bad8:	4618      	mov	r0, r3
 800bada:	bd10      	pop	{r4, pc}
 800badc:	2001      	movs	r0, #1
 800bade:	75a0      	strb	r0, [r4, #22]
 800bae0:	e7fa      	b.n	800bad8 <ucdr_check_final_buffer_behavior+0x2c>
 800bae2:	bf00      	nop

0800bae4 <ucdr_set_on_full_buffer_callback>:
 800bae4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop

0800baec <ucdr_init_buffer_origin_offset_endian>:
 800baec:	b430      	push	{r4, r5}
 800baee:	9c02      	ldr	r4, [sp, #8]
 800baf0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800baf4:	6001      	str	r1, [r0, #0]
 800baf6:	440a      	add	r2, r1
 800baf8:	60c3      	str	r3, [r0, #12]
 800bafa:	4421      	add	r1, r4
 800bafc:	441c      	add	r4, r3
 800bafe:	2300      	movs	r3, #0
 800bb00:	6104      	str	r4, [r0, #16]
 800bb02:	7505      	strb	r5, [r0, #20]
 800bb04:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800bb08:	bc30      	pop	{r4, r5}
 800bb0a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800bb0e:	7543      	strb	r3, [r0, #21]
 800bb10:	7583      	strb	r3, [r0, #22]
 800bb12:	4770      	bx	lr

0800bb14 <ucdr_init_buffer_origin_offset>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	9c04      	ldr	r4, [sp, #16]
 800bb1a:	9400      	str	r4, [sp, #0]
 800bb1c:	2401      	movs	r4, #1
 800bb1e:	9401      	str	r4, [sp, #4]
 800bb20:	f7ff ffe4 	bl	800baec <ucdr_init_buffer_origin_offset_endian>
 800bb24:	b002      	add	sp, #8
 800bb26:	bd10      	pop	{r4, pc}

0800bb28 <ucdr_init_buffer_origin>:
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	2400      	movs	r4, #0
 800bb2e:	9400      	str	r4, [sp, #0]
 800bb30:	f7ff fff0 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 800bb34:	b002      	add	sp, #8
 800bb36:	bd10      	pop	{r4, pc}

0800bb38 <ucdr_init_buffer>:
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f7ff bff5 	b.w	800bb28 <ucdr_init_buffer_origin>
 800bb3e:	bf00      	nop

0800bb40 <ucdr_alignment>:
 800bb40:	fbb0 f3f1 	udiv	r3, r0, r1
 800bb44:	fb03 0011 	mls	r0, r3, r1, r0
 800bb48:	1a08      	subs	r0, r1, r0
 800bb4a:	3901      	subs	r1, #1
 800bb4c:	4008      	ands	r0, r1
 800bb4e:	4770      	bx	lr

0800bb50 <ucdr_buffer_alignment>:
 800bb50:	7d43      	ldrb	r3, [r0, #21]
 800bb52:	428b      	cmp	r3, r1
 800bb54:	d208      	bcs.n	800bb68 <ucdr_buffer_alignment+0x18>
 800bb56:	6903      	ldr	r3, [r0, #16]
 800bb58:	fbb3 f0f1 	udiv	r0, r3, r1
 800bb5c:	fb01 3010 	mls	r0, r1, r0, r3
 800bb60:	1a08      	subs	r0, r1, r0
 800bb62:	3901      	subs	r1, #1
 800bb64:	4008      	ands	r0, r1
 800bb66:	4770      	bx	lr
 800bb68:	2000      	movs	r0, #0
 800bb6a:	4770      	bx	lr

0800bb6c <ucdr_align_to>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460e      	mov	r6, r1
 800bb72:	f7ff ffed 	bl	800bb50 <ucdr_buffer_alignment>
 800bb76:	68a5      	ldr	r5, [r4, #8]
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	6922      	ldr	r2, [r4, #16]
 800bb7c:	7566      	strb	r6, [r4, #21]
 800bb7e:	4405      	add	r5, r0
 800bb80:	42ab      	cmp	r3, r5
 800bb82:	4410      	add	r0, r2
 800bb84:	bf28      	it	cs
 800bb86:	462b      	movcs	r3, r5
 800bb88:	6120      	str	r0, [r4, #16]
 800bb8a:	60a3      	str	r3, [r4, #8]
 800bb8c:	bd70      	pop	{r4, r5, r6, pc}
 800bb8e:	bf00      	nop

0800bb90 <ucdr_buffer_length>:
 800bb90:	6882      	ldr	r2, [r0, #8]
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	1a10      	subs	r0, r2, r0
 800bb96:	4770      	bx	lr

0800bb98 <ucdr_buffer_remaining>:
 800bb98:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bb9c:	1a10      	subs	r0, r2, r0
 800bb9e:	4770      	bx	lr

0800bba0 <ucdr_check_final_buffer_behavior_array>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	7d83      	ldrb	r3, [r0, #22]
 800bba4:	b963      	cbnz	r3, 800bbc0 <ucdr_check_final_buffer_behavior_array+0x20>
 800bba6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	d308      	bcc.n	800bbc4 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbb2:	b139      	cbz	r1, 800bbc4 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbb4:	6983      	ldr	r3, [r0, #24]
 800bbb6:	b163      	cbz	r3, 800bbd2 <ucdr_check_final_buffer_behavior_array+0x32>
 800bbb8:	69c1      	ldr	r1, [r0, #28]
 800bbba:	4798      	blx	r3
 800bbbc:	75a0      	strb	r0, [r4, #22]
 800bbbe:	b108      	cbz	r0, 800bbc4 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7ff ffe7 	bl	800bb98 <ucdr_buffer_remaining>
 800bbca:	42a8      	cmp	r0, r5
 800bbcc:	bf28      	it	cs
 800bbce:	4628      	movcs	r0, r5
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	7583      	strb	r3, [r0, #22]
 800bbd6:	e7f3      	b.n	800bbc0 <ucdr_check_final_buffer_behavior_array+0x20>

0800bbd8 <ucdr_advance_buffer>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	f7ff ff59 	bl	800ba94 <ucdr_check_buffer_available_for>
 800bbe2:	b178      	cbz	r0, 800bc04 <ucdr_advance_buffer+0x2c>
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	6921      	ldr	r1, [r4, #16]
 800bbe8:	442b      	add	r3, r5
 800bbea:	60a3      	str	r3, [r4, #8]
 800bbec:	2301      	movs	r3, #1
 800bbee:	4429      	add	r1, r5
 800bbf0:	7563      	strb	r3, [r4, #21]
 800bbf2:	6121      	str	r1, [r4, #16]
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	68a2      	ldr	r2, [r4, #8]
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	4402      	add	r2, r0
 800bbfc:	4403      	add	r3, r0
 800bbfe:	1a2d      	subs	r5, r5, r0
 800bc00:	60a2      	str	r2, [r4, #8]
 800bc02:	6123      	str	r3, [r4, #16]
 800bc04:	2201      	movs	r2, #1
 800bc06:	4629      	mov	r1, r5
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f7ff ffc9 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d1f1      	bne.n	800bbf6 <ucdr_advance_buffer+0x1e>
 800bc12:	2301      	movs	r3, #1
 800bc14:	7563      	strb	r3, [r4, #21]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}

0800bc18 <rcl_client_get_rmw_handle>:
 800bc18:	b110      	cbz	r0, 800bc20 <rcl_client_get_rmw_handle+0x8>
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	b100      	cbz	r0, 800bc20 <rcl_client_get_rmw_handle+0x8>
 800bc1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop

0800bc24 <rcl_take_response>:
 800bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc26:	460e      	mov	r6, r1
 800bc28:	460c      	mov	r4, r1
 800bc2a:	4607      	mov	r7, r0
 800bc2c:	4694      	mov	ip, r2
 800bc2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bc30:	b08d      	sub	sp, #52	@ 0x34
 800bc32:	ad06      	add	r5, sp, #24
 800bc34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc36:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bc3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800bc3e:	b337      	cbz	r7, 800bc8e <rcl_take_response+0x6a>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	b323      	cbz	r3, 800bc8e <rcl_take_response+0x6a>
 800bc44:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bc46:	b310      	cbz	r0, 800bc8e <rcl_take_response+0x6a>
 800bc48:	4662      	mov	r2, ip
 800bc4a:	b31a      	cbz	r2, 800bc94 <rcl_take_response+0x70>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2600      	movs	r6, #0
 800bc50:	2700      	movs	r7, #0
 800bc52:	f88d 3007 	strb.w	r3, [sp, #7]
 800bc56:	a902      	add	r1, sp, #8
 800bc58:	f10d 0307 	add.w	r3, sp, #7
 800bc5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bc60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc64:	f003 fb4e 	bl	800f304 <rmw_take_response>
 800bc68:	4606      	mov	r6, r0
 800bc6a:	b9a8      	cbnz	r0, 800bc98 <rcl_take_response+0x74>
 800bc6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc70:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	bf08      	it	eq
 800bc78:	461e      	moveq	r6, r3
 800bc7a:	ad06      	add	r5, sp, #24
 800bc7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc80:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc84:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc88:	4630      	mov	r0, r6
 800bc8a:	b00d      	add	sp, #52	@ 0x34
 800bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc8e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800bc92:	e7f2      	b.n	800bc7a <rcl_take_response+0x56>
 800bc94:	260b      	movs	r6, #11
 800bc96:	e7f0      	b.n	800bc7a <rcl_take_response+0x56>
 800bc98:	2601      	movs	r6, #1
 800bc9a:	e7ee      	b.n	800bc7a <rcl_take_response+0x56>

0800bc9c <rcl_get_zero_initialized_context>:
 800bc9c:	4a03      	ldr	r2, [pc, #12]	@ (800bcac <rcl_get_zero_initialized_context+0x10>)
 800bc9e:	4603      	mov	r3, r0
 800bca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bca4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	4770      	bx	lr
 800bcac:	080165e0 	.word	0x080165e0

0800bcb0 <rcl_context_is_valid>:
 800bcb0:	b118      	cbz	r0, 800bcba <rcl_context_is_valid+0xa>
 800bcb2:	6840      	ldr	r0, [r0, #4]
 800bcb4:	3800      	subs	r0, #0
 800bcb6:	bf18      	it	ne
 800bcb8:	2001      	movne	r0, #1
 800bcba:	4770      	bx	lr

0800bcbc <__cleanup_context>:
 800bcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	6800      	ldr	r0, [r0, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6073      	str	r3, [r6, #4]
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d04d      	beq.n	800bd68 <__cleanup_context+0xac>
 800bccc:	6947      	ldr	r7, [r0, #20]
 800bcce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bcd2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800bcd6:	b137      	cbz	r7, 800bce6 <__cleanup_context+0x2a>
 800bcd8:	3014      	adds	r0, #20
 800bcda:	f000 fb1d 	bl	800c318 <rcl_init_options_fini>
 800bcde:	4607      	mov	r7, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d148      	bne.n	800bd76 <__cleanup_context+0xba>
 800bce4:	6830      	ldr	r0, [r6, #0]
 800bce6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bce8:	b143      	cbz	r3, 800bcfc <__cleanup_context+0x40>
 800bcea:	3028      	adds	r0, #40	@ 0x28
 800bcec:	f003 f8b8 	bl	800ee60 <rmw_context_fini>
 800bcf0:	b118      	cbz	r0, 800bcfa <__cleanup_context+0x3e>
 800bcf2:	2f00      	cmp	r7, #0
 800bcf4:	d042      	beq.n	800bd7c <__cleanup_context+0xc0>
 800bcf6:	f7fe fc07 	bl	800a508 <rcutils_reset_error>
 800bcfa:	6830      	ldr	r0, [r6, #0]
 800bcfc:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800bd00:	f1bc 0f00 	cmp.w	ip, #0
 800bd04:	d01c      	beq.n	800bd40 <__cleanup_context+0x84>
 800bd06:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800bd0a:	2a01      	cmp	r2, #1
 800bd0c:	f173 0100 	sbcs.w	r1, r3, #0
 800bd10:	db12      	blt.n	800bd38 <__cleanup_context+0x7c>
 800bd12:	2400      	movs	r4, #0
 800bd14:	2500      	movs	r5, #0
 800bd16:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	b1c0      	cbz	r0, 800bd50 <__cleanup_context+0x94>
 800bd1e:	47c0      	blx	r8
 800bd20:	6831      	ldr	r1, [r6, #0]
 800bd22:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800bd26:	3401      	adds	r4, #1
 800bd28:	f145 0500 	adc.w	r5, r5, #0
 800bd2c:	4294      	cmp	r4, r2
 800bd2e:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800bd32:	eb75 0103 	sbcs.w	r1, r5, r3
 800bd36:	dbee      	blt.n	800bd16 <__cleanup_context+0x5a>
 800bd38:	4660      	mov	r0, ip
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	47c0      	blx	r8
 800bd3e:	6830      	ldr	r0, [r6, #0]
 800bd40:	4649      	mov	r1, r9
 800bd42:	47c0      	blx	r8
 800bd44:	2300      	movs	r3, #0
 800bd46:	e9c6 3300 	strd	r3, r3, [r6]
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd50:	3401      	adds	r4, #1
 800bd52:	f145 0500 	adc.w	r5, r5, #0
 800bd56:	4294      	cmp	r4, r2
 800bd58:	eb75 0103 	sbcs.w	r1, r5, r3
 800bd5c:	dbdb      	blt.n	800bd16 <__cleanup_context+0x5a>
 800bd5e:	4660      	mov	r0, ip
 800bd60:	4649      	mov	r1, r9
 800bd62:	47c0      	blx	r8
 800bd64:	6830      	ldr	r0, [r6, #0]
 800bd66:	e7eb      	b.n	800bd40 <__cleanup_context+0x84>
 800bd68:	4607      	mov	r7, r0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e9c6 3300 	strd	r3, r3, [r6]
 800bd70:	4638      	mov	r0, r7
 800bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd76:	f7fe fbc7 	bl	800a508 <rcutils_reset_error>
 800bd7a:	e7b3      	b.n	800bce4 <__cleanup_context+0x28>
 800bd7c:	f007 fbe2 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800bd80:	4607      	mov	r7, r0
 800bd82:	e7b8      	b.n	800bcf6 <__cleanup_context+0x3a>

0800bd84 <rcl_expand_topic_name>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	b08b      	sub	sp, #44	@ 0x2c
 800bd8a:	9306      	str	r3, [sp, #24]
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f000 80d2 	beq.w	800bf36 <rcl_expand_topic_name+0x1b2>
 800bd92:	460e      	mov	r6, r1
 800bd94:	2900      	cmp	r1, #0
 800bd96:	f000 80ce 	beq.w	800bf36 <rcl_expand_topic_name+0x1b2>
 800bd9a:	4617      	mov	r7, r2
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	f000 80ca 	beq.w	800bf36 <rcl_expand_topic_name+0x1b2>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 80c7 	beq.w	800bf36 <rcl_expand_topic_name+0x1b2>
 800bda8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80c3 	beq.w	800bf36 <rcl_expand_topic_name+0x1b2>
 800bdb0:	a909      	add	r1, sp, #36	@ 0x24
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	f001 fa4d 	bl	800d254 <rcl_validate_topic_name>
 800bdba:	4604      	mov	r4, r0
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f040 80b6 	bne.w	800bf2e <rcl_expand_topic_name+0x1aa>
 800bdc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f040 80bf 	bne.w	800bf48 <rcl_expand_topic_name+0x1c4>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	a909      	add	r1, sp, #36	@ 0x24
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f002 fd8c 	bl	800e8ec <rmw_validate_node_name>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f040 80b3 	bne.w	800bf40 <rcl_expand_topic_name+0x1bc>
 800bdda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	f040 80b8 	bne.w	800bf52 <rcl_expand_topic_name+0x1ce>
 800bde2:	a909      	add	r1, sp, #36	@ 0x24
 800bde4:	4638      	mov	r0, r7
 800bde6:	f002 fd63 	bl	800e8b0 <rmw_validate_namespace>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f040 80a8 	bne.w	800bf40 <rcl_expand_topic_name+0x1bc>
 800bdf0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bdf2:	2c00      	cmp	r4, #0
 800bdf4:	f040 80f6 	bne.w	800bfe4 <rcl_expand_topic_name+0x260>
 800bdf8:	217b      	movs	r1, #123	@ 0x7b
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	f009 f8e0 	bl	8014fc0 <strchr>
 800be00:	f898 3000 	ldrb.w	r3, [r8]
 800be04:	2b2f      	cmp	r3, #47	@ 0x2f
 800be06:	4605      	mov	r5, r0
 800be08:	f000 80c4 	beq.w	800bf94 <rcl_expand_topic_name+0x210>
 800be0c:	2b7e      	cmp	r3, #126	@ 0x7e
 800be0e:	d16f      	bne.n	800bef0 <rcl_expand_topic_name+0x16c>
 800be10:	4638      	mov	r0, r7
 800be12:	f7f4 f9ef 	bl	80001f4 <strlen>
 800be16:	4b87      	ldr	r3, [pc, #540]	@ (800c034 <rcl_expand_topic_name+0x2b0>)
 800be18:	4987      	ldr	r1, [pc, #540]	@ (800c038 <rcl_expand_topic_name+0x2b4>)
 800be1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800be1c:	9604      	str	r6, [sp, #16]
 800be1e:	2801      	cmp	r0, #1
 800be20:	bf0c      	ite	eq
 800be22:	4618      	moveq	r0, r3
 800be24:	4608      	movne	r0, r1
 800be26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be2a:	e9cd 2300 	strd	r2, r3, [sp]
 800be2e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800be32:	f108 0101 	add.w	r1, r8, #1
 800be36:	9105      	str	r1, [sp, #20]
 800be38:	ab14      	add	r3, sp, #80	@ 0x50
 800be3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be3c:	f002 f99a 	bl	800e174 <rcutils_format_string_limit>
 800be40:	4682      	mov	sl, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	f000 80d0 	beq.w	800bfe8 <rcl_expand_topic_name+0x264>
 800be48:	2d00      	cmp	r5, #0
 800be4a:	f000 80aa 	beq.w	800bfa2 <rcl_expand_topic_name+0x21e>
 800be4e:	217b      	movs	r1, #123	@ 0x7b
 800be50:	f009 f8b6 	bl	8014fc0 <strchr>
 800be54:	46d1      	mov	r9, sl
 800be56:	4605      	mov	r5, r0
 800be58:	9407      	str	r4, [sp, #28]
 800be5a:	46d3      	mov	fp, sl
 800be5c:	464c      	mov	r4, r9
 800be5e:	2d00      	cmp	r5, #0
 800be60:	f000 80c7 	beq.w	800bff2 <rcl_expand_topic_name+0x26e>
 800be64:	217d      	movs	r1, #125	@ 0x7d
 800be66:	4620      	mov	r0, r4
 800be68:	f009 f8aa 	bl	8014fc0 <strchr>
 800be6c:	eba0 0905 	sub.w	r9, r0, r5
 800be70:	f109 0a01 	add.w	sl, r9, #1
 800be74:	4871      	ldr	r0, [pc, #452]	@ (800c03c <rcl_expand_topic_name+0x2b8>)
 800be76:	4652      	mov	r2, sl
 800be78:	4629      	mov	r1, r5
 800be7a:	f009 f8ae 	bl	8014fda <strncmp>
 800be7e:	2800      	cmp	r0, #0
 800be80:	f000 808d 	beq.w	800bf9e <rcl_expand_topic_name+0x21a>
 800be84:	486e      	ldr	r0, [pc, #440]	@ (800c040 <rcl_expand_topic_name+0x2bc>)
 800be86:	4652      	mov	r2, sl
 800be88:	4629      	mov	r1, r5
 800be8a:	f009 f8a6 	bl	8014fda <strncmp>
 800be8e:	b130      	cbz	r0, 800be9e <rcl_expand_topic_name+0x11a>
 800be90:	486c      	ldr	r0, [pc, #432]	@ (800c044 <rcl_expand_topic_name+0x2c0>)
 800be92:	4652      	mov	r2, sl
 800be94:	4629      	mov	r1, r5
 800be96:	f009 f8a0 	bl	8014fda <strncmp>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d15b      	bne.n	800bf56 <rcl_expand_topic_name+0x1d2>
 800be9e:	46b9      	mov	r9, r7
 800bea0:	ab16      	add	r3, sp, #88	@ 0x58
 800bea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bea6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800beaa:	ab14      	add	r3, sp, #80	@ 0x50
 800beac:	4628      	mov	r0, r5
 800beae:	cb0c      	ldmia	r3, {r2, r3}
 800beb0:	4651      	mov	r1, sl
 800beb2:	f002 faab 	bl	800e40c <rcutils_strndup>
 800beb6:	4605      	mov	r5, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	f000 80a4 	beq.w	800c006 <rcl_expand_topic_name+0x282>
 800bebe:	464a      	mov	r2, r9
 800bec0:	4620      	mov	r0, r4
 800bec2:	ab14      	add	r3, sp, #80	@ 0x50
 800bec4:	4629      	mov	r1, r5
 800bec6:	f002 f9a7 	bl	800e218 <rcutils_repl_str>
 800beca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800becc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bece:	4604      	mov	r4, r0
 800bed0:	4628      	mov	r0, r5
 800bed2:	4798      	blx	r3
 800bed4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bed6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bed8:	4658      	mov	r0, fp
 800beda:	4798      	blx	r3
 800bedc:	2c00      	cmp	r4, #0
 800bede:	f000 8083 	beq.w	800bfe8 <rcl_expand_topic_name+0x264>
 800bee2:	217b      	movs	r1, #123	@ 0x7b
 800bee4:	4620      	mov	r0, r4
 800bee6:	f009 f86b 	bl	8014fc0 <strchr>
 800beea:	46a3      	mov	fp, r4
 800beec:	4605      	mov	r5, r0
 800beee:	e7b6      	b.n	800be5e <rcl_expand_topic_name+0xda>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d151      	bne.n	800bf98 <rcl_expand_topic_name+0x214>
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7f4 f97d 	bl	80001f4 <strlen>
 800befa:	4b53      	ldr	r3, [pc, #332]	@ (800c048 <rcl_expand_topic_name+0x2c4>)
 800befc:	4a53      	ldr	r2, [pc, #332]	@ (800c04c <rcl_expand_topic_name+0x2c8>)
 800befe:	f8cd 8010 	str.w	r8, [sp, #16]
 800bf02:	2801      	cmp	r0, #1
 800bf04:	bf0c      	ite	eq
 800bf06:	4618      	moveq	r0, r3
 800bf08:	4610      	movne	r0, r2
 800bf0a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800bf0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf10:	e9cd 3200 	strd	r3, r2, [sp]
 800bf14:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800bf18:	ab14      	add	r3, sp, #80	@ 0x50
 800bf1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf1c:	f002 f92a 	bl	800e174 <rcutils_format_string_limit>
 800bf20:	4682      	mov	sl, r0
 800bf22:	4653      	mov	r3, sl
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d05f      	beq.n	800bfe8 <rcl_expand_topic_name+0x264>
 800bf28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf2a:	f8c3 a000 	str.w	sl, [r3]
 800bf2e:	4620      	mov	r0, r4
 800bf30:	b00b      	add	sp, #44	@ 0x2c
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	240b      	movs	r4, #11
 800bf38:	4620      	mov	r0, r4
 800bf3a:	b00b      	add	sp, #44	@ 0x2c
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	f007 fb00 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf44:	4604      	mov	r4, r0
 800bf46:	e7f2      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800bf48:	2467      	movs	r4, #103	@ 0x67
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	b00b      	add	sp, #44	@ 0x2c
 800bf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf52:	24c9      	movs	r4, #201	@ 0xc9
 800bf54:	e7eb      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800bf56:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800bf5a:	9806      	ldr	r0, [sp, #24]
 800bf5c:	1c69      	adds	r1, r5, #1
 800bf5e:	f002 fb6f 	bl	800e640 <rcutils_string_map_getn>
 800bf62:	4681      	mov	r9, r0
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d19b      	bne.n	800bea0 <rcl_expand_topic_name+0x11c>
 800bf68:	aa16      	add	r2, sp, #88	@ 0x58
 800bf6a:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf6e:	f8c3 9000 	str.w	r9, [r3]
 800bf72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bf76:	ab14      	add	r3, sp, #80	@ 0x50
 800bf78:	cb0c      	ldmia	r3, {r2, r3}
 800bf7a:	4651      	mov	r1, sl
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f002 fa45 	bl	800e40c <rcutils_strndup>
 800bf82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf84:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bf86:	4798      	blx	r3
 800bf88:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf8a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	4798      	blx	r3
 800bf90:	2469      	movs	r4, #105	@ 0x69
 800bf92:	e7cc      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d03e      	beq.n	800c016 <rcl_expand_topic_name+0x292>
 800bf98:	46c1      	mov	r9, r8
 800bf9a:	46a2      	mov	sl, r4
 800bf9c:	e75c      	b.n	800be58 <rcl_expand_topic_name+0xd4>
 800bf9e:	46b1      	mov	r9, r6
 800bfa0:	e77e      	b.n	800bea0 <rcl_expand_topic_name+0x11c>
 800bfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa6:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfa8:	d0be      	beq.n	800bf28 <rcl_expand_topic_name+0x1a4>
 800bfaa:	4638      	mov	r0, r7
 800bfac:	f7f4 f922 	bl	80001f4 <strlen>
 800bfb0:	4b25      	ldr	r3, [pc, #148]	@ (800c048 <rcl_expand_topic_name+0x2c4>)
 800bfb2:	4926      	ldr	r1, [pc, #152]	@ (800c04c <rcl_expand_topic_name+0x2c8>)
 800bfb4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bfb6:	f8cd a010 	str.w	sl, [sp, #16]
 800bfba:	2801      	cmp	r0, #1
 800bfbc:	bf0c      	ite	eq
 800bfbe:	4618      	moveq	r0, r3
 800bfc0:	4608      	movne	r0, r1
 800bfc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bfc6:	e9cd 2300 	strd	r2, r3, [sp]
 800bfca:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800bfce:	ab14      	add	r3, sp, #80	@ 0x50
 800bfd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfd2:	f002 f8cf 	bl	800e174 <rcutils_format_string_limit>
 800bfd6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bfd8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800bfda:	4603      	mov	r3, r0
 800bfdc:	4650      	mov	r0, sl
 800bfde:	469a      	mov	sl, r3
 800bfe0:	4790      	blx	r2
 800bfe2:	e79e      	b.n	800bf22 <rcl_expand_topic_name+0x19e>
 800bfe4:	24ca      	movs	r4, #202	@ 0xca
 800bfe6:	e7a2      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800bfe8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfea:	2300      	movs	r3, #0
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	240a      	movs	r4, #10
 800bff0:	e79d      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800bff2:	465b      	mov	r3, fp
 800bff4:	9c07      	ldr	r4, [sp, #28]
 800bff6:	46da      	mov	sl, fp
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1d2      	bne.n	800bfa2 <rcl_expand_topic_name+0x21e>
 800bffc:	f898 3000 	ldrb.w	r3, [r8]
 800c000:	2b2f      	cmp	r3, #47	@ 0x2f
 800c002:	d091      	beq.n	800bf28 <rcl_expand_topic_name+0x1a4>
 800c004:	e776      	b.n	800bef4 <rcl_expand_topic_name+0x170>
 800c006:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c008:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c00a:	601d      	str	r5, [r3, #0]
 800c00c:	4658      	mov	r0, fp
 800c00e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c010:	4798      	blx	r3
 800c012:	240a      	movs	r4, #10
 800c014:	e78b      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800c016:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 800c01a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c01e:	ab14      	add	r3, sp, #80	@ 0x50
 800c020:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c022:	4640      	mov	r0, r8
 800c024:	f002 f9d0 	bl	800e3c8 <rcutils_strdup>
 800c028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c02a:	2800      	cmp	r0, #0
 800c02c:	bf08      	it	eq
 800c02e:	240a      	moveq	r4, #10
 800c030:	6018      	str	r0, [r3, #0]
 800c032:	e77c      	b.n	800bf2e <rcl_expand_topic_name+0x1aa>
 800c034:	08016b08 	.word	0x08016b08
 800c038:	080165e8 	.word	0x080165e8
 800c03c:	08016600 	.word	0x08016600
 800c040:	08016608 	.word	0x08016608
 800c044:	08016610 	.word	0x08016610
 800c048:	080165f0 	.word	0x080165f0
 800c04c:	080165f8 	.word	0x080165f8

0800c050 <rcl_get_default_topic_name_substitutions>:
 800c050:	2800      	cmp	r0, #0
 800c052:	bf0c      	ite	eq
 800c054:	200b      	moveq	r0, #11
 800c056:	2000      	movne	r0, #0
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop

0800c05c <rcl_init>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	1e07      	subs	r7, r0, #0
 800c062:	b09f      	sub	sp, #124	@ 0x7c
 800c064:	4688      	mov	r8, r1
 800c066:	4692      	mov	sl, r2
 800c068:	4699      	mov	r9, r3
 800c06a:	f340 8097 	ble.w	800c19c <rcl_init+0x140>
 800c06e:	2900      	cmp	r1, #0
 800c070:	f000 8097 	beq.w	800c1a2 <rcl_init+0x146>
 800c074:	1f0d      	subs	r5, r1, #4
 800c076:	2400      	movs	r4, #0
 800c078:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800c07c:	3401      	adds	r4, #1
 800c07e:	2e00      	cmp	r6, #0
 800c080:	f000 808f 	beq.w	800c1a2 <rcl_init+0x146>
 800c084:	42a7      	cmp	r7, r4
 800c086:	d1f7      	bne.n	800c078 <rcl_init+0x1c>
 800c088:	f1ba 0f00 	cmp.w	sl, #0
 800c08c:	f000 8089 	beq.w	800c1a2 <rcl_init+0x146>
 800c090:	f8da 4000 	ldr.w	r4, [sl]
 800c094:	2c00      	cmp	r4, #0
 800c096:	f000 8084 	beq.w	800c1a2 <rcl_init+0x146>
 800c09a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c09c:	ad19      	add	r5, sp, #100	@ 0x64
 800c09e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	a819      	add	r0, sp, #100	@ 0x64
 800c0a6:	f7fe fa0b 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d079      	beq.n	800c1a2 <rcl_init+0x146>
 800c0ae:	f1b9 0f00 	cmp.w	r9, #0
 800c0b2:	d076      	beq.n	800c1a2 <rcl_init+0x146>
 800c0b4:	f8d9 3000 	ldr.w	r3, [r9]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d177      	bne.n	800c1ac <rcl_init+0x150>
 800c0bc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800c0c0:	2178      	movs	r1, #120	@ 0x78
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	4798      	blx	r3
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	f8c9 0000 	str.w	r0, [r9]
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	f000 80ba 	beq.w	800c246 <rcl_init+0x1ea>
 800c0d2:	a802      	add	r0, sp, #8
 800c0d4:	f002 fae6 	bl	800e6a4 <rmw_get_zero_initialized_context>
 800c0d8:	a902      	add	r1, sp, #8
 800c0da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c0de:	2250      	movs	r2, #80	@ 0x50
 800c0e0:	ac19      	add	r4, sp, #100	@ 0x64
 800c0e2:	f009 f82e 	bl	8015142 <memcpy>
 800c0e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0e8:	f8d9 5000 	ldr.w	r5, [r9]
 800c0ec:	6826      	ldr	r6, [r4, #0]
 800c0ee:	462c      	mov	r4, r5
 800c0f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0f2:	f105 0114 	add.w	r1, r5, #20
 800c0f6:	6026      	str	r6, [r4, #0]
 800c0f8:	4650      	mov	r0, sl
 800c0fa:	f000 f931 	bl	800c360 <rcl_init_options_copy>
 800c0fe:	4606      	mov	r6, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	d144      	bne.n	800c18e <rcl_init+0x132>
 800c104:	f8d9 a000 	ldr.w	sl, [r9]
 800c108:	463c      	mov	r4, r7
 800c10a:	17fd      	asrs	r5, r7, #31
 800c10c:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800c110:	f8ca 0020 	str.w	r0, [sl, #32]
 800c114:	2f00      	cmp	r7, #0
 800c116:	d050      	beq.n	800c1ba <rcl_init+0x15e>
 800c118:	f1b8 0f00 	cmp.w	r8, #0
 800c11c:	d04d      	beq.n	800c1ba <rcl_init+0x15e>
 800c11e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800c122:	4638      	mov	r0, r7
 800c124:	2104      	movs	r1, #4
 800c126:	4798      	blx	r3
 800c128:	f8ca 0020 	str.w	r0, [sl, #32]
 800c12c:	f8d9 a000 	ldr.w	sl, [r9]
 800c130:	f8da 3020 	ldr.w	r3, [sl, #32]
 800c134:	46d3      	mov	fp, sl
 800c136:	b34b      	cbz	r3, 800c18c <rcl_init+0x130>
 800c138:	2f01      	cmp	r7, #1
 800c13a:	f175 0300 	sbcs.w	r3, r5, #0
 800c13e:	db3c      	blt.n	800c1ba <rcl_init+0x15e>
 800c140:	f1a8 0804 	sub.w	r8, r8, #4
 800c144:	2600      	movs	r6, #0
 800c146:	2700      	movs	r7, #0
 800c148:	e00c      	b.n	800c164 <rcl_init+0x108>
 800c14a:	f8d8 1000 	ldr.w	r1, [r8]
 800c14e:	f008 fff8 	bl	8015142 <memcpy>
 800c152:	3601      	adds	r6, #1
 800c154:	f147 0700 	adc.w	r7, r7, #0
 800c158:	42bd      	cmp	r5, r7
 800c15a:	bf08      	it	eq
 800c15c:	42b4      	cmpeq	r4, r6
 800c15e:	d02a      	beq.n	800c1b6 <rcl_init+0x15a>
 800c160:	f8d9 b000 	ldr.w	fp, [r9]
 800c164:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800c168:	f7f4 f844 	bl	80001f4 <strlen>
 800c16c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c16e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800c170:	f8db a020 	ldr.w	sl, [fp, #32]
 800c174:	9001      	str	r0, [sp, #4]
 800c176:	4798      	blx	r3
 800c178:	f8d9 1000 	ldr.w	r1, [r9]
 800c17c:	9a01      	ldr	r2, [sp, #4]
 800c17e:	6a09      	ldr	r1, [r1, #32]
 800c180:	00b3      	lsls	r3, r6, #2
 800c182:	f84a 0003 	str.w	r0, [sl, r3]
 800c186:	58c8      	ldr	r0, [r1, r3]
 800c188:	2800      	cmp	r0, #0
 800c18a:	d1de      	bne.n	800c14a <rcl_init+0xee>
 800c18c:	260a      	movs	r6, #10
 800c18e:	4648      	mov	r0, r9
 800c190:	f7ff fd94 	bl	800bcbc <__cleanup_context>
 800c194:	4630      	mov	r0, r6
 800c196:	b01f      	add	sp, #124	@ 0x7c
 800c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	2900      	cmp	r1, #0
 800c19e:	f43f af73 	beq.w	800c088 <rcl_init+0x2c>
 800c1a2:	260b      	movs	r6, #11
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	b01f      	add	sp, #124	@ 0x7c
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	2664      	movs	r6, #100	@ 0x64
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	b01f      	add	sp, #124	@ 0x7c
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	f8d9 a000 	ldr.w	sl, [r9]
 800c1ba:	4a2c      	ldr	r2, [pc, #176]	@ (800c26c <rcl_init+0x210>)
 800c1bc:	6813      	ldr	r3, [r2, #0]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	d03b      	beq.n	800c23a <rcl_init+0x1de>
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f8da 4014 	ldr.w	r4, [sl, #20]
 800c1cc:	f8c9 3004 	str.w	r3, [r9, #4]
 800c1d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800c1d8:	d039      	beq.n	800c24e <rcl_init+0x1f2>
 800c1da:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800c1de:	b94b      	cbnz	r3, 800c1f4 <rcl_init+0x198>
 800c1e0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800c1e4:	f000 f962 	bl	800c4ac <rcl_get_localhost_only>
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1cf      	bne.n	800c18e <rcl_init+0x132>
 800c1ee:	f8d9 3000 	ldr.w	r3, [r9]
 800c1f2:	695c      	ldr	r4, [r3, #20]
 800c1f4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c1f6:	aa18      	add	r2, sp, #96	@ 0x60
 800c1f8:	a917      	add	r1, sp, #92	@ 0x5c
 800c1fa:	f001 f819 	bl	800d230 <rcl_validate_enclave_name>
 800c1fe:	4606      	mov	r6, r0
 800c200:	2800      	cmp	r0, #0
 800c202:	d1c4      	bne.n	800c18e <rcl_init+0x132>
 800c204:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c206:	bb03      	cbnz	r3, 800c24a <rcl_init+0x1ee>
 800c208:	f8d9 1000 	ldr.w	r1, [r9]
 800c20c:	694b      	ldr	r3, [r1, #20]
 800c20e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c210:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c214:	f000 fbf2 	bl	800c9fc <rcl_get_security_options_from_environment>
 800c218:	4606      	mov	r6, r0
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1b7      	bne.n	800c18e <rcl_init+0x132>
 800c21e:	f8d9 1000 	ldr.w	r1, [r9]
 800c222:	6948      	ldr	r0, [r1, #20]
 800c224:	3128      	adds	r1, #40	@ 0x28
 800c226:	3018      	adds	r0, #24
 800c228:	f002 fce2 	bl	800ebf0 <rmw_init>
 800c22c:	4606      	mov	r6, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0b8      	beq.n	800c1a4 <rcl_init+0x148>
 800c232:	f007 f987 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c236:	4606      	mov	r6, r0
 800c238:	e7a9      	b.n	800c18e <rcl_init+0x132>
 800c23a:	2401      	movs	r4, #1
 800c23c:	4618      	mov	r0, r3
 800c23e:	4621      	mov	r1, r4
 800c240:	6014      	str	r4, [r2, #0]
 800c242:	4623      	mov	r3, r4
 800c244:	e7c0      	b.n	800c1c8 <rcl_init+0x16c>
 800c246:	260a      	movs	r6, #10
 800c248:	e7ac      	b.n	800c1a4 <rcl_init+0x148>
 800c24a:	2601      	movs	r6, #1
 800c24c:	e79f      	b.n	800c18e <rcl_init+0x132>
 800c24e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c252:	f007 f98b 	bl	801356c <rcl_get_default_domain_id>
 800c256:	4606      	mov	r6, r0
 800c258:	2800      	cmp	r0, #0
 800c25a:	d198      	bne.n	800c18e <rcl_init+0x132>
 800c25c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c25e:	3301      	adds	r3, #1
 800c260:	f8d9 3000 	ldr.w	r3, [r9]
 800c264:	bf08      	it	eq
 800c266:	6260      	streq	r0, [r4, #36]	@ 0x24
 800c268:	695c      	ldr	r4, [r3, #20]
 800c26a:	e7b6      	b.n	800c1da <rcl_init+0x17e>
 800c26c:	200090f4 	.word	0x200090f4

0800c270 <rcl_get_zero_initialized_init_options>:
 800c270:	2000      	movs	r0, #0
 800c272:	4770      	bx	lr

0800c274 <rcl_init_options_init>:
 800c274:	b084      	sub	sp, #16
 800c276:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c278:	b091      	sub	sp, #68	@ 0x44
 800c27a:	af17      	add	r7, sp, #92	@ 0x5c
 800c27c:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800c280:	2800      	cmp	r0, #0
 800c282:	d044      	beq.n	800c30e <rcl_init_options_init+0x9a>
 800c284:	6803      	ldr	r3, [r0, #0]
 800c286:	4606      	mov	r6, r0
 800c288:	b133      	cbz	r3, 800c298 <rcl_init_options_init+0x24>
 800c28a:	2464      	movs	r4, #100	@ 0x64
 800c28c:	4620      	mov	r0, r4
 800c28e:	b011      	add	sp, #68	@ 0x44
 800c290:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c294:	b004      	add	sp, #16
 800c296:	4770      	bx	lr
 800c298:	4638      	mov	r0, r7
 800c29a:	f7fe f911 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d035      	beq.n	800c30e <rcl_init_options_init+0x9a>
 800c2a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2a4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c2a6:	2050      	movs	r0, #80	@ 0x50
 800c2a8:	4798      	blx	r3
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	6030      	str	r0, [r6, #0]
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d02f      	beq.n	800c312 <rcl_init_options_init+0x9e>
 800c2b2:	46bc      	mov	ip, r7
 800c2b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2b8:	4625      	mov	r5, r4
 800c2ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2bc:	f8dc 3000 	ldr.w	r3, [ip]
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	a802      	add	r0, sp, #8
 800c2c4:	ad02      	add	r5, sp, #8
 800c2c6:	f002 f9f5 	bl	800e6b4 <rmw_get_zero_initialized_init_options>
 800c2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2cc:	3418      	adds	r4, #24
 800c2ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2dc:	6833      	ldr	r3, [r6, #0]
 800c2de:	e884 0003 	stmia.w	r4, {r0, r1}
 800c2e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800c2e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c2ea:	f103 0018 	add.w	r0, r3, #24
 800c2ee:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c2f2:	f002 fba3 	bl	800ea3c <rmw_init_options_init>
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d0c7      	beq.n	800c28c <rcl_init_options_init+0x18>
 800c2fc:	6830      	ldr	r0, [r6, #0]
 800c2fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c300:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c302:	4798      	blx	r3
 800c304:	4620      	mov	r0, r4
 800c306:	f007 f91d 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c30a:	4604      	mov	r4, r0
 800c30c:	e7be      	b.n	800c28c <rcl_init_options_init+0x18>
 800c30e:	240b      	movs	r4, #11
 800c310:	e7bc      	b.n	800c28c <rcl_init_options_init+0x18>
 800c312:	240a      	movs	r4, #10
 800c314:	e7ba      	b.n	800c28c <rcl_init_options_init+0x18>
 800c316:	bf00      	nop

0800c318 <rcl_init_options_fini>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	b1c0      	cbz	r0, 800c350 <rcl_init_options_fini+0x38>
 800c31e:	6804      	ldr	r4, [r0, #0]
 800c320:	4606      	mov	r6, r0
 800c322:	b1ac      	cbz	r4, 800c350 <rcl_init_options_fini+0x38>
 800c324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c326:	ad01      	add	r5, sp, #4
 800c328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	a801      	add	r0, sp, #4
 800c330:	f7fe f8c6 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c334:	b160      	cbz	r0, 800c350 <rcl_init_options_fini+0x38>
 800c336:	6830      	ldr	r0, [r6, #0]
 800c338:	3018      	adds	r0, #24
 800c33a:	f002 fc19 	bl	800eb70 <rmw_init_options_fini>
 800c33e:	4604      	mov	r4, r0
 800c340:	b950      	cbnz	r0, 800c358 <rcl_init_options_fini+0x40>
 800c342:	6830      	ldr	r0, [r6, #0]
 800c344:	9b02      	ldr	r3, [sp, #8]
 800c346:	9905      	ldr	r1, [sp, #20]
 800c348:	4798      	blx	r3
 800c34a:	4620      	mov	r0, r4
 800c34c:	b006      	add	sp, #24
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	240b      	movs	r4, #11
 800c352:	4620      	mov	r0, r4
 800c354:	b006      	add	sp, #24
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	f007 f8f4 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c35c:	4604      	mov	r4, r0
 800c35e:	e7f8      	b.n	800c352 <rcl_init_options_fini+0x3a>

0800c360 <rcl_init_options_copy>:
 800c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	b096      	sub	sp, #88	@ 0x58
 800c366:	2800      	cmp	r0, #0
 800c368:	d063      	beq.n	800c432 <rcl_init_options_copy+0xd2>
 800c36a:	6806      	ldr	r6, [r0, #0]
 800c36c:	4605      	mov	r5, r0
 800c36e:	2e00      	cmp	r6, #0
 800c370:	d05f      	beq.n	800c432 <rcl_init_options_copy+0xd2>
 800c372:	460c      	mov	r4, r1
 800c374:	2900      	cmp	r1, #0
 800c376:	d05c      	beq.n	800c432 <rcl_init_options_copy+0xd2>
 800c378:	680b      	ldr	r3, [r1, #0]
 800c37a:	b123      	cbz	r3, 800c386 <rcl_init_options_copy+0x26>
 800c37c:	2664      	movs	r6, #100	@ 0x64
 800c37e:	4630      	mov	r0, r6
 800c380:	b016      	add	sp, #88	@ 0x58
 800c382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c386:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c388:	af11      	add	r7, sp, #68	@ 0x44
 800c38a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c38c:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800c390:	6833      	ldr	r3, [r6, #0]
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	4640      	mov	r0, r8
 800c396:	f7fe f893 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d049      	beq.n	800c432 <rcl_init_options_copy+0xd2>
 800c39e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3a0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800c3a2:	2050      	movs	r0, #80	@ 0x50
 800c3a4:	4798      	blx	r3
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	6020      	str	r0, [r4, #0]
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d077      	beq.n	800c49e <rcl_init_options_copy+0x13e>
 800c3ae:	46c4      	mov	ip, r8
 800c3b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c3b8:	f8dc 3000 	ldr.w	r3, [ip]
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	a802      	add	r0, sp, #8
 800c3c0:	af02      	add	r7, sp, #8
 800c3c2:	f002 f977 	bl	800e6b4 <rmw_get_zero_initialized_init_options>
 800c3c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3c8:	3618      	adds	r6, #24
 800c3ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c3cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c3d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c3d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c3d8:	ab16      	add	r3, sp, #88	@ 0x58
 800c3da:	e886 0003 	stmia.w	r6, {r0, r1}
 800c3de:	e913 0003 	ldmdb	r3, {r0, r1}
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c3e8:	f103 0018 	add.w	r0, r3, #24
 800c3ec:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800c3f0:	f002 fb24 	bl	800ea3c <rmw_init_options_init>
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	bb08      	cbnz	r0, 800c43c <rcl_init_options_copy+0xdc>
 800c3f8:	682f      	ldr	r7, [r5, #0]
 800c3fa:	f8d4 c000 	ldr.w	ip, [r4]
 800c3fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c400:	4666      	mov	r6, ip
 800c402:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	6033      	str	r3, [r6, #0]
 800c408:	f10c 0018 	add.w	r0, ip, #24
 800c40c:	f002 fbb0 	bl	800eb70 <rmw_init_options_fini>
 800c410:	4607      	mov	r7, r0
 800c412:	b1f0      	cbz	r0, 800c452 <rcl_init_options_copy+0xf2>
 800c414:	f7fe f862 	bl	800a4dc <rcutils_get_error_string>
 800c418:	f7fe f876 	bl	800a508 <rcutils_reset_error>
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff ff7b 	bl	800c318 <rcl_init_options_fini>
 800c422:	4606      	mov	r6, r0
 800c424:	2800      	cmp	r0, #0
 800c426:	d1aa      	bne.n	800c37e <rcl_init_options_copy+0x1e>
 800c428:	4638      	mov	r0, r7
 800c42a:	f007 f88b 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c42e:	4606      	mov	r6, r0
 800c430:	e7a5      	b.n	800c37e <rcl_init_options_copy+0x1e>
 800c432:	260b      	movs	r6, #11
 800c434:	4630      	mov	r0, r6
 800c436:	b016      	add	sp, #88	@ 0x58
 800c438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c43c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c43e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800c440:	6820      	ldr	r0, [r4, #0]
 800c442:	4798      	blx	r3
 800c444:	4630      	mov	r0, r6
 800c446:	f007 f87d 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c44a:	4606      	mov	r6, r0
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d0d3      	beq.n	800c3f8 <rcl_init_options_copy+0x98>
 800c450:	e795      	b.n	800c37e <rcl_init_options_copy+0x1e>
 800c452:	a802      	add	r0, sp, #8
 800c454:	ae02      	add	r6, sp, #8
 800c456:	6827      	ldr	r7, [r4, #0]
 800c458:	f002 f92c 	bl	800e6b4 <rmw_get_zero_initialized_init_options>
 800c45c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c45e:	3718      	adds	r7, #24
 800c460:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c464:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c466:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c468:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c46a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c46e:	682a      	ldr	r2, [r5, #0]
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	e887 0003 	stmia.w	r7, {r0, r1}
 800c476:	f102 0018 	add.w	r0, r2, #24
 800c47a:	f103 0118 	add.w	r1, r3, #24
 800c47e:	f002 fb35 	bl	800eaec <rmw_init_options_copy>
 800c482:	4606      	mov	r6, r0
 800c484:	2800      	cmp	r0, #0
 800c486:	f43f af7a 	beq.w	800c37e <rcl_init_options_copy+0x1e>
 800c48a:	f7fe f827 	bl	800a4dc <rcutils_get_error_string>
 800c48e:	f7fe f83b 	bl	800a508 <rcutils_reset_error>
 800c492:	4620      	mov	r0, r4
 800c494:	f7ff ff40 	bl	800c318 <rcl_init_options_fini>
 800c498:	b118      	cbz	r0, 800c4a2 <rcl_init_options_copy+0x142>
 800c49a:	4606      	mov	r6, r0
 800c49c:	e76f      	b.n	800c37e <rcl_init_options_copy+0x1e>
 800c49e:	260a      	movs	r6, #10
 800c4a0:	e76d      	b.n	800c37e <rcl_init_options_copy+0x1e>
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f007 f84e 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	e768      	b.n	800c37e <rcl_init_options_copy+0x1e>

0800c4ac <rcl_get_localhost_only>:
 800c4ac:	b510      	push	{r4, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	b1b8      	cbz	r0, 800c4e6 <rcl_get_localhost_only+0x3a>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	a901      	add	r1, sp, #4
 800c4ba:	480c      	ldr	r0, [pc, #48]	@ (800c4ec <rcl_get_localhost_only+0x40>)
 800c4bc:	f001 fe94 	bl	800e1e8 <rcutils_get_env>
 800c4c0:	b110      	cbz	r0, 800c4c8 <rcl_get_localhost_only+0x1c>
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	b002      	add	sp, #8
 800c4c6:	bd10      	pop	{r4, pc}
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	b113      	cbz	r3, 800c4d2 <rcl_get_localhost_only+0x26>
 800c4cc:	781a      	ldrb	r2, [r3, #0]
 800c4ce:	2a31      	cmp	r2, #49	@ 0x31
 800c4d0:	d004      	beq.n	800c4dc <rcl_get_localhost_only+0x30>
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	7023      	strb	r3, [r4, #0]
 800c4d8:	b002      	add	sp, #8
 800c4da:	bd10      	pop	{r4, pc}
 800c4dc:	785b      	ldrb	r3, [r3, #1]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f7      	bne.n	800c4d2 <rcl_get_localhost_only+0x26>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e7f6      	b.n	800c4d4 <rcl_get_localhost_only+0x28>
 800c4e6:	200b      	movs	r0, #11
 800c4e8:	b002      	add	sp, #8
 800c4ea:	bd10      	pop	{r4, pc}
 800c4ec:	0801661c 	.word	0x0801661c

0800c4f0 <rcl_get_zero_initialized_node>:
 800c4f0:	4a03      	ldr	r2, [pc, #12]	@ (800c500 <rcl_get_zero_initialized_node+0x10>)
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	4770      	bx	lr
 800c500:	0801663c 	.word	0x0801663c

0800c504 <rcl_node_init>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	b09b      	sub	sp, #108	@ 0x6c
 800c50a:	4604      	mov	r4, r0
 800c50c:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 800c510:	f04f 0c00 	mov.w	ip, #0
 800c514:	a815      	add	r0, sp, #84	@ 0x54
 800c516:	460e      	mov	r6, r1
 800c518:	4615      	mov	r5, r2
 800c51a:	461f      	mov	r7, r3
 800c51c:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800c520:	f007 f8e0 	bl	80136e4 <rcl_guard_condition_get_default_options>
 800c524:	f1b8 0f00 	cmp.w	r8, #0
 800c528:	f000 80fd 	beq.w	800c726 <rcl_node_init+0x222>
 800c52c:	f108 0b04 	add.w	fp, r8, #4
 800c530:	4658      	mov	r0, fp
 800c532:	f7fd ffc5 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c536:	2800      	cmp	r0, #0
 800c538:	f000 80f5 	beq.w	800c726 <rcl_node_init+0x222>
 800c53c:	2e00      	cmp	r6, #0
 800c53e:	f000 80f2 	beq.w	800c726 <rcl_node_init+0x222>
 800c542:	2d00      	cmp	r5, #0
 800c544:	f000 80ef 	beq.w	800c726 <rcl_node_init+0x222>
 800c548:	2c00      	cmp	r4, #0
 800c54a:	f000 80ec 	beq.w	800c726 <rcl_node_init+0x222>
 800c54e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c552:	f1b9 0f00 	cmp.w	r9, #0
 800c556:	f040 8112 	bne.w	800c77e <rcl_node_init+0x27a>
 800c55a:	2f00      	cmp	r7, #0
 800c55c:	f000 80e3 	beq.w	800c726 <rcl_node_init+0x222>
 800c560:	4638      	mov	r0, r7
 800c562:	f7ff fba5 	bl	800bcb0 <rcl_context_is_valid>
 800c566:	4682      	mov	sl, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	f000 80e2 	beq.w	800c732 <rcl_node_init+0x22e>
 800c56e:	464a      	mov	r2, r9
 800c570:	a914      	add	r1, sp, #80	@ 0x50
 800c572:	4630      	mov	r0, r6
 800c574:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 800c578:	f002 f9b8 	bl	800e8ec <rmw_validate_node_name>
 800c57c:	4681      	mov	r9, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	f040 80d3 	bne.w	800c72a <rcl_node_init+0x226>
 800c584:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c586:	2800      	cmp	r0, #0
 800c588:	f040 8105 	bne.w	800c796 <rcl_node_init+0x292>
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7f3 fe31 	bl	80001f4 <strlen>
 800c592:	2800      	cmp	r0, #0
 800c594:	f040 80d0 	bne.w	800c738 <rcl_node_init+0x234>
 800c598:	4d8e      	ldr	r5, [pc, #568]	@ (800c7d4 <rcl_node_init+0x2d0>)
 800c59a:	a914      	add	r1, sp, #80	@ 0x50
 800c59c:	2200      	movs	r2, #0
 800c59e:	4628      	mov	r0, r5
 800c5a0:	f002 f986 	bl	800e8b0 <rmw_validate_namespace>
 800c5a4:	4681      	mov	r9, r0
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f040 80bf 	bne.w	800c72a <rcl_node_init+0x226>
 800c5ac:	4682      	mov	sl, r0
 800c5ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f040 80f5 	bne.w	800c7a0 <rcl_node_init+0x29c>
 800c5b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c5ba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c5be:	9307      	str	r3, [sp, #28]
 800c5c0:	2030      	movs	r0, #48	@ 0x30
 800c5c2:	4790      	blx	r2
 800c5c4:	4681      	mov	r9, r0
 800c5c6:	6060      	str	r0, [r4, #4]
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f000 80de 	beq.w	800c78a <rcl_node_init+0x286>
 800c5ce:	9b07      	ldr	r3, [sp, #28]
 800c5d0:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800c5d4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800c5d8:	a80a      	add	r0, sp, #40	@ 0x28
 800c5da:	f000 f92b 	bl	800c834 <rcl_node_get_default_options>
 800c5de:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 800c5e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c5e6:	46cc      	mov	ip, r9
 800c5e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5ec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c5f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800c5f4:	6861      	ldr	r1, [r4, #4]
 800c5f6:	6027      	str	r7, [r4, #0]
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	f000 f937 	bl	800c86c <rcl_node_options_copy>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d167      	bne.n	800c6d2 <rcl_node_init+0x1ce>
 800c602:	4628      	mov	r0, r5
 800c604:	f7f3 fdf6 	bl	80001f4 <strlen>
 800c608:	4428      	add	r0, r5
 800c60a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c60e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c612:	2b2f      	cmp	r3, #47	@ 0x2f
 800c614:	bf08      	it	eq
 800c616:	4970      	ldreq	r1, [pc, #448]	@ (800c7d8 <rcl_node_init+0x2d4>)
 800c618:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c61c:	bf18      	it	ne
 800c61e:	496f      	ldrne	r1, [pc, #444]	@ (800c7dc <rcl_node_init+0x2d8>)
 800c620:	9604      	str	r6, [sp, #16]
 800c622:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800c626:	e9cd 3200 	strd	r3, r2, [sp]
 800c62a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800c62e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c632:	f001 fd9f 	bl	800e174 <rcutils_format_string_limit>
 800c636:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 800c63a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c63e:	f8d9 3000 	ldr.w	r3, [r9]
 800c642:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c644:	1c59      	adds	r1, r3, #1
 800c646:	f000 80b7 	beq.w	800c7b8 <rcl_node_init+0x2b4>
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	f8c9 301c 	str.w	r3, [r9, #28]
 800c650:	6952      	ldr	r2, [r2, #20]
 800c652:	6821      	ldr	r1, [r4, #0]
 800c654:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800c658:	6808      	ldr	r0, [r1, #0]
 800c65a:	f1a2 0201 	sub.w	r2, r2, #1
 800c65e:	fab2 f282 	clz	r2, r2
 800c662:	0952      	lsrs	r2, r2, #5
 800c664:	9200      	str	r2, [sp, #0]
 800c666:	4631      	mov	r1, r6
 800c668:	3028      	adds	r0, #40	@ 0x28
 800c66a:	462a      	mov	r2, r5
 800c66c:	f002 fca4 	bl	800efb8 <rmw_create_node>
 800c670:	6863      	ldr	r3, [r4, #4]
 800c672:	f8c9 0020 	str.w	r0, [r9, #32]
 800c676:	6a18      	ldr	r0, [r3, #32]
 800c678:	b368      	cbz	r0, 800c6d6 <rcl_node_init+0x1d2>
 800c67a:	f002 fd31 	bl	800f0e0 <rmw_node_get_graph_guard_condition>
 800c67e:	4681      	mov	r9, r0
 800c680:	b338      	cbz	r0, 800c6d2 <rcl_node_init+0x1ce>
 800c682:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c686:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c68a:	6866      	ldr	r6, [r4, #4]
 800c68c:	2008      	movs	r0, #8
 800c68e:	4798      	blx	r3
 800c690:	6863      	ldr	r3, [r4, #4]
 800c692:	6270      	str	r0, [r6, #36]	@ 0x24
 800c694:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800c696:	b1f6      	cbz	r6, 800c6d6 <rcl_node_init+0x1d2>
 800c698:	a808      	add	r0, sp, #32
 800c69a:	f006 ff9b 	bl	80135d4 <rcl_get_zero_initialized_guard_condition>
 800c69e:	a808      	add	r0, sp, #32
 800c6a0:	c803      	ldmia	r0, {r0, r1}
 800c6a2:	e886 0003 	stmia.w	r6, {r0, r1}
 800c6a6:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800c6aa:	ae15      	add	r6, sp, #84	@ 0x54
 800c6ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c6ae:	f8db 3000 	ldr.w	r3, [fp]
 800c6b2:	6033      	str	r3, [r6, #0]
 800c6b4:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6b6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c6ba:	6866      	ldr	r6, [r4, #4]
 800c6bc:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 800c6be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	463a      	mov	r2, r7
 800c6ca:	f006 ff8d 	bl	80135e8 <rcl_guard_condition_init_from_rmw>
 800c6ce:	4681      	mov	r9, r0
 800c6d0:	b328      	cbz	r0, 800c71e <rcl_node_init+0x21a>
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	b1f3      	cbz	r3, 800c714 <rcl_node_init+0x210>
 800c6d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c6d8:	b128      	cbz	r0, 800c6e6 <rcl_node_init+0x1e2>
 800c6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6de:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c6e2:	4798      	blx	r3
 800c6e4:	6863      	ldr	r3, [r4, #4]
 800c6e6:	6a18      	ldr	r0, [r3, #32]
 800c6e8:	b110      	cbz	r0, 800c6f0 <rcl_node_init+0x1ec>
 800c6ea:	f002 fc7d 	bl	800efe8 <rmw_destroy_node>
 800c6ee:	6863      	ldr	r3, [r4, #4]
 800c6f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c6f2:	b148      	cbz	r0, 800c708 <rcl_node_init+0x204>
 800c6f4:	f006 ffd0 	bl	8013698 <rcl_guard_condition_fini>
 800c6f8:	6862      	ldr	r2, [r4, #4]
 800c6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6fe:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800c700:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c704:	4798      	blx	r3
 800c706:	6863      	ldr	r3, [r4, #4]
 800c708:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c70c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c710:	4618      	mov	r0, r3
 800c712:	4790      	blx	r2
 800c714:	2300      	movs	r3, #0
 800c716:	e9c4 3300 	strd	r3, r3, [r4]
 800c71a:	f04f 0901 	mov.w	r9, #1
 800c71e:	f1ba 0f00 	cmp.w	sl, #0
 800c722:	d125      	bne.n	800c770 <rcl_node_init+0x26c>
 800c724:	e001      	b.n	800c72a <rcl_node_init+0x226>
 800c726:	f04f 090b 	mov.w	r9, #11
 800c72a:	4648      	mov	r0, r9
 800c72c:	b01b      	add	sp, #108	@ 0x6c
 800c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c732:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c736:	e7f8      	b.n	800c72a <rcl_node_init+0x226>
 800c738:	782b      	ldrb	r3, [r5, #0]
 800c73a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c73c:	f43f af2d 	beq.w	800c59a <rcl_node_init+0x96>
 800c740:	4927      	ldr	r1, [pc, #156]	@ (800c7e0 <rcl_node_init+0x2dc>)
 800c742:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c74c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c750:	9503      	str	r5, [sp, #12]
 800c752:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800c756:	f001 fd0d 	bl	800e174 <rcutils_format_string_limit>
 800c75a:	4605      	mov	r5, r0
 800c75c:	b348      	cbz	r0, 800c7b2 <rcl_node_init+0x2ae>
 800c75e:	2200      	movs	r2, #0
 800c760:	a914      	add	r1, sp, #80	@ 0x50
 800c762:	9214      	str	r2, [sp, #80]	@ 0x50
 800c764:	f002 f8a4 	bl	800e8b0 <rmw_validate_namespace>
 800c768:	4681      	mov	r9, r0
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f43f af1f 	beq.w	800c5ae <rcl_node_init+0xaa>
 800c770:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c774:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c778:	4628      	mov	r0, r5
 800c77a:	4798      	blx	r3
 800c77c:	e7d5      	b.n	800c72a <rcl_node_init+0x226>
 800c77e:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c782:	4648      	mov	r0, r9
 800c784:	b01b      	add	sp, #108	@ 0x6c
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	f04f 090a 	mov.w	r9, #10
 800c78e:	f1ba 0f00 	cmp.w	sl, #0
 800c792:	d1ed      	bne.n	800c770 <rcl_node_init+0x26c>
 800c794:	e7c9      	b.n	800c72a <rcl_node_init+0x226>
 800c796:	f002 f8fb 	bl	800e990 <rmw_node_name_validation_result_string>
 800c79a:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c79e:	e7c4      	b.n	800c72a <rcl_node_init+0x226>
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f002 f897 	bl	800e8d4 <rmw_namespace_validation_result_string>
 800c7a6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c7aa:	f1ba 0f00 	cmp.w	sl, #0
 800c7ae:	d1df      	bne.n	800c770 <rcl_node_init+0x26c>
 800c7b0:	e7bb      	b.n	800c72a <rcl_node_init+0x226>
 800c7b2:	f04f 090a 	mov.w	r9, #10
 800c7b6:	e7b8      	b.n	800c72a <rcl_node_init+0x226>
 800c7b8:	a813      	add	r0, sp, #76	@ 0x4c
 800c7ba:	f006 fed7 	bl	801356c <rcl_get_default_domain_id>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d187      	bne.n	800c6d2 <rcl_node_init+0x1ce>
 800c7c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c7c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c7c8:	1c5a      	adds	r2, r3, #1
 800c7ca:	bf04      	itt	eq
 800c7cc:	9013      	streq	r0, [sp, #76]	@ 0x4c
 800c7ce:	4603      	moveq	r3, r0
 800c7d0:	e73b      	b.n	800c64a <rcl_node_init+0x146>
 800c7d2:	bf00      	nop
 800c7d4:	08016634 	.word	0x08016634
 800c7d8:	080165f0 	.word	0x080165f0
 800c7dc:	080165f8 	.word	0x080165f8
 800c7e0:	08016638 	.word	0x08016638

0800c7e4 <rcl_node_is_valid>:
 800c7e4:	b130      	cbz	r0, 800c7f4 <rcl_node_is_valid+0x10>
 800c7e6:	6843      	ldr	r3, [r0, #4]
 800c7e8:	b123      	cbz	r3, 800c7f4 <rcl_node_is_valid+0x10>
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	b113      	cbz	r3, 800c7f4 <rcl_node_is_valid+0x10>
 800c7ee:	6800      	ldr	r0, [r0, #0]
 800c7f0:	f7ff ba5e 	b.w	800bcb0 <rcl_context_is_valid>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	4770      	bx	lr

0800c7f8 <rcl_node_get_name>:
 800c7f8:	b120      	cbz	r0, 800c804 <rcl_node_get_name+0xc>
 800c7fa:	6840      	ldr	r0, [r0, #4]
 800c7fc:	b110      	cbz	r0, 800c804 <rcl_node_get_name+0xc>
 800c7fe:	6a00      	ldr	r0, [r0, #32]
 800c800:	b100      	cbz	r0, 800c804 <rcl_node_get_name+0xc>
 800c802:	6880      	ldr	r0, [r0, #8]
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop

0800c808 <rcl_node_get_namespace>:
 800c808:	b120      	cbz	r0, 800c814 <rcl_node_get_namespace+0xc>
 800c80a:	6840      	ldr	r0, [r0, #4]
 800c80c:	b110      	cbz	r0, 800c814 <rcl_node_get_namespace+0xc>
 800c80e:	6a00      	ldr	r0, [r0, #32]
 800c810:	b100      	cbz	r0, 800c814 <rcl_node_get_namespace+0xc>
 800c812:	68c0      	ldr	r0, [r0, #12]
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop

0800c818 <rcl_node_get_options>:
 800c818:	b128      	cbz	r0, 800c826 <rcl_node_get_options+0xe>
 800c81a:	6840      	ldr	r0, [r0, #4]
 800c81c:	b118      	cbz	r0, 800c826 <rcl_node_get_options+0xe>
 800c81e:	6a03      	ldr	r3, [r0, #32]
 800c820:	2b00      	cmp	r3, #0
 800c822:	bf08      	it	eq
 800c824:	2000      	moveq	r0, #0
 800c826:	4770      	bx	lr

0800c828 <rcl_node_get_rmw_handle>:
 800c828:	b110      	cbz	r0, 800c830 <rcl_node_get_rmw_handle+0x8>
 800c82a:	6840      	ldr	r0, [r0, #4]
 800c82c:	b100      	cbz	r0, 800c830 <rcl_node_get_rmw_handle+0x8>
 800c82e:	6a00      	ldr	r0, [r0, #32]
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop

0800c834 <rcl_node_get_default_options>:
 800c834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c836:	b087      	sub	sp, #28
 800c838:	4607      	mov	r7, r0
 800c83a:	466d      	mov	r5, sp
 800c83c:	4668      	mov	r0, sp
 800c83e:	f7fd fe31 	bl	800a4a4 <rcutils_get_default_allocator>
 800c842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c844:	4c08      	ldr	r4, [pc, #32]	@ (800c868 <rcl_node_get_default_options+0x34>)
 800c846:	f8d5 c000 	ldr.w	ip, [r5]
 800c84a:	1d26      	adds	r6, r4, #4
 800c84c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c84e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c850:	463d      	mov	r5, r7
 800c852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c854:	f8c6 c000 	str.w	ip, [r6]
 800c858:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c85c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c860:	4638      	mov	r0, r7
 800c862:	b007      	add	sp, #28
 800c864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c866:	bf00      	nop
 800c868:	2000009c 	.word	0x2000009c

0800c86c <rcl_node_options_copy>:
 800c86c:	b1c8      	cbz	r0, 800c8a2 <rcl_node_options_copy+0x36>
 800c86e:	b4f0      	push	{r4, r5, r6, r7}
 800c870:	460f      	mov	r7, r1
 800c872:	b199      	cbz	r1, 800c89c <rcl_node_options_copy+0x30>
 800c874:	4288      	cmp	r0, r1
 800c876:	4606      	mov	r6, r0
 800c878:	d010      	beq.n	800c89c <rcl_node_options_copy+0x30>
 800c87a:	4605      	mov	r5, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c882:	f844 3b04 	str.w	r3, [r4], #4
 800c886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c88a:	7e32      	ldrb	r2, [r6, #24]
 800c88c:	6829      	ldr	r1, [r5, #0]
 800c88e:	7e73      	ldrb	r3, [r6, #25]
 800c890:	6021      	str	r1, [r4, #0]
 800c892:	2000      	movs	r0, #0
 800c894:	763a      	strb	r2, [r7, #24]
 800c896:	767b      	strb	r3, [r7, #25]
 800c898:	bcf0      	pop	{r4, r5, r6, r7}
 800c89a:	4770      	bx	lr
 800c89c:	200b      	movs	r0, #11
 800c89e:	bcf0      	pop	{r4, r5, r6, r7}
 800c8a0:	4770      	bx	lr
 800c8a2:	200b      	movs	r0, #11
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop

0800c8a8 <exact_match_lookup>:
 800c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8aa:	f102 0708 	add.w	r7, r2, #8
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c8b8:	b085      	sub	sp, #20
 800c8ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	4918      	ldr	r1, [pc, #96]	@ (800c924 <exact_match_lookup+0x7c>)
 800c8c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c8c6:	f001 fc47 	bl	800e158 <rcutils_join_path>
 800c8ca:	7833      	ldrb	r3, [r6, #0]
 800c8cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	d021      	beq.n	800c916 <exact_match_lookup+0x6e>
 800c8d2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800c8d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c8da:	1c70      	adds	r0, r6, #1
 800c8dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c8e0:	f001 fc40 	bl	800e164 <rcutils_to_native_path>
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c8ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f001 fc2f 	bl	800e158 <rcutils_join_path>
 800c8fa:	6862      	ldr	r2, [r4, #4]
 800c8fc:	6921      	ldr	r1, [r4, #16]
 800c8fe:	4603      	mov	r3, r0
 800c900:	4630      	mov	r0, r6
 800c902:	461e      	mov	r6, r3
 800c904:	4790      	blx	r2
 800c906:	4628      	mov	r0, r5
 800c908:	6863      	ldr	r3, [r4, #4]
 800c90a:	6921      	ldr	r1, [r4, #16]
 800c90c:	4798      	blx	r3
 800c90e:	4635      	mov	r5, r6
 800c910:	4628      	mov	r0, r5
 800c912:	b005      	add	sp, #20
 800c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c916:	7873      	ldrb	r3, [r6, #1]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1da      	bne.n	800c8d2 <exact_match_lookup+0x2a>
 800c91c:	4628      	mov	r0, r5
 800c91e:	b005      	add	sp, #20
 800c920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c922:	bf00      	nop
 800c924:	08016680 	.word	0x08016680

0800c928 <rcl_get_secure_root>:
 800c928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c92c:	b085      	sub	sp, #20
 800c92e:	b168      	cbz	r0, 800c94c <rcl_get_secure_root+0x24>
 800c930:	4607      	mov	r7, r0
 800c932:	4608      	mov	r0, r1
 800c934:	460c      	mov	r4, r1
 800c936:	f7fd fdc3 	bl	800a4c0 <rcutils_allocator_is_valid>
 800c93a:	b138      	cbz	r0, 800c94c <rcl_get_secure_root+0x24>
 800c93c:	2300      	movs	r3, #0
 800c93e:	482d      	ldr	r0, [pc, #180]	@ (800c9f4 <rcl_get_secure_root+0xcc>)
 800c940:	9303      	str	r3, [sp, #12]
 800c942:	a903      	add	r1, sp, #12
 800c944:	f001 fc50 	bl	800e1e8 <rcutils_get_env>
 800c948:	4605      	mov	r5, r0
 800c94a:	b120      	cbz	r0, 800c956 <rcl_get_secure_root+0x2e>
 800c94c:	2500      	movs	r5, #0
 800c94e:	4628      	mov	r0, r5
 800c950:	b005      	add	sp, #20
 800c952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	2a00      	cmp	r2, #0
 800c95c:	d0f6      	beq.n	800c94c <rcl_get_secure_root+0x24>
 800c95e:	f104 090c 	add.w	r9, r4, #12
 800c962:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c966:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c96a:	4618      	mov	r0, r3
 800c96c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c970:	f001 fd2a 	bl	800e3c8 <rcutils_strdup>
 800c974:	4680      	mov	r8, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	d0e8      	beq.n	800c94c <rcl_get_secure_root+0x24>
 800c97a:	481f      	ldr	r0, [pc, #124]	@ (800c9f8 <rcl_get_secure_root+0xd0>)
 800c97c:	9503      	str	r5, [sp, #12]
 800c97e:	a903      	add	r1, sp, #12
 800c980:	f001 fc32 	bl	800e1e8 <rcutils_get_env>
 800c984:	b160      	cbz	r0, 800c9a0 <rcl_get_secure_root+0x78>
 800c986:	2600      	movs	r6, #0
 800c988:	6863      	ldr	r3, [r4, #4]
 800c98a:	6921      	ldr	r1, [r4, #16]
 800c98c:	4630      	mov	r0, r6
 800c98e:	4798      	blx	r3
 800c990:	4640      	mov	r0, r8
 800c992:	6863      	ldr	r3, [r4, #4]
 800c994:	6921      	ldr	r1, [r4, #16]
 800c996:	4798      	blx	r3
 800c998:	4628      	mov	r0, r5
 800c99a:	b005      	add	sp, #20
 800c99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	781e      	ldrb	r6, [r3, #0]
 800c9a4:	b1f6      	cbz	r6, 800c9e4 <rcl_get_secure_root+0xbc>
 800c9a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c9aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c9b4:	f001 fd08 	bl	800e3c8 <rcutils_strdup>
 800c9b8:	4606      	mov	r6, r0
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d0e3      	beq.n	800c986 <rcl_get_secure_root+0x5e>
 800c9be:	4622      	mov	r2, r4
 800c9c0:	4641      	mov	r1, r8
 800c9c2:	f7ff ff71 	bl	800c8a8 <exact_match_lookup>
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	2d00      	cmp	r5, #0
 800c9ca:	d0dd      	beq.n	800c988 <rcl_get_secure_root+0x60>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f001 fbc1 	bl	800e154 <rcutils_is_directory>
 800c9d2:	4607      	mov	r7, r0
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d1d7      	bne.n	800c988 <rcl_get_secure_root+0x60>
 800c9d8:	4628      	mov	r0, r5
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	6921      	ldr	r1, [r4, #16]
 800c9de:	4798      	blx	r3
 800c9e0:	463d      	mov	r5, r7
 800c9e2:	e7d1      	b.n	800c988 <rcl_get_secure_root+0x60>
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4641      	mov	r1, r8
 800c9ea:	f7ff ff5d 	bl	800c8a8 <exact_match_lookup>
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	e7ea      	b.n	800c9c8 <rcl_get_secure_root+0xa0>
 800c9f2:	bf00      	nop
 800c9f4:	0801668c 	.word	0x0801668c
 800c9f8:	080166a4 	.word	0x080166a4

0800c9fc <rcl_get_security_options_from_environment>:
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	4607      	mov	r7, r0
 800ca04:	4688      	mov	r8, r1
 800ca06:	2400      	movs	r4, #0
 800ca08:	481d      	ldr	r0, [pc, #116]	@ (800ca80 <rcl_get_security_options_from_environment+0x84>)
 800ca0a:	9401      	str	r4, [sp, #4]
 800ca0c:	a901      	add	r1, sp, #4
 800ca0e:	4616      	mov	r6, r2
 800ca10:	f001 fbea 	bl	800e1e8 <rcutils_get_env>
 800ca14:	b120      	cbz	r0, 800ca20 <rcl_get_security_options_from_environment+0x24>
 800ca16:	2501      	movs	r5, #1
 800ca18:	4628      	mov	r0, r5
 800ca1a:	b002      	add	sp, #8
 800ca1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca20:	4918      	ldr	r1, [pc, #96]	@ (800ca84 <rcl_get_security_options_from_environment+0x88>)
 800ca22:	4604      	mov	r4, r0
 800ca24:	9801      	ldr	r0, [sp, #4]
 800ca26:	f7f3 fbdb 	bl	80001e0 <strcmp>
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	b9c8      	cbnz	r0, 800ca62 <rcl_get_security_options_from_environment+0x66>
 800ca2e:	9001      	str	r0, [sp, #4]
 800ca30:	b1ee      	cbz	r6, 800ca6e <rcl_get_security_options_from_environment+0x72>
 800ca32:	4815      	ldr	r0, [pc, #84]	@ (800ca88 <rcl_get_security_options_from_environment+0x8c>)
 800ca34:	a901      	add	r1, sp, #4
 800ca36:	f001 fbd7 	bl	800e1e8 <rcutils_get_env>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d1eb      	bne.n	800ca16 <rcl_get_security_options_from_environment+0x1a>
 800ca3e:	4913      	ldr	r1, [pc, #76]	@ (800ca8c <rcl_get_security_options_from_environment+0x90>)
 800ca40:	9801      	ldr	r0, [sp, #4]
 800ca42:	f7f3 fbcd 	bl	80001e0 <strcmp>
 800ca46:	fab0 f080 	clz	r0, r0
 800ca4a:	0940      	lsrs	r0, r0, #5
 800ca4c:	7030      	strb	r0, [r6, #0]
 800ca4e:	4641      	mov	r1, r8
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff ff69 	bl	800c928 <rcl_get_secure_root>
 800ca56:	b160      	cbz	r0, 800ca72 <rcl_get_security_options_from_environment+0x76>
 800ca58:	6070      	str	r0, [r6, #4]
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	b002      	add	sp, #8
 800ca5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca62:	4625      	mov	r5, r4
 800ca64:	4628      	mov	r0, r5
 800ca66:	7034      	strb	r4, [r6, #0]
 800ca68:	b002      	add	sp, #8
 800ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca6e:	250b      	movs	r5, #11
 800ca70:	e7d2      	b.n	800ca18 <rcl_get_security_options_from_environment+0x1c>
 800ca72:	7835      	ldrb	r5, [r6, #0]
 800ca74:	f1a5 0501 	sub.w	r5, r5, #1
 800ca78:	fab5 f585 	clz	r5, r5
 800ca7c:	096d      	lsrs	r5, r5, #5
 800ca7e:	e7cb      	b.n	800ca18 <rcl_get_security_options_from_environment+0x1c>
 800ca80:	08016644 	.word	0x08016644
 800ca84:	08016658 	.word	0x08016658
 800ca88:	08016660 	.word	0x08016660
 800ca8c:	08016678 	.word	0x08016678

0800ca90 <rcl_service_get_rmw_handle>:
 800ca90:	b110      	cbz	r0, 800ca98 <rcl_service_get_rmw_handle+0x8>
 800ca92:	6800      	ldr	r0, [r0, #0]
 800ca94:	b100      	cbz	r0, 800ca98 <rcl_service_get_rmw_handle+0x8>
 800ca96:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop

0800ca9c <rcl_take_request>:
 800ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	460c      	mov	r4, r1
 800caa2:	4607      	mov	r7, r0
 800caa4:	4694      	mov	ip, r2
 800caa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800caa8:	b08d      	sub	sp, #52	@ 0x34
 800caaa:	ad06      	add	r5, sp, #24
 800caac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800caae:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cab2:	e885 0003 	stmia.w	r5, {r0, r1}
 800cab6:	b1e7      	cbz	r7, 800caf2 <rcl_take_request+0x56>
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	b1d3      	cbz	r3, 800caf2 <rcl_take_request+0x56>
 800cabc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cabe:	b1c0      	cbz	r0, 800caf2 <rcl_take_request+0x56>
 800cac0:	4662      	mov	r2, ip
 800cac2:	b30a      	cbz	r2, 800cb08 <rcl_take_request+0x6c>
 800cac4:	2500      	movs	r5, #0
 800cac6:	f10d 0307 	add.w	r3, sp, #7
 800caca:	a902      	add	r1, sp, #8
 800cacc:	f88d 5007 	strb.w	r5, [sp, #7]
 800cad0:	f002 fb5c 	bl	800f18c <rmw_take_request>
 800cad4:	4606      	mov	r6, r0
 800cad6:	b178      	cbz	r0, 800caf8 <rcl_take_request+0x5c>
 800cad8:	280a      	cmp	r0, #10
 800cada:	bf18      	it	ne
 800cadc:	2601      	movne	r6, #1
 800cade:	ad06      	add	r5, sp, #24
 800cae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cae8:	e884 0003 	stmia.w	r4, {r0, r1}
 800caec:	4630      	mov	r0, r6
 800caee:	b00d      	add	sp, #52	@ 0x34
 800caf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caf2:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800caf6:	e7f2      	b.n	800cade <rcl_take_request+0x42>
 800caf8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cafc:	f240 2359 	movw	r3, #601	@ 0x259
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	bf08      	it	eq
 800cb04:	461e      	moveq	r6, r3
 800cb06:	e7ea      	b.n	800cade <rcl_take_request+0x42>
 800cb08:	260b      	movs	r6, #11
 800cb0a:	e7e8      	b.n	800cade <rcl_take_request+0x42>

0800cb0c <rcl_send_response>:
 800cb0c:	b160      	cbz	r0, 800cb28 <rcl_send_response+0x1c>
 800cb0e:	6800      	ldr	r0, [r0, #0]
 800cb10:	b150      	cbz	r0, 800cb28 <rcl_send_response+0x1c>
 800cb12:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800cb14:	b140      	cbz	r0, 800cb28 <rcl_send_response+0x1c>
 800cb16:	b151      	cbz	r1, 800cb2e <rcl_send_response+0x22>
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	b152      	cbz	r2, 800cb32 <rcl_send_response+0x26>
 800cb1c:	f002 fb94 	bl	800f248 <rmw_send_response>
 800cb20:	3800      	subs	r0, #0
 800cb22:	bf18      	it	ne
 800cb24:	2001      	movne	r0, #1
 800cb26:	bd10      	pop	{r4, pc}
 800cb28:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800cb2c:	4770      	bx	lr
 800cb2e:	200b      	movs	r0, #11
 800cb30:	4770      	bx	lr
 800cb32:	200b      	movs	r0, #11
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	bf00      	nop

0800cb38 <rcl_get_zero_initialized_subscription>:
 800cb38:	4b01      	ldr	r3, [pc, #4]	@ (800cb40 <rcl_get_zero_initialized_subscription+0x8>)
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	080166c4 	.word	0x080166c4

0800cb44 <rcl_subscription_init>:
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	b091      	sub	sp, #68	@ 0x44
 800cb4a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800cb4c:	b1d7      	cbz	r7, 800cb84 <rcl_subscription_init+0x40>
 800cb4e:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800cb52:	4604      	mov	r4, r0
 800cb54:	4648      	mov	r0, r9
 800cb56:	4688      	mov	r8, r1
 800cb58:	4616      	mov	r6, r2
 800cb5a:	461d      	mov	r5, r3
 800cb5c:	f7fd fcb0 	bl	800a4c0 <rcutils_allocator_is_valid>
 800cb60:	b180      	cbz	r0, 800cb84 <rcl_subscription_init+0x40>
 800cb62:	b17c      	cbz	r4, 800cb84 <rcl_subscription_init+0x40>
 800cb64:	4640      	mov	r0, r8
 800cb66:	f7ff fe3d 	bl	800c7e4 <rcl_node_is_valid>
 800cb6a:	b380      	cbz	r0, 800cbce <rcl_subscription_init+0x8a>
 800cb6c:	b156      	cbz	r6, 800cb84 <rcl_subscription_init+0x40>
 800cb6e:	b14d      	cbz	r5, 800cb84 <rcl_subscription_init+0x40>
 800cb70:	f8d4 a000 	ldr.w	sl, [r4]
 800cb74:	f1ba 0f00 	cmp.w	sl, #0
 800cb78:	d009      	beq.n	800cb8e <rcl_subscription_init+0x4a>
 800cb7a:	2564      	movs	r5, #100	@ 0x64
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	b011      	add	sp, #68	@ 0x44
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb84:	250b      	movs	r5, #11
 800cb86:	4628      	mov	r0, r5
 800cb88:	b011      	add	sp, #68	@ 0x44
 800cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8e:	46ce      	mov	lr, r9
 800cb90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb94:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800cb98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb9c:	f8de 3000 	ldr.w	r3, [lr]
 800cba0:	f8cc 3000 	str.w	r3, [ip]
 800cba4:	f001 fc4e 	bl	800e444 <rcutils_get_zero_initialized_string_map>
 800cba8:	ab10      	add	r3, sp, #64	@ 0x40
 800cbaa:	4684      	mov	ip, r0
 800cbac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cbb0:	f8cd c020 	str.w	ip, [sp, #32]
 800cbb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cbb8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800cbbc:	4651      	mov	r1, sl
 800cbbe:	a808      	add	r0, sp, #32
 800cbc0:	f001 fcba 	bl	800e538 <rcutils_string_map_init>
 800cbc4:	b140      	cbz	r0, 800cbd8 <rcl_subscription_init+0x94>
 800cbc6:	280a      	cmp	r0, #10
 800cbc8:	d011      	beq.n	800cbee <rcl_subscription_init+0xaa>
 800cbca:	2501      	movs	r5, #1
 800cbcc:	e7db      	b.n	800cb86 <rcl_subscription_init+0x42>
 800cbce:	25c8      	movs	r5, #200	@ 0xc8
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	b011      	add	sp, #68	@ 0x44
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	a808      	add	r0, sp, #32
 800cbda:	f7ff fa39 	bl	800c050 <rcl_get_default_topic_name_substitutions>
 800cbde:	4682      	mov	sl, r0
 800cbe0:	b138      	cbz	r0, 800cbf2 <rcl_subscription_init+0xae>
 800cbe2:	a808      	add	r0, sp, #32
 800cbe4:	f001 fce8 	bl	800e5b8 <rcutils_string_map_fini>
 800cbe8:	f1ba 0f0a 	cmp.w	sl, #10
 800cbec:	d1ed      	bne.n	800cbca <rcl_subscription_init+0x86>
 800cbee:	250a      	movs	r5, #10
 800cbf0:	e7c9      	b.n	800cb86 <rcl_subscription_init+0x42>
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800cbf8:	f7ff fdfe 	bl	800c7f8 <rcl_node_get_name>
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f7ff fe02 	bl	800c808 <rcl_node_get_namespace>
 800cc04:	4686      	mov	lr, r0
 800cc06:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800cc0a:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800cc0e:	46ec      	mov	ip, sp
 800cc10:	f8cd b014 	str.w	fp, [sp, #20]
 800cc14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc18:	f8d9 3000 	ldr.w	r3, [r9]
 800cc1c:	f8cc 3000 	str.w	r3, [ip]
 800cc20:	4628      	mov	r0, r5
 800cc22:	4651      	mov	r1, sl
 800cc24:	4672      	mov	r2, lr
 800cc26:	ab08      	add	r3, sp, #32
 800cc28:	f7ff f8ac 	bl	800bd84 <rcl_expand_topic_name>
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	a808      	add	r0, sp, #32
 800cc30:	f001 fcc2 	bl	800e5b8 <rcutils_string_map_fini>
 800cc34:	b920      	cbnz	r0, 800cc40 <rcl_subscription_init+0xfc>
 800cc36:	b15d      	cbz	r5, 800cc50 <rcl_subscription_init+0x10c>
 800cc38:	2d67      	cmp	r5, #103	@ 0x67
 800cc3a:	d002      	beq.n	800cc42 <rcl_subscription_init+0xfe>
 800cc3c:	2d69      	cmp	r5, #105	@ 0x69
 800cc3e:	d05a      	beq.n	800ccf6 <rcl_subscription_init+0x1b2>
 800cc40:	2501      	movs	r5, #1
 800cc42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d09e      	beq.n	800cb86 <rcl_subscription_init+0x42>
 800cc48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc4a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc4c:	4798      	blx	r3
 800cc4e:	e79a      	b.n	800cb86 <rcl_subscription_init+0x42>
 800cc50:	4640      	mov	r0, r8
 800cc52:	f7ff fde1 	bl	800c818 <rcl_node_get_options>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d0f2      	beq.n	800cc40 <rcl_subscription_init+0xfc>
 800cc5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc5c:	f7f3 faca 	bl	80001f4 <strlen>
 800cc60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc64:	3001      	adds	r0, #1
 800cc66:	4798      	blx	r3
 800cc68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc6a:	9107      	str	r1, [sp, #28]
 800cc6c:	4681      	mov	r9, r0
 800cc6e:	4608      	mov	r0, r1
 800cc70:	f7f3 fac0 	bl	80001f4 <strlen>
 800cc74:	9907      	ldr	r1, [sp, #28]
 800cc76:	1c42      	adds	r2, r0, #1
 800cc78:	4648      	mov	r0, r9
 800cc7a:	f008 fa62 	bl	8015142 <memcpy>
 800cc7e:	462a      	mov	r2, r5
 800cc80:	4648      	mov	r0, r9
 800cc82:	a90a      	add	r1, sp, #40	@ 0x28
 800cc84:	f001 fd40 	bl	800e708 <rmw_validate_full_topic_name>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d132      	bne.n	800ccf2 <rcl_subscription_init+0x1ae>
 800cc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d133      	bne.n	800ccfa <rcl_subscription_init+0x1b6>
 800cc92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc94:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc96:	20c8      	movs	r0, #200	@ 0xc8
 800cc98:	4798      	blx	r3
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	b378      	cbz	r0, 800ccfe <rcl_subscription_init+0x1ba>
 800cc9e:	4640      	mov	r0, r8
 800cca0:	f7ff fdc2 	bl	800c828 <rcl_node_get_rmw_handle>
 800cca4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4631      	mov	r1, r6
 800ccac:	463b      	mov	r3, r7
 800ccae:	464a      	mov	r2, r9
 800ccb0:	6825      	ldr	r5, [r4, #0]
 800ccb2:	f002 fbb7 	bl	800f424 <rmw_create_subscription>
 800ccb6:	6821      	ldr	r1, [r4, #0]
 800ccb8:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 800ccbc:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 800ccc0:	b368      	cbz	r0, 800cd1e <rcl_subscription_init+0x1da>
 800ccc2:	3170      	adds	r1, #112	@ 0x70
 800ccc4:	f002 fc8a 	bl	800f5dc <rmw_subscription_get_actual_qos>
 800ccc8:	4605      	mov	r5, r0
 800ccca:	b9d0      	cbnz	r0, 800cd02 <rcl_subscription_init+0x1be>
 800cccc:	6820      	ldr	r0, [r4, #0]
 800ccce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ccd2:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ccd6:	2270      	movs	r2, #112	@ 0x70
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f008 fa32 	bl	8015142 <memcpy>
 800ccde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cce0:	b110      	cbz	r0, 800cce8 <rcl_subscription_init+0x1a4>
 800cce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cce6:	4798      	blx	r3
 800cce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ccec:	4648      	mov	r0, r9
 800ccee:	4798      	blx	r3
 800ccf0:	e749      	b.n	800cb86 <rcl_subscription_init+0x42>
 800ccf2:	2501      	movs	r5, #1
 800ccf4:	e7f3      	b.n	800ccde <rcl_subscription_init+0x19a>
 800ccf6:	2567      	movs	r5, #103	@ 0x67
 800ccf8:	e7a3      	b.n	800cc42 <rcl_subscription_init+0xfe>
 800ccfa:	2567      	movs	r5, #103	@ 0x67
 800ccfc:	e7ef      	b.n	800ccde <rcl_subscription_init+0x19a>
 800ccfe:	250a      	movs	r5, #10
 800cd00:	e7ed      	b.n	800ccde <rcl_subscription_init+0x19a>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d0f4      	beq.n	800ccf2 <rcl_subscription_init+0x1ae>
 800cd08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd0c:	b13b      	cbz	r3, 800cd1e <rcl_subscription_init+0x1da>
 800cd0e:	4640      	mov	r0, r8
 800cd10:	f7ff fd8a 	bl	800c828 <rcl_node_get_rmw_handle>
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800cd1a:	f002 fc6d 	bl	800f5f8 <rmw_destroy_subscription>
 800cd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd20:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cd22:	6820      	ldr	r0, [r4, #0]
 800cd24:	4798      	blx	r3
 800cd26:	2300      	movs	r3, #0
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	2501      	movs	r5, #1
 800cd2c:	e7d7      	b.n	800ccde <rcl_subscription_init+0x19a>
 800cd2e:	bf00      	nop

0800cd30 <rcl_subscription_get_default_options>:
 800cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd34:	4f12      	ldr	r7, [pc, #72]	@ (800cd80 <rcl_subscription_get_default_options+0x50>)
 800cd36:	4913      	ldr	r1, [pc, #76]	@ (800cd84 <rcl_subscription_get_default_options+0x54>)
 800cd38:	b088      	sub	sp, #32
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	2250      	movs	r2, #80	@ 0x50
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f008 f9ff 	bl	8015142 <memcpy>
 800cd44:	ac02      	add	r4, sp, #8
 800cd46:	a802      	add	r0, sp, #8
 800cd48:	f7fd fbac 	bl	800a4a4 <rcutils_get_default_allocator>
 800cd4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd4e:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800cd52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd54:	46e8      	mov	r8, sp
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	602b      	str	r3, [r5, #0]
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f001 fcbe 	bl	800e6dc <rmw_get_default_subscription_options>
 800cd60:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cd64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800cd68:	e883 0003 	stmia.w	r3, {r0, r1}
 800cd6c:	2270      	movs	r2, #112	@ 0x70
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	f008 f9e6 	bl	8015142 <memcpy>
 800cd76:	4630      	mov	r0, r6
 800cd78:	b008      	add	sp, #32
 800cd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7e:	bf00      	nop
 800cd80:	200090f8 	.word	0x200090f8
 800cd84:	080166c8 	.word	0x080166c8

0800cd88 <rcl_take>:
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d03f      	beq.n	800ce0c <rcl_take+0x84>
 800cd8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd90:	4617      	mov	r7, r2
 800cd92:	6802      	ldr	r2, [r0, #0]
 800cd94:	b09d      	sub	sp, #116	@ 0x74
 800cd96:	4606      	mov	r6, r0
 800cd98:	b382      	cbz	r2, 800cdfc <rcl_take+0x74>
 800cd9a:	4699      	mov	r9, r3
 800cd9c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800cda0:	b363      	cbz	r3, 800cdfc <rcl_take+0x74>
 800cda2:	4688      	mov	r8, r1
 800cda4:	b381      	cbz	r1, 800ce08 <rcl_take+0x80>
 800cda6:	2f00      	cmp	r7, #0
 800cda8:	d034      	beq.n	800ce14 <rcl_take+0x8c>
 800cdaa:	a802      	add	r0, sp, #8
 800cdac:	ac02      	add	r4, sp, #8
 800cdae:	f001 fc99 	bl	800e6e4 <rmw_get_zero_initialized_message_info>
 800cdb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdb4:	463d      	mov	r5, r7
 800cdb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cdc0:	6834      	ldr	r4, [r6, #0]
 800cdc2:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 800cdc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cdca:	2400      	movs	r4, #0
 800cdcc:	463b      	mov	r3, r7
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f8cd 9000 	str.w	r9, [sp]
 800cdd4:	4641      	mov	r1, r8
 800cdd6:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 800cdda:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 800cdde:	f002 fc69 	bl	800f6b4 <rmw_take_with_info>
 800cde2:	4603      	mov	r3, r0
 800cde4:	b9c0      	cbnz	r0, 800ce18 <rcl_take+0x90>
 800cde6:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 800cdea:	f240 1291 	movw	r2, #401	@ 0x191
 800cdee:	2900      	cmp	r1, #0
 800cdf0:	bf08      	it	eq
 800cdf2:	4613      	moveq	r3, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	b01d      	add	sp, #116	@ 0x74
 800cdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdfc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ce00:	4618      	mov	r0, r3
 800ce02:	b01d      	add	sp, #116	@ 0x74
 800ce04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce08:	230b      	movs	r3, #11
 800ce0a:	e7f3      	b.n	800cdf4 <rcl_take+0x6c>
 800ce0c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ce10:	4618      	mov	r0, r3
 800ce12:	4770      	bx	lr
 800ce14:	af10      	add	r7, sp, #64	@ 0x40
 800ce16:	e7c8      	b.n	800cdaa <rcl_take+0x22>
 800ce18:	f006 fb94 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	e7e9      	b.n	800cdf4 <rcl_take+0x6c>

0800ce20 <rcl_subscription_get_rmw_handle>:
 800ce20:	b118      	cbz	r0, 800ce2a <rcl_subscription_get_rmw_handle+0xa>
 800ce22:	6800      	ldr	r0, [r0, #0]
 800ce24:	b108      	cbz	r0, 800ce2a <rcl_subscription_get_rmw_handle+0xa>
 800ce26:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ce2a:	4770      	bx	lr

0800ce2c <rcl_get_system_time>:
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	f7fd bb83 	b.w	800a538 <rcutils_system_time_now>
 800ce32:	bf00      	nop

0800ce34 <rcl_get_steady_time>:
 800ce34:	4608      	mov	r0, r1
 800ce36:	f7fd bba7 	b.w	800a588 <rcutils_steady_time_now>
 800ce3a:	bf00      	nop

0800ce3c <rcl_get_ros_time>:
 800ce3c:	7a03      	ldrb	r3, [r0, #8]
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	460c      	mov	r4, r1
 800ce42:	b133      	cbz	r3, 800ce52 <rcl_get_ros_time+0x16>
 800ce44:	2105      	movs	r1, #5
 800ce46:	f001 f8e3 	bl	800e010 <__atomic_load_8>
 800ce4a:	e9c4 0100 	strd	r0, r1, [r4]
 800ce4e:	2000      	movs	r0, #0
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce56:	4608      	mov	r0, r1
 800ce58:	f7fd bb6e 	b.w	800a538 <rcutils_system_time_now>

0800ce5c <rcl_clock_init>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4606      	mov	r6, r0
 800ce62:	4610      	mov	r0, r2
 800ce64:	4614      	mov	r4, r2
 800ce66:	460d      	mov	r5, r1
 800ce68:	f7fd fb2a 	bl	800a4c0 <rcutils_allocator_is_valid>
 800ce6c:	b128      	cbz	r0, 800ce7a <rcl_clock_init+0x1e>
 800ce6e:	2e03      	cmp	r6, #3
 800ce70:	d803      	bhi.n	800ce7a <rcl_clock_init+0x1e>
 800ce72:	e8df f006 	tbb	[pc, r6]
 800ce76:	2c1b      	.short	0x2c1b
 800ce78:	0554      	.short	0x0554
 800ce7a:	200b      	movs	r0, #11
 800ce7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	d0fa      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800ce84:	2c00      	cmp	r4, #0
 800ce86:	d0f8      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800ce88:	2600      	movs	r6, #0
 800ce8a:	702e      	strb	r6, [r5, #0]
 800ce8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce8e:	f105 0714 	add.w	r7, r5, #20
 800ce92:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800ce96:	612e      	str	r6, [r5, #16]
 800ce98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	603b      	str	r3, [r7, #0]
 800ce9e:	2303      	movs	r3, #3
 800cea0:	4a2b      	ldr	r2, [pc, #172]	@ (800cf50 <rcl_clock_init+0xf4>)
 800cea2:	702b      	strb	r3, [r5, #0]
 800cea4:	4630      	mov	r0, r6
 800cea6:	60ea      	str	r2, [r5, #12]
 800cea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceac:	2d00      	cmp	r5, #0
 800ceae:	d0e4      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800ceb0:	2600      	movs	r6, #0
 800ceb2:	702e      	strb	r6, [r5, #0]
 800ceb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceb6:	f105 0714 	add.w	r7, r5, #20
 800ceba:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800cebe:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800cec2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cec4:	6823      	ldr	r3, [r4, #0]
 800cec6:	603b      	str	r3, [r7, #0]
 800cec8:	4630      	mov	r0, r6
 800ceca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cece:	2d00      	cmp	r5, #0
 800ced0:	d0d3      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800ced2:	2c00      	cmp	r4, #0
 800ced4:	d0d1      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800ced6:	2600      	movs	r6, #0
 800ced8:	702e      	strb	r6, [r5, #0]
 800ceda:	46a4      	mov	ip, r4
 800cedc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cee0:	f105 0714 	add.w	r7, r5, #20
 800cee4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800cee8:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800ceec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ceee:	f8dc 3000 	ldr.w	r3, [ip]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	6921      	ldr	r1, [r4, #16]
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	2010      	movs	r0, #16
 800cefa:	4798      	blx	r3
 800cefc:	4603      	mov	r3, r0
 800cefe:	6128      	str	r0, [r5, #16]
 800cf00:	b318      	cbz	r0, 800cf4a <rcl_clock_init+0xee>
 800cf02:	f04f 0800 	mov.w	r8, #0
 800cf06:	f04f 0900 	mov.w	r9, #0
 800cf0a:	7206      	strb	r6, [r0, #8]
 800cf0c:	e9c3 8900 	strd	r8, r9, [r3]
 800cf10:	2301      	movs	r3, #1
 800cf12:	4a10      	ldr	r2, [pc, #64]	@ (800cf54 <rcl_clock_init+0xf8>)
 800cf14:	702b      	strb	r3, [r5, #0]
 800cf16:	4630      	mov	r0, r6
 800cf18:	60ea      	str	r2, [r5, #12]
 800cf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	d0ab      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800cf22:	2c00      	cmp	r4, #0
 800cf24:	d0a9      	beq.n	800ce7a <rcl_clock_init+0x1e>
 800cf26:	2600      	movs	r6, #0
 800cf28:	702e      	strb	r6, [r5, #0]
 800cf2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf2c:	f105 0714 	add.w	r7, r5, #20
 800cf30:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800cf34:	612e      	str	r6, [r5, #16]
 800cf36:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	4a06      	ldr	r2, [pc, #24]	@ (800cf58 <rcl_clock_init+0xfc>)
 800cf40:	702b      	strb	r3, [r5, #0]
 800cf42:	4630      	mov	r0, r6
 800cf44:	60ea      	str	r2, [r5, #12]
 800cf46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4a:	200a      	movs	r0, #10
 800cf4c:	e796      	b.n	800ce7c <rcl_clock_init+0x20>
 800cf4e:	bf00      	nop
 800cf50:	0800ce35 	.word	0x0800ce35
 800cf54:	0800ce3d 	.word	0x0800ce3d
 800cf58:	0800ce2d 	.word	0x0800ce2d

0800cf5c <rcl_clock_get_now>:
 800cf5c:	b140      	cbz	r0, 800cf70 <rcl_clock_get_now+0x14>
 800cf5e:	b139      	cbz	r1, 800cf70 <rcl_clock_get_now+0x14>
 800cf60:	7803      	ldrb	r3, [r0, #0]
 800cf62:	b11b      	cbz	r3, 800cf6c <rcl_clock_get_now+0x10>
 800cf64:	68c3      	ldr	r3, [r0, #12]
 800cf66:	b10b      	cbz	r3, 800cf6c <rcl_clock_get_now+0x10>
 800cf68:	6900      	ldr	r0, [r0, #16]
 800cf6a:	4718      	bx	r3
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	4770      	bx	lr
 800cf70:	200b      	movs	r0, #11
 800cf72:	4770      	bx	lr

0800cf74 <rcl_timer_call>:
 800cf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	b08b      	sub	sp, #44	@ 0x2c
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d06e      	beq.n	800d05c <rcl_timer_call+0xe8>
 800cf7e:	6803      	ldr	r3, [r0, #0]
 800cf80:	f3bf 8f5b 	dmb	ish
 800cf84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cf88:	f3bf 8f5b 	dmb	ish
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d159      	bne.n	800d046 <rcl_timer_call+0xd2>
 800cf92:	6803      	ldr	r3, [r0, #0]
 800cf94:	a908      	add	r1, sp, #32
 800cf96:	6818      	ldr	r0, [r3, #0]
 800cf98:	f7ff ffe0 	bl	800cf5c <rcl_clock_get_now>
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d14d      	bne.n	800d03e <rcl_timer_call+0xca>
 800cfa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	f173 0100 	sbcs.w	r1, r3, #0
 800cfac:	db51      	blt.n	800d052 <rcl_timer_call+0xde>
 800cfae:	6820      	ldr	r0, [r4, #0]
 800cfb0:	2605      	movs	r6, #5
 800cfb2:	9600      	str	r6, [sp, #0]
 800cfb4:	3020      	adds	r0, #32
 800cfb6:	f001 f893 	bl	800e0e0 <__atomic_exchange_8>
 800cfba:	6822      	ldr	r2, [r4, #0]
 800cfbc:	f3bf 8f5b 	dmb	ish
 800cfc0:	4682      	mov	sl, r0
 800cfc2:	f8d2 b010 	ldr.w	fp, [r2, #16]
 800cfc6:	f3bf 8f5b 	dmb	ish
 800cfca:	6820      	ldr	r0, [r4, #0]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	3028      	adds	r0, #40	@ 0x28
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	9305      	str	r3, [sp, #20]
 800cfd4:	f001 f81c 	bl	800e010 <__atomic_load_8>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	6820      	ldr	r0, [r4, #0]
 800cfdc:	460a      	mov	r2, r1
 800cfde:	3018      	adds	r0, #24
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800cfe6:	f001 f813 	bl	800e010 <__atomic_load_8>
 800cfea:	9b04      	ldr	r3, [sp, #16]
 800cfec:	9a03      	ldr	r2, [sp, #12]
 800cfee:	4606      	mov	r6, r0
 800cff0:	460f      	mov	r7, r1
 800cff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cff6:	eb13 0806 	adds.w	r8, r3, r6
 800cffa:	eb42 0907 	adc.w	r9, r2, r7
 800cffe:	4580      	cmp	r8, r0
 800d000:	eb79 0301 	sbcs.w	r3, r9, r1
 800d004:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d008:	460a      	mov	r2, r1
 800d00a:	da04      	bge.n	800d016 <rcl_timer_call+0xa2>
 800d00c:	ea56 0307 	orrs.w	r3, r6, r7
 800d010:	d129      	bne.n	800d066 <rcl_timer_call+0xf2>
 800d012:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d016:	6820      	ldr	r0, [r4, #0]
 800d018:	2105      	movs	r1, #5
 800d01a:	4642      	mov	r2, r8
 800d01c:	464b      	mov	r3, r9
 800d01e:	3028      	adds	r0, #40	@ 0x28
 800d020:	9100      	str	r1, [sp, #0]
 800d022:	f001 f829 	bl	800e078 <__atomic_store_8>
 800d026:	f1bb 0f00 	cmp.w	fp, #0
 800d02a:	d008      	beq.n	800d03e <rcl_timer_call+0xca>
 800d02c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d030:	9905      	ldr	r1, [sp, #20]
 800d032:	ebb2 020a 	subs.w	r2, r2, sl
 800d036:	4620      	mov	r0, r4
 800d038:	eb63 0301 	sbc.w	r3, r3, r1
 800d03c:	47d8      	blx	fp
 800d03e:	4628      	mov	r0, r5
 800d040:	b00b      	add	sp, #44	@ 0x2c
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	f240 3521 	movw	r5, #801	@ 0x321
 800d04a:	4628      	mov	r0, r5
 800d04c:	b00b      	add	sp, #44	@ 0x2c
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d052:	2501      	movs	r5, #1
 800d054:	4628      	mov	r0, r5
 800d056:	b00b      	add	sp, #44	@ 0x2c
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	250b      	movs	r5, #11
 800d05e:	4628      	mov	r0, r5
 800d060:	b00b      	add	sp, #44	@ 0x2c
 800d062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d066:	ebb0 0008 	subs.w	r0, r0, r8
 800d06a:	eb62 0109 	sbc.w	r1, r2, r9
 800d06e:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 800d072:	463b      	mov	r3, r7
 800d074:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 800d078:	4632      	mov	r2, r6
 800d07a:	f7f3 fd97 	bl	8000bac <__aeabi_ldivmod>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	f141 0100 	adc.w	r1, r1, #0
 800d084:	fb00 7007 	mla	r0, r0, r7, r7
 800d088:	fb06 0001 	mla	r0, r6, r1, r0
 800d08c:	fba3 6706 	umull	r6, r7, r3, r6
 800d090:	4407      	add	r7, r0
 800d092:	eb18 0806 	adds.w	r8, r8, r6
 800d096:	eb49 0907 	adc.w	r9, r9, r7
 800d09a:	e7bc      	b.n	800d016 <rcl_timer_call+0xa2>

0800d09c <rcl_timer_is_ready>:
 800d09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a0:	b082      	sub	sp, #8
 800d0a2:	b310      	cbz	r0, 800d0ea <rcl_timer_is_ready+0x4e>
 800d0a4:	4688      	mov	r8, r1
 800d0a6:	b301      	cbz	r1, 800d0ea <rcl_timer_is_ready+0x4e>
 800d0a8:	6803      	ldr	r3, [r0, #0]
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4669      	mov	r1, sp
 800d0ae:	6818      	ldr	r0, [r3, #0]
 800d0b0:	f7ff ff54 	bl	800cf5c <rcl_clock_get_now>
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	b118      	cbz	r0, 800d0c0 <rcl_timer_is_ready+0x24>
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	b002      	add	sp, #8
 800d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c0:	6820      	ldr	r0, [r4, #0]
 800d0c2:	2105      	movs	r1, #5
 800d0c4:	3028      	adds	r0, #40	@ 0x28
 800d0c6:	f000 ffa3 	bl	800e010 <__atomic_load_8>
 800d0ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0ce:	1ac6      	subs	r6, r0, r3
 800d0d0:	eb61 0702 	sbc.w	r7, r1, r2
 800d0d4:	2e01      	cmp	r6, #1
 800d0d6:	f177 0300 	sbcs.w	r3, r7, #0
 800d0da:	db0b      	blt.n	800d0f4 <rcl_timer_is_ready+0x58>
 800d0dc:	462b      	mov	r3, r5
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f888 3000 	strb.w	r3, [r8]
 800d0e4:	b002      	add	sp, #8
 800d0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ea:	250b      	movs	r5, #11
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	b002      	add	sp, #8
 800d0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	f3bf 8f5b 	dmb	ish
 800d0fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d0fe:	f3bf 8f5b 	dmb	ish
 800d102:	fab3 f383 	clz	r3, r3
 800d106:	095b      	lsrs	r3, r3, #5
 800d108:	e7e9      	b.n	800d0de <rcl_timer_is_ready+0x42>
 800d10a:	bf00      	nop

0800d10c <rcl_timer_get_time_until_next_call>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	b1d8      	cbz	r0, 800d14a <rcl_timer_get_time_until_next_call+0x3e>
 800d112:	460d      	mov	r5, r1
 800d114:	b1c9      	cbz	r1, 800d14a <rcl_timer_get_time_until_next_call+0x3e>
 800d116:	6803      	ldr	r3, [r0, #0]
 800d118:	4604      	mov	r4, r0
 800d11a:	4669      	mov	r1, sp
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f7ff ff1d 	bl	800cf5c <rcl_clock_get_now>
 800d122:	4606      	mov	r6, r0
 800d124:	b110      	cbz	r0, 800d12c <rcl_timer_get_time_until_next_call+0x20>
 800d126:	4630      	mov	r0, r6
 800d128:	b002      	add	sp, #8
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	6820      	ldr	r0, [r4, #0]
 800d12e:	2105      	movs	r1, #5
 800d130:	3028      	adds	r0, #40	@ 0x28
 800d132:	f000 ff6d 	bl	800e010 <__atomic_load_8>
 800d136:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d13a:	1ac0      	subs	r0, r0, r3
 800d13c:	eb61 0102 	sbc.w	r1, r1, r2
 800d140:	e9c5 0100 	strd	r0, r1, [r5]
 800d144:	4630      	mov	r0, r6
 800d146:	b002      	add	sp, #8
 800d148:	bd70      	pop	{r4, r5, r6, pc}
 800d14a:	260b      	movs	r6, #11
 800d14c:	4630      	mov	r0, r6
 800d14e:	b002      	add	sp, #8
 800d150:	bd70      	pop	{r4, r5, r6, pc}
 800d152:	bf00      	nop

0800d154 <rcl_timer_is_canceled>:
 800d154:	b168      	cbz	r0, 800d172 <rcl_timer_is_canceled+0x1e>
 800d156:	b161      	cbz	r1, 800d172 <rcl_timer_is_canceled+0x1e>
 800d158:	6803      	ldr	r3, [r0, #0]
 800d15a:	f3bf 8f5b 	dmb	ish
 800d15e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d162:	f3bf 8f5b 	dmb	ish
 800d166:	3b00      	subs	r3, #0
 800d168:	bf18      	it	ne
 800d16a:	2301      	movne	r3, #1
 800d16c:	700b      	strb	r3, [r1, #0]
 800d16e:	2000      	movs	r0, #0
 800d170:	4770      	bx	lr
 800d172:	200b      	movs	r0, #11
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop

0800d178 <rcl_timer_get_guard_condition>:
 800d178:	b130      	cbz	r0, 800d188 <rcl_timer_get_guard_condition+0x10>
 800d17a:	6800      	ldr	r0, [r0, #0]
 800d17c:	b120      	cbz	r0, 800d188 <rcl_timer_get_guard_condition+0x10>
 800d17e:	68c3      	ldr	r3, [r0, #12]
 800d180:	b10b      	cbz	r3, 800d186 <rcl_timer_get_guard_condition+0xe>
 800d182:	3008      	adds	r0, #8
 800d184:	4770      	bx	lr
 800d186:	4618      	mov	r0, r3
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop

0800d18c <rcl_validate_enclave_name_with_size>:
 800d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d18e:	b0c3      	sub	sp, #268	@ 0x10c
 800d190:	b1d0      	cbz	r0, 800d1c8 <rcl_validate_enclave_name_with_size+0x3c>
 800d192:	4615      	mov	r5, r2
 800d194:	b1c2      	cbz	r2, 800d1c8 <rcl_validate_enclave_name_with_size+0x3c>
 800d196:	461f      	mov	r7, r3
 800d198:	466a      	mov	r2, sp
 800d19a:	ab01      	add	r3, sp, #4
 800d19c:	460e      	mov	r6, r1
 800d19e:	f001 fb39 	bl	800e814 <rmw_validate_namespace_with_size>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	b9e0      	cbnz	r0, 800d1e0 <rcl_validate_enclave_name_with_size+0x54>
 800d1a6:	9b00      	ldr	r3, [sp, #0]
 800d1a8:	b923      	cbnz	r3, 800d1b4 <rcl_validate_enclave_name_with_size+0x28>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	b043      	add	sp, #268	@ 0x10c
 800d1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1b4:	2b07      	cmp	r3, #7
 800d1b6:	d00b      	beq.n	800d1d0 <rcl_validate_enclave_name_with_size+0x44>
 800d1b8:	1e5a      	subs	r2, r3, #1
 800d1ba:	2a05      	cmp	r2, #5
 800d1bc:	d82e      	bhi.n	800d21c <rcl_validate_enclave_name_with_size+0x90>
 800d1be:	e8df f002 	tbb	[pc, r2]
 800d1c2:	211e      	.short	0x211e
 800d1c4:	152a2724 	.word	0x152a2724
 800d1c8:	240b      	movs	r4, #11
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	b043      	add	sp, #268	@ 0x10c
 800d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d0:	2eff      	cmp	r6, #255	@ 0xff
 800d1d2:	d9ea      	bls.n	800d1aa <rcl_validate_enclave_name_with_size+0x1e>
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	d0e9      	beq.n	800d1ae <rcl_validate_enclave_name_with_size+0x22>
 800d1da:	23fe      	movs	r3, #254	@ 0xfe
 800d1dc:	603b      	str	r3, [r7, #0]
 800d1de:	e7e6      	b.n	800d1ae <rcl_validate_enclave_name_with_size+0x22>
 800d1e0:	f006 f9b0 	bl	8013544 <rcl_convert_rmw_ret_to_rcl_ret>
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	b043      	add	sp, #268	@ 0x10c
 800d1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	2f00      	cmp	r7, #0
 800d1f2:	d0dc      	beq.n	800d1ae <rcl_validate_enclave_name_with_size+0x22>
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	b043      	add	sp, #268	@ 0x10c
 800d1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1fe:	2301      	movs	r3, #1
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	e7f5      	b.n	800d1f0 <rcl_validate_enclave_name_with_size+0x64>
 800d204:	2302      	movs	r3, #2
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	e7f2      	b.n	800d1f0 <rcl_validate_enclave_name_with_size+0x64>
 800d20a:	2303      	movs	r3, #3
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	e7ef      	b.n	800d1f0 <rcl_validate_enclave_name_with_size+0x64>
 800d210:	2304      	movs	r3, #4
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	e7ec      	b.n	800d1f0 <rcl_validate_enclave_name_with_size+0x64>
 800d216:	2305      	movs	r3, #5
 800d218:	602b      	str	r3, [r5, #0]
 800d21a:	e7e9      	b.n	800d1f0 <rcl_validate_enclave_name_with_size+0x64>
 800d21c:	4a03      	ldr	r2, [pc, #12]	@ (800d22c <rcl_validate_enclave_name_with_size+0xa0>)
 800d21e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d222:	a802      	add	r0, sp, #8
 800d224:	f001 f8a4 	bl	800e370 <rcutils_snprintf>
 800d228:	2401      	movs	r4, #1
 800d22a:	e7c0      	b.n	800d1ae <rcl_validate_enclave_name_with_size+0x22>
 800d22c:	08016718 	.word	0x08016718

0800d230 <rcl_validate_enclave_name>:
 800d230:	b168      	cbz	r0, 800d24e <rcl_validate_enclave_name+0x1e>
 800d232:	b570      	push	{r4, r5, r6, lr}
 800d234:	460d      	mov	r5, r1
 800d236:	4616      	mov	r6, r2
 800d238:	4604      	mov	r4, r0
 800d23a:	f7f2 ffdb 	bl	80001f4 <strlen>
 800d23e:	4633      	mov	r3, r6
 800d240:	4601      	mov	r1, r0
 800d242:	462a      	mov	r2, r5
 800d244:	4620      	mov	r0, r4
 800d246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d24a:	f7ff bf9f 	b.w	800d18c <rcl_validate_enclave_name_with_size>
 800d24e:	200b      	movs	r0, #11
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <rcl_validate_topic_name>:
 800d254:	2800      	cmp	r0, #0
 800d256:	f000 808b 	beq.w	800d370 <rcl_validate_topic_name+0x11c>
 800d25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d25e:	460e      	mov	r6, r1
 800d260:	2900      	cmp	r1, #0
 800d262:	f000 808c 	beq.w	800d37e <rcl_validate_topic_name+0x12a>
 800d266:	4617      	mov	r7, r2
 800d268:	4605      	mov	r5, r0
 800d26a:	f7f2 ffc3 	bl	80001f4 <strlen>
 800d26e:	b1b0      	cbz	r0, 800d29e <rcl_validate_topic_name+0x4a>
 800d270:	f895 9000 	ldrb.w	r9, [r5]
 800d274:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800d424 <rcl_validate_topic_name+0x1d0>
 800d278:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800d27c:	f013 0304 	ands.w	r3, r3, #4
 800d280:	d178      	bne.n	800d374 <rcl_validate_topic_name+0x120>
 800d282:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800d286:	f815 2008 	ldrb.w	r2, [r5, r8]
 800d28a:	2a2f      	cmp	r2, #47	@ 0x2f
 800d28c:	d10e      	bne.n	800d2ac <rcl_validate_topic_name+0x58>
 800d28e:	2202      	movs	r2, #2
 800d290:	6032      	str	r2, [r6, #0]
 800d292:	b36f      	cbz	r7, 800d2f0 <rcl_validate_topic_name+0x9c>
 800d294:	f8c7 8000 	str.w	r8, [r7]
 800d298:	4618      	mov	r0, r3
 800d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29e:	2301      	movs	r3, #1
 800d2a0:	6033      	str	r3, [r6, #0]
 800d2a2:	b32f      	cbz	r7, 800d2f0 <rcl_validate_topic_name+0x9c>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	6038      	str	r0, [r7, #0]
 800d2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ac:	461c      	mov	r4, r3
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800d2b4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800d2b8:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2bc:	f1be 0f09 	cmp.w	lr, #9
 800d2c0:	d946      	bls.n	800d350 <rcl_validate_topic_name+0xfc>
 800d2c2:	f022 0e20 	bic.w	lr, r2, #32
 800d2c6:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800d2ca:	f1be 0f19 	cmp.w	lr, #25
 800d2ce:	d93f      	bls.n	800d350 <rcl_validate_topic_name+0xfc>
 800d2d0:	2a5f      	cmp	r2, #95	@ 0x5f
 800d2d2:	d014      	beq.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d2d4:	2a2f      	cmp	r2, #47	@ 0x2f
 800d2d6:	d05b      	beq.n	800d390 <rcl_validate_topic_name+0x13c>
 800d2d8:	2a7e      	cmp	r2, #126	@ 0x7e
 800d2da:	d052      	beq.n	800d382 <rcl_validate_topic_name+0x12e>
 800d2dc:	2a7b      	cmp	r2, #123	@ 0x7b
 800d2de:	d00a      	beq.n	800d2f6 <rcl_validate_topic_name+0xa2>
 800d2e0:	2a7d      	cmp	r2, #125	@ 0x7d
 800d2e2:	d16f      	bne.n	800d3c4 <rcl_validate_topic_name+0x170>
 800d2e4:	2c00      	cmp	r4, #0
 800d2e6:	d15e      	bne.n	800d3a6 <rcl_validate_topic_name+0x152>
 800d2e8:	2305      	movs	r3, #5
 800d2ea:	6033      	str	r3, [r6, #0]
 800d2ec:	b107      	cbz	r7, 800d2f0 <rcl_validate_topic_name+0x9c>
 800d2ee:	6039      	str	r1, [r7, #0]
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f6:	2c00      	cmp	r4, #0
 800d2f8:	d14c      	bne.n	800d394 <rcl_validate_topic_name+0x140>
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	2401      	movs	r4, #1
 800d2fe:	3101      	adds	r1, #1
 800d300:	4288      	cmp	r0, r1
 800d302:	d1d7      	bne.n	800d2b4 <rcl_validate_topic_name+0x60>
 800d304:	2c00      	cmp	r4, #0
 800d306:	d156      	bne.n	800d3b6 <rcl_validate_topic_name+0x162>
 800d308:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800d30c:	4620      	mov	r0, r4
 800d30e:	d061      	beq.n	800d3d4 <rcl_validate_topic_name+0x180>
 800d310:	f108 0e01 	add.w	lr, r8, #1
 800d314:	e007      	b.n	800d326 <rcl_validate_topic_name+0xd2>
 800d316:	2801      	cmp	r0, #1
 800d318:	d047      	beq.n	800d3aa <rcl_validate_topic_name+0x156>
 800d31a:	461a      	mov	r2, r3
 800d31c:	4291      	cmp	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f105 0501 	add.w	r5, r5, #1
 800d324:	d944      	bls.n	800d3b0 <rcl_validate_topic_name+0x15c>
 800d326:	4580      	cmp	r8, r0
 800d328:	f100 0301 	add.w	r3, r0, #1
 800d32c:	d037      	beq.n	800d39e <rcl_validate_topic_name+0x14a>
 800d32e:	782a      	ldrb	r2, [r5, #0]
 800d330:	2a2f      	cmp	r2, #47	@ 0x2f
 800d332:	d1f0      	bne.n	800d316 <rcl_validate_topic_name+0xc2>
 800d334:	786b      	ldrb	r3, [r5, #1]
 800d336:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	0760      	lsls	r0, r4, #29
 800d33e:	461a      	mov	r2, r3
 800d340:	d5ec      	bpl.n	800d31c <rcl_validate_topic_name+0xc8>
 800d342:	2304      	movs	r3, #4
 800d344:	6033      	str	r3, [r6, #0]
 800d346:	2f00      	cmp	r7, #0
 800d348:	d0d2      	beq.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d34a:	603a      	str	r2, [r7, #0]
 800d34c:	2000      	movs	r0, #0
 800d34e:	e7ab      	b.n	800d2a8 <rcl_validate_topic_name+0x54>
 800d350:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800d354:	0752      	lsls	r2, r2, #29
 800d356:	d5d2      	bpl.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d358:	2c00      	cmp	r4, #0
 800d35a:	d0d0      	beq.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d35c:	2900      	cmp	r1, #0
 800d35e:	d0ce      	beq.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d360:	1e4a      	subs	r2, r1, #1
 800d362:	429a      	cmp	r2, r3
 800d364:	d1cb      	bne.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d366:	2309      	movs	r3, #9
 800d368:	6033      	str	r3, [r6, #0]
 800d36a:	2f00      	cmp	r7, #0
 800d36c:	d1bf      	bne.n	800d2ee <rcl_validate_topic_name+0x9a>
 800d36e:	e7bf      	b.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d370:	200b      	movs	r0, #11
 800d372:	4770      	bx	lr
 800d374:	2304      	movs	r3, #4
 800d376:	6033      	str	r3, [r6, #0]
 800d378:	2f00      	cmp	r7, #0
 800d37a:	d193      	bne.n	800d2a4 <rcl_validate_topic_name+0x50>
 800d37c:	e7b8      	b.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d37e:	200b      	movs	r0, #11
 800d380:	e792      	b.n	800d2a8 <rcl_validate_topic_name+0x54>
 800d382:	2900      	cmp	r1, #0
 800d384:	d0bb      	beq.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d386:	2306      	movs	r3, #6
 800d388:	6033      	str	r3, [r6, #0]
 800d38a:	2f00      	cmp	r7, #0
 800d38c:	d1af      	bne.n	800d2ee <rcl_validate_topic_name+0x9a>
 800d38e:	e7af      	b.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d390:	2c00      	cmp	r4, #0
 800d392:	d0b4      	beq.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d394:	2308      	movs	r3, #8
 800d396:	6033      	str	r3, [r6, #0]
 800d398:	2f00      	cmp	r7, #0
 800d39a:	d1a8      	bne.n	800d2ee <rcl_validate_topic_name+0x9a>
 800d39c:	e7a8      	b.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d39e:	4672      	mov	r2, lr
 800d3a0:	f108 0301 	add.w	r3, r8, #1
 800d3a4:	e7ba      	b.n	800d31c <rcl_validate_topic_name+0xc8>
 800d3a6:	2400      	movs	r4, #0
 800d3a8:	e7a9      	b.n	800d2fe <rcl_validate_topic_name+0xaa>
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	e7b5      	b.n	800d31c <rcl_validate_topic_name+0xc8>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	6030      	str	r0, [r6, #0]
 800d3b4:	e778      	b.n	800d2a8 <rcl_validate_topic_name+0x54>
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	6032      	str	r2, [r6, #0]
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	d098      	beq.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e771      	b.n	800d2a8 <rcl_validate_topic_name+0x54>
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	bf14      	ite	ne
 800d3c8:	2308      	movne	r3, #8
 800d3ca:	2303      	moveq	r3, #3
 800d3cc:	6033      	str	r3, [r6, #0]
 800d3ce:	2f00      	cmp	r7, #0
 800d3d0:	d18d      	bne.n	800d2ee <rcl_validate_topic_name+0x9a>
 800d3d2:	e78d      	b.n	800d2f0 <rcl_validate_topic_name+0x9c>
 800d3d4:	f108 0401 	add.w	r4, r8, #1
 800d3d8:	e007      	b.n	800d3ea <rcl_validate_topic_name+0x196>
 800d3da:	2801      	cmp	r0, #1
 800d3dc:	d019      	beq.n	800d412 <rcl_validate_topic_name+0x1be>
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4291      	cmp	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f105 0501 	add.w	r5, r5, #1
 800d3e8:	d9e2      	bls.n	800d3b0 <rcl_validate_topic_name+0x15c>
 800d3ea:	4580      	cmp	r8, r0
 800d3ec:	f100 0301 	add.w	r3, r0, #1
 800d3f0:	d00b      	beq.n	800d40a <rcl_validate_topic_name+0x1b6>
 800d3f2:	782a      	ldrb	r2, [r5, #0]
 800d3f4:	2a2f      	cmp	r2, #47	@ 0x2f
 800d3f6:	d1f0      	bne.n	800d3da <rcl_validate_topic_name+0x186>
 800d3f8:	786b      	ldrb	r3, [r5, #1]
 800d3fa:	f81c e003 	ldrb.w	lr, [ip, r3]
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	f01e 0f04 	tst.w	lr, #4
 800d404:	461a      	mov	r2, r3
 800d406:	d0eb      	beq.n	800d3e0 <rcl_validate_topic_name+0x18c>
 800d408:	e79b      	b.n	800d342 <rcl_validate_topic_name+0xee>
 800d40a:	4622      	mov	r2, r4
 800d40c:	f108 0301 	add.w	r3, r8, #1
 800d410:	e7e6      	b.n	800d3e0 <rcl_validate_topic_name+0x18c>
 800d412:	2307      	movs	r3, #7
 800d414:	6033      	str	r3, [r6, #0]
 800d416:	2f00      	cmp	r7, #0
 800d418:	f43f af6a 	beq.w	800d2f0 <rcl_validate_topic_name+0x9c>
 800d41c:	6038      	str	r0, [r7, #0]
 800d41e:	2000      	movs	r0, #0
 800d420:	e742      	b.n	800d2a8 <rcl_validate_topic_name+0x54>
 800d422:	bf00      	nop
 800d424:	08016dc0 	.word	0x08016dc0

0800d428 <rcl_get_zero_initialized_wait_set>:
 800d428:	b470      	push	{r4, r5, r6}
 800d42a:	4d07      	ldr	r5, [pc, #28]	@ (800d448 <rcl_get_zero_initialized_wait_set+0x20>)
 800d42c:	4606      	mov	r6, r0
 800d42e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d430:	4634      	mov	r4, r6
 800d432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d43a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	6023      	str	r3, [r4, #0]
 800d440:	4630      	mov	r0, r6
 800d442:	bc70      	pop	{r4, r5, r6}
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	08016778 	.word	0x08016778

0800d44c <rcl_wait_set_is_valid>:
 800d44c:	b118      	cbz	r0, 800d456 <rcl_wait_set_is_valid+0xa>
 800d44e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800d450:	3800      	subs	r0, #0
 800d452:	bf18      	it	ne
 800d454:	2001      	movne	r0, #1
 800d456:	4770      	bx	lr

0800d458 <rcl_wait_set_fini>:
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	b082      	sub	sp, #8
 800d45e:	2800      	cmp	r0, #0
 800d460:	f000 8095 	beq.w	800d58e <rcl_wait_set_fini+0x136>
 800d464:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800d466:	4604      	mov	r4, r0
 800d468:	2e00      	cmp	r6, #0
 800d46a:	f000 808c 	beq.w	800d586 <rcl_wait_set_fini+0x12e>
 800d46e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800d470:	f002 fb16 	bl	800faa0 <rmw_destroy_wait_set>
 800d474:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d476:	1e06      	subs	r6, r0, #0
 800d478:	bf18      	it	ne
 800d47a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800d47e:	2d00      	cmp	r5, #0
 800d480:	f000 8081 	beq.w	800d586 <rcl_wait_set_fini+0x12e>
 800d484:	6820      	ldr	r0, [r4, #0]
 800d486:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800d48a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d48c:	2700      	movs	r7, #0
 800d48e:	6067      	str	r7, [r4, #4]
 800d490:	602f      	str	r7, [r5, #0]
 800d492:	b120      	cbz	r0, 800d49e <rcl_wait_set_fini+0x46>
 800d494:	9101      	str	r1, [sp, #4]
 800d496:	47c0      	blx	r8
 800d498:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d49a:	9901      	ldr	r1, [sp, #4]
 800d49c:	6027      	str	r7, [r4, #0]
 800d49e:	68a8      	ldr	r0, [r5, #8]
 800d4a0:	b120      	cbz	r0, 800d4ac <rcl_wait_set_fini+0x54>
 800d4a2:	47c0      	blx	r8
 800d4a4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800d4ac:	68a0      	ldr	r0, [r4, #8]
 800d4ae:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800d4b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d4b2:	f04f 0800 	mov.w	r8, #0
 800d4b6:	f8c4 800c 	str.w	r8, [r4, #12]
 800d4ba:	f8c5 800c 	str.w	r8, [r5, #12]
 800d4be:	b128      	cbz	r0, 800d4cc <rcl_wait_set_fini+0x74>
 800d4c0:	47b8      	blx	r7
 800d4c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d4c4:	f8c4 8008 	str.w	r8, [r4, #8]
 800d4c8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800d4ca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d4cc:	6968      	ldr	r0, [r5, #20]
 800d4ce:	f04f 0800 	mov.w	r8, #0
 800d4d2:	f8c5 8010 	str.w	r8, [r5, #16]
 800d4d6:	b128      	cbz	r0, 800d4e4 <rcl_wait_set_fini+0x8c>
 800d4d8:	47b8      	blx	r7
 800d4da:	f8c5 8014 	str.w	r8, [r5, #20]
 800d4de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d4e0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800d4e2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d4e4:	6920      	ldr	r0, [r4, #16]
 800d4e6:	f04f 0800 	mov.w	r8, #0
 800d4ea:	f8c4 8014 	str.w	r8, [r4, #20]
 800d4ee:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800d4f2:	b128      	cbz	r0, 800d500 <rcl_wait_set_fini+0xa8>
 800d4f4:	47b8      	blx	r7
 800d4f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d4f8:	f8c4 8010 	str.w	r8, [r4, #16]
 800d4fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800d4fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d500:	69a0      	ldr	r0, [r4, #24]
 800d502:	f04f 0800 	mov.w	r8, #0
 800d506:	f8c4 801c 	str.w	r8, [r4, #28]
 800d50a:	f8c5 8018 	str.w	r8, [r5, #24]
 800d50e:	b128      	cbz	r0, 800d51c <rcl_wait_set_fini+0xc4>
 800d510:	9101      	str	r1, [sp, #4]
 800d512:	47b8      	blx	r7
 800d514:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d516:	9901      	ldr	r1, [sp, #4]
 800d518:	f8c4 8018 	str.w	r8, [r4, #24]
 800d51c:	6a28      	ldr	r0, [r5, #32]
 800d51e:	b120      	cbz	r0, 800d52a <rcl_wait_set_fini+0xd2>
 800d520:	47b8      	blx	r7
 800d522:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d524:	2300      	movs	r3, #0
 800d526:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800d52a:	6a20      	ldr	r0, [r4, #32]
 800d52c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800d530:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d532:	2700      	movs	r7, #0
 800d534:	6267      	str	r7, [r4, #36]	@ 0x24
 800d536:	626f      	str	r7, [r5, #36]	@ 0x24
 800d538:	b120      	cbz	r0, 800d544 <rcl_wait_set_fini+0xec>
 800d53a:	9101      	str	r1, [sp, #4]
 800d53c:	47c0      	blx	r8
 800d53e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d540:	9901      	ldr	r1, [sp, #4]
 800d542:	6227      	str	r7, [r4, #32]
 800d544:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800d546:	b120      	cbz	r0, 800d552 <rcl_wait_set_fini+0xfa>
 800d548:	47c0      	blx	r8
 800d54a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d54c:	2300      	movs	r3, #0
 800d54e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800d552:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d554:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800d558:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d55a:	2700      	movs	r7, #0
 800d55c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800d55e:	632f      	str	r7, [r5, #48]	@ 0x30
 800d560:	b120      	cbz	r0, 800d56c <rcl_wait_set_fini+0x114>
 800d562:	9101      	str	r1, [sp, #4]
 800d564:	47c0      	blx	r8
 800d566:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d568:	9901      	ldr	r1, [sp, #4]
 800d56a:	62a7      	str	r7, [r4, #40]	@ 0x28
 800d56c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800d56e:	b120      	cbz	r0, 800d57a <rcl_wait_set_fini+0x122>
 800d570:	47c0      	blx	r8
 800d572:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d574:	2300      	movs	r3, #0
 800d576:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800d57a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d57c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800d57e:	4628      	mov	r0, r5
 800d580:	4798      	blx	r3
 800d582:	2300      	movs	r3, #0
 800d584:	6323      	str	r3, [r4, #48]	@ 0x30
 800d586:	4630      	mov	r0, r6
 800d588:	b002      	add	sp, #8
 800d58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58e:	260b      	movs	r6, #11
 800d590:	4630      	mov	r0, r6
 800d592:	b002      	add	sp, #8
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d598 <rcl_wait_set_add_subscription>:
 800d598:	b320      	cbz	r0, 800d5e4 <rcl_wait_set_add_subscription+0x4c>
 800d59a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	4604      	mov	r4, r0
 800d5a0:	b1d3      	cbz	r3, 800d5d8 <rcl_wait_set_add_subscription+0x40>
 800d5a2:	b319      	cbz	r1, 800d5ec <rcl_wait_set_add_subscription+0x54>
 800d5a4:	681d      	ldr	r5, [r3, #0]
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	4285      	cmp	r5, r0
 800d5aa:	d218      	bcs.n	800d5de <rcl_wait_set_add_subscription+0x46>
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	1c6e      	adds	r6, r5, #1
 800d5b0:	601e      	str	r6, [r3, #0]
 800d5b2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d5b6:	b102      	cbz	r2, 800d5ba <rcl_wait_set_add_subscription+0x22>
 800d5b8:	6015      	str	r5, [r2, #0]
 800d5ba:	4608      	mov	r0, r1
 800d5bc:	f7ff fc30 	bl	800ce20 <rcl_subscription_get_rmw_handle>
 800d5c0:	b190      	cbz	r0, 800d5e8 <rcl_wait_set_add_subscription+0x50>
 800d5c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d5c4:	6842      	ldr	r2, [r0, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d5ce:	6853      	ldr	r3, [r2, #4]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	6053      	str	r3, [r2, #4]
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d5dc:	bd70      	pop	{r4, r5, r6, pc}
 800d5de:	f240 3086 	movw	r0, #902	@ 0x386
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	200b      	movs	r0, #11
 800d5e6:	4770      	bx	lr
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	200b      	movs	r0, #11
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <rcl_wait_set_clear>:
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d073      	beq.n	800d6dc <rcl_wait_set_clear+0xec>
 800d5f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d070      	beq.n	800d6e0 <rcl_wait_set_clear+0xf0>
 800d5fe:	6800      	ldr	r0, [r0, #0]
 800d600:	b138      	cbz	r0, 800d612 <rcl_wait_set_clear+0x22>
 800d602:	6862      	ldr	r2, [r4, #4]
 800d604:	2100      	movs	r1, #0
 800d606:	0092      	lsls	r2, r2, #2
 800d608:	f007 fcd2 	bl	8014fb0 <memset>
 800d60c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d60e:	2200      	movs	r2, #0
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	68a0      	ldr	r0, [r4, #8]
 800d614:	b138      	cbz	r0, 800d626 <rcl_wait_set_clear+0x36>
 800d616:	68e2      	ldr	r2, [r4, #12]
 800d618:	2100      	movs	r1, #0
 800d61a:	0092      	lsls	r2, r2, #2
 800d61c:	f007 fcc8 	bl	8014fb0 <memset>
 800d620:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d622:	2200      	movs	r2, #0
 800d624:	60da      	str	r2, [r3, #12]
 800d626:	69a0      	ldr	r0, [r4, #24]
 800d628:	b138      	cbz	r0, 800d63a <rcl_wait_set_clear+0x4a>
 800d62a:	69e2      	ldr	r2, [r4, #28]
 800d62c:	2100      	movs	r1, #0
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	f007 fcbe 	bl	8014fb0 <memset>
 800d634:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d636:	2200      	movs	r2, #0
 800d638:	619a      	str	r2, [r3, #24]
 800d63a:	6a20      	ldr	r0, [r4, #32]
 800d63c:	b138      	cbz	r0, 800d64e <rcl_wait_set_clear+0x5e>
 800d63e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d640:	2100      	movs	r1, #0
 800d642:	0092      	lsls	r2, r2, #2
 800d644:	f007 fcb4 	bl	8014fb0 <memset>
 800d648:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d64a:	2200      	movs	r2, #0
 800d64c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d64e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d650:	b138      	cbz	r0, 800d662 <rcl_wait_set_clear+0x72>
 800d652:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d654:	2100      	movs	r1, #0
 800d656:	0092      	lsls	r2, r2, #2
 800d658:	f007 fcaa 	bl	8014fb0 <memset>
 800d65c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d65e:	2200      	movs	r2, #0
 800d660:	631a      	str	r2, [r3, #48]	@ 0x30
 800d662:	6920      	ldr	r0, [r4, #16]
 800d664:	b138      	cbz	r0, 800d676 <rcl_wait_set_clear+0x86>
 800d666:	6962      	ldr	r2, [r4, #20]
 800d668:	2100      	movs	r1, #0
 800d66a:	0092      	lsls	r2, r2, #2
 800d66c:	f007 fca0 	bl	8014fb0 <memset>
 800d670:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d672:	2200      	movs	r2, #0
 800d674:	641a      	str	r2, [r3, #64]	@ 0x40
 800d676:	6898      	ldr	r0, [r3, #8]
 800d678:	b138      	cbz	r0, 800d68a <rcl_wait_set_clear+0x9a>
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	2100      	movs	r1, #0
 800d67e:	0092      	lsls	r2, r2, #2
 800d680:	f007 fc96 	bl	8014fb0 <memset>
 800d684:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d686:	2200      	movs	r2, #0
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	6958      	ldr	r0, [r3, #20]
 800d68c:	b138      	cbz	r0, 800d69e <rcl_wait_set_clear+0xae>
 800d68e:	691a      	ldr	r2, [r3, #16]
 800d690:	2100      	movs	r1, #0
 800d692:	0092      	lsls	r2, r2, #2
 800d694:	f007 fc8c 	bl	8014fb0 <memset>
 800d698:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d69a:	2200      	movs	r2, #0
 800d69c:	611a      	str	r2, [r3, #16]
 800d69e:	6a18      	ldr	r0, [r3, #32]
 800d6a0:	b138      	cbz	r0, 800d6b2 <rcl_wait_set_clear+0xc2>
 800d6a2:	69da      	ldr	r2, [r3, #28]
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	0092      	lsls	r2, r2, #2
 800d6a8:	f007 fc82 	bl	8014fb0 <memset>
 800d6ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	61da      	str	r2, [r3, #28]
 800d6b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d6b4:	b138      	cbz	r0, 800d6c6 <rcl_wait_set_clear+0xd6>
 800d6b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	0092      	lsls	r2, r2, #2
 800d6bc:	f007 fc78 	bl	8014fb0 <memset>
 800d6c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d6c8:	b138      	cbz	r0, 800d6da <rcl_wait_set_clear+0xea>
 800d6ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	0092      	lsls	r2, r2, #2
 800d6d0:	f007 fc6e 	bl	8014fb0 <memset>
 800d6d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	6358      	str	r0, [r3, #52]	@ 0x34
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	200b      	movs	r0, #11
 800d6de:	4770      	bx	lr
 800d6e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d6e4:	bd10      	pop	{r4, pc}
 800d6e6:	bf00      	nop

0800d6e8 <rcl_wait_set_resize>:
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	f000 81a6 	beq.w	800da3a <rcl_wait_set_resize+0x352>
 800d6ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	f1ba 0f00 	cmp.w	sl, #0
 800d6fe:	f000 819e 	beq.w	800da3e <rcl_wait_set_resize+0x356>
 800d702:	461e      	mov	r6, r3
 800d704:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 800d708:	f04f 0800 	mov.w	r8, #0
 800d70c:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	f8c0 8004 	str.w	r8, [r0, #4]
 800d716:	460f      	mov	r7, r1
 800d718:	4615      	mov	r5, r2
 800d71a:	f8ca 8000 	str.w	r8, [sl]
 800d71e:	2900      	cmp	r1, #0
 800d720:	f000 80c9 	beq.w	800d8b6 <rcl_wait_set_resize+0x1ce>
 800d724:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800d728:	6800      	ldr	r0, [r0, #0]
 800d72a:	4651      	mov	r1, sl
 800d72c:	464a      	mov	r2, r9
 800d72e:	4798      	blx	r3
 800d730:	6020      	str	r0, [r4, #0]
 800d732:	2800      	cmp	r0, #0
 800d734:	f000 80d8 	beq.w	800d8e8 <rcl_wait_set_resize+0x200>
 800d738:	4652      	mov	r2, sl
 800d73a:	4641      	mov	r1, r8
 800d73c:	f007 fc38 	bl	8014fb0 <memset>
 800d740:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d742:	6067      	str	r7, [r4, #4]
 800d744:	6898      	ldr	r0, [r3, #8]
 800d746:	f8c3 8004 	str.w	r8, [r3, #4]
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	464a      	mov	r2, r9
 800d74e:	9b00      	ldr	r3, [sp, #0]
 800d750:	4651      	mov	r1, sl
 800d752:	4798      	blx	r3
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d758:	6098      	str	r0, [r3, #8]
 800d75a:	6897      	ldr	r7, [r2, #8]
 800d75c:	2f00      	cmp	r7, #0
 800d75e:	f000 80be 	beq.w	800d8de <rcl_wait_set_resize+0x1f6>
 800d762:	4652      	mov	r2, sl
 800d764:	4641      	mov	r1, r8
 800d766:	4638      	mov	r0, r7
 800d768:	f007 fc22 	bl	8014fb0 <memset>
 800d76c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d770:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d774:	2700      	movs	r7, #0
 800d776:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 800d77a:	60e7      	str	r7, [r4, #12]
 800d77c:	f8ca 700c 	str.w	r7, [sl, #12]
 800d780:	2d00      	cmp	r5, #0
 800d782:	f040 80b5 	bne.w	800d8f0 <rcl_wait_set_resize+0x208>
 800d786:	68a0      	ldr	r0, [r4, #8]
 800d788:	b130      	cbz	r0, 800d798 <rcl_wait_set_resize+0xb0>
 800d78a:	4641      	mov	r1, r8
 800d78c:	4790      	blx	r2
 800d78e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d792:	60a5      	str	r5, [r4, #8]
 800d794:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d798:	2700      	movs	r7, #0
 800d79a:	19ad      	adds	r5, r5, r6
 800d79c:	f8ca 7010 	str.w	r7, [sl, #16]
 800d7a0:	f040 80be 	bne.w	800d920 <rcl_wait_set_resize+0x238>
 800d7a4:	f8da 0014 	ldr.w	r0, [sl, #20]
 800d7a8:	b148      	cbz	r0, 800d7be <rcl_wait_set_resize+0xd6>
 800d7aa:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 800d7ae:	4641      	mov	r1, r8
 800d7b0:	4798      	blx	r3
 800d7b2:	f8ca 5014 	str.w	r5, [sl, #20]
 800d7b6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d7ba:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d7be:	2500      	movs	r5, #0
 800d7c0:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800d7c4:	6165      	str	r5, [r4, #20]
 800d7c6:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	f040 80bf 	bne.w	800d94e <rcl_wait_set_resize+0x266>
 800d7d0:	6920      	ldr	r0, [r4, #16]
 800d7d2:	b140      	cbz	r0, 800d7e6 <rcl_wait_set_resize+0xfe>
 800d7d4:	4641      	mov	r1, r8
 800d7d6:	47c8      	blx	r9
 800d7d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d7dc:	6126      	str	r6, [r4, #16]
 800d7de:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800d7e2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d7e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7e8:	2500      	movs	r5, #0
 800d7ea:	61e5      	str	r5, [r4, #28]
 800d7ec:	f8ca 5018 	str.w	r5, [sl, #24]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 80c1 	bne.w	800d978 <rcl_wait_set_resize+0x290>
 800d7f6:	69a0      	ldr	r0, [r4, #24]
 800d7f8:	b128      	cbz	r0, 800d806 <rcl_wait_set_resize+0x11e>
 800d7fa:	4641      	mov	r1, r8
 800d7fc:	47c8      	blx	r9
 800d7fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d800:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d804:	61a3      	str	r3, [r4, #24]
 800d806:	f8da 0020 	ldr.w	r0, [sl, #32]
 800d80a:	b130      	cbz	r0, 800d81a <rcl_wait_set_resize+0x132>
 800d80c:	4641      	mov	r1, r8
 800d80e:	47c8      	blx	r9
 800d810:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d814:	2300      	movs	r3, #0
 800d816:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800d81a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d81c:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 800d820:	2600      	movs	r6, #0
 800d822:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 800d826:	6266      	str	r6, [r4, #36]	@ 0x24
 800d828:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 80c8 	beq.w	800d9c2 <rcl_wait_set_resize+0x2da>
 800d832:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d836:	6a20      	ldr	r0, [r4, #32]
 800d838:	4651      	mov	r1, sl
 800d83a:	463a      	mov	r2, r7
 800d83c:	47c8      	blx	r9
 800d83e:	6220      	str	r0, [r4, #32]
 800d840:	2800      	cmp	r0, #0
 800d842:	d051      	beq.n	800d8e8 <rcl_wait_set_resize+0x200>
 800d844:	4652      	mov	r2, sl
 800d846:	4631      	mov	r1, r6
 800d848:	f007 fbb2 	bl	8014fb0 <memset>
 800d84c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d850:	6263      	str	r3, [r4, #36]	@ 0x24
 800d852:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800d854:	62ae      	str	r6, [r5, #40]	@ 0x28
 800d856:	463a      	mov	r2, r7
 800d858:	4651      	mov	r1, sl
 800d85a:	47c8      	blx	r9
 800d85c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d85e:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800d860:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800d862:	2d00      	cmp	r5, #0
 800d864:	f000 8105 	beq.w	800da72 <rcl_wait_set_resize+0x38a>
 800d868:	4652      	mov	r2, sl
 800d86a:	4631      	mov	r1, r6
 800d86c:	4628      	mov	r0, r5
 800d86e:	f007 fb9f 	bl	8014fb0 <memset>
 800d872:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d878:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 800d87c:	2500      	movs	r5, #0
 800d87e:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 800d882:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800d884:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f040 80af 	bne.w	800d9ec <rcl_wait_set_resize+0x304>
 800d88e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d890:	b128      	cbz	r0, 800d89e <rcl_wait_set_resize+0x1b6>
 800d892:	4631      	mov	r1, r6
 800d894:	47b8      	blx	r7
 800d896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d898:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d89c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d89e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800d8a2:	b310      	cbz	r0, 800d8ea <rcl_wait_set_resize+0x202>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	47b8      	blx	r7
 800d8a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800d8b0:	b003      	add	sp, #12
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	6800      	ldr	r0, [r0, #0]
 800d8b8:	b120      	cbz	r0, 800d8c4 <rcl_wait_set_resize+0x1dc>
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	47d8      	blx	fp
 800d8be:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d8c2:	6027      	str	r7, [r4, #0]
 800d8c4:	f8da 0008 	ldr.w	r0, [sl, #8]
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f43f af51 	beq.w	800d770 <rcl_wait_set_resize+0x88>
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	47d8      	blx	fp
 800d8d2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800d8dc:	e748      	b.n	800d770 <rcl_wait_set_resize+0x88>
 800d8de:	6820      	ldr	r0, [r4, #0]
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	47d8      	blx	fp
 800d8e4:	e9c4 7700 	strd	r7, r7, [r4]
 800d8e8:	200a      	movs	r0, #10
 800d8ea:	b003      	add	sp, #12
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f0:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800d8f4:	68a0      	ldr	r0, [r4, #8]
 800d8f6:	4642      	mov	r2, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	4798      	blx	r3
 800d8fc:	60a0      	str	r0, [r4, #8]
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d0f2      	beq.n	800d8e8 <rcl_wait_set_resize+0x200>
 800d902:	4639      	mov	r1, r7
 800d904:	464a      	mov	r2, r9
 800d906:	f007 fb53 	bl	8014fb0 <memset>
 800d90a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d90e:	60e5      	str	r5, [r4, #12]
 800d910:	2700      	movs	r7, #0
 800d912:	19ad      	adds	r5, r5, r6
 800d914:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d918:	f8ca 7010 	str.w	r7, [sl, #16]
 800d91c:	f43f af42 	beq.w	800d7a4 <rcl_wait_set_resize+0xbc>
 800d920:	00ad      	lsls	r5, r5, #2
 800d922:	4642      	mov	r2, r8
 800d924:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 800d928:	f8da 0014 	ldr.w	r0, [sl, #20]
 800d92c:	4629      	mov	r1, r5
 800d92e:	4798      	blx	r3
 800d930:	4680      	mov	r8, r0
 800d932:	f8ca 0014 	str.w	r0, [sl, #20]
 800d936:	2800      	cmp	r0, #0
 800d938:	f000 8084 	beq.w	800da44 <rcl_wait_set_resize+0x35c>
 800d93c:	462a      	mov	r2, r5
 800d93e:	4639      	mov	r1, r7
 800d940:	f007 fb36 	bl	8014fb0 <memset>
 800d944:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d948:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d94c:	e737      	b.n	800d7be <rcl_wait_set_resize+0xd6>
 800d94e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800d952:	6920      	ldr	r0, [r4, #16]
 800d954:	4642      	mov	r2, r8
 800d956:	4649      	mov	r1, r9
 800d958:	47b8      	blx	r7
 800d95a:	6120      	str	r0, [r4, #16]
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d0c3      	beq.n	800d8e8 <rcl_wait_set_resize+0x200>
 800d960:	464a      	mov	r2, r9
 800d962:	4629      	mov	r1, r5
 800d964:	f007 fb24 	bl	8014fb0 <memset>
 800d968:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d96c:	6166      	str	r6, [r4, #20]
 800d96e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800d972:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800d976:	e736      	b.n	800d7e6 <rcl_wait_set_resize+0xfe>
 800d978:	009e      	lsls	r6, r3, #2
 800d97a:	69a0      	ldr	r0, [r4, #24]
 800d97c:	4631      	mov	r1, r6
 800d97e:	4642      	mov	r2, r8
 800d980:	47b8      	blx	r7
 800d982:	61a0      	str	r0, [r4, #24]
 800d984:	2800      	cmp	r0, #0
 800d986:	d0af      	beq.n	800d8e8 <rcl_wait_set_resize+0x200>
 800d988:	4632      	mov	r2, r6
 800d98a:	4629      	mov	r1, r5
 800d98c:	f007 fb10 	bl	8014fb0 <memset>
 800d990:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d996:	61e3      	str	r3, [r4, #28]
 800d998:	f8da 0020 	ldr.w	r0, [sl, #32]
 800d99c:	f8ca 501c 	str.w	r5, [sl, #28]
 800d9a0:	4642      	mov	r2, r8
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	47b8      	blx	r7
 800d9a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d9a8:	f8ca 0020 	str.w	r0, [sl, #32]
 800d9ac:	6a1f      	ldr	r7, [r3, #32]
 800d9ae:	2f00      	cmp	r7, #0
 800d9b0:	d058      	beq.n	800da64 <rcl_wait_set_resize+0x37c>
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f007 fafa 	bl	8014fb0 <memset>
 800d9bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d9c0:	e72b      	b.n	800d81a <rcl_wait_set_resize+0x132>
 800d9c2:	6a20      	ldr	r0, [r4, #32]
 800d9c4:	b128      	cbz	r0, 800d9d2 <rcl_wait_set_resize+0x2ea>
 800d9c6:	4639      	mov	r1, r7
 800d9c8:	47c0      	blx	r8
 800d9ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9cc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d9d0:	6223      	str	r3, [r4, #32]
 800d9d2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f43f af4d 	beq.w	800d876 <rcl_wait_set_resize+0x18e>
 800d9dc:	4639      	mov	r1, r7
 800d9de:	47c0      	blx	r8
 800d9e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 800d9ea:	e744      	b.n	800d876 <rcl_wait_set_resize+0x18e>
 800d9ec:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800d9f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d9f2:	4641      	mov	r1, r8
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	47c8      	blx	r9
 800d9f8:	62a0      	str	r0, [r4, #40]	@ 0x28
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	f43f af74 	beq.w	800d8e8 <rcl_wait_set_resize+0x200>
 800da00:	4642      	mov	r2, r8
 800da02:	4629      	mov	r1, r5
 800da04:	f007 fad4 	bl	8014fb0 <memset>
 800da08:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800da0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da10:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800da14:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 800da18:	4632      	mov	r2, r6
 800da1a:	4641      	mov	r1, r8
 800da1c:	47c8      	blx	r9
 800da1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800da20:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800da24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da26:	b35b      	cbz	r3, 800da80 <rcl_wait_set_resize+0x398>
 800da28:	4642      	mov	r2, r8
 800da2a:	4618      	mov	r0, r3
 800da2c:	4629      	mov	r1, r5
 800da2e:	f007 fabf 	bl	8014fb0 <memset>
 800da32:	4628      	mov	r0, r5
 800da34:	b003      	add	sp, #12
 800da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3a:	200b      	movs	r0, #11
 800da3c:	4770      	bx	lr
 800da3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800da42:	e752      	b.n	800d8ea <rcl_wait_set_resize+0x202>
 800da44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800da46:	68a0      	ldr	r0, [r4, #8]
 800da48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da4a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800da4c:	4790      	blx	r2
 800da4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800da50:	6920      	ldr	r0, [r4, #16]
 800da52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da54:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800da56:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800da5a:	4790      	blx	r2
 800da5c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800da60:	200a      	movs	r0, #10
 800da62:	e742      	b.n	800d8ea <rcl_wait_set_resize+0x202>
 800da64:	69a0      	ldr	r0, [r4, #24]
 800da66:	4641      	mov	r1, r8
 800da68:	47c8      	blx	r9
 800da6a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800da6e:	200a      	movs	r0, #10
 800da70:	e73b      	b.n	800d8ea <rcl_wait_set_resize+0x202>
 800da72:	6a20      	ldr	r0, [r4, #32]
 800da74:	4639      	mov	r1, r7
 800da76:	47c0      	blx	r8
 800da78:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800da7c:	200a      	movs	r0, #10
 800da7e:	e734      	b.n	800d8ea <rcl_wait_set_resize+0x202>
 800da80:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	4631      	mov	r1, r6
 800da86:	47b8      	blx	r7
 800da88:	9b00      	ldr	r3, [sp, #0]
 800da8a:	200a      	movs	r0, #10
 800da8c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800da90:	e72b      	b.n	800d8ea <rcl_wait_set_resize+0x202>
 800da92:	bf00      	nop

0800da94 <rcl_wait_set_init>:
 800da94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	4604      	mov	r4, r0
 800da9c:	a810      	add	r0, sp, #64	@ 0x40
 800da9e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800daa2:	460f      	mov	r7, r1
 800daa4:	4690      	mov	r8, r2
 800daa6:	4699      	mov	r9, r3
 800daa8:	f7fc fd0a 	bl	800a4c0 <rcutils_allocator_is_valid>
 800daac:	2800      	cmp	r0, #0
 800daae:	d06b      	beq.n	800db88 <rcl_wait_set_init+0xf4>
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	d069      	beq.n	800db88 <rcl_wait_set_init+0xf4>
 800dab4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800dab6:	b125      	cbz	r5, 800dac2 <rcl_wait_set_init+0x2e>
 800dab8:	2564      	movs	r5, #100	@ 0x64
 800daba:	4628      	mov	r0, r5
 800dabc:	b004      	add	sp, #16
 800dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac2:	f1ba 0f00 	cmp.w	sl, #0
 800dac6:	d05f      	beq.n	800db88 <rcl_wait_set_init+0xf4>
 800dac8:	4650      	mov	r0, sl
 800daca:	f7fe f8f1 	bl	800bcb0 <rcl_context_is_valid>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d067      	beq.n	800dba2 <rcl_wait_set_init+0x10e>
 800dad2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dad4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800dad6:	205c      	movs	r0, #92	@ 0x5c
 800dad8:	4798      	blx	r3
 800dada:	6320      	str	r0, [r4, #48]	@ 0x30
 800dadc:	2800      	cmp	r0, #0
 800dade:	d062      	beq.n	800dba6 <rcl_wait_set_init+0x112>
 800dae0:	225c      	movs	r2, #92	@ 0x5c
 800dae2:	4629      	mov	r1, r5
 800dae4:	f007 fa64 	bl	8014fb0 <memset>
 800dae8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800daec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800daf0:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800daf2:	f8dc e000 	ldr.w	lr, [ip]
 800daf6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800dafa:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 800dafe:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800db02:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800db06:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800db0a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800db0e:	60b5      	str	r5, [r6, #8]
 800db10:	6075      	str	r5, [r6, #4]
 800db12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db16:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800db1a:	1899      	adds	r1, r3, r2
 800db1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db1e:	f8da 0000 	ldr.w	r0, [sl]
 800db22:	f8cc e000 	str.w	lr, [ip]
 800db26:	4419      	add	r1, r3
 800db28:	4441      	add	r1, r8
 800db2a:	3028      	adds	r0, #40	@ 0x28
 800db2c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800db30:	f001 ffac 	bl	800fa8c <rmw_create_wait_set>
 800db34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db36:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800db38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800db3a:	b350      	cbz	r0, 800db92 <rcl_wait_set_init+0xfe>
 800db3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db3e:	9302      	str	r3, [sp, #8]
 800db40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	4642      	mov	r2, r8
 800db4a:	464b      	mov	r3, r9
 800db4c:	4639      	mov	r1, r7
 800db4e:	4620      	mov	r0, r4
 800db50:	f7ff fdca 	bl	800d6e8 <rcl_wait_set_resize>
 800db54:	4605      	mov	r5, r0
 800db56:	2800      	cmp	r0, #0
 800db58:	d0af      	beq.n	800daba <rcl_wait_set_init+0x26>
 800db5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db5c:	bb2b      	cbnz	r3, 800dbaa <rcl_wait_set_init+0x116>
 800db5e:	2600      	movs	r6, #0
 800db60:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800db64:	9600      	str	r6, [sp, #0]
 800db66:	4633      	mov	r3, r6
 800db68:	4632      	mov	r2, r6
 800db6a:	4631      	mov	r1, r6
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff fdbb 	bl	800d6e8 <rcl_wait_set_resize>
 800db72:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800db74:	2800      	cmp	r0, #0
 800db76:	d0a0      	beq.n	800daba <rcl_wait_set_init+0x26>
 800db78:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800db7a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800db7c:	4798      	blx	r3
 800db7e:	4628      	mov	r0, r5
 800db80:	6326      	str	r6, [r4, #48]	@ 0x30
 800db82:	b004      	add	sp, #16
 800db84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db88:	250b      	movs	r5, #11
 800db8a:	4628      	mov	r0, r5
 800db8c:	b004      	add	sp, #16
 800db8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db92:	2501      	movs	r5, #1
 800db94:	f001 ff84 	bl	800faa0 <rmw_destroy_wait_set>
 800db98:	2800      	cmp	r0, #0
 800db9a:	bf18      	it	ne
 800db9c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800dba0:	e7dd      	b.n	800db5e <rcl_wait_set_init+0xca>
 800dba2:	2565      	movs	r5, #101	@ 0x65
 800dba4:	e789      	b.n	800daba <rcl_wait_set_init+0x26>
 800dba6:	250a      	movs	r5, #10
 800dba8:	e787      	b.n	800daba <rcl_wait_set_init+0x26>
 800dbaa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800dbac:	e7f2      	b.n	800db94 <rcl_wait_set_init+0x100>
 800dbae:	bf00      	nop

0800dbb0 <rcl_wait_set_add_guard_condition>:
 800dbb0:	b320      	cbz	r0, 800dbfc <rcl_wait_set_add_guard_condition+0x4c>
 800dbb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dbb4:	b570      	push	{r4, r5, r6, lr}
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	b1d3      	cbz	r3, 800dbf0 <rcl_wait_set_add_guard_condition+0x40>
 800dbba:	b319      	cbz	r1, 800dc04 <rcl_wait_set_add_guard_condition+0x54>
 800dbbc:	68dd      	ldr	r5, [r3, #12]
 800dbbe:	68e0      	ldr	r0, [r4, #12]
 800dbc0:	4285      	cmp	r5, r0
 800dbc2:	d218      	bcs.n	800dbf6 <rcl_wait_set_add_guard_condition+0x46>
 800dbc4:	68a0      	ldr	r0, [r4, #8]
 800dbc6:	1c6e      	adds	r6, r5, #1
 800dbc8:	60de      	str	r6, [r3, #12]
 800dbca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800dbce:	b102      	cbz	r2, 800dbd2 <rcl_wait_set_add_guard_condition+0x22>
 800dbd0:	6015      	str	r5, [r2, #0]
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	f005 fda0 	bl	8013718 <rcl_guard_condition_get_rmw_handle>
 800dbd8:	b190      	cbz	r0, 800dc00 <rcl_wait_set_add_guard_condition+0x50>
 800dbda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dbdc:	6842      	ldr	r2, [r0, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbe4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dbe6:	6913      	ldr	r3, [r2, #16]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	6113      	str	r3, [r2, #16]
 800dbec:	2000      	movs	r0, #0
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dbf4:	bd70      	pop	{r4, r5, r6, pc}
 800dbf6:	f240 3086 	movw	r0, #902	@ 0x386
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	200b      	movs	r0, #11
 800dbfe:	4770      	bx	lr
 800dc00:	2001      	movs	r0, #1
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	200b      	movs	r0, #11
 800dc06:	bd70      	pop	{r4, r5, r6, pc}

0800dc08 <rcl_wait_set_add_timer>:
 800dc08:	b340      	cbz	r0, 800dc5c <rcl_wait_set_add_timer+0x54>
 800dc0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	4604      	mov	r4, r0
 800dc10:	b1f3      	cbz	r3, 800dc50 <rcl_wait_set_add_timer+0x48>
 800dc12:	b329      	cbz	r1, 800dc60 <rcl_wait_set_add_timer+0x58>
 800dc14:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800dc16:	6965      	ldr	r5, [r4, #20]
 800dc18:	42a8      	cmp	r0, r5
 800dc1a:	d21c      	bcs.n	800dc56 <rcl_wait_set_add_timer+0x4e>
 800dc1c:	6925      	ldr	r5, [r4, #16]
 800dc1e:	1c46      	adds	r6, r0, #1
 800dc20:	641e      	str	r6, [r3, #64]	@ 0x40
 800dc22:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800dc26:	b102      	cbz	r2, 800dc2a <rcl_wait_set_add_timer+0x22>
 800dc28:	6010      	str	r0, [r2, #0]
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	f7ff faa4 	bl	800d178 <rcl_timer_get_guard_condition>
 800dc30:	b168      	cbz	r0, 800dc4e <rcl_wait_set_add_timer+0x46>
 800dc32:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dc34:	68e3      	ldr	r3, [r4, #12]
 800dc36:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	441d      	add	r5, r3
 800dc3c:	f005 fd6c 	bl	8013718 <rcl_guard_condition_get_rmw_handle>
 800dc40:	b180      	cbz	r0, 800dc64 <rcl_wait_set_add_timer+0x5c>
 800dc42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dc44:	6842      	ldr	r2, [r0, #4]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	f240 3086 	movw	r0, #902	@ 0x386
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	200b      	movs	r0, #11
 800dc5e:	4770      	bx	lr
 800dc60:	200b      	movs	r0, #11
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	2001      	movs	r0, #1
 800dc66:	bd70      	pop	{r4, r5, r6, pc}

0800dc68 <rcl_wait_set_add_client>:
 800dc68:	b320      	cbz	r0, 800dcb4 <rcl_wait_set_add_client+0x4c>
 800dc6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	4604      	mov	r4, r0
 800dc70:	b1d3      	cbz	r3, 800dca8 <rcl_wait_set_add_client+0x40>
 800dc72:	b319      	cbz	r1, 800dcbc <rcl_wait_set_add_client+0x54>
 800dc74:	699d      	ldr	r5, [r3, #24]
 800dc76:	69e0      	ldr	r0, [r4, #28]
 800dc78:	4285      	cmp	r5, r0
 800dc7a:	d218      	bcs.n	800dcae <rcl_wait_set_add_client+0x46>
 800dc7c:	69a0      	ldr	r0, [r4, #24]
 800dc7e:	1c6e      	adds	r6, r5, #1
 800dc80:	619e      	str	r6, [r3, #24]
 800dc82:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800dc86:	b102      	cbz	r2, 800dc8a <rcl_wait_set_add_client+0x22>
 800dc88:	6015      	str	r5, [r2, #0]
 800dc8a:	4608      	mov	r0, r1
 800dc8c:	f7fd ffc4 	bl	800bc18 <rcl_client_get_rmw_handle>
 800dc90:	b190      	cbz	r0, 800dcb8 <rcl_wait_set_add_client+0x50>
 800dc92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dc94:	6842      	ldr	r2, [r0, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc9c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dc9e:	69d3      	ldr	r3, [r2, #28]
 800dca0:	3301      	adds	r3, #1
 800dca2:	61d3      	str	r3, [r2, #28]
 800dca4:	2000      	movs	r0, #0
 800dca6:	bd70      	pop	{r4, r5, r6, pc}
 800dca8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dcac:	bd70      	pop	{r4, r5, r6, pc}
 800dcae:	f240 3086 	movw	r0, #902	@ 0x386
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	200b      	movs	r0, #11
 800dcb6:	4770      	bx	lr
 800dcb8:	2001      	movs	r0, #1
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	200b      	movs	r0, #11
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}

0800dcc0 <rcl_wait_set_add_service>:
 800dcc0:	b320      	cbz	r0, 800dd0c <rcl_wait_set_add_service+0x4c>
 800dcc2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	b1d3      	cbz	r3, 800dd00 <rcl_wait_set_add_service+0x40>
 800dcca:	b319      	cbz	r1, 800dd14 <rcl_wait_set_add_service+0x54>
 800dccc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800dcce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dcd0:	4285      	cmp	r5, r0
 800dcd2:	d218      	bcs.n	800dd06 <rcl_wait_set_add_service+0x46>
 800dcd4:	6a20      	ldr	r0, [r4, #32]
 800dcd6:	1c6e      	adds	r6, r5, #1
 800dcd8:	625e      	str	r6, [r3, #36]	@ 0x24
 800dcda:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800dcde:	b102      	cbz	r2, 800dce2 <rcl_wait_set_add_service+0x22>
 800dce0:	6015      	str	r5, [r2, #0]
 800dce2:	4608      	mov	r0, r1
 800dce4:	f7fe fed4 	bl	800ca90 <rcl_service_get_rmw_handle>
 800dce8:	b190      	cbz	r0, 800dd10 <rcl_wait_set_add_service+0x50>
 800dcea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dcec:	6842      	ldr	r2, [r0, #4]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcf4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dcf6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	6293      	str	r3, [r2, #40]	@ 0x28
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dd04:	bd70      	pop	{r4, r5, r6, pc}
 800dd06:	f240 3086 	movw	r0, #902	@ 0x386
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
 800dd0c:	200b      	movs	r0, #11
 800dd0e:	4770      	bx	lr
 800dd10:	2001      	movs	r0, #1
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	200b      	movs	r0, #11
 800dd16:	bd70      	pop	{r4, r5, r6, pc}

0800dd18 <rcl_wait>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	b08f      	sub	sp, #60	@ 0x3c
 800dd1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd22:	2800      	cmp	r0, #0
 800dd24:	f000 814c 	beq.w	800dfc0 <rcl_wait+0x2a8>
 800dd28:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	f000 80bc 	beq.w	800deaa <rcl_wait+0x192>
 800dd32:	6843      	ldr	r3, [r0, #4]
 800dd34:	b973      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd36:	68e3      	ldr	r3, [r4, #12]
 800dd38:	b963      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd3a:	6963      	ldr	r3, [r4, #20]
 800dd3c:	b953      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd3e:	69e3      	ldr	r3, [r4, #28]
 800dd40:	b943      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dd44:	b933      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd48:	b923      	cbnz	r3, 800dd54 <rcl_wait+0x3c>
 800dd4a:	f240 3085 	movw	r0, #901	@ 0x385
 800dd4e:	b00f      	add	sp, #60	@ 0x3c
 800dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd58:	2a01      	cmp	r2, #1
 800dd5a:	f173 0300 	sbcs.w	r3, r3, #0
 800dd5e:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800dd60:	db56      	blt.n	800de10 <rcl_wait+0xf8>
 800dd62:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800dd66:	2900      	cmp	r1, #0
 800dd68:	f000 8149 	beq.w	800dffe <rcl_wait+0x2e6>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9307      	str	r3, [sp, #28]
 800dd70:	469b      	mov	fp, r3
 800dd72:	f04f 0800 	mov.w	r8, #0
 800dd76:	f04f 0900 	mov.w	r9, #0
 800dd7a:	e00d      	b.n	800dd98 <rcl_wait+0x80>
 800dd7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800dd7e:	6922      	ldr	r2, [r4, #16]
 800dd80:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800dd82:	f842 000a 	str.w	r0, [r2, sl]
 800dd86:	f118 0801 	adds.w	r8, r8, #1
 800dd8a:	f149 0900 	adc.w	r9, r9, #0
 800dd8e:	2300      	movs	r3, #0
 800dd90:	4599      	cmp	r9, r3
 800dd92:	bf08      	it	eq
 800dd94:	4588      	cmpeq	r8, r1
 800dd96:	d243      	bcs.n	800de20 <rcl_wait+0x108>
 800dd98:	6922      	ldr	r2, [r4, #16]
 800dd9a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800dd9e:	f852 000a 	ldr.w	r0, [r2, sl]
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d0ef      	beq.n	800dd86 <rcl_wait+0x6e>
 800dda6:	68e2      	ldr	r2, [r4, #12]
 800dda8:	6969      	ldr	r1, [r5, #20]
 800ddaa:	4442      	add	r2, r8
 800ddac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800ddb0:	b13b      	cbz	r3, 800ddc2 <rcl_wait+0xaa>
 800ddb2:	692a      	ldr	r2, [r5, #16]
 800ddb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ddb8:	6921      	ldr	r1, [r4, #16]
 800ddba:	3201      	adds	r2, #1
 800ddbc:	f851 000a 	ldr.w	r0, [r1, sl]
 800ddc0:	612a      	str	r2, [r5, #16]
 800ddc2:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 800ddc6:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 800ddca:	f7ff f9c3 	bl	800d154 <rcl_timer_is_canceled>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d1bd      	bne.n	800dd4e <rcl_wait+0x36>
 800ddd2:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800ddd6:	2a00      	cmp	r2, #0
 800ddd8:	d1d0      	bne.n	800dd7c <rcl_wait+0x64>
 800ddda:	6922      	ldr	r2, [r4, #16]
 800dddc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dde0:	f852 000a 	ldr.w	r0, [r2, sl]
 800dde4:	a90a      	add	r1, sp, #40	@ 0x28
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ddea:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800ddee:	f7ff f98d 	bl	800d10c <rcl_timer_get_time_until_next_call>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d1ab      	bne.n	800dd4e <rcl_wait+0x36>
 800ddf6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ddfa:	42b2      	cmp	r2, r6
 800ddfc:	eb73 0107 	sbcs.w	r1, r3, r7
 800de00:	da03      	bge.n	800de0a <rcl_wait+0xf2>
 800de02:	461f      	mov	r7, r3
 800de04:	2301      	movs	r3, #1
 800de06:	4616      	mov	r6, r2
 800de08:	9307      	str	r3, [sp, #28]
 800de0a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800de0c:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800de0e:	e7ba      	b.n	800dd86 <rcl_wait+0x6e>
 800de10:	2900      	cmp	r1, #0
 800de12:	f000 80de 	beq.w	800dfd2 <rcl_wait+0x2ba>
 800de16:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800de1a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800de1e:	e7a5      	b.n	800dd6c <rcl_wait+0x54>
 800de20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de24:	4313      	orrs	r3, r2
 800de26:	d145      	bne.n	800deb4 <rcl_wait+0x19c>
 800de28:	2300      	movs	r3, #0
 800de2a:	2200      	movs	r2, #0
 800de2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800de30:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de34:	ab0a      	add	r3, sp, #40	@ 0x28
 800de36:	9302      	str	r3, [sp, #8]
 800de38:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 800de46:	f105 031c 	add.w	r3, r5, #28
 800de4a:	f105 0110 	add.w	r1, r5, #16
 800de4e:	1d28      	adds	r0, r5, #4
 800de50:	f001 fc9c 	bl	800f78c <rmw_wait>
 800de54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de58:	4680      	mov	r8, r0
 800de5a:	b30a      	cbz	r2, 800dea0 <rcl_wait+0x188>
 800de5c:	2500      	movs	r5, #0
 800de5e:	462f      	mov	r7, r5
 800de60:	e004      	b.n	800de6c <rcl_wait+0x154>
 800de62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de66:	3501      	adds	r5, #1
 800de68:	42aa      	cmp	r2, r5
 800de6a:	d919      	bls.n	800dea0 <rcl_wait+0x188>
 800de6c:	6922      	ldr	r2, [r4, #16]
 800de6e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800de72:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 800de76:	00ae      	lsls	r6, r5, #2
 800de78:	2800      	cmp	r0, #0
 800de7a:	d0f3      	beq.n	800de64 <rcl_wait+0x14c>
 800de7c:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 800de80:	f7ff f90c 	bl	800d09c <rcl_timer_is_ready>
 800de84:	2800      	cmp	r0, #0
 800de86:	f47f af62 	bne.w	800dd4e <rcl_wait+0x36>
 800de8a:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800de8e:	2a00      	cmp	r2, #0
 800de90:	d1e7      	bne.n	800de62 <rcl_wait+0x14a>
 800de92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de94:	6921      	ldr	r1, [r4, #16]
 800de96:	518a      	str	r2, [r1, r6]
 800de98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de9a:	3501      	adds	r5, #1
 800de9c:	42aa      	cmp	r2, r5
 800de9e:	d8e5      	bhi.n	800de6c <rcl_wait+0x154>
 800dea0:	f038 0002 	bics.w	r0, r8, #2
 800dea4:	d029      	beq.n	800defa <rcl_wait+0x1e2>
 800dea6:	2001      	movs	r0, #1
 800dea8:	e751      	b.n	800dd4e <rcl_wait+0x36>
 800deaa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800deae:	b00f      	add	sp, #60	@ 0x3c
 800deb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deb8:	2a01      	cmp	r2, #1
 800deba:	f173 0300 	sbcs.w	r3, r3, #0
 800debe:	f2c0 8083 	blt.w	800dfc8 <rcl_wait+0x2b0>
 800dec2:	2e00      	cmp	r6, #0
 800dec4:	f177 0300 	sbcs.w	r3, r7, #0
 800dec8:	bfbc      	itt	lt
 800deca:	2600      	movlt	r6, #0
 800decc:	2700      	movlt	r7, #0
 800dece:	a34e      	add	r3, pc, #312	@ (adr r3, 800e008 <rcl_wait+0x2f0>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	4630      	mov	r0, r6
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 fe68 	bl	8000bac <__aeabi_ldivmod>
 800dedc:	a34a      	add	r3, pc, #296	@ (adr r3, 800e008 <rcl_wait+0x2f0>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4680      	mov	r8, r0
 800dee4:	4689      	mov	r9, r1
 800dee6:	4630      	mov	r0, r6
 800dee8:	4639      	mov	r1, r7
 800deea:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800deee:	f7f2 fe5d 	bl	8000bac <__aeabi_ldivmod>
 800def2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800def6:	ab0a      	add	r3, sp, #40	@ 0x28
 800def8:	e79d      	b.n	800de36 <rcl_wait+0x11e>
 800defa:	6866      	ldr	r6, [r4, #4]
 800defc:	4602      	mov	r2, r0
 800defe:	b91e      	cbnz	r6, 800df08 <rcl_wait+0x1f0>
 800df00:	e00d      	b.n	800df1e <rcl_wait+0x206>
 800df02:	3201      	adds	r2, #1
 800df04:	42b2      	cmp	r2, r6
 800df06:	d00a      	beq.n	800df1e <rcl_wait+0x206>
 800df08:	6899      	ldr	r1, [r3, #8]
 800df0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800df0e:	2900      	cmp	r1, #0
 800df10:	d1f7      	bne.n	800df02 <rcl_wait+0x1ea>
 800df12:	6825      	ldr	r5, [r4, #0]
 800df14:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800df18:	3201      	adds	r2, #1
 800df1a:	42b2      	cmp	r2, r6
 800df1c:	d1f4      	bne.n	800df08 <rcl_wait+0x1f0>
 800df1e:	68e6      	ldr	r6, [r4, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	b91e      	cbnz	r6, 800df2c <rcl_wait+0x214>
 800df24:	e00d      	b.n	800df42 <rcl_wait+0x22a>
 800df26:	3201      	adds	r2, #1
 800df28:	42b2      	cmp	r2, r6
 800df2a:	d00a      	beq.n	800df42 <rcl_wait+0x22a>
 800df2c:	6959      	ldr	r1, [r3, #20]
 800df2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800df32:	2900      	cmp	r1, #0
 800df34:	d1f7      	bne.n	800df26 <rcl_wait+0x20e>
 800df36:	68a5      	ldr	r5, [r4, #8]
 800df38:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800df3c:	3201      	adds	r2, #1
 800df3e:	42b2      	cmp	r2, r6
 800df40:	d1f4      	bne.n	800df2c <rcl_wait+0x214>
 800df42:	69e6      	ldr	r6, [r4, #28]
 800df44:	2200      	movs	r2, #0
 800df46:	b91e      	cbnz	r6, 800df50 <rcl_wait+0x238>
 800df48:	e00d      	b.n	800df66 <rcl_wait+0x24e>
 800df4a:	3201      	adds	r2, #1
 800df4c:	42b2      	cmp	r2, r6
 800df4e:	d00a      	beq.n	800df66 <rcl_wait+0x24e>
 800df50:	6a19      	ldr	r1, [r3, #32]
 800df52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800df56:	2900      	cmp	r1, #0
 800df58:	d1f7      	bne.n	800df4a <rcl_wait+0x232>
 800df5a:	69a5      	ldr	r5, [r4, #24]
 800df5c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800df60:	3201      	adds	r2, #1
 800df62:	42b2      	cmp	r2, r6
 800df64:	d1f4      	bne.n	800df50 <rcl_wait+0x238>
 800df66:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800df68:	2200      	movs	r2, #0
 800df6a:	b91e      	cbnz	r6, 800df74 <rcl_wait+0x25c>
 800df6c:	e00d      	b.n	800df8a <rcl_wait+0x272>
 800df6e:	3201      	adds	r2, #1
 800df70:	4296      	cmp	r6, r2
 800df72:	d00a      	beq.n	800df8a <rcl_wait+0x272>
 800df74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800df76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800df7a:	2900      	cmp	r1, #0
 800df7c:	d1f7      	bne.n	800df6e <rcl_wait+0x256>
 800df7e:	6a25      	ldr	r5, [r4, #32]
 800df80:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800df84:	3201      	adds	r2, #1
 800df86:	4296      	cmp	r6, r2
 800df88:	d1f4      	bne.n	800df74 <rcl_wait+0x25c>
 800df8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df8c:	2200      	movs	r2, #0
 800df8e:	b91e      	cbnz	r6, 800df98 <rcl_wait+0x280>
 800df90:	e00d      	b.n	800dfae <rcl_wait+0x296>
 800df92:	3201      	adds	r2, #1
 800df94:	42b2      	cmp	r2, r6
 800df96:	d00a      	beq.n	800dfae <rcl_wait+0x296>
 800df98:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800df9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800df9e:	2900      	cmp	r1, #0
 800dfa0:	d1f7      	bne.n	800df92 <rcl_wait+0x27a>
 800dfa2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800dfa4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800dfa8:	3201      	adds	r2, #1
 800dfaa:	42b2      	cmp	r2, r6
 800dfac:	d1f4      	bne.n	800df98 <rcl_wait+0x280>
 800dfae:	f1b8 0f02 	cmp.w	r8, #2
 800dfb2:	f47f aecc 	bne.w	800dd4e <rcl_wait+0x36>
 800dfb6:	9b07      	ldr	r3, [sp, #28]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	bf08      	it	eq
 800dfbc:	2002      	moveq	r0, #2
 800dfbe:	e6c6      	b.n	800dd4e <rcl_wait+0x36>
 800dfc0:	200b      	movs	r0, #11
 800dfc2:	b00f      	add	sp, #60	@ 0x3c
 800dfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc8:	9b07      	ldr	r3, [sp, #28]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f47f af79 	bne.w	800dec2 <rcl_wait+0x1aa>
 800dfd0:	e731      	b.n	800de36 <rcl_wait+0x11e>
 800dfd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	bf08      	it	eq
 800dfda:	9107      	streq	r1, [sp, #28]
 800dfdc:	f43f af24 	beq.w	800de28 <rcl_wait+0x110>
 800dfe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfe4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800dfe8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800dfec:	2a01      	cmp	r2, #1
 800dfee:	f173 0300 	sbcs.w	r3, r3, #0
 800dff2:	f04f 0300 	mov.w	r3, #0
 800dff6:	9307      	str	r3, [sp, #28]
 800dff8:	f6bf af63 	bge.w	800dec2 <rcl_wait+0x1aa>
 800dffc:	e71b      	b.n	800de36 <rcl_wait+0x11e>
 800dffe:	4632      	mov	r2, r6
 800e000:	463b      	mov	r3, r7
 800e002:	e7f3      	b.n	800dfec <rcl_wait+0x2d4>
 800e004:	f3af 8000 	nop.w
 800e008:	3b9aca00 	.word	0x3b9aca00
 800e00c:	00000000 	.word	0x00000000

0800e010 <__atomic_load_8>:
 800e010:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e014:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e018:	4b14      	ldr	r3, [pc, #80]	@ (800e06c <__atomic_load_8+0x5c>)
 800e01a:	4a15      	ldr	r2, [pc, #84]	@ (800e070 <__atomic_load_8+0x60>)
 800e01c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e020:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e024:	fb03 f301 	mul.w	r3, r3, r1
 800e028:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800e02c:	fba2 1203 	umull	r1, r2, r2, r3
 800e030:	0912      	lsrs	r2, r2, #4
 800e032:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e036:	b430      	push	{r4, r5}
 800e038:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800e03c:	4c0d      	ldr	r4, [pc, #52]	@ (800e074 <__atomic_load_8+0x64>)
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	18e1      	adds	r1, r4, r3
 800e042:	f04f 0501 	mov.w	r5, #1
 800e046:	e8d1 2f4f 	ldrexb	r2, [r1]
 800e04a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800e04e:	f1bc 0f00 	cmp.w	ip, #0
 800e052:	d1f8      	bne.n	800e046 <__atomic_load_8+0x36>
 800e054:	f3bf 8f5b 	dmb	ish
 800e058:	b2d2      	uxtb	r2, r2
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	d1f3      	bne.n	800e046 <__atomic_load_8+0x36>
 800e05e:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e062:	f3bf 8f5b 	dmb	ish
 800e066:	54e2      	strb	r2, [r4, r3]
 800e068:	bc30      	pop	{r4, r5}
 800e06a:	4770      	bx	lr
 800e06c:	27d4eb2d 	.word	0x27d4eb2d
 800e070:	b21642c9 	.word	0xb21642c9
 800e074:	20009168 	.word	0x20009168

0800e078 <__atomic_store_8>:
 800e078:	b4f0      	push	{r4, r5, r6, r7}
 800e07a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 800e07e:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 800e082:	4914      	ldr	r1, [pc, #80]	@ (800e0d4 <__atomic_store_8+0x5c>)
 800e084:	4c14      	ldr	r4, [pc, #80]	@ (800e0d8 <__atomic_store_8+0x60>)
 800e086:	4e15      	ldr	r6, [pc, #84]	@ (800e0dc <__atomic_store_8+0x64>)
 800e088:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800e08c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 800e090:	fb01 f105 	mul.w	r1, r1, r5
 800e094:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800e098:	fba4 5401 	umull	r5, r4, r4, r1
 800e09c:	0924      	lsrs	r4, r4, #4
 800e09e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e0a2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 800e0a6:	1b09      	subs	r1, r1, r4
 800e0a8:	1875      	adds	r5, r6, r1
 800e0aa:	f04f 0701 	mov.w	r7, #1
 800e0ae:	e8d5 4f4f 	ldrexb	r4, [r5]
 800e0b2:	e8c5 7f4c 	strexb	ip, r7, [r5]
 800e0b6:	f1bc 0f00 	cmp.w	ip, #0
 800e0ba:	d1f8      	bne.n	800e0ae <__atomic_store_8+0x36>
 800e0bc:	f3bf 8f5b 	dmb	ish
 800e0c0:	b2e4      	uxtb	r4, r4
 800e0c2:	2c00      	cmp	r4, #0
 800e0c4:	d1f3      	bne.n	800e0ae <__atomic_store_8+0x36>
 800e0c6:	e9c0 2300 	strd	r2, r3, [r0]
 800e0ca:	f3bf 8f5b 	dmb	ish
 800e0ce:	5474      	strb	r4, [r6, r1]
 800e0d0:	bcf0      	pop	{r4, r5, r6, r7}
 800e0d2:	4770      	bx	lr
 800e0d4:	27d4eb2d 	.word	0x27d4eb2d
 800e0d8:	b21642c9 	.word	0xb21642c9
 800e0dc:	20009168 	.word	0x20009168

0800e0e0 <__atomic_exchange_8>:
 800e0e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e0e4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 800e0e8:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 800e0ec:	4c16      	ldr	r4, [pc, #88]	@ (800e148 <__atomic_exchange_8+0x68>)
 800e0ee:	4917      	ldr	r1, [pc, #92]	@ (800e14c <__atomic_exchange_8+0x6c>)
 800e0f0:	4e17      	ldr	r6, [pc, #92]	@ (800e150 <__atomic_exchange_8+0x70>)
 800e0f2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800e0f6:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 800e0fa:	fb04 f505 	mul.w	r5, r4, r5
 800e0fe:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 800e102:	fba1 4105 	umull	r4, r1, r1, r5
 800e106:	0909      	lsrs	r1, r1, #4
 800e108:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800e10c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 800e110:	1a6c      	subs	r4, r5, r1
 800e112:	1931      	adds	r1, r6, r4
 800e114:	f04f 0701 	mov.w	r7, #1
 800e118:	e8d1 5f4f 	ldrexb	r5, [r1]
 800e11c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 800e120:	f1bc 0f00 	cmp.w	ip, #0
 800e124:	d1f8      	bne.n	800e118 <__atomic_exchange_8+0x38>
 800e126:	f3bf 8f5b 	dmb	ish
 800e12a:	b2ed      	uxtb	r5, r5
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d1f3      	bne.n	800e118 <__atomic_exchange_8+0x38>
 800e130:	e9d0 8900 	ldrd	r8, r9, [r0]
 800e134:	e9c0 2300 	strd	r2, r3, [r0]
 800e138:	f3bf 8f5b 	dmb	ish
 800e13c:	5535      	strb	r5, [r6, r4]
 800e13e:	4640      	mov	r0, r8
 800e140:	4649      	mov	r1, r9
 800e142:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e146:	4770      	bx	lr
 800e148:	27d4eb2d 	.word	0x27d4eb2d
 800e14c:	b21642c9 	.word	0xb21642c9
 800e150:	20009168 	.word	0x20009168

0800e154 <rcutils_is_directory>:
 800e154:	2000      	movs	r0, #0
 800e156:	4770      	bx	lr

0800e158 <rcutils_join_path>:
 800e158:	b082      	sub	sp, #8
 800e15a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e15e:	2000      	movs	r0, #0
 800e160:	b002      	add	sp, #8
 800e162:	4770      	bx	lr

0800e164 <rcutils_to_native_path>:
 800e164:	b084      	sub	sp, #16
 800e166:	a801      	add	r0, sp, #4
 800e168:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e16c:	b004      	add	sp, #16
 800e16e:	2000      	movs	r0, #0
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop

0800e174 <rcutils_format_string_limit>:
 800e174:	b40f      	push	{r0, r1, r2, r3}
 800e176:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e178:	b083      	sub	sp, #12
 800e17a:	ac08      	add	r4, sp, #32
 800e17c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e17e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e182:	b34e      	cbz	r6, 800e1d8 <rcutils_format_string_limit+0x64>
 800e184:	a808      	add	r0, sp, #32
 800e186:	f7fc f99b 	bl	800a4c0 <rcutils_allocator_is_valid>
 800e18a:	b328      	cbz	r0, 800e1d8 <rcutils_format_string_limit+0x64>
 800e18c:	2100      	movs	r1, #0
 800e18e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e190:	4608      	mov	r0, r1
 800e192:	4632      	mov	r2, r6
 800e194:	e9cd 3300 	strd	r3, r3, [sp]
 800e198:	f000 f904 	bl	800e3a4 <rcutils_vsnprintf>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	4605      	mov	r5, r0
 800e1a0:	d01a      	beq.n	800e1d8 <rcutils_format_string_limit+0x64>
 800e1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e1a6:	1c47      	adds	r7, r0, #1
 800e1a8:	429f      	cmp	r7, r3
 800e1aa:	bf84      	itt	hi
 800e1ac:	461f      	movhi	r7, r3
 800e1ae:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	9b08      	ldr	r3, [sp, #32]
 800e1b6:	4798      	blx	r3
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	b168      	cbz	r0, 800e1d8 <rcutils_format_string_limit+0x64>
 800e1bc:	9b01      	ldr	r3, [sp, #4]
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	f000 f8ef 	bl	800e3a4 <rcutils_vsnprintf>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	db02      	blt.n	800e1d0 <rcutils_format_string_limit+0x5c>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	5563      	strb	r3, [r4, r5]
 800e1ce:	e004      	b.n	800e1da <rcutils_format_string_limit+0x66>
 800e1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	4798      	blx	r3
 800e1d8:	2400      	movs	r4, #0
 800e1da:	4620      	mov	r0, r4
 800e1dc:	b003      	add	sp, #12
 800e1de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e1e2:	b004      	add	sp, #16
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop

0800e1e8 <rcutils_get_env>:
 800e1e8:	b168      	cbz	r0, 800e206 <rcutils_get_env+0x1e>
 800e1ea:	b510      	push	{r4, lr}
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	b129      	cbz	r1, 800e1fc <rcutils_get_env+0x14>
 800e1f0:	f006 fb32 	bl	8014858 <getenv>
 800e1f4:	b120      	cbz	r0, 800e200 <rcutils_get_env+0x18>
 800e1f6:	6020      	str	r0, [r4, #0]
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	bd10      	pop	{r4, pc}
 800e1fc:	4803      	ldr	r0, [pc, #12]	@ (800e20c <rcutils_get_env+0x24>)
 800e1fe:	bd10      	pop	{r4, pc}
 800e200:	4b03      	ldr	r3, [pc, #12]	@ (800e210 <rcutils_get_env+0x28>)
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	bd10      	pop	{r4, pc}
 800e206:	4803      	ldr	r0, [pc, #12]	@ (800e214 <rcutils_get_env+0x2c>)
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	080167c8 	.word	0x080167c8
 800e210:	080168ec 	.word	0x080168ec
 800e214:	080167ac 	.word	0x080167ac

0800e218 <rcutils_repl_str>:
 800e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	ed2d 8b02 	vpush	{d8}
 800e220:	b087      	sub	sp, #28
 800e222:	4680      	mov	r8, r0
 800e224:	4608      	mov	r0, r1
 800e226:	f8cd 8000 	str.w	r8, [sp]
 800e22a:	ee08 2a10 	vmov	s16, r2
 800e22e:	468a      	mov	sl, r1
 800e230:	4699      	mov	r9, r3
 800e232:	f7f1 ffdf 	bl	80001f4 <strlen>
 800e236:	2600      	movs	r6, #0
 800e238:	4647      	mov	r7, r8
 800e23a:	9001      	str	r0, [sp, #4]
 800e23c:	46b3      	mov	fp, r6
 800e23e:	2510      	movs	r5, #16
 800e240:	46b0      	mov	r8, r6
 800e242:	e01d      	b.n	800e280 <rcutils_repl_str+0x68>
 800e244:	f10b 0b01 	add.w	fp, fp, #1
 800e248:	455e      	cmp	r6, fp
 800e24a:	d211      	bcs.n	800e270 <rcutils_repl_str+0x58>
 800e24c:	442e      	add	r6, r5
 800e24e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e252:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e256:	00b1      	lsls	r1, r6, #2
 800e258:	4798      	blx	r3
 800e25a:	2800      	cmp	r0, #0
 800e25c:	f000 8084 	beq.w	800e368 <rcutils_repl_str+0x150>
 800e260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e264:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e268:	bf28      	it	cs
 800e26a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e26e:	4680      	mov	r8, r0
 800e270:	9a00      	ldr	r2, [sp, #0]
 800e272:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e276:	1aa2      	subs	r2, r4, r2
 800e278:	f843 2c04 	str.w	r2, [r3, #-4]
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	18e7      	adds	r7, r4, r3
 800e280:	4651      	mov	r1, sl
 800e282:	4638      	mov	r0, r7
 800e284:	f006 febb 	bl	8014ffe <strstr>
 800e288:	4604      	mov	r4, r0
 800e28a:	4640      	mov	r0, r8
 800e28c:	2c00      	cmp	r4, #0
 800e28e:	d1d9      	bne.n	800e244 <rcutils_repl_str+0x2c>
 800e290:	46b8      	mov	r8, r7
 800e292:	4607      	mov	r7, r0
 800e294:	4640      	mov	r0, r8
 800e296:	f7f1 ffad 	bl	80001f4 <strlen>
 800e29a:	9b00      	ldr	r3, [sp, #0]
 800e29c:	eba8 0303 	sub.w	r3, r8, r3
 800e2a0:	181d      	adds	r5, r3, r0
 800e2a2:	9504      	str	r5, [sp, #16]
 800e2a4:	f1bb 0f00 	cmp.w	fp, #0
 800e2a8:	d03d      	beq.n	800e326 <rcutils_repl_str+0x10e>
 800e2aa:	ee18 0a10 	vmov	r0, s16
 800e2ae:	f7f1 ffa1 	bl	80001f4 <strlen>
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e2b8:	1ac3      	subs	r3, r0, r3
 800e2ba:	fb0b 5303 	mla	r3, fp, r3, r5
 800e2be:	9305      	str	r3, [sp, #20]
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	1c58      	adds	r0, r3, #1
 800e2c4:	f8d9 3000 	ldr.w	r3, [r9]
 800e2c8:	4798      	blx	r3
 800e2ca:	9003      	str	r0, [sp, #12]
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d04c      	beq.n	800e36a <rcutils_repl_str+0x152>
 800e2d0:	683a      	ldr	r2, [r7, #0]
 800e2d2:	9900      	ldr	r1, [sp, #0]
 800e2d4:	f006 ff35 	bl	8015142 <memcpy>
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	683d      	ldr	r5, [r7, #0]
 800e2dc:	ee18 8a10 	vmov	r8, s16
 800e2e0:	441d      	add	r5, r3
 800e2e2:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800e2e6:	9302      	str	r3, [sp, #8]
 800e2e8:	46ba      	mov	sl, r7
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	4641      	mov	r1, r8
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	f006 ff27 	bl	8015142 <memcpy>
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	f85a 2b04 	ldr.w	r2, [sl], #4
 800e2fa:	441a      	add	r2, r3
 800e2fc:	9b00      	ldr	r3, [sp, #0]
 800e2fe:	1899      	adds	r1, r3, r2
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	4435      	add	r5, r6
 800e304:	429c      	cmp	r4, r3
 800e306:	4628      	mov	r0, r5
 800e308:	d025      	beq.n	800e356 <rcutils_repl_str+0x13e>
 800e30a:	f8da 3000 	ldr.w	r3, [sl]
 800e30e:	3401      	adds	r4, #1
 800e310:	1a9a      	subs	r2, r3, r2
 800e312:	4415      	add	r5, r2
 800e314:	f006 ff15 	bl	8015142 <memcpy>
 800e318:	455c      	cmp	r4, fp
 800e31a:	d3e6      	bcc.n	800e2ea <rcutils_repl_str+0xd2>
 800e31c:	9a03      	ldr	r2, [sp, #12]
 800e31e:	9905      	ldr	r1, [sp, #20]
 800e320:	2300      	movs	r3, #0
 800e322:	5453      	strb	r3, [r2, r1]
 800e324:	e00b      	b.n	800e33e <rcutils_repl_str+0x126>
 800e326:	4628      	mov	r0, r5
 800e328:	f8d9 3000 	ldr.w	r3, [r9]
 800e32c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e330:	3001      	adds	r0, #1
 800e332:	4798      	blx	r3
 800e334:	9003      	str	r0, [sp, #12]
 800e336:	b110      	cbz	r0, 800e33e <rcutils_repl_str+0x126>
 800e338:	9900      	ldr	r1, [sp, #0]
 800e33a:	f006 fefa 	bl	8015132 <strcpy>
 800e33e:	4638      	mov	r0, r7
 800e340:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e344:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e348:	4798      	blx	r3
 800e34a:	9803      	ldr	r0, [sp, #12]
 800e34c:	b007      	add	sp, #28
 800e34e:	ecbd 8b02 	vpop	{d8}
 800e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	3401      	adds	r4, #1
 800e35a:	1a9a      	subs	r2, r3, r2
 800e35c:	4415      	add	r5, r2
 800e35e:	f006 fef0 	bl	8015142 <memcpy>
 800e362:	455c      	cmp	r4, fp
 800e364:	d3c1      	bcc.n	800e2ea <rcutils_repl_str+0xd2>
 800e366:	e7d9      	b.n	800e31c <rcutils_repl_str+0x104>
 800e368:	4647      	mov	r7, r8
 800e36a:	2300      	movs	r3, #0
 800e36c:	9303      	str	r3, [sp, #12]
 800e36e:	e7e6      	b.n	800e33e <rcutils_repl_str+0x126>

0800e370 <rcutils_snprintf>:
 800e370:	b40c      	push	{r2, r3}
 800e372:	b530      	push	{r4, r5, lr}
 800e374:	b083      	sub	sp, #12
 800e376:	ab06      	add	r3, sp, #24
 800e378:	f853 2b04 	ldr.w	r2, [r3], #4
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	b152      	cbz	r2, 800e396 <rcutils_snprintf+0x26>
 800e380:	b138      	cbz	r0, 800e392 <rcutils_snprintf+0x22>
 800e382:	b141      	cbz	r1, 800e396 <rcutils_snprintf+0x26>
 800e384:	f006 fdec 	bl	8014f60 <vsniprintf>
 800e388:	b003      	add	sp, #12
 800e38a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e38e:	b002      	add	sp, #8
 800e390:	4770      	bx	lr
 800e392:	2900      	cmp	r1, #0
 800e394:	d0f6      	beq.n	800e384 <rcutils_snprintf+0x14>
 800e396:	f006 fe9f 	bl	80150d8 <__errno>
 800e39a:	2316      	movs	r3, #22
 800e39c:	6003      	str	r3, [r0, #0]
 800e39e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3a2:	e7f1      	b.n	800e388 <rcutils_snprintf+0x18>

0800e3a4 <rcutils_vsnprintf>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	b13a      	cbz	r2, 800e3b8 <rcutils_vsnprintf+0x14>
 800e3a8:	b120      	cbz	r0, 800e3b4 <rcutils_vsnprintf+0x10>
 800e3aa:	b129      	cbz	r1, 800e3b8 <rcutils_vsnprintf+0x14>
 800e3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3b0:	f006 bdd6 	b.w	8014f60 <vsniprintf>
 800e3b4:	2900      	cmp	r1, #0
 800e3b6:	d0f9      	beq.n	800e3ac <rcutils_vsnprintf+0x8>
 800e3b8:	f006 fe8e 	bl	80150d8 <__errno>
 800e3bc:	2316      	movs	r3, #22
 800e3be:	6003      	str	r3, [r0, #0]
 800e3c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
 800e3c6:	bf00      	nop

0800e3c8 <rcutils_strdup>:
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	b570      	push	{r4, r5, r6, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	ac07      	add	r4, sp, #28
 800e3d0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	b1b0      	cbz	r0, 800e406 <rcutils_strdup+0x3e>
 800e3d8:	f7f1 ff0c 	bl	80001f4 <strlen>
 800e3dc:	1c42      	adds	r2, r0, #1
 800e3de:	9b07      	ldr	r3, [sp, #28]
 800e3e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3e2:	9201      	str	r2, [sp, #4]
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	4798      	blx	r3
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	b128      	cbz	r0, 800e3fa <rcutils_strdup+0x32>
 800e3ee:	9a01      	ldr	r2, [sp, #4]
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	f006 fea6 	bl	8015142 <memcpy>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	55a3      	strb	r3, [r4, r6]
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	b002      	add	sp, #8
 800e3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e402:	b004      	add	sp, #16
 800e404:	4770      	bx	lr
 800e406:	4604      	mov	r4, r0
 800e408:	e7f7      	b.n	800e3fa <rcutils_strdup+0x32>
 800e40a:	bf00      	nop

0800e40c <rcutils_strndup>:
 800e40c:	b082      	sub	sp, #8
 800e40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e410:	460e      	mov	r6, r1
 800e412:	a906      	add	r1, sp, #24
 800e414:	e881 000c 	stmia.w	r1, {r2, r3}
 800e418:	4605      	mov	r5, r0
 800e41a:	b180      	cbz	r0, 800e43e <rcutils_strndup+0x32>
 800e41c:	1c77      	adds	r7, r6, #1
 800e41e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e420:	4638      	mov	r0, r7
 800e422:	4790      	blx	r2
 800e424:	4604      	mov	r4, r0
 800e426:	b128      	cbz	r0, 800e434 <rcutils_strndup+0x28>
 800e428:	463a      	mov	r2, r7
 800e42a:	4629      	mov	r1, r5
 800e42c:	f006 fe89 	bl	8015142 <memcpy>
 800e430:	2300      	movs	r3, #0
 800e432:	55a3      	strb	r3, [r4, r6]
 800e434:	4620      	mov	r0, r4
 800e436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e43a:	b002      	add	sp, #8
 800e43c:	4770      	bx	lr
 800e43e:	4604      	mov	r4, r0
 800e440:	e7f8      	b.n	800e434 <rcutils_strndup+0x28>
 800e442:	bf00      	nop

0800e444 <rcutils_get_zero_initialized_string_map>:
 800e444:	4b01      	ldr	r3, [pc, #4]	@ (800e44c <rcutils_get_zero_initialized_string_map+0x8>)
 800e446:	2000      	movs	r0, #0
 800e448:	6018      	str	r0, [r3, #0]
 800e44a:	4770      	bx	lr
 800e44c:	20009180 	.word	0x20009180

0800e450 <rcutils_string_map_reserve>:
 800e450:	2800      	cmp	r0, #0
 800e452:	d061      	beq.n	800e518 <rcutils_string_map_reserve+0xc8>
 800e454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e458:	6805      	ldr	r5, [r0, #0]
 800e45a:	b083      	sub	sp, #12
 800e45c:	460c      	mov	r4, r1
 800e45e:	4606      	mov	r6, r0
 800e460:	b12d      	cbz	r5, 800e46e <rcutils_string_map_reserve+0x1e>
 800e462:	68eb      	ldr	r3, [r5, #12]
 800e464:	42a3      	cmp	r3, r4
 800e466:	d906      	bls.n	800e476 <rcutils_string_map_reserve+0x26>
 800e468:	461c      	mov	r4, r3
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	d1f9      	bne.n	800e462 <rcutils_string_map_reserve+0x12>
 800e46e:	201f      	movs	r0, #31
 800e470:	b003      	add	sp, #12
 800e472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e476:	68ab      	ldr	r3, [r5, #8]
 800e478:	42a3      	cmp	r3, r4
 800e47a:	d049      	beq.n	800e510 <rcutils_string_map_reserve+0xc0>
 800e47c:	6a2f      	ldr	r7, [r5, #32]
 800e47e:	2c00      	cmp	r4, #0
 800e480:	d035      	beq.n	800e4ee <rcutils_string_map_reserve+0x9e>
 800e482:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e486:	d245      	bcs.n	800e514 <rcutils_string_map_reserve+0xc4>
 800e488:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800e48c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800e490:	6828      	ldr	r0, [r5, #0]
 800e492:	4641      	mov	r1, r8
 800e494:	463a      	mov	r2, r7
 800e496:	47c8      	blx	r9
 800e498:	2800      	cmp	r0, #0
 800e49a:	d03b      	beq.n	800e514 <rcutils_string_map_reserve+0xc4>
 800e49c:	6833      	ldr	r3, [r6, #0]
 800e49e:	463a      	mov	r2, r7
 800e4a0:	6018      	str	r0, [r3, #0]
 800e4a2:	4641      	mov	r1, r8
 800e4a4:	6858      	ldr	r0, [r3, #4]
 800e4a6:	47c8      	blx	r9
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d033      	beq.n	800e514 <rcutils_string_map_reserve+0xc4>
 800e4ac:	6835      	ldr	r5, [r6, #0]
 800e4ae:	68ab      	ldr	r3, [r5, #8]
 800e4b0:	6068      	str	r0, [r5, #4]
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	d227      	bcs.n	800e506 <rcutils_string_map_reserve+0xb6>
 800e4b6:	682a      	ldr	r2, [r5, #0]
 800e4b8:	eb00 0108 	add.w	r1, r0, r8
 800e4bc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800e4c0:	428f      	cmp	r7, r1
 800e4c2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e4c6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e4ca:	d203      	bcs.n	800e4d4 <rcutils_string_map_reserve+0x84>
 800e4cc:	eb02 0108 	add.w	r1, r2, r8
 800e4d0:	428e      	cmp	r6, r1
 800e4d2:	d323      	bcc.n	800e51c <rcutils_string_map_reserve+0xcc>
 800e4d4:	1ae3      	subs	r3, r4, r3
 800e4d6:	009a      	lsls	r2, r3, #2
 800e4d8:	4638      	mov	r0, r7
 800e4da:	2100      	movs	r1, #0
 800e4dc:	9201      	str	r2, [sp, #4]
 800e4de:	f006 fd67 	bl	8014fb0 <memset>
 800e4e2:	9a01      	ldr	r2, [sp, #4]
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	f006 fd62 	bl	8014fb0 <memset>
 800e4ec:	e00b      	b.n	800e506 <rcutils_string_map_reserve+0xb6>
 800e4ee:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800e4f2:	6828      	ldr	r0, [r5, #0]
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	47c0      	blx	r8
 800e4f8:	6833      	ldr	r3, [r6, #0]
 800e4fa:	4639      	mov	r1, r7
 800e4fc:	6858      	ldr	r0, [r3, #4]
 800e4fe:	601c      	str	r4, [r3, #0]
 800e500:	47c0      	blx	r8
 800e502:	6835      	ldr	r5, [r6, #0]
 800e504:	606c      	str	r4, [r5, #4]
 800e506:	2000      	movs	r0, #0
 800e508:	60ac      	str	r4, [r5, #8]
 800e50a:	b003      	add	sp, #12
 800e50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e510:	2000      	movs	r0, #0
 800e512:	e7ad      	b.n	800e470 <rcutils_string_map_reserve+0x20>
 800e514:	200a      	movs	r0, #10
 800e516:	e7ab      	b.n	800e470 <rcutils_string_map_reserve+0x20>
 800e518:	200b      	movs	r0, #11
 800e51a:	4770      	bx	lr
 800e51c:	1f13      	subs	r3, r2, #4
 800e51e:	f1ac 0c04 	sub.w	ip, ip, #4
 800e522:	4498      	add	r8, r3
 800e524:	4460      	add	r0, ip
 800e526:	4462      	add	r2, ip
 800e528:	2300      	movs	r3, #0
 800e52a:	f842 3f04 	str.w	r3, [r2, #4]!
 800e52e:	4542      	cmp	r2, r8
 800e530:	f840 3f04 	str.w	r3, [r0, #4]!
 800e534:	d1f9      	bne.n	800e52a <rcutils_string_map_reserve+0xda>
 800e536:	e7e6      	b.n	800e506 <rcutils_string_map_reserve+0xb6>

0800e538 <rcutils_string_map_init>:
 800e538:	b082      	sub	sp, #8
 800e53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53c:	460e      	mov	r6, r1
 800e53e:	a906      	add	r1, sp, #24
 800e540:	e881 000c 	stmia.w	r1, {r2, r3}
 800e544:	b380      	cbz	r0, 800e5a8 <rcutils_string_map_init+0x70>
 800e546:	6807      	ldr	r7, [r0, #0]
 800e548:	4604      	mov	r4, r0
 800e54a:	b12f      	cbz	r7, 800e558 <rcutils_string_map_init+0x20>
 800e54c:	251e      	movs	r5, #30
 800e54e:	4628      	mov	r0, r5
 800e550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e554:	b002      	add	sp, #8
 800e556:	4770      	bx	lr
 800e558:	a806      	add	r0, sp, #24
 800e55a:	f7fb ffb1 	bl	800a4c0 <rcutils_allocator_is_valid>
 800e55e:	b318      	cbz	r0, 800e5a8 <rcutils_string_map_init+0x70>
 800e560:	9b06      	ldr	r3, [sp, #24]
 800e562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e564:	2024      	movs	r0, #36	@ 0x24
 800e566:	4798      	blx	r3
 800e568:	4605      	mov	r5, r0
 800e56a:	6020      	str	r0, [r4, #0]
 800e56c:	b310      	cbz	r0, 800e5b4 <rcutils_string_map_init+0x7c>
 800e56e:	f10d 0e18 	add.w	lr, sp, #24
 800e572:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e576:	f105 0c10 	add.w	ip, r5, #16
 800e57a:	e9c5 7700 	strd	r7, r7, [r5]
 800e57e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800e582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e586:	f8de 3000 	ldr.w	r3, [lr]
 800e58a:	f8cc 3000 	str.w	r3, [ip]
 800e58e:	4631      	mov	r1, r6
 800e590:	4620      	mov	r0, r4
 800e592:	f7ff ff5d 	bl	800e450 <rcutils_string_map_reserve>
 800e596:	4605      	mov	r5, r0
 800e598:	2800      	cmp	r0, #0
 800e59a:	d0d8      	beq.n	800e54e <rcutils_string_map_init+0x16>
 800e59c:	9b07      	ldr	r3, [sp, #28]
 800e59e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e5a0:	6820      	ldr	r0, [r4, #0]
 800e5a2:	4798      	blx	r3
 800e5a4:	6027      	str	r7, [r4, #0]
 800e5a6:	e7d2      	b.n	800e54e <rcutils_string_map_init+0x16>
 800e5a8:	250b      	movs	r5, #11
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5b0:	b002      	add	sp, #8
 800e5b2:	4770      	bx	lr
 800e5b4:	250a      	movs	r5, #10
 800e5b6:	e7ca      	b.n	800e54e <rcutils_string_map_init+0x16>

0800e5b8 <rcutils_string_map_fini>:
 800e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5bc:	b082      	sub	sp, #8
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d039      	beq.n	800e636 <rcutils_string_map_fini+0x7e>
 800e5c2:	6804      	ldr	r4, [r0, #0]
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	d031      	beq.n	800e62e <rcutils_string_map_fini+0x76>
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	b323      	cbz	r3, 800e618 <rcutils_string_map_fini+0x60>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	46a8      	mov	r8, r5
 800e5d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e5d8:	b1d8      	cbz	r0, 800e612 <rcutils_string_map_fini+0x5a>
 800e5da:	6a21      	ldr	r1, [r4, #32]
 800e5dc:	6967      	ldr	r7, [r4, #20]
 800e5de:	9101      	str	r1, [sp, #4]
 800e5e0:	47b8      	blx	r7
 800e5e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e5e6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e5ea:	9901      	ldr	r1, [sp, #4]
 800e5ec:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5f0:	47b8      	blx	r7
 800e5f2:	68e3      	ldr	r3, [r4, #12]
 800e5f4:	6862      	ldr	r2, [r4, #4]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e5fc:	60e3      	str	r3, [r4, #12]
 800e5fe:	6834      	ldr	r4, [r6, #0]
 800e600:	68a3      	ldr	r3, [r4, #8]
 800e602:	3501      	adds	r5, #1
 800e604:	429d      	cmp	r5, r3
 800e606:	d207      	bcs.n	800e618 <rcutils_string_map_fini+0x60>
 800e608:	6822      	ldr	r2, [r4, #0]
 800e60a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e60e:	2800      	cmp	r0, #0
 800e610:	d1e3      	bne.n	800e5da <rcutils_string_map_fini+0x22>
 800e612:	3501      	adds	r5, #1
 800e614:	429d      	cmp	r5, r3
 800e616:	d3dd      	bcc.n	800e5d4 <rcutils_string_map_fini+0x1c>
 800e618:	2100      	movs	r1, #0
 800e61a:	4630      	mov	r0, r6
 800e61c:	f7ff ff18 	bl	800e450 <rcutils_string_map_reserve>
 800e620:	4604      	mov	r4, r0
 800e622:	b920      	cbnz	r0, 800e62e <rcutils_string_map_fini+0x76>
 800e624:	6830      	ldr	r0, [r6, #0]
 800e626:	6943      	ldr	r3, [r0, #20]
 800e628:	6a01      	ldr	r1, [r0, #32]
 800e62a:	4798      	blx	r3
 800e62c:	6034      	str	r4, [r6, #0]
 800e62e:	4620      	mov	r0, r4
 800e630:	b002      	add	sp, #8
 800e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e636:	240b      	movs	r4, #11
 800e638:	4620      	mov	r0, r4
 800e63a:	b002      	add	sp, #8
 800e63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e640 <rcutils_string_map_getn>:
 800e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e644:	b082      	sub	sp, #8
 800e646:	b308      	cbz	r0, 800e68c <rcutils_string_map_getn+0x4c>
 800e648:	6804      	ldr	r4, [r0, #0]
 800e64a:	b304      	cbz	r4, 800e68e <rcutils_string_map_getn+0x4e>
 800e64c:	460d      	mov	r5, r1
 800e64e:	b1e9      	cbz	r1, 800e68c <rcutils_string_map_getn+0x4c>
 800e650:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e654:	6827      	ldr	r7, [r4, #0]
 800e656:	f1b9 0f00 	cmp.w	r9, #0
 800e65a:	d017      	beq.n	800e68c <rcutils_string_map_getn+0x4c>
 800e65c:	4690      	mov	r8, r2
 800e65e:	3f04      	subs	r7, #4
 800e660:	2600      	movs	r6, #0
 800e662:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e666:	9101      	str	r1, [sp, #4]
 800e668:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e66c:	4608      	mov	r0, r1
 800e66e:	3601      	adds	r6, #1
 800e670:	b151      	cbz	r1, 800e688 <rcutils_string_map_getn+0x48>
 800e672:	f7f1 fdbf 	bl	80001f4 <strlen>
 800e676:	4540      	cmp	r0, r8
 800e678:	4602      	mov	r2, r0
 800e67a:	9901      	ldr	r1, [sp, #4]
 800e67c:	bf38      	it	cc
 800e67e:	4642      	movcc	r2, r8
 800e680:	4628      	mov	r0, r5
 800e682:	f006 fcaa 	bl	8014fda <strncmp>
 800e686:	b130      	cbz	r0, 800e696 <rcutils_string_map_getn+0x56>
 800e688:	45b1      	cmp	r9, r6
 800e68a:	d1ea      	bne.n	800e662 <rcutils_string_map_getn+0x22>
 800e68c:	2400      	movs	r4, #0
 800e68e:	4620      	mov	r0, r4
 800e690:	b002      	add	sp, #8
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	6863      	ldr	r3, [r4, #4]
 800e698:	f853 400a 	ldr.w	r4, [r3, sl]
 800e69c:	4620      	mov	r0, r4
 800e69e:	b002      	add	sp, #8
 800e6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e6a4 <rmw_get_zero_initialized_context>:
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	2250      	movs	r2, #80	@ 0x50
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	f006 fc80 	bl	8014fb0 <memset>
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	bd10      	pop	{r4, pc}

0800e6b4 <rmw_get_zero_initialized_init_options>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	2238      	movs	r2, #56	@ 0x38
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	f006 fc78 	bl	8014fb0 <memset>
 800e6c0:	f104 0010 	add.w	r0, r4, #16
 800e6c4:	f000 f806 	bl	800e6d4 <rmw_get_default_security_options>
 800e6c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6cc:	60e3      	str	r3, [r4, #12]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	bd10      	pop	{r4, pc}
 800e6d2:	bf00      	nop

0800e6d4 <rmw_get_default_security_options>:
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	7002      	strb	r2, [r0, #0]
 800e6d8:	6042      	str	r2, [r0, #4]
 800e6da:	4770      	bx	lr

0800e6dc <rmw_get_default_subscription_options>:
 800e6dc:	2200      	movs	r2, #0
 800e6de:	6002      	str	r2, [r0, #0]
 800e6e0:	7102      	strb	r2, [r0, #4]
 800e6e2:	4770      	bx	lr

0800e6e4 <rmw_get_zero_initialized_message_info>:
 800e6e4:	b470      	push	{r4, r5, r6}
 800e6e6:	4d07      	ldr	r5, [pc, #28]	@ (800e704 <rmw_get_zero_initialized_message_info+0x20>)
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6ec:	4634      	mov	r4, r6
 800e6ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e6f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	bc70      	pop	{r4, r5, r6}
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	08016428 	.word	0x08016428

0800e708 <rmw_validate_full_topic_name>:
 800e708:	2800      	cmp	r0, #0
 800e70a:	d062      	beq.n	800e7d2 <rmw_validate_full_topic_name+0xca>
 800e70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e710:	460d      	mov	r5, r1
 800e712:	2900      	cmp	r1, #0
 800e714:	d05f      	beq.n	800e7d6 <rmw_validate_full_topic_name+0xce>
 800e716:	4616      	mov	r6, r2
 800e718:	4604      	mov	r4, r0
 800e71a:	f7f1 fd6b 	bl	80001f4 <strlen>
 800e71e:	b148      	cbz	r0, 800e734 <rmw_validate_full_topic_name+0x2c>
 800e720:	7823      	ldrb	r3, [r4, #0]
 800e722:	2b2f      	cmp	r3, #47	@ 0x2f
 800e724:	d00d      	beq.n	800e742 <rmw_validate_full_topic_name+0x3a>
 800e726:	2302      	movs	r3, #2
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	b13e      	cbz	r6, 800e73c <rmw_validate_full_topic_name+0x34>
 800e72c:	2000      	movs	r0, #0
 800e72e:	6030      	str	r0, [r6, #0]
 800e730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e734:	2301      	movs	r3, #1
 800e736:	602b      	str	r3, [r5, #0]
 800e738:	2e00      	cmp	r6, #0
 800e73a:	d1f7      	bne.n	800e72c <rmw_validate_full_topic_name+0x24>
 800e73c:	2000      	movs	r0, #0
 800e73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e742:	1e47      	subs	r7, r0, #1
 800e744:	5de3      	ldrb	r3, [r4, r7]
 800e746:	2b2f      	cmp	r3, #47	@ 0x2f
 800e748:	d047      	beq.n	800e7da <rmw_validate_full_topic_name+0xd2>
 800e74a:	1e63      	subs	r3, r4, #1
 800e74c:	eb03 0900 	add.w	r9, r3, r0
 800e750:	f1c4 0e01 	rsb	lr, r4, #1
 800e754:	eb0e 0803 	add.w	r8, lr, r3
 800e758:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e75c:	f021 0220 	bic.w	r2, r1, #32
 800e760:	3a41      	subs	r2, #65	@ 0x41
 800e762:	2a19      	cmp	r2, #25
 800e764:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e768:	d90c      	bls.n	800e784 <rmw_validate_full_topic_name+0x7c>
 800e76a:	295f      	cmp	r1, #95	@ 0x5f
 800e76c:	d00a      	beq.n	800e784 <rmw_validate_full_topic_name+0x7c>
 800e76e:	f1bc 0f0a 	cmp.w	ip, #10
 800e772:	d907      	bls.n	800e784 <rmw_validate_full_topic_name+0x7c>
 800e774:	2304      	movs	r3, #4
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	2e00      	cmp	r6, #0
 800e77a:	d0df      	beq.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e77c:	f8c6 8000 	str.w	r8, [r6]
 800e780:	2000      	movs	r0, #0
 800e782:	e7d5      	b.n	800e730 <rmw_validate_full_topic_name+0x28>
 800e784:	454b      	cmp	r3, r9
 800e786:	d1e5      	bne.n	800e754 <rmw_validate_full_topic_name+0x4c>
 800e788:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800e810 <rmw_validate_full_topic_name+0x108>
 800e78c:	2300      	movs	r3, #0
 800e78e:	f107 0801 	add.w	r8, r7, #1
 800e792:	e005      	b.n	800e7a0 <rmw_validate_full_topic_name+0x98>
 800e794:	4611      	mov	r1, r2
 800e796:	4288      	cmp	r0, r1
 800e798:	4613      	mov	r3, r2
 800e79a:	f104 0401 	add.w	r4, r4, #1
 800e79e:	d925      	bls.n	800e7ec <rmw_validate_full_topic_name+0xe4>
 800e7a0:	429f      	cmp	r7, r3
 800e7a2:	f103 0201 	add.w	r2, r3, #1
 800e7a6:	d01e      	beq.n	800e7e6 <rmw_validate_full_topic_name+0xde>
 800e7a8:	7821      	ldrb	r1, [r4, #0]
 800e7aa:	292f      	cmp	r1, #47	@ 0x2f
 800e7ac:	d1f2      	bne.n	800e794 <rmw_validate_full_topic_name+0x8c>
 800e7ae:	f894 c001 	ldrb.w	ip, [r4, #1]
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	d024      	beq.n	800e806 <rmw_validate_full_topic_name+0xfe>
 800e7bc:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800e7c0:	075b      	lsls	r3, r3, #29
 800e7c2:	d5e8      	bpl.n	800e796 <rmw_validate_full_topic_name+0x8e>
 800e7c4:	2306      	movs	r3, #6
 800e7c6:	602b      	str	r3, [r5, #0]
 800e7c8:	2e00      	cmp	r6, #0
 800e7ca:	d0b7      	beq.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e7cc:	6032      	str	r2, [r6, #0]
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	e7ae      	b.n	800e730 <rmw_validate_full_topic_name+0x28>
 800e7d2:	200b      	movs	r0, #11
 800e7d4:	4770      	bx	lr
 800e7d6:	200b      	movs	r0, #11
 800e7d8:	e7aa      	b.n	800e730 <rmw_validate_full_topic_name+0x28>
 800e7da:	2303      	movs	r3, #3
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	2e00      	cmp	r6, #0
 800e7e0:	d0ac      	beq.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e7e2:	6037      	str	r7, [r6, #0]
 800e7e4:	e7aa      	b.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e7e6:	4641      	mov	r1, r8
 800e7e8:	1c7a      	adds	r2, r7, #1
 800e7ea:	e7d4      	b.n	800e796 <rmw_validate_full_topic_name+0x8e>
 800e7ec:	28f7      	cmp	r0, #247	@ 0xf7
 800e7ee:	d802      	bhi.n	800e7f6 <rmw_validate_full_topic_name+0xee>
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	6028      	str	r0, [r5, #0]
 800e7f4:	e79c      	b.n	800e730 <rmw_validate_full_topic_name+0x28>
 800e7f6:	2307      	movs	r3, #7
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	d09e      	beq.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e7fe:	23f6      	movs	r3, #246	@ 0xf6
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	2000      	movs	r0, #0
 800e804:	e794      	b.n	800e730 <rmw_validate_full_topic_name+0x28>
 800e806:	2305      	movs	r3, #5
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	2e00      	cmp	r6, #0
 800e80c:	d1de      	bne.n	800e7cc <rmw_validate_full_topic_name+0xc4>
 800e80e:	e795      	b.n	800e73c <rmw_validate_full_topic_name+0x34>
 800e810:	08016dc0 	.word	0x08016dc0

0800e814 <rmw_validate_namespace_with_size>:
 800e814:	b340      	cbz	r0, 800e868 <rmw_validate_namespace_with_size+0x54>
 800e816:	b5d0      	push	{r4, r6, r7, lr}
 800e818:	4614      	mov	r4, r2
 800e81a:	b0c2      	sub	sp, #264	@ 0x108
 800e81c:	b332      	cbz	r2, 800e86c <rmw_validate_namespace_with_size+0x58>
 800e81e:	2901      	cmp	r1, #1
 800e820:	460f      	mov	r7, r1
 800e822:	461e      	mov	r6, r3
 800e824:	d102      	bne.n	800e82c <rmw_validate_namespace_with_size+0x18>
 800e826:	7803      	ldrb	r3, [r0, #0]
 800e828:	2b2f      	cmp	r3, #47	@ 0x2f
 800e82a:	d019      	beq.n	800e860 <rmw_validate_namespace_with_size+0x4c>
 800e82c:	aa01      	add	r2, sp, #4
 800e82e:	4669      	mov	r1, sp
 800e830:	f7ff ff6a 	bl	800e708 <rmw_validate_full_topic_name>
 800e834:	b990      	cbnz	r0, 800e85c <rmw_validate_namespace_with_size+0x48>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	b14b      	cbz	r3, 800e84e <rmw_validate_namespace_with_size+0x3a>
 800e83a:	2b07      	cmp	r3, #7
 800e83c:	d007      	beq.n	800e84e <rmw_validate_namespace_with_size+0x3a>
 800e83e:	1e5a      	subs	r2, r3, #1
 800e840:	2a05      	cmp	r2, #5
 800e842:	d82b      	bhi.n	800e89c <rmw_validate_namespace_with_size+0x88>
 800e844:	e8df f002 	tbb	[pc, r2]
 800e848:	24211e1b 	.word	0x24211e1b
 800e84c:	1427      	.short	0x1427
 800e84e:	2ff5      	cmp	r7, #245	@ 0xf5
 800e850:	d906      	bls.n	800e860 <rmw_validate_namespace_with_size+0x4c>
 800e852:	2307      	movs	r3, #7
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	b10e      	cbz	r6, 800e85c <rmw_validate_namespace_with_size+0x48>
 800e858:	23f4      	movs	r3, #244	@ 0xf4
 800e85a:	6033      	str	r3, [r6, #0]
 800e85c:	b042      	add	sp, #264	@ 0x108
 800e85e:	bdd0      	pop	{r4, r6, r7, pc}
 800e860:	2000      	movs	r0, #0
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	b042      	add	sp, #264	@ 0x108
 800e866:	bdd0      	pop	{r4, r6, r7, pc}
 800e868:	200b      	movs	r0, #11
 800e86a:	4770      	bx	lr
 800e86c:	200b      	movs	r0, #11
 800e86e:	e7f5      	b.n	800e85c <rmw_validate_namespace_with_size+0x48>
 800e870:	2306      	movs	r3, #6
 800e872:	6023      	str	r3, [r4, #0]
 800e874:	2e00      	cmp	r6, #0
 800e876:	d0f1      	beq.n	800e85c <rmw_validate_namespace_with_size+0x48>
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	6033      	str	r3, [r6, #0]
 800e87c:	e7ee      	b.n	800e85c <rmw_validate_namespace_with_size+0x48>
 800e87e:	2301      	movs	r3, #1
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	e7f7      	b.n	800e874 <rmw_validate_namespace_with_size+0x60>
 800e884:	2302      	movs	r3, #2
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	e7f4      	b.n	800e874 <rmw_validate_namespace_with_size+0x60>
 800e88a:	2303      	movs	r3, #3
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	e7f1      	b.n	800e874 <rmw_validate_namespace_with_size+0x60>
 800e890:	2304      	movs	r3, #4
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	e7ee      	b.n	800e874 <rmw_validate_namespace_with_size+0x60>
 800e896:	2305      	movs	r3, #5
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	e7eb      	b.n	800e874 <rmw_validate_namespace_with_size+0x60>
 800e89c:	4a03      	ldr	r2, [pc, #12]	@ (800e8ac <rmw_validate_namespace_with_size+0x98>)
 800e89e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e8a2:	a802      	add	r0, sp, #8
 800e8a4:	f7ff fd64 	bl	800e370 <rcutils_snprintf>
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e7d7      	b.n	800e85c <rmw_validate_namespace_with_size+0x48>
 800e8ac:	080167e4 	.word	0x080167e4

0800e8b0 <rmw_validate_namespace>:
 800e8b0:	b168      	cbz	r0, 800e8ce <rmw_validate_namespace+0x1e>
 800e8b2:	b570      	push	{r4, r5, r6, lr}
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	4616      	mov	r6, r2
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	f7f1 fc9b 	bl	80001f4 <strlen>
 800e8be:	4633      	mov	r3, r6
 800e8c0:	4601      	mov	r1, r0
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8ca:	f7ff bfa3 	b.w	800e814 <rmw_validate_namespace_with_size>
 800e8ce:	200b      	movs	r0, #11
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop

0800e8d4 <rmw_namespace_validation_result_string>:
 800e8d4:	2807      	cmp	r0, #7
 800e8d6:	bf9a      	itte	ls
 800e8d8:	4b02      	ldrls	r3, [pc, #8]	@ (800e8e4 <rmw_namespace_validation_result_string+0x10>)
 800e8da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e8de:	4802      	ldrhi	r0, [pc, #8]	@ (800e8e8 <rmw_namespace_validation_result_string+0x14>)
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	080169dc 	.word	0x080169dc
 800e8e8:	08016834 	.word	0x08016834

0800e8ec <rmw_validate_node_name>:
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d03b      	beq.n	800e968 <rmw_validate_node_name+0x7c>
 800e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f4:	460f      	mov	r7, r1
 800e8f6:	2900      	cmp	r1, #0
 800e8f8:	d038      	beq.n	800e96c <rmw_validate_node_name+0x80>
 800e8fa:	4615      	mov	r5, r2
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	f7f1 fc79 	bl	80001f4 <strlen>
 800e902:	b1e0      	cbz	r0, 800e93e <rmw_validate_node_name+0x52>
 800e904:	1e63      	subs	r3, r4, #1
 800e906:	eb03 0e00 	add.w	lr, r3, r0
 800e90a:	f1c4 0c01 	rsb	ip, r4, #1
 800e90e:	eb0c 0803 	add.w	r8, ip, r3
 800e912:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800e916:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 800e91a:	f026 0220 	bic.w	r2, r6, #32
 800e91e:	2909      	cmp	r1, #9
 800e920:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 800e924:	d913      	bls.n	800e94e <rmw_validate_node_name+0x62>
 800e926:	2a19      	cmp	r2, #25
 800e928:	d911      	bls.n	800e94e <rmw_validate_node_name+0x62>
 800e92a:	2e5f      	cmp	r6, #95	@ 0x5f
 800e92c:	d00f      	beq.n	800e94e <rmw_validate_node_name+0x62>
 800e92e:	2302      	movs	r3, #2
 800e930:	603b      	str	r3, [r7, #0]
 800e932:	b10d      	cbz	r5, 800e938 <rmw_validate_node_name+0x4c>
 800e934:	f8c5 8000 	str.w	r8, [r5]
 800e938:	2000      	movs	r0, #0
 800e93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93e:	2301      	movs	r3, #1
 800e940:	603b      	str	r3, [r7, #0]
 800e942:	2d00      	cmp	r5, #0
 800e944:	d0f8      	beq.n	800e938 <rmw_validate_node_name+0x4c>
 800e946:	2000      	movs	r0, #0
 800e948:	6028      	str	r0, [r5, #0]
 800e94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e94e:	4573      	cmp	r3, lr
 800e950:	d1dd      	bne.n	800e90e <rmw_validate_node_name+0x22>
 800e952:	7822      	ldrb	r2, [r4, #0]
 800e954:	4b0d      	ldr	r3, [pc, #52]	@ (800e98c <rmw_validate_node_name+0xa0>)
 800e956:	5cd3      	ldrb	r3, [r2, r3]
 800e958:	f013 0304 	ands.w	r3, r3, #4
 800e95c:	d110      	bne.n	800e980 <rmw_validate_node_name+0x94>
 800e95e:	28ff      	cmp	r0, #255	@ 0xff
 800e960:	d806      	bhi.n	800e970 <rmw_validate_node_name+0x84>
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	4618      	mov	r0, r3
 800e966:	e7e8      	b.n	800e93a <rmw_validate_node_name+0x4e>
 800e968:	200b      	movs	r0, #11
 800e96a:	4770      	bx	lr
 800e96c:	200b      	movs	r0, #11
 800e96e:	e7e4      	b.n	800e93a <rmw_validate_node_name+0x4e>
 800e970:	2204      	movs	r2, #4
 800e972:	603a      	str	r2, [r7, #0]
 800e974:	2d00      	cmp	r5, #0
 800e976:	d0df      	beq.n	800e938 <rmw_validate_node_name+0x4c>
 800e978:	22fe      	movs	r2, #254	@ 0xfe
 800e97a:	4618      	mov	r0, r3
 800e97c:	602a      	str	r2, [r5, #0]
 800e97e:	e7dc      	b.n	800e93a <rmw_validate_node_name+0x4e>
 800e980:	2303      	movs	r3, #3
 800e982:	603b      	str	r3, [r7, #0]
 800e984:	2d00      	cmp	r5, #0
 800e986:	d1de      	bne.n	800e946 <rmw_validate_node_name+0x5a>
 800e988:	e7d6      	b.n	800e938 <rmw_validate_node_name+0x4c>
 800e98a:	bf00      	nop
 800e98c:	08016dc0 	.word	0x08016dc0

0800e990 <rmw_node_name_validation_result_string>:
 800e990:	2804      	cmp	r0, #4
 800e992:	bf9a      	itte	ls
 800e994:	4b02      	ldrls	r3, [pc, #8]	@ (800e9a0 <rmw_node_name_validation_result_string+0x10>)
 800e996:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e99a:	4802      	ldrhi	r0, [pc, #8]	@ (800e9a4 <rmw_node_name_validation_result_string+0x14>)
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	08016ae8 	.word	0x08016ae8
 800e9a4:	080169fc 	.word	0x080169fc

0800e9a8 <rmw_destroy_client>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	b128      	cbz	r0, 800e9b8 <rmw_destroy_client+0x10>
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	6800      	ldr	r0, [r0, #0]
 800e9b0:	460d      	mov	r5, r1
 800e9b2:	f001 fba1 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800e9b6:	b910      	cbnz	r0, 800e9be <rmw_destroy_client+0x16>
 800e9b8:	2401      	movs	r4, #1
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	bd70      	pop	{r4, r5, r6, pc}
 800e9be:	6863      	ldr	r3, [r4, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d0f9      	beq.n	800e9b8 <rmw_destroy_client+0x10>
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	d0f7      	beq.n	800e9b8 <rmw_destroy_client+0x10>
 800e9c8:	6828      	ldr	r0, [r5, #0]
 800e9ca:	f001 fb95 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d0f2      	beq.n	800e9b8 <rmw_destroy_client+0x10>
 800e9d2:	686e      	ldr	r6, [r5, #4]
 800e9d4:	2e00      	cmp	r6, #0
 800e9d6:	d0ef      	beq.n	800e9b8 <rmw_destroy_client+0x10>
 800e9d8:	6864      	ldr	r4, [r4, #4]
 800e9da:	6932      	ldr	r2, [r6, #16]
 800e9dc:	6920      	ldr	r0, [r4, #16]
 800e9de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e9e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9e6:	6819      	ldr	r1, [r3, #0]
 800e9e8:	f001 fe24 	bl	8010634 <uxr_buffer_cancel_data>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	6920      	ldr	r0, [r4, #16]
 800e9f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e9f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e9f8:	f001 fafe 	bl	800fff8 <run_xrce_session>
 800e9fc:	6920      	ldr	r0, [r4, #16]
 800e9fe:	6932      	ldr	r2, [r6, #16]
 800ea00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea08:	6819      	ldr	r1, [r3, #0]
 800ea0a:	f001 fb8f 	bl	801012c <uxr_buffer_delete_entity>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	6920      	ldr	r0, [r4, #16]
 800ea12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ea16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea1a:	f001 faed 	bl	800fff8 <run_xrce_session>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	4628      	mov	r0, r5
 800ea22:	bf14      	ite	ne
 800ea24:	2400      	movne	r4, #0
 800ea26:	2402      	moveq	r4, #2
 800ea28:	f001 f9d8 	bl	800fddc <rmw_uxrce_fini_client_memory>
 800ea2c:	e7c5      	b.n	800e9ba <rmw_destroy_client+0x12>
 800ea2e:	bf00      	nop

0800ea30 <rmw_get_implementation_identifier>:
 800ea30:	4b01      	ldr	r3, [pc, #4]	@ (800ea38 <rmw_get_implementation_identifier+0x8>)
 800ea32:	6818      	ldr	r0, [r3, #0]
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	08016d4c 	.word	0x08016d4c

0800ea3c <rmw_init_options_init>:
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea42:	ad09      	add	r5, sp, #36	@ 0x24
 800ea44:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ea48:	b130      	cbz	r0, 800ea58 <rmw_init_options_init+0x1c>
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f7fb fd37 	bl	800a4c0 <rcutils_allocator_is_valid>
 800ea52:	b108      	cbz	r0, 800ea58 <rmw_init_options_init+0x1c>
 800ea54:	68a3      	ldr	r3, [r4, #8]
 800ea56:	b123      	cbz	r3, 800ea62 <rmw_init_options_init+0x26>
 800ea58:	200b      	movs	r0, #11
 800ea5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea5e:	b004      	add	sp, #16
 800ea60:	4770      	bx	lr
 800ea62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea64:	4f1c      	ldr	r7, [pc, #112]	@ (800ead8 <rmw_init_options_init+0x9c>)
 800ea66:	682e      	ldr	r6, [r5, #0]
 800ea68:	683d      	ldr	r5, [r7, #0]
 800ea6a:	60a5      	str	r5, [r4, #8]
 800ea6c:	f04f 0800 	mov.w	r8, #0
 800ea70:	f04f 0900 	mov.w	r9, #0
 800ea74:	f104 0520 	add.w	r5, r4, #32
 800ea78:	e9c4 8900 	strd	r8, r9, [r4]
 800ea7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea7e:	4b17      	ldr	r3, [pc, #92]	@ (800eadc <rmw_init_options_init+0xa0>)
 800ea80:	4817      	ldr	r0, [pc, #92]	@ (800eae0 <rmw_init_options_init+0xa4>)
 800ea82:	602e      	str	r6, [r5, #0]
 800ea84:	4917      	ldr	r1, [pc, #92]	@ (800eae4 <rmw_init_options_init+0xa8>)
 800ea86:	61e3      	str	r3, [r4, #28]
 800ea88:	2203      	movs	r2, #3
 800ea8a:	f001 f8f7 	bl	800fc7c <rmw_uxrce_init_init_options_impl_memory>
 800ea8e:	4814      	ldr	r0, [pc, #80]	@ (800eae0 <rmw_init_options_init+0xa4>)
 800ea90:	f004 ff2c 	bl	80138ec <get_memory>
 800ea94:	b1e8      	cbz	r0, 800ead2 <rmw_init_options_init+0x96>
 800ea96:	4a14      	ldr	r2, [pc, #80]	@ (800eae8 <rmw_init_options_init+0xac>)
 800ea98:	68c3      	ldr	r3, [r0, #12]
 800ea9a:	6851      	ldr	r1, [r2, #4]
 800ea9c:	7810      	ldrb	r0, [r2, #0]
 800ea9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaa0:	7418      	strb	r0, [r3, #16]
 800eaa2:	6159      	str	r1, [r3, #20]
 800eaa4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800eaa8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800eaac:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800eab0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800eab4:	f003 fd6a 	bl	801258c <uxr_nanos>
 800eab8:	f005 ffd4 	bl	8014a64 <srand>
 800eabc:	f006 f800 	bl	8014ac0 <rand>
 800eac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eac2:	6298      	str	r0, [r3, #40]	@ 0x28
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d0f9      	beq.n	800eabc <rmw_init_options_init+0x80>
 800eac8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eacc:	2000      	movs	r0, #0
 800eace:	b004      	add	sp, #16
 800ead0:	4770      	bx	lr
 800ead2:	2001      	movs	r0, #1
 800ead4:	e7c1      	b.n	800ea5a <rmw_init_options_init+0x1e>
 800ead6:	bf00      	nop
 800ead8:	08016d4c 	.word	0x08016d4c
 800eadc:	08016634 	.word	0x08016634
 800eae0:	2000c6fc 	.word	0x2000c6fc
 800eae4:	2000c350 	.word	0x2000c350
 800eae8:	200093e0 	.word	0x200093e0

0800eaec <rmw_init_options_copy>:
 800eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaee:	b158      	cbz	r0, 800eb08 <rmw_init_options_copy+0x1c>
 800eaf0:	460e      	mov	r6, r1
 800eaf2:	b149      	cbz	r1, 800eb08 <rmw_init_options_copy+0x1c>
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	6880      	ldr	r0, [r0, #8]
 800eaf8:	b120      	cbz	r0, 800eb04 <rmw_init_options_copy+0x18>
 800eafa:	4b1b      	ldr	r3, [pc, #108]	@ (800eb68 <rmw_init_options_copy+0x7c>)
 800eafc:	6819      	ldr	r1, [r3, #0]
 800eafe:	f7f1 fb6f 	bl	80001e0 <strcmp>
 800eb02:	bb60      	cbnz	r0, 800eb5e <rmw_init_options_copy+0x72>
 800eb04:	68b3      	ldr	r3, [r6, #8]
 800eb06:	b113      	cbz	r3, 800eb0e <rmw_init_options_copy+0x22>
 800eb08:	230b      	movs	r3, #11
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb0e:	4623      	mov	r3, r4
 800eb10:	4632      	mov	r2, r6
 800eb12:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800eb16:	681d      	ldr	r5, [r3, #0]
 800eb18:	6858      	ldr	r0, [r3, #4]
 800eb1a:	6899      	ldr	r1, [r3, #8]
 800eb1c:	68df      	ldr	r7, [r3, #12]
 800eb1e:	60d7      	str	r7, [r2, #12]
 800eb20:	3310      	adds	r3, #16
 800eb22:	4563      	cmp	r3, ip
 800eb24:	6015      	str	r5, [r2, #0]
 800eb26:	6050      	str	r0, [r2, #4]
 800eb28:	6091      	str	r1, [r2, #8]
 800eb2a:	f102 0210 	add.w	r2, r2, #16
 800eb2e:	d1f2      	bne.n	800eb16 <rmw_init_options_copy+0x2a>
 800eb30:	6819      	ldr	r1, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	480d      	ldr	r0, [pc, #52]	@ (800eb6c <rmw_init_options_copy+0x80>)
 800eb36:	6053      	str	r3, [r2, #4]
 800eb38:	6011      	str	r1, [r2, #0]
 800eb3a:	f004 fed7 	bl	80138ec <get_memory>
 800eb3e:	b188      	cbz	r0, 800eb64 <rmw_init_options_copy+0x78>
 800eb40:	68c5      	ldr	r5, [r0, #12]
 800eb42:	6375      	str	r5, [r6, #52]	@ 0x34
 800eb44:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800eb46:	3610      	adds	r6, #16
 800eb48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eb4a:	f105 0410 	add.w	r4, r5, #16
 800eb4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800eb54:	2300      	movs	r3, #0
 800eb56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb5e:	230c      	movs	r3, #12
 800eb60:	4618      	mov	r0, r3
 800eb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb64:	2301      	movs	r3, #1
 800eb66:	e7d0      	b.n	800eb0a <rmw_init_options_copy+0x1e>
 800eb68:	08016d4c 	.word	0x08016d4c
 800eb6c:	2000c6fc 	.word	0x2000c6fc

0800eb70 <rmw_init_options_fini>:
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d036      	beq.n	800ebe2 <rmw_init_options_fini+0x72>
 800eb74:	b530      	push	{r4, r5, lr}
 800eb76:	4604      	mov	r4, r0
 800eb78:	b08f      	sub	sp, #60	@ 0x3c
 800eb7a:	3020      	adds	r0, #32
 800eb7c:	f7fb fca0 	bl	800a4c0 <rcutils_allocator_is_valid>
 800eb80:	b328      	cbz	r0, 800ebce <rmw_init_options_fini+0x5e>
 800eb82:	68a0      	ldr	r0, [r4, #8]
 800eb84:	b120      	cbz	r0, 800eb90 <rmw_init_options_fini+0x20>
 800eb86:	4b18      	ldr	r3, [pc, #96]	@ (800ebe8 <rmw_init_options_fini+0x78>)
 800eb88:	6819      	ldr	r1, [r3, #0]
 800eb8a:	f7f1 fb29 	bl	80001e0 <strcmp>
 800eb8e:	bb30      	cbnz	r0, 800ebde <rmw_init_options_fini+0x6e>
 800eb90:	4b16      	ldr	r3, [pc, #88]	@ (800ebec <rmw_init_options_fini+0x7c>)
 800eb92:	6819      	ldr	r1, [r3, #0]
 800eb94:	b1f9      	cbz	r1, 800ebd6 <rmw_init_options_fini+0x66>
 800eb96:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800eb98:	e001      	b.n	800eb9e <rmw_init_options_fini+0x2e>
 800eb9a:	6889      	ldr	r1, [r1, #8]
 800eb9c:	b1d9      	cbz	r1, 800ebd6 <rmw_init_options_fini+0x66>
 800eb9e:	68cb      	ldr	r3, [r1, #12]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d1fa      	bne.n	800eb9a <rmw_init_options_fini+0x2a>
 800eba4:	4811      	ldr	r0, [pc, #68]	@ (800ebec <rmw_init_options_fini+0x7c>)
 800eba6:	f004 feb1 	bl	801390c <put_memory>
 800ebaa:	466d      	mov	r5, sp
 800ebac:	4668      	mov	r0, sp
 800ebae:	f7ff fd81 	bl	800e6b4 <rmw_get_zero_initialized_init_options>
 800ebb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebc2:	e884 0003 	stmia.w	r4, {r0, r1}
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4618      	mov	r0, r3
 800ebca:	b00f      	add	sp, #60	@ 0x3c
 800ebcc:	bd30      	pop	{r4, r5, pc}
 800ebce:	230b      	movs	r3, #11
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	b00f      	add	sp, #60	@ 0x3c
 800ebd4:	bd30      	pop	{r4, r5, pc}
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	4618      	mov	r0, r3
 800ebda:	b00f      	add	sp, #60	@ 0x3c
 800ebdc:	bd30      	pop	{r4, r5, pc}
 800ebde:	230c      	movs	r3, #12
 800ebe0:	e7f2      	b.n	800ebc8 <rmw_init_options_fini+0x58>
 800ebe2:	230b      	movs	r3, #11
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	4770      	bx	lr
 800ebe8:	08016d4c 	.word	0x08016d4c
 800ebec:	2000c6fc 	.word	0x2000c6fc

0800ebf0 <rmw_init>:
 800ebf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f000 80d6 	beq.w	800eda8 <rmw_init+0x1b8>
 800ebfc:	460e      	mov	r6, r1
 800ebfe:	2900      	cmp	r1, #0
 800ec00:	f000 80d2 	beq.w	800eda8 <rmw_init+0x1b8>
 800ec04:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ec06:	4605      	mov	r5, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 80cd 	beq.w	800eda8 <rmw_init+0x1b8>
 800ec0e:	4b79      	ldr	r3, [pc, #484]	@ (800edf4 <rmw_init+0x204>)
 800ec10:	6880      	ldr	r0, [r0, #8]
 800ec12:	f8d3 9000 	ldr.w	r9, [r3]
 800ec16:	b128      	cbz	r0, 800ec24 <rmw_init+0x34>
 800ec18:	4649      	mov	r1, r9
 800ec1a:	f7f1 fae1 	bl	80001e0 <strcmp>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f040 80cc 	bne.w	800edbc <rmw_init+0x1cc>
 800ec24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ec28:	68eb      	ldr	r3, [r5, #12]
 800ec2a:	61f3      	str	r3, [r6, #28]
 800ec2c:	e9c6 0100 	strd	r0, r1, [r6]
 800ec30:	2201      	movs	r2, #1
 800ec32:	4971      	ldr	r1, [pc, #452]	@ (800edf8 <rmw_init+0x208>)
 800ec34:	4871      	ldr	r0, [pc, #452]	@ (800edfc <rmw_init+0x20c>)
 800ec36:	f8c6 9008 	str.w	r9, [r6, #8]
 800ec3a:	f000 ffc7 	bl	800fbcc <rmw_uxrce_init_session_memory>
 800ec3e:	4870      	ldr	r0, [pc, #448]	@ (800ee00 <rmw_init+0x210>)
 800ec40:	4970      	ldr	r1, [pc, #448]	@ (800ee04 <rmw_init+0x214>)
 800ec42:	2204      	movs	r2, #4
 800ec44:	f000 fffc 	bl	800fc40 <rmw_uxrce_init_static_input_buffer_memory>
 800ec48:	486c      	ldr	r0, [pc, #432]	@ (800edfc <rmw_init+0x20c>)
 800ec4a:	f004 fe4f 	bl	80138ec <get_memory>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	f000 80af 	beq.w	800edb2 <rmw_init+0x1c2>
 800ec54:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800ec56:	68c4      	ldr	r4, [r0, #12]
 800ec58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec5a:	7c39      	ldrb	r1, [r7, #16]
 800ec5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ec60:	9001      	str	r0, [sp, #4]
 800ec62:	6a38      	ldr	r0, [r7, #32]
 800ec64:	9000      	str	r0, [sp, #0]
 800ec66:	f104 0a10 	add.w	sl, r4, #16
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	f001 fc36 	bl	80104dc <uxr_set_custom_transport_callbacks>
 800ec70:	f241 5294 	movw	r2, #5524	@ 0x1594
 800ec74:	f241 5398 	movw	r3, #5528	@ 0x1598
 800ec78:	f04f 0800 	mov.w	r8, #0
 800ec7c:	f241 509c 	movw	r0, #5532	@ 0x159c
 800ec80:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800ec84:	f844 8002 	str.w	r8, [r4, r2]
 800ec88:	f844 8003 	str.w	r8, [r4, r3]
 800ec8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec90:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800ec94:	f844 8000 	str.w	r8, [r4, r0]
 800ec98:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800ec9c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800eca0:	4859      	ldr	r0, [pc, #356]	@ (800ee08 <rmw_init+0x218>)
 800eca2:	f8c1 8000 	str.w	r8, [r1]
 800eca6:	2201      	movs	r2, #1
 800eca8:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800ecac:	4957      	ldr	r1, [pc, #348]	@ (800ee0c <rmw_init+0x21c>)
 800ecae:	64b4      	str	r4, [r6, #72]	@ 0x48
 800ecb0:	f000 ff72 	bl	800fb98 <rmw_uxrce_init_node_memory>
 800ecb4:	4956      	ldr	r1, [pc, #344]	@ (800ee10 <rmw_init+0x220>)
 800ecb6:	4857      	ldr	r0, [pc, #348]	@ (800ee14 <rmw_init+0x224>)
 800ecb8:	2205      	movs	r2, #5
 800ecba:	f000 ff53 	bl	800fb64 <rmw_uxrce_init_subscription_memory>
 800ecbe:	4956      	ldr	r1, [pc, #344]	@ (800ee18 <rmw_init+0x228>)
 800ecc0:	4856      	ldr	r0, [pc, #344]	@ (800ee1c <rmw_init+0x22c>)
 800ecc2:	220a      	movs	r2, #10
 800ecc4:	f000 ff34 	bl	800fb30 <rmw_uxrce_init_publisher_memory>
 800ecc8:	4955      	ldr	r1, [pc, #340]	@ (800ee20 <rmw_init+0x230>)
 800ecca:	4856      	ldr	r0, [pc, #344]	@ (800ee24 <rmw_init+0x234>)
 800eccc:	2201      	movs	r2, #1
 800ecce:	f000 fefb 	bl	800fac8 <rmw_uxrce_init_service_memory>
 800ecd2:	4955      	ldr	r1, [pc, #340]	@ (800ee28 <rmw_init+0x238>)
 800ecd4:	4855      	ldr	r0, [pc, #340]	@ (800ee2c <rmw_init+0x23c>)
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f000 ff10 	bl	800fafc <rmw_uxrce_init_client_memory>
 800ecdc:	4954      	ldr	r1, [pc, #336]	@ (800ee30 <rmw_init+0x240>)
 800ecde:	4855      	ldr	r0, [pc, #340]	@ (800ee34 <rmw_init+0x244>)
 800ece0:	220f      	movs	r2, #15
 800ece2:	f000 ff91 	bl	800fc08 <rmw_uxrce_init_topic_memory>
 800ece6:	4954      	ldr	r1, [pc, #336]	@ (800ee38 <rmw_init+0x248>)
 800ece8:	4854      	ldr	r0, [pc, #336]	@ (800ee3c <rmw_init+0x24c>)
 800ecea:	2203      	movs	r2, #3
 800ecec:	f000 ffc6 	bl	800fc7c <rmw_uxrce_init_init_options_impl_memory>
 800ecf0:	4953      	ldr	r1, [pc, #332]	@ (800ee40 <rmw_init+0x250>)
 800ecf2:	4854      	ldr	r0, [pc, #336]	@ (800ee44 <rmw_init+0x254>)
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	f000 ffdb 	bl	800fcb0 <rmw_uxrce_init_wait_set_memory>
 800ecfa:	4953      	ldr	r1, [pc, #332]	@ (800ee48 <rmw_init+0x258>)
 800ecfc:	4853      	ldr	r0, [pc, #332]	@ (800ee4c <rmw_init+0x25c>)
 800ecfe:	2204      	movs	r2, #4
 800ed00:	f000 fff2 	bl	800fce8 <rmw_uxrce_init_guard_condition_memory>
 800ed04:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ed06:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800ed08:	4642      	mov	r2, r8
 800ed0a:	f000 fd27 	bl	800f75c <rmw_uxrce_transport_init>
 800ed0e:	4607      	mov	r7, r0
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d158      	bne.n	800edc6 <rmw_init+0x1d6>
 800ed14:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ed16:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ed1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ed22:	f001 fe01 	bl	8010928 <uxr_init_session>
 800ed26:	494a      	ldr	r1, [pc, #296]	@ (800ee50 <rmw_init+0x260>)
 800ed28:	4622      	mov	r2, r4
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	f001 fe1e 	bl	801096c <uxr_set_topic_callback>
 800ed30:	4948      	ldr	r1, [pc, #288]	@ (800ee54 <rmw_init+0x264>)
 800ed32:	463a      	mov	r2, r7
 800ed34:	4628      	mov	r0, r5
 800ed36:	f001 fe15 	bl	8010964 <uxr_set_status_callback>
 800ed3a:	4947      	ldr	r1, [pc, #284]	@ (800ee58 <rmw_init+0x268>)
 800ed3c:	463a      	mov	r2, r7
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f001 fe18 	bl	8010974 <uxr_set_request_callback>
 800ed44:	4945      	ldr	r1, [pc, #276]	@ (800ee5c <rmw_init+0x26c>)
 800ed46:	463a      	mov	r2, r7
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f001 fe17 	bl	801097c <uxr_set_reply_callback>
 800ed4e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed52:	2304      	movs	r3, #4
 800ed54:	0092      	lsls	r2, r2, #2
 800ed56:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f001 fe4e 	bl	80109fc <uxr_create_input_reliable_stream>
 800ed60:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed64:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ed68:	0092      	lsls	r2, r2, #2
 800ed6a:	2304      	movs	r3, #4
 800ed6c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ed70:	4628      	mov	r0, r5
 800ed72:	f001 fe19 	bl	80109a8 <uxr_create_output_reliable_stream>
 800ed76:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	f001 fe38 	bl	80109f0 <uxr_create_input_best_effort_stream>
 800ed80:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ed84:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ed88:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	3114      	adds	r1, #20
 800ed90:	f001 fdf8 	bl	8010984 <uxr_create_output_best_effort_stream>
 800ed94:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f002 fa89 	bl	80112b0 <uxr_create_session>
 800ed9e:	b1f8      	cbz	r0, 800ede0 <rmw_init+0x1f0>
 800eda0:	4638      	mov	r0, r7
 800eda2:	b002      	add	sp, #8
 800eda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda8:	270b      	movs	r7, #11
 800edaa:	4638      	mov	r0, r7
 800edac:	b002      	add	sp, #8
 800edae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb2:	2701      	movs	r7, #1
 800edb4:	4638      	mov	r0, r7
 800edb6:	b002      	add	sp, #8
 800edb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbc:	270c      	movs	r7, #12
 800edbe:	4638      	mov	r0, r7
 800edc0:	b002      	add	sp, #8
 800edc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc6:	4650      	mov	r0, sl
 800edc8:	f001 fbc8 	bl	801055c <uxr_close_custom_transport>
 800edcc:	480b      	ldr	r0, [pc, #44]	@ (800edfc <rmw_init+0x20c>)
 800edce:	4621      	mov	r1, r4
 800edd0:	f004 fd9c 	bl	801390c <put_memory>
 800edd4:	4638      	mov	r0, r7
 800edd6:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800edda:	b002      	add	sp, #8
 800eddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ede0:	4650      	mov	r0, sl
 800ede2:	f001 fbbb 	bl	801055c <uxr_close_custom_transport>
 800ede6:	4805      	ldr	r0, [pc, #20]	@ (800edfc <rmw_init+0x20c>)
 800ede8:	4621      	mov	r1, r4
 800edea:	f004 fd8f 	bl	801390c <put_memory>
 800edee:	64b7      	str	r7, [r6, #72]	@ 0x48
 800edf0:	2701      	movs	r7, #1
 800edf2:	e7d5      	b.n	800eda0 <rmw_init+0x1b0>
 800edf4:	08016d4c 	.word	0x08016d4c
 800edf8:	2000c7d8 	.word	0x2000c7d8
 800edfc:	2000c5a8 	.word	0x2000c5a8
 800ee00:	20009400 	.word	0x20009400
 800ee04:	2000a1e0 	.word	0x2000a1e0
 800ee08:	2000c3d4 	.word	0x2000c3d4
 800ee0c:	2000c5b8 	.word	0x2000c5b8
 800ee10:	20009d08 	.word	0x20009d08
 800ee14:	2000c66c 	.word	0x2000c66c
 800ee18:	20009420 	.word	0x20009420
 800ee1c:	20009410 	.word	0x20009410
 800ee20:	2000c710 	.word	0x2000c710
 800ee24:	2000c65c 	.word	0x2000c65c
 800ee28:	2000a118 	.word	0x2000a118
 800ee2c:	20009c90 	.word	0x20009c90
 800ee30:	2000c3e4 	.word	0x2000c3e4
 800ee34:	2000c598 	.word	0x2000c598
 800ee38:	2000c350 	.word	0x2000c350
 800ee3c:	2000c6fc 	.word	0x2000c6fc
 800ee40:	2000c2e0 	.word	0x2000c2e0
 800ee44:	2000dd80 	.word	0x2000dd80
 800ee48:	2000c67c 	.word	0x2000c67c
 800ee4c:	2000c588 	.word	0x2000c588
 800ee50:	0801372d 	.word	0x0801372d
 800ee54:	08013725 	.word	0x08013725
 800ee58:	080137c1 	.word	0x080137c1
 800ee5c:	08013859 	.word	0x08013859

0800ee60 <rmw_context_fini>:
 800ee60:	4b17      	ldr	r3, [pc, #92]	@ (800eec0 <rmw_context_fini+0x60>)
 800ee62:	b570      	push	{r4, r5, r6, lr}
 800ee64:	681c      	ldr	r4, [r3, #0]
 800ee66:	4605      	mov	r5, r0
 800ee68:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800ee6a:	b33c      	cbz	r4, 800eebc <rmw_context_fini+0x5c>
 800ee6c:	2600      	movs	r6, #0
 800ee6e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800ee72:	691a      	ldr	r2, [r3, #16]
 800ee74:	4282      	cmp	r2, r0
 800ee76:	d018      	beq.n	800eeaa <rmw_context_fini+0x4a>
 800ee78:	2c00      	cmp	r4, #0
 800ee7a:	d1f8      	bne.n	800ee6e <rmw_context_fini+0xe>
 800ee7c:	b188      	cbz	r0, 800eea2 <rmw_context_fini+0x42>
 800ee7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ee82:	789b      	ldrb	r3, [r3, #2]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	bf14      	ite	ne
 800ee88:	210a      	movne	r1, #10
 800ee8a:	2100      	moveq	r1, #0
 800ee8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee90:	f002 fbd0 	bl	8011634 <uxr_delete_session_retries>
 800ee94:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ee96:	f000 ff41 	bl	800fd1c <rmw_uxrce_fini_session_memory>
 800ee9a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ee9c:	3010      	adds	r0, #16
 800ee9e:	f001 fb5d 	bl	801055c <uxr_close_custom_transport>
 800eea2:	2300      	movs	r3, #0
 800eea4:	4630      	mov	r0, r6
 800eea6:	64ab      	str	r3, [r5, #72]	@ 0x48
 800eea8:	bd70      	pop	{r4, r5, r6, pc}
 800eeaa:	f103 0018 	add.w	r0, r3, #24
 800eeae:	f000 f89b 	bl	800efe8 <rmw_destroy_node>
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800eeb6:	2c00      	cmp	r4, #0
 800eeb8:	d1d9      	bne.n	800ee6e <rmw_context_fini+0xe>
 800eeba:	e7df      	b.n	800ee7c <rmw_context_fini+0x1c>
 800eebc:	4626      	mov	r6, r4
 800eebe:	e7dd      	b.n	800ee7c <rmw_context_fini+0x1c>
 800eec0:	2000c3d4 	.word	0x2000c3d4

0800eec4 <create_node>:
 800eec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eec8:	b083      	sub	sp, #12
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d05f      	beq.n	800ef8e <create_node+0xca>
 800eece:	4606      	mov	r6, r0
 800eed0:	4835      	ldr	r0, [pc, #212]	@ (800efa8 <create_node+0xe4>)
 800eed2:	460f      	mov	r7, r1
 800eed4:	4690      	mov	r8, r2
 800eed6:	461d      	mov	r5, r3
 800eed8:	f004 fd08 	bl	80138ec <get_memory>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d056      	beq.n	800ef8e <create_node+0xca>
 800eee0:	68c4      	ldr	r4, [r0, #12]
 800eee2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800eee4:	6123      	str	r3, [r4, #16]
 800eee6:	f7ff fda3 	bl	800ea30 <rmw_get_implementation_identifier>
 800eeea:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800eeee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800eef2:	f8c4 9020 	str.w	r9, [r4, #32]
 800eef6:	4630      	mov	r0, r6
 800eef8:	f7f1 f97c 	bl	80001f4 <strlen>
 800eefc:	1c42      	adds	r2, r0, #1
 800eefe:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef00:	f104 0518 	add.w	r5, r4, #24
 800ef04:	d840      	bhi.n	800ef88 <create_node+0xc4>
 800ef06:	4648      	mov	r0, r9
 800ef08:	4631      	mov	r1, r6
 800ef0a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ef0e:	f006 f918 	bl	8015142 <memcpy>
 800ef12:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ef16:	4638      	mov	r0, r7
 800ef18:	f7f1 f96c 	bl	80001f4 <strlen>
 800ef1c:	1c42      	adds	r2, r0, #1
 800ef1e:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef20:	d832      	bhi.n	800ef88 <create_node+0xc4>
 800ef22:	4639      	mov	r1, r7
 800ef24:	4648      	mov	r0, r9
 800ef26:	f006 f90c 	bl	8015142 <memcpy>
 800ef2a:	f241 5394 	movw	r3, #5524	@ 0x1594
 800ef2e:	6922      	ldr	r2, [r4, #16]
 800ef30:	5ad0      	ldrh	r0, [r2, r3]
 800ef32:	2101      	movs	r1, #1
 800ef34:	eb00 0c01 	add.w	ip, r0, r1
 800ef38:	f822 c003 	strh.w	ip, [r2, r3]
 800ef3c:	f001 fb12 	bl	8010564 <uxr_object_id>
 800ef40:	6160      	str	r0, [r4, #20]
 800ef42:	783b      	ldrb	r3, [r7, #0]
 800ef44:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef46:	d127      	bne.n	800ef98 <create_node+0xd4>
 800ef48:	787b      	ldrb	r3, [r7, #1]
 800ef4a:	bb2b      	cbnz	r3, 800ef98 <create_node+0xd4>
 800ef4c:	4a17      	ldr	r2, [pc, #92]	@ (800efac <create_node+0xe8>)
 800ef4e:	4818      	ldr	r0, [pc, #96]	@ (800efb0 <create_node+0xec>)
 800ef50:	4633      	mov	r3, r6
 800ef52:	213c      	movs	r1, #60	@ 0x3c
 800ef54:	f005 ff62 	bl	8014e1c <sniprintf>
 800ef58:	6920      	ldr	r0, [r4, #16]
 800ef5a:	4b15      	ldr	r3, [pc, #84]	@ (800efb0 <create_node+0xec>)
 800ef5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	2306      	movs	r3, #6
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	6811      	ldr	r1, [r2, #0]
 800ef68:	6962      	ldr	r2, [r4, #20]
 800ef6a:	fa1f f388 	uxth.w	r3, r8
 800ef6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef72:	f001 f927 	bl	80101c4 <uxr_buffer_create_participant_bin>
 800ef76:	4602      	mov	r2, r0
 800ef78:	6920      	ldr	r0, [r4, #16]
 800ef7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ef7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ef82:	f001 f839 	bl	800fff8 <run_xrce_session>
 800ef86:	b918      	cbnz	r0, 800ef90 <create_node+0xcc>
 800ef88:	4628      	mov	r0, r5
 800ef8a:	f000 fecd 	bl	800fd28 <rmw_uxrce_fini_node_memory>
 800ef8e:	2500      	movs	r5, #0
 800ef90:	4628      	mov	r0, r5
 800ef92:	b003      	add	sp, #12
 800ef94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef98:	4a06      	ldr	r2, [pc, #24]	@ (800efb4 <create_node+0xf0>)
 800ef9a:	9600      	str	r6, [sp, #0]
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	213c      	movs	r1, #60	@ 0x3c
 800efa0:	4803      	ldr	r0, [pc, #12]	@ (800efb0 <create_node+0xec>)
 800efa2:	f005 ff3b 	bl	8014e1c <sniprintf>
 800efa6:	e7d7      	b.n	800ef58 <create_node+0x94>
 800efa8:	2000c3d4 	.word	0x2000c3d4
 800efac:	08016b0c 	.word	0x08016b0c
 800efb0:	20009184 	.word	0x20009184
 800efb4:	080165f8 	.word	0x080165f8

0800efb8 <rmw_create_node>:
 800efb8:	b199      	cbz	r1, 800efe2 <rmw_create_node+0x2a>
 800efba:	b430      	push	{r4, r5}
 800efbc:	4615      	mov	r5, r2
 800efbe:	461a      	mov	r2, r3
 800efc0:	780b      	ldrb	r3, [r1, #0]
 800efc2:	460c      	mov	r4, r1
 800efc4:	b153      	cbz	r3, 800efdc <rmw_create_node+0x24>
 800efc6:	b14d      	cbz	r5, 800efdc <rmw_create_node+0x24>
 800efc8:	782b      	ldrb	r3, [r5, #0]
 800efca:	b13b      	cbz	r3, 800efdc <rmw_create_node+0x24>
 800efcc:	b902      	cbnz	r2, 800efd0 <rmw_create_node+0x18>
 800efce:	69c2      	ldr	r2, [r0, #28]
 800efd0:	4603      	mov	r3, r0
 800efd2:	4629      	mov	r1, r5
 800efd4:	4620      	mov	r0, r4
 800efd6:	bc30      	pop	{r4, r5}
 800efd8:	f7ff bf74 	b.w	800eec4 <create_node>
 800efdc:	2000      	movs	r0, #0
 800efde:	bc30      	pop	{r4, r5}
 800efe0:	4770      	bx	lr
 800efe2:	2000      	movs	r0, #0
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop

0800efe8 <rmw_destroy_node>:
 800efe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efea:	b328      	cbz	r0, 800f038 <rmw_destroy_node+0x50>
 800efec:	4607      	mov	r7, r0
 800efee:	6800      	ldr	r0, [r0, #0]
 800eff0:	b120      	cbz	r0, 800effc <rmw_destroy_node+0x14>
 800eff2:	4b36      	ldr	r3, [pc, #216]	@ (800f0cc <rmw_destroy_node+0xe4>)
 800eff4:	6819      	ldr	r1, [r3, #0]
 800eff6:	f7f1 f8f3 	bl	80001e0 <strcmp>
 800effa:	b9e8      	cbnz	r0, 800f038 <rmw_destroy_node+0x50>
 800effc:	687d      	ldr	r5, [r7, #4]
 800effe:	b1dd      	cbz	r5, 800f038 <rmw_destroy_node+0x50>
 800f000:	4b33      	ldr	r3, [pc, #204]	@ (800f0d0 <rmw_destroy_node+0xe8>)
 800f002:	681c      	ldr	r4, [r3, #0]
 800f004:	2c00      	cmp	r4, #0
 800f006:	d05f      	beq.n	800f0c8 <rmw_destroy_node+0xe0>
 800f008:	2600      	movs	r6, #0
 800f00a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f00e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f012:	429d      	cmp	r5, r3
 800f014:	d013      	beq.n	800f03e <rmw_destroy_node+0x56>
 800f016:	2c00      	cmp	r4, #0
 800f018:	d1f7      	bne.n	800f00a <rmw_destroy_node+0x22>
 800f01a:	4b2e      	ldr	r3, [pc, #184]	@ (800f0d4 <rmw_destroy_node+0xec>)
 800f01c:	681c      	ldr	r4, [r3, #0]
 800f01e:	b1c4      	cbz	r4, 800f052 <rmw_destroy_node+0x6a>
 800f020:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f024:	6a0b      	ldr	r3, [r1, #32]
 800f026:	429d      	cmp	r5, r3
 800f028:	d1f9      	bne.n	800f01e <rmw_destroy_node+0x36>
 800f02a:	317c      	adds	r1, #124	@ 0x7c
 800f02c:	4638      	mov	r0, r7
 800f02e:	f000 fae3 	bl	800f5f8 <rmw_destroy_subscription>
 800f032:	2801      	cmp	r0, #1
 800f034:	4606      	mov	r6, r0
 800f036:	d1f2      	bne.n	800f01e <rmw_destroy_node+0x36>
 800f038:	2601      	movs	r6, #1
 800f03a:	4630      	mov	r0, r6
 800f03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f03e:	3184      	adds	r1, #132	@ 0x84
 800f040:	4638      	mov	r0, r7
 800f042:	f000 f853 	bl	800f0ec <rmw_destroy_publisher>
 800f046:	2801      	cmp	r0, #1
 800f048:	4606      	mov	r6, r0
 800f04a:	d0f5      	beq.n	800f038 <rmw_destroy_node+0x50>
 800f04c:	2c00      	cmp	r4, #0
 800f04e:	d1dc      	bne.n	800f00a <rmw_destroy_node+0x22>
 800f050:	e7e3      	b.n	800f01a <rmw_destroy_node+0x32>
 800f052:	4b21      	ldr	r3, [pc, #132]	@ (800f0d8 <rmw_destroy_node+0xf0>)
 800f054:	681c      	ldr	r4, [r3, #0]
 800f056:	b16c      	cbz	r4, 800f074 <rmw_destroy_node+0x8c>
 800f058:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f05c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f05e:	429d      	cmp	r5, r3
 800f060:	d1f9      	bne.n	800f056 <rmw_destroy_node+0x6e>
 800f062:	317c      	adds	r1, #124	@ 0x7c
 800f064:	4638      	mov	r0, r7
 800f066:	f000 f999 	bl	800f39c <rmw_destroy_service>
 800f06a:	2801      	cmp	r0, #1
 800f06c:	4606      	mov	r6, r0
 800f06e:	d0e3      	beq.n	800f038 <rmw_destroy_node+0x50>
 800f070:	2c00      	cmp	r4, #0
 800f072:	d1f1      	bne.n	800f058 <rmw_destroy_node+0x70>
 800f074:	4b19      	ldr	r3, [pc, #100]	@ (800f0dc <rmw_destroy_node+0xf4>)
 800f076:	681c      	ldr	r4, [r3, #0]
 800f078:	b16c      	cbz	r4, 800f096 <rmw_destroy_node+0xae>
 800f07a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f07e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f080:	429d      	cmp	r5, r3
 800f082:	d1f9      	bne.n	800f078 <rmw_destroy_node+0x90>
 800f084:	317c      	adds	r1, #124	@ 0x7c
 800f086:	4638      	mov	r0, r7
 800f088:	f7ff fc8e 	bl	800e9a8 <rmw_destroy_client>
 800f08c:	2801      	cmp	r0, #1
 800f08e:	4606      	mov	r6, r0
 800f090:	d0d2      	beq.n	800f038 <rmw_destroy_node+0x50>
 800f092:	2c00      	cmp	r4, #0
 800f094:	d1f1      	bne.n	800f07a <rmw_destroy_node+0x92>
 800f096:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800f09a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f09e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f0a2:	6819      	ldr	r1, [r3, #0]
 800f0a4:	f001 f842 	bl	801012c <uxr_buffer_delete_entity>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	6928      	ldr	r0, [r5, #16]
 800f0ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f0b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f0b4:	f000 ffa0 	bl	800fff8 <run_xrce_session>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	bf08      	it	eq
 800f0bc:	2602      	moveq	r6, #2
 800f0be:	4638      	mov	r0, r7
 800f0c0:	f000 fe32 	bl	800fd28 <rmw_uxrce_fini_node_memory>
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0c8:	4626      	mov	r6, r4
 800f0ca:	e7a6      	b.n	800f01a <rmw_destroy_node+0x32>
 800f0cc:	08016d4c 	.word	0x08016d4c
 800f0d0:	20009410 	.word	0x20009410
 800f0d4:	2000c66c 	.word	0x2000c66c
 800f0d8:	2000c65c 	.word	0x2000c65c
 800f0dc:	20009c90 	.word	0x20009c90

0800f0e0 <rmw_node_get_graph_guard_condition>:
 800f0e0:	6843      	ldr	r3, [r0, #4]
 800f0e2:	6918      	ldr	r0, [r3, #16]
 800f0e4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f0e8:	4770      	bx	lr
 800f0ea:	bf00      	nop

0800f0ec <rmw_destroy_publisher>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	b128      	cbz	r0, 800f0fc <rmw_destroy_publisher+0x10>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	6800      	ldr	r0, [r0, #0]
 800f0f4:	460d      	mov	r5, r1
 800f0f6:	f000 ffff 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f0fa:	b910      	cbnz	r0, 800f102 <rmw_destroy_publisher+0x16>
 800f0fc:	2401      	movs	r4, #1
 800f0fe:	4620      	mov	r0, r4
 800f100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f102:	6863      	ldr	r3, [r4, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d0f9      	beq.n	800f0fc <rmw_destroy_publisher+0x10>
 800f108:	2d00      	cmp	r5, #0
 800f10a:	d0f7      	beq.n	800f0fc <rmw_destroy_publisher+0x10>
 800f10c:	6828      	ldr	r0, [r5, #0]
 800f10e:	f000 fff3 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f112:	2800      	cmp	r0, #0
 800f114:	d0f2      	beq.n	800f0fc <rmw_destroy_publisher+0x10>
 800f116:	686c      	ldr	r4, [r5, #4]
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d0ef      	beq.n	800f0fc <rmw_destroy_publisher+0x10>
 800f11c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f11e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f122:	f004 fc7f 	bl	8013a24 <destroy_topic>
 800f126:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f12a:	6962      	ldr	r2, [r4, #20]
 800f12c:	6918      	ldr	r0, [r3, #16]
 800f12e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f132:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f136:	6819      	ldr	r1, [r3, #0]
 800f138:	f000 fff8 	bl	801012c <uxr_buffer_delete_entity>
 800f13c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800f140:	6922      	ldr	r2, [r4, #16]
 800f142:	4603      	mov	r3, r0
 800f144:	6908      	ldr	r0, [r1, #16]
 800f146:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f14a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f14e:	6809      	ldr	r1, [r1, #0]
 800f150:	461c      	mov	r4, r3
 800f152:	f000 ffeb 	bl	801012c <uxr_buffer_delete_entity>
 800f156:	4606      	mov	r6, r0
 800f158:	6938      	ldr	r0, [r7, #16]
 800f15a:	4622      	mov	r2, r4
 800f15c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f160:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f164:	f000 ff48 	bl	800fff8 <run_xrce_session>
 800f168:	4604      	mov	r4, r0
 800f16a:	6938      	ldr	r0, [r7, #16]
 800f16c:	4632      	mov	r2, r6
 800f16e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f172:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f176:	f000 ff3f 	bl	800fff8 <run_xrce_session>
 800f17a:	b12c      	cbz	r4, 800f188 <rmw_destroy_publisher+0x9c>
 800f17c:	b120      	cbz	r0, 800f188 <rmw_destroy_publisher+0x9c>
 800f17e:	2400      	movs	r4, #0
 800f180:	4628      	mov	r0, r5
 800f182:	f000 fde9 	bl	800fd58 <rmw_uxrce_fini_publisher_memory>
 800f186:	e7ba      	b.n	800f0fe <rmw_destroy_publisher+0x12>
 800f188:	2402      	movs	r4, #2
 800f18a:	e7f9      	b.n	800f180 <rmw_destroy_publisher+0x94>

0800f18c <rmw_take_request>:
 800f18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f190:	4605      	mov	r5, r0
 800f192:	6800      	ldr	r0, [r0, #0]
 800f194:	b089      	sub	sp, #36	@ 0x24
 800f196:	460c      	mov	r4, r1
 800f198:	4690      	mov	r8, r2
 800f19a:	461e      	mov	r6, r3
 800f19c:	b128      	cbz	r0, 800f1aa <rmw_take_request+0x1e>
 800f19e:	4b28      	ldr	r3, [pc, #160]	@ (800f240 <rmw_take_request+0xb4>)
 800f1a0:	6819      	ldr	r1, [r3, #0]
 800f1a2:	f7f1 f81d 	bl	80001e0 <strcmp>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d146      	bne.n	800f238 <rmw_take_request+0xac>
 800f1aa:	b10e      	cbz	r6, 800f1b0 <rmw_take_request+0x24>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	7033      	strb	r3, [r6, #0]
 800f1b0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f1b4:	f000 fea8 	bl	800ff08 <rmw_uxrce_clean_expired_static_input_buffer>
 800f1b8:	4648      	mov	r0, r9
 800f1ba:	f000 fe7d 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f1be:	4607      	mov	r7, r0
 800f1c0:	b3b0      	cbz	r0, 800f230 <rmw_take_request+0xa4>
 800f1c2:	68c5      	ldr	r5, [r0, #12]
 800f1c4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 800f1c8:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 800f1cc:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800f1d0:	7423      	strb	r3, [r4, #16]
 800f1d2:	e9c4 1208 	strd	r1, r2, [r4, #32]
 800f1d6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800f1da:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800f1de:	74e2      	strb	r2, [r4, #19]
 800f1e0:	f8a4 3011 	strh.w	r3, [r4, #17]
 800f1e4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800f1e8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800f1ec:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800f1f0:	61e1      	str	r1, [r4, #28]
 800f1f2:	6162      	str	r2, [r4, #20]
 800f1f4:	61a3      	str	r3, [r4, #24]
 800f1f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	4798      	blx	r3
 800f1fe:	6844      	ldr	r4, [r0, #4]
 800f200:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800f204:	f105 0110 	add.w	r1, r5, #16
 800f208:	4668      	mov	r0, sp
 800f20a:	f7fc fc95 	bl	800bb38 <ucdr_init_buffer>
 800f20e:	68e3      	ldr	r3, [r4, #12]
 800f210:	4641      	mov	r1, r8
 800f212:	4668      	mov	r0, sp
 800f214:	4798      	blx	r3
 800f216:	4639      	mov	r1, r7
 800f218:	4604      	mov	r4, r0
 800f21a:	480a      	ldr	r0, [pc, #40]	@ (800f244 <rmw_take_request+0xb8>)
 800f21c:	f004 fb76 	bl	801390c <put_memory>
 800f220:	b106      	cbz	r6, 800f224 <rmw_take_request+0x98>
 800f222:	7034      	strb	r4, [r6, #0]
 800f224:	f084 0001 	eor.w	r0, r4, #1
 800f228:	b2c0      	uxtb	r0, r0
 800f22a:	b009      	add	sp, #36	@ 0x24
 800f22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f230:	2001      	movs	r0, #1
 800f232:	b009      	add	sp, #36	@ 0x24
 800f234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f238:	200c      	movs	r0, #12
 800f23a:	b009      	add	sp, #36	@ 0x24
 800f23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f240:	08016d4c 	.word	0x08016d4c
 800f244:	20009400 	.word	0x20009400

0800f248 <rmw_send_response>:
 800f248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24a:	4605      	mov	r5, r0
 800f24c:	6800      	ldr	r0, [r0, #0]
 800f24e:	b091      	sub	sp, #68	@ 0x44
 800f250:	460c      	mov	r4, r1
 800f252:	4617      	mov	r7, r2
 800f254:	b128      	cbz	r0, 800f262 <rmw_send_response+0x1a>
 800f256:	4b2a      	ldr	r3, [pc, #168]	@ (800f300 <rmw_send_response+0xb8>)
 800f258:	6819      	ldr	r1, [r3, #0]
 800f25a:	f7f0 ffc1 	bl	80001e0 <strcmp>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d143      	bne.n	800f2ea <rmw_send_response+0xa2>
 800f262:	4623      	mov	r3, r4
 800f264:	4626      	mov	r6, r4
 800f266:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800f26a:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 800f26e:	6859      	ldr	r1, [r3, #4]
 800f270:	686d      	ldr	r5, [r5, #4]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	78b3      	ldrb	r3, [r6, #2]
 800f276:	f894 c000 	ldrb.w	ip, [r4]
 800f27a:	6966      	ldr	r6, [r4, #20]
 800f27c:	f88d 3016 	strb.w	r3, [sp, #22]
 800f280:	ab02      	add	r3, sp, #8
 800f282:	f8ad e014 	strh.w	lr, [sp, #20]
 800f286:	f88d c017 	strb.w	ip, [sp, #23]
 800f28a:	9606      	str	r6, [sp, #24]
 800f28c:	c307      	stmia	r3!, {r0, r1, r2}
 800f28e:	696b      	ldr	r3, [r5, #20]
 800f290:	6922      	ldr	r2, [r4, #16]
 800f292:	9207      	str	r2, [sp, #28]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800f298:	4798      	blx	r3
 800f29a:	4603      	mov	r3, r0
 800f29c:	4638      	mov	r0, r7
 800f29e:	685c      	ldr	r4, [r3, #4]
 800f2a0:	6923      	ldr	r3, [r4, #16]
 800f2a2:	4798      	blx	r3
 800f2a4:	6933      	ldr	r3, [r6, #16]
 800f2a6:	3018      	adds	r0, #24
 800f2a8:	9000      	str	r0, [sp, #0]
 800f2aa:	692a      	ldr	r2, [r5, #16]
 800f2ac:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800f2ae:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f2b2:	ab08      	add	r3, sp, #32
 800f2b4:	f003 f980 	bl	80125b8 <uxr_prepare_output_stream>
 800f2b8:	b910      	cbnz	r0, 800f2c0 <rmw_send_response+0x78>
 800f2ba:	2001      	movs	r0, #1
 800f2bc:	b011      	add	sp, #68	@ 0x44
 800f2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c0:	a902      	add	r1, sp, #8
 800f2c2:	a808      	add	r0, sp, #32
 800f2c4:	f004 f8ee 	bl	80134a4 <uxr_serialize_SampleIdentity>
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	a908      	add	r1, sp, #32
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	4798      	blx	r3
 800f2d0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800f2d4:	6930      	ldr	r0, [r6, #16]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d00a      	beq.n	800f2f0 <rmw_send_response+0xa8>
 800f2da:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800f2dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2e0:	f001 ff6e 	bl	80111c0 <uxr_run_session_until_confirm_delivery>
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	b011      	add	sp, #68	@ 0x44
 800f2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ea:	200c      	movs	r0, #12
 800f2ec:	b011      	add	sp, #68	@ 0x44
 800f2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2f4:	f001 fba8 	bl	8010a48 <uxr_flash_output_streams>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	b011      	add	sp, #68	@ 0x44
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08016d4c 	.word	0x08016d4c

0800f304 <rmw_take_response>:
 800f304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f308:	4604      	mov	r4, r0
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	b089      	sub	sp, #36	@ 0x24
 800f30e:	4688      	mov	r8, r1
 800f310:	4617      	mov	r7, r2
 800f312:	461d      	mov	r5, r3
 800f314:	b120      	cbz	r0, 800f320 <rmw_take_response+0x1c>
 800f316:	4b1f      	ldr	r3, [pc, #124]	@ (800f394 <rmw_take_response+0x90>)
 800f318:	6819      	ldr	r1, [r3, #0]
 800f31a:	f7f0 ff61 	bl	80001e0 <strcmp>
 800f31e:	bb88      	cbnz	r0, 800f384 <rmw_take_response+0x80>
 800f320:	b10d      	cbz	r5, 800f326 <rmw_take_response+0x22>
 800f322:	2300      	movs	r3, #0
 800f324:	702b      	strb	r3, [r5, #0]
 800f326:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f32a:	f000 fded 	bl	800ff08 <rmw_uxrce_clean_expired_static_input_buffer>
 800f32e:	4648      	mov	r0, r9
 800f330:	f000 fdc2 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f334:	4606      	mov	r6, r0
 800f336:	b348      	cbz	r0, 800f38c <rmw_take_response+0x88>
 800f338:	68c4      	ldr	r4, [r0, #12]
 800f33a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800f33e:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	68c9      	ldr	r1, [r1, #12]
 800f348:	e9c8 2308 	strd	r2, r3, [r8, #32]
 800f34c:	4788      	blx	r1
 800f34e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f352:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800f356:	f104 0110 	add.w	r1, r4, #16
 800f35a:	4668      	mov	r0, sp
 800f35c:	f7fc fbec 	bl	800bb38 <ucdr_init_buffer>
 800f360:	4639      	mov	r1, r7
 800f362:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f366:	4668      	mov	r0, sp
 800f368:	4798      	blx	r3
 800f36a:	4631      	mov	r1, r6
 800f36c:	4604      	mov	r4, r0
 800f36e:	480a      	ldr	r0, [pc, #40]	@ (800f398 <rmw_take_response+0x94>)
 800f370:	f004 facc 	bl	801390c <put_memory>
 800f374:	b105      	cbz	r5, 800f378 <rmw_take_response+0x74>
 800f376:	702c      	strb	r4, [r5, #0]
 800f378:	f084 0001 	eor.w	r0, r4, #1
 800f37c:	b2c0      	uxtb	r0, r0
 800f37e:	b009      	add	sp, #36	@ 0x24
 800f380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f384:	200c      	movs	r0, #12
 800f386:	b009      	add	sp, #36	@ 0x24
 800f388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38c:	2001      	movs	r0, #1
 800f38e:	b009      	add	sp, #36	@ 0x24
 800f390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f394:	08016d4c 	.word	0x08016d4c
 800f398:	20009400 	.word	0x20009400

0800f39c <rmw_destroy_service>:
 800f39c:	b570      	push	{r4, r5, r6, lr}
 800f39e:	b128      	cbz	r0, 800f3ac <rmw_destroy_service+0x10>
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	6800      	ldr	r0, [r0, #0]
 800f3a4:	460d      	mov	r5, r1
 800f3a6:	f000 fea7 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f3aa:	b910      	cbnz	r0, 800f3b2 <rmw_destroy_service+0x16>
 800f3ac:	2401      	movs	r4, #1
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	bd70      	pop	{r4, r5, r6, pc}
 800f3b2:	6863      	ldr	r3, [r4, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0f9      	beq.n	800f3ac <rmw_destroy_service+0x10>
 800f3b8:	2d00      	cmp	r5, #0
 800f3ba:	d0f7      	beq.n	800f3ac <rmw_destroy_service+0x10>
 800f3bc:	6828      	ldr	r0, [r5, #0]
 800f3be:	f000 fe9b 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d0f2      	beq.n	800f3ac <rmw_destroy_service+0x10>
 800f3c6:	686e      	ldr	r6, [r5, #4]
 800f3c8:	2e00      	cmp	r6, #0
 800f3ca:	d0ef      	beq.n	800f3ac <rmw_destroy_service+0x10>
 800f3cc:	6864      	ldr	r4, [r4, #4]
 800f3ce:	6932      	ldr	r2, [r6, #16]
 800f3d0:	6920      	ldr	r0, [r4, #16]
 800f3d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f3d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3da:	6819      	ldr	r1, [r3, #0]
 800f3dc:	f001 f92a 	bl	8010634 <uxr_buffer_cancel_data>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	6920      	ldr	r0, [r4, #16]
 800f3e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f3e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f3ec:	f000 fe04 	bl	800fff8 <run_xrce_session>
 800f3f0:	6920      	ldr	r0, [r4, #16]
 800f3f2:	6932      	ldr	r2, [r6, #16]
 800f3f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f3f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3fc:	6819      	ldr	r1, [r3, #0]
 800f3fe:	f000 fe95 	bl	801012c <uxr_buffer_delete_entity>
 800f402:	4602      	mov	r2, r0
 800f404:	6920      	ldr	r0, [r4, #16]
 800f406:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f40a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f40e:	f000 fdf3 	bl	800fff8 <run_xrce_session>
 800f412:	2800      	cmp	r0, #0
 800f414:	4628      	mov	r0, r5
 800f416:	bf14      	ite	ne
 800f418:	2400      	movne	r4, #0
 800f41a:	2402      	moveq	r4, #2
 800f41c:	f000 fcc8 	bl	800fdb0 <rmw_uxrce_fini_service_memory>
 800f420:	e7c5      	b.n	800f3ae <rmw_destroy_service+0x12>
 800f422:	bf00      	nop

0800f424 <rmw_create_subscription>:
 800f424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	b08d      	sub	sp, #52	@ 0x34
 800f42a:	2800      	cmp	r0, #0
 800f42c:	f000 80cb 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f430:	460e      	mov	r6, r1
 800f432:	2900      	cmp	r1, #0
 800f434:	f000 80c7 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f438:	4604      	mov	r4, r0
 800f43a:	6800      	ldr	r0, [r0, #0]
 800f43c:	4615      	mov	r5, r2
 800f43e:	4698      	mov	r8, r3
 800f440:	f000 fe5a 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f444:	2800      	cmp	r0, #0
 800f446:	f000 80be 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f44a:	2d00      	cmp	r5, #0
 800f44c:	f000 80bb 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f450:	782b      	ldrb	r3, [r5, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 80b7 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f458:	f1b8 0f00 	cmp.w	r8, #0
 800f45c:	f000 80b3 	beq.w	800f5c6 <rmw_create_subscription+0x1a2>
 800f460:	485b      	ldr	r0, [pc, #364]	@ (800f5d0 <rmw_create_subscription+0x1ac>)
 800f462:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f466:	f004 fa41 	bl	80138ec <get_memory>
 800f46a:	4604      	mov	r4, r0
 800f46c:	2800      	cmp	r0, #0
 800f46e:	f000 80ab 	beq.w	800f5c8 <rmw_create_subscription+0x1a4>
 800f472:	68c7      	ldr	r7, [r0, #12]
 800f474:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800f478:	f7ff fada 	bl	800ea30 <rmw_get_implementation_identifier>
 800f47c:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 800f480:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f482:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800f486:	4628      	mov	r0, r5
 800f488:	f7f0 feb4 	bl	80001f4 <strlen>
 800f48c:	3001      	adds	r0, #1
 800f48e:	283c      	cmp	r0, #60	@ 0x3c
 800f490:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800f494:	f200 8090 	bhi.w	800f5b8 <rmw_create_subscription+0x194>
 800f498:	4a4e      	ldr	r2, [pc, #312]	@ (800f5d4 <rmw_create_subscription+0x1b0>)
 800f49a:	462b      	mov	r3, r5
 800f49c:	213c      	movs	r1, #60	@ 0x3c
 800f49e:	4650      	mov	r0, sl
 800f4a0:	f005 fcbc 	bl	8014e1c <sniprintf>
 800f4a4:	4641      	mov	r1, r8
 800f4a6:	f8c7 9020 	str.w	r9, [r7, #32]
 800f4aa:	2250      	movs	r2, #80	@ 0x50
 800f4ac:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800f4b0:	f005 fe47 	bl	8015142 <memcpy>
 800f4b4:	4948      	ldr	r1, [pc, #288]	@ (800f5d8 <rmw_create_subscription+0x1b4>)
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f000 fe2c 	bl	8010114 <get_message_typesupport_handle>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d07b      	beq.n	800f5b8 <rmw_create_subscription+0x194>
 800f4c0:	6842      	ldr	r2, [r0, #4]
 800f4c2:	61ba      	str	r2, [r7, #24]
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	d077      	beq.n	800f5b8 <rmw_create_subscription+0x194>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	4643      	mov	r3, r8
 800f4cc:	4648      	mov	r0, r9
 800f4ce:	f004 fa59 	bl	8013984 <create_topic>
 800f4d2:	61f8      	str	r0, [r7, #28]
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d073      	beq.n	800f5c0 <rmw_create_subscription+0x19c>
 800f4d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f4dc:	f241 539c 	movw	r3, #5532	@ 0x159c
 800f4e0:	2104      	movs	r1, #4
 800f4e2:	5ad0      	ldrh	r0, [r2, r3]
 800f4e4:	1c45      	adds	r5, r0, #1
 800f4e6:	52d5      	strh	r5, [r2, r3]
 800f4e8:	f001 f83c 	bl	8010564 <uxr_object_id>
 800f4ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4f0:	6138      	str	r0, [r7, #16]
 800f4f2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800f4f6:	2606      	movs	r6, #6
 800f4f8:	9600      	str	r6, [sp, #0]
 800f4fa:	6811      	ldr	r1, [r2, #0]
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f502:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f506:	f000 fec3 	bl	8010290 <uxr_buffer_create_subscriber_bin>
 800f50a:	4602      	mov	r2, r0
 800f50c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f510:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f514:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f518:	f000 fd6e 	bl	800fff8 <run_xrce_session>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d04b      	beq.n	800f5b8 <rmw_create_subscription+0x194>
 800f520:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f524:	f241 539e 	movw	r3, #5534	@ 0x159e
 800f528:	4631      	mov	r1, r6
 800f52a:	5ad0      	ldrh	r0, [r2, r3]
 800f52c:	1c45      	adds	r5, r0, #1
 800f52e:	52d5      	strh	r5, [r2, r3]
 800f530:	f001 f818 	bl	8010564 <uxr_object_id>
 800f534:	ad08      	add	r5, sp, #32
 800f536:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	6178      	str	r0, [r7, #20]
 800f53e:	4641      	mov	r1, r8
 800f540:	4628      	mov	r0, r5
 800f542:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	f000 fd72 	bl	8010030 <convert_qos_profile>
 800f54c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f550:	9b05      	ldr	r3, [sp, #20]
 800f552:	9001      	str	r0, [sp, #4]
 800f554:	9603      	str	r6, [sp, #12]
 800f556:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f562:	f8db 1000 	ldr.w	r1, [fp]
 800f566:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800f56a:	f000 fec1 	bl	80102f0 <uxr_buffer_create_datareader_bin>
 800f56e:	4602      	mov	r2, r0
 800f570:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f574:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f578:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f57c:	f000 fd3c 	bl	800fff8 <run_xrce_session>
 800f580:	b1d0      	cbz	r0, 800f5b8 <rmw_create_subscription+0x194>
 800f582:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f586:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f58a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f58e:	2200      	movs	r2, #0
 800f590:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800f594:	2b02      	cmp	r3, #2
 800f596:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f59a:	bf0c      	ite	eq
 800f59c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800f5a0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	aa0a      	add	r2, sp, #40	@ 0x28
 800f5a8:	9200      	str	r2, [sp, #0]
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	6809      	ldr	r1, [r1, #0]
 800f5ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5b2:	f001 f805 	bl	80105c0 <uxr_buffer_request_data>
 800f5b6:	e007      	b.n	800f5c8 <rmw_create_subscription+0x1a4>
 800f5b8:	69f8      	ldr	r0, [r7, #28]
 800f5ba:	b108      	cbz	r0, 800f5c0 <rmw_create_subscription+0x19c>
 800f5bc:	f000 fc24 	bl	800fe08 <rmw_uxrce_fini_topic_memory>
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f000 fbdf 	bl	800fd84 <rmw_uxrce_fini_subscription_memory>
 800f5c6:	2400      	movs	r4, #0
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	b00d      	add	sp, #52	@ 0x34
 800f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d0:	2000c66c 	.word	0x2000c66c
 800f5d4:	08016b0c 	.word	0x08016b0c
 800f5d8:	08016590 	.word	0x08016590

0800f5dc <rmw_subscription_get_actual_qos>:
 800f5dc:	b150      	cbz	r0, 800f5f4 <rmw_subscription_get_actual_qos+0x18>
 800f5de:	b149      	cbz	r1, 800f5f4 <rmw_subscription_get_actual_qos+0x18>
 800f5e0:	b508      	push	{r3, lr}
 800f5e2:	6843      	ldr	r3, [r0, #4]
 800f5e4:	2250      	movs	r2, #80	@ 0x50
 800f5e6:	4608      	mov	r0, r1
 800f5e8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f5ec:	f005 fda9 	bl	8015142 <memcpy>
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	bd08      	pop	{r3, pc}
 800f5f4:	200b      	movs	r0, #11
 800f5f6:	4770      	bx	lr

0800f5f8 <rmw_destroy_subscription>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	b128      	cbz	r0, 800f608 <rmw_destroy_subscription+0x10>
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	6800      	ldr	r0, [r0, #0]
 800f600:	460d      	mov	r5, r1
 800f602:	f000 fd79 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f606:	b910      	cbnz	r0, 800f60e <rmw_destroy_subscription+0x16>
 800f608:	2401      	movs	r4, #1
 800f60a:	4620      	mov	r0, r4
 800f60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f60e:	6863      	ldr	r3, [r4, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d0f9      	beq.n	800f608 <rmw_destroy_subscription+0x10>
 800f614:	2d00      	cmp	r5, #0
 800f616:	d0f7      	beq.n	800f608 <rmw_destroy_subscription+0x10>
 800f618:	6828      	ldr	r0, [r5, #0]
 800f61a:	f000 fd6d 	bl	80100f8 <is_uxrce_rmw_identifier_valid>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0f2      	beq.n	800f608 <rmw_destroy_subscription+0x10>
 800f622:	686c      	ldr	r4, [r5, #4]
 800f624:	2c00      	cmp	r4, #0
 800f626:	d0ef      	beq.n	800f608 <rmw_destroy_subscription+0x10>
 800f628:	6a26      	ldr	r6, [r4, #32]
 800f62a:	6962      	ldr	r2, [r4, #20]
 800f62c:	6930      	ldr	r0, [r6, #16]
 800f62e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f632:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f636:	6819      	ldr	r1, [r3, #0]
 800f638:	f000 fffc 	bl	8010634 <uxr_buffer_cancel_data>
 800f63c:	4602      	mov	r2, r0
 800f63e:	6930      	ldr	r0, [r6, #16]
 800f640:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f644:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f648:	f000 fcd6 	bl	800fff8 <run_xrce_session>
 800f64c:	69e0      	ldr	r0, [r4, #28]
 800f64e:	f004 f9e9 	bl	8013a24 <destroy_topic>
 800f652:	6a23      	ldr	r3, [r4, #32]
 800f654:	6962      	ldr	r2, [r4, #20]
 800f656:	6918      	ldr	r0, [r3, #16]
 800f658:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f65c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f660:	6819      	ldr	r1, [r3, #0]
 800f662:	f000 fd63 	bl	801012c <uxr_buffer_delete_entity>
 800f666:	6a21      	ldr	r1, [r4, #32]
 800f668:	6922      	ldr	r2, [r4, #16]
 800f66a:	4603      	mov	r3, r0
 800f66c:	6908      	ldr	r0, [r1, #16]
 800f66e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f672:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f676:	6809      	ldr	r1, [r1, #0]
 800f678:	461c      	mov	r4, r3
 800f67a:	f000 fd57 	bl	801012c <uxr_buffer_delete_entity>
 800f67e:	4607      	mov	r7, r0
 800f680:	6930      	ldr	r0, [r6, #16]
 800f682:	4622      	mov	r2, r4
 800f684:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f688:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f68c:	f000 fcb4 	bl	800fff8 <run_xrce_session>
 800f690:	4604      	mov	r4, r0
 800f692:	6930      	ldr	r0, [r6, #16]
 800f694:	463a      	mov	r2, r7
 800f696:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f69a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f69e:	f000 fcab 	bl	800fff8 <run_xrce_session>
 800f6a2:	b12c      	cbz	r4, 800f6b0 <rmw_destroy_subscription+0xb8>
 800f6a4:	b120      	cbz	r0, 800f6b0 <rmw_destroy_subscription+0xb8>
 800f6a6:	2400      	movs	r4, #0
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	f000 fb6b 	bl	800fd84 <rmw_uxrce_fini_subscription_memory>
 800f6ae:	e7ac      	b.n	800f60a <rmw_destroy_subscription+0x12>
 800f6b0:	2402      	movs	r4, #2
 800f6b2:	e7f9      	b.n	800f6a8 <rmw_destroy_subscription+0xb0>

0800f6b4 <rmw_take_with_info>:
 800f6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	6800      	ldr	r0, [r0, #0]
 800f6ba:	b089      	sub	sp, #36	@ 0x24
 800f6bc:	460f      	mov	r7, r1
 800f6be:	4615      	mov	r5, r2
 800f6c0:	b128      	cbz	r0, 800f6ce <rmw_take_with_info+0x1a>
 800f6c2:	4b24      	ldr	r3, [pc, #144]	@ (800f754 <rmw_take_with_info+0xa0>)
 800f6c4:	6819      	ldr	r1, [r3, #0]
 800f6c6:	f7f0 fd8b 	bl	80001e0 <strcmp>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d13e      	bne.n	800f74c <rmw_take_with_info+0x98>
 800f6ce:	b305      	cbz	r5, 800f712 <rmw_take_with_info+0x5e>
 800f6d0:	6864      	ldr	r4, [r4, #4]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	702b      	strb	r3, [r5, #0]
 800f6d6:	f000 fc17 	bl	800ff08 <rmw_uxrce_clean_expired_static_input_buffer>
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 fbec 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	b1f0      	cbz	r0, 800f722 <rmw_take_with_info+0x6e>
 800f6e4:	68c1      	ldr	r1, [r0, #12]
 800f6e6:	4668      	mov	r0, sp
 800f6e8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f6ec:	3110      	adds	r1, #16
 800f6ee:	f7fc fa23 	bl	800bb38 <ucdr_init_buffer>
 800f6f2:	69a3      	ldr	r3, [r4, #24]
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	4668      	mov	r0, sp
 800f6fa:	4798      	blx	r3
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4604      	mov	r4, r0
 800f700:	4815      	ldr	r0, [pc, #84]	@ (800f758 <rmw_take_with_info+0xa4>)
 800f702:	f004 f903 	bl	801390c <put_memory>
 800f706:	702c      	strb	r4, [r5, #0]
 800f708:	f084 0001 	eor.w	r0, r4, #1
 800f70c:	b2c0      	uxtb	r0, r0
 800f70e:	b009      	add	sp, #36	@ 0x24
 800f710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f712:	6864      	ldr	r4, [r4, #4]
 800f714:	f000 fbf8 	bl	800ff08 <rmw_uxrce_clean_expired_static_input_buffer>
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 fbcd 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f71e:	4605      	mov	r5, r0
 800f720:	b910      	cbnz	r0, 800f728 <rmw_take_with_info+0x74>
 800f722:	2001      	movs	r0, #1
 800f724:	b009      	add	sp, #36	@ 0x24
 800f726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f728:	68e9      	ldr	r1, [r5, #12]
 800f72a:	4668      	mov	r0, sp
 800f72c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f730:	3110      	adds	r1, #16
 800f732:	f7fc fa01 	bl	800bb38 <ucdr_init_buffer>
 800f736:	69a3      	ldr	r3, [r4, #24]
 800f738:	4639      	mov	r1, r7
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	4668      	mov	r0, sp
 800f73e:	4798      	blx	r3
 800f740:	4629      	mov	r1, r5
 800f742:	4604      	mov	r4, r0
 800f744:	4804      	ldr	r0, [pc, #16]	@ (800f758 <rmw_take_with_info+0xa4>)
 800f746:	f004 f8e1 	bl	801390c <put_memory>
 800f74a:	e7dd      	b.n	800f708 <rmw_take_with_info+0x54>
 800f74c:	200c      	movs	r0, #12
 800f74e:	b009      	add	sp, #36	@ 0x24
 800f750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f752:	bf00      	nop
 800f754:	08016d4c 	.word	0x08016d4c
 800f758:	20009400 	.word	0x20009400

0800f75c <rmw_uxrce_transport_init>:
 800f75c:	b508      	push	{r3, lr}
 800f75e:	b108      	cbz	r0, 800f764 <rmw_uxrce_transport_init+0x8>
 800f760:	f100 0210 	add.w	r2, r0, #16
 800f764:	b139      	cbz	r1, 800f776 <rmw_uxrce_transport_init+0x1a>
 800f766:	6949      	ldr	r1, [r1, #20]
 800f768:	4610      	mov	r0, r2
 800f76a:	f000 fec3 	bl	80104f4 <uxr_init_custom_transport>
 800f76e:	f080 0001 	eor.w	r0, r0, #1
 800f772:	b2c0      	uxtb	r0, r0
 800f774:	bd08      	pop	{r3, pc}
 800f776:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <rmw_uxrce_transport_init+0x2c>)
 800f778:	4610      	mov	r0, r2
 800f77a:	6859      	ldr	r1, [r3, #4]
 800f77c:	f000 feba 	bl	80104f4 <uxr_init_custom_transport>
 800f780:	f080 0001 	eor.w	r0, r0, #1
 800f784:	b2c0      	uxtb	r0, r0
 800f786:	bd08      	pop	{r3, pc}
 800f788:	200093e0 	.word	0x200093e0

0800f78c <rmw_wait>:
 800f78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	460f      	mov	r7, r1
 800f792:	4606      	mov	r6, r0
 800f794:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f796:	469a      	mov	sl, r3
 800f798:	4615      	mov	r5, r2
 800f79a:	2a00      	cmp	r2, #0
 800f79c:	f000 8122 	beq.w	800f9e4 <rmw_wait+0x258>
 800f7a0:	2900      	cmp	r1, #0
 800f7a2:	f000 812a 	beq.w	800f9fa <rmw_wait+0x26e>
 800f7a6:	e9d1 2300 	ldrd	r2, r3, [r1]
 800f7aa:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 800f7ae:	015c      	lsls	r4, r3, #5
 800f7b0:	ebbb 0b02 	subs.w	fp, fp, r2
 800f7b4:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 800f7b8:	eb64 0403 	sbc.w	r4, r4, r3
 800f7bc:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800f7c0:	00a4      	lsls	r4, r4, #2
 800f7c2:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 800f7c6:	eb10 0b02 	adds.w	fp, r0, r2
 800f7ca:	eb43 0404 	adc.w	r4, r3, r4
 800f7ce:	4aad      	ldr	r2, [pc, #692]	@ (800fa84 <rmw_wait+0x2f8>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800f7d6:	f7f1 fa39 	bl	8000c4c <__aeabi_uldivmod>
 800f7da:	00e4      	lsls	r4, r4, #3
 800f7dc:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 800f7e0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f7e4:	eb1b 0800 	adds.w	r8, fp, r0
 800f7e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f7ec:	eb44 0901 	adc.w	r9, r4, r1
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4542      	cmp	r2, r8
 800f7f4:	eb73 0109 	sbcs.w	r1, r3, r9
 800f7f8:	f2c0 80f2 	blt.w	800f9e0 <rmw_wait+0x254>
 800f7fc:	f000 fb84 	bl	800ff08 <rmw_uxrce_clean_expired_static_input_buffer>
 800f800:	4ba1      	ldr	r3, [pc, #644]	@ (800fa88 <rmw_wait+0x2fc>)
 800f802:	681c      	ldr	r4, [r3, #0]
 800f804:	b144      	cbz	r4, 800f818 <rmw_wait+0x8c>
 800f806:	4623      	mov	r3, r4
 800f808:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 800f80c:	2100      	movs	r1, #0
 800f80e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800f812:	5411      	strb	r1, [r2, r0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1fa      	bne.n	800f80e <rmw_wait+0x82>
 800f818:	b185      	cbz	r5, 800f83c <rmw_wait+0xb0>
 800f81a:	6829      	ldr	r1, [r5, #0]
 800f81c:	b171      	cbz	r1, 800f83c <rmw_wait+0xb0>
 800f81e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800f822:	2300      	movs	r3, #0
 800f824:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800f828:	2001      	movs	r0, #1
 800f82a:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800f82e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f830:	3301      	adds	r3, #1
 800f832:	6912      	ldr	r2, [r2, #16]
 800f834:	4299      	cmp	r1, r3
 800f836:	f802 000c 	strb.w	r0, [r2, ip]
 800f83a:	d1f6      	bne.n	800f82a <rmw_wait+0x9e>
 800f83c:	f1ba 0f00 	cmp.w	sl, #0
 800f840:	d011      	beq.n	800f866 <rmw_wait+0xda>
 800f842:	f8da 1000 	ldr.w	r1, [sl]
 800f846:	b171      	cbz	r1, 800f866 <rmw_wait+0xda>
 800f848:	f8da e004 	ldr.w	lr, [sl, #4]
 800f84c:	2300      	movs	r3, #0
 800f84e:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800f852:	2001      	movs	r0, #1
 800f854:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800f858:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f85a:	3301      	adds	r3, #1
 800f85c:	6912      	ldr	r2, [r2, #16]
 800f85e:	4299      	cmp	r1, r3
 800f860:	f802 000c 	strb.w	r0, [r2, ip]
 800f864:	d1f6      	bne.n	800f854 <rmw_wait+0xc8>
 800f866:	b186      	cbz	r6, 800f88a <rmw_wait+0xfe>
 800f868:	6831      	ldr	r1, [r6, #0]
 800f86a:	b171      	cbz	r1, 800f88a <rmw_wait+0xfe>
 800f86c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800f870:	2300      	movs	r3, #0
 800f872:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800f876:	2001      	movs	r0, #1
 800f878:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800f87c:	6a12      	ldr	r2, [r2, #32]
 800f87e:	3301      	adds	r3, #1
 800f880:	6912      	ldr	r2, [r2, #16]
 800f882:	4299      	cmp	r1, r3
 800f884:	f802 000c 	strb.w	r0, [r2, ip]
 800f888:	d1f6      	bne.n	800f878 <rmw_wait+0xec>
 800f88a:	b34c      	cbz	r4, 800f8e0 <rmw_wait+0x154>
 800f88c:	4622      	mov	r2, r4
 800f88e:	2300      	movs	r3, #0
 800f890:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 800f894:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 800f898:	5c09      	ldrb	r1, [r1, r0]
 800f89a:	440b      	add	r3, r1
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2a00      	cmp	r2, #0
 800f8a0:	d1f8      	bne.n	800f894 <rmw_wait+0x108>
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 8082 	beq.w	800f9ac <rmw_wait+0x220>
 800f8a8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800f8ac:	d00d      	beq.n	800f8ca <rmw_wait+0x13e>
 800f8ae:	ee07 8a90 	vmov	s15, r8
 800f8b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f8b6:	ee07 3a90 	vmov	s15, r3
 800f8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8c2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800f8c6:	ee17 8a90 	vmov	r8, s15
 800f8ca:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 800f8ce:	68e0      	ldr	r0, [r4, #12]
 800f8d0:	f810 3009 	ldrb.w	r3, [r0, r9]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f040 8093 	bne.w	800fa00 <rmw_wait+0x274>
 800f8da:	68a4      	ldr	r4, [r4, #8]
 800f8dc:	2c00      	cmp	r4, #0
 800f8de:	d1f6      	bne.n	800f8ce <rmw_wait+0x142>
 800f8e0:	2d00      	cmp	r5, #0
 800f8e2:	f000 80ac 	beq.w	800fa3e <rmw_wait+0x2b2>
 800f8e6:	682b      	ldr	r3, [r5, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 8093 	beq.w	800fa14 <rmw_wait+0x288>
 800f8ee:	2400      	movs	r4, #0
 800f8f0:	46a0      	mov	r8, r4
 800f8f2:	686b      	ldr	r3, [r5, #4]
 800f8f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f8f8:	f000 fade 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d05f      	beq.n	800f9c0 <rmw_wait+0x234>
 800f900:	682b      	ldr	r3, [r5, #0]
 800f902:	3401      	adds	r4, #1
 800f904:	42a3      	cmp	r3, r4
 800f906:	f04f 0801 	mov.w	r8, #1
 800f90a:	d8f2      	bhi.n	800f8f2 <rmw_wait+0x166>
 800f90c:	f1ba 0f00 	cmp.w	sl, #0
 800f910:	d012      	beq.n	800f938 <rmw_wait+0x1ac>
 800f912:	f8da 3000 	ldr.w	r3, [sl]
 800f916:	b17b      	cbz	r3, 800f938 <rmw_wait+0x1ac>
 800f918:	2400      	movs	r4, #0
 800f91a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f91e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f922:	f000 fac9 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f926:	2800      	cmp	r0, #0
 800f928:	d052      	beq.n	800f9d0 <rmw_wait+0x244>
 800f92a:	f8da 3000 	ldr.w	r3, [sl]
 800f92e:	3401      	adds	r4, #1
 800f930:	42a3      	cmp	r3, r4
 800f932:	f04f 0801 	mov.w	r8, #1
 800f936:	d8f0      	bhi.n	800f91a <rmw_wait+0x18e>
 800f938:	b1e6      	cbz	r6, 800f974 <rmw_wait+0x1e8>
 800f93a:	6833      	ldr	r3, [r6, #0]
 800f93c:	b1d3      	cbz	r3, 800f974 <rmw_wait+0x1e8>
 800f93e:	2400      	movs	r4, #0
 800f940:	6873      	ldr	r3, [r6, #4]
 800f942:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f946:	f000 fab7 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f94a:	b160      	cbz	r0, 800f966 <rmw_wait+0x1da>
 800f94c:	6833      	ldr	r3, [r6, #0]
 800f94e:	3401      	adds	r4, #1
 800f950:	42a3      	cmp	r3, r4
 800f952:	d96c      	bls.n	800fa2e <rmw_wait+0x2a2>
 800f954:	6873      	ldr	r3, [r6, #4]
 800f956:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f95a:	f04f 0801 	mov.w	r8, #1
 800f95e:	f000 faab 	bl	800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f962:	2800      	cmp	r0, #0
 800f964:	d1f2      	bne.n	800f94c <rmw_wait+0x1c0>
 800f966:	e9d6 3200 	ldrd	r3, r2, [r6]
 800f96a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f96e:	3401      	adds	r4, #1
 800f970:	42a3      	cmp	r3, r4
 800f972:	d8e5      	bhi.n	800f940 <rmw_wait+0x1b4>
 800f974:	b1a7      	cbz	r7, 800f9a0 <rmw_wait+0x214>
 800f976:	683c      	ldr	r4, [r7, #0]
 800f978:	b194      	cbz	r4, 800f9a0 <rmw_wait+0x214>
 800f97a:	2300      	movs	r3, #0
 800f97c:	461d      	mov	r5, r3
 800f97e:	e004      	b.n	800f98a <rmw_wait+0x1fe>
 800f980:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800f984:	3301      	adds	r3, #1
 800f986:	42a3      	cmp	r3, r4
 800f988:	d00a      	beq.n	800f9a0 <rmw_wait+0x214>
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800f990:	7c0a      	ldrb	r2, [r1, #16]
 800f992:	2a00      	cmp	r2, #0
 800f994:	d0f4      	beq.n	800f980 <rmw_wait+0x1f4>
 800f996:	3301      	adds	r3, #1
 800f998:	42a3      	cmp	r3, r4
 800f99a:	740d      	strb	r5, [r1, #16]
 800f99c:	4690      	mov	r8, r2
 800f99e:	d1f4      	bne.n	800f98a <rmw_wait+0x1fe>
 800f9a0:	f1b8 0f00 	cmp.w	r8, #0
 800f9a4:	d040      	beq.n	800fa28 <rmw_wait+0x29c>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ac:	68e0      	ldr	r0, [r4, #12]
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9b4:	f001 fbca 	bl	801114c <uxr_run_session_timeout>
 800f9b8:	68a4      	ldr	r4, [r4, #8]
 800f9ba:	2c00      	cmp	r4, #0
 800f9bc:	d1f6      	bne.n	800f9ac <rmw_wait+0x220>
 800f9be:	e78f      	b.n	800f8e0 <rmw_wait+0x154>
 800f9c0:	e9d5 3200 	ldrd	r3, r2, [r5]
 800f9c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f9c8:	3401      	adds	r4, #1
 800f9ca:	42a3      	cmp	r3, r4
 800f9cc:	d891      	bhi.n	800f8f2 <rmw_wait+0x166>
 800f9ce:	e79d      	b.n	800f90c <rmw_wait+0x180>
 800f9d0:	e9da 3200 	ldrd	r3, r2, [sl]
 800f9d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f9d8:	3401      	adds	r4, #1
 800f9da:	429c      	cmp	r4, r3
 800f9dc:	d39d      	bcc.n	800f91a <rmw_wait+0x18e>
 800f9de:	e7ab      	b.n	800f938 <rmw_wait+0x1ac>
 800f9e0:	4690      	mov	r8, r2
 800f9e2:	e70b      	b.n	800f7fc <rmw_wait+0x70>
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f47f aedb 	bne.w	800f7a0 <rmw_wait+0x14>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	f47f aed8 	bne.w	800f7a0 <rmw_wait+0x14>
 800f9f0:	2f00      	cmp	r7, #0
 800f9f2:	d0d8      	beq.n	800f9a6 <rmw_wait+0x21a>
 800f9f4:	2900      	cmp	r1, #0
 800f9f6:	f47f aed6 	bne.w	800f7a6 <rmw_wait+0x1a>
 800f9fa:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f9fe:	e6fd      	b.n	800f7fc <rmw_wait+0x70>
 800fa00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa04:	4641      	mov	r1, r8
 800fa06:	f001 fbbb 	bl	8011180 <uxr_run_session_until_data>
 800fa0a:	68a4      	ldr	r4, [r4, #8]
 800fa0c:	2c00      	cmp	r4, #0
 800fa0e:	f47f af5e 	bne.w	800f8ce <rmw_wait+0x142>
 800fa12:	e765      	b.n	800f8e0 <rmw_wait+0x154>
 800fa14:	f1ba 0f00 	cmp.w	sl, #0
 800fa18:	d11e      	bne.n	800fa58 <rmw_wait+0x2cc>
 800fa1a:	b35e      	cbz	r6, 800fa74 <rmw_wait+0x2e8>
 800fa1c:	6833      	ldr	r3, [r6, #0]
 800fa1e:	46d0      	mov	r8, sl
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d18c      	bne.n	800f93e <rmw_wait+0x1b2>
 800fa24:	2f00      	cmp	r7, #0
 800fa26:	d1a6      	bne.n	800f976 <rmw_wait+0x1ea>
 800fa28:	2002      	movs	r0, #2
 800fa2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	2f00      	cmp	r7, #0
 800fa30:	d0b9      	beq.n	800f9a6 <rmw_wait+0x21a>
 800fa32:	683c      	ldr	r4, [r7, #0]
 800fa34:	f04f 0801 	mov.w	r8, #1
 800fa38:	2c00      	cmp	r4, #0
 800fa3a:	d19e      	bne.n	800f97a <rmw_wait+0x1ee>
 800fa3c:	e7b3      	b.n	800f9a6 <rmw_wait+0x21a>
 800fa3e:	f1ba 0f00 	cmp.w	sl, #0
 800fa42:	d0ea      	beq.n	800fa1a <rmw_wait+0x28e>
 800fa44:	f8da 3000 	ldr.w	r3, [sl]
 800fa48:	46a8      	mov	r8, r5
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f47f af64 	bne.w	800f918 <rmw_wait+0x18c>
 800fa50:	2e00      	cmp	r6, #0
 800fa52:	f47f af72 	bne.w	800f93a <rmw_wait+0x1ae>
 800fa56:	e009      	b.n	800fa6c <rmw_wait+0x2e0>
 800fa58:	f8da 2000 	ldr.w	r2, [sl]
 800fa5c:	4698      	mov	r8, r3
 800fa5e:	2a00      	cmp	r2, #0
 800fa60:	f47f af5a 	bne.w	800f918 <rmw_wait+0x18c>
 800fa64:	4690      	mov	r8, r2
 800fa66:	2e00      	cmp	r6, #0
 800fa68:	f47f af67 	bne.w	800f93a <rmw_wait+0x1ae>
 800fa6c:	46b0      	mov	r8, r6
 800fa6e:	2f00      	cmp	r7, #0
 800fa70:	d181      	bne.n	800f976 <rmw_wait+0x1ea>
 800fa72:	e7d9      	b.n	800fa28 <rmw_wait+0x29c>
 800fa74:	2f00      	cmp	r7, #0
 800fa76:	d0d7      	beq.n	800fa28 <rmw_wait+0x29c>
 800fa78:	683c      	ldr	r4, [r7, #0]
 800fa7a:	46b0      	mov	r8, r6
 800fa7c:	2c00      	cmp	r4, #0
 800fa7e:	f47f af7c 	bne.w	800f97a <rmw_wait+0x1ee>
 800fa82:	e7d1      	b.n	800fa28 <rmw_wait+0x29c>
 800fa84:	000f4240 	.word	0x000f4240
 800fa88:	2000c5a8 	.word	0x2000c5a8

0800fa8c <rmw_create_wait_set>:
 800fa8c:	b508      	push	{r3, lr}
 800fa8e:	4803      	ldr	r0, [pc, #12]	@ (800fa9c <rmw_create_wait_set+0x10>)
 800fa90:	f003 ff2c 	bl	80138ec <get_memory>
 800fa94:	b108      	cbz	r0, 800fa9a <rmw_create_wait_set+0xe>
 800fa96:	68c0      	ldr	r0, [r0, #12]
 800fa98:	3010      	adds	r0, #16
 800fa9a:	bd08      	pop	{r3, pc}
 800fa9c:	2000dd80 	.word	0x2000dd80

0800faa0 <rmw_destroy_wait_set>:
 800faa0:	b508      	push	{r3, lr}
 800faa2:	4b08      	ldr	r3, [pc, #32]	@ (800fac4 <rmw_destroy_wait_set+0x24>)
 800faa4:	6819      	ldr	r1, [r3, #0]
 800faa6:	b911      	cbnz	r1, 800faae <rmw_destroy_wait_set+0xe>
 800faa8:	e00a      	b.n	800fac0 <rmw_destroy_wait_set+0x20>
 800faaa:	6889      	ldr	r1, [r1, #8]
 800faac:	b141      	cbz	r1, 800fac0 <rmw_destroy_wait_set+0x20>
 800faae:	68cb      	ldr	r3, [r1, #12]
 800fab0:	3310      	adds	r3, #16
 800fab2:	4298      	cmp	r0, r3
 800fab4:	d1f9      	bne.n	800faaa <rmw_destroy_wait_set+0xa>
 800fab6:	4803      	ldr	r0, [pc, #12]	@ (800fac4 <rmw_destroy_wait_set+0x24>)
 800fab8:	f003 ff28 	bl	801390c <put_memory>
 800fabc:	2000      	movs	r0, #0
 800fabe:	bd08      	pop	{r3, pc}
 800fac0:	2001      	movs	r0, #1
 800fac2:	bd08      	pop	{r3, pc}
 800fac4:	2000dd80 	.word	0x2000dd80

0800fac8 <rmw_uxrce_init_service_memory>:
 800fac8:	b1b2      	cbz	r2, 800faf8 <rmw_uxrce_init_service_memory+0x30>
 800faca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800facc:	7a07      	ldrb	r7, [r0, #8]
 800face:	4605      	mov	r5, r0
 800fad0:	b98f      	cbnz	r7, 800faf6 <rmw_uxrce_init_service_memory+0x2e>
 800fad2:	e9c0 7700 	strd	r7, r7, [r0]
 800fad6:	460c      	mov	r4, r1
 800fad8:	23c8      	movs	r3, #200	@ 0xc8
 800fada:	2101      	movs	r1, #1
 800fadc:	fb03 4602 	mla	r6, r3, r2, r4
 800fae0:	60c3      	str	r3, [r0, #12]
 800fae2:	7201      	strb	r1, [r0, #8]
 800fae4:	4621      	mov	r1, r4
 800fae6:	4628      	mov	r0, r5
 800fae8:	f003 ff10 	bl	801390c <put_memory>
 800faec:	60e4      	str	r4, [r4, #12]
 800faee:	f804 7bc8 	strb.w	r7, [r4], #200
 800faf2:	42a6      	cmp	r6, r4
 800faf4:	d1f6      	bne.n	800fae4 <rmw_uxrce_init_service_memory+0x1c>
 800faf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop

0800fafc <rmw_uxrce_init_client_memory>:
 800fafc:	b1b2      	cbz	r2, 800fb2c <rmw_uxrce_init_client_memory+0x30>
 800fafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb00:	7a07      	ldrb	r7, [r0, #8]
 800fb02:	4605      	mov	r5, r0
 800fb04:	b98f      	cbnz	r7, 800fb2a <rmw_uxrce_init_client_memory+0x2e>
 800fb06:	e9c0 7700 	strd	r7, r7, [r0]
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	23c8      	movs	r3, #200	@ 0xc8
 800fb0e:	2101      	movs	r1, #1
 800fb10:	fb03 4602 	mla	r6, r3, r2, r4
 800fb14:	60c3      	str	r3, [r0, #12]
 800fb16:	7201      	strb	r1, [r0, #8]
 800fb18:	4621      	mov	r1, r4
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f003 fef6 	bl	801390c <put_memory>
 800fb20:	60e4      	str	r4, [r4, #12]
 800fb22:	f804 7bc8 	strb.w	r7, [r4], #200
 800fb26:	42a6      	cmp	r6, r4
 800fb28:	d1f6      	bne.n	800fb18 <rmw_uxrce_init_client_memory+0x1c>
 800fb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop

0800fb30 <rmw_uxrce_init_publisher_memory>:
 800fb30:	b1b2      	cbz	r2, 800fb60 <rmw_uxrce_init_publisher_memory+0x30>
 800fb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb34:	7a07      	ldrb	r7, [r0, #8]
 800fb36:	4605      	mov	r5, r0
 800fb38:	b98f      	cbnz	r7, 800fb5e <rmw_uxrce_init_publisher_memory+0x2e>
 800fb3a:	e9c0 7700 	strd	r7, r7, [r0]
 800fb3e:	460c      	mov	r4, r1
 800fb40:	23d8      	movs	r3, #216	@ 0xd8
 800fb42:	2101      	movs	r1, #1
 800fb44:	fb03 4602 	mla	r6, r3, r2, r4
 800fb48:	60c3      	str	r3, [r0, #12]
 800fb4a:	7201      	strb	r1, [r0, #8]
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f003 fedc 	bl	801390c <put_memory>
 800fb54:	60e4      	str	r4, [r4, #12]
 800fb56:	f804 7bd8 	strb.w	r7, [r4], #216
 800fb5a:	42a6      	cmp	r6, r4
 800fb5c:	d1f6      	bne.n	800fb4c <rmw_uxrce_init_publisher_memory+0x1c>
 800fb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop

0800fb64 <rmw_uxrce_init_subscription_memory>:
 800fb64:	b1b2      	cbz	r2, 800fb94 <rmw_uxrce_init_subscription_memory+0x30>
 800fb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb68:	7a07      	ldrb	r7, [r0, #8]
 800fb6a:	4605      	mov	r5, r0
 800fb6c:	b98f      	cbnz	r7, 800fb92 <rmw_uxrce_init_subscription_memory+0x2e>
 800fb6e:	e9c0 7700 	strd	r7, r7, [r0]
 800fb72:	460c      	mov	r4, r1
 800fb74:	23d0      	movs	r3, #208	@ 0xd0
 800fb76:	2101      	movs	r1, #1
 800fb78:	fb03 4602 	mla	r6, r3, r2, r4
 800fb7c:	60c3      	str	r3, [r0, #12]
 800fb7e:	7201      	strb	r1, [r0, #8]
 800fb80:	4621      	mov	r1, r4
 800fb82:	4628      	mov	r0, r5
 800fb84:	f003 fec2 	bl	801390c <put_memory>
 800fb88:	60e4      	str	r4, [r4, #12]
 800fb8a:	f804 7bd0 	strb.w	r7, [r4], #208
 800fb8e:	42a6      	cmp	r6, r4
 800fb90:	d1f6      	bne.n	800fb80 <rmw_uxrce_init_subscription_memory+0x1c>
 800fb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop

0800fb98 <rmw_uxrce_init_node_memory>:
 800fb98:	b1b2      	cbz	r2, 800fbc8 <rmw_uxrce_init_node_memory+0x30>
 800fb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9c:	7a07      	ldrb	r7, [r0, #8]
 800fb9e:	4605      	mov	r5, r0
 800fba0:	b98f      	cbnz	r7, 800fbc6 <rmw_uxrce_init_node_memory+0x2e>
 800fba2:	e9c0 7700 	strd	r7, r7, [r0]
 800fba6:	460c      	mov	r4, r1
 800fba8:	23a4      	movs	r3, #164	@ 0xa4
 800fbaa:	2101      	movs	r1, #1
 800fbac:	fb03 4602 	mla	r6, r3, r2, r4
 800fbb0:	60c3      	str	r3, [r0, #12]
 800fbb2:	7201      	strb	r1, [r0, #8]
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f003 fea8 	bl	801390c <put_memory>
 800fbbc:	60e4      	str	r4, [r4, #12]
 800fbbe:	f804 7ba4 	strb.w	r7, [r4], #164
 800fbc2:	42a6      	cmp	r6, r4
 800fbc4:	d1f6      	bne.n	800fbb4 <rmw_uxrce_init_node_memory+0x1c>
 800fbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <rmw_uxrce_init_session_memory>:
 800fbcc:	b1d2      	cbz	r2, 800fc04 <rmw_uxrce_init_session_memory+0x38>
 800fbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd2:	7a07      	ldrb	r7, [r0, #8]
 800fbd4:	4605      	mov	r5, r0
 800fbd6:	b99f      	cbnz	r7, 800fc00 <rmw_uxrce_init_session_memory+0x34>
 800fbd8:	e9c0 7700 	strd	r7, r7, [r0]
 800fbdc:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	fb03 4602 	mla	r6, r3, r2, r4
 800fbe8:	60c3      	str	r3, [r0, #12]
 800fbea:	4698      	mov	r8, r3
 800fbec:	7201      	strb	r1, [r0, #8]
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f003 fe8b 	bl	801390c <put_memory>
 800fbf6:	60e4      	str	r4, [r4, #12]
 800fbf8:	7027      	strb	r7, [r4, #0]
 800fbfa:	4444      	add	r4, r8
 800fbfc:	42a6      	cmp	r6, r4
 800fbfe:	d1f6      	bne.n	800fbee <rmw_uxrce_init_session_memory+0x22>
 800fc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop

0800fc08 <rmw_uxrce_init_topic_memory>:
 800fc08:	b1c2      	cbz	r2, 800fc3c <rmw_uxrce_init_topic_memory+0x34>
 800fc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0c:	7a07      	ldrb	r7, [r0, #8]
 800fc0e:	4606      	mov	r6, r0
 800fc10:	b99f      	cbnz	r7, 800fc3a <rmw_uxrce_init_topic_memory+0x32>
 800fc12:	e9c0 7700 	strd	r7, r7, [r0]
 800fc16:	460c      	mov	r4, r1
 800fc18:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	231c      	movs	r3, #28
 800fc20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc24:	7201      	strb	r1, [r0, #8]
 800fc26:	60c3      	str	r3, [r0, #12]
 800fc28:	4621      	mov	r1, r4
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	f003 fe6e 	bl	801390c <put_memory>
 800fc30:	60e4      	str	r4, [r4, #12]
 800fc32:	f804 7b1c 	strb.w	r7, [r4], #28
 800fc36:	42a5      	cmp	r5, r4
 800fc38:	d1f6      	bne.n	800fc28 <rmw_uxrce_init_topic_memory+0x20>
 800fc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <rmw_uxrce_init_static_input_buffer_memory>:
 800fc40:	b1d2      	cbz	r2, 800fc78 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800fc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc44:	7a07      	ldrb	r7, [r0, #8]
 800fc46:	4606      	mov	r6, r0
 800fc48:	b9af      	cbnz	r7, 800fc76 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800fc4a:	e9c0 7700 	strd	r7, r7, [r0]
 800fc4e:	460c      	mov	r4, r1
 800fc50:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800fc54:	2101      	movs	r1, #1
 800fc56:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fc5a:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800fc5e:	7201      	strb	r1, [r0, #8]
 800fc60:	60c3      	str	r3, [r0, #12]
 800fc62:	4621      	mov	r1, r4
 800fc64:	4630      	mov	r0, r6
 800fc66:	f003 fe51 	bl	801390c <put_memory>
 800fc6a:	60e4      	str	r4, [r4, #12]
 800fc6c:	7027      	strb	r7, [r4, #0]
 800fc6e:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fc72:	42a5      	cmp	r5, r4
 800fc74:	d1f5      	bne.n	800fc62 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop

0800fc7c <rmw_uxrce_init_init_options_impl_memory>:
 800fc7c:	b1b2      	cbz	r2, 800fcac <rmw_uxrce_init_init_options_impl_memory+0x30>
 800fc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc80:	7a07      	ldrb	r7, [r0, #8]
 800fc82:	4605      	mov	r5, r0
 800fc84:	b98f      	cbnz	r7, 800fcaa <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800fc86:	e9c0 7700 	strd	r7, r7, [r0]
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	232c      	movs	r3, #44	@ 0x2c
 800fc8e:	2101      	movs	r1, #1
 800fc90:	fb03 4602 	mla	r6, r3, r2, r4
 800fc94:	60c3      	str	r3, [r0, #12]
 800fc96:	7201      	strb	r1, [r0, #8]
 800fc98:	4621      	mov	r1, r4
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f003 fe36 	bl	801390c <put_memory>
 800fca0:	60e4      	str	r4, [r4, #12]
 800fca2:	f804 7b2c 	strb.w	r7, [r4], #44
 800fca6:	42a6      	cmp	r6, r4
 800fca8:	d1f6      	bne.n	800fc98 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800fcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop

0800fcb0 <rmw_uxrce_init_wait_set_memory>:
 800fcb0:	b1c2      	cbz	r2, 800fce4 <rmw_uxrce_init_wait_set_memory+0x34>
 800fcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb4:	7a07      	ldrb	r7, [r0, #8]
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	b99f      	cbnz	r7, 800fce2 <rmw_uxrce_init_wait_set_memory+0x32>
 800fcba:	e9c0 7700 	strd	r7, r7, [r0]
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	231c      	movs	r3, #28
 800fcc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fccc:	7201      	strb	r1, [r0, #8]
 800fcce:	60c3      	str	r3, [r0, #12]
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f003 fe1a 	bl	801390c <put_memory>
 800fcd8:	60e4      	str	r4, [r4, #12]
 800fcda:	f804 7b1c 	strb.w	r7, [r4], #28
 800fcde:	42a5      	cmp	r5, r4
 800fce0:	d1f6      	bne.n	800fcd0 <rmw_uxrce_init_wait_set_memory+0x20>
 800fce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop

0800fce8 <rmw_uxrce_init_guard_condition_memory>:
 800fce8:	b1b2      	cbz	r2, 800fd18 <rmw_uxrce_init_guard_condition_memory+0x30>
 800fcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcec:	7a07      	ldrb	r7, [r0, #8]
 800fcee:	4605      	mov	r5, r0
 800fcf0:	b98f      	cbnz	r7, 800fd16 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800fcf2:	e9c0 7700 	strd	r7, r7, [r0]
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	2320      	movs	r3, #32
 800fcfa:	2101      	movs	r1, #1
 800fcfc:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800fd00:	7201      	strb	r1, [r0, #8]
 800fd02:	60c3      	str	r3, [r0, #12]
 800fd04:	4621      	mov	r1, r4
 800fd06:	4628      	mov	r0, r5
 800fd08:	f003 fe00 	bl	801390c <put_memory>
 800fd0c:	60e4      	str	r4, [r4, #12]
 800fd0e:	f804 7b20 	strb.w	r7, [r4], #32
 800fd12:	42a6      	cmp	r6, r4
 800fd14:	d1f6      	bne.n	800fd04 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800fd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop

0800fd1c <rmw_uxrce_fini_session_memory>:
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	4801      	ldr	r0, [pc, #4]	@ (800fd24 <rmw_uxrce_fini_session_memory+0x8>)
 800fd20:	f003 bdf4 	b.w	801390c <put_memory>
 800fd24:	2000c5a8 	.word	0x2000c5a8

0800fd28 <rmw_uxrce_fini_node_memory>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	b128      	cbz	r0, 800fd3c <rmw_uxrce_fini_node_memory+0x14>
 800fd30:	4b07      	ldr	r3, [pc, #28]	@ (800fd50 <rmw_uxrce_fini_node_memory+0x28>)
 800fd32:	6819      	ldr	r1, [r3, #0]
 800fd34:	f7f0 fa54 	bl	80001e0 <strcmp>
 800fd38:	b940      	cbnz	r0, 800fd4c <rmw_uxrce_fini_node_memory+0x24>
 800fd3a:	6020      	str	r0, [r4, #0]
 800fd3c:	6861      	ldr	r1, [r4, #4]
 800fd3e:	b129      	cbz	r1, 800fd4c <rmw_uxrce_fini_node_memory+0x24>
 800fd40:	2500      	movs	r5, #0
 800fd42:	4804      	ldr	r0, [pc, #16]	@ (800fd54 <rmw_uxrce_fini_node_memory+0x2c>)
 800fd44:	610d      	str	r5, [r1, #16]
 800fd46:	f003 fde1 	bl	801390c <put_memory>
 800fd4a:	6065      	str	r5, [r4, #4]
 800fd4c:	bd38      	pop	{r3, r4, r5, pc}
 800fd4e:	bf00      	nop
 800fd50:	08016d4c 	.word	0x08016d4c
 800fd54:	2000c3d4 	.word	0x2000c3d4

0800fd58 <rmw_uxrce_fini_publisher_memory>:
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	6800      	ldr	r0, [r0, #0]
 800fd5e:	b128      	cbz	r0, 800fd6c <rmw_uxrce_fini_publisher_memory+0x14>
 800fd60:	4b06      	ldr	r3, [pc, #24]	@ (800fd7c <rmw_uxrce_fini_publisher_memory+0x24>)
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	f7f0 fa3c 	bl	80001e0 <strcmp>
 800fd68:	b938      	cbnz	r0, 800fd7a <rmw_uxrce_fini_publisher_memory+0x22>
 800fd6a:	6020      	str	r0, [r4, #0]
 800fd6c:	6861      	ldr	r1, [r4, #4]
 800fd6e:	b121      	cbz	r1, 800fd7a <rmw_uxrce_fini_publisher_memory+0x22>
 800fd70:	4803      	ldr	r0, [pc, #12]	@ (800fd80 <rmw_uxrce_fini_publisher_memory+0x28>)
 800fd72:	f003 fdcb 	bl	801390c <put_memory>
 800fd76:	2300      	movs	r3, #0
 800fd78:	6063      	str	r3, [r4, #4]
 800fd7a:	bd10      	pop	{r4, pc}
 800fd7c:	08016d4c 	.word	0x08016d4c
 800fd80:	20009410 	.word	0x20009410

0800fd84 <rmw_uxrce_fini_subscription_memory>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	4604      	mov	r4, r0
 800fd88:	6800      	ldr	r0, [r0, #0]
 800fd8a:	b128      	cbz	r0, 800fd98 <rmw_uxrce_fini_subscription_memory+0x14>
 800fd8c:	4b06      	ldr	r3, [pc, #24]	@ (800fda8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800fd8e:	6819      	ldr	r1, [r3, #0]
 800fd90:	f7f0 fa26 	bl	80001e0 <strcmp>
 800fd94:	b938      	cbnz	r0, 800fda6 <rmw_uxrce_fini_subscription_memory+0x22>
 800fd96:	6020      	str	r0, [r4, #0]
 800fd98:	6861      	ldr	r1, [r4, #4]
 800fd9a:	b121      	cbz	r1, 800fda6 <rmw_uxrce_fini_subscription_memory+0x22>
 800fd9c:	4803      	ldr	r0, [pc, #12]	@ (800fdac <rmw_uxrce_fini_subscription_memory+0x28>)
 800fd9e:	f003 fdb5 	bl	801390c <put_memory>
 800fda2:	2300      	movs	r3, #0
 800fda4:	6063      	str	r3, [r4, #4]
 800fda6:	bd10      	pop	{r4, pc}
 800fda8:	08016d4c 	.word	0x08016d4c
 800fdac:	2000c66c 	.word	0x2000c66c

0800fdb0 <rmw_uxrce_fini_service_memory>:
 800fdb0:	b510      	push	{r4, lr}
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	6800      	ldr	r0, [r0, #0]
 800fdb6:	b128      	cbz	r0, 800fdc4 <rmw_uxrce_fini_service_memory+0x14>
 800fdb8:	4b06      	ldr	r3, [pc, #24]	@ (800fdd4 <rmw_uxrce_fini_service_memory+0x24>)
 800fdba:	6819      	ldr	r1, [r3, #0]
 800fdbc:	f7f0 fa10 	bl	80001e0 <strcmp>
 800fdc0:	b938      	cbnz	r0, 800fdd2 <rmw_uxrce_fini_service_memory+0x22>
 800fdc2:	6020      	str	r0, [r4, #0]
 800fdc4:	6861      	ldr	r1, [r4, #4]
 800fdc6:	b121      	cbz	r1, 800fdd2 <rmw_uxrce_fini_service_memory+0x22>
 800fdc8:	4803      	ldr	r0, [pc, #12]	@ (800fdd8 <rmw_uxrce_fini_service_memory+0x28>)
 800fdca:	f003 fd9f 	bl	801390c <put_memory>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	6063      	str	r3, [r4, #4]
 800fdd2:	bd10      	pop	{r4, pc}
 800fdd4:	08016d4c 	.word	0x08016d4c
 800fdd8:	2000c65c 	.word	0x2000c65c

0800fddc <rmw_uxrce_fini_client_memory>:
 800fddc:	b510      	push	{r4, lr}
 800fdde:	4604      	mov	r4, r0
 800fde0:	6800      	ldr	r0, [r0, #0]
 800fde2:	b128      	cbz	r0, 800fdf0 <rmw_uxrce_fini_client_memory+0x14>
 800fde4:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <rmw_uxrce_fini_client_memory+0x24>)
 800fde6:	6819      	ldr	r1, [r3, #0]
 800fde8:	f7f0 f9fa 	bl	80001e0 <strcmp>
 800fdec:	b938      	cbnz	r0, 800fdfe <rmw_uxrce_fini_client_memory+0x22>
 800fdee:	6020      	str	r0, [r4, #0]
 800fdf0:	6861      	ldr	r1, [r4, #4]
 800fdf2:	b121      	cbz	r1, 800fdfe <rmw_uxrce_fini_client_memory+0x22>
 800fdf4:	4803      	ldr	r0, [pc, #12]	@ (800fe04 <rmw_uxrce_fini_client_memory+0x28>)
 800fdf6:	f003 fd89 	bl	801390c <put_memory>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	6063      	str	r3, [r4, #4]
 800fdfe:	bd10      	pop	{r4, pc}
 800fe00:	08016d4c 	.word	0x08016d4c
 800fe04:	20009c90 	.word	0x20009c90

0800fe08 <rmw_uxrce_fini_topic_memory>:
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	4803      	ldr	r0, [pc, #12]	@ (800fe1c <rmw_uxrce_fini_topic_memory+0x14>)
 800fe10:	f003 fd7c 	bl	801390c <put_memory>
 800fe14:	2300      	movs	r3, #0
 800fe16:	61a3      	str	r3, [r4, #24]
 800fe18:	bd10      	pop	{r4, pc}
 800fe1a:	bf00      	nop
 800fe1c:	2000c598 	.word	0x2000c598

0800fe20 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fe20:	b082      	sub	sp, #8
 800fe22:	b4f0      	push	{r4, r5, r6, r7}
 800fe24:	4923      	ldr	r1, [pc, #140]	@ (800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800fe26:	ac04      	add	r4, sp, #16
 800fe28:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe2c:	680d      	ldr	r5, [r1, #0]
 800fe2e:	9c05      	ldr	r4, [sp, #20]
 800fe30:	2d00      	cmp	r5, #0
 800fe32:	d03d      	beq.n	800feb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800fe34:	462b      	mov	r3, r5
 800fe36:	2100      	movs	r1, #0
 800fe38:	68da      	ldr	r2, [r3, #12]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fe40:	4290      	cmp	r0, r2
 800fe42:	bf08      	it	eq
 800fe44:	3101      	addeq	r1, #1
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1f6      	bne.n	800fe38 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fe4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d026      	beq.n	800fea0 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800fe52:	d906      	bls.n	800fe62 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800fe54:	2b03      	cmp	r3, #3
 800fe56:	d004      	beq.n	800fe62 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800fe58:	2100      	movs	r1, #0
 800fe5a:	bcf0      	pop	{r4, r5, r6, r7}
 800fe5c:	4608      	mov	r0, r1
 800fe5e:	b002      	add	sp, #8
 800fe60:	4770      	bx	lr
 800fe62:	b304      	cbz	r4, 800fea6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fe64:	428c      	cmp	r4, r1
 800fe66:	d81e      	bhi.n	800fea6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fe68:	2d00      	cmp	r5, #0
 800fe6a:	d0f5      	beq.n	800fe58 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800fe72:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800fe76:	e002      	b.n	800fe7e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800fe78:	68ad      	ldr	r5, [r5, #8]
 800fe7a:	2d00      	cmp	r5, #0
 800fe7c:	d0ed      	beq.n	800fe5a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800fe7e:	68eb      	ldr	r3, [r5, #12]
 800fe80:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800fe84:	4290      	cmp	r0, r2
 800fe86:	d1f7      	bne.n	800fe78 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fe88:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	42b2      	cmp	r2, r6
 800fe92:	eb73 0407 	sbcs.w	r4, r3, r7
 800fe96:	daef      	bge.n	800fe78 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fe98:	4616      	mov	r6, r2
 800fe9a:	461f      	mov	r7, r3
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	e7eb      	b.n	800fe78 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fea0:	b10c      	cbz	r4, 800fea6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fea2:	428c      	cmp	r4, r1
 800fea4:	d9d8      	bls.n	800fe58 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fea6:	bcf0      	pop	{r4, r5, r6, r7}
 800fea8:	4802      	ldr	r0, [pc, #8]	@ (800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800feaa:	b002      	add	sp, #8
 800feac:	f003 bd1e 	b.w	80138ec <get_memory>
 800feb0:	4629      	mov	r1, r5
 800feb2:	e7ca      	b.n	800fe4a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800feb4:	20009400 	.word	0x20009400

0800feb8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800feb8:	4b12      	ldr	r3, [pc, #72]	@ (800ff04 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	b1fb      	cbz	r3, 800fefe <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800febe:	b4f0      	push	{r4, r5, r6, r7}
 800fec0:	f04f 0c00 	mov.w	ip, #0
 800fec4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fec8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800fecc:	e001      	b.n	800fed2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	b193      	cbz	r3, 800fef8 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800fed2:	68da      	ldr	r2, [r3, #12]
 800fed4:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800fed8:	4288      	cmp	r0, r1
 800feda:	d1f8      	bne.n	800fece <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800fedc:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800fee0:	e9d2 6700 	ldrd	r6, r7, [r2]
 800fee4:	42a6      	cmp	r6, r4
 800fee6:	eb77 0205 	sbcs.w	r2, r7, r5
 800feea:	daf0      	bge.n	800fece <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800feec:	469c      	mov	ip, r3
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	4634      	mov	r4, r6
 800fef2:	463d      	mov	r5, r7
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1ec      	bne.n	800fed2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800fef8:	4660      	mov	r0, ip
 800fefa:	bcf0      	pop	{r4, r5, r6, r7}
 800fefc:	4770      	bx	lr
 800fefe:	4618      	mov	r0, r3
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	20009400 	.word	0x20009400

0800ff08 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	4e38      	ldr	r6, [pc, #224]	@ (800fff0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ff0e:	f8d6 8000 	ldr.w	r8, [r6]
 800ff12:	b083      	sub	sp, #12
 800ff14:	f003 fda8 	bl	8013a68 <rmw_uros_epoch_nanos>
 800ff18:	f1b8 0f00 	cmp.w	r8, #0
 800ff1c:	d05f      	beq.n	800ffde <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ff1e:	46b1      	mov	r9, r6
 800ff20:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ff24:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ff28:	2b04      	cmp	r3, #4
 800ff2a:	4682      	mov	sl, r0
 800ff2c:	468b      	mov	fp, r1
 800ff2e:	d02d      	beq.n	800ff8c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ff30:	2b05      	cmp	r3, #5
 800ff32:	d041      	beq.n	800ffb8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ff34:	2b03      	cmp	r3, #3
 800ff36:	d029      	beq.n	800ff8c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ff40:	2001      	movs	r0, #1
 800ff42:	2100      	movs	r1, #0
 800ff44:	9b00      	ldr	r3, [sp, #0]
 800ff46:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 800ff4a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ff4e:	18c2      	adds	r2, r0, r3
 800ff50:	9b01      	ldr	r3, [sp, #4]
 800ff52:	eb41 0303 	adc.w	r3, r1, r3
 800ff56:	1994      	adds	r4, r2, r6
 800ff58:	eb43 0507 	adc.w	r5, r3, r7
 800ff5c:	4554      	cmp	r4, sl
 800ff5e:	eb75 020b 	sbcs.w	r2, r5, fp
 800ff62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff66:	db03      	blt.n	800ff70 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ff68:	45b2      	cmp	sl, r6
 800ff6a:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ff6e:	da05      	bge.n	800ff7c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ff70:	4641      	mov	r1, r8
 800ff72:	4648      	mov	r0, r9
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	f003 fcc9 	bl	801390c <put_memory>
 800ff7a:	9b00      	ldr	r3, [sp, #0]
 800ff7c:	b37b      	cbz	r3, 800ffde <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ff7e:	4698      	mov	r8, r3
 800ff80:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ff84:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ff88:	2b04      	cmp	r3, #4
 800ff8a:	d1d1      	bne.n	800ff30 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800ff8c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ff90:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 800ff94:	e9cd 2300 	strd	r2, r3, [sp]
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 800ff9e:	d015      	beq.n	800ffcc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ffa0:	9a01      	ldr	r2, [sp, #4]
 800ffa2:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ffa4:	fb03 f702 	mul.w	r7, r3, r2
 800ffa8:	9a00      	ldr	r2, [sp, #0]
 800ffaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ffae:	e9cd 2300 	strd	r2, r3, [sp]
 800ffb2:	443b      	add	r3, r7
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	e7c5      	b.n	800ff44 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ffb8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800ffbc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800ffc0:	e9cd 2300 	strd	r2, r3, [sp]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 800ffca:	d1e9      	bne.n	800ffa0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800ffcc:	ea50 0301 	orrs.w	r3, r0, r1
 800ffd0:	bf02      	ittt	eq
 800ffd2:	a305      	addeq	r3, pc, #20	@ (adr r3, 800ffe8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800ffd4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800ffd8:	e9cd 2300 	strdeq	r2, r3, [sp]
 800ffdc:	e7b2      	b.n	800ff44 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ffde:	b003      	add	sp, #12
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	f3af 8000 	nop.w
 800ffe8:	fc23ac00 	.word	0xfc23ac00
 800ffec:	00000006 	.word	0x00000006
 800fff0:	20009400 	.word	0x20009400
 800fff4:	3b9aca00 	.word	0x3b9aca00

0800fff8 <run_xrce_session>:
 800fff8:	b510      	push	{r4, lr}
 800fffa:	788c      	ldrb	r4, [r1, #2]
 800fffc:	b086      	sub	sp, #24
 800fffe:	2c01      	cmp	r4, #1
 8010000:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010004:	d00c      	beq.n	8010020 <run_xrce_session+0x28>
 8010006:	4619      	mov	r1, r3
 8010008:	2301      	movs	r3, #1
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	f10d 020e 	add.w	r2, sp, #14
 8010010:	f10d 0317 	add.w	r3, sp, #23
 8010014:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010018:	f001 f8f8 	bl	801120c <uxr_run_session_until_all_status>
 801001c:	b006      	add	sp, #24
 801001e:	bd10      	pop	{r4, pc}
 8010020:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010024:	f000 fd10 	bl	8010a48 <uxr_flash_output_streams>
 8010028:	4620      	mov	r0, r4
 801002a:	b006      	add	sp, #24
 801002c:	bd10      	pop	{r4, pc}
 801002e:	bf00      	nop

08010030 <convert_qos_profile>:
 8010030:	b430      	push	{r4, r5}
 8010032:	7a0d      	ldrb	r5, [r1, #8]
 8010034:	780c      	ldrb	r4, [r1, #0]
 8010036:	7a4a      	ldrb	r2, [r1, #9]
 8010038:	8889      	ldrh	r1, [r1, #4]
 801003a:	8081      	strh	r1, [r0, #4]
 801003c:	f1a5 0502 	sub.w	r5, r5, #2
 8010040:	f1a4 0402 	sub.w	r4, r4, #2
 8010044:	2a02      	cmp	r2, #2
 8010046:	fab5 f585 	clz	r5, r5
 801004a:	fab4 f484 	clz	r4, r4
 801004e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010052:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010056:	bf18      	it	ne
 8010058:	2200      	movne	r2, #0
 801005a:	7045      	strb	r5, [r0, #1]
 801005c:	7084      	strb	r4, [r0, #2]
 801005e:	7002      	strb	r2, [r0, #0]
 8010060:	bc30      	pop	{r4, r5}
 8010062:	4770      	bx	lr

08010064 <generate_type_name>:
 8010064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010066:	2300      	movs	r3, #0
 8010068:	700b      	strb	r3, [r1, #0]
 801006a:	6803      	ldr	r3, [r0, #0]
 801006c:	b087      	sub	sp, #28
 801006e:	4614      	mov	r4, r2
 8010070:	b1d3      	cbz	r3, 80100a8 <generate_type_name+0x44>
 8010072:	4d0f      	ldr	r5, [pc, #60]	@ (80100b0 <generate_type_name+0x4c>)
 8010074:	462f      	mov	r7, r5
 8010076:	4a0f      	ldr	r2, [pc, #60]	@ (80100b4 <generate_type_name+0x50>)
 8010078:	4e0f      	ldr	r6, [pc, #60]	@ (80100b8 <generate_type_name+0x54>)
 801007a:	6840      	ldr	r0, [r0, #4]
 801007c:	9004      	str	r0, [sp, #16]
 801007e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010082:	4608      	mov	r0, r1
 8010084:	9205      	str	r2, [sp, #20]
 8010086:	9503      	str	r5, [sp, #12]
 8010088:	4a0c      	ldr	r2, [pc, #48]	@ (80100bc <generate_type_name+0x58>)
 801008a:	9700      	str	r7, [sp, #0]
 801008c:	4621      	mov	r1, r4
 801008e:	f004 fec5 	bl	8014e1c <sniprintf>
 8010092:	2800      	cmp	r0, #0
 8010094:	db05      	blt.n	80100a2 <generate_type_name+0x3e>
 8010096:	4284      	cmp	r4, r0
 8010098:	bfd4      	ite	le
 801009a:	2000      	movle	r0, #0
 801009c:	2001      	movgt	r0, #1
 801009e:	b007      	add	sp, #28
 80100a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a2:	2000      	movs	r0, #0
 80100a4:	b007      	add	sp, #28
 80100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a8:	4b05      	ldr	r3, [pc, #20]	@ (80100c0 <generate_type_name+0x5c>)
 80100aa:	4d01      	ldr	r5, [pc, #4]	@ (80100b0 <generate_type_name+0x4c>)
 80100ac:	461f      	mov	r7, r3
 80100ae:	e7e2      	b.n	8010076 <generate_type_name+0x12>
 80100b0:	08016afc 	.word	0x08016afc
 80100b4:	08016b10 	.word	0x08016b10
 80100b8:	08016b14 	.word	0x08016b14
 80100bc:	08016b00 	.word	0x08016b00
 80100c0:	080168ec 	.word	0x080168ec

080100c4 <generate_topic_name>:
 80100c4:	b510      	push	{r4, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	4b09      	ldr	r3, [pc, #36]	@ (80100f0 <generate_topic_name+0x2c>)
 80100ca:	9000      	str	r0, [sp, #0]
 80100cc:	4614      	mov	r4, r2
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	4a08      	ldr	r2, [pc, #32]	@ (80100f4 <generate_topic_name+0x30>)
 80100d4:	f004 fea2 	bl	8014e1c <sniprintf>
 80100d8:	2800      	cmp	r0, #0
 80100da:	db05      	blt.n	80100e8 <generate_topic_name+0x24>
 80100dc:	4284      	cmp	r4, r0
 80100de:	bfd4      	ite	le
 80100e0:	2000      	movle	r0, #0
 80100e2:	2001      	movgt	r0, #1
 80100e4:	b002      	add	sp, #8
 80100e6:	bd10      	pop	{r4, pc}
 80100e8:	2000      	movs	r0, #0
 80100ea:	b002      	add	sp, #8
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	bf00      	nop
 80100f0:	08016b18 	.word	0x08016b18
 80100f4:	080165f0 	.word	0x080165f0

080100f8 <is_uxrce_rmw_identifier_valid>:
 80100f8:	b510      	push	{r4, lr}
 80100fa:	4604      	mov	r4, r0
 80100fc:	b140      	cbz	r0, 8010110 <is_uxrce_rmw_identifier_valid+0x18>
 80100fe:	f7fe fc97 	bl	800ea30 <rmw_get_implementation_identifier>
 8010102:	4601      	mov	r1, r0
 8010104:	4620      	mov	r0, r4
 8010106:	f7f0 f86b 	bl	80001e0 <strcmp>
 801010a:	fab0 f080 	clz	r0, r0
 801010e:	0940      	lsrs	r0, r0, #5
 8010110:	bd10      	pop	{r4, pc}
 8010112:	bf00      	nop

08010114 <get_message_typesupport_handle>:
 8010114:	6883      	ldr	r3, [r0, #8]
 8010116:	4718      	bx	r3

08010118 <get_message_typesupport_handle_function>:
 8010118:	b510      	push	{r4, lr}
 801011a:	4604      	mov	r4, r0
 801011c:	6800      	ldr	r0, [r0, #0]
 801011e:	f7f0 f85f 	bl	80001e0 <strcmp>
 8010122:	2800      	cmp	r0, #0
 8010124:	bf0c      	ite	eq
 8010126:	4620      	moveq	r0, r4
 8010128:	2000      	movne	r0, #0
 801012a:	bd10      	pop	{r4, pc}

0801012c <uxr_buffer_delete_entity>:
 801012c:	b530      	push	{r4, r5, lr}
 801012e:	b08f      	sub	sp, #60	@ 0x3c
 8010130:	2403      	movs	r4, #3
 8010132:	2500      	movs	r5, #0
 8010134:	e9cd 4500 	strd	r4, r5, [sp]
 8010138:	9202      	str	r2, [sp, #8]
 801013a:	ab06      	add	r3, sp, #24
 801013c:	2204      	movs	r2, #4
 801013e:	9103      	str	r1, [sp, #12]
 8010140:	4604      	mov	r4, r0
 8010142:	f001 fa9f 	bl	8011684 <uxr_prepare_stream_to_write_submessage>
 8010146:	b918      	cbnz	r0, 8010150 <uxr_buffer_delete_entity+0x24>
 8010148:	4604      	mov	r4, r0
 801014a:	4620      	mov	r0, r4
 801014c:	b00f      	add	sp, #60	@ 0x3c
 801014e:	bd30      	pop	{r4, r5, pc}
 8010150:	9902      	ldr	r1, [sp, #8]
 8010152:	aa05      	add	r2, sp, #20
 8010154:	4620      	mov	r0, r4
 8010156:	f001 fbcf 	bl	80118f8 <uxr_init_base_object_request>
 801015a:	a905      	add	r1, sp, #20
 801015c:	4604      	mov	r4, r0
 801015e:	a806      	add	r0, sp, #24
 8010160:	f003 f856 	bl	8013210 <uxr_serialize_DELETE_Payload>
 8010164:	4620      	mov	r0, r4
 8010166:	b00f      	add	sp, #60	@ 0x3c
 8010168:	bd30      	pop	{r4, r5, pc}
 801016a:	bf00      	nop

0801016c <uxr_common_create_entity>:
 801016c:	b530      	push	{r4, r5, lr}
 801016e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010172:	b08d      	sub	sp, #52	@ 0x34
 8010174:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010178:	2d01      	cmp	r5, #1
 801017a:	bf0c      	ite	eq
 801017c:	f003 0201 	andeq.w	r2, r3, #1
 8010180:	2200      	movne	r2, #0
 8010182:	330e      	adds	r3, #14
 8010184:	4604      	mov	r4, r0
 8010186:	441a      	add	r2, r3
 8010188:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801018c:	9001      	str	r0, [sp, #4]
 801018e:	2101      	movs	r1, #1
 8010190:	9100      	str	r1, [sp, #0]
 8010192:	b292      	uxth	r2, r2
 8010194:	9903      	ldr	r1, [sp, #12]
 8010196:	ab04      	add	r3, sp, #16
 8010198:	4620      	mov	r0, r4
 801019a:	f001 fa73 	bl	8011684 <uxr_prepare_stream_to_write_submessage>
 801019e:	b918      	cbnz	r0, 80101a8 <uxr_common_create_entity+0x3c>
 80101a0:	4604      	mov	r4, r0
 80101a2:	4620      	mov	r0, r4
 80101a4:	b00d      	add	sp, #52	@ 0x34
 80101a6:	bd30      	pop	{r4, r5, pc}
 80101a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80101aa:	9902      	ldr	r1, [sp, #8]
 80101ac:	4620      	mov	r0, r4
 80101ae:	f001 fba3 	bl	80118f8 <uxr_init_base_object_request>
 80101b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80101b4:	4604      	mov	r4, r0
 80101b6:	a804      	add	r0, sp, #16
 80101b8:	f002 ff7e 	bl	80130b8 <uxr_serialize_CREATE_Payload>
 80101bc:	4620      	mov	r0, r4
 80101be:	b00d      	add	sp, #52	@ 0x34
 80101c0:	bd30      	pop	{r4, r5, pc}
 80101c2:	bf00      	nop

080101c4 <uxr_buffer_create_participant_bin>:
 80101c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c6:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80101ca:	ac11      	add	r4, sp, #68	@ 0x44
 80101cc:	9103      	str	r1, [sp, #12]
 80101ce:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 80101d0:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 80101d4:	2103      	movs	r1, #3
 80101d6:	7221      	strb	r1, [r4, #8]
 80101d8:	2301      	movs	r3, #1
 80101da:	2100      	movs	r1, #0
 80101dc:	7123      	strb	r3, [r4, #4]
 80101de:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 80101e2:	9202      	str	r2, [sp, #8]
 80101e4:	4605      	mov	r5, r0
 80101e6:	f88d 1014 	strb.w	r1, [sp, #20]
 80101ea:	b1ce      	cbz	r6, 8010220 <uxr_buffer_create_participant_bin+0x5c>
 80101ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80101f0:	9608      	str	r6, [sp, #32]
 80101f2:	a809      	add	r0, sp, #36	@ 0x24
 80101f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101f8:	a915      	add	r1, sp, #84	@ 0x54
 80101fa:	f7fb fc9d 	bl	800bb38 <ucdr_init_buffer>
 80101fe:	a905      	add	r1, sp, #20
 8010200:	a809      	add	r0, sp, #36	@ 0x24
 8010202:	f002 fbfd 	bl	8012a00 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010206:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010208:	9401      	str	r4, [sp, #4]
 801020a:	b283      	uxth	r3, r0
 801020c:	9700      	str	r7, [sp, #0]
 801020e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010212:	60e0      	str	r0, [r4, #12]
 8010214:	4628      	mov	r0, r5
 8010216:	f7ff ffa9 	bl	801016c <uxr_common_create_entity>
 801021a:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 801021e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010220:	f88d 601c 	strb.w	r6, [sp, #28]
 8010224:	e7e5      	b.n	80101f2 <uxr_buffer_create_participant_bin+0x2e>
 8010226:	bf00      	nop

08010228 <uxr_buffer_create_topic_bin>:
 8010228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801022a:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801022e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010230:	4605      	mov	r5, r0
 8010232:	9105      	str	r1, [sp, #20]
 8010234:	4618      	mov	r0, r3
 8010236:	a997      	add	r1, sp, #604	@ 0x25c
 8010238:	2602      	movs	r6, #2
 801023a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801023e:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 8010242:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 8010246:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 8010248:	f000 f9ae 	bl	80105a8 <uxr_object_id_to_raw>
 801024c:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 801024e:	9206      	str	r2, [sp, #24]
 8010250:	2303      	movs	r3, #3
 8010252:	2101      	movs	r1, #1
 8010254:	7223      	strb	r3, [r4, #8]
 8010256:	a80b      	add	r0, sp, #44	@ 0x2c
 8010258:	2300      	movs	r3, #0
 801025a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801025e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010262:	a917      	add	r1, sp, #92	@ 0x5c
 8010264:	f88d 301c 	strb.w	r3, [sp, #28]
 8010268:	960a      	str	r6, [sp, #40]	@ 0x28
 801026a:	f7fb fc65 	bl	800bb38 <ucdr_init_buffer>
 801026e:	a906      	add	r1, sp, #24
 8010270:	a80b      	add	r0, sp, #44	@ 0x2c
 8010272:	f002 fbe7 	bl	8012a44 <uxr_serialize_OBJK_Topic_Binary>
 8010276:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8010278:	9401      	str	r4, [sp, #4]
 801027a:	9700      	str	r7, [sp, #0]
 801027c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010280:	4628      	mov	r0, r5
 8010282:	b2b3      	uxth	r3, r6
 8010284:	60e6      	str	r6, [r4, #12]
 8010286:	f7ff ff71 	bl	801016c <uxr_common_create_entity>
 801028a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801028e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010290 <uxr_buffer_create_subscriber_bin>:
 8010290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010292:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010296:	ac0e      	add	r4, sp, #56	@ 0x38
 8010298:	4605      	mov	r5, r0
 801029a:	9105      	str	r1, [sp, #20]
 801029c:	4618      	mov	r0, r3
 801029e:	a992      	add	r1, sp, #584	@ 0x248
 80102a0:	2604      	movs	r6, #4
 80102a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80102a6:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80102aa:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80102ae:	f000 f97b 	bl	80105a8 <uxr_object_id_to_raw>
 80102b2:	2103      	movs	r1, #3
 80102b4:	2300      	movs	r3, #0
 80102b6:	a806      	add	r0, sp, #24
 80102b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102bc:	7221      	strb	r1, [r4, #8]
 80102be:	a912      	add	r1, sp, #72	@ 0x48
 80102c0:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80102c4:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80102c8:	f7fb fc36 	bl	800bb38 <ucdr_init_buffer>
 80102cc:	a993      	add	r1, sp, #588	@ 0x24c
 80102ce:	a806      	add	r0, sp, #24
 80102d0:	f002 fc6c 	bl	8012bac <uxr_serialize_OBJK_Subscriber_Binary>
 80102d4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80102d6:	9700      	str	r7, [sp, #0]
 80102d8:	9401      	str	r4, [sp, #4]
 80102da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80102de:	4628      	mov	r0, r5
 80102e0:	b2b3      	uxth	r3, r6
 80102e2:	60e6      	str	r6, [r4, #12]
 80102e4:	f7ff ff42 	bl	801016c <uxr_common_create_entity>
 80102e8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80102ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ee:	bf00      	nop

080102f0 <uxr_buffer_create_datareader_bin>:
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80102f8:	ac1f      	add	r4, sp, #124	@ 0x7c
 80102fa:	2506      	movs	r5, #6
 80102fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010300:	9105      	str	r1, [sp, #20]
 8010302:	4606      	mov	r6, r0
 8010304:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010306:	4618      	mov	r0, r3
 8010308:	7125      	strb	r5, [r4, #4]
 801030a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801030e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010312:	2703      	movs	r7, #3
 8010314:	f000 f948 	bl	80105a8 <uxr_object_id_to_raw>
 8010318:	a90e      	add	r1, sp, #56	@ 0x38
 801031a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801031c:	7227      	strb	r7, [r4, #8]
 801031e:	f000 f943 	bl	80105a8 <uxr_object_id_to_raw>
 8010322:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010326:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 801032a:	3d00      	subs	r5, #0
 801032c:	f04f 0300 	mov.w	r3, #0
 8010330:	bf18      	it	ne
 8010332:	2501      	movne	r5, #1
 8010334:	2201      	movs	r2, #1
 8010336:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801033a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 801033e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010342:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010346:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801034a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801034e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010352:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010356:	bb89      	cbnz	r1, 80103bc <uxr_buffer_create_datareader_bin+0xcc>
 8010358:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801035c:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010360:	f04f 0c13 	mov.w	ip, #19
 8010364:	250b      	movs	r5, #11
 8010366:	2221      	movs	r2, #33	@ 0x21
 8010368:	2111      	movs	r1, #17
 801036a:	2009      	movs	r0, #9
 801036c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010370:	b923      	cbnz	r3, 801037c <uxr_buffer_create_datareader_bin+0x8c>
 8010372:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010376:	4672      	mov	r2, lr
 8010378:	4661      	mov	r1, ip
 801037a:	4628      	mov	r0, r5
 801037c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010380:	2b01      	cmp	r3, #1
 8010382:	d025      	beq.n	80103d0 <uxr_buffer_create_datareader_bin+0xe0>
 8010384:	2b03      	cmp	r3, #3
 8010386:	d029      	beq.n	80103dc <uxr_buffer_create_datareader_bin+0xec>
 8010388:	b32b      	cbz	r3, 80103d6 <uxr_buffer_create_datareader_bin+0xe6>
 801038a:	a806      	add	r0, sp, #24
 801038c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010390:	a923      	add	r1, sp, #140	@ 0x8c
 8010392:	f7fb fbd1 	bl	800bb38 <ucdr_init_buffer>
 8010396:	a90e      	add	r1, sp, #56	@ 0x38
 8010398:	a806      	add	r0, sp, #24
 801039a:	f002 fc7d 	bl	8012c98 <uxr_serialize_OBJK_DataReader_Binary>
 801039e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80103a0:	9401      	str	r4, [sp, #4]
 80103a2:	b283      	uxth	r3, r0
 80103a4:	f8cd 8000 	str.w	r8, [sp]
 80103a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80103ac:	60e0      	str	r0, [r4, #12]
 80103ae:	4630      	mov	r0, r6
 80103b0:	f7ff fedc 	bl	801016c <uxr_common_create_entity>
 80103b4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80103b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103bc:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80103c0:	f04f 0c12 	mov.w	ip, #18
 80103c4:	250a      	movs	r5, #10
 80103c6:	2220      	movs	r2, #32
 80103c8:	2110      	movs	r1, #16
 80103ca:	2008      	movs	r0, #8
 80103cc:	2702      	movs	r7, #2
 80103ce:	e7cd      	b.n	801036c <uxr_buffer_create_datareader_bin+0x7c>
 80103d0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80103d4:	e7d9      	b.n	801038a <uxr_buffer_create_datareader_bin+0x9a>
 80103d6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80103da:	e7d6      	b.n	801038a <uxr_buffer_create_datareader_bin+0x9a>
 80103dc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80103e0:	e7d3      	b.n	801038a <uxr_buffer_create_datareader_bin+0x9a>
 80103e2:	bf00      	nop

080103e4 <get_custom_error>:
 80103e4:	4b01      	ldr	r3, [pc, #4]	@ (80103ec <get_custom_error+0x8>)
 80103e6:	7818      	ldrb	r0, [r3, #0]
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	200091c0 	.word	0x200091c0

080103f0 <recv_custom_msg>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80103f8:	b089      	sub	sp, #36	@ 0x24
 80103fa:	2600      	movs	r6, #0
 80103fc:	4604      	mov	r4, r0
 80103fe:	9305      	str	r3, [sp, #20]
 8010400:	468a      	mov	sl, r1
 8010402:	4693      	mov	fp, r2
 8010404:	f88d 601e 	strb.w	r6, [sp, #30]
 8010408:	b325      	cbz	r5, 8010454 <recv_custom_msg+0x64>
 801040a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801040e:	f10d 081f 	add.w	r8, sp, #31
 8010412:	af05      	add	r7, sp, #20
 8010414:	f10d 061e 	add.w	r6, sp, #30
 8010418:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801041c:	e002      	b.n	8010424 <recv_custom_msg+0x34>
 801041e:	9b05      	ldr	r3, [sp, #20]
 8010420:	2b00      	cmp	r3, #0
 8010422:	dd0f      	ble.n	8010444 <recv_custom_msg+0x54>
 8010424:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010428:	e9cd 5600 	strd	r5, r6, [sp]
 801042c:	4623      	mov	r3, r4
 801042e:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010432:	4622      	mov	r2, r4
 8010434:	4648      	mov	r0, r9
 8010436:	f001 fc7d 	bl	8011d34 <uxr_read_framed_msg>
 801043a:	2800      	cmp	r0, #0
 801043c:	d0ef      	beq.n	801041e <recv_custom_msg+0x2e>
 801043e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010442:	b1b3      	cbz	r3, 8010472 <recv_custom_msg+0x82>
 8010444:	4b0f      	ldr	r3, [pc, #60]	@ (8010484 <recv_custom_msg+0x94>)
 8010446:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801044a:	701a      	strb	r2, [r3, #0]
 801044c:	2000      	movs	r0, #0
 801044e:	b009      	add	sp, #36	@ 0x24
 8010450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010454:	f10d 021f 	add.w	r2, sp, #31
 8010458:	9200      	str	r2, [sp, #0]
 801045a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801045e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010462:	4601      	mov	r1, r0
 8010464:	47a8      	blx	r5
 8010466:	2800      	cmp	r0, #0
 8010468:	d0ec      	beq.n	8010444 <recv_custom_msg+0x54>
 801046a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1e8      	bne.n	8010444 <recv_custom_msg+0x54>
 8010472:	f8cb 0000 	str.w	r0, [fp]
 8010476:	2001      	movs	r0, #1
 8010478:	f8ca 4000 	str.w	r4, [sl]
 801047c:	b009      	add	sp, #36	@ 0x24
 801047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010482:	bf00      	nop
 8010484:	200091c0 	.word	0x200091c0

08010488 <send_custom_msg>:
 8010488:	b570      	push	{r4, r5, r6, lr}
 801048a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801048e:	b086      	sub	sp, #24
 8010490:	4616      	mov	r6, r2
 8010492:	b975      	cbnz	r5, 80104b2 <send_custom_msg+0x2a>
 8010494:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010498:	f10d 0317 	add.w	r3, sp, #23
 801049c:	47a0      	blx	r4
 801049e:	b108      	cbz	r0, 80104a4 <send_custom_msg+0x1c>
 80104a0:	42b0      	cmp	r0, r6
 80104a2:	d015      	beq.n	80104d0 <send_custom_msg+0x48>
 80104a4:	4b0c      	ldr	r3, [pc, #48]	@ (80104d8 <send_custom_msg+0x50>)
 80104a6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80104aa:	701a      	strb	r2, [r3, #0]
 80104ac:	2000      	movs	r0, #0
 80104ae:	b006      	add	sp, #24
 80104b0:	bd70      	pop	{r4, r5, r6, pc}
 80104b2:	460b      	mov	r3, r1
 80104b4:	2200      	movs	r2, #0
 80104b6:	f10d 0117 	add.w	r1, sp, #23
 80104ba:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80104be:	9600      	str	r6, [sp, #0]
 80104c0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80104c4:	4602      	mov	r2, r0
 80104c6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80104ca:	f001 fa4b 	bl	8011964 <uxr_write_framed_msg>
 80104ce:	e7e6      	b.n	801049e <send_custom_msg+0x16>
 80104d0:	2001      	movs	r0, #1
 80104d2:	b006      	add	sp, #24
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
 80104d6:	bf00      	nop
 80104d8:	200091c0 	.word	0x200091c0

080104dc <uxr_set_custom_transport_callbacks>:
 80104dc:	b430      	push	{r4, r5}
 80104de:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80104e2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80104e6:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 80104ea:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80104ee:	bc30      	pop	{r4, r5}
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop

080104f4 <uxr_init_custom_transport>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80104fa:	b303      	cbz	r3, 801053e <uxr_init_custom_transport+0x4a>
 80104fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010500:	4604      	mov	r4, r0
 8010502:	b1e2      	cbz	r2, 801053e <uxr_init_custom_transport+0x4a>
 8010504:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010508:	b1ca      	cbz	r2, 801053e <uxr_init_custom_transport+0x4a>
 801050a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801050e:	b1b2      	cbz	r2, 801053e <uxr_init_custom_transport+0x4a>
 8010510:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010514:	4798      	blx	r3
 8010516:	4605      	mov	r5, r0
 8010518:	b188      	cbz	r0, 801053e <uxr_init_custom_transport+0x4a>
 801051a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801051e:	b98b      	cbnz	r3, 8010544 <uxr_init_custom_transport+0x50>
 8010520:	480b      	ldr	r0, [pc, #44]	@ (8010550 <uxr_init_custom_transport+0x5c>)
 8010522:	490c      	ldr	r1, [pc, #48]	@ (8010554 <uxr_init_custom_transport+0x60>)
 8010524:	4a0c      	ldr	r2, [pc, #48]	@ (8010558 <uxr_init_custom_transport+0x64>)
 8010526:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 801052a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801052e:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 8010532:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010536:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801053a:	4628      	mov	r0, r5
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	2500      	movs	r5, #0
 8010540:	4628      	mov	r0, r5
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	2100      	movs	r1, #0
 8010546:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801054a:	f001 fa05 	bl	8011958 <uxr_init_framing_io>
 801054e:	e7e7      	b.n	8010520 <uxr_init_custom_transport+0x2c>
 8010550:	08010489 	.word	0x08010489
 8010554:	080103f1 	.word	0x080103f1
 8010558:	080103e5 	.word	0x080103e5

0801055c <uxr_close_custom_transport>:
 801055c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010560:	4718      	bx	r3
 8010562:	bf00      	nop

08010564 <uxr_object_id>:
 8010564:	b082      	sub	sp, #8
 8010566:	2300      	movs	r3, #0
 8010568:	f88d 1006 	strb.w	r1, [sp, #6]
 801056c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010570:	f360 030f 	bfi	r3, r0, #0, #16
 8010574:	f362 431f 	bfi	r3, r2, #16, #16
 8010578:	4618      	mov	r0, r3
 801057a:	b002      	add	sp, #8
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop

08010580 <uxr_object_id_from_raw>:
 8010580:	7843      	ldrb	r3, [r0, #1]
 8010582:	7801      	ldrb	r1, [r0, #0]
 8010584:	b082      	sub	sp, #8
 8010586:	f003 000f 	and.w	r0, r3, #15
 801058a:	f88d 0006 	strb.w	r0, [sp, #6]
 801058e:	091b      	lsrs	r3, r3, #4
 8010590:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010594:	2200      	movs	r2, #0
 8010596:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801059a:	f363 020f 	bfi	r2, r3, #0, #16
 801059e:	f361 421f 	bfi	r2, r1, #16, #16
 80105a2:	4610      	mov	r0, r2
 80105a4:	b002      	add	sp, #8
 80105a6:	4770      	bx	lr

080105a8 <uxr_object_id_to_raw>:
 80105a8:	4602      	mov	r2, r0
 80105aa:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80105ae:	b082      	sub	sp, #8
 80105b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80105b4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80105b8:	700a      	strb	r2, [r1, #0]
 80105ba:	704b      	strb	r3, [r1, #1]
 80105bc:	b002      	add	sp, #8
 80105be:	4770      	bx	lr

080105c0 <uxr_buffer_request_data>:
 80105c0:	b530      	push	{r4, r5, lr}
 80105c2:	b095      	sub	sp, #84	@ 0x54
 80105c4:	4604      	mov	r4, r0
 80105c6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80105c8:	9105      	str	r1, [sp, #20]
 80105ca:	2d00      	cmp	r5, #0
 80105cc:	bf14      	ite	ne
 80105ce:	2101      	movne	r1, #1
 80105d0:	2100      	moveq	r1, #0
 80105d2:	9204      	str	r2, [sp, #16]
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	9303      	str	r3, [sp, #12]
 80105da:	f88d 301c 	strb.w	r3, [sp, #28]
 80105de:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80105e2:	f88d 201d 	strb.w	r2, [sp, #29]
 80105e6:	f88d 201e 	strb.w	r2, [sp, #30]
 80105ea:	d021      	beq.n	8010630 <uxr_buffer_request_data+0x70>
 80105ec:	686a      	ldr	r2, [r5, #4]
 80105ee:	682b      	ldr	r3, [r5, #0]
 80105f0:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 80105f4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80105f8:	2210      	movs	r2, #16
 80105fa:	2000      	movs	r0, #0
 80105fc:	2108      	movs	r1, #8
 80105fe:	e9cd 1000 	strd	r1, r0, [sp]
 8010602:	ab0c      	add	r3, sp, #48	@ 0x30
 8010604:	9905      	ldr	r1, [sp, #20]
 8010606:	4620      	mov	r0, r4
 8010608:	f001 f83c 	bl	8011684 <uxr_prepare_stream_to_write_submessage>
 801060c:	b918      	cbnz	r0, 8010616 <uxr_buffer_request_data+0x56>
 801060e:	4604      	mov	r4, r0
 8010610:	4620      	mov	r0, r4
 8010612:	b015      	add	sp, #84	@ 0x54
 8010614:	bd30      	pop	{r4, r5, pc}
 8010616:	9904      	ldr	r1, [sp, #16]
 8010618:	aa06      	add	r2, sp, #24
 801061a:	4620      	mov	r0, r4
 801061c:	f001 f96c 	bl	80118f8 <uxr_init_base_object_request>
 8010620:	a906      	add	r1, sp, #24
 8010622:	4604      	mov	r4, r0
 8010624:	a80c      	add	r0, sp, #48	@ 0x30
 8010626:	f002 fe9d 	bl	8013364 <uxr_serialize_READ_DATA_Payload>
 801062a:	4620      	mov	r0, r4
 801062c:	b015      	add	sp, #84	@ 0x54
 801062e:	bd30      	pop	{r4, r5, pc}
 8010630:	2208      	movs	r2, #8
 8010632:	e7e2      	b.n	80105fa <uxr_buffer_request_data+0x3a>

08010634 <uxr_buffer_cancel_data>:
 8010634:	b530      	push	{r4, r5, lr}
 8010636:	b095      	sub	sp, #84	@ 0x54
 8010638:	2400      	movs	r4, #0
 801063a:	2308      	movs	r3, #8
 801063c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	9205      	str	r2, [sp, #20]
 8010644:	2501      	movs	r5, #1
 8010646:	ab0c      	add	r3, sp, #48	@ 0x30
 8010648:	2210      	movs	r2, #16
 801064a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801064e:	f88d 401e 	strb.w	r4, [sp, #30]
 8010652:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 8010656:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 801065a:	9103      	str	r1, [sp, #12]
 801065c:	4604      	mov	r4, r0
 801065e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010662:	f001 f80f 	bl	8011684 <uxr_prepare_stream_to_write_submessage>
 8010666:	b918      	cbnz	r0, 8010670 <uxr_buffer_cancel_data+0x3c>
 8010668:	4604      	mov	r4, r0
 801066a:	4620      	mov	r0, r4
 801066c:	b015      	add	sp, #84	@ 0x54
 801066e:	bd30      	pop	{r4, r5, pc}
 8010670:	9905      	ldr	r1, [sp, #20]
 8010672:	aa06      	add	r2, sp, #24
 8010674:	4620      	mov	r0, r4
 8010676:	f001 f93f 	bl	80118f8 <uxr_init_base_object_request>
 801067a:	a906      	add	r1, sp, #24
 801067c:	4604      	mov	r4, r0
 801067e:	a80c      	add	r0, sp, #48	@ 0x30
 8010680:	f002 fe70 	bl	8013364 <uxr_serialize_READ_DATA_Payload>
 8010684:	4620      	mov	r0, r4
 8010686:	b015      	add	sp, #84	@ 0x54
 8010688:	bd30      	pop	{r4, r5, pc}
 801068a:	bf00      	nop

0801068c <read_submessage_format>:
 801068c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010690:	b095      	sub	sp, #84	@ 0x54
 8010692:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 8010696:	b113      	cbz	r3, 801069e <read_submessage_format+0x12>
 8010698:	b015      	add	sp, #84	@ 0x54
 801069a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801069e:	460c      	mov	r4, r1
 80106a0:	4616      	mov	r6, r2
 80106a2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80106a6:	461d      	mov	r5, r3
 80106a8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80106aa:	9304      	str	r3, [sp, #16]
 80106ac:	1a52      	subs	r2, r2, r1
 80106ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106b0:	9305      	str	r3, [sp, #20]
 80106b2:	4607      	mov	r7, r0
 80106b4:	a80c      	add	r0, sp, #48	@ 0x30
 80106b6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80106ba:	f7fb fa3d 	bl	800bb38 <ucdr_init_buffer>
 80106be:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80106c2:	a80c      	add	r0, sp, #48	@ 0x30
 80106c4:	f7fb fa0e 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 80106c8:	69e3      	ldr	r3, [r4, #28]
 80106ca:	b193      	cbz	r3, 80106f2 <read_submessage_format+0x66>
 80106cc:	f1b8 0f07 	cmp.w	r8, #7
 80106d0:	751d      	strb	r5, [r3, #20]
 80106d2:	d03e      	beq.n	8010752 <read_submessage_format+0xc6>
 80106d4:	f1b8 0f08 	cmp.w	r8, #8
 80106d8:	d02c      	beq.n	8010734 <read_submessage_format+0xa8>
 80106da:	f1b8 0f06 	cmp.w	r8, #6
 80106de:	d011      	beq.n	8010704 <read_submessage_format+0x78>
 80106e0:	2201      	movs	r2, #1
 80106e2:	751a      	strb	r2, [r3, #20]
 80106e4:	4631      	mov	r1, r6
 80106e6:	4620      	mov	r0, r4
 80106e8:	f7fb fa76 	bl	800bbd8 <ucdr_advance_buffer>
 80106ec:	b015      	add	sp, #84	@ 0x54
 80106ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f2:	f1b8 0f07 	cmp.w	r8, #7
 80106f6:	d02c      	beq.n	8010752 <read_submessage_format+0xc6>
 80106f8:	f1b8 0f08 	cmp.w	r8, #8
 80106fc:	d01a      	beq.n	8010734 <read_submessage_format+0xa8>
 80106fe:	f1b8 0f06 	cmp.w	r8, #6
 8010702:	d1ef      	bne.n	80106e4 <read_submessage_format+0x58>
 8010704:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8010708:	b18d      	cbz	r5, 801072e <read_submessage_format+0xa2>
 801070a:	2306      	movs	r3, #6
 801070c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010710:	aa0c      	add	r2, sp, #48	@ 0x30
 8010712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010716:	9302      	str	r3, [sp, #8]
 8010718:	9200      	str	r2, [sp, #0]
 801071a:	9b04      	ldr	r3, [sp, #16]
 801071c:	9905      	ldr	r1, [sp, #20]
 801071e:	9601      	str	r6, [sp, #4]
 8010720:	464a      	mov	r2, r9
 8010722:	4638      	mov	r0, r7
 8010724:	47a8      	blx	r5
 8010726:	2301      	movs	r3, #1
 8010728:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801072c:	69e3      	ldr	r3, [r4, #28]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1d6      	bne.n	80106e0 <read_submessage_format+0x54>
 8010732:	e7d7      	b.n	80106e4 <read_submessage_format+0x58>
 8010734:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010738:	2a00      	cmp	r2, #0
 801073a:	d0f8      	beq.n	801072e <read_submessage_format+0xa2>
 801073c:	a906      	add	r1, sp, #24
 801073e:	a80c      	add	r0, sp, #48	@ 0x30
 8010740:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010742:	f002 fed5 	bl	80134f0 <uxr_deserialize_SampleIdentity>
 8010746:	2800      	cmp	r0, #0
 8010748:	d13c      	bne.n	80107c4 <read_submessage_format+0x138>
 801074a:	69e3      	ldr	r3, [r4, #28]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1c7      	bne.n	80106e0 <read_submessage_format+0x54>
 8010750:	e7c8      	b.n	80106e4 <read_submessage_format+0x58>
 8010752:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010756:	b132      	cbz	r2, 8010766 <read_submessage_format+0xda>
 8010758:	a906      	add	r1, sp, #24
 801075a:	a80c      	add	r0, sp, #48	@ 0x30
 801075c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801075e:	f002 fb85 	bl	8012e6c <uxr_deserialize_BaseObjectRequest>
 8010762:	b930      	cbnz	r0, 8010772 <read_submessage_format+0xe6>
 8010764:	69e3      	ldr	r3, [r4, #28]
 8010766:	68a2      	ldr	r2, [r4, #8]
 8010768:	4432      	add	r2, r6
 801076a:	60a2      	str	r2, [r4, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1b7      	bne.n	80106e0 <read_submessage_format+0x54>
 8010770:	e7b8      	b.n	80106e4 <read_submessage_format+0x58>
 8010772:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010776:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010778:	1a52      	subs	r2, r2, r1
 801077a:	a80c      	add	r0, sp, #48	@ 0x30
 801077c:	1aed      	subs	r5, r5, r3
 801077e:	f7fb f9db 	bl	800bb38 <ucdr_init_buffer>
 8010782:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010786:	a80c      	add	r0, sp, #48	@ 0x30
 8010788:	f7fb f9ac 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 801078c:	4435      	add	r5, r6
 801078e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010792:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010796:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801079a:	9002      	str	r0, [sp, #8]
 801079c:	2207      	movs	r2, #7
 801079e:	f88d 2016 	strb.w	r2, [sp, #22]
 80107a2:	b2ad      	uxth	r5, r5
 80107a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80107a6:	9200      	str	r2, [sp, #0]
 80107a8:	9501      	str	r5, [sp, #4]
 80107aa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	9905      	ldr	r1, [sp, #20]
 80107b2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 80107b6:	464a      	mov	r2, r9
 80107b8:	4638      	mov	r0, r7
 80107ba:	47a8      	blx	r5
 80107bc:	2301      	movs	r3, #1
 80107be:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80107c2:	e7cf      	b.n	8010764 <read_submessage_format+0xd8>
 80107c4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80107c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107ca:	1a52      	subs	r2, r2, r1
 80107cc:	a80c      	add	r0, sp, #48	@ 0x30
 80107ce:	1aed      	subs	r5, r5, r3
 80107d0:	f7fb f9b2 	bl	800bb38 <ucdr_init_buffer>
 80107d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80107d8:	a80c      	add	r0, sp, #48	@ 0x30
 80107da:	f7fb f983 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 80107de:	4435      	add	r5, r6
 80107e0:	2308      	movs	r3, #8
 80107e2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80107e6:	f88d 3016 	strb.w	r3, [sp, #22]
 80107ea:	b2ad      	uxth	r5, r5
 80107ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	9002      	str	r0, [sp, #8]
 80107f2:	9501      	str	r5, [sp, #4]
 80107f4:	ab06      	add	r3, sp, #24
 80107f6:	9905      	ldr	r1, [sp, #20]
 80107f8:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 80107fc:	464a      	mov	r2, r9
 80107fe:	4638      	mov	r0, r7
 8010800:	47a8      	blx	r5
 8010802:	2301      	movs	r3, #1
 8010804:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010808:	e79f      	b.n	801074a <read_submessage_format+0xbe>
 801080a:	bf00      	nop

0801080c <on_get_fragmentation_info>:
 801080c:	b500      	push	{lr}
 801080e:	b08b      	sub	sp, #44	@ 0x2c
 8010810:	4601      	mov	r1, r0
 8010812:	2204      	movs	r2, #4
 8010814:	a802      	add	r0, sp, #8
 8010816:	f7fb f98f 	bl	800bb38 <ucdr_init_buffer>
 801081a:	f10d 0305 	add.w	r3, sp, #5
 801081e:	a802      	add	r0, sp, #8
 8010820:	f10d 0206 	add.w	r2, sp, #6
 8010824:	a901      	add	r1, sp, #4
 8010826:	f001 fe69 	bl	80124fc <uxr_read_submessage_header>
 801082a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801082e:	2b0d      	cmp	r3, #13
 8010830:	d003      	beq.n	801083a <on_get_fragmentation_info+0x2e>
 8010832:	2000      	movs	r0, #0
 8010834:	b00b      	add	sp, #44	@ 0x2c
 8010836:	f85d fb04 	ldr.w	pc, [sp], #4
 801083a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801083e:	f013 0f02 	tst.w	r3, #2
 8010842:	bf14      	ite	ne
 8010844:	2002      	movne	r0, #2
 8010846:	2001      	moveq	r0, #1
 8010848:	b00b      	add	sp, #44	@ 0x2c
 801084a:	f85d fb04 	ldr.w	pc, [sp], #4
 801084e:	bf00      	nop

08010850 <read_submessage_get_info>:
 8010850:	b570      	push	{r4, r5, r6, lr}
 8010852:	2500      	movs	r5, #0
 8010854:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010858:	4604      	mov	r4, r0
 801085a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801085e:	460e      	mov	r6, r1
 8010860:	a810      	add	r0, sp, #64	@ 0x40
 8010862:	4629      	mov	r1, r5
 8010864:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010868:	f004 fba2 	bl	8014fb0 <memset>
 801086c:	a903      	add	r1, sp, #12
 801086e:	4630      	mov	r0, r6
 8010870:	f002 fcba 	bl	80131e8 <uxr_deserialize_GET_INFO_Payload>
 8010874:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010878:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801087c:	4620      	mov	r0, r4
 801087e:	f001 f833 	bl	80118e8 <uxr_session_header_offset>
 8010882:	462b      	mov	r3, r5
 8010884:	9000      	str	r0, [sp, #0]
 8010886:	a905      	add	r1, sp, #20
 8010888:	a808      	add	r0, sp, #32
 801088a:	220c      	movs	r2, #12
 801088c:	f7fb f942 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 8010890:	a910      	add	r1, sp, #64	@ 0x40
 8010892:	a808      	add	r0, sp, #32
 8010894:	f002 fd1a 	bl	80132cc <uxr_serialize_INFO_Payload>
 8010898:	9b08      	ldr	r3, [sp, #32]
 801089a:	462a      	mov	r2, r5
 801089c:	4629      	mov	r1, r5
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 ffca 	bl	8011838 <uxr_stamp_session_header>
 80108a4:	a808      	add	r0, sp, #32
 80108a6:	f7fb f973 	bl	800bb90 <ucdr_buffer_length>
 80108aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108ac:	4602      	mov	r2, r0
 80108ae:	a905      	add	r1, sp, #20
 80108b0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80108b4:	47a0      	blx	r4
 80108b6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80108ba:	bd70      	pop	{r4, r5, r6, pc}

080108bc <write_submessage_acknack.isra.0>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	b092      	sub	sp, #72	@ 0x48
 80108c0:	4605      	mov	r5, r0
 80108c2:	460e      	mov	r6, r1
 80108c4:	4614      	mov	r4, r2
 80108c6:	f001 f80f 	bl	80118e8 <uxr_session_header_offset>
 80108ca:	a905      	add	r1, sp, #20
 80108cc:	9000      	str	r0, [sp, #0]
 80108ce:	2300      	movs	r3, #0
 80108d0:	a80a      	add	r0, sp, #40	@ 0x28
 80108d2:	2211      	movs	r2, #17
 80108d4:	f7fb f91e 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 80108d8:	2218      	movs	r2, #24
 80108da:	fb02 5404 	mla	r4, r2, r4, r5
 80108de:	2300      	movs	r3, #0
 80108e0:	2205      	movs	r2, #5
 80108e2:	3450      	adds	r4, #80	@ 0x50
 80108e4:	a80a      	add	r0, sp, #40	@ 0x28
 80108e6:	210a      	movs	r1, #10
 80108e8:	f001 fdee 	bl	80124c8 <uxr_buffer_submessage_header>
 80108ec:	a903      	add	r1, sp, #12
 80108ee:	4620      	mov	r0, r4
 80108f0:	f003 fbfa 	bl	80140e8 <uxr_compute_acknack>
 80108f4:	a903      	add	r1, sp, #12
 80108f6:	ba43      	rev16	r3, r0
 80108f8:	a80a      	add	r0, sp, #40	@ 0x28
 80108fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80108fe:	f88d 6010 	strb.w	r6, [sp, #16]
 8010902:	f002 fd53 	bl	80133ac <uxr_serialize_ACKNACK_Payload>
 8010906:	2200      	movs	r2, #0
 8010908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801090a:	4611      	mov	r1, r2
 801090c:	4628      	mov	r0, r5
 801090e:	f000 ff93 	bl	8011838 <uxr_stamp_session_header>
 8010912:	a80a      	add	r0, sp, #40	@ 0x28
 8010914:	f7fb f93c 	bl	800bb90 <ucdr_buffer_length>
 8010918:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801091a:	4602      	mov	r2, r0
 801091c:	a905      	add	r1, sp, #20
 801091e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010922:	47a0      	blx	r4
 8010924:	b012      	add	sp, #72	@ 0x48
 8010926:	bd70      	pop	{r4, r5, r6, pc}

08010928 <uxr_init_session>:
 8010928:	b5d0      	push	{r4, r6, r7, lr}
 801092a:	2300      	movs	r3, #0
 801092c:	2600      	movs	r6, #0
 801092e:	2700      	movs	r7, #0
 8010930:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 8010934:	4604      	mov	r4, r0
 8010936:	6701      	str	r1, [r0, #112]	@ 0x70
 8010938:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 801093c:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 8010940:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 8010944:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 8010948:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 801094c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010950:	2181      	movs	r1, #129	@ 0x81
 8010952:	f000 fedb 	bl	801170c <uxr_init_session_info>
 8010956:	f104 0008 	add.w	r0, r4, #8
 801095a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801095e:	f001 bccf 	b.w	8012300 <uxr_init_stream_storage>
 8010962:	bf00      	nop

08010964 <uxr_set_status_callback>:
 8010964:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop

0801096c <uxr_set_topic_callback>:
 801096c:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop

08010974 <uxr_set_request_callback>:
 8010974:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop

0801097c <uxr_set_reply_callback>:
 801097c:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop

08010984 <uxr_create_output_best_effort_stream>:
 8010984:	b510      	push	{r4, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	e9cd 2100 	strd	r2, r1, [sp]
 801098c:	4604      	mov	r4, r0
 801098e:	f000 ffab 	bl	80118e8 <uxr_session_header_offset>
 8010992:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010996:	4603      	mov	r3, r0
 8010998:	f104 0008 	add.w	r0, r4, #8
 801099c:	b004      	add	sp, #16
 801099e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109a2:	f001 bcf7 	b.w	8012394 <uxr_add_output_best_effort_buffer>
 80109a6:	bf00      	nop

080109a8 <uxr_create_output_reliable_stream>:
 80109a8:	b530      	push	{r4, r5, lr}
 80109aa:	b089      	sub	sp, #36	@ 0x24
 80109ac:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80109b0:	9303      	str	r3, [sp, #12]
 80109b2:	4604      	mov	r4, r0
 80109b4:	f000 ff98 	bl	80118e8 <uxr_session_header_offset>
 80109b8:	4605      	mov	r5, r0
 80109ba:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80109be:	9905      	ldr	r1, [sp, #20]
 80109c0:	9500      	str	r5, [sp, #0]
 80109c2:	f104 0008 	add.w	r0, r4, #8
 80109c6:	f001 fcf7 	bl	80123b8 <uxr_add_output_reliable_buffer>
 80109ca:	2200      	movs	r2, #0
 80109cc:	b2c3      	uxtb	r3, r0
 80109ce:	f363 0207 	bfi	r2, r3, #0, #8
 80109d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80109d6:	f363 220f 	bfi	r2, r3, #8, #8
 80109da:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80109de:	f363 4217 	bfi	r2, r3, #16, #8
 80109e2:	0e03      	lsrs	r3, r0, #24
 80109e4:	f363 621f 	bfi	r2, r3, #24, #8
 80109e8:	4610      	mov	r0, r2
 80109ea:	b009      	add	sp, #36	@ 0x24
 80109ec:	bd30      	pop	{r4, r5, pc}
 80109ee:	bf00      	nop

080109f0 <uxr_create_input_best_effort_stream>:
 80109f0:	b082      	sub	sp, #8
 80109f2:	3008      	adds	r0, #8
 80109f4:	b002      	add	sp, #8
 80109f6:	f001 bcf9 	b.w	80123ec <uxr_add_input_best_effort_buffer>
 80109fa:	bf00      	nop

080109fc <uxr_create_input_reliable_stream>:
 80109fc:	b510      	push	{r4, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	4c0b      	ldr	r4, [pc, #44]	@ (8010a30 <uxr_create_input_reliable_stream+0x34>)
 8010a02:	9400      	str	r4, [sp, #0]
 8010a04:	3008      	adds	r0, #8
 8010a06:	f001 fd07 	bl	8012418 <uxr_add_input_reliable_buffer>
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	b2c3      	uxtb	r3, r0
 8010a0e:	f363 0207 	bfi	r2, r3, #0, #8
 8010a12:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010a16:	f363 220f 	bfi	r2, r3, #8, #8
 8010a1a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a1e:	f363 4217 	bfi	r2, r3, #16, #8
 8010a22:	0e03      	lsrs	r3, r0, #24
 8010a24:	f363 621f 	bfi	r2, r3, #24, #8
 8010a28:	4610      	mov	r0, r2
 8010a2a:	b004      	add	sp, #16
 8010a2c:	bd10      	pop	{r4, pc}
 8010a2e:	bf00      	nop
 8010a30:	0801080d 	.word	0x0801080d

08010a34 <uxr_epoch_nanos>:
 8010a34:	b510      	push	{r4, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	f001 fda8 	bl	801258c <uxr_nanos>
 8010a3c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010a40:	1ac0      	subs	r0, r0, r3
 8010a42:	eb61 0102 	sbc.w	r1, r1, r2
 8010a46:	bd10      	pop	{r4, pc}

08010a48 <uxr_flash_output_streams>:
 8010a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a4c:	7e03      	ldrb	r3, [r0, #24]
 8010a4e:	b084      	sub	sp, #16
 8010a50:	4604      	mov	r4, r0
 8010a52:	b1fb      	cbz	r3, 8010a94 <uxr_flash_output_streams+0x4c>
 8010a54:	f04f 0900 	mov.w	r9, #0
 8010a58:	4648      	mov	r0, r9
 8010a5a:	f10d 0802 	add.w	r8, sp, #2
 8010a5e:	af03      	add	r7, sp, #12
 8010a60:	ae02      	add	r6, sp, #8
 8010a62:	2201      	movs	r2, #1
 8010a64:	4611      	mov	r1, r2
 8010a66:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010a6a:	f001 fbf3 	bl	8012254 <uxr_stream_id>
 8010a6e:	3508      	adds	r5, #8
 8010a70:	4684      	mov	ip, r0
 8010a72:	4643      	mov	r3, r8
 8010a74:	4628      	mov	r0, r5
 8010a76:	463a      	mov	r2, r7
 8010a78:	4631      	mov	r1, r6
 8010a7a:	f8cd c004 	str.w	ip, [sp, #4]
 8010a7e:	f003 fbbb 	bl	80141f8 <uxr_prepare_best_effort_buffer_to_send>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d13d      	bne.n	8010b02 <uxr_flash_output_streams+0xba>
 8010a86:	7e23      	ldrb	r3, [r4, #24]
 8010a88:	f109 0901 	add.w	r9, r9, #1
 8010a8c:	fa5f f089 	uxtb.w	r0, r9
 8010a90:	4283      	cmp	r3, r0
 8010a92:	d8e6      	bhi.n	8010a62 <uxr_flash_output_streams+0x1a>
 8010a94:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010a98:	b383      	cbz	r3, 8010afc <uxr_flash_output_streams+0xb4>
 8010a9a:	f04f 0900 	mov.w	r9, #0
 8010a9e:	4648      	mov	r0, r9
 8010aa0:	f10d 0802 	add.w	r8, sp, #2
 8010aa4:	af03      	add	r7, sp, #12
 8010aa6:	ae02      	add	r6, sp, #8
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	2102      	movs	r1, #2
 8010aac:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010ab0:	f001 fbd0 	bl	8012254 <uxr_stream_id>
 8010ab4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010ab8:	3520      	adds	r5, #32
 8010aba:	9001      	str	r0, [sp, #4]
 8010abc:	e00c      	b.n	8010ad8 <uxr_flash_output_streams+0x90>
 8010abe:	9b02      	ldr	r3, [sp, #8]
 8010ac0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010ac4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010ac8:	f000 feb6 	bl	8011838 <uxr_stamp_session_header>
 8010acc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ace:	9a03      	ldr	r2, [sp, #12]
 8010ad0:	9902      	ldr	r1, [sp, #8]
 8010ad2:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010ad6:	47d0      	blx	sl
 8010ad8:	4643      	mov	r3, r8
 8010ada:	463a      	mov	r2, r7
 8010adc:	4631      	mov	r1, r6
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f003 fd9e 	bl	8014620 <uxr_prepare_next_reliable_buffer_to_send>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d1e8      	bne.n	8010abe <uxr_flash_output_streams+0x76>
 8010aec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010af0:	f109 0901 	add.w	r9, r9, #1
 8010af4:	fa5f f089 	uxtb.w	r0, r9
 8010af8:	4283      	cmp	r3, r0
 8010afa:	d8d5      	bhi.n	8010aa8 <uxr_flash_output_streams+0x60>
 8010afc:	b004      	add	sp, #16
 8010afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b02:	9b02      	ldr	r3, [sp, #8]
 8010b04:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010b08:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f000 fe93 	bl	8011838 <uxr_stamp_session_header>
 8010b12:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b14:	9a03      	ldr	r2, [sp, #12]
 8010b16:	9902      	ldr	r1, [sp, #8]
 8010b18:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b1c:	47a8      	blx	r5
 8010b1e:	f109 0901 	add.w	r9, r9, #1
 8010b22:	7e23      	ldrb	r3, [r4, #24]
 8010b24:	fa5f f089 	uxtb.w	r0, r9
 8010b28:	4283      	cmp	r3, r0
 8010b2a:	d89a      	bhi.n	8010a62 <uxr_flash_output_streams+0x1a>
 8010b2c:	e7b2      	b.n	8010a94 <uxr_flash_output_streams+0x4c>
 8010b2e:	bf00      	nop

08010b30 <read_submessage_info>:
 8010b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b34:	460d      	mov	r5, r1
 8010b36:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010b3a:	4669      	mov	r1, sp
 8010b3c:	4607      	mov	r7, r0
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f002 fa58 	bl	8012ff4 <uxr_deserialize_BaseObjectReply>
 8010b44:	a902      	add	r1, sp, #8
 8010b46:	4604      	mov	r4, r0
 8010b48:	4628      	mov	r0, r5
 8010b4a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010b4e:	f7f9 fedb 	bl	800a908 <ucdr_deserialize_bool>
 8010b52:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010b56:	4004      	ands	r4, r0
 8010b58:	b2e4      	uxtb	r4, r4
 8010b5a:	b95b      	cbnz	r3, 8010b74 <read_submessage_info+0x44>
 8010b5c:	a987      	add	r1, sp, #540	@ 0x21c
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f7f9 fed2 	bl	800a908 <ucdr_deserialize_bool>
 8010b64:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010b68:	4606      	mov	r6, r0
 8010b6a:	b94b      	cbnz	r3, 8010b80 <read_submessage_info+0x50>
 8010b6c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b74:	a903      	add	r1, sp, #12
 8010b76:	4628      	mov	r0, r5
 8010b78:	f002 f8ca 	bl	8012d10 <uxr_deserialize_ObjectVariant>
 8010b7c:	4004      	ands	r4, r0
 8010b7e:	e7ed      	b.n	8010b5c <read_submessage_info+0x2c>
 8010b80:	a988      	add	r1, sp, #544	@ 0x220
 8010b82:	4628      	mov	r0, r5
 8010b84:	f7f9 fef0 	bl	800a968 <ucdr_deserialize_uint8_t>
 8010b88:	4234      	tst	r4, r6
 8010b8a:	d0ef      	beq.n	8010b6c <read_submessage_info+0x3c>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d0ed      	beq.n	8010b6c <read_submessage_info+0x3c>
 8010b90:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010b94:	2b0d      	cmp	r3, #13
 8010b96:	d1e9      	bne.n	8010b6c <read_submessage_info+0x3c>
 8010b98:	4628      	mov	r0, r5
 8010b9a:	a98a      	add	r1, sp, #552	@ 0x228
 8010b9c:	f7fa fcb6 	bl	800b50c <ucdr_deserialize_int16_t>
 8010ba0:	b140      	cbz	r0, 8010bb4 <read_submessage_info+0x84>
 8010ba2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	dd07      	ble.n	8010bba <read_submessage_info+0x8a>
 8010baa:	f1b8 0f00 	cmp.w	r8, #0
 8010bae:	bf14      	ite	ne
 8010bb0:	2001      	movne	r0, #1
 8010bb2:	2002      	moveq	r0, #2
 8010bb4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010bb8:	e7d8      	b.n	8010b6c <read_submessage_info+0x3c>
 8010bba:	2000      	movs	r0, #0
 8010bbc:	e7fa      	b.n	8010bb4 <read_submessage_info+0x84>
 8010bbe:	bf00      	nop

08010bc0 <read_submessage_list>:
 8010bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc4:	b098      	sub	sp, #96	@ 0x60
 8010bc6:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 8010ecc <read_submessage_list+0x30c>
 8010bca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bcc:	4604      	mov	r4, r0
 8010bce:	4688      	mov	r8, r1
 8010bd0:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8010bd4:	aa0e      	add	r2, sp, #56	@ 0x38
 8010bd6:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 8010bda:	4640      	mov	r0, r8
 8010bdc:	f001 fc8e 	bl	80124fc <uxr_read_submessage_header>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	f000 813d 	beq.w	8010e60 <read_submessage_list+0x2a0>
 8010be6:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 8010bea:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 8010bee:	3b02      	subs	r3, #2
 8010bf0:	2b0d      	cmp	r3, #13
 8010bf2:	d8ed      	bhi.n	8010bd0 <read_submessage_list+0x10>
 8010bf4:	a101      	add	r1, pc, #4	@ (adr r1, 8010bfc <read_submessage_list+0x3c>)
 8010bf6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010bfa:	bf00      	nop
 8010bfc:	08010e57 	.word	0x08010e57
 8010c00:	08010bd1 	.word	0x08010bd1
 8010c04:	08010e47 	.word	0x08010e47
 8010c08:	08010deb 	.word	0x08010deb
 8010c0c:	08010de1 	.word	0x08010de1
 8010c10:	08010bd1 	.word	0x08010bd1
 8010c14:	08010bd1 	.word	0x08010bd1
 8010c18:	08010d43 	.word	0x08010d43
 8010c1c:	08010cd5 	.word	0x08010cd5
 8010c20:	08010c93 	.word	0x08010c93
 8010c24:	08010bd1 	.word	0x08010bd1
 8010c28:	08010bd1 	.word	0x08010bd1
 8010c2c:	08010bd1 	.word	0x08010bd1
 8010c30:	08010c35 	.word	0x08010c35
 8010c34:	a912      	add	r1, sp, #72	@ 0x48
 8010c36:	4640      	mov	r0, r8
 8010c38:	f002 fc08 	bl	801344c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010c3c:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	f000 8115 	beq.w	8010e70 <read_submessage_list+0x2b0>
 8010c46:	f001 fca1 	bl	801258c <uxr_nanos>
 8010c4a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010c50:	2700      	movs	r7, #0
 8010c52:	fbc9 6701 	smlal	r6, r7, r9, r1
 8010c56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010c5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010c60:	460e      	mov	r6, r1
 8010c62:	2700      	movs	r7, #0
 8010c64:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010c68:	9106      	str	r1, [sp, #24]
 8010c6a:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010c6e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8010c70:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010c74:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8010c76:	2700      	movs	r7, #0
 8010c78:	4608      	mov	r0, r1
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010c80:	e9cd 0100 	strd	r0, r1, [sp]
 8010c84:	4620      	mov	r0, r4
 8010c86:	47a8      	blx	r5
 8010c88:	f04f 0301 	mov.w	r3, #1
 8010c8c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010c90:	e79e      	b.n	8010bd0 <read_submessage_list+0x10>
 8010c92:	a912      	add	r1, sp, #72	@ 0x48
 8010c94:	4640      	mov	r0, r8
 8010c96:	f002 fbc7 	bl	8013428 <uxr_deserialize_HEARTBEAT_Payload>
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010ca0:	f001 fb02 	bl	80122a8 <uxr_stream_id_from_raw>
 8010ca4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010ca8:	4603      	mov	r3, r0
 8010caa:	4629      	mov	r1, r5
 8010cac:	f104 0008 	add.w	r0, r4, #8
 8010cb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cb2:	f001 fbe7 	bl	8012484 <uxr_get_input_reliable_stream>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d08a      	beq.n	8010bd0 <read_submessage_list+0x10>
 8010cba:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 8010cbe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8010cc2:	f003 fa05 	bl	80140d0 <uxr_process_heartbeat>
 8010cc6:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f7ff fdf5 	bl	80108bc <write_submessage_acknack.isra.0>
 8010cd2:	e77d      	b.n	8010bd0 <read_submessage_list+0x10>
 8010cd4:	a912      	add	r1, sp, #72	@ 0x48
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	f002 fb7e 	bl	80133d8 <uxr_deserialize_ACKNACK_Payload>
 8010cdc:	2100      	movs	r1, #0
 8010cde:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010ce2:	f001 fae1 	bl	80122a8 <uxr_stream_id_from_raw>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010cec:	f104 0008 	add.w	r0, r4, #8
 8010cf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cf2:	f001 fbb1 	bl	8012458 <uxr_get_output_reliable_stream>
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	f43f af69 	beq.w	8010bd0 <read_submessage_list+0x10>
 8010cfe:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8010d02:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8010d06:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 8010d0a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010d0e:	b289      	uxth	r1, r1
 8010d10:	f003 fd2e 	bl	8014770 <uxr_process_acknack>
 8010d14:	4628      	mov	r0, r5
 8010d16:	f003 fcf1 	bl	80146fc <uxr_begin_output_nack_buffer_it>
 8010d1a:	af10      	add	r7, sp, #64	@ 0x40
 8010d1c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8010d20:	e005      	b.n	8010d2e <read_submessage_list+0x16e>
 8010d22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d26:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010d28:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010d2c:	47b0      	blx	r6
 8010d2e:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 8010d32:	aa11      	add	r2, sp, #68	@ 0x44
 8010d34:	4639      	mov	r1, r7
 8010d36:	4628      	mov	r0, r5
 8010d38:	f003 fce2 	bl	8014700 <uxr_next_reliable_nack_buffer_to_send>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d1f0      	bne.n	8010d22 <read_submessage_list+0x162>
 8010d40:	e746      	b.n	8010bd0 <read_submessage_list+0x10>
 8010d42:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8010d46:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 8010d4a:	af10      	add	r7, sp, #64	@ 0x40
 8010d4c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 8010d50:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 8010d54:	4639      	mov	r1, r7
 8010d56:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010d5a:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 8010d5e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010d62:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 8010d66:	4640      	mov	r0, r8
 8010d68:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010d6c:	f002 f87e 	bl	8012e6c <uxr_deserialize_BaseObjectRequest>
 8010d70:	4638      	mov	r0, r7
 8010d72:	a911      	add	r1, sp, #68	@ 0x44
 8010d74:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 8010d78:	f000 fddc 	bl	8011934 <uxr_parse_base_object_request>
 8010d7c:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010d80:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010d82:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 8010d86:	9112      	str	r1, [sp, #72]	@ 0x48
 8010d88:	3d04      	subs	r5, #4
 8010d8a:	f006 060e 	and.w	r6, r6, #14
 8010d8e:	b2ad      	uxth	r5, r5
 8010d90:	f1ba 0f00 	cmp.w	sl, #0
 8010d94:	d006      	beq.n	8010da4 <read_submessage_list+0x1e4>
 8010d96:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010d9a:	9300      	str	r3, [sp, #0]
 8010d9c:	463a      	mov	r2, r7
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4620      	mov	r0, r4
 8010da2:	47d0      	blx	sl
 8010da4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010da6:	b168      	cbz	r0, 8010dc4 <read_submessage_list+0x204>
 8010da8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010daa:	2300      	movs	r3, #0
 8010dac:	3902      	subs	r1, #2
 8010dae:	e002      	b.n	8010db6 <read_submessage_list+0x1f6>
 8010db0:	3301      	adds	r3, #1
 8010db2:	4283      	cmp	r3, r0
 8010db4:	d006      	beq.n	8010dc4 <read_submessage_list+0x204>
 8010db6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010dba:	42ba      	cmp	r2, r7
 8010dbc:	d1f8      	bne.n	8010db0 <read_submessage_list+0x1f0>
 8010dbe:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	54d1      	strb	r1, [r2, r3]
 8010dc4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010dc6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dc8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8010dcc:	9302      	str	r3, [sp, #8]
 8010dce:	e9cd 1000 	strd	r1, r0, [sp]
 8010dd2:	4633      	mov	r3, r6
 8010dd4:	462a      	mov	r2, r5
 8010dd6:	4641      	mov	r1, r8
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f7ff fc57 	bl	801068c <read_submessage_format>
 8010dde:	e6f7      	b.n	8010bd0 <read_submessage_list+0x10>
 8010de0:	4641      	mov	r1, r8
 8010de2:	4620      	mov	r0, r4
 8010de4:	f7ff fea4 	bl	8010b30 <read_submessage_info>
 8010de8:	e6f2      	b.n	8010bd0 <read_submessage_list+0x10>
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	d03b      	beq.n	8010e66 <read_submessage_list+0x2a6>
 8010dee:	a912      	add	r1, sp, #72	@ 0x48
 8010df0:	4640      	mov	r0, r8
 8010df2:	f002 fa4d 	bl	8013290 <uxr_deserialize_STATUS_Payload>
 8010df6:	a910      	add	r1, sp, #64	@ 0x40
 8010df8:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010dfa:	a812      	add	r0, sp, #72	@ 0x48
 8010dfc:	f000 fd9a 	bl	8011934 <uxr_parse_base_object_request>
 8010e00:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8010e04:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010e06:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8010e0a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8010e0e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010e10:	b135      	cbz	r5, 8010e20 <read_submessage_list+0x260>
 8010e12:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	4632      	mov	r2, r6
 8010e1a:	463b      	mov	r3, r7
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	47a8      	blx	r5
 8010e20:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f43f aed4 	beq.w	8010bd0 <read_submessage_list+0x10>
 8010e28:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	3802      	subs	r0, #2
 8010e2e:	e003      	b.n	8010e38 <read_submessage_list+0x278>
 8010e30:	3101      	adds	r1, #1
 8010e32:	4299      	cmp	r1, r3
 8010e34:	f43f aecc 	beq.w	8010bd0 <read_submessage_list+0x10>
 8010e38:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8010e3c:	42b2      	cmp	r2, r6
 8010e3e:	d1f7      	bne.n	8010e30 <read_submessage_list+0x270>
 8010e40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010e42:	545f      	strb	r7, [r3, r1]
 8010e44:	e6c4      	b.n	8010bd0 <read_submessage_list+0x10>
 8010e46:	2a00      	cmp	r2, #0
 8010e48:	f47f aec2 	bne.w	8010bd0 <read_submessage_list+0x10>
 8010e4c:	4641      	mov	r1, r8
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f000 fcb4 	bl	80117bc <uxr_read_create_session_status>
 8010e54:	e6bc      	b.n	8010bd0 <read_submessage_list+0x10>
 8010e56:	4641      	mov	r1, r8
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f7ff fcf9 	bl	8010850 <read_submessage_get_info>
 8010e5e:	e6b7      	b.n	8010bd0 <read_submessage_list+0x10>
 8010e60:	b018      	add	sp, #96	@ 0x60
 8010e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e66:	4641      	mov	r1, r8
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f000 fcb3 	bl	80117d4 <uxr_read_delete_session_status>
 8010e6e:	e6af      	b.n	8010bd0 <read_submessage_list+0x10>
 8010e70:	f001 fb8c 	bl	801258c <uxr_nanos>
 8010e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e76:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8010e78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010e7a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010e7c:	2700      	movs	r7, #0
 8010e7e:	fbc9 6703 	smlal	r6, r7, r9, r3
 8010e82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010e84:	eb16 0c00 	adds.w	ip, r6, r0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e8c:	eb47 0e01 	adc.w	lr, r7, r1
 8010e90:	461e      	mov	r6, r3
 8010e92:	2100      	movs	r1, #0
 8010e94:	2700      	movs	r7, #0
 8010e96:	fbc9 0105 	smlal	r0, r1, r9, r5
 8010e9a:	fbc9 6702 	smlal	r6, r7, r9, r2
 8010e9e:	1983      	adds	r3, r0, r6
 8010ea0:	eb41 0207 	adc.w	r2, r1, r7
 8010ea4:	ebbc 0303 	subs.w	r3, ip, r3
 8010ea8:	9308      	str	r3, [sp, #32]
 8010eaa:	eb6e 0302 	sbc.w	r3, lr, r2
 8010eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eb0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010eb4:	0fd3      	lsrs	r3, r2, #31
 8010eb6:	18c9      	adds	r1, r1, r3
 8010eb8:	f142 0200 	adc.w	r2, r2, #0
 8010ebc:	084b      	lsrs	r3, r1, #1
 8010ebe:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010ec2:	1052      	asrs	r2, r2, #1
 8010ec4:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 8010ec8:	e6de      	b.n	8010c88 <read_submessage_list+0xc8>
 8010eca:	bf00      	nop
 8010ecc:	3b9aca00 	.word	0x3b9aca00

08010ed0 <listen_message_reliably>:
 8010ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed4:	1e0b      	subs	r3, r1, #0
 8010ed6:	b09d      	sub	sp, #116	@ 0x74
 8010ed8:	bfb8      	it	lt
 8010eda:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010ede:	9305      	str	r3, [sp, #20]
 8010ee0:	4607      	mov	r7, r0
 8010ee2:	f001 fb37 	bl	8012554 <uxr_millis>
 8010ee6:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8010eea:	4681      	mov	r9, r0
 8010eec:	2a00      	cmp	r2, #0
 8010eee:	f000 8095 	beq.w	801101c <listen_message_reliably+0x14c>
 8010ef2:	2600      	movs	r6, #0
 8010ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010ef8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010efc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010f00:	4630      	mov	r0, r6
 8010f02:	4688      	mov	r8, r1
 8010f04:	46ca      	mov	sl, r9
 8010f06:	e00f      	b.n	8010f28 <listen_message_reliably+0x58>
 8010f08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010f0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010f10:	42a2      	cmp	r2, r4
 8010f12:	eb73 0105 	sbcs.w	r1, r3, r5
 8010f16:	bfb8      	it	lt
 8010f18:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8010f1c:	3601      	adds	r6, #1
 8010f1e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010f22:	b2f0      	uxtb	r0, r6
 8010f24:	4283      	cmp	r3, r0
 8010f26:	d951      	bls.n	8010fcc <listen_message_reliably+0xfc>
 8010f28:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	2102      	movs	r1, #2
 8010f30:	f001 f990 	bl	8012254 <uxr_stream_id>
 8010f34:	00e4      	lsls	r4, r4, #3
 8010f36:	f104 0520 	add.w	r5, r4, #32
 8010f3a:	443d      	add	r5, r7
 8010f3c:	4601      	mov	r1, r0
 8010f3e:	4643      	mov	r3, r8
 8010f40:	4652      	mov	r2, sl
 8010f42:	4628      	mov	r0, r5
 8010f44:	9109      	str	r1, [sp, #36]	@ 0x24
 8010f46:	f003 fbad 	bl	80146a4 <uxr_update_output_stream_heartbeat_timestamp>
 8010f4a:	193b      	adds	r3, r7, r4
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d0db      	beq.n	8010f08 <listen_message_reliably+0x38>
 8010f50:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010f54:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010f58:	4638      	mov	r0, r7
 8010f5a:	f000 fcc5 	bl	80118e8 <uxr_session_header_offset>
 8010f5e:	3501      	adds	r5, #1
 8010f60:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 8010f64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010f68:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8010f6c:	9000      	str	r0, [sp, #0]
 8010f6e:	2300      	movs	r3, #0
 8010f70:	4658      	mov	r0, fp
 8010f72:	2211      	movs	r2, #17
 8010f74:	a90c      	add	r1, sp, #48	@ 0x30
 8010f76:	f7fa fdcd 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	2205      	movs	r2, #5
 8010f7e:	210b      	movs	r1, #11
 8010f80:	4658      	mov	r0, fp
 8010f82:	f001 faa1 	bl	80124c8 <uxr_buffer_submessage_header>
 8010f86:	8968      	ldrh	r0, [r5, #10]
 8010f88:	2101      	movs	r1, #1
 8010f8a:	f003 fc29 	bl	80147e0 <uxr_seq_num_add>
 8010f8e:	892a      	ldrh	r2, [r5, #8]
 8010f90:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010f94:	4603      	mov	r3, r0
 8010f96:	a90a      	add	r1, sp, #40	@ 0x28
 8010f98:	4658      	mov	r0, fp
 8010f9a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010f9e:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 8010fa2:	f002 fa2d 	bl	8013400 <uxr_serialize_HEARTBEAT_Payload>
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	4611      	mov	r1, r2
 8010faa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fac:	4638      	mov	r0, r7
 8010fae:	f000 fc43 	bl	8011838 <uxr_stamp_session_header>
 8010fb2:	4658      	mov	r0, fp
 8010fb4:	f7fa fdec 	bl	800bb90 <ucdr_buffer_length>
 8010fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010fba:	4602      	mov	r2, r0
 8010fbc:	a90c      	add	r1, sp, #48	@ 0x30
 8010fbe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fc2:	443c      	add	r4, r7
 8010fc4:	47a8      	blx	r5
 8010fc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010fca:	e79f      	b.n	8010f0c <listen_message_reliably+0x3c>
 8010fcc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010fd0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010fd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010fd8:	4294      	cmp	r4, r2
 8010fda:	bf08      	it	eq
 8010fdc:	428b      	cmpeq	r3, r1
 8010fde:	d01d      	beq.n	801101c <listen_message_reliably+0x14c>
 8010fe0:	eba3 030a 	sub.w	r3, r3, sl
 8010fe4:	9905      	ldr	r1, [sp, #20]
 8010fe6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	bf08      	it	eq
 8010fec:	2301      	moveq	r3, #1
 8010fee:	4299      	cmp	r1, r3
 8010ff0:	bfa8      	it	ge
 8010ff2:	4619      	movge	r1, r3
 8010ff4:	6894      	ldr	r4, [r2, #8]
 8010ff6:	6810      	ldr	r0, [r2, #0]
 8010ff8:	4689      	mov	r9, r1
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	aa08      	add	r2, sp, #32
 8010ffe:	a907      	add	r1, sp, #28
 8011000:	47a0      	blx	r4
 8011002:	b968      	cbnz	r0, 8011020 <listen_message_reliably+0x150>
 8011004:	9b05      	ldr	r3, [sp, #20]
 8011006:	eba3 0309 	sub.w	r3, r3, r9
 801100a:	2b00      	cmp	r3, #0
 801100c:	9305      	str	r3, [sp, #20]
 801100e:	f73f af68 	bgt.w	8010ee2 <listen_message_reliably+0x12>
 8011012:	4604      	mov	r4, r0
 8011014:	4620      	mov	r0, r4
 8011016:	b01d      	add	sp, #116	@ 0x74
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	9b05      	ldr	r3, [sp, #20]
 801101e:	e7e1      	b.n	8010fe4 <listen_message_reliably+0x114>
 8011020:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011024:	4604      	mov	r4, r0
 8011026:	a80c      	add	r0, sp, #48	@ 0x30
 8011028:	f7fa fd86 	bl	800bb38 <ucdr_init_buffer>
 801102c:	2500      	movs	r5, #0
 801102e:	a90c      	add	r1, sp, #48	@ 0x30
 8011030:	f10d 031a 	add.w	r3, sp, #26
 8011034:	aa06      	add	r2, sp, #24
 8011036:	4638      	mov	r0, r7
 8011038:	f88d 5018 	strb.w	r5, [sp, #24]
 801103c:	f000 fc12 	bl	8011864 <uxr_read_session_header>
 8011040:	b918      	cbnz	r0, 801104a <listen_message_reliably+0x17a>
 8011042:	4620      	mov	r0, r4
 8011044:	b01d      	add	sp, #116	@ 0x74
 8011046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104a:	4629      	mov	r1, r5
 801104c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011050:	f001 f92a 	bl	80122a8 <uxr_stream_id_from_raw>
 8011054:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011058:	2e01      	cmp	r6, #1
 801105a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801105e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011060:	fa5f fa80 	uxtb.w	sl, r0
 8011064:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011068:	d04b      	beq.n	8011102 <listen_message_reliably+0x232>
 801106a:	2e02      	cmp	r6, #2
 801106c:	d00f      	beq.n	801108e <listen_message_reliably+0x1be>
 801106e:	2e00      	cmp	r6, #0
 8011070:	d1e7      	bne.n	8011042 <listen_message_reliably+0x172>
 8011072:	4631      	mov	r1, r6
 8011074:	4630      	mov	r0, r6
 8011076:	f001 f917 	bl	80122a8 <uxr_stream_id_from_raw>
 801107a:	a90c      	add	r1, sp, #48	@ 0x30
 801107c:	4602      	mov	r2, r0
 801107e:	4638      	mov	r0, r7
 8011080:	920a      	str	r2, [sp, #40]	@ 0x28
 8011082:	f7ff fd9d 	bl	8010bc0 <read_submessage_list>
 8011086:	4620      	mov	r0, r4
 8011088:	b01d      	add	sp, #116	@ 0x74
 801108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108e:	4629      	mov	r1, r5
 8011090:	f107 0008 	add.w	r0, r7, #8
 8011094:	f001 f9f6 	bl	8012484 <uxr_get_input_reliable_stream>
 8011098:	4680      	mov	r8, r0
 801109a:	b348      	cbz	r0, 80110f0 <listen_message_reliably+0x220>
 801109c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801109e:	9202      	str	r2, [sp, #8]
 80110a0:	a80c      	add	r0, sp, #48	@ 0x30
 80110a2:	f7fa fd79 	bl	800bb98 <ucdr_buffer_remaining>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f10d 0019 	add.w	r0, sp, #25
 80110ac:	9000      	str	r0, [sp, #0]
 80110ae:	9a02      	ldr	r2, [sp, #8]
 80110b0:	4649      	mov	r1, r9
 80110b2:	4640      	mov	r0, r8
 80110b4:	f002 ff0e 	bl	8013ed4 <uxr_receive_reliable_message>
 80110b8:	b1d0      	cbz	r0, 80110f0 <listen_message_reliably+0x220>
 80110ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d037      	beq.n	8011132 <listen_message_reliably+0x262>
 80110c2:	ae14      	add	r6, sp, #80	@ 0x50
 80110c4:	f04f 0902 	mov.w	r9, #2
 80110c8:	e008      	b.n	80110dc <listen_message_reliably+0x20c>
 80110ca:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80110ce:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80110d2:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80110d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110d8:	f7ff fd72 	bl	8010bc0 <read_submessage_list>
 80110dc:	4631      	mov	r1, r6
 80110de:	2204      	movs	r2, #4
 80110e0:	4640      	mov	r0, r8
 80110e2:	f002 ff77 	bl	8013fd4 <uxr_next_input_reliable_buffer_available>
 80110e6:	4603      	mov	r3, r0
 80110e8:	4631      	mov	r1, r6
 80110ea:	4638      	mov	r0, r7
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1ec      	bne.n	80110ca <listen_message_reliably+0x1fa>
 80110f0:	4638      	mov	r0, r7
 80110f2:	462a      	mov	r2, r5
 80110f4:	4651      	mov	r1, sl
 80110f6:	f7ff fbe1 	bl	80108bc <write_submessage_acknack.isra.0>
 80110fa:	4620      	mov	r0, r4
 80110fc:	b01d      	add	sp, #116	@ 0x74
 80110fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011102:	4629      	mov	r1, r5
 8011104:	f107 0008 	add.w	r0, r7, #8
 8011108:	f001 f9b2 	bl	8012470 <uxr_get_input_best_effort_stream>
 801110c:	2800      	cmp	r0, #0
 801110e:	d098      	beq.n	8011042 <listen_message_reliably+0x172>
 8011110:	4649      	mov	r1, r9
 8011112:	f002 fe5b 	bl	8013dcc <uxr_receive_best_effort_message>
 8011116:	2800      	cmp	r0, #0
 8011118:	d093      	beq.n	8011042 <listen_message_reliably+0x172>
 801111a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801111e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011122:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011128:	a90c      	add	r1, sp, #48	@ 0x30
 801112a:	4638      	mov	r0, r7
 801112c:	f7ff fd48 	bl	8010bc0 <read_submessage_list>
 8011130:	e787      	b.n	8011042 <listen_message_reliably+0x172>
 8011132:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011136:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801113a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801113e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011140:	a90c      	add	r1, sp, #48	@ 0x30
 8011142:	4638      	mov	r0, r7
 8011144:	f7ff fd3c 	bl	8010bc0 <read_submessage_list>
 8011148:	e7bb      	b.n	80110c2 <listen_message_reliably+0x1f2>
 801114a:	bf00      	nop

0801114c <uxr_run_session_timeout>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	f001 f9ff 	bl	8012554 <uxr_millis>
 8011156:	4606      	mov	r6, r0
 8011158:	4620      	mov	r0, r4
 801115a:	f7ff fc75 	bl	8010a48 <uxr_flash_output_streams>
 801115e:	4629      	mov	r1, r5
 8011160:	4620      	mov	r0, r4
 8011162:	f7ff feb5 	bl	8010ed0 <listen_message_reliably>
 8011166:	f001 f9f5 	bl	8012554 <uxr_millis>
 801116a:	1b83      	subs	r3, r0, r6
 801116c:	1ae9      	subs	r1, r5, r3
 801116e:	2900      	cmp	r1, #0
 8011170:	dcf6      	bgt.n	8011160 <uxr_run_session_timeout+0x14>
 8011172:	f104 0008 	add.w	r0, r4, #8
 8011176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801117a:	f001 b98f 	b.w	801249c <uxr_output_streams_confirmed>
 801117e:	bf00      	nop

08011180 <uxr_run_session_until_data>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	4604      	mov	r4, r0
 8011184:	460d      	mov	r5, r1
 8011186:	f001 f9e5 	bl	8012554 <uxr_millis>
 801118a:	4606      	mov	r6, r0
 801118c:	4620      	mov	r0, r4
 801118e:	f7ff fc5b 	bl	8010a48 <uxr_flash_output_streams>
 8011192:	2300      	movs	r3, #0
 8011194:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011198:	4629      	mov	r1, r5
 801119a:	e005      	b.n	80111a8 <uxr_run_session_until_data+0x28>
 801119c:	f001 f9da 	bl	8012554 <uxr_millis>
 80111a0:	1b83      	subs	r3, r0, r6
 80111a2:	1ae9      	subs	r1, r5, r3
 80111a4:	2900      	cmp	r1, #0
 80111a6:	dd07      	ble.n	80111b8 <uxr_run_session_until_data+0x38>
 80111a8:	4620      	mov	r0, r4
 80111aa:	f7ff fe91 	bl	8010ed0 <listen_message_reliably>
 80111ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d0f2      	beq.n	801119c <uxr_run_session_until_data+0x1c>
 80111b6:	bd70      	pop	{r4, r5, r6, pc}
 80111b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111bc:	bd70      	pop	{r4, r5, r6, pc}
 80111be:	bf00      	nop

080111c0 <uxr_run_session_until_confirm_delivery>:
 80111c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c4:	4606      	mov	r6, r0
 80111c6:	460d      	mov	r5, r1
 80111c8:	f001 f9c4 	bl	8012554 <uxr_millis>
 80111cc:	4607      	mov	r7, r0
 80111ce:	4630      	mov	r0, r6
 80111d0:	f7ff fc3a 	bl	8010a48 <uxr_flash_output_streams>
 80111d4:	2d00      	cmp	r5, #0
 80111d6:	f106 0808 	add.w	r8, r6, #8
 80111da:	bfa8      	it	ge
 80111dc:	462c      	movge	r4, r5
 80111de:	da07      	bge.n	80111f0 <uxr_run_session_until_confirm_delivery+0x30>
 80111e0:	e00e      	b.n	8011200 <uxr_run_session_until_confirm_delivery+0x40>
 80111e2:	f7ff fe75 	bl	8010ed0 <listen_message_reliably>
 80111e6:	f001 f9b5 	bl	8012554 <uxr_millis>
 80111ea:	1bc3      	subs	r3, r0, r7
 80111ec:	1aec      	subs	r4, r5, r3
 80111ee:	d407      	bmi.n	8011200 <uxr_run_session_until_confirm_delivery+0x40>
 80111f0:	4640      	mov	r0, r8
 80111f2:	f001 f953 	bl	801249c <uxr_output_streams_confirmed>
 80111f6:	4603      	mov	r3, r0
 80111f8:	4621      	mov	r1, r4
 80111fa:	4630      	mov	r0, r6
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d0f0      	beq.n	80111e2 <uxr_run_session_until_confirm_delivery+0x22>
 8011200:	4640      	mov	r0, r8
 8011202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011206:	f001 b949 	b.w	801249c <uxr_output_streams_confirmed>
 801120a:	bf00      	nop

0801120c <uxr_run_session_until_all_status>:
 801120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011210:	9d08      	ldr	r5, [sp, #32]
 8011212:	460f      	mov	r7, r1
 8011214:	4692      	mov	sl, r2
 8011216:	461c      	mov	r4, r3
 8011218:	4606      	mov	r6, r0
 801121a:	f7ff fc15 	bl	8010a48 <uxr_flash_output_streams>
 801121e:	b125      	cbz	r5, 801122a <uxr_run_session_until_all_status+0x1e>
 8011220:	462a      	mov	r2, r5
 8011222:	21ff      	movs	r1, #255	@ 0xff
 8011224:	4620      	mov	r0, r4
 8011226:	f003 fec3 	bl	8014fb0 <memset>
 801122a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 801122e:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011230:	f001 f990 	bl	8012554 <uxr_millis>
 8011234:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 8011238:	f1aa 0a02 	sub.w	sl, sl, #2
 801123c:	4680      	mov	r8, r0
 801123e:	4639      	mov	r1, r7
 8011240:	4630      	mov	r0, r6
 8011242:	f7ff fe45 	bl	8010ed0 <listen_message_reliably>
 8011246:	f001 f985 	bl	8012554 <uxr_millis>
 801124a:	eba0 0008 	sub.w	r0, r0, r8
 801124e:	1a39      	subs	r1, r7, r0
 8011250:	b33d      	cbz	r5, 80112a2 <uxr_run_session_until_all_status+0x96>
 8011252:	46cc      	mov	ip, r9
 8011254:	464a      	mov	r2, r9
 8011256:	2301      	movs	r3, #1
 8011258:	e002      	b.n	8011260 <uxr_run_session_until_all_status+0x54>
 801125a:	42ab      	cmp	r3, r5
 801125c:	d20c      	bcs.n	8011278 <uxr_run_session_until_all_status+0x6c>
 801125e:	3301      	adds	r3, #1
 8011260:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8011264:	2cff      	cmp	r4, #255	@ 0xff
 8011266:	d1f8      	bne.n	801125a <uxr_run_session_until_all_status+0x4e>
 8011268:	42ab      	cmp	r3, r5
 801126a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 801126e:	d213      	bcs.n	8011298 <uxr_run_session_until_all_status+0x8c>
 8011270:	2800      	cmp	r0, #0
 8011272:	d0f4      	beq.n	801125e <uxr_run_session_until_all_status+0x52>
 8011274:	2900      	cmp	r1, #0
 8011276:	dce3      	bgt.n	8011240 <uxr_run_session_until_all_status+0x34>
 8011278:	2300      	movs	r3, #0
 801127a:	444d      	add	r5, r9
 801127c:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801127e:	e001      	b.n	8011284 <uxr_run_session_until_all_status+0x78>
 8011280:	2b01      	cmp	r3, #1
 8011282:	d812      	bhi.n	80112aa <uxr_run_session_until_all_status+0x9e>
 8011284:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011288:	4565      	cmp	r5, ip
 801128a:	d1f9      	bne.n	8011280 <uxr_run_session_until_all_status+0x74>
 801128c:	2b01      	cmp	r3, #1
 801128e:	bf8c      	ite	hi
 8011290:	2000      	movhi	r0, #0
 8011292:	2001      	movls	r0, #1
 8011294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011298:	2900      	cmp	r1, #0
 801129a:	dded      	ble.n	8011278 <uxr_run_session_until_all_status+0x6c>
 801129c:	2800      	cmp	r0, #0
 801129e:	d1cf      	bne.n	8011240 <uxr_run_session_until_all_status+0x34>
 80112a0:	e7ea      	b.n	8011278 <uxr_run_session_until_all_status+0x6c>
 80112a2:	67f5      	str	r5, [r6, #124]	@ 0x7c
 80112a4:	2001      	movs	r0, #1
 80112a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112aa:	2000      	movs	r0, #0
 80112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080112b0 <uxr_create_session>:
 80112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	ed2d 8b02 	vpush	{d8}
 80112b8:	f100 0808 	add.w	r8, r0, #8
 80112bc:	b0a9      	sub	sp, #164	@ 0xa4
 80112be:	4604      	mov	r4, r0
 80112c0:	4640      	mov	r0, r8
 80112c2:	f001 f827 	bl	8012314 <uxr_reset_stream_storage>
 80112c6:	4620      	mov	r0, r4
 80112c8:	f000 fb0e 	bl	80118e8 <uxr_session_header_offset>
 80112cc:	a909      	add	r1, sp, #36	@ 0x24
 80112ce:	9000      	str	r0, [sp, #0]
 80112d0:	2300      	movs	r3, #0
 80112d2:	a810      	add	r0, sp, #64	@ 0x40
 80112d4:	221c      	movs	r2, #28
 80112d6:	f7fa fc1d 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 80112da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112dc:	8a1a      	ldrh	r2, [r3, #16]
 80112de:	3a04      	subs	r2, #4
 80112e0:	b292      	uxth	r2, r2
 80112e2:	4620      	mov	r0, r4
 80112e4:	a910      	add	r1, sp, #64	@ 0x40
 80112e6:	f000 fa23 	bl	8011730 <uxr_buffer_create_session>
 80112ea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80112ec:	4620      	mov	r0, r4
 80112ee:	f000 fa8f 	bl	8011810 <uxr_stamp_create_session_header>
 80112f2:	a810      	add	r0, sp, #64	@ 0x40
 80112f4:	f7fa fc4c 	bl	800bb90 <ucdr_buffer_length>
 80112f8:	23ff      	movs	r3, #255	@ 0xff
 80112fa:	ee08 0a10 	vmov	s16, r0
 80112fe:	7163      	strb	r3, [r4, #5]
 8011300:	f04f 090a 	mov.w	r9, #10
 8011304:	46c2      	mov	sl, r8
 8011306:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011308:	ee18 2a10 	vmov	r2, s16
 801130c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011310:	a909      	add	r1, sp, #36	@ 0x24
 8011312:	47a8      	blx	r5
 8011314:	f001 f91e 	bl	8012554 <uxr_millis>
 8011318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801131c:	9002      	str	r0, [sp, #8]
 801131e:	e00c      	b.n	801133a <uxr_create_session+0x8a>
 8011320:	f001 f918 	bl	8012554 <uxr_millis>
 8011324:	9b02      	ldr	r3, [sp, #8]
 8011326:	7962      	ldrb	r2, [r4, #5]
 8011328:	1ac0      	subs	r0, r0, r3
 801132a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801132e:	2b00      	cmp	r3, #0
 8011330:	f340 8094 	ble.w	801145c <uxr_create_session+0x1ac>
 8011334:	2aff      	cmp	r2, #255	@ 0xff
 8011336:	f040 8097 	bne.w	8011468 <uxr_create_session+0x1b8>
 801133a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801133c:	a905      	add	r1, sp, #20
 801133e:	6895      	ldr	r5, [r2, #8]
 8011340:	6810      	ldr	r0, [r2, #0]
 8011342:	aa06      	add	r2, sp, #24
 8011344:	47a8      	blx	r5
 8011346:	2800      	cmp	r0, #0
 8011348:	d0ea      	beq.n	8011320 <uxr_create_session+0x70>
 801134a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801134e:	a818      	add	r0, sp, #96	@ 0x60
 8011350:	f7fa fbf2 	bl	800bb38 <ucdr_init_buffer>
 8011354:	2500      	movs	r5, #0
 8011356:	f10d 0312 	add.w	r3, sp, #18
 801135a:	aa04      	add	r2, sp, #16
 801135c:	a918      	add	r1, sp, #96	@ 0x60
 801135e:	4620      	mov	r0, r4
 8011360:	f88d 5010 	strb.w	r5, [sp, #16]
 8011364:	f000 fa7e 	bl	8011864 <uxr_read_session_header>
 8011368:	2800      	cmp	r0, #0
 801136a:	d0d9      	beq.n	8011320 <uxr_create_session+0x70>
 801136c:	4629      	mov	r1, r5
 801136e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8011372:	f000 ff99 	bl	80122a8 <uxr_stream_id_from_raw>
 8011376:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801137a:	2f01      	cmp	r7, #1
 801137c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011380:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8011384:	fa5f f880 	uxtb.w	r8, r0
 8011388:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801138c:	d04d      	beq.n	801142a <uxr_create_session+0x17a>
 801138e:	2f02      	cmp	r7, #2
 8011390:	d00c      	beq.n	80113ac <uxr_create_session+0xfc>
 8011392:	2f00      	cmp	r7, #0
 8011394:	d1c4      	bne.n	8011320 <uxr_create_session+0x70>
 8011396:	4639      	mov	r1, r7
 8011398:	4638      	mov	r0, r7
 801139a:	f000 ff85 	bl	80122a8 <uxr_stream_id_from_raw>
 801139e:	a918      	add	r1, sp, #96	@ 0x60
 80113a0:	4602      	mov	r2, r0
 80113a2:	4620      	mov	r0, r4
 80113a4:	9208      	str	r2, [sp, #32]
 80113a6:	f7ff fc0b 	bl	8010bc0 <read_submessage_list>
 80113aa:	e7b9      	b.n	8011320 <uxr_create_session+0x70>
 80113ac:	4629      	mov	r1, r5
 80113ae:	4650      	mov	r0, sl
 80113b0:	f001 f868 	bl	8012484 <uxr_get_input_reliable_stream>
 80113b4:	4606      	mov	r6, r0
 80113b6:	b390      	cbz	r0, 801141e <uxr_create_session+0x16e>
 80113b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80113ba:	9203      	str	r2, [sp, #12]
 80113bc:	a818      	add	r0, sp, #96	@ 0x60
 80113be:	f7fa fbeb 	bl	800bb98 <ucdr_buffer_remaining>
 80113c2:	4603      	mov	r3, r0
 80113c4:	f10d 0011 	add.w	r0, sp, #17
 80113c8:	9000      	str	r0, [sp, #0]
 80113ca:	9a03      	ldr	r2, [sp, #12]
 80113cc:	4659      	mov	r1, fp
 80113ce:	4630      	mov	r0, r6
 80113d0:	f002 fd80 	bl	8013ed4 <uxr_receive_reliable_message>
 80113d4:	b318      	cbz	r0, 801141e <uxr_create_session+0x16e>
 80113d6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80113da:	b9b3      	cbnz	r3, 801140a <uxr_create_session+0x15a>
 80113dc:	f88d 8020 	strb.w	r8, [sp, #32]
 80113e0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80113e4:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 80113e8:	9a08      	ldr	r2, [sp, #32]
 80113ea:	a918      	add	r1, sp, #96	@ 0x60
 80113ec:	4620      	mov	r0, r4
 80113ee:	f7ff fbe7 	bl	8010bc0 <read_submessage_list>
 80113f2:	e00a      	b.n	801140a <uxr_create_session+0x15a>
 80113f4:	f04f 0302 	mov.w	r3, #2
 80113f8:	f88d 8020 	strb.w	r8, [sp, #32]
 80113fc:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011400:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8011404:	9a08      	ldr	r2, [sp, #32]
 8011406:	f7ff fbdb 	bl	8010bc0 <read_submessage_list>
 801140a:	a920      	add	r1, sp, #128	@ 0x80
 801140c:	2204      	movs	r2, #4
 801140e:	4630      	mov	r0, r6
 8011410:	f002 fde0 	bl	8013fd4 <uxr_next_input_reliable_buffer_available>
 8011414:	4603      	mov	r3, r0
 8011416:	a920      	add	r1, sp, #128	@ 0x80
 8011418:	4620      	mov	r0, r4
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1ea      	bne.n	80113f4 <uxr_create_session+0x144>
 801141e:	462a      	mov	r2, r5
 8011420:	4641      	mov	r1, r8
 8011422:	4620      	mov	r0, r4
 8011424:	f7ff fa4a 	bl	80108bc <write_submessage_acknack.isra.0>
 8011428:	e77a      	b.n	8011320 <uxr_create_session+0x70>
 801142a:	4629      	mov	r1, r5
 801142c:	4650      	mov	r0, sl
 801142e:	f001 f81f 	bl	8012470 <uxr_get_input_best_effort_stream>
 8011432:	2800      	cmp	r0, #0
 8011434:	f43f af74 	beq.w	8011320 <uxr_create_session+0x70>
 8011438:	4659      	mov	r1, fp
 801143a:	f002 fcc7 	bl	8013dcc <uxr_receive_best_effort_message>
 801143e:	2800      	cmp	r0, #0
 8011440:	f43f af6e 	beq.w	8011320 <uxr_create_session+0x70>
 8011444:	f88d 8020 	strb.w	r8, [sp, #32]
 8011448:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801144c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011450:	9a08      	ldr	r2, [sp, #32]
 8011452:	a918      	add	r1, sp, #96	@ 0x60
 8011454:	4620      	mov	r0, r4
 8011456:	f7ff fbb3 	bl	8010bc0 <read_submessage_list>
 801145a:	e761      	b.n	8011320 <uxr_create_session+0x70>
 801145c:	f1b9 0901 	subs.w	r9, r9, #1
 8011460:	d002      	beq.n	8011468 <uxr_create_session+0x1b8>
 8011462:	2aff      	cmp	r2, #255	@ 0xff
 8011464:	f43f af4f 	beq.w	8011306 <uxr_create_session+0x56>
 8011468:	b12a      	cbz	r2, 8011476 <uxr_create_session+0x1c6>
 801146a:	2000      	movs	r0, #0
 801146c:	b029      	add	sp, #164	@ 0xa4
 801146e:	ecbd 8b02 	vpop	{d8}
 8011472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011476:	4650      	mov	r0, sl
 8011478:	f000 ff4c 	bl	8012314 <uxr_reset_stream_storage>
 801147c:	2001      	movs	r0, #1
 801147e:	b029      	add	sp, #164	@ 0xa4
 8011480:	ecbd 8b02 	vpop	{d8}
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011488 <wait_session_status>:
 8011488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	4604      	mov	r4, r0
 801148e:	b09d      	sub	sp, #116	@ 0x74
 8011490:	20ff      	movs	r0, #255	@ 0xff
 8011492:	7160      	strb	r0, [r4, #5]
 8011494:	9304      	str	r3, [sp, #16]
 8011496:	2b00      	cmp	r3, #0
 8011498:	f000 80b8 	beq.w	801160c <wait_session_status+0x184>
 801149c:	2300      	movs	r3, #0
 801149e:	468b      	mov	fp, r1
 80114a0:	4692      	mov	sl, r2
 80114a2:	9303      	str	r3, [sp, #12]
 80114a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114a6:	4652      	mov	r2, sl
 80114a8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80114ac:	4659      	mov	r1, fp
 80114ae:	47a8      	blx	r5
 80114b0:	f001 f850 	bl	8012554 <uxr_millis>
 80114b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114b8:	4605      	mov	r5, r0
 80114ba:	e009      	b.n	80114d0 <wait_session_status+0x48>
 80114bc:	f001 f84a 	bl	8012554 <uxr_millis>
 80114c0:	1b40      	subs	r0, r0, r5
 80114c2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd42      	ble.n	8011550 <wait_session_status+0xc8>
 80114ca:	7960      	ldrb	r0, [r4, #5]
 80114cc:	28ff      	cmp	r0, #255	@ 0xff
 80114ce:	d148      	bne.n	8011562 <wait_session_status+0xda>
 80114d0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80114d2:	a908      	add	r1, sp, #32
 80114d4:	6896      	ldr	r6, [r2, #8]
 80114d6:	6810      	ldr	r0, [r2, #0]
 80114d8:	aa09      	add	r2, sp, #36	@ 0x24
 80114da:	47b0      	blx	r6
 80114dc:	2800      	cmp	r0, #0
 80114de:	d0ed      	beq.n	80114bc <wait_session_status+0x34>
 80114e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80114e4:	a80c      	add	r0, sp, #48	@ 0x30
 80114e6:	f7fa fb27 	bl	800bb38 <ucdr_init_buffer>
 80114ea:	2600      	movs	r6, #0
 80114ec:	f10d 031e 	add.w	r3, sp, #30
 80114f0:	aa07      	add	r2, sp, #28
 80114f2:	a90c      	add	r1, sp, #48	@ 0x30
 80114f4:	4620      	mov	r0, r4
 80114f6:	f88d 601c 	strb.w	r6, [sp, #28]
 80114fa:	f000 f9b3 	bl	8011864 <uxr_read_session_header>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d0dc      	beq.n	80114bc <wait_session_status+0x34>
 8011502:	4631      	mov	r1, r6
 8011504:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011508:	f000 fece 	bl	80122a8 <uxr_stream_id_from_raw>
 801150c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011510:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011514:	9302      	str	r3, [sp, #8]
 8011516:	2f01      	cmp	r7, #1
 8011518:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801151c:	fa5f f880 	uxtb.w	r8, r0
 8011520:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011524:	d058      	beq.n	80115d8 <wait_session_status+0x150>
 8011526:	2f02      	cmp	r7, #2
 8011528:	d021      	beq.n	801156e <wait_session_status+0xe6>
 801152a:	2f00      	cmp	r7, #0
 801152c:	d1c6      	bne.n	80114bc <wait_session_status+0x34>
 801152e:	4639      	mov	r1, r7
 8011530:	4638      	mov	r0, r7
 8011532:	f000 feb9 	bl	80122a8 <uxr_stream_id_from_raw>
 8011536:	a90c      	add	r1, sp, #48	@ 0x30
 8011538:	4602      	mov	r2, r0
 801153a:	4620      	mov	r0, r4
 801153c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801153e:	f7ff fb3f 	bl	8010bc0 <read_submessage_list>
 8011542:	f001 f807 	bl	8012554 <uxr_millis>
 8011546:	1b40      	subs	r0, r0, r5
 8011548:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801154c:	2b00      	cmp	r3, #0
 801154e:	dcbc      	bgt.n	80114ca <wait_session_status+0x42>
 8011550:	9b03      	ldr	r3, [sp, #12]
 8011552:	9a04      	ldr	r2, [sp, #16]
 8011554:	7960      	ldrb	r0, [r4, #5]
 8011556:	3301      	adds	r3, #1
 8011558:	429a      	cmp	r2, r3
 801155a:	9303      	str	r3, [sp, #12]
 801155c:	d001      	beq.n	8011562 <wait_session_status+0xda>
 801155e:	28ff      	cmp	r0, #255	@ 0xff
 8011560:	d0a0      	beq.n	80114a4 <wait_session_status+0x1c>
 8011562:	38ff      	subs	r0, #255	@ 0xff
 8011564:	bf18      	it	ne
 8011566:	2001      	movne	r0, #1
 8011568:	b01d      	add	sp, #116	@ 0x74
 801156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156e:	4631      	mov	r1, r6
 8011570:	f104 0008 	add.w	r0, r4, #8
 8011574:	f000 ff86 	bl	8012484 <uxr_get_input_reliable_stream>
 8011578:	4681      	mov	r9, r0
 801157a:	b338      	cbz	r0, 80115cc <wait_session_status+0x144>
 801157c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801157e:	9205      	str	r2, [sp, #20]
 8011580:	a80c      	add	r0, sp, #48	@ 0x30
 8011582:	f7fa fb09 	bl	800bb98 <ucdr_buffer_remaining>
 8011586:	4603      	mov	r3, r0
 8011588:	f10d 001d 	add.w	r0, sp, #29
 801158c:	9000      	str	r0, [sp, #0]
 801158e:	9a05      	ldr	r2, [sp, #20]
 8011590:	9902      	ldr	r1, [sp, #8]
 8011592:	4648      	mov	r0, r9
 8011594:	f002 fc9e 	bl	8013ed4 <uxr_receive_reliable_message>
 8011598:	b1c0      	cbz	r0, 80115cc <wait_session_status+0x144>
 801159a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801159e:	b95b      	cbnz	r3, 80115b8 <wait_session_status+0x130>
 80115a0:	e03c      	b.n	801161c <wait_session_status+0x194>
 80115a2:	f04f 0302 	mov.w	r3, #2
 80115a6:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 80115aa:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80115ae:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80115b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115b4:	f7ff fb04 	bl	8010bc0 <read_submessage_list>
 80115b8:	a914      	add	r1, sp, #80	@ 0x50
 80115ba:	2204      	movs	r2, #4
 80115bc:	4648      	mov	r0, r9
 80115be:	f002 fd09 	bl	8013fd4 <uxr_next_input_reliable_buffer_available>
 80115c2:	4603      	mov	r3, r0
 80115c4:	a914      	add	r1, sp, #80	@ 0x50
 80115c6:	4620      	mov	r0, r4
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1ea      	bne.n	80115a2 <wait_session_status+0x11a>
 80115cc:	4632      	mov	r2, r6
 80115ce:	4641      	mov	r1, r8
 80115d0:	4620      	mov	r0, r4
 80115d2:	f7ff f973 	bl	80108bc <write_submessage_acknack.isra.0>
 80115d6:	e771      	b.n	80114bc <wait_session_status+0x34>
 80115d8:	4631      	mov	r1, r6
 80115da:	f104 0008 	add.w	r0, r4, #8
 80115de:	f000 ff47 	bl	8012470 <uxr_get_input_best_effort_stream>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	f43f af6a 	beq.w	80114bc <wait_session_status+0x34>
 80115e8:	9902      	ldr	r1, [sp, #8]
 80115ea:	f002 fbef 	bl	8013dcc <uxr_receive_best_effort_message>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	f43f af64 	beq.w	80114bc <wait_session_status+0x34>
 80115f4:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 80115f8:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80115fc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011600:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011602:	a90c      	add	r1, sp, #48	@ 0x30
 8011604:	4620      	mov	r0, r4
 8011606:	f7ff fadb 	bl	8010bc0 <read_submessage_list>
 801160a:	e757      	b.n	80114bc <wait_session_status+0x34>
 801160c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801160e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011612:	47a0      	blx	r4
 8011614:	2001      	movs	r0, #1
 8011616:	b01d      	add	sp, #116	@ 0x74
 8011618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011620:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011624:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011628:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801162a:	a90c      	add	r1, sp, #48	@ 0x30
 801162c:	4620      	mov	r0, r4
 801162e:	f7ff fac7 	bl	8010bc0 <read_submessage_list>
 8011632:	e7c1      	b.n	80115b8 <wait_session_status+0x130>

08011634 <uxr_delete_session_retries>:
 8011634:	b530      	push	{r4, r5, lr}
 8011636:	b08f      	sub	sp, #60	@ 0x3c
 8011638:	4604      	mov	r4, r0
 801163a:	460d      	mov	r5, r1
 801163c:	f000 f954 	bl	80118e8 <uxr_session_header_offset>
 8011640:	2300      	movs	r3, #0
 8011642:	2210      	movs	r2, #16
 8011644:	9000      	str	r0, [sp, #0]
 8011646:	a902      	add	r1, sp, #8
 8011648:	a806      	add	r0, sp, #24
 801164a:	f7fa fa63 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 801164e:	a906      	add	r1, sp, #24
 8011650:	4620      	mov	r0, r4
 8011652:	f000 f897 	bl	8011784 <uxr_buffer_delete_session>
 8011656:	2200      	movs	r2, #0
 8011658:	4611      	mov	r1, r2
 801165a:	9b06      	ldr	r3, [sp, #24]
 801165c:	4620      	mov	r0, r4
 801165e:	f000 f8eb 	bl	8011838 <uxr_stamp_session_header>
 8011662:	a806      	add	r0, sp, #24
 8011664:	f7fa fa94 	bl	800bb90 <ucdr_buffer_length>
 8011668:	462b      	mov	r3, r5
 801166a:	4602      	mov	r2, r0
 801166c:	a902      	add	r1, sp, #8
 801166e:	4620      	mov	r0, r4
 8011670:	f7ff ff0a 	bl	8011488 <wait_session_status>
 8011674:	b118      	cbz	r0, 801167e <uxr_delete_session_retries+0x4a>
 8011676:	7960      	ldrb	r0, [r4, #5]
 8011678:	fab0 f080 	clz	r0, r0
 801167c:	0940      	lsrs	r0, r0, #5
 801167e:	b00f      	add	sp, #60	@ 0x3c
 8011680:	bd30      	pop	{r4, r5, pc}
 8011682:	bf00      	nop

08011684 <uxr_prepare_stream_to_write_submessage>:
 8011684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	4682      	mov	sl, r0
 801168c:	4610      	mov	r0, r2
 801168e:	4615      	mov	r5, r2
 8011690:	461e      	mov	r6, r3
 8011692:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011696:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801169a:	9101      	str	r1, [sp, #4]
 801169c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80116a0:	f000 ff52 	bl	8012548 <uxr_submessage_padding>
 80116a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116a8:	f105 0904 	add.w	r9, r5, #4
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	4481      	add	r9, r0
 80116b0:	d01d      	beq.n	80116ee <uxr_prepare_stream_to_write_submessage+0x6a>
 80116b2:	2b02      	cmp	r3, #2
 80116b4:	d116      	bne.n	80116e4 <uxr_prepare_stream_to_write_submessage+0x60>
 80116b6:	4621      	mov	r1, r4
 80116b8:	f10a 0008 	add.w	r0, sl, #8
 80116bc:	f000 fecc 	bl	8012458 <uxr_get_output_reliable_stream>
 80116c0:	4604      	mov	r4, r0
 80116c2:	b158      	cbz	r0, 80116dc <uxr_prepare_stream_to_write_submessage+0x58>
 80116c4:	4649      	mov	r1, r9
 80116c6:	4632      	mov	r2, r6
 80116c8:	f002 fe3a 	bl	8014340 <uxr_prepare_reliable_buffer_to_write>
 80116cc:	4604      	mov	r4, r0
 80116ce:	b12c      	cbz	r4, 80116dc <uxr_prepare_stream_to_write_submessage+0x58>
 80116d0:	4643      	mov	r3, r8
 80116d2:	b2aa      	uxth	r2, r5
 80116d4:	4639      	mov	r1, r7
 80116d6:	4630      	mov	r0, r6
 80116d8:	f000 fef6 	bl	80124c8 <uxr_buffer_submessage_header>
 80116dc:	4620      	mov	r0, r4
 80116de:	b002      	add	sp, #8
 80116e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e4:	2400      	movs	r4, #0
 80116e6:	4620      	mov	r0, r4
 80116e8:	b002      	add	sp, #8
 80116ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ee:	4621      	mov	r1, r4
 80116f0:	f10a 0008 	add.w	r0, sl, #8
 80116f4:	f000 fea8 	bl	8012448 <uxr_get_output_best_effort_stream>
 80116f8:	4604      	mov	r4, r0
 80116fa:	2800      	cmp	r0, #0
 80116fc:	d0ee      	beq.n	80116dc <uxr_prepare_stream_to_write_submessage+0x58>
 80116fe:	4649      	mov	r1, r9
 8011700:	4632      	mov	r2, r6
 8011702:	f002 fd59 	bl	80141b8 <uxr_prepare_best_effort_buffer_to_write>
 8011706:	4604      	mov	r4, r0
 8011708:	e7e1      	b.n	80116ce <uxr_prepare_stream_to_write_submessage+0x4a>
 801170a:	bf00      	nop

0801170c <uxr_init_session_info>:
 801170c:	b470      	push	{r4, r5, r6}
 801170e:	7102      	strb	r2, [r0, #4]
 8011710:	0e16      	lsrs	r6, r2, #24
 8011712:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011716:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801171a:	23ff      	movs	r3, #255	@ 0xff
 801171c:	2209      	movs	r2, #9
 801171e:	7046      	strb	r6, [r0, #1]
 8011720:	7085      	strb	r5, [r0, #2]
 8011722:	70c4      	strb	r4, [r0, #3]
 8011724:	7001      	strb	r1, [r0, #0]
 8011726:	bc70      	pop	{r4, r5, r6}
 8011728:	80c2      	strh	r2, [r0, #6]
 801172a:	7143      	strb	r3, [r0, #5]
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop

08011730 <uxr_buffer_create_session>:
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	2300      	movs	r3, #0
 8011736:	4d12      	ldr	r5, [pc, #72]	@ (8011780 <uxr_buffer_create_session+0x50>)
 8011738:	9307      	str	r3, [sp, #28]
 801173a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801173e:	7802      	ldrb	r2, [r0, #0]
 8011740:	9303      	str	r3, [sp, #12]
 8011742:	460c      	mov	r4, r1
 8011744:	f88d 200c 	strb.w	r2, [sp, #12]
 8011748:	2101      	movs	r1, #1
 801174a:	682a      	ldr	r2, [r5, #0]
 801174c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011750:	88ad      	ldrh	r5, [r5, #4]
 8011752:	80c1      	strh	r1, [r0, #6]
 8011754:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011758:	9200      	str	r2, [sp, #0]
 801175a:	4619      	mov	r1, r3
 801175c:	2210      	movs	r2, #16
 801175e:	4620      	mov	r0, r4
 8011760:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011764:	9306      	str	r3, [sp, #24]
 8011766:	f88d 300d 	strb.w	r3, [sp, #13]
 801176a:	9602      	str	r6, [sp, #8]
 801176c:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011770:	f000 feaa 	bl	80124c8 <uxr_buffer_submessage_header>
 8011774:	4620      	mov	r0, r4
 8011776:	4669      	mov	r1, sp
 8011778:	f001 fc9c 	bl	80130b4 <uxr_serialize_CREATE_CLIENT_Payload>
 801177c:	b008      	add	sp, #32
 801177e:	bd70      	pop	{r4, r5, r6, pc}
 8011780:	08016458 	.word	0x08016458

08011784 <uxr_buffer_delete_session>:
 8011784:	b530      	push	{r4, r5, lr}
 8011786:	4b0c      	ldr	r3, [pc, #48]	@ (80117b8 <uxr_buffer_delete_session+0x34>)
 8011788:	b083      	sub	sp, #12
 801178a:	891b      	ldrh	r3, [r3, #8]
 801178c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011790:	2202      	movs	r2, #2
 8011792:	460c      	mov	r4, r1
 8011794:	80c2      	strh	r2, [r0, #6]
 8011796:	2300      	movs	r3, #0
 8011798:	2204      	movs	r2, #4
 801179a:	4608      	mov	r0, r1
 801179c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80117a0:	2103      	movs	r1, #3
 80117a2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80117a6:	f000 fe8f 	bl	80124c8 <uxr_buffer_submessage_header>
 80117aa:	4620      	mov	r0, r4
 80117ac:	a901      	add	r1, sp, #4
 80117ae:	f001 fd2f 	bl	8013210 <uxr_serialize_DELETE_Payload>
 80117b2:	b003      	add	sp, #12
 80117b4:	bd30      	pop	{r4, r5, pc}
 80117b6:	bf00      	nop
 80117b8:	08016458 	.word	0x08016458

080117bc <uxr_read_create_session_status>:
 80117bc:	b510      	push	{r4, lr}
 80117be:	b088      	sub	sp, #32
 80117c0:	4604      	mov	r4, r0
 80117c2:	4608      	mov	r0, r1
 80117c4:	a901      	add	r1, sp, #4
 80117c6:	f001 fd33 	bl	8013230 <uxr_deserialize_STATUS_AGENT_Payload>
 80117ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117ce:	7163      	strb	r3, [r4, #5]
 80117d0:	b008      	add	sp, #32
 80117d2:	bd10      	pop	{r4, pc}

080117d4 <uxr_read_delete_session_status>:
 80117d4:	b510      	push	{r4, lr}
 80117d6:	4604      	mov	r4, r0
 80117d8:	b084      	sub	sp, #16
 80117da:	4608      	mov	r0, r1
 80117dc:	a902      	add	r1, sp, #8
 80117de:	f001 fd57 	bl	8013290 <uxr_deserialize_STATUS_Payload>
 80117e2:	88e3      	ldrh	r3, [r4, #6]
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d001      	beq.n	80117ec <uxr_read_delete_session_status+0x18>
 80117e8:	b004      	add	sp, #16
 80117ea:	bd10      	pop	{r4, pc}
 80117ec:	f10d 000a 	add.w	r0, sp, #10
 80117f0:	f7fe fec6 	bl	8010580 <uxr_object_id_from_raw>
 80117f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80117f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80117fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011800:	b29b      	uxth	r3, r3
 8011802:	2b02      	cmp	r3, #2
 8011804:	bf04      	itt	eq
 8011806:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801180a:	7163      	strbeq	r3, [r4, #5]
 801180c:	b004      	add	sp, #16
 801180e:	bd10      	pop	{r4, pc}

08011810 <uxr_stamp_create_session_header>:
 8011810:	b510      	push	{r4, lr}
 8011812:	4604      	mov	r4, r0
 8011814:	b08a      	sub	sp, #40	@ 0x28
 8011816:	a802      	add	r0, sp, #8
 8011818:	2208      	movs	r2, #8
 801181a:	f7fa f98d 	bl	800bb38 <ucdr_init_buffer>
 801181e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011822:	9400      	str	r4, [sp, #0]
 8011824:	2300      	movs	r3, #0
 8011826:	a802      	add	r0, sp, #8
 8011828:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801182c:	461a      	mov	r2, r3
 801182e:	f000 fef3 	bl	8012618 <uxr_serialize_message_header>
 8011832:	b00a      	add	sp, #40	@ 0x28
 8011834:	bd10      	pop	{r4, pc}
 8011836:	bf00      	nop

08011838 <uxr_stamp_session_header>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	4604      	mov	r4, r0
 801183c:	b08c      	sub	sp, #48	@ 0x30
 801183e:	460d      	mov	r5, r1
 8011840:	4616      	mov	r6, r2
 8011842:	4619      	mov	r1, r3
 8011844:	a804      	add	r0, sp, #16
 8011846:	2208      	movs	r2, #8
 8011848:	9603      	str	r6, [sp, #12]
 801184a:	f7fa f975 	bl	800bb38 <ucdr_init_buffer>
 801184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011852:	9b03      	ldr	r3, [sp, #12]
 8011854:	9400      	str	r4, [sp, #0]
 8011856:	462a      	mov	r2, r5
 8011858:	a804      	add	r0, sp, #16
 801185a:	f000 fedd 	bl	8012618 <uxr_serialize_message_header>
 801185e:	b00c      	add	sp, #48	@ 0x30
 8011860:	bd70      	pop	{r4, r5, r6, pc}
 8011862:	bf00      	nop

08011864 <uxr_read_session_header>:
 8011864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011868:	4607      	mov	r7, r0
 801186a:	b084      	sub	sp, #16
 801186c:	4608      	mov	r0, r1
 801186e:	460c      	mov	r4, r1
 8011870:	4615      	mov	r5, r2
 8011872:	461e      	mov	r6, r3
 8011874:	f7fa f990 	bl	800bb98 <ucdr_buffer_remaining>
 8011878:	2808      	cmp	r0, #8
 801187a:	d803      	bhi.n	8011884 <uxr_read_session_header+0x20>
 801187c:	2000      	movs	r0, #0
 801187e:	b004      	add	sp, #16
 8011880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011884:	f10d 080c 	add.w	r8, sp, #12
 8011888:	4633      	mov	r3, r6
 801188a:	462a      	mov	r2, r5
 801188c:	4620      	mov	r0, r4
 801188e:	f8cd 8000 	str.w	r8, [sp]
 8011892:	f10d 010b 	add.w	r1, sp, #11
 8011896:	f000 fedd 	bl	8012654 <uxr_deserialize_message_header>
 801189a:	783a      	ldrb	r2, [r7, #0]
 801189c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d1eb      	bne.n	801187c <uxr_read_session_header+0x18>
 80118a4:	061b      	lsls	r3, r3, #24
 80118a6:	d41c      	bmi.n	80118e2 <uxr_read_session_header+0x7e>
 80118a8:	f898 2000 	ldrb.w	r2, [r8]
 80118ac:	787b      	ldrb	r3, [r7, #1]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d003      	beq.n	80118ba <uxr_read_session_header+0x56>
 80118b2:	2001      	movs	r0, #1
 80118b4:	f080 0001 	eor.w	r0, r0, #1
 80118b8:	e7e1      	b.n	801187e <uxr_read_session_header+0x1a>
 80118ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80118be:	78bb      	ldrb	r3, [r7, #2]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	f107 0102 	add.w	r1, r7, #2
 80118c6:	d1f4      	bne.n	80118b2 <uxr_read_session_header+0x4e>
 80118c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80118cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d1ee      	bne.n	80118b2 <uxr_read_session_header+0x4e>
 80118d4:	784b      	ldrb	r3, [r1, #1]
 80118d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d1e9      	bne.n	80118b2 <uxr_read_session_header+0x4e>
 80118de:	2000      	movs	r0, #0
 80118e0:	e7e8      	b.n	80118b4 <uxr_read_session_header+0x50>
 80118e2:	2001      	movs	r0, #1
 80118e4:	e7cb      	b.n	801187e <uxr_read_session_header+0x1a>
 80118e6:	bf00      	nop

080118e8 <uxr_session_header_offset>:
 80118e8:	f990 3000 	ldrsb.w	r3, [r0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	bfac      	ite	ge
 80118f0:	2008      	movge	r0, #8
 80118f2:	2004      	movlt	r0, #4
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <uxr_init_base_object_request>:
 80118f8:	b530      	push	{r4, r5, lr}
 80118fa:	88c3      	ldrh	r3, [r0, #6]
 80118fc:	b083      	sub	sp, #12
 80118fe:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011902:	9101      	str	r1, [sp, #4]
 8011904:	f1a3 010a 	sub.w	r1, r3, #10
 8011908:	b289      	uxth	r1, r1
 801190a:	42a1      	cmp	r1, r4
 801190c:	d80e      	bhi.n	801192c <uxr_init_base_object_request+0x34>
 801190e:	3301      	adds	r3, #1
 8011910:	b29c      	uxth	r4, r3
 8011912:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011916:	b2db      	uxtb	r3, r3
 8011918:	80c4      	strh	r4, [r0, #6]
 801191a:	1c91      	adds	r1, r2, #2
 801191c:	9801      	ldr	r0, [sp, #4]
 801191e:	7015      	strb	r5, [r2, #0]
 8011920:	7053      	strb	r3, [r2, #1]
 8011922:	f7fe fe41 	bl	80105a8 <uxr_object_id_to_raw>
 8011926:	4620      	mov	r0, r4
 8011928:	b003      	add	sp, #12
 801192a:	bd30      	pop	{r4, r5, pc}
 801192c:	230a      	movs	r3, #10
 801192e:	461c      	mov	r4, r3
 8011930:	2500      	movs	r5, #0
 8011932:	e7f1      	b.n	8011918 <uxr_init_base_object_request+0x20>

08011934 <uxr_parse_base_object_request>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	4604      	mov	r4, r0
 8011938:	3002      	adds	r0, #2
 801193a:	460d      	mov	r5, r1
 801193c:	4616      	mov	r6, r2
 801193e:	f7fe fe1f 	bl	8010580 <uxr_object_id_from_raw>
 8011942:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011946:	8028      	strh	r0, [r5, #0]
 8011948:	806b      	strh	r3, [r5, #2]
 801194a:	7822      	ldrb	r2, [r4, #0]
 801194c:	7863      	ldrb	r3, [r4, #1]
 801194e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011952:	8033      	strh	r3, [r6, #0]
 8011954:	bd70      	pop	{r4, r5, r6, pc}
 8011956:	bf00      	nop

08011958 <uxr_init_framing_io>:
 8011958:	2300      	movs	r3, #0
 801195a:	7041      	strb	r1, [r0, #1]
 801195c:	7003      	strb	r3, [r0, #0]
 801195e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop

08011964 <uxr_write_framed_msg>:
 8011964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	7845      	ldrb	r5, [r0, #1]
 801196a:	b085      	sub	sp, #20
 801196c:	4604      	mov	r4, r0
 801196e:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8011972:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 8011976:	f1bc 0f01 	cmp.w	ip, #1
 801197a:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 801197e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011982:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 8011986:	460e      	mov	r6, r1
 8011988:	4617      	mov	r7, r2
 801198a:	469b      	mov	fp, r3
 801198c:	f240 8116 	bls.w	8011bbc <uxr_write_framed_msg+0x258>
 8011990:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8011994:	2302      	movs	r3, #2
 8011996:	2a01      	cmp	r2, #1
 8011998:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 801199c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80119a0:	f240 8091 	bls.w	8011ac6 <uxr_write_framed_msg+0x162>
 80119a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119a6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80119aa:	b2d9      	uxtb	r1, r3
 80119ac:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80119b0:	2203      	movs	r2, #3
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119b8:	f240 809a 	bls.w	8011af0 <uxr_write_framed_msg+0x18c>
 80119bc:	18a3      	adds	r3, r4, r2
 80119be:	3201      	adds	r2, #1
 80119c0:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 80119c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80119ce:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80119d2:	2901      	cmp	r1, #1
 80119d4:	eb04 0102 	add.w	r1, r4, r2
 80119d8:	f240 8101 	bls.w	8011bde <uxr_write_framed_msg+0x27a>
 80119dc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80119e0:	3201      	adds	r2, #1
 80119e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e4:	b2d2      	uxtb	r2, r2
 80119e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f000 8106 	beq.w	8011bfc <uxr_write_framed_msg+0x298>
 80119f0:	f04f 0a00 	mov.w	sl, #0
 80119f4:	46d1      	mov	r9, sl
 80119f6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80119fa:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80119fe:	2901      	cmp	r1, #1
 8011a00:	f240 80a3 	bls.w	8011b4a <uxr_write_framed_msg+0x1e6>
 8011a04:	2a29      	cmp	r2, #41	@ 0x29
 8011a06:	d87f      	bhi.n	8011b08 <uxr_write_framed_msg+0x1a4>
 8011a08:	18a1      	adds	r1, r4, r2
 8011a0a:	3201      	adds	r2, #1
 8011a0c:	b2d2      	uxtb	r2, r2
 8011a0e:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011a12:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011a16:	ea8a 0303 	eor.w	r3, sl, r3
 8011a1a:	4984      	ldr	r1, [pc, #528]	@ (8011c2c <uxr_write_framed_msg+0x2c8>)
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	f109 0901 	add.w	r9, r9, #1
 8011a22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a26:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8011a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a2c:	454b      	cmp	r3, r9
 8011a2e:	d8e2      	bhi.n	80119f6 <uxr_write_framed_msg+0x92>
 8011a30:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011a34:	fa5f f98a 	uxtb.w	r9, sl
 8011a38:	9301      	str	r3, [sp, #4]
 8011a3a:	f04f 0b00 	mov.w	fp, #0
 8011a3e:	f88d 900c 	strb.w	r9, [sp, #12]
 8011a42:	f88d 300d 	strb.w	r3, [sp, #13]
 8011a46:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8011a4a:	fa5f f18a 	uxtb.w	r1, sl
 8011a4e:	2901      	cmp	r1, #1
 8011a50:	d920      	bls.n	8011a94 <uxr_write_framed_msg+0x130>
 8011a52:	2a29      	cmp	r2, #41	@ 0x29
 8011a54:	f240 808b 	bls.w	8011b6e <uxr_write_framed_msg+0x20a>
 8011a58:	2500      	movs	r5, #0
 8011a5a:	e000      	b.n	8011a5e <uxr_write_framed_msg+0xfa>
 8011a5c:	b160      	cbz	r0, 8011a78 <uxr_write_framed_msg+0x114>
 8011a5e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011a62:	1b52      	subs	r2, r2, r5
 8011a64:	4421      	add	r1, r4
 8011a66:	4643      	mov	r3, r8
 8011a68:	4638      	mov	r0, r7
 8011a6a:	47b0      	blx	r6
 8011a6c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011a70:	4405      	add	r5, r0
 8011a72:	4295      	cmp	r5, r2
 8011a74:	d3f2      	bcc.n	8011a5c <uxr_write_framed_msg+0xf8>
 8011a76:	d003      	beq.n	8011a80 <uxr_write_framed_msg+0x11c>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	b005      	add	sp, #20
 8011a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a80:	fa5f f18a 	uxtb.w	r1, sl
 8011a84:	f04f 0300 	mov.w	r3, #0
 8011a88:	2901      	cmp	r1, #1
 8011a8a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011a8e:	f04f 0200 	mov.w	r2, #0
 8011a92:	d86c      	bhi.n	8011b6e <uxr_write_framed_msg+0x20a>
 8011a94:	1c51      	adds	r1, r2, #1
 8011a96:	b2c9      	uxtb	r1, r1
 8011a98:	2929      	cmp	r1, #41	@ 0x29
 8011a9a:	d8dd      	bhi.n	8011a58 <uxr_write_framed_msg+0xf4>
 8011a9c:	18a0      	adds	r0, r4, r2
 8011a9e:	3202      	adds	r2, #2
 8011aa0:	f089 0920 	eor.w	r9, r9, #32
 8011aa4:	b2d2      	uxtb	r2, r2
 8011aa6:	4659      	mov	r1, fp
 8011aa8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011aac:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8011ab0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011ab4:	f04f 0b01 	mov.w	fp, #1
 8011ab8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011abc:	2900      	cmp	r1, #0
 8011abe:	d162      	bne.n	8011b86 <uxr_write_framed_msg+0x222>
 8011ac0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011ac4:	e7bf      	b.n	8011a46 <uxr_write_framed_msg+0xe2>
 8011ac6:	2204      	movs	r2, #4
 8011ac8:	2503      	movs	r5, #3
 8011aca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011acc:	4423      	add	r3, r4
 8011ace:	b2c9      	uxtb	r1, r1
 8011ad0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011ad4:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8011ad8:	4425      	add	r5, r4
 8011ada:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8011ade:	f080 0020 	eor.w	r0, r0, #32
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8011ae8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011aec:	f63f af66 	bhi.w	80119bc <uxr_write_framed_msg+0x58>
 8011af0:	18a3      	adds	r3, r4, r2
 8011af2:	f081 0120 	eor.w	r1, r1, #32
 8011af6:	3202      	adds	r2, #2
 8011af8:	207d      	movs	r0, #125	@ 0x7d
 8011afa:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8011afe:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 8011b02:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b06:	e75f      	b.n	80119c8 <uxr_write_framed_msg+0x64>
 8011b08:	2500      	movs	r5, #0
 8011b0a:	e001      	b.n	8011b10 <uxr_write_framed_msg+0x1ac>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	d0b3      	beq.n	8011a78 <uxr_write_framed_msg+0x114>
 8011b10:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011b14:	1b52      	subs	r2, r2, r5
 8011b16:	4421      	add	r1, r4
 8011b18:	4643      	mov	r3, r8
 8011b1a:	4638      	mov	r0, r7
 8011b1c:	47b0      	blx	r6
 8011b1e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011b22:	4405      	add	r5, r0
 8011b24:	4295      	cmp	r5, r2
 8011b26:	d3f1      	bcc.n	8011b0c <uxr_write_framed_msg+0x1a8>
 8011b28:	d1a6      	bne.n	8011a78 <uxr_write_framed_msg+0x114>
 8011b2a:	f04f 0300 	mov.w	r3, #0
 8011b2e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b34:	454b      	cmp	r3, r9
 8011b36:	d971      	bls.n	8011c1c <uxr_write_framed_msg+0x2b8>
 8011b38:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011b3c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011b40:	2901      	cmp	r1, #1
 8011b42:	f04f 0200 	mov.w	r2, #0
 8011b46:	f63f af5d 	bhi.w	8011a04 <uxr_write_framed_msg+0xa0>
 8011b4a:	1c51      	adds	r1, r2, #1
 8011b4c:	b2c9      	uxtb	r1, r1
 8011b4e:	2929      	cmp	r1, #41	@ 0x29
 8011b50:	d8da      	bhi.n	8011b08 <uxr_write_framed_msg+0x1a4>
 8011b52:	18a0      	adds	r0, r4, r2
 8011b54:	3202      	adds	r2, #2
 8011b56:	b2d2      	uxtb	r2, r2
 8011b58:	f083 0120 	eor.w	r1, r3, #32
 8011b5c:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011b60:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011b64:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8011b68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b6c:	e753      	b.n	8011a16 <uxr_write_framed_msg+0xb2>
 8011b6e:	18a0      	adds	r0, r4, r2
 8011b70:	3201      	adds	r2, #1
 8011b72:	b2d2      	uxtb	r2, r2
 8011b74:	4659      	mov	r1, fp
 8011b76:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 8011b7a:	f04f 0b01 	mov.w	fp, #1
 8011b7e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011b82:	2900      	cmp	r1, #0
 8011b84:	d09c      	beq.n	8011ac0 <uxr_write_framed_msg+0x15c>
 8011b86:	2500      	movs	r5, #0
 8011b88:	e002      	b.n	8011b90 <uxr_write_framed_msg+0x22c>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	f43f af74 	beq.w	8011a78 <uxr_write_framed_msg+0x114>
 8011b90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011b94:	1b52      	subs	r2, r2, r5
 8011b96:	4421      	add	r1, r4
 8011b98:	4643      	mov	r3, r8
 8011b9a:	4638      	mov	r0, r7
 8011b9c:	47b0      	blx	r6
 8011b9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011ba2:	4405      	add	r5, r0
 8011ba4:	4295      	cmp	r5, r2
 8011ba6:	d3f0      	bcc.n	8011b8a <uxr_write_framed_msg+0x226>
 8011ba8:	f47f af66 	bne.w	8011a78 <uxr_write_framed_msg+0x114>
 8011bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bae:	2300      	movs	r3, #0
 8011bb0:	b290      	uxth	r0, r2
 8011bb2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011bb6:	b005      	add	sp, #20
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8011bc0:	f085 0520 	eor.w	r5, r5, #32
 8011bc4:	2303      	movs	r3, #3
 8011bc6:	217d      	movs	r1, #125	@ 0x7d
 8011bc8:	2a01      	cmp	r2, #1
 8011bca:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8011bce:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011bd2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011bd6:	d814      	bhi.n	8011c02 <uxr_write_framed_msg+0x29e>
 8011bd8:	2205      	movs	r2, #5
 8011bda:	2504      	movs	r5, #4
 8011bdc:	e775      	b.n	8011aca <uxr_write_framed_msg+0x166>
 8011bde:	f083 0320 	eor.w	r3, r3, #32
 8011be2:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 8011be6:	3202      	adds	r2, #2
 8011be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bea:	b2d2      	uxtb	r2, r2
 8011bec:	207d      	movs	r0, #125	@ 0x7d
 8011bee:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011bf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f47f aefa 	bne.w	80119f0 <uxr_write_framed_msg+0x8c>
 8011bfc:	9301      	str	r3, [sp, #4]
 8011bfe:	4699      	mov	r9, r3
 8011c00:	e71b      	b.n	8011a3a <uxr_write_framed_msg+0xd6>
 8011c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c04:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011c08:	b2d9      	uxtb	r1, r3
 8011c0a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8011c0e:	2204      	movs	r2, #4
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c16:	f63f aed1 	bhi.w	80119bc <uxr_write_framed_msg+0x58>
 8011c1a:	e769      	b.n	8011af0 <uxr_write_framed_msg+0x18c>
 8011c1c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011c20:	fa5f f98a 	uxtb.w	r9, sl
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	e707      	b.n	8011a3a <uxr_write_framed_msg+0xd6>
 8011c2a:	bf00      	nop
 8011c2c:	08016b1c 	.word	0x08016b1c

08011c30 <uxr_framing_read_transport>:
 8011c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c34:	4604      	mov	r4, r0
 8011c36:	b083      	sub	sp, #12
 8011c38:	461f      	mov	r7, r3
 8011c3a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011c3e:	4689      	mov	r9, r1
 8011c40:	4692      	mov	sl, r2
 8011c42:	f000 fc87 	bl	8012554 <uxr_millis>
 8011c46:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011c4a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011c4e:	42b3      	cmp	r3, r6
 8011c50:	4680      	mov	r8, r0
 8011c52:	d05f      	beq.n	8011d14 <uxr_framing_read_transport+0xe4>
 8011c54:	d81b      	bhi.n	8011c8e <uxr_framing_read_transport+0x5e>
 8011c56:	1e75      	subs	r5, r6, #1
 8011c58:	1aed      	subs	r5, r5, r3
 8011c5a:	b2ed      	uxtb	r5, r5
 8011c5c:	2600      	movs	r6, #0
 8011c5e:	455d      	cmp	r5, fp
 8011c60:	d81e      	bhi.n	8011ca0 <uxr_framing_read_transport+0x70>
 8011c62:	19ab      	adds	r3, r5, r6
 8011c64:	455b      	cmp	r3, fp
 8011c66:	bf84      	itt	hi
 8011c68:	ebab 0605 	subhi.w	r6, fp, r5
 8011c6c:	b2f6      	uxtbhi	r6, r6
 8011c6e:	b9e5      	cbnz	r5, 8011caa <uxr_framing_read_transport+0x7a>
 8011c70:	f04f 0b00 	mov.w	fp, #0
 8011c74:	f000 fc6e 	bl	8012554 <uxr_millis>
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	eba0 0008 	sub.w	r0, r0, r8
 8011c7e:	1a1b      	subs	r3, r3, r0
 8011c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c84:	4658      	mov	r0, fp
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	b003      	add	sp, #12
 8011c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c8e:	2e00      	cmp	r6, #0
 8011c90:	d048      	beq.n	8011d24 <uxr_framing_read_transport+0xf4>
 8011c92:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011c96:	b2ed      	uxtb	r5, r5
 8011c98:	3e01      	subs	r6, #1
 8011c9a:	455d      	cmp	r5, fp
 8011c9c:	b2f6      	uxtb	r6, r6
 8011c9e:	d9e0      	bls.n	8011c62 <uxr_framing_read_transport+0x32>
 8011ca0:	fa5f f58b 	uxtb.w	r5, fp
 8011ca4:	2600      	movs	r6, #0
 8011ca6:	2d00      	cmp	r5, #0
 8011ca8:	d0e2      	beq.n	8011c70 <uxr_framing_read_transport+0x40>
 8011caa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011cae:	3102      	adds	r1, #2
 8011cb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	4421      	add	r1, r4
 8011cb8:	462a      	mov	r2, r5
 8011cba:	4650      	mov	r0, sl
 8011cbc:	47c8      	blx	r9
 8011cbe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8011d30 <uxr_framing_read_transport+0x100>)
 8011cc4:	4403      	add	r3, r0
 8011cc6:	0859      	lsrs	r1, r3, #1
 8011cc8:	fba2 2101 	umull	r2, r1, r2, r1
 8011ccc:	0889      	lsrs	r1, r1, #2
 8011cce:	222a      	movs	r2, #42	@ 0x2a
 8011cd0:	fb02 3111 	mls	r1, r2, r1, r3
 8011cd4:	4683      	mov	fp, r0
 8011cd6:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d0c8      	beq.n	8011c70 <uxr_framing_read_transport+0x40>
 8011cde:	42a8      	cmp	r0, r5
 8011ce0:	d1c8      	bne.n	8011c74 <uxr_framing_read_transport+0x44>
 8011ce2:	b31e      	cbz	r6, 8011d2c <uxr_framing_read_transport+0xfc>
 8011ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	3102      	adds	r1, #2
 8011cea:	4421      	add	r1, r4
 8011cec:	4632      	mov	r2, r6
 8011cee:	2300      	movs	r3, #0
 8011cf0:	4650      	mov	r0, sl
 8011cf2:	47c8      	blx	r9
 8011cf4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011cf8:	490d      	ldr	r1, [pc, #52]	@ (8011d30 <uxr_framing_read_transport+0x100>)
 8011cfa:	181a      	adds	r2, r3, r0
 8011cfc:	0853      	lsrs	r3, r2, #1
 8011cfe:	fba1 1303 	umull	r1, r3, r1, r3
 8011d02:	089b      	lsrs	r3, r3, #2
 8011d04:	212a      	movs	r1, #42	@ 0x2a
 8011d06:	fb01 2313 	mls	r3, r1, r3, r2
 8011d0a:	eb00 0b05 	add.w	fp, r0, r5
 8011d0e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011d12:	e7af      	b.n	8011c74 <uxr_framing_read_transport+0x44>
 8011d14:	2600      	movs	r6, #0
 8011d16:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011d1a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011d1c:	d9c0      	bls.n	8011ca0 <uxr_framing_read_transport+0x70>
 8011d1e:	2102      	movs	r1, #2
 8011d20:	2529      	movs	r5, #41	@ 0x29
 8011d22:	e7c5      	b.n	8011cb0 <uxr_framing_read_transport+0x80>
 8011d24:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011d28:	b2ed      	uxtb	r5, r5
 8011d2a:	e798      	b.n	8011c5e <uxr_framing_read_transport+0x2e>
 8011d2c:	46ab      	mov	fp, r5
 8011d2e:	e7a1      	b.n	8011c74 <uxr_framing_read_transport+0x44>
 8011d30:	30c30c31 	.word	0x30c30c31

08011d34 <uxr_read_framed_msg>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8011d3c:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8011d40:	42ae      	cmp	r6, r5
 8011d42:	b083      	sub	sp, #12
 8011d44:	4604      	mov	r4, r0
 8011d46:	461f      	mov	r7, r3
 8011d48:	4689      	mov	r9, r1
 8011d4a:	4692      	mov	sl, r2
 8011d4c:	f000 817d 	beq.w	801204a <uxr_read_framed_msg+0x316>
 8011d50:	7823      	ldrb	r3, [r4, #0]
 8011d52:	4ecc      	ldr	r6, [pc, #816]	@ (8012084 <uxr_read_framed_msg+0x350>)
 8011d54:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8012088 <uxr_read_framed_msg+0x354>
 8011d58:	2b07      	cmp	r3, #7
 8011d5a:	d8fd      	bhi.n	8011d58 <uxr_read_framed_msg+0x24>
 8011d5c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d60:	00f40113 	.word	0x00f40113
 8011d64:	00b700d4 	.word	0x00b700d4
 8011d68:	004d008e 	.word	0x004d008e
 8011d6c:	00080030 	.word	0x00080030
 8011d70:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011d74:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011d78:	4298      	cmp	r0, r3
 8011d7a:	f000 8141 	beq.w	8012000 <uxr_read_framed_msg+0x2cc>
 8011d7e:	18e2      	adds	r2, r4, r3
 8011d80:	7891      	ldrb	r1, [r2, #2]
 8011d82:	297d      	cmp	r1, #125	@ 0x7d
 8011d84:	f000 81a2 	beq.w	80120cc <uxr_read_framed_msg+0x398>
 8011d88:	3301      	adds	r3, #1
 8011d8a:	085a      	lsrs	r2, r3, #1
 8011d8c:	fba6 0202 	umull	r0, r2, r6, r2
 8011d90:	0892      	lsrs	r2, r2, #2
 8011d92:	202a      	movs	r0, #42	@ 0x2a
 8011d94:	fb00 3312 	mls	r3, r0, r2, r3
 8011d98:	297e      	cmp	r1, #126	@ 0x7e
 8011d9a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011d9e:	f000 8251 	beq.w	8012244 <uxr_read_framed_msg+0x510>
 8011da2:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011da4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011da6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	2100      	movs	r1, #0
 8011dae:	429a      	cmp	r2, r3
 8011db0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011db2:	7021      	strb	r1, [r4, #0]
 8011db4:	f000 8182 	beq.w	80120bc <uxr_read_framed_msg+0x388>
 8011db8:	2000      	movs	r0, #0
 8011dba:	b003      	add	sp, #12
 8011dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011dc4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011dc8:	4298      	cmp	r0, r3
 8011dca:	f000 8128 	beq.w	801201e <uxr_read_framed_msg+0x2ea>
 8011dce:	18e2      	adds	r2, r4, r3
 8011dd0:	7891      	ldrb	r1, [r2, #2]
 8011dd2:	297d      	cmp	r1, #125	@ 0x7d
 8011dd4:	f000 8196 	beq.w	8012104 <uxr_read_framed_msg+0x3d0>
 8011dd8:	3301      	adds	r3, #1
 8011dda:	085a      	lsrs	r2, r3, #1
 8011ddc:	fba6 0202 	umull	r0, r2, r6, r2
 8011de0:	0892      	lsrs	r2, r2, #2
 8011de2:	202a      	movs	r0, #42	@ 0x2a
 8011de4:	fb00 3312 	mls	r3, r0, r2, r3
 8011de8:	297e      	cmp	r1, #126	@ 0x7e
 8011dea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011dee:	f000 8219 	beq.w	8012224 <uxr_read_framed_msg+0x4f0>
 8011df2:	2307      	movs	r3, #7
 8011df4:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8011df6:	7023      	strb	r3, [r4, #0]
 8011df8:	e7ae      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011dfa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011dfc:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8011dfe:	429d      	cmp	r5, r3
 8011e00:	d937      	bls.n	8011e72 <uxr_read_framed_msg+0x13e>
 8011e02:	ee07 9a90 	vmov	s15, r9
 8011e06:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011e0a:	e01e      	b.n	8011e4a <uxr_read_framed_msg+0x116>
 8011e0c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8011e10:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8011e14:	f000 80d2 	beq.w	8011fbc <uxr_read_framed_msg+0x288>
 8011e18:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011e1c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011e20:	f000 8214 	beq.w	801224c <uxr_read_framed_msg+0x518>
 8011e24:	f807 e003 	strb.w	lr, [r7, r3]
 8011e28:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8011e2a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011e2c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 8011e2e:	ea80 010e 	eor.w	r1, r0, lr
 8011e32:	b2c9      	uxtb	r1, r1
 8011e34:	3301      	adds	r3, #1
 8011e36:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8011e40:	42ab      	cmp	r3, r5
 8011e42:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011e44:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011e46:	f080 8121 	bcs.w	801208c <uxr_read_framed_msg+0x358>
 8011e4a:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8011e4e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011e52:	f101 0b01 	add.w	fp, r1, #1
 8011e56:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8011e5a:	fba6 9202 	umull	r9, r2, r6, r2
 8011e5e:	0892      	lsrs	r2, r2, #2
 8011e60:	4288      	cmp	r0, r1
 8011e62:	eb04 0e01 	add.w	lr, r4, r1
 8011e66:	fb0c b212 	mls	r2, ip, r2, fp
 8011e6a:	d1cf      	bne.n	8011e0c <uxr_read_framed_msg+0xd8>
 8011e6c:	ee17 9a90 	vmov	r9, s15
 8011e70:	429d      	cmp	r5, r3
 8011e72:	f040 8112 	bne.w	801209a <uxr_read_framed_msg+0x366>
 8011e76:	2306      	movs	r3, #6
 8011e78:	7023      	strb	r3, [r4, #0]
 8011e7a:	e76d      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011e7c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011e80:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011e84:	4298      	cmp	r0, r3
 8011e86:	f000 80bb 	beq.w	8012000 <uxr_read_framed_msg+0x2cc>
 8011e8a:	18e2      	adds	r2, r4, r3
 8011e8c:	7891      	ldrb	r1, [r2, #2]
 8011e8e:	297d      	cmp	r1, #125	@ 0x7d
 8011e90:	f000 8153 	beq.w	801213a <uxr_read_framed_msg+0x406>
 8011e94:	3301      	adds	r3, #1
 8011e96:	085a      	lsrs	r2, r3, #1
 8011e98:	fba6 0202 	umull	r0, r2, r6, r2
 8011e9c:	0892      	lsrs	r2, r2, #2
 8011e9e:	202a      	movs	r0, #42	@ 0x2a
 8011ea0:	fb00 3212 	mls	r2, r0, r2, r3
 8011ea4:	297e      	cmp	r1, #126	@ 0x7e
 8011ea6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011eaa:	f000 81cb 	beq.w	8012244 <uxr_read_framed_msg+0x510>
 8011eae:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011eb0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011eb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	2000      	movs	r0, #0
 8011eba:	428b      	cmp	r3, r1
 8011ebc:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011ebe:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011ec0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011ec2:	f240 80db 	bls.w	801207c <uxr_read_framed_msg+0x348>
 8011ec6:	7020      	strb	r0, [r4, #0]
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ece:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011ed2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011ed6:	4298      	cmp	r0, r3
 8011ed8:	f000 80a1 	beq.w	801201e <uxr_read_framed_msg+0x2ea>
 8011edc:	18e2      	adds	r2, r4, r3
 8011ede:	7891      	ldrb	r1, [r2, #2]
 8011ee0:	297d      	cmp	r1, #125	@ 0x7d
 8011ee2:	f000 8167 	beq.w	80121b4 <uxr_read_framed_msg+0x480>
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	085a      	lsrs	r2, r3, #1
 8011eea:	fba6 0202 	umull	r0, r2, r6, r2
 8011eee:	0892      	lsrs	r2, r2, #2
 8011ef0:	202a      	movs	r0, #42	@ 0x2a
 8011ef2:	fb00 3312 	mls	r3, r0, r2, r3
 8011ef6:	297e      	cmp	r1, #126	@ 0x7e
 8011ef8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011efc:	f000 8192 	beq.w	8012224 <uxr_read_framed_msg+0x4f0>
 8011f00:	2304      	movs	r3, #4
 8011f02:	8621      	strh	r1, [r4, #48]	@ 0x30
 8011f04:	7023      	strb	r3, [r4, #0]
 8011f06:	e727      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011f08:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011f0c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011f10:	4290      	cmp	r0, r2
 8011f12:	f000 80b1 	beq.w	8012078 <uxr_read_framed_msg+0x344>
 8011f16:	18a3      	adds	r3, r4, r2
 8011f18:	7899      	ldrb	r1, [r3, #2]
 8011f1a:	297d      	cmp	r1, #125	@ 0x7d
 8011f1c:	f000 8166 	beq.w	80121ec <uxr_read_framed_msg+0x4b8>
 8011f20:	3201      	adds	r2, #1
 8011f22:	0850      	lsrs	r0, r2, #1
 8011f24:	fba6 3000 	umull	r3, r0, r6, r0
 8011f28:	0880      	lsrs	r0, r0, #2
 8011f2a:	232a      	movs	r3, #42	@ 0x2a
 8011f2c:	fb03 2210 	mls	r2, r3, r0, r2
 8011f30:	297e      	cmp	r1, #126	@ 0x7e
 8011f32:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011f36:	f000 8187 	beq.w	8012248 <uxr_read_framed_msg+0x514>
 8011f3a:	7863      	ldrb	r3, [r4, #1]
 8011f3c:	428b      	cmp	r3, r1
 8011f3e:	bf0c      	ite	eq
 8011f40:	2303      	moveq	r3, #3
 8011f42:	2300      	movne	r3, #0
 8011f44:	7023      	strb	r3, [r4, #0]
 8011f46:	e707      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011f48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f4c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011f50:	2200      	movs	r2, #0
 8011f52:	4299      	cmp	r1, r3
 8011f54:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011f58:	d063      	beq.n	8012022 <uxr_read_framed_msg+0x2ee>
 8011f5a:	18e2      	adds	r2, r4, r3
 8011f5c:	7892      	ldrb	r2, [r2, #2]
 8011f5e:	2a7d      	cmp	r2, #125	@ 0x7d
 8011f60:	f000 8107 	beq.w	8012172 <uxr_read_framed_msg+0x43e>
 8011f64:	1c59      	adds	r1, r3, #1
 8011f66:	084b      	lsrs	r3, r1, #1
 8011f68:	fba6 0303 	umull	r0, r3, r6, r3
 8011f6c:	089b      	lsrs	r3, r3, #2
 8011f6e:	202a      	movs	r0, #42	@ 0x2a
 8011f70:	fb00 1313 	mls	r3, r0, r3, r1
 8011f74:	2a7e      	cmp	r2, #126	@ 0x7e
 8011f76:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011f7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f7e:	d050      	beq.n	8012022 <uxr_read_framed_msg+0x2ee>
 8011f80:	2302      	movs	r3, #2
 8011f82:	7023      	strb	r3, [r4, #0]
 8011f84:	e6e8      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011f86:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 8011f8a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011f8e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011f92:	1c51      	adds	r1, r2, #1
 8011f94:	084b      	lsrs	r3, r1, #1
 8011f96:	fba6 5303 	umull	r5, r3, r6, r3
 8011f9a:	089b      	lsrs	r3, r3, #2
 8011f9c:	fb0c 1313 	mls	r3, ip, r3, r1
 8011fa0:	4596      	cmp	lr, r2
 8011fa2:	eb04 0002 	add.w	r0, r4, r2
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	f43f af06 	beq.w	8011db8 <uxr_read_framed_msg+0x84>
 8011fac:	7883      	ldrb	r3, [r0, #2]
 8011fae:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011fb2:	2b7e      	cmp	r3, #126	@ 0x7e
 8011fb4:	d1ed      	bne.n	8011f92 <uxr_read_framed_msg+0x25e>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	7023      	strb	r3, [r4, #0]
 8011fba:	e6cd      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8011fbc:	f101 0b01 	add.w	fp, r1, #1
 8011fc0:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8011fc4:	fba6 e202 	umull	lr, r2, r6, r2
 8011fc8:	3102      	adds	r1, #2
 8011fca:	0892      	lsrs	r2, r2, #2
 8011fcc:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8011fd0:	fb0c b212 	mls	r2, ip, r2, fp
 8011fd4:	fba6 9e0e 	umull	r9, lr, r6, lr
 8011fd8:	eb04 0b02 	add.w	fp, r4, r2
 8011fdc:	b2d2      	uxtb	r2, r2
 8011fde:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8011fe2:	4290      	cmp	r0, r2
 8011fe4:	fb0c 111e 	mls	r1, ip, lr, r1
 8011fe8:	f43f af40 	beq.w	8011e6c <uxr_read_framed_msg+0x138>
 8011fec:	f89b e002 	ldrb.w	lr, [fp, #2]
 8011ff0:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8011ff4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011ff8:	d036      	beq.n	8012068 <uxr_read_framed_msg+0x334>
 8011ffa:	f08e 0e20 	eor.w	lr, lr, #32
 8011ffe:	e711      	b.n	8011e24 <uxr_read_framed_msg+0xf0>
 8012000:	2301      	movs	r3, #1
 8012002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012004:	4649      	mov	r1, r9
 8012006:	e9cd 2300 	strd	r2, r3, [sp]
 801200a:	4620      	mov	r0, r4
 801200c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801200e:	4652      	mov	r2, sl
 8012010:	f7ff fe0e 	bl	8011c30 <uxr_framing_read_transport>
 8012014:	2800      	cmp	r0, #0
 8012016:	f43f aecf 	beq.w	8011db8 <uxr_read_framed_msg+0x84>
 801201a:	7823      	ldrb	r3, [r4, #0]
 801201c:	e69c      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 801201e:	2302      	movs	r3, #2
 8012020:	e7ef      	b.n	8012002 <uxr_read_framed_msg+0x2ce>
 8012022:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012024:	2304      	movs	r3, #4
 8012026:	e9cd 2300 	strd	r2, r3, [sp]
 801202a:	4649      	mov	r1, r9
 801202c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801202e:	4652      	mov	r2, sl
 8012030:	4620      	mov	r0, r4
 8012032:	f7ff fdfd 	bl	8011c30 <uxr_framing_read_transport>
 8012036:	2800      	cmp	r0, #0
 8012038:	d1ef      	bne.n	801201a <uxr_read_framed_msg+0x2e6>
 801203a:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 801203e:	387e      	subs	r0, #126	@ 0x7e
 8012040:	bf18      	it	ne
 8012042:	2001      	movne	r0, #1
 8012044:	2800      	cmp	r0, #0
 8012046:	d0e8      	beq.n	801201a <uxr_read_framed_msg+0x2e6>
 8012048:	e6b6      	b.n	8011db8 <uxr_read_framed_msg+0x84>
 801204a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801204c:	2305      	movs	r3, #5
 801204e:	e9cd 5300 	strd	r5, r3, [sp]
 8012052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012054:	f7ff fdec 	bl	8011c30 <uxr_framing_read_transport>
 8012058:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801205c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012060:	429a      	cmp	r2, r3
 8012062:	f43f aea9 	beq.w	8011db8 <uxr_read_framed_msg+0x84>
 8012066:	e673      	b.n	8011d50 <uxr_read_framed_msg+0x1c>
 8012068:	429d      	cmp	r5, r3
 801206a:	ee17 9a90 	vmov	r9, s15
 801206e:	f43f af02 	beq.w	8011e76 <uxr_read_framed_msg+0x142>
 8012072:	2301      	movs	r3, #1
 8012074:	7023      	strb	r3, [r4, #0]
 8012076:	e66f      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8012078:	2303      	movs	r3, #3
 801207a:	e7c2      	b.n	8012002 <uxr_read_framed_msg+0x2ce>
 801207c:	2305      	movs	r3, #5
 801207e:	7023      	strb	r3, [r4, #0]
 8012080:	e66a      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8012082:	bf00      	nop
 8012084:	30c30c31 	.word	0x30c30c31
 8012088:	08016b1c 	.word	0x08016b1c
 801208c:	ee17 9a90 	vmov	r9, s15
 8012090:	f43f aef1 	beq.w	8011e76 <uxr_read_framed_msg+0x142>
 8012094:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8012098:	d08d      	beq.n	8011fb6 <uxr_read_framed_msg+0x282>
 801209a:	1aeb      	subs	r3, r5, r3
 801209c:	3302      	adds	r3, #2
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	4652      	mov	r2, sl
 80120a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120a8:	4649      	mov	r1, r9
 80120aa:	4620      	mov	r0, r4
 80120ac:	f7ff fdc0 	bl	8011c30 <uxr_framing_read_transport>
 80120b0:	fab0 f080 	clz	r0, r0
 80120b4:	0940      	lsrs	r0, r0, #5
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d0af      	beq.n	801201a <uxr_read_framed_msg+0x2e6>
 80120ba:	e67d      	b.n	8011db8 <uxr_read_framed_msg+0x84>
 80120bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80120be:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80120c2:	7013      	strb	r3, [r2, #0]
 80120c4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80120c6:	b003      	add	sp, #12
 80120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120cc:	1c59      	adds	r1, r3, #1
 80120ce:	084a      	lsrs	r2, r1, #1
 80120d0:	fba6 5202 	umull	r5, r2, r6, r2
 80120d4:	0892      	lsrs	r2, r2, #2
 80120d6:	252a      	movs	r5, #42	@ 0x2a
 80120d8:	fb05 1212 	mls	r2, r5, r2, r1
 80120dc:	b2d1      	uxtb	r1, r2
 80120de:	4288      	cmp	r0, r1
 80120e0:	d08e      	beq.n	8012000 <uxr_read_framed_msg+0x2cc>
 80120e2:	3302      	adds	r3, #2
 80120e4:	4422      	add	r2, r4
 80120e6:	0858      	lsrs	r0, r3, #1
 80120e8:	fba6 1000 	umull	r1, r0, r6, r0
 80120ec:	7891      	ldrb	r1, [r2, #2]
 80120ee:	0882      	lsrs	r2, r0, #2
 80120f0:	fb05 3312 	mls	r3, r5, r2, r3
 80120f4:	297e      	cmp	r1, #126	@ 0x7e
 80120f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80120fa:	f000 80a3 	beq.w	8012244 <uxr_read_framed_msg+0x510>
 80120fe:	f081 0120 	eor.w	r1, r1, #32
 8012102:	e64e      	b.n	8011da2 <uxr_read_framed_msg+0x6e>
 8012104:	1c59      	adds	r1, r3, #1
 8012106:	084a      	lsrs	r2, r1, #1
 8012108:	fba6 5202 	umull	r5, r2, r6, r2
 801210c:	0892      	lsrs	r2, r2, #2
 801210e:	252a      	movs	r5, #42	@ 0x2a
 8012110:	fb05 1212 	mls	r2, r5, r2, r1
 8012114:	b2d1      	uxtb	r1, r2
 8012116:	4288      	cmp	r0, r1
 8012118:	d081      	beq.n	801201e <uxr_read_framed_msg+0x2ea>
 801211a:	3302      	adds	r3, #2
 801211c:	4422      	add	r2, r4
 801211e:	0858      	lsrs	r0, r3, #1
 8012120:	fba6 1000 	umull	r1, r0, r6, r0
 8012124:	7891      	ldrb	r1, [r2, #2]
 8012126:	0882      	lsrs	r2, r0, #2
 8012128:	fb05 3312 	mls	r3, r5, r2, r3
 801212c:	297e      	cmp	r1, #126	@ 0x7e
 801212e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012132:	d077      	beq.n	8012224 <uxr_read_framed_msg+0x4f0>
 8012134:	f081 0120 	eor.w	r1, r1, #32
 8012138:	e65b      	b.n	8011df2 <uxr_read_framed_msg+0xbe>
 801213a:	1c59      	adds	r1, r3, #1
 801213c:	084a      	lsrs	r2, r1, #1
 801213e:	fba6 5202 	umull	r5, r2, r6, r2
 8012142:	0892      	lsrs	r2, r2, #2
 8012144:	252a      	movs	r5, #42	@ 0x2a
 8012146:	fb05 1212 	mls	r2, r5, r2, r1
 801214a:	b2d1      	uxtb	r1, r2
 801214c:	4288      	cmp	r0, r1
 801214e:	f43f af57 	beq.w	8012000 <uxr_read_framed_msg+0x2cc>
 8012152:	3302      	adds	r3, #2
 8012154:	4422      	add	r2, r4
 8012156:	0858      	lsrs	r0, r3, #1
 8012158:	fba6 1000 	umull	r1, r0, r6, r0
 801215c:	7891      	ldrb	r1, [r2, #2]
 801215e:	0882      	lsrs	r2, r0, #2
 8012160:	fb05 3312 	mls	r3, r5, r2, r3
 8012164:	297e      	cmp	r1, #126	@ 0x7e
 8012166:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801216a:	d06b      	beq.n	8012244 <uxr_read_framed_msg+0x510>
 801216c:	f081 0120 	eor.w	r1, r1, #32
 8012170:	e69d      	b.n	8011eae <uxr_read_framed_msg+0x17a>
 8012172:	1c5d      	adds	r5, r3, #1
 8012174:	086a      	lsrs	r2, r5, #1
 8012176:	fba6 0202 	umull	r0, r2, r6, r2
 801217a:	0892      	lsrs	r2, r2, #2
 801217c:	202a      	movs	r0, #42	@ 0x2a
 801217e:	fb00 5212 	mls	r2, r0, r2, r5
 8012182:	b2d5      	uxtb	r5, r2
 8012184:	42a9      	cmp	r1, r5
 8012186:	f43f af4c 	beq.w	8012022 <uxr_read_framed_msg+0x2ee>
 801218a:	3302      	adds	r3, #2
 801218c:	4422      	add	r2, r4
 801218e:	0859      	lsrs	r1, r3, #1
 8012190:	fba6 5101 	umull	r5, r1, r6, r1
 8012194:	7895      	ldrb	r5, [r2, #2]
 8012196:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 801219a:	088a      	lsrs	r2, r1, #2
 801219c:	fb00 3312 	mls	r3, r0, r2, r3
 80121a0:	2d7e      	cmp	r5, #126	@ 0x7e
 80121a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121a6:	f43f af3c 	beq.w	8012022 <uxr_read_framed_msg+0x2ee>
 80121aa:	f085 0520 	eor.w	r5, r5, #32
 80121ae:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 80121b2:	e6e5      	b.n	8011f80 <uxr_read_framed_msg+0x24c>
 80121b4:	1c59      	adds	r1, r3, #1
 80121b6:	084a      	lsrs	r2, r1, #1
 80121b8:	fba6 5202 	umull	r5, r2, r6, r2
 80121bc:	0892      	lsrs	r2, r2, #2
 80121be:	252a      	movs	r5, #42	@ 0x2a
 80121c0:	fb05 1212 	mls	r2, r5, r2, r1
 80121c4:	b2d1      	uxtb	r1, r2
 80121c6:	4288      	cmp	r0, r1
 80121c8:	f43f af29 	beq.w	801201e <uxr_read_framed_msg+0x2ea>
 80121cc:	3302      	adds	r3, #2
 80121ce:	4422      	add	r2, r4
 80121d0:	0858      	lsrs	r0, r3, #1
 80121d2:	fba6 1000 	umull	r1, r0, r6, r0
 80121d6:	7891      	ldrb	r1, [r2, #2]
 80121d8:	0882      	lsrs	r2, r0, #2
 80121da:	fb05 3312 	mls	r3, r5, r2, r3
 80121de:	297e      	cmp	r1, #126	@ 0x7e
 80121e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121e4:	d01e      	beq.n	8012224 <uxr_read_framed_msg+0x4f0>
 80121e6:	f081 0120 	eor.w	r1, r1, #32
 80121ea:	e689      	b.n	8011f00 <uxr_read_framed_msg+0x1cc>
 80121ec:	1c51      	adds	r1, r2, #1
 80121ee:	084b      	lsrs	r3, r1, #1
 80121f0:	fba6 5303 	umull	r5, r3, r6, r3
 80121f4:	089b      	lsrs	r3, r3, #2
 80121f6:	252a      	movs	r5, #42	@ 0x2a
 80121f8:	fb05 1313 	mls	r3, r5, r3, r1
 80121fc:	b2d9      	uxtb	r1, r3
 80121fe:	4288      	cmp	r0, r1
 8012200:	f43f af3a 	beq.w	8012078 <uxr_read_framed_msg+0x344>
 8012204:	3202      	adds	r2, #2
 8012206:	4423      	add	r3, r4
 8012208:	0850      	lsrs	r0, r2, #1
 801220a:	789b      	ldrb	r3, [r3, #2]
 801220c:	fba6 1000 	umull	r1, r0, r6, r0
 8012210:	0880      	lsrs	r0, r0, #2
 8012212:	fb05 2210 	mls	r2, r5, r0, r2
 8012216:	2b7e      	cmp	r3, #126	@ 0x7e
 8012218:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801221c:	d014      	beq.n	8012248 <uxr_read_framed_msg+0x514>
 801221e:	f083 0120 	eor.w	r1, r3, #32
 8012222:	e68a      	b.n	8011f3a <uxr_read_framed_msg+0x206>
 8012224:	2302      	movs	r3, #2
 8012226:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012228:	4649      	mov	r1, r9
 801222a:	e9cd 2300 	strd	r2, r3, [sp]
 801222e:	4620      	mov	r0, r4
 8012230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012232:	4652      	mov	r2, sl
 8012234:	f7ff fcfc 	bl	8011c30 <uxr_framing_read_transport>
 8012238:	2800      	cmp	r0, #0
 801223a:	f47f aeee 	bne.w	801201a <uxr_read_framed_msg+0x2e6>
 801223e:	2301      	movs	r3, #1
 8012240:	7023      	strb	r3, [r4, #0]
 8012242:	e589      	b.n	8011d58 <uxr_read_framed_msg+0x24>
 8012244:	2301      	movs	r3, #1
 8012246:	e7ee      	b.n	8012226 <uxr_read_framed_msg+0x4f2>
 8012248:	2303      	movs	r3, #3
 801224a:	e7ec      	b.n	8012226 <uxr_read_framed_msg+0x4f2>
 801224c:	ee17 9a90 	vmov	r9, s15
 8012250:	e6b1      	b.n	8011fb6 <uxr_read_framed_msg+0x282>
 8012252:	bf00      	nop

08012254 <uxr_stream_id>:
 8012254:	b410      	push	{r4}
 8012256:	2901      	cmp	r1, #1
 8012258:	b083      	sub	sp, #12
 801225a:	d01f      	beq.n	801229c <uxr_stream_id+0x48>
 801225c:	2902      	cmp	r1, #2
 801225e:	f04f 0400 	mov.w	r4, #0
 8012262:	d01e      	beq.n	80122a2 <uxr_stream_id+0x4e>
 8012264:	2300      	movs	r3, #0
 8012266:	f364 0307 	bfi	r3, r4, #0, #8
 801226a:	f360 230f 	bfi	r3, r0, #8, #8
 801226e:	f361 4317 	bfi	r3, r1, #16, #8
 8012272:	f362 631f 	bfi	r3, r2, #24, #8
 8012276:	b2da      	uxtb	r2, r3
 8012278:	2000      	movs	r0, #0
 801227a:	f362 0007 	bfi	r0, r2, #0, #8
 801227e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012282:	f362 200f 	bfi	r0, r2, #8, #8
 8012286:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801228a:	f362 4017 	bfi	r0, r2, #16, #8
 801228e:	0e1b      	lsrs	r3, r3, #24
 8012290:	f363 601f 	bfi	r0, r3, #24, #8
 8012294:	b003      	add	sp, #12
 8012296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	1c44      	adds	r4, r0, #1
 801229e:	b2e4      	uxtb	r4, r4
 80122a0:	e7e0      	b.n	8012264 <uxr_stream_id+0x10>
 80122a2:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 80122a6:	e7dd      	b.n	8012264 <uxr_stream_id+0x10>

080122a8 <uxr_stream_id_from_raw>:
 80122a8:	b410      	push	{r4}
 80122aa:	b083      	sub	sp, #12
 80122ac:	b128      	cbz	r0, 80122ba <uxr_stream_id_from_raw+0x12>
 80122ae:	0603      	lsls	r3, r0, #24
 80122b0:	d421      	bmi.n	80122f6 <uxr_stream_id_from_raw+0x4e>
 80122b2:	1e42      	subs	r2, r0, #1
 80122b4:	b2d2      	uxtb	r2, r2
 80122b6:	2401      	movs	r4, #1
 80122b8:	e001      	b.n	80122be <uxr_stream_id_from_raw+0x16>
 80122ba:	4604      	mov	r4, r0
 80122bc:	4602      	mov	r2, r0
 80122be:	2300      	movs	r3, #0
 80122c0:	f360 0307 	bfi	r3, r0, #0, #8
 80122c4:	f362 230f 	bfi	r3, r2, #8, #8
 80122c8:	f364 4317 	bfi	r3, r4, #16, #8
 80122cc:	f361 631f 	bfi	r3, r1, #24, #8
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	2000      	movs	r0, #0
 80122d4:	f362 0007 	bfi	r0, r2, #0, #8
 80122d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80122dc:	f362 200f 	bfi	r0, r2, #8, #8
 80122e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80122e4:	f362 4017 	bfi	r0, r2, #16, #8
 80122e8:	0e1b      	lsrs	r3, r3, #24
 80122ea:	f363 601f 	bfi	r0, r3, #24, #8
 80122ee:	b003      	add	sp, #12
 80122f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122f4:	4770      	bx	lr
 80122f6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80122fa:	2402      	movs	r4, #2
 80122fc:	e7df      	b.n	80122be <uxr_stream_id_from_raw+0x16>
 80122fe:	bf00      	nop

08012300 <uxr_init_stream_storage>:
 8012300:	2300      	movs	r3, #0
 8012302:	7403      	strb	r3, [r0, #16]
 8012304:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012308:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801230c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop

08012314 <uxr_reset_stream_storage>:
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	7c03      	ldrb	r3, [r0, #16]
 8012318:	4604      	mov	r4, r0
 801231a:	b153      	cbz	r3, 8012332 <uxr_reset_stream_storage+0x1e>
 801231c:	4606      	mov	r6, r0
 801231e:	2500      	movs	r5, #0
 8012320:	4630      	mov	r0, r6
 8012322:	f001 ff43 	bl	80141ac <uxr_reset_output_best_effort_stream>
 8012326:	7c23      	ldrb	r3, [r4, #16]
 8012328:	3501      	adds	r5, #1
 801232a:	42ab      	cmp	r3, r5
 801232c:	f106 0610 	add.w	r6, r6, #16
 8012330:	d8f6      	bhi.n	8012320 <uxr_reset_stream_storage+0xc>
 8012332:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012336:	b163      	cbz	r3, 8012352 <uxr_reset_stream_storage+0x3e>
 8012338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801233c:	2500      	movs	r5, #0
 801233e:	4630      	mov	r0, r6
 8012340:	f001 fd40 	bl	8013dc4 <uxr_reset_input_best_effort_stream>
 8012344:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012348:	3501      	adds	r5, #1
 801234a:	42ab      	cmp	r3, r5
 801234c:	f106 0602 	add.w	r6, r6, #2
 8012350:	d8f5      	bhi.n	801233e <uxr_reset_stream_storage+0x2a>
 8012352:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012356:	b163      	cbz	r3, 8012372 <uxr_reset_stream_storage+0x5e>
 8012358:	f104 0618 	add.w	r6, r4, #24
 801235c:	2500      	movs	r5, #0
 801235e:	4630      	mov	r0, r6
 8012360:	f001 ffc4 	bl	80142ec <uxr_reset_output_reliable_stream>
 8012364:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012368:	3501      	adds	r5, #1
 801236a:	42ab      	cmp	r3, r5
 801236c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012370:	d8f5      	bhi.n	801235e <uxr_reset_stream_storage+0x4a>
 8012372:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012376:	b163      	cbz	r3, 8012392 <uxr_reset_stream_storage+0x7e>
 8012378:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801237c:	2500      	movs	r5, #0
 801237e:	4630      	mov	r0, r6
 8012380:	f001 fd88 	bl	8013e94 <uxr_reset_input_reliable_stream>
 8012384:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012388:	3501      	adds	r5, #1
 801238a:	42ab      	cmp	r3, r5
 801238c:	f106 0618 	add.w	r6, r6, #24
 8012390:	d8f5      	bhi.n	801237e <uxr_reset_stream_storage+0x6a>
 8012392:	bd70      	pop	{r4, r5, r6, pc}

08012394 <uxr_add_output_best_effort_buffer>:
 8012394:	b530      	push	{r4, r5, lr}
 8012396:	7c04      	ldrb	r4, [r0, #16]
 8012398:	1c65      	adds	r5, r4, #1
 801239a:	b083      	sub	sp, #12
 801239c:	7405      	strb	r5, [r0, #16]
 801239e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80123a2:	f001 fef7 	bl	8014194 <uxr_init_output_best_effort_stream>
 80123a6:	2201      	movs	r2, #1
 80123a8:	4620      	mov	r0, r4
 80123aa:	4611      	mov	r1, r2
 80123ac:	b003      	add	sp, #12
 80123ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123b2:	f7ff bf4f 	b.w	8012254 <uxr_stream_id>
 80123b6:	bf00      	nop

080123b8 <uxr_add_output_reliable_buffer>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 80123c0:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80123c4:	9600      	str	r6, [sp, #0]
 80123c6:	2528      	movs	r5, #40	@ 0x28
 80123c8:	1c66      	adds	r6, r4, #1
 80123ca:	fb05 0504 	mla	r5, r5, r4, r0
 80123ce:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 80123d2:	f105 0018 	add.w	r0, r5, #24
 80123d6:	f001 ff57 	bl	8014288 <uxr_init_output_reliable_stream>
 80123da:	4620      	mov	r0, r4
 80123dc:	2201      	movs	r2, #1
 80123de:	2102      	movs	r1, #2
 80123e0:	b004      	add	sp, #16
 80123e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123e6:	f7ff bf35 	b.w	8012254 <uxr_stream_id>
 80123ea:	bf00      	nop

080123ec <uxr_add_input_best_effort_buffer>:
 80123ec:	b510      	push	{r4, lr}
 80123ee:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80123f2:	1c62      	adds	r2, r4, #1
 80123f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80123f8:	b082      	sub	sp, #8
 80123fa:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80123fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012402:	f001 fcdb 	bl	8013dbc <uxr_init_input_best_effort_stream>
 8012406:	4620      	mov	r0, r4
 8012408:	2200      	movs	r2, #0
 801240a:	2101      	movs	r1, #1
 801240c:	b002      	add	sp, #8
 801240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012412:	f7ff bf1f 	b.w	8012254 <uxr_stream_id>
 8012416:	bf00      	nop

08012418 <uxr_add_input_reliable_buffer>:
 8012418:	b570      	push	{r4, r5, r6, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8012420:	9e08      	ldr	r6, [sp, #32]
 8012422:	9600      	str	r6, [sp, #0]
 8012424:	2518      	movs	r5, #24
 8012426:	1c66      	adds	r6, r4, #1
 8012428:	fb05 0504 	mla	r5, r5, r4, r0
 801242c:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 8012430:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8012434:	f001 fd0a 	bl	8013e4c <uxr_init_input_reliable_stream>
 8012438:	4620      	mov	r0, r4
 801243a:	2200      	movs	r2, #0
 801243c:	2102      	movs	r1, #2
 801243e:	b004      	add	sp, #16
 8012440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012444:	f7ff bf06 	b.w	8012254 <uxr_stream_id>

08012448 <uxr_get_output_best_effort_stream>:
 8012448:	7c03      	ldrb	r3, [r0, #16]
 801244a:	428b      	cmp	r3, r1
 801244c:	bf8c      	ite	hi
 801244e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012452:	2000      	movls	r0, #0
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop

08012458 <uxr_get_output_reliable_stream>:
 8012458:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801245c:	428b      	cmp	r3, r1
 801245e:	bf83      	ittte	hi
 8012460:	2328      	movhi	r3, #40	@ 0x28
 8012462:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012466:	f101 0018 	addhi.w	r0, r1, #24
 801246a:	2000      	movls	r0, #0
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <uxr_get_input_best_effort_stream>:
 8012470:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012474:	428b      	cmp	r3, r1
 8012476:	bf86      	itte	hi
 8012478:	3121      	addhi	r1, #33	@ 0x21
 801247a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801247e:	2000      	movls	r0, #0
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop

08012484 <uxr_get_input_reliable_stream>:
 8012484:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012488:	428b      	cmp	r3, r1
 801248a:	bf83      	ittte	hi
 801248c:	2318      	movhi	r3, #24
 801248e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012492:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8012496:	2000      	movls	r0, #0
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop

0801249c <uxr_output_streams_confirmed>:
 801249c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80124a0:	b183      	cbz	r3, 80124c4 <uxr_output_streams_confirmed+0x28>
 80124a2:	b570      	push	{r4, r5, r6, lr}
 80124a4:	4606      	mov	r6, r0
 80124a6:	f100 0518 	add.w	r5, r0, #24
 80124aa:	2400      	movs	r4, #0
 80124ac:	e001      	b.n	80124b2 <uxr_output_streams_confirmed+0x16>
 80124ae:	3528      	adds	r5, #40	@ 0x28
 80124b0:	b138      	cbz	r0, 80124c2 <uxr_output_streams_confirmed+0x26>
 80124b2:	4628      	mov	r0, r5
 80124b4:	f002 f98a 	bl	80147cc <uxr_is_output_up_to_date>
 80124b8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80124bc:	3401      	adds	r4, #1
 80124be:	42a3      	cmp	r3, r4
 80124c0:	d8f5      	bhi.n	80124ae <uxr_output_streams_confirmed+0x12>
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	2001      	movs	r0, #1
 80124c6:	4770      	bx	lr

080124c8 <uxr_buffer_submessage_header>:
 80124c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ca:	4604      	mov	r4, r0
 80124cc:	460e      	mov	r6, r1
 80124ce:	2104      	movs	r1, #4
 80124d0:	4615      	mov	r5, r2
 80124d2:	461f      	mov	r7, r3
 80124d4:	f7f9 fb4a 	bl	800bb6c <ucdr_align_to>
 80124d8:	2301      	movs	r3, #1
 80124da:	ea47 0203 	orr.w	r2, r7, r3
 80124de:	4631      	mov	r1, r6
 80124e0:	7523      	strb	r3, [r4, #20]
 80124e2:	4620      	mov	r0, r4
 80124e4:	462b      	mov	r3, r5
 80124e6:	f000 f8d5 	bl	8012694 <uxr_serialize_submessage_header>
 80124ea:	4620      	mov	r0, r4
 80124ec:	f7f9 fb54 	bl	800bb98 <ucdr_buffer_remaining>
 80124f0:	42a8      	cmp	r0, r5
 80124f2:	bf34      	ite	cc
 80124f4:	2000      	movcc	r0, #0
 80124f6:	2001      	movcs	r0, #1
 80124f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124fa:	bf00      	nop

080124fc <uxr_read_submessage_header>:
 80124fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012500:	4604      	mov	r4, r0
 8012502:	460d      	mov	r5, r1
 8012504:	2104      	movs	r1, #4
 8012506:	4616      	mov	r6, r2
 8012508:	4698      	mov	r8, r3
 801250a:	f7f9 fb2f 	bl	800bb6c <ucdr_align_to>
 801250e:	4620      	mov	r0, r4
 8012510:	f7f9 fb42 	bl	800bb98 <ucdr_buffer_remaining>
 8012514:	2803      	cmp	r0, #3
 8012516:	bf8c      	ite	hi
 8012518:	2701      	movhi	r7, #1
 801251a:	2700      	movls	r7, #0
 801251c:	d802      	bhi.n	8012524 <uxr_read_submessage_header+0x28>
 801251e:	4638      	mov	r0, r7
 8012520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012524:	4633      	mov	r3, r6
 8012526:	4642      	mov	r2, r8
 8012528:	4620      	mov	r0, r4
 801252a:	4629      	mov	r1, r5
 801252c:	f000 f8c6 	bl	80126bc <uxr_deserialize_submessage_header>
 8012530:	f898 3000 	ldrb.w	r3, [r8]
 8012534:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8012538:	f003 0301 	and.w	r3, r3, #1
 801253c:	f888 2000 	strb.w	r2, [r8]
 8012540:	7523      	strb	r3, [r4, #20]
 8012542:	4638      	mov	r0, r7
 8012544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012548 <uxr_submessage_padding>:
 8012548:	f010 0003 	ands.w	r0, r0, #3
 801254c:	bf18      	it	ne
 801254e:	f1c0 0004 	rsbne	r0, r0, #4
 8012552:	4770      	bx	lr

08012554 <uxr_millis>:
 8012554:	b510      	push	{r4, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	4669      	mov	r1, sp
 801255a:	2001      	movs	r0, #1
 801255c:	f7ef fd50 	bl	8002000 <clock_gettime>
 8012560:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012564:	4907      	ldr	r1, [pc, #28]	@ (8012584 <uxr_millis+0x30>)
 8012566:	9802      	ldr	r0, [sp, #8]
 8012568:	fba2 2301 	umull	r2, r3, r2, r1
 801256c:	fb01 3304 	mla	r3, r1, r4, r3
 8012570:	4604      	mov	r4, r0
 8012572:	1810      	adds	r0, r2, r0
 8012574:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012578:	4a03      	ldr	r2, [pc, #12]	@ (8012588 <uxr_millis+0x34>)
 801257a:	2300      	movs	r3, #0
 801257c:	f7ee fb16 	bl	8000bac <__aeabi_ldivmod>
 8012580:	b004      	add	sp, #16
 8012582:	bd10      	pop	{r4, pc}
 8012584:	3b9aca00 	.word	0x3b9aca00
 8012588:	000f4240 	.word	0x000f4240

0801258c <uxr_nanos>:
 801258c:	b510      	push	{r4, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	4669      	mov	r1, sp
 8012592:	2001      	movs	r0, #1
 8012594:	f7ef fd34 	bl	8002000 <clock_gettime>
 8012598:	e9dd 2400 	ldrd	r2, r4, [sp]
 801259c:	4905      	ldr	r1, [pc, #20]	@ (80125b4 <uxr_nanos+0x28>)
 801259e:	9802      	ldr	r0, [sp, #8]
 80125a0:	fba2 2301 	umull	r2, r3, r2, r1
 80125a4:	fb01 3304 	mla	r3, r1, r4, r3
 80125a8:	4604      	mov	r4, r0
 80125aa:	1810      	adds	r0, r2, r0
 80125ac:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80125b0:	b004      	add	sp, #16
 80125b2:	bd10      	pop	{r4, pc}
 80125b4:	3b9aca00 	.word	0x3b9aca00

080125b8 <uxr_prepare_output_stream>:
 80125b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ba:	b087      	sub	sp, #28
 80125bc:	2407      	movs	r4, #7
 80125be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80125c0:	9202      	str	r2, [sp, #8]
 80125c2:	2500      	movs	r5, #0
 80125c4:	1d32      	adds	r2, r6, #4
 80125c6:	e9cd 4500 	strd	r4, r5, [sp]
 80125ca:	9103      	str	r1, [sp, #12]
 80125cc:	461c      	mov	r4, r3
 80125ce:	4606      	mov	r6, r0
 80125d0:	f7ff f858 	bl	8011684 <uxr_prepare_stream_to_write_submessage>
 80125d4:	f080 0201 	eor.w	r2, r0, #1
 80125d8:	b2d2      	uxtb	r2, r2
 80125da:	75a2      	strb	r2, [r4, #22]
 80125dc:	b112      	cbz	r2, 80125e4 <uxr_prepare_output_stream+0x2c>
 80125de:	4628      	mov	r0, r5
 80125e0:	b007      	add	sp, #28
 80125e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125e4:	aa05      	add	r2, sp, #20
 80125e6:	9902      	ldr	r1, [sp, #8]
 80125e8:	4630      	mov	r0, r6
 80125ea:	f7ff f985 	bl	80118f8 <uxr_init_base_object_request>
 80125ee:	a905      	add	r1, sp, #20
 80125f0:	4605      	mov	r5, r0
 80125f2:	4620      	mov	r0, r4
 80125f4:	f000 feca 	bl	801338c <uxr_serialize_WRITE_DATA_Payload_Data>
 80125f8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80125fc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012600:	1a52      	subs	r2, r2, r1
 8012602:	4620      	mov	r0, r4
 8012604:	f7f9 fa98 	bl	800bb38 <ucdr_init_buffer>
 8012608:	4620      	mov	r0, r4
 801260a:	463a      	mov	r2, r7
 801260c:	4631      	mov	r1, r6
 801260e:	f7f9 fa69 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8012612:	4628      	mov	r0, r5
 8012614:	b007      	add	sp, #28
 8012616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012618 <uxr_serialize_message_header>:
 8012618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801261a:	b083      	sub	sp, #12
 801261c:	4616      	mov	r6, r2
 801261e:	4604      	mov	r4, r0
 8012620:	9301      	str	r3, [sp, #4]
 8012622:	460d      	mov	r5, r1
 8012624:	9f08      	ldr	r7, [sp, #32]
 8012626:	f7f8 f989 	bl	800a93c <ucdr_serialize_uint8_t>
 801262a:	4631      	mov	r1, r6
 801262c:	4620      	mov	r0, r4
 801262e:	f7f8 f985 	bl	800a93c <ucdr_serialize_uint8_t>
 8012632:	9a01      	ldr	r2, [sp, #4]
 8012634:	4620      	mov	r0, r4
 8012636:	2101      	movs	r1, #1
 8012638:	f7f8 fa2c 	bl	800aa94 <ucdr_serialize_endian_uint16_t>
 801263c:	062b      	lsls	r3, r5, #24
 801263e:	d501      	bpl.n	8012644 <uxr_serialize_message_header+0x2c>
 8012640:	b003      	add	sp, #12
 8012642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012644:	4639      	mov	r1, r7
 8012646:	4620      	mov	r0, r4
 8012648:	2204      	movs	r2, #4
 801264a:	b003      	add	sp, #12
 801264c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012650:	f001 ba7c 	b.w	8013b4c <ucdr_serialize_array_uint8_t>

08012654 <uxr_deserialize_message_header>:
 8012654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012656:	b083      	sub	sp, #12
 8012658:	4616      	mov	r6, r2
 801265a:	4604      	mov	r4, r0
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	460d      	mov	r5, r1
 8012660:	9f08      	ldr	r7, [sp, #32]
 8012662:	f7f8 f981 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012666:	4631      	mov	r1, r6
 8012668:	4620      	mov	r0, r4
 801266a:	f7f8 f97d 	bl	800a968 <ucdr_deserialize_uint8_t>
 801266e:	9a01      	ldr	r2, [sp, #4]
 8012670:	4620      	mov	r0, r4
 8012672:	2101      	movs	r1, #1
 8012674:	f7f8 fb02 	bl	800ac7c <ucdr_deserialize_endian_uint16_t>
 8012678:	f995 3000 	ldrsb.w	r3, [r5]
 801267c:	2b00      	cmp	r3, #0
 801267e:	da01      	bge.n	8012684 <uxr_deserialize_message_header+0x30>
 8012680:	b003      	add	sp, #12
 8012682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012684:	4639      	mov	r1, r7
 8012686:	4620      	mov	r0, r4
 8012688:	2204      	movs	r2, #4
 801268a:	b003      	add	sp, #12
 801268c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012690:	f001 bac0 	b.w	8013c14 <ucdr_deserialize_array_uint8_t>

08012694 <uxr_serialize_submessage_header>:
 8012694:	b530      	push	{r4, r5, lr}
 8012696:	b083      	sub	sp, #12
 8012698:	4615      	mov	r5, r2
 801269a:	4604      	mov	r4, r0
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	f7f8 f94d 	bl	800a93c <ucdr_serialize_uint8_t>
 80126a2:	4629      	mov	r1, r5
 80126a4:	4620      	mov	r0, r4
 80126a6:	f7f8 f949 	bl	800a93c <ucdr_serialize_uint8_t>
 80126aa:	9a01      	ldr	r2, [sp, #4]
 80126ac:	4620      	mov	r0, r4
 80126ae:	2101      	movs	r1, #1
 80126b0:	b003      	add	sp, #12
 80126b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126b6:	f7f8 b9ed 	b.w	800aa94 <ucdr_serialize_endian_uint16_t>
 80126ba:	bf00      	nop

080126bc <uxr_deserialize_submessage_header>:
 80126bc:	b530      	push	{r4, r5, lr}
 80126be:	b083      	sub	sp, #12
 80126c0:	4615      	mov	r5, r2
 80126c2:	4604      	mov	r4, r0
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	f7f8 f94f 	bl	800a968 <ucdr_deserialize_uint8_t>
 80126ca:	4629      	mov	r1, r5
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7f8 f94b 	bl	800a968 <ucdr_deserialize_uint8_t>
 80126d2:	9a01      	ldr	r2, [sp, #4]
 80126d4:	4620      	mov	r0, r4
 80126d6:	2101      	movs	r1, #1
 80126d8:	b003      	add	sp, #12
 80126da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126de:	f7f8 bacd 	b.w	800ac7c <ucdr_deserialize_endian_uint16_t>
 80126e2:	bf00      	nop

080126e4 <uxr_serialize_CLIENT_Representation>:
 80126e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126e8:	2204      	movs	r2, #4
 80126ea:	460c      	mov	r4, r1
 80126ec:	4605      	mov	r5, r0
 80126ee:	f001 fa2d 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80126f2:	1d21      	adds	r1, r4, #4
 80126f4:	4607      	mov	r7, r0
 80126f6:	2202      	movs	r2, #2
 80126f8:	4628      	mov	r0, r5
 80126fa:	f001 fa27 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80126fe:	1da1      	adds	r1, r4, #6
 8012700:	4007      	ands	r7, r0
 8012702:	2202      	movs	r2, #2
 8012704:	4628      	mov	r0, r5
 8012706:	f001 fa21 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801270a:	fa5f f887 	uxtb.w	r8, r7
 801270e:	2204      	movs	r2, #4
 8012710:	4607      	mov	r7, r0
 8012712:	f104 0108 	add.w	r1, r4, #8
 8012716:	4628      	mov	r0, r5
 8012718:	f001 fa18 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801271c:	ea08 0707 	and.w	r7, r8, r7
 8012720:	7b21      	ldrb	r1, [r4, #12]
 8012722:	4680      	mov	r8, r0
 8012724:	4628      	mov	r0, r5
 8012726:	f7f8 f909 	bl	800a93c <ucdr_serialize_uint8_t>
 801272a:	ea08 0807 	and.w	r8, r8, r7
 801272e:	7b61      	ldrb	r1, [r4, #13]
 8012730:	4607      	mov	r7, r0
 8012732:	4628      	mov	r0, r5
 8012734:	f7f8 f8d2 	bl	800a8dc <ucdr_serialize_bool>
 8012738:	7b63      	ldrb	r3, [r4, #13]
 801273a:	ea08 0707 	and.w	r7, r8, r7
 801273e:	ea07 0600 	and.w	r6, r7, r0
 8012742:	b933      	cbnz	r3, 8012752 <uxr_serialize_CLIENT_Representation+0x6e>
 8012744:	8ba1      	ldrh	r1, [r4, #28]
 8012746:	4628      	mov	r0, r5
 8012748:	f7f8 f924 	bl	800a994 <ucdr_serialize_uint16_t>
 801274c:	4030      	ands	r0, r6
 801274e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012752:	6921      	ldr	r1, [r4, #16]
 8012754:	4628      	mov	r0, r5
 8012756:	f7f8 fb07 	bl	800ad68 <ucdr_serialize_uint32_t>
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	b1cb      	cbz	r3, 8012792 <uxr_serialize_CLIENT_Representation+0xae>
 801275e:	b1d0      	cbz	r0, 8012796 <uxr_serialize_CLIENT_Representation+0xb2>
 8012760:	46a0      	mov	r8, r4
 8012762:	f04f 0900 	mov.w	r9, #0
 8012766:	e002      	b.n	801276e <uxr_serialize_CLIENT_Representation+0x8a>
 8012768:	f108 0808 	add.w	r8, r8, #8
 801276c:	b198      	cbz	r0, 8012796 <uxr_serialize_CLIENT_Representation+0xb2>
 801276e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012772:	4628      	mov	r0, r5
 8012774:	f001 fb0a 	bl	8013d8c <ucdr_serialize_string>
 8012778:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801277c:	4607      	mov	r7, r0
 801277e:	4628      	mov	r0, r5
 8012780:	f001 fb04 	bl	8013d8c <ucdr_serialize_string>
 8012784:	6923      	ldr	r3, [r4, #16]
 8012786:	f109 0901 	add.w	r9, r9, #1
 801278a:	4038      	ands	r0, r7
 801278c:	4599      	cmp	r9, r3
 801278e:	b2c0      	uxtb	r0, r0
 8012790:	d3ea      	bcc.n	8012768 <uxr_serialize_CLIENT_Representation+0x84>
 8012792:	4006      	ands	r6, r0
 8012794:	e7d6      	b.n	8012744 <uxr_serialize_CLIENT_Representation+0x60>
 8012796:	2600      	movs	r6, #0
 8012798:	e7d4      	b.n	8012744 <uxr_serialize_CLIENT_Representation+0x60>
 801279a:	bf00      	nop

0801279c <uxr_deserialize_CLIENT_Representation>:
 801279c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127a0:	2204      	movs	r2, #4
 80127a2:	460c      	mov	r4, r1
 80127a4:	4605      	mov	r5, r0
 80127a6:	f001 fa35 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80127aa:	1d21      	adds	r1, r4, #4
 80127ac:	4607      	mov	r7, r0
 80127ae:	2202      	movs	r2, #2
 80127b0:	4628      	mov	r0, r5
 80127b2:	f001 fa2f 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80127b6:	1da1      	adds	r1, r4, #6
 80127b8:	4007      	ands	r7, r0
 80127ba:	2202      	movs	r2, #2
 80127bc:	4628      	mov	r0, r5
 80127be:	f001 fa29 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80127c2:	fa5f f887 	uxtb.w	r8, r7
 80127c6:	2204      	movs	r2, #4
 80127c8:	4607      	mov	r7, r0
 80127ca:	f104 0108 	add.w	r1, r4, #8
 80127ce:	4628      	mov	r0, r5
 80127d0:	f001 fa20 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80127d4:	ea08 0707 	and.w	r7, r8, r7
 80127d8:	f104 010c 	add.w	r1, r4, #12
 80127dc:	4680      	mov	r8, r0
 80127de:	4628      	mov	r0, r5
 80127e0:	f7f8 f8c2 	bl	800a968 <ucdr_deserialize_uint8_t>
 80127e4:	ea08 0807 	and.w	r8, r8, r7
 80127e8:	f104 010d 	add.w	r1, r4, #13
 80127ec:	4607      	mov	r7, r0
 80127ee:	4628      	mov	r0, r5
 80127f0:	f7f8 f88a 	bl	800a908 <ucdr_deserialize_bool>
 80127f4:	7b63      	ldrb	r3, [r4, #13]
 80127f6:	ea08 0707 	and.w	r7, r8, r7
 80127fa:	ea07 0600 	and.w	r6, r7, r0
 80127fe:	b93b      	cbnz	r3, 8012810 <uxr_deserialize_CLIENT_Representation+0x74>
 8012800:	f104 011c 	add.w	r1, r4, #28
 8012804:	4628      	mov	r0, r5
 8012806:	f7f8 f9c5 	bl	800ab94 <ucdr_deserialize_uint16_t>
 801280a:	4030      	ands	r0, r6
 801280c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012810:	f104 0110 	add.w	r1, r4, #16
 8012814:	4628      	mov	r0, r5
 8012816:	f7f8 fbd7 	bl	800afc8 <ucdr_deserialize_uint32_t>
 801281a:	6923      	ldr	r3, [r4, #16]
 801281c:	2b01      	cmp	r3, #1
 801281e:	d903      	bls.n	8012828 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012820:	2301      	movs	r3, #1
 8012822:	75ab      	strb	r3, [r5, #22]
 8012824:	2600      	movs	r6, #0
 8012826:	e7eb      	b.n	8012800 <uxr_deserialize_CLIENT_Representation+0x64>
 8012828:	b1fb      	cbz	r3, 801286a <uxr_deserialize_CLIENT_Representation+0xce>
 801282a:	2800      	cmp	r0, #0
 801282c:	d0fa      	beq.n	8012824 <uxr_deserialize_CLIENT_Representation+0x88>
 801282e:	46a0      	mov	r8, r4
 8012830:	f04f 0900 	mov.w	r9, #0
 8012834:	e003      	b.n	801283e <uxr_deserialize_CLIENT_Representation+0xa2>
 8012836:	f108 0808 	add.w	r8, r8, #8
 801283a:	2800      	cmp	r0, #0
 801283c:	d0f2      	beq.n	8012824 <uxr_deserialize_CLIENT_Representation+0x88>
 801283e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012846:	4628      	mov	r0, r5
 8012848:	f001 fab0 	bl	8013dac <ucdr_deserialize_string>
 801284c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012850:	4607      	mov	r7, r0
 8012852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012856:	4628      	mov	r0, r5
 8012858:	f001 faa8 	bl	8013dac <ucdr_deserialize_string>
 801285c:	6923      	ldr	r3, [r4, #16]
 801285e:	f109 0901 	add.w	r9, r9, #1
 8012862:	4038      	ands	r0, r7
 8012864:	4599      	cmp	r9, r3
 8012866:	b2c0      	uxtb	r0, r0
 8012868:	d3e5      	bcc.n	8012836 <uxr_deserialize_CLIENT_Representation+0x9a>
 801286a:	4006      	ands	r6, r0
 801286c:	e7c8      	b.n	8012800 <uxr_deserialize_CLIENT_Representation+0x64>
 801286e:	bf00      	nop

08012870 <uxr_serialize_AGENT_Representation>:
 8012870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012874:	2204      	movs	r2, #4
 8012876:	460c      	mov	r4, r1
 8012878:	4605      	mov	r5, r0
 801287a:	f001 f967 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801287e:	1d21      	adds	r1, r4, #4
 8012880:	4606      	mov	r6, r0
 8012882:	2202      	movs	r2, #2
 8012884:	4628      	mov	r0, r5
 8012886:	f001 f961 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801288a:	1da1      	adds	r1, r4, #6
 801288c:	4006      	ands	r6, r0
 801288e:	2202      	movs	r2, #2
 8012890:	4628      	mov	r0, r5
 8012892:	f001 f95b 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012896:	b2f6      	uxtb	r6, r6
 8012898:	4603      	mov	r3, r0
 801289a:	7a21      	ldrb	r1, [r4, #8]
 801289c:	4628      	mov	r0, r5
 801289e:	401e      	ands	r6, r3
 80128a0:	f7f8 f81c 	bl	800a8dc <ucdr_serialize_bool>
 80128a4:	7a23      	ldrb	r3, [r4, #8]
 80128a6:	ea00 0706 	and.w	r7, r0, r6
 80128aa:	b913      	cbnz	r3, 80128b2 <uxr_serialize_AGENT_Representation+0x42>
 80128ac:	4638      	mov	r0, r7
 80128ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128b2:	68e1      	ldr	r1, [r4, #12]
 80128b4:	4628      	mov	r0, r5
 80128b6:	f7f8 fa57 	bl	800ad68 <ucdr_serialize_uint32_t>
 80128ba:	68e3      	ldr	r3, [r4, #12]
 80128bc:	b313      	cbz	r3, 8012904 <uxr_serialize_AGENT_Representation+0x94>
 80128be:	b1e8      	cbz	r0, 80128fc <uxr_serialize_AGENT_Representation+0x8c>
 80128c0:	46a0      	mov	r8, r4
 80128c2:	f04f 0900 	mov.w	r9, #0
 80128c6:	e002      	b.n	80128ce <uxr_serialize_AGENT_Representation+0x5e>
 80128c8:	f108 0808 	add.w	r8, r8, #8
 80128cc:	b1b3      	cbz	r3, 80128fc <uxr_serialize_AGENT_Representation+0x8c>
 80128ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80128d2:	4628      	mov	r0, r5
 80128d4:	f001 fa5a 	bl	8013d8c <ucdr_serialize_string>
 80128d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80128dc:	4606      	mov	r6, r0
 80128de:	4628      	mov	r0, r5
 80128e0:	f001 fa54 	bl	8013d8c <ucdr_serialize_string>
 80128e4:	68e2      	ldr	r2, [r4, #12]
 80128e6:	f109 0901 	add.w	r9, r9, #1
 80128ea:	ea06 0300 	and.w	r3, r6, r0
 80128ee:	4591      	cmp	r9, r2
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	d3e9      	bcc.n	80128c8 <uxr_serialize_AGENT_Representation+0x58>
 80128f4:	401f      	ands	r7, r3
 80128f6:	4638      	mov	r0, r7
 80128f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128fc:	2700      	movs	r7, #0
 80128fe:	4638      	mov	r0, r7
 8012900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012904:	4007      	ands	r7, r0
 8012906:	e7d1      	b.n	80128ac <uxr_serialize_AGENT_Representation+0x3c>

08012908 <uxr_serialize_ObjectVariant.part.0>:
 8012908:	b570      	push	{r4, r5, r6, lr}
 801290a:	780b      	ldrb	r3, [r1, #0]
 801290c:	3b01      	subs	r3, #1
 801290e:	460c      	mov	r4, r1
 8012910:	4605      	mov	r5, r0
 8012912:	2b0d      	cmp	r3, #13
 8012914:	d869      	bhi.n	80129ea <uxr_serialize_ObjectVariant.part.0+0xe2>
 8012916:	e8df f003 	tbb	[pc, r3]
 801291a:	074a      	.short	0x074a
 801291c:	07073030 	.word	0x07073030
 8012920:	21680707 	.word	0x21680707
 8012924:	45632121 	.word	0x45632121
 8012928:	7909      	ldrb	r1, [r1, #4]
 801292a:	f7f8 f807 	bl	800a93c <ucdr_serialize_uint8_t>
 801292e:	4606      	mov	r6, r0
 8012930:	b158      	cbz	r0, 801294a <uxr_serialize_ObjectVariant.part.0+0x42>
 8012932:	7923      	ldrb	r3, [r4, #4]
 8012934:	2b02      	cmp	r3, #2
 8012936:	d003      	beq.n	8012940 <uxr_serialize_ObjectVariant.part.0+0x38>
 8012938:	2b03      	cmp	r3, #3
 801293a:	d029      	beq.n	8012990 <uxr_serialize_ObjectVariant.part.0+0x88>
 801293c:	2b01      	cmp	r3, #1
 801293e:	d104      	bne.n	801294a <uxr_serialize_ObjectVariant.part.0+0x42>
 8012940:	68a1      	ldr	r1, [r4, #8]
 8012942:	4628      	mov	r0, r5
 8012944:	f001 fa22 	bl	8013d8c <ucdr_serialize_string>
 8012948:	4606      	mov	r6, r0
 801294a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801294e:	4628      	mov	r0, r5
 8012950:	2202      	movs	r2, #2
 8012952:	f001 f8fb 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012956:	4030      	ands	r0, r6
 8012958:	b2c0      	uxtb	r0, r0
 801295a:	bd70      	pop	{r4, r5, r6, pc}
 801295c:	7909      	ldrb	r1, [r1, #4]
 801295e:	f7f7 ffed 	bl	800a93c <ucdr_serialize_uint8_t>
 8012962:	b1e8      	cbz	r0, 80129a0 <uxr_serialize_ObjectVariant.part.0+0x98>
 8012964:	7923      	ldrb	r3, [r4, #4]
 8012966:	2b01      	cmp	r3, #1
 8012968:	d001      	beq.n	801296e <uxr_serialize_ObjectVariant.part.0+0x66>
 801296a:	2b02      	cmp	r3, #2
 801296c:	d13d      	bne.n	80129ea <uxr_serialize_ObjectVariant.part.0+0xe2>
 801296e:	68a1      	ldr	r1, [r4, #8]
 8012970:	4628      	mov	r0, r5
 8012972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012976:	f001 ba09 	b.w	8013d8c <ucdr_serialize_string>
 801297a:	7909      	ldrb	r1, [r1, #4]
 801297c:	f7f7 ffde 	bl	800a93c <ucdr_serialize_uint8_t>
 8012980:	4606      	mov	r6, r0
 8012982:	2800      	cmp	r0, #0
 8012984:	d0e1      	beq.n	801294a <uxr_serialize_ObjectVariant.part.0+0x42>
 8012986:	7923      	ldrb	r3, [r4, #4]
 8012988:	2b02      	cmp	r3, #2
 801298a:	d0d9      	beq.n	8012940 <uxr_serialize_ObjectVariant.part.0+0x38>
 801298c:	2b03      	cmp	r3, #3
 801298e:	d1dc      	bne.n	801294a <uxr_serialize_ObjectVariant.part.0+0x42>
 8012990:	68a2      	ldr	r2, [r4, #8]
 8012992:	f104 010c 	add.w	r1, r4, #12
 8012996:	4628      	mov	r0, r5
 8012998:	f001 f9cc 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 801299c:	4606      	mov	r6, r0
 801299e:	e7d4      	b.n	801294a <uxr_serialize_ObjectVariant.part.0+0x42>
 80129a0:	2000      	movs	r0, #0
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129a8:	3104      	adds	r1, #4
 80129aa:	f7ff be9b 	b.w	80126e4 <uxr_serialize_CLIENT_Representation>
 80129ae:	7909      	ldrb	r1, [r1, #4]
 80129b0:	f7f7 ffc4 	bl	800a93c <ucdr_serialize_uint8_t>
 80129b4:	4606      	mov	r6, r0
 80129b6:	b158      	cbz	r0, 80129d0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80129b8:	7923      	ldrb	r3, [r4, #4]
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d003      	beq.n	80129c6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80129be:	2b03      	cmp	r3, #3
 80129c0:	d015      	beq.n	80129ee <uxr_serialize_ObjectVariant.part.0+0xe6>
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d104      	bne.n	80129d0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80129c6:	68a1      	ldr	r1, [r4, #8]
 80129c8:	4628      	mov	r0, r5
 80129ca:	f001 f9df 	bl	8013d8c <ucdr_serialize_string>
 80129ce:	4606      	mov	r6, r0
 80129d0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80129d4:	4628      	mov	r0, r5
 80129d6:	f7f8 fd19 	bl	800b40c <ucdr_serialize_int16_t>
 80129da:	4030      	ands	r0, r6
 80129dc:	b2c0      	uxtb	r0, r0
 80129de:	bd70      	pop	{r4, r5, r6, pc}
 80129e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129e4:	3104      	adds	r1, #4
 80129e6:	f7ff bf43 	b.w	8012870 <uxr_serialize_AGENT_Representation>
 80129ea:	2001      	movs	r0, #1
 80129ec:	bd70      	pop	{r4, r5, r6, pc}
 80129ee:	68a2      	ldr	r2, [r4, #8]
 80129f0:	f104 010c 	add.w	r1, r4, #12
 80129f4:	4628      	mov	r0, r5
 80129f6:	f001 f99d 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 80129fa:	4606      	mov	r6, r0
 80129fc:	e7e8      	b.n	80129d0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80129fe:	bf00      	nop

08012a00 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012a00:	b570      	push	{r4, r5, r6, lr}
 8012a02:	460d      	mov	r5, r1
 8012a04:	7809      	ldrb	r1, [r1, #0]
 8012a06:	4606      	mov	r6, r0
 8012a08:	f7f7 ff68 	bl	800a8dc <ucdr_serialize_bool>
 8012a0c:	782b      	ldrb	r3, [r5, #0]
 8012a0e:	4604      	mov	r4, r0
 8012a10:	b94b      	cbnz	r3, 8012a26 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012a12:	7a29      	ldrb	r1, [r5, #8]
 8012a14:	4630      	mov	r0, r6
 8012a16:	f7f7 ff61 	bl	800a8dc <ucdr_serialize_bool>
 8012a1a:	7a2b      	ldrb	r3, [r5, #8]
 8012a1c:	4004      	ands	r4, r0
 8012a1e:	b2e4      	uxtb	r4, r4
 8012a20:	b943      	cbnz	r3, 8012a34 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012a22:	4620      	mov	r0, r4
 8012a24:	bd70      	pop	{r4, r5, r6, pc}
 8012a26:	6869      	ldr	r1, [r5, #4]
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f001 f9af 	bl	8013d8c <ucdr_serialize_string>
 8012a2e:	4004      	ands	r4, r0
 8012a30:	b2e4      	uxtb	r4, r4
 8012a32:	e7ee      	b.n	8012a12 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012a34:	68e9      	ldr	r1, [r5, #12]
 8012a36:	4630      	mov	r0, r6
 8012a38:	f001 f9a8 	bl	8013d8c <ucdr_serialize_string>
 8012a3c:	4004      	ands	r4, r0
 8012a3e:	4620      	mov	r0, r4
 8012a40:	bd70      	pop	{r4, r5, r6, pc}
 8012a42:	bf00      	nop

08012a44 <uxr_serialize_OBJK_Topic_Binary>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	460d      	mov	r5, r1
 8012a48:	6809      	ldr	r1, [r1, #0]
 8012a4a:	4606      	mov	r6, r0
 8012a4c:	f001 f99e 	bl	8013d8c <ucdr_serialize_string>
 8012a50:	7929      	ldrb	r1, [r5, #4]
 8012a52:	4604      	mov	r4, r0
 8012a54:	4630      	mov	r0, r6
 8012a56:	f7f7 ff41 	bl	800a8dc <ucdr_serialize_bool>
 8012a5a:	792b      	ldrb	r3, [r5, #4]
 8012a5c:	4004      	ands	r4, r0
 8012a5e:	b2e4      	uxtb	r4, r4
 8012a60:	b943      	cbnz	r3, 8012a74 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012a62:	7b29      	ldrb	r1, [r5, #12]
 8012a64:	4630      	mov	r0, r6
 8012a66:	f7f7 ff39 	bl	800a8dc <ucdr_serialize_bool>
 8012a6a:	7b2b      	ldrb	r3, [r5, #12]
 8012a6c:	4004      	ands	r4, r0
 8012a6e:	b93b      	cbnz	r3, 8012a80 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012a70:	4620      	mov	r0, r4
 8012a72:	bd70      	pop	{r4, r5, r6, pc}
 8012a74:	68a9      	ldr	r1, [r5, #8]
 8012a76:	4630      	mov	r0, r6
 8012a78:	f001 f988 	bl	8013d8c <ucdr_serialize_string>
 8012a7c:	4004      	ands	r4, r0
 8012a7e:	e7f0      	b.n	8012a62 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012a80:	6929      	ldr	r1, [r5, #16]
 8012a82:	4630      	mov	r0, r6
 8012a84:	f001 f982 	bl	8013d8c <ucdr_serialize_string>
 8012a88:	4004      	ands	r4, r0
 8012a8a:	b2e4      	uxtb	r4, r4
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}

08012a90 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a94:	460c      	mov	r4, r1
 8012a96:	7809      	ldrb	r1, [r1, #0]
 8012a98:	4606      	mov	r6, r0
 8012a9a:	f7f7 ff1f 	bl	800a8dc <ucdr_serialize_bool>
 8012a9e:	7823      	ldrb	r3, [r4, #0]
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	b96b      	cbnz	r3, 8012ac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012aa4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7f7 ff17 	bl	800a8dc <ucdr_serialize_bool>
 8012aae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012ab2:	4005      	ands	r5, r0
 8012ab4:	b2ed      	uxtb	r5, r5
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d169      	bne.n	8012b8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012aba:	4628      	mov	r0, r5
 8012abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac0:	6861      	ldr	r1, [r4, #4]
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7f8 f950 	bl	800ad68 <ucdr_serialize_uint32_t>
 8012ac8:	6863      	ldr	r3, [r4, #4]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d06b      	beq.n	8012ba6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d067      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ad2:	68a1      	ldr	r1, [r4, #8]
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f001 f959 	bl	8013d8c <ucdr_serialize_string>
 8012ada:	6863      	ldr	r3, [r4, #4]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d953      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d05e      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ae4:	68e1      	ldr	r1, [r4, #12]
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	f001 f950 	bl	8013d8c <ucdr_serialize_string>
 8012aec:	6863      	ldr	r3, [r4, #4]
 8012aee:	2b02      	cmp	r3, #2
 8012af0:	d94a      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d055      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012af6:	6921      	ldr	r1, [r4, #16]
 8012af8:	4630      	mov	r0, r6
 8012afa:	f001 f947 	bl	8013d8c <ucdr_serialize_string>
 8012afe:	6863      	ldr	r3, [r4, #4]
 8012b00:	2b03      	cmp	r3, #3
 8012b02:	d941      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d04c      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b08:	6961      	ldr	r1, [r4, #20]
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	f001 f93e 	bl	8013d8c <ucdr_serialize_string>
 8012b10:	6863      	ldr	r3, [r4, #4]
 8012b12:	2b04      	cmp	r3, #4
 8012b14:	d938      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d043      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b1a:	69a1      	ldr	r1, [r4, #24]
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f001 f935 	bl	8013d8c <ucdr_serialize_string>
 8012b22:	6863      	ldr	r3, [r4, #4]
 8012b24:	2b05      	cmp	r3, #5
 8012b26:	d92f      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d03a      	beq.n	8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b2c:	69e1      	ldr	r1, [r4, #28]
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f001 f92c 	bl	8013d8c <ucdr_serialize_string>
 8012b34:	6863      	ldr	r3, [r4, #4]
 8012b36:	2b06      	cmp	r3, #6
 8012b38:	d926      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b3a:	b390      	cbz	r0, 8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b3c:	6a21      	ldr	r1, [r4, #32]
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f001 f924 	bl	8013d8c <ucdr_serialize_string>
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	2b07      	cmp	r3, #7
 8012b48:	d91e      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b4a:	b350      	cbz	r0, 8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b4c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f001 f91c 	bl	8013d8c <ucdr_serialize_string>
 8012b54:	6863      	ldr	r3, [r4, #4]
 8012b56:	2b08      	cmp	r3, #8
 8012b58:	d916      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b5a:	b310      	cbz	r0, 8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b5c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f001 f914 	bl	8013d8c <ucdr_serialize_string>
 8012b64:	6863      	ldr	r3, [r4, #4]
 8012b66:	2b09      	cmp	r3, #9
 8012b68:	d90e      	bls.n	8012b88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b6a:	b1d0      	cbz	r0, 8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b6c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012b70:	2709      	movs	r7, #9
 8012b72:	e000      	b.n	8012b76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012b74:	b1a8      	cbz	r0, 8012ba2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b76:	f858 1b04 	ldr.w	r1, [r8], #4
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f001 f906 	bl	8013d8c <ucdr_serialize_string>
 8012b80:	6862      	ldr	r2, [r4, #4]
 8012b82:	3701      	adds	r7, #1
 8012b84:	4297      	cmp	r7, r2
 8012b86:	d3f5      	bcc.n	8012b74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012b88:	4005      	ands	r5, r0
 8012b8a:	b2ed      	uxtb	r5, r5
 8012b8c:	e78a      	b.n	8012aa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012b8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012b90:	4630      	mov	r0, r6
 8012b92:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012b96:	f001 f8cd 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 8012b9a:	4005      	ands	r5, r0
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba2:	2500      	movs	r5, #0
 8012ba4:	e77e      	b.n	8012aa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012ba6:	4028      	ands	r0, r5
 8012ba8:	b2c5      	uxtb	r5, r0
 8012baa:	e77b      	b.n	8012aa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012bac <uxr_serialize_OBJK_Subscriber_Binary>:
 8012bac:	b570      	push	{r4, r5, r6, lr}
 8012bae:	460d      	mov	r5, r1
 8012bb0:	7809      	ldrb	r1, [r1, #0]
 8012bb2:	4606      	mov	r6, r0
 8012bb4:	f7f7 fe92 	bl	800a8dc <ucdr_serialize_bool>
 8012bb8:	782b      	ldrb	r3, [r5, #0]
 8012bba:	4604      	mov	r4, r0
 8012bbc:	b94b      	cbnz	r3, 8012bd2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012bbe:	7a29      	ldrb	r1, [r5, #8]
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	f7f7 fe8b 	bl	800a8dc <ucdr_serialize_bool>
 8012bc6:	7a2b      	ldrb	r3, [r5, #8]
 8012bc8:	4004      	ands	r4, r0
 8012bca:	b2e4      	uxtb	r4, r4
 8012bcc:	b943      	cbnz	r3, 8012be0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012bce:	4620      	mov	r0, r4
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	6869      	ldr	r1, [r5, #4]
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f001 f8d9 	bl	8013d8c <ucdr_serialize_string>
 8012bda:	4004      	ands	r4, r0
 8012bdc:	b2e4      	uxtb	r4, r4
 8012bde:	e7ee      	b.n	8012bbe <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012be0:	f105 010c 	add.w	r1, r5, #12
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff ff53 	bl	8012a90 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012bea:	4004      	ands	r4, r0
 8012bec:	4620      	mov	r0, r4
 8012bee:	bd70      	pop	{r4, r5, r6, pc}

08012bf0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012bf0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012bf4:	4688      	mov	r8, r1
 8012bf6:	8809      	ldrh	r1, [r1, #0]
 8012bf8:	4681      	mov	r9, r0
 8012bfa:	f7f7 fecb 	bl	800a994 <ucdr_serialize_uint16_t>
 8012bfe:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012c02:	4606      	mov	r6, r0
 8012c04:	4648      	mov	r0, r9
 8012c06:	f7f7 fe69 	bl	800a8dc <ucdr_serialize_bool>
 8012c0a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012c0e:	4030      	ands	r0, r6
 8012c10:	b2c5      	uxtb	r5, r0
 8012c12:	b9eb      	cbnz	r3, 8012c50 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012c14:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012c18:	4648      	mov	r0, r9
 8012c1a:	f7f7 fe5f 	bl	800a8dc <ucdr_serialize_bool>
 8012c1e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012c22:	4005      	ands	r5, r0
 8012c24:	bb7b      	cbnz	r3, 8012c86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012c26:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012c2a:	4648      	mov	r0, r9
 8012c2c:	f7f7 fe56 	bl	800a8dc <ucdr_serialize_bool>
 8012c30:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012c34:	4005      	ands	r5, r0
 8012c36:	b9f3      	cbnz	r3, 8012c76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012c38:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	f7f7 fe4d 	bl	800a8dc <ucdr_serialize_bool>
 8012c42:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012c46:	4005      	ands	r5, r0
 8012c48:	b94b      	cbnz	r3, 8012c5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012c50:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012c54:	4648      	mov	r0, r9
 8012c56:	f7f7 fe9d 	bl	800a994 <ucdr_serialize_uint16_t>
 8012c5a:	4005      	ands	r5, r0
 8012c5c:	e7da      	b.n	8012c14 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012c5e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012c62:	4648      	mov	r0, r9
 8012c64:	f108 011c 	add.w	r1, r8, #28
 8012c68:	f001 f864 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 8012c6c:	4028      	ands	r0, r5
 8012c6e:	b2c5      	uxtb	r5, r0
 8012c70:	4628      	mov	r0, r5
 8012c72:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012c76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012c7a:	4648      	mov	r0, r9
 8012c7c:	f7f8 f874 	bl	800ad68 <ucdr_serialize_uint32_t>
 8012c80:	4028      	ands	r0, r5
 8012c82:	b2c5      	uxtb	r5, r0
 8012c84:	e7d8      	b.n	8012c38 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012c86:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012c8a:	4648      	mov	r0, r9
 8012c8c:	f7f8 f86c 	bl	800ad68 <ucdr_serialize_uint32_t>
 8012c90:	4028      	ands	r0, r5
 8012c92:	b2c5      	uxtb	r5, r0
 8012c94:	e7c7      	b.n	8012c26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012c96:	bf00      	nop

08012c98 <uxr_serialize_OBJK_DataReader_Binary>:
 8012c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9a:	2202      	movs	r2, #2
 8012c9c:	460c      	mov	r4, r1
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	f000 ff54 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012ca4:	78a1      	ldrb	r1, [r4, #2]
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7f7 fe17 	bl	800a8dc <ucdr_serialize_bool>
 8012cae:	78a3      	ldrb	r3, [r4, #2]
 8012cb0:	4005      	ands	r5, r0
 8012cb2:	b2ed      	uxtb	r5, r5
 8012cb4:	b90b      	cbnz	r3, 8012cba <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cba:	f104 0108 	add.w	r1, r4, #8
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ff ff96 	bl	8012bf0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012cc4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012cc8:	4607      	mov	r7, r0
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f7f7 fe06 	bl	800a8dc <ucdr_serialize_bool>
 8012cd0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012cd4:	4038      	ands	r0, r7
 8012cd6:	b2c7      	uxtb	r7, r0
 8012cd8:	b95b      	cbnz	r3, 8012cf2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012cda:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7f7 fdfc 	bl	800a8dc <ucdr_serialize_bool>
 8012ce4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012ce8:	4007      	ands	r7, r0
 8012cea:	b94b      	cbnz	r3, 8012d00 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012cec:	403d      	ands	r5, r7
 8012cee:	4628      	mov	r0, r5
 8012cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	f7f8 fa8c 	bl	800b214 <ucdr_serialize_uint64_t>
 8012cfc:	4007      	ands	r7, r0
 8012cfe:	e7ec      	b.n	8012cda <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012d00:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012d02:	4630      	mov	r0, r6
 8012d04:	f001 f842 	bl	8013d8c <ucdr_serialize_string>
 8012d08:	4007      	ands	r7, r0
 8012d0a:	b2ff      	uxtb	r7, r7
 8012d0c:	e7ee      	b.n	8012cec <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012d0e:	bf00      	nop

08012d10 <uxr_deserialize_ObjectVariant>:
 8012d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d12:	4605      	mov	r5, r0
 8012d14:	460e      	mov	r6, r1
 8012d16:	f7f7 fe27 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012d1a:	b320      	cbz	r0, 8012d66 <uxr_deserialize_ObjectVariant+0x56>
 8012d1c:	7833      	ldrb	r3, [r6, #0]
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	4604      	mov	r4, r0
 8012d22:	2b0d      	cmp	r3, #13
 8012d24:	d81d      	bhi.n	8012d62 <uxr_deserialize_ObjectVariant+0x52>
 8012d26:	e8df f003 	tbb	[pc, r3]
 8012d2a:	2107      	.short	0x2107
 8012d2c:	21214b4b 	.word	0x21214b4b
 8012d30:	381c2121 	.word	0x381c2121
 8012d34:	876a3838 	.word	0x876a3838
 8012d38:	1d31      	adds	r1, r6, #4
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	f7f7 fe14 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012d40:	4607      	mov	r7, r0
 8012d42:	b138      	cbz	r0, 8012d54 <uxr_deserialize_ObjectVariant+0x44>
 8012d44:	7933      	ldrb	r3, [r6, #4]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	d07c      	beq.n	8012e44 <uxr_deserialize_ObjectVariant+0x134>
 8012d4a:	2b03      	cmp	r3, #3
 8012d4c:	f000 8082 	beq.w	8012e54 <uxr_deserialize_ObjectVariant+0x144>
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d077      	beq.n	8012e44 <uxr_deserialize_ObjectVariant+0x134>
 8012d54:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012d58:	4628      	mov	r0, r5
 8012d5a:	f7f8 fbd7 	bl	800b50c <ucdr_deserialize_int16_t>
 8012d5e:	4038      	ands	r0, r7
 8012d60:	b2c4      	uxtb	r4, r0
 8012d62:	4620      	mov	r0, r4
 8012d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d66:	2400      	movs	r4, #0
 8012d68:	4620      	mov	r0, r4
 8012d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d6c:	1d31      	adds	r1, r6, #4
 8012d6e:	4628      	mov	r0, r5
 8012d70:	f7f7 fdfa 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012d74:	4607      	mov	r7, r0
 8012d76:	b130      	cbz	r0, 8012d86 <uxr_deserialize_ObjectVariant+0x76>
 8012d78:	7933      	ldrb	r3, [r6, #4]
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	d037      	beq.n	8012dee <uxr_deserialize_ObjectVariant+0xde>
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d02a      	beq.n	8012dd8 <uxr_deserialize_ObjectVariant+0xc8>
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	d033      	beq.n	8012dee <uxr_deserialize_ObjectVariant+0xde>
 8012d86:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	2202      	movs	r2, #2
 8012d8e:	f000 ff41 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012d92:	4038      	ands	r0, r7
 8012d94:	b2c4      	uxtb	r4, r0
 8012d96:	4620      	mov	r0, r4
 8012d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d9a:	1d31      	adds	r1, r6, #4
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	f7f7 fde3 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d0df      	beq.n	8012d66 <uxr_deserialize_ObjectVariant+0x56>
 8012da6:	7933      	ldrb	r3, [r6, #4]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d001      	beq.n	8012db0 <uxr_deserialize_ObjectVariant+0xa0>
 8012dac:	2b02      	cmp	r3, #2
 8012dae:	d1d8      	bne.n	8012d62 <uxr_deserialize_ObjectVariant+0x52>
 8012db0:	68b1      	ldr	r1, [r6, #8]
 8012db2:	4628      	mov	r0, r5
 8012db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012dbc:	f000 bff6 	b.w	8013dac <ucdr_deserialize_string>
 8012dc0:	1d31      	adds	r1, r6, #4
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	f7f7 fdd0 	bl	800a968 <ucdr_deserialize_uint8_t>
 8012dc8:	4607      	mov	r7, r0
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0db      	beq.n	8012d86 <uxr_deserialize_ObjectVariant+0x76>
 8012dce:	7933      	ldrb	r3, [r6, #4]
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d00c      	beq.n	8012dee <uxr_deserialize_ObjectVariant+0xde>
 8012dd4:	2b03      	cmp	r3, #3
 8012dd6:	d1d6      	bne.n	8012d86 <uxr_deserialize_ObjectVariant+0x76>
 8012dd8:	f106 0308 	add.w	r3, r6, #8
 8012ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012de0:	f106 010c 	add.w	r1, r6, #12
 8012de4:	4628      	mov	r0, r5
 8012de6:	f000 ffb7 	bl	8013d58 <ucdr_deserialize_sequence_uint8_t>
 8012dea:	4607      	mov	r7, r0
 8012dec:	e7cb      	b.n	8012d86 <uxr_deserialize_ObjectVariant+0x76>
 8012dee:	68b1      	ldr	r1, [r6, #8]
 8012df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012df4:	4628      	mov	r0, r5
 8012df6:	f000 ffd9 	bl	8013dac <ucdr_deserialize_string>
 8012dfa:	4607      	mov	r7, r0
 8012dfc:	e7c3      	b.n	8012d86 <uxr_deserialize_ObjectVariant+0x76>
 8012dfe:	2204      	movs	r2, #4
 8012e00:	18b1      	adds	r1, r6, r2
 8012e02:	4628      	mov	r0, r5
 8012e04:	f000 ff06 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012e08:	2202      	movs	r2, #2
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	f106 0108 	add.w	r1, r6, #8
 8012e10:	4628      	mov	r0, r5
 8012e12:	f000 feff 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012e16:	2202      	movs	r2, #2
 8012e18:	4004      	ands	r4, r0
 8012e1a:	f106 010a 	add.w	r1, r6, #10
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f000 fef8 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012e24:	b2e4      	uxtb	r4, r4
 8012e26:	4603      	mov	r3, r0
 8012e28:	f106 010c 	add.w	r1, r6, #12
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	401c      	ands	r4, r3
 8012e30:	f7f7 fd6a 	bl	800a908 <ucdr_deserialize_bool>
 8012e34:	4004      	ands	r4, r0
 8012e36:	e794      	b.n	8012d62 <uxr_deserialize_ObjectVariant+0x52>
 8012e38:	1d31      	adds	r1, r6, #4
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e40:	f7ff bcac 	b.w	801279c <uxr_deserialize_CLIENT_Representation>
 8012e44:	68b1      	ldr	r1, [r6, #8]
 8012e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f000 ffae 	bl	8013dac <ucdr_deserialize_string>
 8012e50:	4607      	mov	r7, r0
 8012e52:	e77f      	b.n	8012d54 <uxr_deserialize_ObjectVariant+0x44>
 8012e54:	f106 0308 	add.w	r3, r6, #8
 8012e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e5c:	f106 010c 	add.w	r1, r6, #12
 8012e60:	4628      	mov	r0, r5
 8012e62:	f000 ff79 	bl	8013d58 <ucdr_deserialize_sequence_uint8_t>
 8012e66:	4607      	mov	r7, r0
 8012e68:	e774      	b.n	8012d54 <uxr_deserialize_ObjectVariant+0x44>
 8012e6a:	bf00      	nop

08012e6c <uxr_deserialize_BaseObjectRequest>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	2202      	movs	r2, #2
 8012e70:	4605      	mov	r5, r0
 8012e72:	460e      	mov	r6, r1
 8012e74:	f000 fece 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012e78:	1cb1      	adds	r1, r6, #2
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	2202      	movs	r2, #2
 8012e7e:	4628      	mov	r0, r5
 8012e80:	f000 fec8 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8012e84:	4020      	ands	r0, r4
 8012e86:	b2c0      	uxtb	r0, r0
 8012e88:	bd70      	pop	{r4, r5, r6, pc}
 8012e8a:	bf00      	nop

08012e8c <uxr_serialize_AGENT_ActivityInfo>:
 8012e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e90:	460e      	mov	r6, r1
 8012e92:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012e96:	4607      	mov	r7, r0
 8012e98:	f7f8 fab8 	bl	800b40c <ucdr_serialize_int16_t>
 8012e9c:	6871      	ldr	r1, [r6, #4]
 8012e9e:	4680      	mov	r8, r0
 8012ea0:	4638      	mov	r0, r7
 8012ea2:	f7f7 ff61 	bl	800ad68 <ucdr_serialize_uint32_t>
 8012ea6:	6873      	ldr	r3, [r6, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d06a      	beq.n	8012f82 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8012eac:	b318      	cbz	r0, 8012ef6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012eae:	f106 0904 	add.w	r9, r6, #4
 8012eb2:	2500      	movs	r5, #0
 8012eb4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012eb8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8012ebc:	7a21      	ldrb	r1, [r4, #8]
 8012ebe:	4638      	mov	r0, r7
 8012ec0:	f7f7 fd3c 	bl	800a93c <ucdr_serialize_uint8_t>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d051      	beq.n	8012f6c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012ec8:	7a23      	ldrb	r3, [r4, #8]
 8012eca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012ece:	00c9      	lsls	r1, r1, #3
 8012ed0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8012ed4:	2b03      	cmp	r3, #3
 8012ed6:	d859      	bhi.n	8012f8c <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012ed8:	e8df f003 	tbb	[pc, r3]
 8012edc:	02122436 	.word	0x02122436
 8012ee0:	4449      	add	r1, r9
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	6889      	ldr	r1, [r1, #8]
 8012ee6:	f000 ff51 	bl	8013d8c <ucdr_serialize_string>
 8012eea:	6873      	ldr	r3, [r6, #4]
 8012eec:	3501      	adds	r5, #1
 8012eee:	429d      	cmp	r5, r3
 8012ef0:	d240      	bcs.n	8012f74 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	d1de      	bne.n	8012eb4 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012ef6:	f04f 0800 	mov.w	r8, #0
 8012efa:	4640      	mov	r0, r8
 8012efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f00:	3108      	adds	r1, #8
 8012f02:	4449      	add	r1, r9
 8012f04:	2210      	movs	r2, #16
 8012f06:	4638      	mov	r0, r7
 8012f08:	f000 fe20 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012f0c:	44aa      	add	sl, r5
 8012f0e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012f12:	4604      	mov	r4, r0
 8012f14:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012f18:	4638      	mov	r0, r7
 8012f1a:	f7f7 ff25 	bl	800ad68 <ucdr_serialize_uint32_t>
 8012f1e:	4020      	ands	r0, r4
 8012f20:	b2c0      	uxtb	r0, r0
 8012f22:	e7e2      	b.n	8012eea <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012f24:	3108      	adds	r1, #8
 8012f26:	4449      	add	r1, r9
 8012f28:	2204      	movs	r2, #4
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	f000 fe0e 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012f30:	44aa      	add	sl, r5
 8012f32:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012f36:	4604      	mov	r4, r0
 8012f38:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8012f3c:	4638      	mov	r0, r7
 8012f3e:	f7f7 fd29 	bl	800a994 <ucdr_serialize_uint16_t>
 8012f42:	4020      	ands	r0, r4
 8012f44:	b2c0      	uxtb	r0, r0
 8012f46:	e7d0      	b.n	8012eea <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012f48:	3108      	adds	r1, #8
 8012f4a:	4449      	add	r1, r9
 8012f4c:	2202      	movs	r2, #2
 8012f4e:	4638      	mov	r0, r7
 8012f50:	f000 fdfc 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8012f54:	44aa      	add	sl, r5
 8012f56:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012f60:	4638      	mov	r0, r7
 8012f62:	f7f7 fceb 	bl	800a93c <ucdr_serialize_uint8_t>
 8012f66:	4020      	ands	r0, r4
 8012f68:	b2c0      	uxtb	r0, r0
 8012f6a:	e7be      	b.n	8012eea <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012f6c:	6873      	ldr	r3, [r6, #4]
 8012f6e:	3501      	adds	r5, #1
 8012f70:	429d      	cmp	r5, r3
 8012f72:	d3c0      	bcc.n	8012ef6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012f74:	ea08 0000 	and.w	r0, r8, r0
 8012f78:	fa5f f880 	uxtb.w	r8, r0
 8012f7c:	4640      	mov	r0, r8
 8012f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f82:	ea08 0800 	and.w	r8, r8, r0
 8012f86:	fa5f f888 	uxtb.w	r8, r8
 8012f8a:	e7b6      	b.n	8012efa <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012f8c:	6873      	ldr	r3, [r6, #4]
 8012f8e:	3501      	adds	r5, #1
 8012f90:	42ab      	cmp	r3, r5
 8012f92:	f104 0418 	add.w	r4, r4, #24
 8012f96:	d891      	bhi.n	8012ebc <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012f98:	e7af      	b.n	8012efa <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012f9a:	bf00      	nop

08012f9c <uxr_serialize_ActivityInfoVariant>:
 8012f9c:	b570      	push	{r4, r5, r6, lr}
 8012f9e:	460d      	mov	r5, r1
 8012fa0:	7809      	ldrb	r1, [r1, #0]
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	f7f7 fcca 	bl	800a93c <ucdr_serialize_uint8_t>
 8012fa8:	b130      	cbz	r0, 8012fb8 <uxr_serialize_ActivityInfoVariant+0x1c>
 8012faa:	782b      	ldrb	r3, [r5, #0]
 8012fac:	2b06      	cmp	r3, #6
 8012fae:	d019      	beq.n	8012fe4 <uxr_serialize_ActivityInfoVariant+0x48>
 8012fb0:	2b0d      	cmp	r3, #13
 8012fb2:	d010      	beq.n	8012fd6 <uxr_serialize_ActivityInfoVariant+0x3a>
 8012fb4:	2b05      	cmp	r3, #5
 8012fb6:	d000      	beq.n	8012fba <uxr_serialize_ActivityInfoVariant+0x1e>
 8012fb8:	bd70      	pop	{r4, r5, r6, pc}
 8012fba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	f7f8 fa24 	bl	800b40c <ucdr_serialize_int16_t>
 8012fc4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f7f8 f922 	bl	800b214 <ucdr_serialize_uint64_t>
 8012fd0:	4020      	ands	r0, r4
 8012fd2:	b2c0      	uxtb	r0, r0
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	f105 0108 	add.w	r1, r5, #8
 8012fda:	4630      	mov	r0, r6
 8012fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fe0:	f7ff bf54 	b.w	8012e8c <uxr_serialize_AGENT_ActivityInfo>
 8012fe4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012fe8:	4630      	mov	r0, r6
 8012fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fee:	f7f8 ba0d 	b.w	800b40c <ucdr_serialize_int16_t>
 8012ff2:	bf00      	nop

08012ff4 <uxr_deserialize_BaseObjectReply>:
 8012ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	460f      	mov	r7, r1
 8012ffe:	f000 fe09 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013002:	2202      	movs	r2, #2
 8013004:	1cb9      	adds	r1, r7, #2
 8013006:	4605      	mov	r5, r0
 8013008:	4630      	mov	r0, r6
 801300a:	f000 fe03 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 801300e:	1d39      	adds	r1, r7, #4
 8013010:	4680      	mov	r8, r0
 8013012:	4630      	mov	r0, r6
 8013014:	f7f7 fca8 	bl	800a968 <ucdr_deserialize_uint8_t>
 8013018:	1d79      	adds	r1, r7, #5
 801301a:	4604      	mov	r4, r0
 801301c:	4630      	mov	r0, r6
 801301e:	f7f7 fca3 	bl	800a968 <ucdr_deserialize_uint8_t>
 8013022:	ea05 0508 	and.w	r5, r5, r8
 8013026:	402c      	ands	r4, r5
 8013028:	4020      	ands	r0, r4
 801302a:	b2c0      	uxtb	r0, r0
 801302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013030 <uxr_serialize_ReadSpecification>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	460e      	mov	r6, r1
 8013036:	7809      	ldrb	r1, [r1, #0]
 8013038:	4607      	mov	r7, r0
 801303a:	f7f7 fc7f 	bl	800a93c <ucdr_serialize_uint8_t>
 801303e:	7871      	ldrb	r1, [r6, #1]
 8013040:	4604      	mov	r4, r0
 8013042:	4638      	mov	r0, r7
 8013044:	f7f7 fc7a 	bl	800a93c <ucdr_serialize_uint8_t>
 8013048:	78b1      	ldrb	r1, [r6, #2]
 801304a:	4004      	ands	r4, r0
 801304c:	4638      	mov	r0, r7
 801304e:	f7f7 fc45 	bl	800a8dc <ucdr_serialize_bool>
 8013052:	78b3      	ldrb	r3, [r6, #2]
 8013054:	b2e4      	uxtb	r4, r4
 8013056:	4004      	ands	r4, r0
 8013058:	b94b      	cbnz	r3, 801306e <uxr_serialize_ReadSpecification+0x3e>
 801305a:	7a31      	ldrb	r1, [r6, #8]
 801305c:	4638      	mov	r0, r7
 801305e:	f7f7 fc3d 	bl	800a8dc <ucdr_serialize_bool>
 8013062:	7a33      	ldrb	r3, [r6, #8]
 8013064:	4004      	ands	r4, r0
 8013066:	b943      	cbnz	r3, 801307a <uxr_serialize_ReadSpecification+0x4a>
 8013068:	4620      	mov	r0, r4
 801306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306e:	6871      	ldr	r1, [r6, #4]
 8013070:	4638      	mov	r0, r7
 8013072:	f000 fe8b 	bl	8013d8c <ucdr_serialize_string>
 8013076:	4004      	ands	r4, r0
 8013078:	e7ef      	b.n	801305a <uxr_serialize_ReadSpecification+0x2a>
 801307a:	8971      	ldrh	r1, [r6, #10]
 801307c:	4638      	mov	r0, r7
 801307e:	f7f7 fc89 	bl	800a994 <ucdr_serialize_uint16_t>
 8013082:	89b1      	ldrh	r1, [r6, #12]
 8013084:	4605      	mov	r5, r0
 8013086:	4638      	mov	r0, r7
 8013088:	f7f7 fc84 	bl	800a994 <ucdr_serialize_uint16_t>
 801308c:	89f1      	ldrh	r1, [r6, #14]
 801308e:	4005      	ands	r5, r0
 8013090:	4638      	mov	r0, r7
 8013092:	f7f7 fc7f 	bl	800a994 <ucdr_serialize_uint16_t>
 8013096:	8a31      	ldrh	r1, [r6, #16]
 8013098:	4680      	mov	r8, r0
 801309a:	4638      	mov	r0, r7
 801309c:	f7f7 fc7a 	bl	800a994 <ucdr_serialize_uint16_t>
 80130a0:	b2ed      	uxtb	r5, r5
 80130a2:	4025      	ands	r5, r4
 80130a4:	ea08 0505 	and.w	r5, r8, r5
 80130a8:	ea00 0405 	and.w	r4, r0, r5
 80130ac:	4620      	mov	r0, r4
 80130ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b2:	bf00      	nop

080130b4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80130b4:	f7ff bb16 	b.w	80126e4 <uxr_serialize_CLIENT_Representation>

080130b8 <uxr_serialize_CREATE_Payload>:
 80130b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ba:	2202      	movs	r2, #2
 80130bc:	4606      	mov	r6, r0
 80130be:	460d      	mov	r5, r1
 80130c0:	f000 fd44 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80130c4:	1ca9      	adds	r1, r5, #2
 80130c6:	4604      	mov	r4, r0
 80130c8:	2202      	movs	r2, #2
 80130ca:	4630      	mov	r0, r6
 80130cc:	f000 fd3e 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80130d0:	7929      	ldrb	r1, [r5, #4]
 80130d2:	4607      	mov	r7, r0
 80130d4:	4630      	mov	r0, r6
 80130d6:	f7f7 fc31 	bl	800a93c <ucdr_serialize_uint8_t>
 80130da:	b328      	cbz	r0, 8013128 <uxr_serialize_CREATE_Payload+0x70>
 80130dc:	792b      	ldrb	r3, [r5, #4]
 80130de:	403c      	ands	r4, r7
 80130e0:	3b01      	subs	r3, #1
 80130e2:	b2e4      	uxtb	r4, r4
 80130e4:	2b0d      	cmp	r3, #13
 80130e6:	d81d      	bhi.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 80130e8:	e8df f003 	tbb	[pc, r3]
 80130ec:	32320753 	.word	0x32320753
 80130f0:	07070707 	.word	0x07070707
 80130f4:	2121211c 	.word	0x2121211c
 80130f8:	684c      	.short	0x684c
 80130fa:	7a29      	ldrb	r1, [r5, #8]
 80130fc:	4630      	mov	r0, r6
 80130fe:	f7f7 fc1d 	bl	800a93c <ucdr_serialize_uint8_t>
 8013102:	4607      	mov	r7, r0
 8013104:	b130      	cbz	r0, 8013114 <uxr_serialize_CREATE_Payload+0x5c>
 8013106:	7a2b      	ldrb	r3, [r5, #8]
 8013108:	2b02      	cmp	r3, #2
 801310a:	d035      	beq.n	8013178 <uxr_serialize_CREATE_Payload+0xc0>
 801310c:	2b03      	cmp	r3, #3
 801310e:	d02b      	beq.n	8013168 <uxr_serialize_CREATE_Payload+0xb0>
 8013110:	2b01      	cmp	r3, #1
 8013112:	d031      	beq.n	8013178 <uxr_serialize_CREATE_Payload+0xc0>
 8013114:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013118:	4630      	mov	r0, r6
 801311a:	2202      	movs	r2, #2
 801311c:	f000 fd16 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8013120:	4038      	ands	r0, r7
 8013122:	4004      	ands	r4, r0
 8013124:	4620      	mov	r0, r4
 8013126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013128:	2400      	movs	r4, #0
 801312a:	4620      	mov	r0, r4
 801312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801312e:	7a29      	ldrb	r1, [r5, #8]
 8013130:	4630      	mov	r0, r6
 8013132:	f7f7 fc03 	bl	800a93c <ucdr_serialize_uint8_t>
 8013136:	2800      	cmp	r0, #0
 8013138:	d0f6      	beq.n	8013128 <uxr_serialize_CREATE_Payload+0x70>
 801313a:	7a2b      	ldrb	r3, [r5, #8]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d001      	beq.n	8013144 <uxr_serialize_CREATE_Payload+0x8c>
 8013140:	2b02      	cmp	r3, #2
 8013142:	d1ef      	bne.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 8013144:	68e9      	ldr	r1, [r5, #12]
 8013146:	4630      	mov	r0, r6
 8013148:	f000 fe20 	bl	8013d8c <ucdr_serialize_string>
 801314c:	4004      	ands	r4, r0
 801314e:	e7e9      	b.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 8013150:	7a29      	ldrb	r1, [r5, #8]
 8013152:	4630      	mov	r0, r6
 8013154:	f7f7 fbf2 	bl	800a93c <ucdr_serialize_uint8_t>
 8013158:	4607      	mov	r7, r0
 801315a:	2800      	cmp	r0, #0
 801315c:	d0da      	beq.n	8013114 <uxr_serialize_CREATE_Payload+0x5c>
 801315e:	7a2b      	ldrb	r3, [r5, #8]
 8013160:	2b02      	cmp	r3, #2
 8013162:	d009      	beq.n	8013178 <uxr_serialize_CREATE_Payload+0xc0>
 8013164:	2b03      	cmp	r3, #3
 8013166:	d1d5      	bne.n	8013114 <uxr_serialize_CREATE_Payload+0x5c>
 8013168:	68ea      	ldr	r2, [r5, #12]
 801316a:	f105 0110 	add.w	r1, r5, #16
 801316e:	4630      	mov	r0, r6
 8013170:	f000 fde0 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 8013174:	4607      	mov	r7, r0
 8013176:	e7cd      	b.n	8013114 <uxr_serialize_CREATE_Payload+0x5c>
 8013178:	68e9      	ldr	r1, [r5, #12]
 801317a:	4630      	mov	r0, r6
 801317c:	f000 fe06 	bl	8013d8c <ucdr_serialize_string>
 8013180:	4607      	mov	r7, r0
 8013182:	e7c7      	b.n	8013114 <uxr_serialize_CREATE_Payload+0x5c>
 8013184:	f105 0108 	add.w	r1, r5, #8
 8013188:	4630      	mov	r0, r6
 801318a:	f7ff fb71 	bl	8012870 <uxr_serialize_AGENT_Representation>
 801318e:	4004      	ands	r4, r0
 8013190:	e7c8      	b.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 8013192:	7a29      	ldrb	r1, [r5, #8]
 8013194:	4630      	mov	r0, r6
 8013196:	f7f7 fbd1 	bl	800a93c <ucdr_serialize_uint8_t>
 801319a:	4607      	mov	r7, r0
 801319c:	b130      	cbz	r0, 80131ac <uxr_serialize_CREATE_Payload+0xf4>
 801319e:	7a2b      	ldrb	r3, [r5, #8]
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	d012      	beq.n	80131ca <uxr_serialize_CREATE_Payload+0x112>
 80131a4:	2b03      	cmp	r3, #3
 80131a6:	d016      	beq.n	80131d6 <uxr_serialize_CREATE_Payload+0x11e>
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d00e      	beq.n	80131ca <uxr_serialize_CREATE_Payload+0x112>
 80131ac:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 80131b0:	4630      	mov	r0, r6
 80131b2:	f7f8 f92b 	bl	800b40c <ucdr_serialize_int16_t>
 80131b6:	4038      	ands	r0, r7
 80131b8:	4004      	ands	r4, r0
 80131ba:	e7b3      	b.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 80131bc:	f105 0108 	add.w	r1, r5, #8
 80131c0:	4630      	mov	r0, r6
 80131c2:	f7ff fa8f 	bl	80126e4 <uxr_serialize_CLIENT_Representation>
 80131c6:	4004      	ands	r4, r0
 80131c8:	e7ac      	b.n	8013124 <uxr_serialize_CREATE_Payload+0x6c>
 80131ca:	68e9      	ldr	r1, [r5, #12]
 80131cc:	4630      	mov	r0, r6
 80131ce:	f000 fddd 	bl	8013d8c <ucdr_serialize_string>
 80131d2:	4607      	mov	r7, r0
 80131d4:	e7ea      	b.n	80131ac <uxr_serialize_CREATE_Payload+0xf4>
 80131d6:	68ea      	ldr	r2, [r5, #12]
 80131d8:	f105 0110 	add.w	r1, r5, #16
 80131dc:	4630      	mov	r0, r6
 80131de:	f000 fda9 	bl	8013d34 <ucdr_serialize_sequence_uint8_t>
 80131e2:	4607      	mov	r7, r0
 80131e4:	e7e2      	b.n	80131ac <uxr_serialize_CREATE_Payload+0xf4>
 80131e6:	bf00      	nop

080131e8 <uxr_deserialize_GET_INFO_Payload>:
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	2202      	movs	r2, #2
 80131ec:	4605      	mov	r5, r0
 80131ee:	460e      	mov	r6, r1
 80131f0:	f000 fd10 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80131f4:	1cb1      	adds	r1, r6, #2
 80131f6:	2202      	movs	r2, #2
 80131f8:	4604      	mov	r4, r0
 80131fa:	4628      	mov	r0, r5
 80131fc:	f000 fd0a 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013200:	1d31      	adds	r1, r6, #4
 8013202:	4004      	ands	r4, r0
 8013204:	4628      	mov	r0, r5
 8013206:	f7f7 fedf 	bl	800afc8 <ucdr_deserialize_uint32_t>
 801320a:	b2e4      	uxtb	r4, r4
 801320c:	4020      	ands	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}

08013210 <uxr_serialize_DELETE_Payload>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	2202      	movs	r2, #2
 8013214:	4605      	mov	r5, r0
 8013216:	460e      	mov	r6, r1
 8013218:	f000 fc98 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801321c:	1cb1      	adds	r1, r6, #2
 801321e:	4604      	mov	r4, r0
 8013220:	2202      	movs	r2, #2
 8013222:	4628      	mov	r0, r5
 8013224:	f000 fc92 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8013228:	4020      	ands	r0, r4
 801322a:	b2c0      	uxtb	r0, r0
 801322c:	bd70      	pop	{r4, r5, r6, pc}
 801322e:	bf00      	nop

08013230 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013234:	4606      	mov	r6, r0
 8013236:	460f      	mov	r7, r1
 8013238:	f7f7 fb96 	bl	800a968 <ucdr_deserialize_uint8_t>
 801323c:	1c79      	adds	r1, r7, #1
 801323e:	4605      	mov	r5, r0
 8013240:	4630      	mov	r0, r6
 8013242:	f7f7 fb91 	bl	800a968 <ucdr_deserialize_uint8_t>
 8013246:	1d39      	adds	r1, r7, #4
 8013248:	4681      	mov	r9, r0
 801324a:	2204      	movs	r2, #4
 801324c:	4630      	mov	r0, r6
 801324e:	f000 fce1 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013252:	f107 0108 	add.w	r1, r7, #8
 8013256:	4604      	mov	r4, r0
 8013258:	2202      	movs	r2, #2
 801325a:	4630      	mov	r0, r6
 801325c:	f000 fcda 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013260:	f107 010a 	add.w	r1, r7, #10
 8013264:	4680      	mov	r8, r0
 8013266:	2202      	movs	r2, #2
 8013268:	4630      	mov	r0, r6
 801326a:	f000 fcd3 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 801326e:	ea05 0509 	and.w	r5, r5, r9
 8013272:	b2ed      	uxtb	r5, r5
 8013274:	402c      	ands	r4, r5
 8013276:	f107 010c 	add.w	r1, r7, #12
 801327a:	4605      	mov	r5, r0
 801327c:	4630      	mov	r0, r6
 801327e:	f7f7 fb43 	bl	800a908 <ucdr_deserialize_bool>
 8013282:	ea08 0404 	and.w	r4, r8, r4
 8013286:	4025      	ands	r5, r4
 8013288:	4028      	ands	r0, r5
 801328a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801328e:	bf00      	nop

08013290 <uxr_deserialize_STATUS_Payload>:
 8013290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013294:	2202      	movs	r2, #2
 8013296:	4606      	mov	r6, r0
 8013298:	460f      	mov	r7, r1
 801329a:	f000 fcbb 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 801329e:	2202      	movs	r2, #2
 80132a0:	1cb9      	adds	r1, r7, #2
 80132a2:	4605      	mov	r5, r0
 80132a4:	4630      	mov	r0, r6
 80132a6:	f000 fcb5 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80132aa:	1d39      	adds	r1, r7, #4
 80132ac:	4680      	mov	r8, r0
 80132ae:	4630      	mov	r0, r6
 80132b0:	f7f7 fb5a 	bl	800a968 <ucdr_deserialize_uint8_t>
 80132b4:	1d79      	adds	r1, r7, #5
 80132b6:	4604      	mov	r4, r0
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7f7 fb55 	bl	800a968 <ucdr_deserialize_uint8_t>
 80132be:	ea05 0508 	and.w	r5, r5, r8
 80132c2:	402c      	ands	r4, r5
 80132c4:	4020      	ands	r0, r4
 80132c6:	b2c0      	uxtb	r0, r0
 80132c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132cc <uxr_serialize_INFO_Payload>:
 80132cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d0:	2202      	movs	r2, #2
 80132d2:	460c      	mov	r4, r1
 80132d4:	4605      	mov	r5, r0
 80132d6:	f000 fc39 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80132da:	2202      	movs	r2, #2
 80132dc:	4680      	mov	r8, r0
 80132de:	1ca1      	adds	r1, r4, #2
 80132e0:	4628      	mov	r0, r5
 80132e2:	f000 fc33 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80132e6:	7921      	ldrb	r1, [r4, #4]
 80132e8:	4607      	mov	r7, r0
 80132ea:	4628      	mov	r0, r5
 80132ec:	f7f7 fb26 	bl	800a93c <ucdr_serialize_uint8_t>
 80132f0:	7961      	ldrb	r1, [r4, #5]
 80132f2:	4606      	mov	r6, r0
 80132f4:	4628      	mov	r0, r5
 80132f6:	f7f7 fb21 	bl	800a93c <ucdr_serialize_uint8_t>
 80132fa:	ea08 0807 	and.w	r8, r8, r7
 80132fe:	ea06 0608 	and.w	r6, r6, r8
 8013302:	4006      	ands	r6, r0
 8013304:	7a21      	ldrb	r1, [r4, #8]
 8013306:	4628      	mov	r0, r5
 8013308:	f7f7 fae8 	bl	800a8dc <ucdr_serialize_bool>
 801330c:	7a23      	ldrb	r3, [r4, #8]
 801330e:	b2f7      	uxtb	r7, r6
 8013310:	4606      	mov	r6, r0
 8013312:	b96b      	cbnz	r3, 8013330 <uxr_serialize_INFO_Payload+0x64>
 8013314:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013318:	4628      	mov	r0, r5
 801331a:	f7f7 fadf 	bl	800a8dc <ucdr_serialize_bool>
 801331e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013322:	4030      	ands	r0, r6
 8013324:	b2c6      	uxtb	r6, r0
 8013326:	b983      	cbnz	r3, 801334a <uxr_serialize_INFO_Payload+0x7e>
 8013328:	ea06 0007 	and.w	r0, r6, r7
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013330:	7b21      	ldrb	r1, [r4, #12]
 8013332:	4628      	mov	r0, r5
 8013334:	f7f7 fb02 	bl	800a93c <ucdr_serialize_uint8_t>
 8013338:	b188      	cbz	r0, 801335e <uxr_serialize_INFO_Payload+0x92>
 801333a:	f104 010c 	add.w	r1, r4, #12
 801333e:	4628      	mov	r0, r5
 8013340:	f7ff fae2 	bl	8012908 <uxr_serialize_ObjectVariant.part.0>
 8013344:	4030      	ands	r0, r6
 8013346:	b2c6      	uxtb	r6, r0
 8013348:	e7e4      	b.n	8013314 <uxr_serialize_INFO_Payload+0x48>
 801334a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801334e:	4628      	mov	r0, r5
 8013350:	f7ff fe24 	bl	8012f9c <uxr_serialize_ActivityInfoVariant>
 8013354:	4006      	ands	r6, r0
 8013356:	ea06 0007 	and.w	r0, r6, r7
 801335a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801335e:	4606      	mov	r6, r0
 8013360:	e7d8      	b.n	8013314 <uxr_serialize_INFO_Payload+0x48>
 8013362:	bf00      	nop

08013364 <uxr_serialize_READ_DATA_Payload>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	2202      	movs	r2, #2
 8013368:	4605      	mov	r5, r0
 801336a:	460e      	mov	r6, r1
 801336c:	f000 fbee 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8013370:	1cb1      	adds	r1, r6, #2
 8013372:	2202      	movs	r2, #2
 8013374:	4604      	mov	r4, r0
 8013376:	4628      	mov	r0, r5
 8013378:	f000 fbe8 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 801337c:	1d31      	adds	r1, r6, #4
 801337e:	4004      	ands	r4, r0
 8013380:	4628      	mov	r0, r5
 8013382:	f7ff fe55 	bl	8013030 <uxr_serialize_ReadSpecification>
 8013386:	b2e4      	uxtb	r4, r4
 8013388:	4020      	ands	r0, r4
 801338a:	bd70      	pop	{r4, r5, r6, pc}

0801338c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801338c:	b570      	push	{r4, r5, r6, lr}
 801338e:	2202      	movs	r2, #2
 8013390:	4605      	mov	r5, r0
 8013392:	460e      	mov	r6, r1
 8013394:	f000 fbda 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 8013398:	1cb1      	adds	r1, r6, #2
 801339a:	4604      	mov	r4, r0
 801339c:	2202      	movs	r2, #2
 801339e:	4628      	mov	r0, r5
 80133a0:	f000 fbd4 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80133a4:	4020      	ands	r0, r4
 80133a6:	b2c0      	uxtb	r0, r0
 80133a8:	bd70      	pop	{r4, r5, r6, pc}
 80133aa:	bf00      	nop

080133ac <uxr_serialize_ACKNACK_Payload>:
 80133ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ae:	460f      	mov	r7, r1
 80133b0:	460e      	mov	r6, r1
 80133b2:	f837 1b02 	ldrh.w	r1, [r7], #2
 80133b6:	4605      	mov	r5, r0
 80133b8:	f7f7 faec 	bl	800a994 <ucdr_serialize_uint16_t>
 80133bc:	4639      	mov	r1, r7
 80133be:	2202      	movs	r2, #2
 80133c0:	4604      	mov	r4, r0
 80133c2:	4628      	mov	r0, r5
 80133c4:	f000 fbc2 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80133c8:	7931      	ldrb	r1, [r6, #4]
 80133ca:	4004      	ands	r4, r0
 80133cc:	4628      	mov	r0, r5
 80133ce:	f7f7 fab5 	bl	800a93c <ucdr_serialize_uint8_t>
 80133d2:	b2e4      	uxtb	r4, r4
 80133d4:	4020      	ands	r0, r4
 80133d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080133d8 <uxr_deserialize_ACKNACK_Payload>:
 80133d8:	b570      	push	{r4, r5, r6, lr}
 80133da:	4605      	mov	r5, r0
 80133dc:	460e      	mov	r6, r1
 80133de:	f7f7 fbd9 	bl	800ab94 <ucdr_deserialize_uint16_t>
 80133e2:	1cb1      	adds	r1, r6, #2
 80133e4:	2202      	movs	r2, #2
 80133e6:	4604      	mov	r4, r0
 80133e8:	4628      	mov	r0, r5
 80133ea:	f000 fc13 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80133ee:	1d31      	adds	r1, r6, #4
 80133f0:	4004      	ands	r4, r0
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7f7 fab8 	bl	800a968 <ucdr_deserialize_uint8_t>
 80133f8:	b2e4      	uxtb	r4, r4
 80133fa:	4020      	ands	r0, r4
 80133fc:	bd70      	pop	{r4, r5, r6, pc}
 80133fe:	bf00      	nop

08013400 <uxr_serialize_HEARTBEAT_Payload>:
 8013400:	b570      	push	{r4, r5, r6, lr}
 8013402:	460d      	mov	r5, r1
 8013404:	8809      	ldrh	r1, [r1, #0]
 8013406:	4606      	mov	r6, r0
 8013408:	f7f7 fac4 	bl	800a994 <ucdr_serialize_uint16_t>
 801340c:	8869      	ldrh	r1, [r5, #2]
 801340e:	4604      	mov	r4, r0
 8013410:	4630      	mov	r0, r6
 8013412:	f7f7 fabf 	bl	800a994 <ucdr_serialize_uint16_t>
 8013416:	7929      	ldrb	r1, [r5, #4]
 8013418:	4004      	ands	r4, r0
 801341a:	4630      	mov	r0, r6
 801341c:	f7f7 fa8e 	bl	800a93c <ucdr_serialize_uint8_t>
 8013420:	b2e4      	uxtb	r4, r4
 8013422:	4020      	ands	r0, r4
 8013424:	bd70      	pop	{r4, r5, r6, pc}
 8013426:	bf00      	nop

08013428 <uxr_deserialize_HEARTBEAT_Payload>:
 8013428:	b570      	push	{r4, r5, r6, lr}
 801342a:	4605      	mov	r5, r0
 801342c:	460e      	mov	r6, r1
 801342e:	f7f7 fbb1 	bl	800ab94 <ucdr_deserialize_uint16_t>
 8013432:	1cb1      	adds	r1, r6, #2
 8013434:	4604      	mov	r4, r0
 8013436:	4628      	mov	r0, r5
 8013438:	f7f7 fbac 	bl	800ab94 <ucdr_deserialize_uint16_t>
 801343c:	1d31      	adds	r1, r6, #4
 801343e:	4004      	ands	r4, r0
 8013440:	4628      	mov	r0, r5
 8013442:	f7f7 fa91 	bl	800a968 <ucdr_deserialize_uint8_t>
 8013446:	b2e4      	uxtb	r4, r4
 8013448:	4020      	ands	r0, r4
 801344a:	bd70      	pop	{r4, r5, r6, pc}

0801344c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013450:	4605      	mov	r5, r0
 8013452:	460e      	mov	r6, r1
 8013454:	f7f8 f966 	bl	800b724 <ucdr_deserialize_int32_t>
 8013458:	1d31      	adds	r1, r6, #4
 801345a:	4607      	mov	r7, r0
 801345c:	4628      	mov	r0, r5
 801345e:	f7f7 fdb3 	bl	800afc8 <ucdr_deserialize_uint32_t>
 8013462:	f106 0108 	add.w	r1, r6, #8
 8013466:	4680      	mov	r8, r0
 8013468:	4628      	mov	r0, r5
 801346a:	f7f8 f95b 	bl	800b724 <ucdr_deserialize_int32_t>
 801346e:	f106 010c 	add.w	r1, r6, #12
 8013472:	4604      	mov	r4, r0
 8013474:	4628      	mov	r0, r5
 8013476:	f7f7 fda7 	bl	800afc8 <ucdr_deserialize_uint32_t>
 801347a:	ea07 0708 	and.w	r7, r7, r8
 801347e:	403c      	ands	r4, r7
 8013480:	f106 0110 	add.w	r1, r6, #16
 8013484:	4004      	ands	r4, r0
 8013486:	4628      	mov	r0, r5
 8013488:	f7f8 f94c 	bl	800b724 <ucdr_deserialize_int32_t>
 801348c:	f106 0114 	add.w	r1, r6, #20
 8013490:	4603      	mov	r3, r0
 8013492:	4628      	mov	r0, r5
 8013494:	461d      	mov	r5, r3
 8013496:	f7f7 fd97 	bl	800afc8 <ucdr_deserialize_uint32_t>
 801349a:	b2e4      	uxtb	r4, r4
 801349c:	402c      	ands	r4, r5
 801349e:	4020      	ands	r0, r4
 80134a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134a4 <uxr_serialize_SampleIdentity>:
 80134a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a8:	220c      	movs	r2, #12
 80134aa:	4604      	mov	r4, r0
 80134ac:	460d      	mov	r5, r1
 80134ae:	f000 fb4d 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80134b2:	2203      	movs	r2, #3
 80134b4:	f105 010c 	add.w	r1, r5, #12
 80134b8:	4607      	mov	r7, r0
 80134ba:	4620      	mov	r0, r4
 80134bc:	f000 fb46 	bl	8013b4c <ucdr_serialize_array_uint8_t>
 80134c0:	7be9      	ldrb	r1, [r5, #15]
 80134c2:	4680      	mov	r8, r0
 80134c4:	4620      	mov	r0, r4
 80134c6:	f7f7 fa39 	bl	800a93c <ucdr_serialize_uint8_t>
 80134ca:	6929      	ldr	r1, [r5, #16]
 80134cc:	4606      	mov	r6, r0
 80134ce:	4620      	mov	r0, r4
 80134d0:	f7f8 f890 	bl	800b5f4 <ucdr_serialize_int32_t>
 80134d4:	6969      	ldr	r1, [r5, #20]
 80134d6:	4603      	mov	r3, r0
 80134d8:	4620      	mov	r0, r4
 80134da:	ea07 0708 	and.w	r7, r7, r8
 80134de:	461c      	mov	r4, r3
 80134e0:	f7f7 fc42 	bl	800ad68 <ucdr_serialize_uint32_t>
 80134e4:	403e      	ands	r6, r7
 80134e6:	4034      	ands	r4, r6
 80134e8:	4020      	ands	r0, r4
 80134ea:	b2c0      	uxtb	r0, r0
 80134ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134f0 <uxr_deserialize_SampleIdentity>:
 80134f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f4:	220c      	movs	r2, #12
 80134f6:	4604      	mov	r4, r0
 80134f8:	460d      	mov	r5, r1
 80134fa:	f000 fb8b 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80134fe:	2203      	movs	r2, #3
 8013500:	f105 010c 	add.w	r1, r5, #12
 8013504:	4607      	mov	r7, r0
 8013506:	4620      	mov	r0, r4
 8013508:	f000 fb84 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 801350c:	f105 010f 	add.w	r1, r5, #15
 8013510:	4680      	mov	r8, r0
 8013512:	4620      	mov	r0, r4
 8013514:	f7f7 fa28 	bl	800a968 <ucdr_deserialize_uint8_t>
 8013518:	f105 0110 	add.w	r1, r5, #16
 801351c:	4606      	mov	r6, r0
 801351e:	4620      	mov	r0, r4
 8013520:	f7f8 f900 	bl	800b724 <ucdr_deserialize_int32_t>
 8013524:	f105 0114 	add.w	r1, r5, #20
 8013528:	4603      	mov	r3, r0
 801352a:	4620      	mov	r0, r4
 801352c:	ea07 0708 	and.w	r7, r7, r8
 8013530:	461c      	mov	r4, r3
 8013532:	f7f7 fd49 	bl	800afc8 <ucdr_deserialize_uint32_t>
 8013536:	403e      	ands	r6, r7
 8013538:	4034      	ands	r4, r6
 801353a:	4020      	ands	r0, r4
 801353c:	b2c0      	uxtb	r0, r0
 801353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013542:	bf00      	nop

08013544 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013544:	280b      	cmp	r0, #11
 8013546:	dc0d      	bgt.n	8013564 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013548:	2800      	cmp	r0, #0
 801354a:	db09      	blt.n	8013560 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801354c:	280b      	cmp	r0, #11
 801354e:	d807      	bhi.n	8013560 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013550:	e8df f000 	tbb	[pc, r0]
 8013554:	07060607 	.word	0x07060607
 8013558:	06060606 	.word	0x06060606
 801355c:	07070606 	.word	0x07070606
 8013560:	2001      	movs	r0, #1
 8013562:	4770      	bx	lr
 8013564:	28cb      	cmp	r0, #203	@ 0xcb
 8013566:	bf18      	it	ne
 8013568:	2001      	movne	r0, #1
 801356a:	4770      	bx	lr

0801356c <rcl_get_default_domain_id>:
 801356c:	b530      	push	{r4, r5, lr}
 801356e:	b083      	sub	sp, #12
 8013570:	2300      	movs	r3, #0
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	b1d0      	cbz	r0, 80135ac <rcl_get_default_domain_id+0x40>
 8013576:	4604      	mov	r4, r0
 8013578:	4669      	mov	r1, sp
 801357a:	4815      	ldr	r0, [pc, #84]	@ (80135d0 <rcl_get_default_domain_id+0x64>)
 801357c:	f7fa fe34 	bl	800e1e8 <rcutils_get_env>
 8013580:	4602      	mov	r2, r0
 8013582:	b110      	cbz	r0, 801358a <rcl_get_default_domain_id+0x1e>
 8013584:	2001      	movs	r0, #1
 8013586:	b003      	add	sp, #12
 8013588:	bd30      	pop	{r4, r5, pc}
 801358a:	9b00      	ldr	r3, [sp, #0]
 801358c:	b18b      	cbz	r3, 80135b2 <rcl_get_default_domain_id+0x46>
 801358e:	7818      	ldrb	r0, [r3, #0]
 8013590:	2800      	cmp	r0, #0
 8013592:	d0f8      	beq.n	8013586 <rcl_get_default_domain_id+0x1a>
 8013594:	4618      	mov	r0, r3
 8013596:	a901      	add	r1, sp, #4
 8013598:	9201      	str	r2, [sp, #4]
 801359a:	f001 fb73 	bl	8014c84 <strtoul>
 801359e:	4605      	mov	r5, r0
 80135a0:	b150      	cbz	r0, 80135b8 <rcl_get_default_domain_id+0x4c>
 80135a2:	1c43      	adds	r3, r0, #1
 80135a4:	d00d      	beq.n	80135c2 <rcl_get_default_domain_id+0x56>
 80135a6:	6025      	str	r5, [r4, #0]
 80135a8:	2000      	movs	r0, #0
 80135aa:	e7ec      	b.n	8013586 <rcl_get_default_domain_id+0x1a>
 80135ac:	200b      	movs	r0, #11
 80135ae:	b003      	add	sp, #12
 80135b0:	bd30      	pop	{r4, r5, pc}
 80135b2:	4618      	mov	r0, r3
 80135b4:	b003      	add	sp, #12
 80135b6:	bd30      	pop	{r4, r5, pc}
 80135b8:	9b01      	ldr	r3, [sp, #4]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0f2      	beq.n	80135a6 <rcl_get_default_domain_id+0x3a>
 80135c0:	e7e0      	b.n	8013584 <rcl_get_default_domain_id+0x18>
 80135c2:	f001 fd89 	bl	80150d8 <__errno>
 80135c6:	6803      	ldr	r3, [r0, #0]
 80135c8:	2b22      	cmp	r3, #34	@ 0x22
 80135ca:	d1ec      	bne.n	80135a6 <rcl_get_default_domain_id+0x3a>
 80135cc:	e7da      	b.n	8013584 <rcl_get_default_domain_id+0x18>
 80135ce:	bf00      	nop
 80135d0:	08016d1c 	.word	0x08016d1c

080135d4 <rcl_get_zero_initialized_guard_condition>:
 80135d4:	4a03      	ldr	r2, [pc, #12]	@ (80135e4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80135d6:	4603      	mov	r3, r0
 80135d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80135e0:	4618      	mov	r0, r3
 80135e2:	4770      	bx	lr
 80135e4:	08016d2c 	.word	0x08016d2c

080135e8 <rcl_guard_condition_init_from_rmw>:
 80135e8:	b082      	sub	sp, #8
 80135ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ee:	b086      	sub	sp, #24
 80135f0:	ac0c      	add	r4, sp, #48	@ 0x30
 80135f2:	4684      	mov	ip, r0
 80135f4:	f844 3f04 	str.w	r3, [r4, #4]!
 80135f8:	460f      	mov	r7, r1
 80135fa:	4690      	mov	r8, r2
 80135fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135fe:	ad01      	add	r5, sp, #4
 8013600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	602b      	str	r3, [r5, #0]
 8013606:	a801      	add	r0, sp, #4
 8013608:	4664      	mov	r4, ip
 801360a:	f7f6 ff59 	bl	800a4c0 <rcutils_allocator_is_valid>
 801360e:	b328      	cbz	r0, 801365c <rcl_guard_condition_init_from_rmw+0x74>
 8013610:	b324      	cbz	r4, 801365c <rcl_guard_condition_init_from_rmw+0x74>
 8013612:	6866      	ldr	r6, [r4, #4]
 8013614:	b9e6      	cbnz	r6, 8013650 <rcl_guard_condition_init_from_rmw+0x68>
 8013616:	f1b8 0f00 	cmp.w	r8, #0
 801361a:	d01f      	beq.n	801365c <rcl_guard_condition_init_from_rmw+0x74>
 801361c:	4640      	mov	r0, r8
 801361e:	f7f8 fb47 	bl	800bcb0 <rcl_context_is_valid>
 8013622:	b308      	cbz	r0, 8013668 <rcl_guard_condition_init_from_rmw+0x80>
 8013624:	9b01      	ldr	r3, [sp, #4]
 8013626:	9905      	ldr	r1, [sp, #20]
 8013628:	201c      	movs	r0, #28
 801362a:	4798      	blx	r3
 801362c:	4605      	mov	r5, r0
 801362e:	6060      	str	r0, [r4, #4]
 8013630:	b340      	cbz	r0, 8013684 <rcl_guard_condition_init_from_rmw+0x9c>
 8013632:	b1df      	cbz	r7, 801366c <rcl_guard_condition_init_from_rmw+0x84>
 8013634:	6007      	str	r7, [r0, #0]
 8013636:	7106      	strb	r6, [r0, #4]
 8013638:	ac01      	add	r4, sp, #4
 801363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801363c:	3508      	adds	r5, #8
 801363e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013640:	6823      	ldr	r3, [r4, #0]
 8013642:	602b      	str	r3, [r5, #0]
 8013644:	2000      	movs	r0, #0
 8013646:	b006      	add	sp, #24
 8013648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364c:	b002      	add	sp, #8
 801364e:	4770      	bx	lr
 8013650:	2064      	movs	r0, #100	@ 0x64
 8013652:	b006      	add	sp, #24
 8013654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013658:	b002      	add	sp, #8
 801365a:	4770      	bx	lr
 801365c:	200b      	movs	r0, #11
 801365e:	b006      	add	sp, #24
 8013660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013664:	b002      	add	sp, #8
 8013666:	4770      	bx	lr
 8013668:	2065      	movs	r0, #101	@ 0x65
 801366a:	e7f2      	b.n	8013652 <rcl_guard_condition_init_from_rmw+0x6a>
 801366c:	f8d8 0000 	ldr.w	r0, [r8]
 8013670:	3028      	adds	r0, #40	@ 0x28
 8013672:	f000 f95f 	bl	8013934 <rmw_create_guard_condition>
 8013676:	6028      	str	r0, [r5, #0]
 8013678:	6865      	ldr	r5, [r4, #4]
 801367a:	682e      	ldr	r6, [r5, #0]
 801367c:	b126      	cbz	r6, 8013688 <rcl_guard_condition_init_from_rmw+0xa0>
 801367e:	2301      	movs	r3, #1
 8013680:	712b      	strb	r3, [r5, #4]
 8013682:	e7d9      	b.n	8013638 <rcl_guard_condition_init_from_rmw+0x50>
 8013684:	200a      	movs	r0, #10
 8013686:	e7e4      	b.n	8013652 <rcl_guard_condition_init_from_rmw+0x6a>
 8013688:	4628      	mov	r0, r5
 801368a:	9b02      	ldr	r3, [sp, #8]
 801368c:	9905      	ldr	r1, [sp, #20]
 801368e:	4798      	blx	r3
 8013690:	6066      	str	r6, [r4, #4]
 8013692:	2001      	movs	r0, #1
 8013694:	e7dd      	b.n	8013652 <rcl_guard_condition_init_from_rmw+0x6a>
 8013696:	bf00      	nop

08013698 <rcl_guard_condition_fini>:
 8013698:	b570      	push	{r4, r5, r6, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	b1f0      	cbz	r0, 80136dc <rcl_guard_condition_fini+0x44>
 801369e:	4604      	mov	r4, r0
 80136a0:	6840      	ldr	r0, [r0, #4]
 80136a2:	b158      	cbz	r0, 80136bc <rcl_guard_condition_fini+0x24>
 80136a4:	6803      	ldr	r3, [r0, #0]
 80136a6:	68c6      	ldr	r6, [r0, #12]
 80136a8:	6981      	ldr	r1, [r0, #24]
 80136aa:	b15b      	cbz	r3, 80136c4 <rcl_guard_condition_fini+0x2c>
 80136ac:	7905      	ldrb	r5, [r0, #4]
 80136ae:	b95d      	cbnz	r5, 80136c8 <rcl_guard_condition_fini+0x30>
 80136b0:	47b0      	blx	r6
 80136b2:	2300      	movs	r3, #0
 80136b4:	4628      	mov	r0, r5
 80136b6:	6063      	str	r3, [r4, #4]
 80136b8:	b002      	add	sp, #8
 80136ba:	bd70      	pop	{r4, r5, r6, pc}
 80136bc:	4605      	mov	r5, r0
 80136be:	4628      	mov	r0, r5
 80136c0:	b002      	add	sp, #8
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	461d      	mov	r5, r3
 80136c6:	e7f3      	b.n	80136b0 <rcl_guard_condition_fini+0x18>
 80136c8:	4618      	mov	r0, r3
 80136ca:	9101      	str	r1, [sp, #4]
 80136cc:	f000 f946 	bl	801395c <rmw_destroy_guard_condition>
 80136d0:	1e05      	subs	r5, r0, #0
 80136d2:	9901      	ldr	r1, [sp, #4]
 80136d4:	6860      	ldr	r0, [r4, #4]
 80136d6:	bf18      	it	ne
 80136d8:	2501      	movne	r5, #1
 80136da:	e7e9      	b.n	80136b0 <rcl_guard_condition_fini+0x18>
 80136dc:	250b      	movs	r5, #11
 80136de:	4628      	mov	r0, r5
 80136e0:	b002      	add	sp, #8
 80136e2:	bd70      	pop	{r4, r5, r6, pc}

080136e4 <rcl_guard_condition_get_default_options>:
 80136e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e6:	b087      	sub	sp, #28
 80136e8:	4607      	mov	r7, r0
 80136ea:	466c      	mov	r4, sp
 80136ec:	4668      	mov	r0, sp
 80136ee:	f7f6 fed9 	bl	800a4a4 <rcutils_get_default_allocator>
 80136f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136f4:	4d07      	ldr	r5, [pc, #28]	@ (8013714 <rcl_guard_condition_get_default_options+0x30>)
 80136f6:	f8d4 c000 	ldr.w	ip, [r4]
 80136fa:	462e      	mov	r6, r5
 80136fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80136fe:	462c      	mov	r4, r5
 8013700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013702:	463c      	mov	r4, r7
 8013704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013706:	4638      	mov	r0, r7
 8013708:	f8c6 c000 	str.w	ip, [r6]
 801370c:	f8c4 c000 	str.w	ip, [r4]
 8013710:	b007      	add	sp, #28
 8013712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013714:	200091c4 	.word	0x200091c4

08013718 <rcl_guard_condition_get_rmw_handle>:
 8013718:	b110      	cbz	r0, 8013720 <rcl_guard_condition_get_rmw_handle+0x8>
 801371a:	6840      	ldr	r0, [r0, #4]
 801371c:	b100      	cbz	r0, 8013720 <rcl_guard_condition_get_rmw_handle+0x8>
 801371e:	6800      	ldr	r0, [r0, #0]
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop

08013724 <on_status>:
 8013724:	b082      	sub	sp, #8
 8013726:	b002      	add	sp, #8
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <on_topic>:
 801372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013730:	4a21      	ldr	r2, [pc, #132]	@ (80137b8 <on_topic+0x8c>)
 8013732:	b094      	sub	sp, #80	@ 0x50
 8013734:	6812      	ldr	r2, [r2, #0]
 8013736:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8013738:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801373c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801373e:	9312      	str	r3, [sp, #72]	@ 0x48
 8013740:	b3ba      	cbz	r2, 80137b2 <on_topic+0x86>
 8013742:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8013746:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801374a:	e001      	b.n	8013750 <on_topic+0x24>
 801374c:	6892      	ldr	r2, [r2, #8]
 801374e:	b382      	cbz	r2, 80137b2 <on_topic+0x86>
 8013750:	68d4      	ldr	r4, [r2, #12]
 8013752:	8aa3      	ldrh	r3, [r4, #20]
 8013754:	428b      	cmp	r3, r1
 8013756:	d1f9      	bne.n	801374c <on_topic+0x20>
 8013758:	7da3      	ldrb	r3, [r4, #22]
 801375a:	4283      	cmp	r3, r0
 801375c:	d1f6      	bne.n	801374c <on_topic+0x20>
 801375e:	2248      	movs	r2, #72	@ 0x48
 8013760:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013764:	4668      	mov	r0, sp
 8013766:	f001 fcec 	bl	8015142 <memcpy>
 801376a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 801376e:	4620      	mov	r0, r4
 8013770:	f7fc fb56 	bl	800fe20 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013774:	4607      	mov	r7, r0
 8013776:	b1e0      	cbz	r0, 80137b2 <on_topic+0x86>
 8013778:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801377c:	462a      	mov	r2, r5
 801377e:	4630      	mov	r0, r6
 8013780:	f108 0110 	add.w	r1, r8, #16
 8013784:	f000 fa46 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013788:	b930      	cbnz	r0, 8013798 <on_topic+0x6c>
 801378a:	480c      	ldr	r0, [pc, #48]	@ (80137bc <on_topic+0x90>)
 801378c:	4639      	mov	r1, r7
 801378e:	b014      	add	sp, #80	@ 0x50
 8013790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013794:	f000 b8ba 	b.w	801390c <put_memory>
 8013798:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801379c:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80137a0:	f000 f962 	bl	8013a68 <rmw_uros_epoch_nanos>
 80137a4:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 80137a8:	2305      	movs	r3, #5
 80137aa:	e9c2 0100 	strd	r0, r1, [r2]
 80137ae:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80137b2:	b014      	add	sp, #80	@ 0x50
 80137b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b8:	2000c66c 	.word	0x2000c66c
 80137bc:	20009400 	.word	0x20009400

080137c0 <on_request>:
 80137c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137c4:	4822      	ldr	r0, [pc, #136]	@ (8013850 <on_request+0x90>)
 80137c6:	b095      	sub	sp, #84	@ 0x54
 80137c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80137ca:	6801      	ldr	r1, [r0, #0]
 80137cc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80137ce:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80137d2:	2900      	cmp	r1, #0
 80137d4:	d039      	beq.n	801384a <on_request+0x8a>
 80137d6:	461d      	mov	r5, r3
 80137d8:	e001      	b.n	80137de <on_request+0x1e>
 80137da:	6889      	ldr	r1, [r1, #8]
 80137dc:	b3a9      	cbz	r1, 801384a <on_request+0x8a>
 80137de:	68cc      	ldr	r4, [r1, #12]
 80137e0:	8b20      	ldrh	r0, [r4, #24]
 80137e2:	4290      	cmp	r0, r2
 80137e4:	d1f9      	bne.n	80137da <on_request+0x1a>
 80137e6:	2248      	movs	r2, #72	@ 0x48
 80137e8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80137ec:	4668      	mov	r0, sp
 80137ee:	f001 fca8 	bl	8015142 <memcpy>
 80137f2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80137f6:	4620      	mov	r0, r4
 80137f8:	f7fc fb12 	bl	800fe20 <rmw_uxrce_get_static_input_buffer_for_entity>
 80137fc:	4680      	mov	r8, r0
 80137fe:	b320      	cbz	r0, 801384a <on_request+0x8a>
 8013800:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8013804:	4632      	mov	r2, r6
 8013806:	4638      	mov	r0, r7
 8013808:	f109 0110 	add.w	r1, r9, #16
 801380c:	f000 fa02 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 8013810:	b930      	cbnz	r0, 8013820 <on_request+0x60>
 8013812:	4810      	ldr	r0, [pc, #64]	@ (8013854 <on_request+0x94>)
 8013814:	4641      	mov	r1, r8
 8013816:	b015      	add	sp, #84	@ 0x54
 8013818:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801381c:	f000 b876 	b.w	801390c <put_memory>
 8013820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013822:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8013826:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 801382a:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 801382e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013830:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013834:	e884 0003 	stmia.w	r4, {r0, r1}
 8013838:	f000 f916 	bl	8013a68 <rmw_uros_epoch_nanos>
 801383c:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8013840:	2303      	movs	r3, #3
 8013842:	e9c2 0100 	strd	r0, r1, [r2]
 8013846:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 801384a:	b015      	add	sp, #84	@ 0x54
 801384c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013850:	2000c65c 	.word	0x2000c65c
 8013854:	20009400 	.word	0x20009400

08013858 <on_reply>:
 8013858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801385c:	4821      	ldr	r0, [pc, #132]	@ (80138e4 <on_reply+0x8c>)
 801385e:	b095      	sub	sp, #84	@ 0x54
 8013860:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013862:	6801      	ldr	r1, [r0, #0]
 8013864:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8013866:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 801386a:	b3b9      	cbz	r1, 80138dc <on_reply+0x84>
 801386c:	461d      	mov	r5, r3
 801386e:	e001      	b.n	8013874 <on_reply+0x1c>
 8013870:	6889      	ldr	r1, [r1, #8]
 8013872:	b399      	cbz	r1, 80138dc <on_reply+0x84>
 8013874:	68cc      	ldr	r4, [r1, #12]
 8013876:	8b20      	ldrh	r0, [r4, #24]
 8013878:	4290      	cmp	r0, r2
 801387a:	d1f9      	bne.n	8013870 <on_reply+0x18>
 801387c:	2248      	movs	r2, #72	@ 0x48
 801387e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013882:	4668      	mov	r0, sp
 8013884:	f001 fc5d 	bl	8015142 <memcpy>
 8013888:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801388c:	4620      	mov	r0, r4
 801388e:	f7fc fac7 	bl	800fe20 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013892:	4680      	mov	r8, r0
 8013894:	b310      	cbz	r0, 80138dc <on_reply+0x84>
 8013896:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801389a:	4632      	mov	r2, r6
 801389c:	4638      	mov	r0, r7
 801389e:	f109 0110 	add.w	r1, r9, #16
 80138a2:	f000 f9b7 	bl	8013c14 <ucdr_deserialize_array_uint8_t>
 80138a6:	b930      	cbnz	r0, 80138b6 <on_reply+0x5e>
 80138a8:	480f      	ldr	r0, [pc, #60]	@ (80138e8 <on_reply+0x90>)
 80138aa:	4641      	mov	r1, r8
 80138ac:	b015      	add	sp, #84	@ 0x54
 80138ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138b2:	f000 b82b 	b.w	801390c <put_memory>
 80138b6:	b2aa      	uxth	r2, r5
 80138b8:	2300      	movs	r3, #0
 80138ba:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 80138be:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 80138c2:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 80138c6:	e9c1 2300 	strd	r2, r3, [r1]
 80138ca:	f000 f8cd 	bl	8013a68 <rmw_uros_epoch_nanos>
 80138ce:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 80138d2:	2304      	movs	r3, #4
 80138d4:	e9c2 0100 	strd	r0, r1, [r2]
 80138d8:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 80138dc:	b015      	add	sp, #84	@ 0x54
 80138de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e2:	bf00      	nop
 80138e4:	20009c90 	.word	0x20009c90
 80138e8:	20009400 	.word	0x20009400

080138ec <get_memory>:
 80138ec:	4603      	mov	r3, r0
 80138ee:	6840      	ldr	r0, [r0, #4]
 80138f0:	b158      	cbz	r0, 801390a <get_memory+0x1e>
 80138f2:	6882      	ldr	r2, [r0, #8]
 80138f4:	605a      	str	r2, [r3, #4]
 80138f6:	b10a      	cbz	r2, 80138fc <get_memory+0x10>
 80138f8:	2100      	movs	r1, #0
 80138fa:	6051      	str	r1, [r2, #4]
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	6082      	str	r2, [r0, #8]
 8013900:	b102      	cbz	r2, 8013904 <get_memory+0x18>
 8013902:	6050      	str	r0, [r2, #4]
 8013904:	2200      	movs	r2, #0
 8013906:	6042      	str	r2, [r0, #4]
 8013908:	6018      	str	r0, [r3, #0]
 801390a:	4770      	bx	lr

0801390c <put_memory>:
 801390c:	684b      	ldr	r3, [r1, #4]
 801390e:	b10b      	cbz	r3, 8013914 <put_memory+0x8>
 8013910:	688a      	ldr	r2, [r1, #8]
 8013912:	609a      	str	r2, [r3, #8]
 8013914:	688a      	ldr	r2, [r1, #8]
 8013916:	b102      	cbz	r2, 801391a <put_memory+0xe>
 8013918:	6053      	str	r3, [r2, #4]
 801391a:	6803      	ldr	r3, [r0, #0]
 801391c:	428b      	cmp	r3, r1
 801391e:	6843      	ldr	r3, [r0, #4]
 8013920:	bf08      	it	eq
 8013922:	6002      	streq	r2, [r0, #0]
 8013924:	608b      	str	r3, [r1, #8]
 8013926:	b103      	cbz	r3, 801392a <put_memory+0x1e>
 8013928:	6059      	str	r1, [r3, #4]
 801392a:	2300      	movs	r3, #0
 801392c:	604b      	str	r3, [r1, #4]
 801392e:	6041      	str	r1, [r0, #4]
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop

08013934 <rmw_create_guard_condition>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4605      	mov	r5, r0
 8013938:	4807      	ldr	r0, [pc, #28]	@ (8013958 <rmw_create_guard_condition+0x24>)
 801393a:	f7ff ffd7 	bl	80138ec <get_memory>
 801393e:	b148      	cbz	r0, 8013954 <rmw_create_guard_condition+0x20>
 8013940:	68c4      	ldr	r4, [r0, #12]
 8013942:	2300      	movs	r3, #0
 8013944:	61e5      	str	r5, [r4, #28]
 8013946:	7423      	strb	r3, [r4, #16]
 8013948:	f7fb f872 	bl	800ea30 <rmw_get_implementation_identifier>
 801394c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013950:	f104 0014 	add.w	r0, r4, #20
 8013954:	bd38      	pop	{r3, r4, r5, pc}
 8013956:	bf00      	nop
 8013958:	2000c588 	.word	0x2000c588

0801395c <rmw_destroy_guard_condition>:
 801395c:	b508      	push	{r3, lr}
 801395e:	4b08      	ldr	r3, [pc, #32]	@ (8013980 <rmw_destroy_guard_condition+0x24>)
 8013960:	6819      	ldr	r1, [r3, #0]
 8013962:	b911      	cbnz	r1, 801396a <rmw_destroy_guard_condition+0xe>
 8013964:	e00a      	b.n	801397c <rmw_destroy_guard_condition+0x20>
 8013966:	6889      	ldr	r1, [r1, #8]
 8013968:	b141      	cbz	r1, 801397c <rmw_destroy_guard_condition+0x20>
 801396a:	68cb      	ldr	r3, [r1, #12]
 801396c:	3314      	adds	r3, #20
 801396e:	4298      	cmp	r0, r3
 8013970:	d1f9      	bne.n	8013966 <rmw_destroy_guard_condition+0xa>
 8013972:	4803      	ldr	r0, [pc, #12]	@ (8013980 <rmw_destroy_guard_condition+0x24>)
 8013974:	f7ff ffca 	bl	801390c <put_memory>
 8013978:	2000      	movs	r0, #0
 801397a:	bd08      	pop	{r3, pc}
 801397c:	2001      	movs	r0, #1
 801397e:	bd08      	pop	{r3, pc}
 8013980:	2000c588 	.word	0x2000c588

08013984 <create_topic>:
 8013984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013988:	4607      	mov	r7, r0
 801398a:	b084      	sub	sp, #16
 801398c:	4822      	ldr	r0, [pc, #136]	@ (8013a18 <create_topic+0x94>)
 801398e:	4689      	mov	r9, r1
 8013990:	4690      	mov	r8, r2
 8013992:	f7ff ffab 	bl	80138ec <get_memory>
 8013996:	4604      	mov	r4, r0
 8013998:	2800      	cmp	r0, #0
 801399a:	d038      	beq.n	8013a0e <create_topic+0x8a>
 801399c:	693e      	ldr	r6, [r7, #16]
 801399e:	68c4      	ldr	r4, [r0, #12]
 80139a0:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8013a20 <create_topic+0x9c>
 80139a4:	61a7      	str	r7, [r4, #24]
 80139a6:	f241 5596 	movw	r5, #5526	@ 0x1596
 80139aa:	f8c4 8014 	str.w	r8, [r4, #20]
 80139ae:	5b70      	ldrh	r0, [r6, r5]
 80139b0:	1c42      	adds	r2, r0, #1
 80139b2:	5372      	strh	r2, [r6, r5]
 80139b4:	2102      	movs	r1, #2
 80139b6:	f7fc fdd5 	bl	8010564 <uxr_object_id>
 80139ba:	4651      	mov	r1, sl
 80139bc:	6120      	str	r0, [r4, #16]
 80139be:	223c      	movs	r2, #60	@ 0x3c
 80139c0:	4648      	mov	r0, r9
 80139c2:	f7fc fb7f 	bl	80100c4 <generate_topic_name>
 80139c6:	b1f0      	cbz	r0, 8013a06 <create_topic+0x82>
 80139c8:	4d14      	ldr	r5, [pc, #80]	@ (8013a1c <create_topic+0x98>)
 80139ca:	4640      	mov	r0, r8
 80139cc:	4629      	mov	r1, r5
 80139ce:	2264      	movs	r2, #100	@ 0x64
 80139d0:	f7fc fb48 	bl	8010064 <generate_type_name>
 80139d4:	b1b8      	cbz	r0, 8013a06 <create_topic+0x82>
 80139d6:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 80139da:	2106      	movs	r1, #6
 80139dc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80139e0:	9501      	str	r5, [sp, #4]
 80139e2:	f8cd a000 	str.w	sl, [sp]
 80139e6:	9102      	str	r1, [sp, #8]
 80139e8:	6811      	ldr	r1, [r2, #0]
 80139ea:	6922      	ldr	r2, [r4, #16]
 80139ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139f0:	f7fc fc1a 	bl	8010228 <uxr_buffer_create_topic_bin>
 80139f4:	4602      	mov	r2, r0
 80139f6:	6938      	ldr	r0, [r7, #16]
 80139f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80139fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a00:	f7fc fafa 	bl	800fff8 <run_xrce_session>
 8013a04:	b918      	cbnz	r0, 8013a0e <create_topic+0x8a>
 8013a06:	4620      	mov	r0, r4
 8013a08:	f7fc f9fe 	bl	800fe08 <rmw_uxrce_fini_topic_memory>
 8013a0c:	2400      	movs	r4, #0
 8013a0e:	4620      	mov	r0, r4
 8013a10:	b004      	add	sp, #16
 8013a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a16:	bf00      	nop
 8013a18:	2000c598 	.word	0x2000c598
 8013a1c:	20009214 	.word	0x20009214
 8013a20:	200091d8 	.word	0x200091d8

08013a24 <destroy_topic>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	6985      	ldr	r5, [r0, #24]
 8013a28:	b1d5      	cbz	r5, 8013a60 <destroy_topic+0x3c>
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	6928      	ldr	r0, [r5, #16]
 8013a2e:	6922      	ldr	r2, [r4, #16]
 8013a30:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a38:	6819      	ldr	r1, [r3, #0]
 8013a3a:	f7fc fb77 	bl	801012c <uxr_buffer_delete_entity>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	6928      	ldr	r0, [r5, #16]
 8013a42:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a4a:	f7fc fad5 	bl	800fff8 <run_xrce_session>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	4620      	mov	r0, r4
 8013a52:	bf14      	ite	ne
 8013a54:	2400      	movne	r4, #0
 8013a56:	2402      	moveq	r4, #2
 8013a58:	f7fc f9d6 	bl	800fe08 <rmw_uxrce_fini_topic_memory>
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	bd38      	pop	{r3, r4, r5, pc}
 8013a60:	2401      	movs	r4, #1
 8013a62:	4620      	mov	r0, r4
 8013a64:	bd38      	pop	{r3, r4, r5, pc}
 8013a66:	bf00      	nop

08013a68 <rmw_uros_epoch_nanos>:
 8013a68:	4b05      	ldr	r3, [pc, #20]	@ (8013a80 <rmw_uros_epoch_nanos+0x18>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	b123      	cbz	r3, 8013a78 <rmw_uros_epoch_nanos+0x10>
 8013a6e:	68d8      	ldr	r0, [r3, #12]
 8013a70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a74:	f7fc bfde 	b.w	8010a34 <uxr_epoch_nanos>
 8013a78:	2000      	movs	r0, #0
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	4770      	bx	lr
 8013a7e:	bf00      	nop
 8013a80:	2000c5a8 	.word	0x2000c5a8

08013a84 <ucdr_serialize_endian_array_char>:
 8013a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a88:	4619      	mov	r1, r3
 8013a8a:	461e      	mov	r6, r3
 8013a8c:	4690      	mov	r8, r2
 8013a8e:	4604      	mov	r4, r0
 8013a90:	f7f8 f800 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013a94:	b9e0      	cbnz	r0, 8013ad0 <ucdr_serialize_endian_array_char+0x4c>
 8013a96:	4637      	mov	r7, r6
 8013a98:	e009      	b.n	8013aae <ucdr_serialize_endian_array_char+0x2a>
 8013a9a:	68a0      	ldr	r0, [r4, #8]
 8013a9c:	f001 fb51 	bl	8015142 <memcpy>
 8013aa0:	68a2      	ldr	r2, [r4, #8]
 8013aa2:	6923      	ldr	r3, [r4, #16]
 8013aa4:	442a      	add	r2, r5
 8013aa6:	442b      	add	r3, r5
 8013aa8:	1b7f      	subs	r7, r7, r5
 8013aaa:	60a2      	str	r2, [r4, #8]
 8013aac:	6123      	str	r3, [r4, #16]
 8013aae:	2201      	movs	r2, #1
 8013ab0:	4639      	mov	r1, r7
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f7f8 f874 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013ab8:	1bf1      	subs	r1, r6, r7
 8013aba:	4441      	add	r1, r8
 8013abc:	4605      	mov	r5, r0
 8013abe:	4602      	mov	r2, r0
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d1ea      	bne.n	8013a9a <ucdr_serialize_endian_array_char+0x16>
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	7da0      	ldrb	r0, [r4, #22]
 8013ac8:	7563      	strb	r3, [r4, #21]
 8013aca:	4058      	eors	r0, r3
 8013acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad0:	4632      	mov	r2, r6
 8013ad2:	68a0      	ldr	r0, [r4, #8]
 8013ad4:	4641      	mov	r1, r8
 8013ad6:	f001 fb34 	bl	8015142 <memcpy>
 8013ada:	68a2      	ldr	r2, [r4, #8]
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	4432      	add	r2, r6
 8013ae0:	4433      	add	r3, r6
 8013ae2:	60a2      	str	r2, [r4, #8]
 8013ae4:	6123      	str	r3, [r4, #16]
 8013ae6:	e7ed      	b.n	8013ac4 <ucdr_serialize_endian_array_char+0x40>

08013ae8 <ucdr_deserialize_endian_array_char>:
 8013ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aec:	4619      	mov	r1, r3
 8013aee:	461e      	mov	r6, r3
 8013af0:	4690      	mov	r8, r2
 8013af2:	4604      	mov	r4, r0
 8013af4:	f7f7 ffce 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013af8:	b9e0      	cbnz	r0, 8013b34 <ucdr_deserialize_endian_array_char+0x4c>
 8013afa:	4637      	mov	r7, r6
 8013afc:	e009      	b.n	8013b12 <ucdr_deserialize_endian_array_char+0x2a>
 8013afe:	68a1      	ldr	r1, [r4, #8]
 8013b00:	f001 fb1f 	bl	8015142 <memcpy>
 8013b04:	68a2      	ldr	r2, [r4, #8]
 8013b06:	6923      	ldr	r3, [r4, #16]
 8013b08:	442a      	add	r2, r5
 8013b0a:	442b      	add	r3, r5
 8013b0c:	1b7f      	subs	r7, r7, r5
 8013b0e:	60a2      	str	r2, [r4, #8]
 8013b10:	6123      	str	r3, [r4, #16]
 8013b12:	2201      	movs	r2, #1
 8013b14:	4639      	mov	r1, r7
 8013b16:	4620      	mov	r0, r4
 8013b18:	f7f8 f842 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	1bf0      	subs	r0, r6, r7
 8013b20:	4440      	add	r0, r8
 8013b22:	462a      	mov	r2, r5
 8013b24:	2d00      	cmp	r5, #0
 8013b26:	d1ea      	bne.n	8013afe <ucdr_deserialize_endian_array_char+0x16>
 8013b28:	2301      	movs	r3, #1
 8013b2a:	7da0      	ldrb	r0, [r4, #22]
 8013b2c:	7563      	strb	r3, [r4, #21]
 8013b2e:	4058      	eors	r0, r3
 8013b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b34:	4632      	mov	r2, r6
 8013b36:	68a1      	ldr	r1, [r4, #8]
 8013b38:	4640      	mov	r0, r8
 8013b3a:	f001 fb02 	bl	8015142 <memcpy>
 8013b3e:	68a2      	ldr	r2, [r4, #8]
 8013b40:	6923      	ldr	r3, [r4, #16]
 8013b42:	4432      	add	r2, r6
 8013b44:	4433      	add	r3, r6
 8013b46:	60a2      	str	r2, [r4, #8]
 8013b48:	6123      	str	r3, [r4, #16]
 8013b4a:	e7ed      	b.n	8013b28 <ucdr_deserialize_endian_array_char+0x40>

08013b4c <ucdr_serialize_array_uint8_t>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	4688      	mov	r8, r1
 8013b52:	4611      	mov	r1, r2
 8013b54:	4616      	mov	r6, r2
 8013b56:	4604      	mov	r4, r0
 8013b58:	f7f7 ff9c 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013b5c:	b9e0      	cbnz	r0, 8013b98 <ucdr_serialize_array_uint8_t+0x4c>
 8013b5e:	4637      	mov	r7, r6
 8013b60:	e009      	b.n	8013b76 <ucdr_serialize_array_uint8_t+0x2a>
 8013b62:	68a0      	ldr	r0, [r4, #8]
 8013b64:	f001 faed 	bl	8015142 <memcpy>
 8013b68:	68a2      	ldr	r2, [r4, #8]
 8013b6a:	6923      	ldr	r3, [r4, #16]
 8013b6c:	442a      	add	r2, r5
 8013b6e:	442b      	add	r3, r5
 8013b70:	1b7f      	subs	r7, r7, r5
 8013b72:	60a2      	str	r2, [r4, #8]
 8013b74:	6123      	str	r3, [r4, #16]
 8013b76:	2201      	movs	r2, #1
 8013b78:	4639      	mov	r1, r7
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f7f8 f810 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013b80:	1bf1      	subs	r1, r6, r7
 8013b82:	4441      	add	r1, r8
 8013b84:	4605      	mov	r5, r0
 8013b86:	4602      	mov	r2, r0
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d1ea      	bne.n	8013b62 <ucdr_serialize_array_uint8_t+0x16>
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	7da0      	ldrb	r0, [r4, #22]
 8013b90:	7563      	strb	r3, [r4, #21]
 8013b92:	4058      	eors	r0, r3
 8013b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b98:	4632      	mov	r2, r6
 8013b9a:	68a0      	ldr	r0, [r4, #8]
 8013b9c:	4641      	mov	r1, r8
 8013b9e:	f001 fad0 	bl	8015142 <memcpy>
 8013ba2:	68a3      	ldr	r3, [r4, #8]
 8013ba4:	6922      	ldr	r2, [r4, #16]
 8013ba6:	4433      	add	r3, r6
 8013ba8:	4432      	add	r2, r6
 8013baa:	60a3      	str	r3, [r4, #8]
 8013bac:	6122      	str	r2, [r4, #16]
 8013bae:	e7ed      	b.n	8013b8c <ucdr_serialize_array_uint8_t+0x40>

08013bb0 <ucdr_serialize_endian_array_uint8_t>:
 8013bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	461e      	mov	r6, r3
 8013bb8:	4690      	mov	r8, r2
 8013bba:	4604      	mov	r4, r0
 8013bbc:	f7f7 ff6a 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013bc0:	b9e0      	cbnz	r0, 8013bfc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013bc2:	4637      	mov	r7, r6
 8013bc4:	e009      	b.n	8013bda <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013bc6:	68a0      	ldr	r0, [r4, #8]
 8013bc8:	f001 fabb 	bl	8015142 <memcpy>
 8013bcc:	68a2      	ldr	r2, [r4, #8]
 8013bce:	6923      	ldr	r3, [r4, #16]
 8013bd0:	442a      	add	r2, r5
 8013bd2:	442b      	add	r3, r5
 8013bd4:	1b7f      	subs	r7, r7, r5
 8013bd6:	60a2      	str	r2, [r4, #8]
 8013bd8:	6123      	str	r3, [r4, #16]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	4639      	mov	r1, r7
 8013bde:	4620      	mov	r0, r4
 8013be0:	f7f7 ffde 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013be4:	1bf1      	subs	r1, r6, r7
 8013be6:	4441      	add	r1, r8
 8013be8:	4605      	mov	r5, r0
 8013bea:	4602      	mov	r2, r0
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d1ea      	bne.n	8013bc6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	7da0      	ldrb	r0, [r4, #22]
 8013bf4:	7563      	strb	r3, [r4, #21]
 8013bf6:	4058      	eors	r0, r3
 8013bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfc:	4632      	mov	r2, r6
 8013bfe:	68a0      	ldr	r0, [r4, #8]
 8013c00:	4641      	mov	r1, r8
 8013c02:	f001 fa9e 	bl	8015142 <memcpy>
 8013c06:	68a2      	ldr	r2, [r4, #8]
 8013c08:	6923      	ldr	r3, [r4, #16]
 8013c0a:	4432      	add	r2, r6
 8013c0c:	4433      	add	r3, r6
 8013c0e:	60a2      	str	r2, [r4, #8]
 8013c10:	6123      	str	r3, [r4, #16]
 8013c12:	e7ed      	b.n	8013bf0 <ucdr_serialize_endian_array_uint8_t+0x40>

08013c14 <ucdr_deserialize_array_uint8_t>:
 8013c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c18:	4688      	mov	r8, r1
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	4616      	mov	r6, r2
 8013c1e:	4604      	mov	r4, r0
 8013c20:	f7f7 ff38 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013c24:	b9e0      	cbnz	r0, 8013c60 <ucdr_deserialize_array_uint8_t+0x4c>
 8013c26:	4637      	mov	r7, r6
 8013c28:	e009      	b.n	8013c3e <ucdr_deserialize_array_uint8_t+0x2a>
 8013c2a:	68a1      	ldr	r1, [r4, #8]
 8013c2c:	f001 fa89 	bl	8015142 <memcpy>
 8013c30:	68a2      	ldr	r2, [r4, #8]
 8013c32:	6923      	ldr	r3, [r4, #16]
 8013c34:	442a      	add	r2, r5
 8013c36:	442b      	add	r3, r5
 8013c38:	1b7f      	subs	r7, r7, r5
 8013c3a:	60a2      	str	r2, [r4, #8]
 8013c3c:	6123      	str	r3, [r4, #16]
 8013c3e:	2201      	movs	r2, #1
 8013c40:	4639      	mov	r1, r7
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7f7 ffac 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013c48:	4605      	mov	r5, r0
 8013c4a:	1bf0      	subs	r0, r6, r7
 8013c4c:	4440      	add	r0, r8
 8013c4e:	462a      	mov	r2, r5
 8013c50:	2d00      	cmp	r5, #0
 8013c52:	d1ea      	bne.n	8013c2a <ucdr_deserialize_array_uint8_t+0x16>
 8013c54:	2301      	movs	r3, #1
 8013c56:	7da0      	ldrb	r0, [r4, #22]
 8013c58:	7563      	strb	r3, [r4, #21]
 8013c5a:	4058      	eors	r0, r3
 8013c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c60:	4632      	mov	r2, r6
 8013c62:	68a1      	ldr	r1, [r4, #8]
 8013c64:	4640      	mov	r0, r8
 8013c66:	f001 fa6c 	bl	8015142 <memcpy>
 8013c6a:	68a3      	ldr	r3, [r4, #8]
 8013c6c:	6922      	ldr	r2, [r4, #16]
 8013c6e:	4433      	add	r3, r6
 8013c70:	4432      	add	r2, r6
 8013c72:	60a3      	str	r3, [r4, #8]
 8013c74:	6122      	str	r2, [r4, #16]
 8013c76:	e7ed      	b.n	8013c54 <ucdr_deserialize_array_uint8_t+0x40>

08013c78 <ucdr_deserialize_endian_array_uint8_t>:
 8013c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	461e      	mov	r6, r3
 8013c80:	4690      	mov	r8, r2
 8013c82:	4604      	mov	r4, r0
 8013c84:	f7f7 ff06 	bl	800ba94 <ucdr_check_buffer_available_for>
 8013c88:	b9e0      	cbnz	r0, 8013cc4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013c8a:	4637      	mov	r7, r6
 8013c8c:	e009      	b.n	8013ca2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013c8e:	68a1      	ldr	r1, [r4, #8]
 8013c90:	f001 fa57 	bl	8015142 <memcpy>
 8013c94:	68a2      	ldr	r2, [r4, #8]
 8013c96:	6923      	ldr	r3, [r4, #16]
 8013c98:	442a      	add	r2, r5
 8013c9a:	442b      	add	r3, r5
 8013c9c:	1b7f      	subs	r7, r7, r5
 8013c9e:	60a2      	str	r2, [r4, #8]
 8013ca0:	6123      	str	r3, [r4, #16]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	4639      	mov	r1, r7
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f7f7 ff7a 	bl	800bba0 <ucdr_check_final_buffer_behavior_array>
 8013cac:	4605      	mov	r5, r0
 8013cae:	1bf0      	subs	r0, r6, r7
 8013cb0:	4440      	add	r0, r8
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	2d00      	cmp	r5, #0
 8013cb6:	d1ea      	bne.n	8013c8e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013cb8:	2301      	movs	r3, #1
 8013cba:	7da0      	ldrb	r0, [r4, #22]
 8013cbc:	7563      	strb	r3, [r4, #21]
 8013cbe:	4058      	eors	r0, r3
 8013cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc4:	4632      	mov	r2, r6
 8013cc6:	68a1      	ldr	r1, [r4, #8]
 8013cc8:	4640      	mov	r0, r8
 8013cca:	f001 fa3a 	bl	8015142 <memcpy>
 8013cce:	68a2      	ldr	r2, [r4, #8]
 8013cd0:	6923      	ldr	r3, [r4, #16]
 8013cd2:	4432      	add	r2, r6
 8013cd4:	4433      	add	r3, r6
 8013cd6:	60a2      	str	r2, [r4, #8]
 8013cd8:	6123      	str	r3, [r4, #16]
 8013cda:	e7ed      	b.n	8013cb8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013cdc <ucdr_serialize_sequence_char>:
 8013cdc:	b570      	push	{r4, r5, r6, lr}
 8013cde:	460e      	mov	r6, r1
 8013ce0:	4615      	mov	r5, r2
 8013ce2:	7d01      	ldrb	r1, [r0, #20]
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	f7f7 f8d7 	bl	800ae98 <ucdr_serialize_endian_uint32_t>
 8013cea:	b90d      	cbnz	r5, 8013cf0 <ucdr_serialize_sequence_char+0x14>
 8013cec:	2001      	movs	r0, #1
 8013cee:	bd70      	pop	{r4, r5, r6, pc}
 8013cf0:	7d21      	ldrb	r1, [r4, #20]
 8013cf2:	462b      	mov	r3, r5
 8013cf4:	4632      	mov	r2, r6
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cfc:	f7ff bec2 	b.w	8013a84 <ucdr_serialize_endian_array_char>

08013d00 <ucdr_deserialize_sequence_char>:
 8013d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d04:	461d      	mov	r5, r3
 8013d06:	4616      	mov	r6, r2
 8013d08:	460f      	mov	r7, r1
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	7d01      	ldrb	r1, [r0, #20]
 8013d0e:	4604      	mov	r4, r0
 8013d10:	f7f7 f9ea 	bl	800b0e8 <ucdr_deserialize_endian_uint32_t>
 8013d14:	682b      	ldr	r3, [r5, #0]
 8013d16:	429e      	cmp	r6, r3
 8013d18:	bf3c      	itt	cc
 8013d1a:	2201      	movcc	r2, #1
 8013d1c:	75a2      	strbcc	r2, [r4, #22]
 8013d1e:	b913      	cbnz	r3, 8013d26 <ucdr_deserialize_sequence_char+0x26>
 8013d20:	2001      	movs	r0, #1
 8013d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d26:	7d21      	ldrb	r1, [r4, #20]
 8013d28:	463a      	mov	r2, r7
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d30:	f7ff beda 	b.w	8013ae8 <ucdr_deserialize_endian_array_char>

08013d34 <ucdr_serialize_sequence_uint8_t>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	460e      	mov	r6, r1
 8013d38:	4615      	mov	r5, r2
 8013d3a:	7d01      	ldrb	r1, [r0, #20]
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	f7f7 f8ab 	bl	800ae98 <ucdr_serialize_endian_uint32_t>
 8013d42:	b90d      	cbnz	r5, 8013d48 <ucdr_serialize_sequence_uint8_t+0x14>
 8013d44:	2001      	movs	r0, #1
 8013d46:	bd70      	pop	{r4, r5, r6, pc}
 8013d48:	7d21      	ldrb	r1, [r4, #20]
 8013d4a:	462b      	mov	r3, r5
 8013d4c:	4632      	mov	r2, r6
 8013d4e:	4620      	mov	r0, r4
 8013d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d54:	f7ff bf2c 	b.w	8013bb0 <ucdr_serialize_endian_array_uint8_t>

08013d58 <ucdr_deserialize_sequence_uint8_t>:
 8013d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5c:	461d      	mov	r5, r3
 8013d5e:	4616      	mov	r6, r2
 8013d60:	460f      	mov	r7, r1
 8013d62:	461a      	mov	r2, r3
 8013d64:	7d01      	ldrb	r1, [r0, #20]
 8013d66:	4604      	mov	r4, r0
 8013d68:	f7f7 f9be 	bl	800b0e8 <ucdr_deserialize_endian_uint32_t>
 8013d6c:	682b      	ldr	r3, [r5, #0]
 8013d6e:	429e      	cmp	r6, r3
 8013d70:	bf3c      	itt	cc
 8013d72:	2201      	movcc	r2, #1
 8013d74:	75a2      	strbcc	r2, [r4, #22]
 8013d76:	b913      	cbnz	r3, 8013d7e <ucdr_deserialize_sequence_uint8_t+0x26>
 8013d78:	2001      	movs	r0, #1
 8013d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d7e:	7d21      	ldrb	r1, [r4, #20]
 8013d80:	463a      	mov	r2, r7
 8013d82:	4620      	mov	r0, r4
 8013d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d88:	f7ff bf76 	b.w	8013c78 <ucdr_deserialize_endian_array_uint8_t>

08013d8c <ucdr_serialize_string>:
 8013d8c:	b510      	push	{r4, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	4604      	mov	r4, r0
 8013d92:	4608      	mov	r0, r1
 8013d94:	9101      	str	r1, [sp, #4]
 8013d96:	f7ec fa2d 	bl	80001f4 <strlen>
 8013d9a:	9901      	ldr	r1, [sp, #4]
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	3201      	adds	r2, #1
 8013da0:	4620      	mov	r0, r4
 8013da2:	b002      	add	sp, #8
 8013da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013da8:	f7ff bf98 	b.w	8013cdc <ucdr_serialize_sequence_char>

08013dac <ucdr_deserialize_string>:
 8013dac:	b500      	push	{lr}
 8013dae:	b083      	sub	sp, #12
 8013db0:	ab01      	add	r3, sp, #4
 8013db2:	f7ff ffa5 	bl	8013d00 <ucdr_deserialize_sequence_char>
 8013db6:	b003      	add	sp, #12
 8013db8:	f85d fb04 	ldr.w	pc, [sp], #4

08013dbc <uxr_init_input_best_effort_stream>:
 8013dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013dc0:	8003      	strh	r3, [r0, #0]
 8013dc2:	4770      	bx	lr

08013dc4 <uxr_reset_input_best_effort_stream>:
 8013dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013dc8:	8003      	strh	r3, [r0, #0]
 8013dca:	4770      	bx	lr

08013dcc <uxr_receive_best_effort_message>:
 8013dcc:	b538      	push	{r3, r4, r5, lr}
 8013dce:	4604      	mov	r4, r0
 8013dd0:	8800      	ldrh	r0, [r0, #0]
 8013dd2:	460d      	mov	r5, r1
 8013dd4:	f000 fd0c 	bl	80147f0 <uxr_seq_num_cmp>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013de0:	bfb8      	it	lt
 8013de2:	8025      	strhlt	r5, [r4, #0]
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	bf00      	nop

08013de8 <on_full_input_buffer>:
 8013de8:	b570      	push	{r4, r5, r6, lr}
 8013dea:	6802      	ldr	r2, [r0, #0]
 8013dec:	460d      	mov	r5, r1
 8013dee:	6809      	ldr	r1, [r1, #0]
 8013df0:	686c      	ldr	r4, [r5, #4]
 8013df2:	1a53      	subs	r3, r2, r1
 8013df4:	4606      	mov	r6, r0
 8013df6:	8928      	ldrh	r0, [r5, #8]
 8013df8:	fbb4 f4f0 	udiv	r4, r4, r0
 8013dfc:	fbb3 f3f4 	udiv	r3, r3, r4
 8013e00:	3301      	adds	r3, #1
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	fbb3 f2f0 	udiv	r2, r3, r0
 8013e08:	fb00 3312 	mls	r3, r0, r2, r3
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	fb04 f403 	mul.w	r4, r4, r3
 8013e12:	1d23      	adds	r3, r4, #4
 8013e14:	440b      	add	r3, r1
 8013e16:	7d28      	ldrb	r0, [r5, #20]
 8013e18:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8013e1c:	b110      	cbz	r0, 8013e24 <on_full_input_buffer+0x3c>
 8013e1e:	2000      	movs	r0, #0
 8013e20:	f843 0c04 	str.w	r0, [r3, #-4]
 8013e24:	2a03      	cmp	r2, #3
 8013e26:	d801      	bhi.n	8013e2c <on_full_input_buffer+0x44>
 8013e28:	2001      	movs	r0, #1
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	3408      	adds	r4, #8
 8013e2e:	6933      	ldr	r3, [r6, #16]
 8013e30:	4421      	add	r1, r4
 8013e32:	4630      	mov	r0, r6
 8013e34:	3a04      	subs	r2, #4
 8013e36:	f7f7 fe77 	bl	800bb28 <ucdr_init_buffer_origin>
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	4902      	ldr	r1, [pc, #8]	@ (8013e48 <on_full_input_buffer+0x60>)
 8013e3e:	462a      	mov	r2, r5
 8013e40:	f7f7 fe50 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8013e44:	2000      	movs	r0, #0
 8013e46:	bd70      	pop	{r4, r5, r6, pc}
 8013e48:	08013de9 	.word	0x08013de9

08013e4c <uxr_init_input_reliable_stream>:
 8013e4c:	b470      	push	{r4, r5, r6}
 8013e4e:	9c03      	ldr	r4, [sp, #12]
 8013e50:	6001      	str	r1, [r0, #0]
 8013e52:	2600      	movs	r6, #0
 8013e54:	8103      	strh	r3, [r0, #8]
 8013e56:	6042      	str	r2, [r0, #4]
 8013e58:	6104      	str	r4, [r0, #16]
 8013e5a:	7506      	strb	r6, [r0, #20]
 8013e5c:	b1ab      	cbz	r3, 8013e8a <uxr_init_input_reliable_stream+0x3e>
 8013e5e:	600e      	str	r6, [r1, #0]
 8013e60:	8901      	ldrh	r1, [r0, #8]
 8013e62:	2901      	cmp	r1, #1
 8013e64:	d911      	bls.n	8013e8a <uxr_init_input_reliable_stream+0x3e>
 8013e66:	2201      	movs	r2, #1
 8013e68:	e9d0 5400 	ldrd	r5, r4, [r0]
 8013e6c:	fbb2 f3f1 	udiv	r3, r2, r1
 8013e70:	fb01 2313 	mls	r3, r1, r3, r2
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	fbb4 f1f1 	udiv	r1, r4, r1
 8013e7a:	fb03 f301 	mul.w	r3, r3, r1
 8013e7e:	3201      	adds	r2, #1
 8013e80:	50ee      	str	r6, [r5, r3]
 8013e82:	8901      	ldrh	r1, [r0, #8]
 8013e84:	b292      	uxth	r2, r2
 8013e86:	4291      	cmp	r1, r2
 8013e88:	d8ee      	bhi.n	8013e68 <uxr_init_input_reliable_stream+0x1c>
 8013e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e8e:	bc70      	pop	{r4, r5, r6}
 8013e90:	60c3      	str	r3, [r0, #12]
 8013e92:	4770      	bx	lr

08013e94 <uxr_reset_input_reliable_stream>:
 8013e94:	8902      	ldrh	r2, [r0, #8]
 8013e96:	b1ca      	cbz	r2, 8013ecc <uxr_reset_input_reliable_stream+0x38>
 8013e98:	b470      	push	{r4, r5, r6}
 8013e9a:	2400      	movs	r4, #0
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	4626      	mov	r6, r4
 8013ea0:	fbb1 f3f2 	udiv	r3, r1, r2
 8013ea4:	fb02 1313 	mls	r3, r2, r3, r1
 8013ea8:	e9d0 5100 	ldrd	r5, r1, [r0]
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	fbb1 f2f2 	udiv	r2, r1, r2
 8013eb2:	fb03 f302 	mul.w	r3, r3, r2
 8013eb6:	3401      	adds	r4, #1
 8013eb8:	50ee      	str	r6, [r5, r3]
 8013eba:	8902      	ldrh	r2, [r0, #8]
 8013ebc:	b2a1      	uxth	r1, r4
 8013ebe:	428a      	cmp	r2, r1
 8013ec0:	d8ee      	bhi.n	8013ea0 <uxr_reset_input_reliable_stream+0xc>
 8013ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013ec6:	bc70      	pop	{r4, r5, r6}
 8013ec8:	60c3      	str	r3, [r0, #12]
 8013eca:	4770      	bx	lr
 8013ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013ed0:	60c3      	str	r3, [r0, #12]
 8013ed2:	4770      	bx	lr

08013ed4 <uxr_receive_reliable_message>:
 8013ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed8:	4604      	mov	r4, r0
 8013eda:	460d      	mov	r5, r1
 8013edc:	8901      	ldrh	r1, [r0, #8]
 8013ede:	8980      	ldrh	r0, [r0, #12]
 8013ee0:	4690      	mov	r8, r2
 8013ee2:	461f      	mov	r7, r3
 8013ee4:	f000 fc7c 	bl	80147e0 <uxr_seq_num_add>
 8013ee8:	4629      	mov	r1, r5
 8013eea:	4606      	mov	r6, r0
 8013eec:	89a0      	ldrh	r0, [r4, #12]
 8013eee:	f000 fc7f 	bl	80147f0 <uxr_seq_num_cmp>
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	db0a      	blt.n	8013f0c <uxr_receive_reliable_message+0x38>
 8013ef6:	2600      	movs	r6, #0
 8013ef8:	89e0      	ldrh	r0, [r4, #14]
 8013efa:	4629      	mov	r1, r5
 8013efc:	f000 fc78 	bl	80147f0 <uxr_seq_num_cmp>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	bfb8      	it	lt
 8013f04:	81e5      	strhlt	r5, [r4, #14]
 8013f06:	4630      	mov	r0, r6
 8013f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f000 fc6e 	bl	80147f0 <uxr_seq_num_cmp>
 8013f14:	2800      	cmp	r0, #0
 8013f16:	dbee      	blt.n	8013ef6 <uxr_receive_reliable_message+0x22>
 8013f18:	6923      	ldr	r3, [r4, #16]
 8013f1a:	4640      	mov	r0, r8
 8013f1c:	4798      	blx	r3
 8013f1e:	2101      	movs	r1, #1
 8013f20:	4681      	mov	r9, r0
 8013f22:	89a0      	ldrh	r0, [r4, #12]
 8013f24:	f000 fc5c 	bl	80147e0 <uxr_seq_num_add>
 8013f28:	f1b9 0f00 	cmp.w	r9, #0
 8013f2c:	d101      	bne.n	8013f32 <uxr_receive_reliable_message+0x5e>
 8013f2e:	4285      	cmp	r5, r0
 8013f30:	d049      	beq.n	8013fc6 <uxr_receive_reliable_message+0xf2>
 8013f32:	8921      	ldrh	r1, [r4, #8]
 8013f34:	fbb5 f3f1 	udiv	r3, r5, r1
 8013f38:	fb01 5313 	mls	r3, r1, r3, r5
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	6862      	ldr	r2, [r4, #4]
 8013f40:	6820      	ldr	r0, [r4, #0]
 8013f42:	fbb2 f2f1 	udiv	r2, r2, r1
 8013f46:	fb03 f302 	mul.w	r3, r3, r2
 8013f4a:	3304      	adds	r3, #4
 8013f4c:	4418      	add	r0, r3
 8013f4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1cf      	bne.n	8013ef6 <uxr_receive_reliable_message+0x22>
 8013f56:	4641      	mov	r1, r8
 8013f58:	463a      	mov	r2, r7
 8013f5a:	f001 f8f2 	bl	8015142 <memcpy>
 8013f5e:	8921      	ldrh	r1, [r4, #8]
 8013f60:	fbb5 f3f1 	udiv	r3, r5, r1
 8013f64:	fb01 5313 	mls	r3, r1, r3, r5
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	6862      	ldr	r2, [r4, #4]
 8013f6c:	fbb2 f2f1 	udiv	r2, r2, r1
 8013f70:	6821      	ldr	r1, [r4, #0]
 8013f72:	fb03 f302 	mul.w	r3, r3, r2
 8013f76:	2201      	movs	r2, #1
 8013f78:	50cf      	str	r7, [r1, r3]
 8013f7a:	9b08      	ldr	r3, [sp, #32]
 8013f7c:	701a      	strb	r2, [r3, #0]
 8013f7e:	f1b9 0f00 	cmp.w	r9, #0
 8013f82:	d0b8      	beq.n	8013ef6 <uxr_receive_reliable_message+0x22>
 8013f84:	89a6      	ldrh	r6, [r4, #12]
 8013f86:	e001      	b.n	8013f8c <uxr_receive_reliable_message+0xb8>
 8013f88:	2801      	cmp	r0, #1
 8013f8a:	d1b4      	bne.n	8013ef6 <uxr_receive_reliable_message+0x22>
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	2101      	movs	r1, #1
 8013f90:	f000 fc26 	bl	80147e0 <uxr_seq_num_add>
 8013f94:	8921      	ldrh	r1, [r4, #8]
 8013f96:	fbb0 f3f1 	udiv	r3, r0, r1
 8013f9a:	fb01 0313 	mls	r3, r1, r3, r0
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	6862      	ldr	r2, [r4, #4]
 8013fa2:	fbb2 f2f1 	udiv	r2, r2, r1
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	fb03 f302 	mul.w	r3, r3, r2
 8013fac:	6820      	ldr	r0, [r4, #0]
 8013fae:	3304      	adds	r3, #4
 8013fb0:	4418      	add	r0, r3
 8013fb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d09d      	beq.n	8013ef6 <uxr_receive_reliable_message+0x22>
 8013fba:	6923      	ldr	r3, [r4, #16]
 8013fbc:	4798      	blx	r3
 8013fbe:	2802      	cmp	r0, #2
 8013fc0:	d1e2      	bne.n	8013f88 <uxr_receive_reliable_message+0xb4>
 8013fc2:	2601      	movs	r6, #1
 8013fc4:	e798      	b.n	8013ef8 <uxr_receive_reliable_message+0x24>
 8013fc6:	9b08      	ldr	r3, [sp, #32]
 8013fc8:	81a5      	strh	r5, [r4, #12]
 8013fca:	2601      	movs	r6, #1
 8013fcc:	f883 9000 	strb.w	r9, [r3]
 8013fd0:	e792      	b.n	8013ef8 <uxr_receive_reliable_message+0x24>
 8013fd2:	bf00      	nop

08013fd4 <uxr_next_input_reliable_buffer_available>:
 8013fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd8:	4604      	mov	r4, r0
 8013fda:	460e      	mov	r6, r1
 8013fdc:	8980      	ldrh	r0, [r0, #12]
 8013fde:	2101      	movs	r1, #1
 8013fe0:	4617      	mov	r7, r2
 8013fe2:	f000 fbfd 	bl	80147e0 <uxr_seq_num_add>
 8013fe6:	8921      	ldrh	r1, [r4, #8]
 8013fe8:	fbb0 f3f1 	udiv	r3, r0, r1
 8013fec:	fb01 0313 	mls	r3, r1, r3, r0
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	6862      	ldr	r2, [r4, #4]
 8013ff4:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ff8:	fb03 f302 	mul.w	r3, r3, r2
 8013ffc:	6822      	ldr	r2, [r4, #0]
 8013ffe:	3304      	adds	r3, #4
 8014000:	eb02 0803 	add.w	r8, r2, r3
 8014004:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8014008:	f1b9 0f00 	cmp.w	r9, #0
 801400c:	d025      	beq.n	801405a <uxr_next_input_reliable_buffer_available+0x86>
 801400e:	6923      	ldr	r3, [r4, #16]
 8014010:	4605      	mov	r5, r0
 8014012:	4640      	mov	r0, r8
 8014014:	4798      	blx	r3
 8014016:	4682      	mov	sl, r0
 8014018:	b310      	cbz	r0, 8014060 <uxr_next_input_reliable_buffer_available+0x8c>
 801401a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801401e:	e005      	b.n	801402c <uxr_next_input_reliable_buffer_available+0x58>
 8014020:	6923      	ldr	r3, [r4, #16]
 8014022:	4798      	blx	r3
 8014024:	2802      	cmp	r0, #2
 8014026:	d032      	beq.n	801408e <uxr_next_input_reliable_buffer_available+0xba>
 8014028:	2801      	cmp	r0, #1
 801402a:	d116      	bne.n	801405a <uxr_next_input_reliable_buffer_available+0x86>
 801402c:	4650      	mov	r0, sl
 801402e:	2101      	movs	r1, #1
 8014030:	f000 fbd6 	bl	80147e0 <uxr_seq_num_add>
 8014034:	8921      	ldrh	r1, [r4, #8]
 8014036:	fbb0 f3f1 	udiv	r3, r0, r1
 801403a:	fb01 0313 	mls	r3, r1, r3, r0
 801403e:	b29b      	uxth	r3, r3
 8014040:	6862      	ldr	r2, [r4, #4]
 8014042:	fbb2 f2f1 	udiv	r2, r2, r1
 8014046:	4682      	mov	sl, r0
 8014048:	fb03 f302 	mul.w	r3, r3, r2
 801404c:	6820      	ldr	r0, [r4, #0]
 801404e:	3304      	adds	r3, #4
 8014050:	4418      	add	r0, r3
 8014052:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d1e2      	bne.n	8014020 <uxr_next_input_reliable_buffer_available+0x4c>
 801405a:	2000      	movs	r0, #0
 801405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014060:	464a      	mov	r2, r9
 8014062:	4641      	mov	r1, r8
 8014064:	4630      	mov	r0, r6
 8014066:	f7f7 fd67 	bl	800bb38 <ucdr_init_buffer>
 801406a:	8921      	ldrh	r1, [r4, #8]
 801406c:	fbb5 f3f1 	udiv	r3, r5, r1
 8014070:	fb01 5313 	mls	r3, r1, r3, r5
 8014074:	b29b      	uxth	r3, r3
 8014076:	6862      	ldr	r2, [r4, #4]
 8014078:	fbb2 f2f1 	udiv	r2, r2, r1
 801407c:	6821      	ldr	r1, [r4, #0]
 801407e:	fb03 f302 	mul.w	r3, r3, r2
 8014082:	2001      	movs	r0, #1
 8014084:	f841 a003 	str.w	sl, [r1, r3]
 8014088:	81a5      	strh	r5, [r4, #12]
 801408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801408e:	8922      	ldrh	r2, [r4, #8]
 8014090:	fbb5 f0f2 	udiv	r0, r5, r2
 8014094:	fb02 5510 	mls	r5, r2, r0, r5
 8014098:	b2ad      	uxth	r5, r5
 801409a:	6863      	ldr	r3, [r4, #4]
 801409c:	fbb3 f3f2 	udiv	r3, r3, r2
 80140a0:	fb05 f503 	mul.w	r5, r5, r3
 80140a4:	6823      	ldr	r3, [r4, #0]
 80140a6:	2000      	movs	r0, #0
 80140a8:	5158      	str	r0, [r3, r5]
 80140aa:	eba9 0207 	sub.w	r2, r9, r7
 80140ae:	eb08 0107 	add.w	r1, r8, r7
 80140b2:	4630      	mov	r0, r6
 80140b4:	f7f7 fd40 	bl	800bb38 <ucdr_init_buffer>
 80140b8:	4630      	mov	r0, r6
 80140ba:	4904      	ldr	r1, [pc, #16]	@ (80140cc <uxr_next_input_reliable_buffer_available+0xf8>)
 80140bc:	4622      	mov	r2, r4
 80140be:	f7f7 fd11 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 80140c2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80140c6:	2001      	movs	r0, #1
 80140c8:	e7c8      	b.n	801405c <uxr_next_input_reliable_buffer_available+0x88>
 80140ca:	bf00      	nop
 80140cc:	08013de9 	.word	0x08013de9

080140d0 <uxr_process_heartbeat>:
 80140d0:	b538      	push	{r3, r4, r5, lr}
 80140d2:	4611      	mov	r1, r2
 80140d4:	4604      	mov	r4, r0
 80140d6:	89c0      	ldrh	r0, [r0, #14]
 80140d8:	4615      	mov	r5, r2
 80140da:	f000 fb89 	bl	80147f0 <uxr_seq_num_cmp>
 80140de:	2800      	cmp	r0, #0
 80140e0:	bfb8      	it	lt
 80140e2:	81e5      	strhlt	r5, [r4, #14]
 80140e4:	bd38      	pop	{r3, r4, r5, pc}
 80140e6:	bf00      	nop

080140e8 <uxr_compute_acknack>:
 80140e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140ec:	8903      	ldrh	r3, [r0, #8]
 80140ee:	8986      	ldrh	r6, [r0, #12]
 80140f0:	4604      	mov	r4, r0
 80140f2:	460d      	mov	r5, r1
 80140f4:	b1d3      	cbz	r3, 801412c <uxr_compute_acknack+0x44>
 80140f6:	4630      	mov	r0, r6
 80140f8:	2701      	movs	r7, #1
 80140fa:	e003      	b.n	8014104 <uxr_compute_acknack+0x1c>
 80140fc:	4567      	cmp	r7, ip
 80140fe:	d215      	bcs.n	801412c <uxr_compute_acknack+0x44>
 8014100:	89a0      	ldrh	r0, [r4, #12]
 8014102:	3701      	adds	r7, #1
 8014104:	b2b9      	uxth	r1, r7
 8014106:	f000 fb6b 	bl	80147e0 <uxr_seq_num_add>
 801410a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801410e:	fbb0 f2fc 	udiv	r2, r0, ip
 8014112:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014116:	fb0c 0212 	mls	r2, ip, r2, r0
 801411a:	b292      	uxth	r2, r2
 801411c:	fbb3 f3fc 	udiv	r3, r3, ip
 8014120:	fb02 1303 	mla	r3, r2, r3, r1
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d1e8      	bne.n	80140fc <uxr_compute_acknack+0x14>
 801412a:	4606      	mov	r6, r0
 801412c:	802e      	strh	r6, [r5, #0]
 801412e:	4630      	mov	r0, r6
 8014130:	2101      	movs	r1, #1
 8014132:	89e6      	ldrh	r6, [r4, #14]
 8014134:	f000 fb58 	bl	80147e8 <uxr_seq_num_sub>
 8014138:	4601      	mov	r1, r0
 801413a:	4630      	mov	r0, r6
 801413c:	f000 fb54 	bl	80147e8 <uxr_seq_num_sub>
 8014140:	4606      	mov	r6, r0
 8014142:	b318      	cbz	r0, 801418c <uxr_compute_acknack+0xa4>
 8014144:	f04f 0900 	mov.w	r9, #0
 8014148:	464f      	mov	r7, r9
 801414a:	f04f 0801 	mov.w	r8, #1
 801414e:	fa1f f189 	uxth.w	r1, r9
 8014152:	8828      	ldrh	r0, [r5, #0]
 8014154:	f000 fb44 	bl	80147e0 <uxr_seq_num_add>
 8014158:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801415c:	6822      	ldr	r2, [r4, #0]
 801415e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014162:	fb01 011c 	mls	r1, r1, ip, r0
 8014166:	b289      	uxth	r1, r1
 8014168:	6863      	ldr	r3, [r4, #4]
 801416a:	fbb3 f3fc 	udiv	r3, r3, ip
 801416e:	fb01 2303 	mla	r3, r1, r3, r2
 8014172:	fa08 f209 	lsl.w	r2, r8, r9
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f109 0901 	add.w	r9, r9, #1
 801417c:	b90b      	cbnz	r3, 8014182 <uxr_compute_acknack+0x9a>
 801417e:	4317      	orrs	r7, r2
 8014180:	b2bf      	uxth	r7, r7
 8014182:	454e      	cmp	r6, r9
 8014184:	d1e3      	bne.n	801414e <uxr_compute_acknack+0x66>
 8014186:	4638      	mov	r0, r7
 8014188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801418c:	4607      	mov	r7, r0
 801418e:	4638      	mov	r0, r7
 8014190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014194 <uxr_init_output_best_effort_stream>:
 8014194:	b410      	push	{r4}
 8014196:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801419a:	81c4      	strh	r4, [r0, #14]
 801419c:	e9c0 1300 	strd	r1, r3, [r0]
 80141a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141a4:	7303      	strb	r3, [r0, #12]
 80141a6:	6082      	str	r2, [r0, #8]
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop

080141ac <uxr_reset_output_best_effort_stream>:
 80141ac:	7b02      	ldrb	r2, [r0, #12]
 80141ae:	6042      	str	r2, [r0, #4]
 80141b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80141b4:	81c3      	strh	r3, [r0, #14]
 80141b6:	4770      	bx	lr

080141b8 <uxr_prepare_best_effort_buffer_to_write>:
 80141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ba:	4604      	mov	r4, r0
 80141bc:	b083      	sub	sp, #12
 80141be:	6840      	ldr	r0, [r0, #4]
 80141c0:	460d      	mov	r5, r1
 80141c2:	4616      	mov	r6, r2
 80141c4:	f7fe f9c0 	bl	8012548 <uxr_submessage_padding>
 80141c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80141cc:	4410      	add	r0, r2
 80141ce:	1942      	adds	r2, r0, r5
 80141d0:	4293      	cmp	r3, r2
 80141d2:	bf2c      	ite	cs
 80141d4:	2701      	movcs	r7, #1
 80141d6:	2700      	movcc	r7, #0
 80141d8:	d202      	bcs.n	80141e0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80141da:	4638      	mov	r0, r7
 80141dc:	b003      	add	sp, #12
 80141de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141e0:	9000      	str	r0, [sp, #0]
 80141e2:	6821      	ldr	r1, [r4, #0]
 80141e4:	4630      	mov	r0, r6
 80141e6:	2300      	movs	r3, #0
 80141e8:	f7f7 fc94 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 80141ec:	6861      	ldr	r1, [r4, #4]
 80141ee:	4638      	mov	r0, r7
 80141f0:	4429      	add	r1, r5
 80141f2:	6061      	str	r1, [r4, #4]
 80141f4:	b003      	add	sp, #12
 80141f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080141f8 <uxr_prepare_best_effort_buffer_to_send>:
 80141f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141fc:	6845      	ldr	r5, [r0, #4]
 80141fe:	4604      	mov	r4, r0
 8014200:	7b00      	ldrb	r0, [r0, #12]
 8014202:	4285      	cmp	r5, r0
 8014204:	bf8c      	ite	hi
 8014206:	2701      	movhi	r7, #1
 8014208:	2700      	movls	r7, #0
 801420a:	d802      	bhi.n	8014212 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 801420c:	4638      	mov	r0, r7
 801420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014212:	4688      	mov	r8, r1
 8014214:	89e0      	ldrh	r0, [r4, #14]
 8014216:	2101      	movs	r1, #1
 8014218:	4615      	mov	r5, r2
 801421a:	461e      	mov	r6, r3
 801421c:	f000 fae0 	bl	80147e0 <uxr_seq_num_add>
 8014220:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014224:	81e0      	strh	r0, [r4, #14]
 8014226:	8030      	strh	r0, [r6, #0]
 8014228:	f8c8 2000 	str.w	r2, [r8]
 801422c:	602b      	str	r3, [r5, #0]
 801422e:	7b23      	ldrb	r3, [r4, #12]
 8014230:	6063      	str	r3, [r4, #4]
 8014232:	4638      	mov	r0, r7
 8014234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014238 <on_full_output_buffer>:
 8014238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423a:	6802      	ldr	r2, [r0, #0]
 801423c:	460d      	mov	r5, r1
 801423e:	6809      	ldr	r1, [r1, #0]
 8014240:	892f      	ldrh	r7, [r5, #8]
 8014242:	686c      	ldr	r4, [r5, #4]
 8014244:	fbb4 f4f7 	udiv	r4, r4, r7
 8014248:	1a53      	subs	r3, r2, r1
 801424a:	fbb3 f3f4 	udiv	r3, r3, r4
 801424e:	3301      	adds	r3, #1
 8014250:	b29b      	uxth	r3, r3
 8014252:	fbb3 f2f7 	udiv	r2, r3, r7
 8014256:	fb07 3312 	mls	r3, r7, r2, r3
 801425a:	b29b      	uxth	r3, r3
 801425c:	fb04 f403 	mul.w	r4, r4, r3
 8014260:	7b2f      	ldrb	r7, [r5, #12]
 8014262:	590a      	ldr	r2, [r1, r4]
 8014264:	6903      	ldr	r3, [r0, #16]
 8014266:	443c      	add	r4, r7
 8014268:	3408      	adds	r4, #8
 801426a:	1bd2      	subs	r2, r2, r7
 801426c:	4606      	mov	r6, r0
 801426e:	4421      	add	r1, r4
 8014270:	3a04      	subs	r2, #4
 8014272:	f7f7 fc59 	bl	800bb28 <ucdr_init_buffer_origin>
 8014276:	4630      	mov	r0, r6
 8014278:	4902      	ldr	r1, [pc, #8]	@ (8014284 <on_full_output_buffer+0x4c>)
 801427a:	462a      	mov	r2, r5
 801427c:	f7f7 fc32 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8014280:	2000      	movs	r0, #0
 8014282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014284:	08014239 	.word	0x08014239

08014288 <uxr_init_output_reliable_stream>:
 8014288:	b430      	push	{r4, r5}
 801428a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801428e:	6001      	str	r1, [r0, #0]
 8014290:	8103      	strh	r3, [r0, #8]
 8014292:	6042      	str	r2, [r0, #4]
 8014294:	7304      	strb	r4, [r0, #12]
 8014296:	b1b3      	cbz	r3, 80142c6 <uxr_init_output_reliable_stream+0x3e>
 8014298:	600c      	str	r4, [r1, #0]
 801429a:	8901      	ldrh	r1, [r0, #8]
 801429c:	2901      	cmp	r1, #1
 801429e:	d912      	bls.n	80142c6 <uxr_init_output_reliable_stream+0x3e>
 80142a0:	2201      	movs	r2, #1
 80142a2:	e9d0 5400 	ldrd	r5, r4, [r0]
 80142a6:	fbb2 f3f1 	udiv	r3, r2, r1
 80142aa:	fb01 2313 	mls	r3, r1, r3, r2
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	fbb4 f1f1 	udiv	r1, r4, r1
 80142b4:	fb03 f301 	mul.w	r3, r3, r1
 80142b8:	7b01      	ldrb	r1, [r0, #12]
 80142ba:	50e9      	str	r1, [r5, r3]
 80142bc:	3201      	adds	r2, #1
 80142be:	8901      	ldrh	r1, [r0, #8]
 80142c0:	b292      	uxth	r2, r2
 80142c2:	4291      	cmp	r1, r2
 80142c4:	d8ed      	bhi.n	80142a2 <uxr_init_output_reliable_stream+0x1a>
 80142c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142ca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80142ce:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80142d2:	4b05      	ldr	r3, [pc, #20]	@ (80142e8 <uxr_init_output_reliable_stream+0x60>)
 80142d4:	f8c0 300e 	str.w	r3, [r0, #14]
 80142d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142dc:	2300      	movs	r3, #0
 80142de:	bc30      	pop	{r4, r5}
 80142e0:	8242      	strh	r2, [r0, #18]
 80142e2:	8403      	strh	r3, [r0, #32]
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop
 80142e8:	ffff0000 	.word	0xffff0000

080142ec <uxr_reset_output_reliable_stream>:
 80142ec:	8902      	ldrh	r2, [r0, #8]
 80142ee:	b430      	push	{r4, r5}
 80142f0:	b19a      	cbz	r2, 801431a <uxr_reset_output_reliable_stream+0x2e>
 80142f2:	2400      	movs	r4, #0
 80142f4:	4621      	mov	r1, r4
 80142f6:	fbb1 f3f2 	udiv	r3, r1, r2
 80142fa:	fb02 1313 	mls	r3, r2, r3, r1
 80142fe:	e9d0 5100 	ldrd	r5, r1, [r0]
 8014302:	b29b      	uxth	r3, r3
 8014304:	fbb1 f2f2 	udiv	r2, r1, r2
 8014308:	fb03 f302 	mul.w	r3, r3, r2
 801430c:	7b02      	ldrb	r2, [r0, #12]
 801430e:	50ea      	str	r2, [r5, r3]
 8014310:	3401      	adds	r4, #1
 8014312:	8902      	ldrh	r2, [r0, #8]
 8014314:	b2a1      	uxth	r1, r4
 8014316:	428a      	cmp	r2, r1
 8014318:	d8ed      	bhi.n	80142f6 <uxr_reset_output_reliable_stream+0xa>
 801431a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801431e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014322:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014326:	4b05      	ldr	r3, [pc, #20]	@ (801433c <uxr_reset_output_reliable_stream+0x50>)
 8014328:	f8c0 300e 	str.w	r3, [r0, #14]
 801432c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014330:	2300      	movs	r3, #0
 8014332:	bc30      	pop	{r4, r5}
 8014334:	8242      	strh	r2, [r0, #18]
 8014336:	8403      	strh	r3, [r0, #32]
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop
 801433c:	ffff0000 	.word	0xffff0000

08014340 <uxr_prepare_reliable_buffer_to_write>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	4604      	mov	r4, r0
 8014346:	89c6      	ldrh	r6, [r0, #14]
 8014348:	8900      	ldrh	r0, [r0, #8]
 801434a:	f8d4 c000 	ldr.w	ip, [r4]
 801434e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014352:	fb00 6313 	mls	r3, r0, r3, r6
 8014356:	b091      	sub	sp, #68	@ 0x44
 8014358:	b29b      	uxth	r3, r3
 801435a:	6865      	ldr	r5, [r4, #4]
 801435c:	fbb5 f5f0 	udiv	r5, r5, r0
 8014360:	fb05 c303 	mla	r3, r5, r3, ip
 8014364:	9204      	str	r2, [sp, #16]
 8014366:	1d1a      	adds	r2, r3, #4
 8014368:	f8d3 8000 	ldr.w	r8, [r3]
 801436c:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014370:	9203      	str	r2, [sp, #12]
 8014372:	468b      	mov	fp, r1
 8014374:	1f2f      	subs	r7, r5, #4
 8014376:	2800      	cmp	r0, #0
 8014378:	f000 814e 	beq.w	8014618 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 801437c:	f04f 0e00 	mov.w	lr, #0
 8014380:	46f2      	mov	sl, lr
 8014382:	4672      	mov	r2, lr
 8014384:	fbb2 f3f0 	udiv	r3, r2, r0
 8014388:	fb00 2313 	mls	r3, r0, r3, r2
 801438c:	b29b      	uxth	r3, r3
 801438e:	fb05 c303 	mla	r3, r5, r3, ip
 8014392:	f10e 0e01 	add.w	lr, lr, #1
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	454b      	cmp	r3, r9
 801439a:	bf08      	it	eq
 801439c:	f10a 0a01 	addeq.w	sl, sl, #1
 80143a0:	fa1f f28e 	uxth.w	r2, lr
 80143a4:	bf08      	it	eq
 80143a6:	fa1f fa8a 	uxtheq.w	sl, sl
 80143aa:	4282      	cmp	r2, r0
 80143ac:	d3ea      	bcc.n	8014384 <uxr_prepare_reliable_buffer_to_write+0x44>
 80143ae:	4640      	mov	r0, r8
 80143b0:	2104      	movs	r1, #4
 80143b2:	f8cd a014 	str.w	sl, [sp, #20]
 80143b6:	f7f7 fbc3 	bl	800bb40 <ucdr_alignment>
 80143ba:	4480      	add	r8, r0
 80143bc:	eb08 020b 	add.w	r2, r8, fp
 80143c0:	42ba      	cmp	r2, r7
 80143c2:	f240 80cf 	bls.w	8014564 <uxr_prepare_reliable_buffer_to_write+0x224>
 80143c6:	7b22      	ldrb	r2, [r4, #12]
 80143c8:	445a      	add	r2, fp
 80143ca:	42ba      	cmp	r2, r7
 80143cc:	f240 80b7 	bls.w	801453e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80143d0:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80143d4:	33fc      	adds	r3, #252	@ 0xfc
 80143d6:	b2ba      	uxth	r2, r7
 80143d8:	4413      	add	r3, r2
 80143da:	b29b      	uxth	r3, r3
 80143dc:	fb0a f903 	mul.w	r9, sl, r3
 80143e0:	45d9      	cmp	r9, fp
 80143e2:	9305      	str	r3, [sp, #20]
 80143e4:	9306      	str	r3, [sp, #24]
 80143e6:	f0c0 80b9 	bcc.w	801455c <uxr_prepare_reliable_buffer_to_write+0x21c>
 80143ea:	f108 0304 	add.w	r3, r8, #4
 80143ee:	42bb      	cmp	r3, r7
 80143f0:	f080 80dd 	bcs.w	80145ae <uxr_prepare_reliable_buffer_to_write+0x26e>
 80143f4:	f1a2 0904 	sub.w	r9, r2, #4
 80143f8:	eba9 0908 	sub.w	r9, r9, r8
 80143fc:	9b05      	ldr	r3, [sp, #20]
 80143fe:	fa1f f989 	uxth.w	r9, r9
 8014402:	ebab 0b09 	sub.w	fp, fp, r9
 8014406:	fbbb f2f3 	udiv	r2, fp, r3
 801440a:	fb03 b312 	mls	r3, r3, r2, fp
 801440e:	2b00      	cmp	r3, #0
 8014410:	f000 80ca 	beq.w	80145a8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014414:	3201      	adds	r2, #1
 8014416:	b292      	uxth	r2, r2
 8014418:	4611      	mov	r1, r2
 801441a:	9306      	str	r3, [sp, #24]
 801441c:	4551      	cmp	r1, sl
 801441e:	f200 809d 	bhi.w	801455c <uxr_prepare_reliable_buffer_to_write+0x21c>
 8014422:	f10d 0b20 	add.w	fp, sp, #32
 8014426:	2900      	cmp	r1, #0
 8014428:	d042      	beq.n	80144b0 <uxr_prepare_reliable_buffer_to_write+0x170>
 801442a:	f8cd 801c 	str.w	r8, [sp, #28]
 801442e:	f04f 0a00 	mov.w	sl, #0
 8014432:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014436:	9505      	str	r5, [sp, #20]
 8014438:	f10d 0b20 	add.w	fp, sp, #32
 801443c:	460d      	mov	r5, r1
 801443e:	e000      	b.n	8014442 <uxr_prepare_reliable_buffer_to_write+0x102>
 8014440:	46c1      	mov	r9, r8
 8014442:	8920      	ldrh	r0, [r4, #8]
 8014444:	fbb6 f1f0 	udiv	r1, r6, r0
 8014448:	e9d4 3200 	ldrd	r3, r2, [r4]
 801444c:	fb00 6111 	mls	r1, r0, r1, r6
 8014450:	b289      	uxth	r1, r1
 8014452:	fbb2 f2f0 	udiv	r2, r2, r0
 8014456:	fb01 f102 	mul.w	r1, r1, r2
 801445a:	3104      	adds	r1, #4
 801445c:	4419      	add	r1, r3
 801445e:	463a      	mov	r2, r7
 8014460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	4658      	mov	r0, fp
 8014468:	2300      	movs	r3, #0
 801446a:	f7f7 fb53 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 801446e:	464a      	mov	r2, r9
 8014470:	2300      	movs	r3, #0
 8014472:	210d      	movs	r1, #13
 8014474:	4658      	mov	r0, fp
 8014476:	f7fe f827 	bl	80124c8 <uxr_buffer_submessage_header>
 801447a:	8920      	ldrh	r0, [r4, #8]
 801447c:	fbb6 f3f0 	udiv	r3, r6, r0
 8014480:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014484:	fb00 6313 	mls	r3, r0, r3, r6
 8014488:	b29b      	uxth	r3, r3
 801448a:	fbb1 f1f0 	udiv	r1, r1, r0
 801448e:	fb03 f301 	mul.w	r3, r3, r1
 8014492:	4630      	mov	r0, r6
 8014494:	50d7      	str	r7, [r2, r3]
 8014496:	2101      	movs	r1, #1
 8014498:	f000 f9a2 	bl	80147e0 <uxr_seq_num_add>
 801449c:	f10a 0a01 	add.w	sl, sl, #1
 80144a0:	fa1f f38a 	uxth.w	r3, sl
 80144a4:	429d      	cmp	r5, r3
 80144a6:	4606      	mov	r6, r0
 80144a8:	d8ca      	bhi.n	8014440 <uxr_prepare_reliable_buffer_to_write+0x100>
 80144aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80144ae:	9d05      	ldr	r5, [sp, #20]
 80144b0:	8921      	ldrh	r1, [r4, #8]
 80144b2:	fbb6 f3f1 	udiv	r3, r6, r1
 80144b6:	fb01 6313 	mls	r3, r1, r3, r6
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	6862      	ldr	r2, [r4, #4]
 80144be:	fbb2 f2f1 	udiv	r2, r2, r1
 80144c2:	6821      	ldr	r1, [r4, #0]
 80144c4:	fb03 f302 	mul.w	r3, r3, r2
 80144c8:	3304      	adds	r3, #4
 80144ca:	4419      	add	r1, r3
 80144cc:	463a      	mov	r2, r7
 80144ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	4658      	mov	r0, fp
 80144d6:	2300      	movs	r3, #0
 80144d8:	f7f7 fb1c 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 80144dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80144e0:	4658      	mov	r0, fp
 80144e2:	fa1f f289 	uxth.w	r2, r9
 80144e6:	2302      	movs	r3, #2
 80144e8:	210d      	movs	r1, #13
 80144ea:	f7fd ffed 	bl	80124c8 <uxr_buffer_submessage_header>
 80144ee:	8921      	ldrh	r1, [r4, #8]
 80144f0:	7b27      	ldrb	r7, [r4, #12]
 80144f2:	fbb6 f0f1 	udiv	r0, r6, r1
 80144f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80144fa:	fb01 6010 	mls	r0, r1, r0, r6
 80144fe:	b280      	uxth	r0, r0
 8014500:	fbb2 f2f1 	udiv	r2, r2, r1
 8014504:	3704      	adds	r7, #4
 8014506:	fb00 f002 	mul.w	r0, r0, r2
 801450a:	f1a5 0208 	sub.w	r2, r5, #8
 801450e:	464d      	mov	r5, r9
 8014510:	443d      	add	r5, r7
 8014512:	9f03      	ldr	r7, [sp, #12]
 8014514:	501d      	str	r5, [r3, r0]
 8014516:	f108 0104 	add.w	r1, r8, #4
 801451a:	9d04      	ldr	r5, [sp, #16]
 801451c:	440f      	add	r7, r1
 801451e:	eba2 0208 	sub.w	r2, r2, r8
 8014522:	4639      	mov	r1, r7
 8014524:	4628      	mov	r0, r5
 8014526:	f7f7 fb07 	bl	800bb38 <ucdr_init_buffer>
 801452a:	4628      	mov	r0, r5
 801452c:	493b      	ldr	r1, [pc, #236]	@ (801461c <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 801452e:	4622      	mov	r2, r4
 8014530:	f7f7 fad8 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8014534:	2001      	movs	r0, #1
 8014536:	81e6      	strh	r6, [r4, #14]
 8014538:	b011      	add	sp, #68	@ 0x44
 801453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801453e:	2101      	movs	r1, #1
 8014540:	89e0      	ldrh	r0, [r4, #14]
 8014542:	f000 f94d 	bl	80147e0 <uxr_seq_num_add>
 8014546:	8921      	ldrh	r1, [r4, #8]
 8014548:	4605      	mov	r5, r0
 801454a:	8a60      	ldrh	r0, [r4, #18]
 801454c:	f000 f948 	bl	80147e0 <uxr_seq_num_add>
 8014550:	4601      	mov	r1, r0
 8014552:	4628      	mov	r0, r5
 8014554:	f000 f94c 	bl	80147f0 <uxr_seq_num_cmp>
 8014558:	2800      	cmp	r0, #0
 801455a:	dd42      	ble.n	80145e2 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 801455c:	2000      	movs	r0, #0
 801455e:	b011      	add	sp, #68	@ 0x44
 8014560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014564:	8921      	ldrh	r1, [r4, #8]
 8014566:	8a60      	ldrh	r0, [r4, #18]
 8014568:	9205      	str	r2, [sp, #20]
 801456a:	f000 f939 	bl	80147e0 <uxr_seq_num_add>
 801456e:	4601      	mov	r1, r0
 8014570:	4630      	mov	r0, r6
 8014572:	f000 f93d 	bl	80147f0 <uxr_seq_num_cmp>
 8014576:	2800      	cmp	r0, #0
 8014578:	9a05      	ldr	r2, [sp, #20]
 801457a:	dcef      	bgt.n	801455c <uxr_prepare_reliable_buffer_to_write+0x21c>
 801457c:	8920      	ldrh	r0, [r4, #8]
 801457e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014582:	e9d4 4100 	ldrd	r4, r1, [r4]
 8014586:	fb00 6313 	mls	r3, r0, r3, r6
 801458a:	b29b      	uxth	r3, r3
 801458c:	fbb1 f1f0 	udiv	r1, r1, r0
 8014590:	fb03 f301 	mul.w	r3, r3, r1
 8014594:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014598:	50e2      	str	r2, [r4, r3]
 801459a:	f8cd 8000 	str.w	r8, [sp]
 801459e:	2300      	movs	r3, #0
 80145a0:	f7f7 fab8 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 80145a4:	2001      	movs	r0, #1
 80145a6:	e7da      	b.n	801455e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80145a8:	b293      	uxth	r3, r2
 80145aa:	4619      	mov	r1, r3
 80145ac:	e736      	b.n	801441c <uxr_prepare_reliable_buffer_to_write+0xdc>
 80145ae:	4630      	mov	r0, r6
 80145b0:	2101      	movs	r1, #1
 80145b2:	9207      	str	r2, [sp, #28]
 80145b4:	f000 f914 	bl	80147e0 <uxr_seq_num_add>
 80145b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80145bc:	fbb0 f1fc 	udiv	r1, r0, ip
 80145c0:	fb0c 0111 	mls	r1, ip, r1, r0
 80145c4:	b289      	uxth	r1, r1
 80145c6:	6863      	ldr	r3, [r4, #4]
 80145c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80145cc:	fb01 f103 	mul.w	r1, r1, r3
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	9a07      	ldr	r2, [sp, #28]
 80145d4:	3104      	adds	r1, #4
 80145d6:	440b      	add	r3, r1
 80145d8:	4606      	mov	r6, r0
 80145da:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80145de:	9303      	str	r3, [sp, #12]
 80145e0:	e708      	b.n	80143f4 <uxr_prepare_reliable_buffer_to_write+0xb4>
 80145e2:	8920      	ldrh	r0, [r4, #8]
 80145e4:	fbb5 f3f0 	udiv	r3, r5, r0
 80145e8:	fb00 5313 	mls	r3, r0, r3, r5
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	6862      	ldr	r2, [r4, #4]
 80145f0:	6821      	ldr	r1, [r4, #0]
 80145f2:	fbb2 f0f0 	udiv	r0, r2, r0
 80145f6:	fb03 f300 	mul.w	r3, r3, r0
 80145fa:	7b22      	ldrb	r2, [r4, #12]
 80145fc:	9804      	ldr	r0, [sp, #16]
 80145fe:	3304      	adds	r3, #4
 8014600:	4419      	add	r1, r3
 8014602:	445a      	add	r2, fp
 8014604:	f841 2c04 	str.w	r2, [r1, #-4]
 8014608:	7b23      	ldrb	r3, [r4, #12]
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	2300      	movs	r3, #0
 801460e:	f7f7 fa81 	bl	800bb14 <ucdr_init_buffer_origin_offset>
 8014612:	81e5      	strh	r5, [r4, #14]
 8014614:	2001      	movs	r0, #1
 8014616:	e7a2      	b.n	801455e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014618:	4682      	mov	sl, r0
 801461a:	e6c8      	b.n	80143ae <uxr_prepare_reliable_buffer_to_write+0x6e>
 801461c:	08014239 	.word	0x08014239

08014620 <uxr_prepare_next_reliable_buffer_to_send>:
 8014620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014624:	4605      	mov	r5, r0
 8014626:	4688      	mov	r8, r1
 8014628:	8a00      	ldrh	r0, [r0, #16]
 801462a:	2101      	movs	r1, #1
 801462c:	4617      	mov	r7, r2
 801462e:	461e      	mov	r6, r3
 8014630:	f000 f8d6 	bl	80147e0 <uxr_seq_num_add>
 8014634:	8030      	strh	r0, [r6, #0]
 8014636:	892a      	ldrh	r2, [r5, #8]
 8014638:	fbb0 f3f2 	udiv	r3, r0, r2
 801463c:	fb02 0413 	mls	r4, r2, r3, r0
 8014640:	b2a4      	uxth	r4, r4
 8014642:	686b      	ldr	r3, [r5, #4]
 8014644:	fbb3 f2f2 	udiv	r2, r3, r2
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	89e9      	ldrh	r1, [r5, #14]
 801464c:	fb04 f402 	mul.w	r4, r4, r2
 8014650:	3404      	adds	r4, #4
 8014652:	4423      	add	r3, r4
 8014654:	f8c8 3000 	str.w	r3, [r8]
 8014658:	682b      	ldr	r3, [r5, #0]
 801465a:	441c      	add	r4, r3
 801465c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014660:	603b      	str	r3, [r7, #0]
 8014662:	f000 f8c5 	bl	80147f0 <uxr_seq_num_cmp>
 8014666:	2800      	cmp	r0, #0
 8014668:	dd02      	ble.n	8014670 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 801466a:	2000      	movs	r0, #0
 801466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014670:	683a      	ldr	r2, [r7, #0]
 8014672:	7b2b      	ldrb	r3, [r5, #12]
 8014674:	429a      	cmp	r2, r3
 8014676:	d9f8      	bls.n	801466a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014678:	8a69      	ldrh	r1, [r5, #18]
 801467a:	8a28      	ldrh	r0, [r5, #16]
 801467c:	f000 f8b4 	bl	80147e8 <uxr_seq_num_sub>
 8014680:	892b      	ldrh	r3, [r5, #8]
 8014682:	4283      	cmp	r3, r0
 8014684:	d0f1      	beq.n	801466a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014686:	8830      	ldrh	r0, [r6, #0]
 8014688:	89eb      	ldrh	r3, [r5, #14]
 801468a:	8228      	strh	r0, [r5, #16]
 801468c:	4298      	cmp	r0, r3
 801468e:	d002      	beq.n	8014696 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8014690:	2001      	movs	r0, #1
 8014692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014696:	2101      	movs	r1, #1
 8014698:	f000 f8a2 	bl	80147e0 <uxr_seq_num_add>
 801469c:	81e8      	strh	r0, [r5, #14]
 801469e:	2001      	movs	r0, #1
 80146a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146a4 <uxr_update_output_stream_heartbeat_timestamp>:
 80146a4:	b5d0      	push	{r4, r6, r7, lr}
 80146a6:	8a01      	ldrh	r1, [r0, #16]
 80146a8:	4604      	mov	r4, r0
 80146aa:	8a40      	ldrh	r0, [r0, #18]
 80146ac:	4616      	mov	r6, r2
 80146ae:	461f      	mov	r7, r3
 80146b0:	f000 f89e 	bl	80147f0 <uxr_seq_num_cmp>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	db07      	blt.n	80146c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80146b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80146c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80146c4:	2000      	movs	r0, #0
 80146c6:	bdd0      	pop	{r4, r6, r7, pc}
 80146c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80146cc:	b948      	cbnz	r0, 80146e2 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80146ce:	2301      	movs	r3, #1
 80146d0:	f884 3020 	strb.w	r3, [r4, #32]
 80146d4:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 80146d8:	f147 0200 	adc.w	r2, r7, #0
 80146dc:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80146e0:	bdd0      	pop	{r4, r6, r7, pc}
 80146e2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80146e6:	4296      	cmp	r6, r2
 80146e8:	eb77 0303 	sbcs.w	r3, r7, r3
 80146ec:	bfa5      	ittet	ge
 80146ee:	3001      	addge	r0, #1
 80146f0:	f884 0020 	strbge.w	r0, [r4, #32]
 80146f4:	2000      	movlt	r0, #0
 80146f6:	2001      	movge	r0, #1
 80146f8:	e7ec      	b.n	80146d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80146fa:	bf00      	nop

080146fc <uxr_begin_output_nack_buffer_it>:
 80146fc:	8a40      	ldrh	r0, [r0, #18]
 80146fe:	4770      	bx	lr

08014700 <uxr_next_reliable_nack_buffer_to_send>:
 8014700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014704:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8014708:	f1b9 0f00 	cmp.w	r9, #0
 801470c:	d011      	beq.n	8014732 <uxr_next_reliable_nack_buffer_to_send+0x32>
 801470e:	4605      	mov	r5, r0
 8014710:	8818      	ldrh	r0, [r3, #0]
 8014712:	460f      	mov	r7, r1
 8014714:	4690      	mov	r8, r2
 8014716:	461e      	mov	r6, r3
 8014718:	2101      	movs	r1, #1
 801471a:	f000 f861 	bl	80147e0 <uxr_seq_num_add>
 801471e:	8030      	strh	r0, [r6, #0]
 8014720:	8a29      	ldrh	r1, [r5, #16]
 8014722:	f000 f865 	bl	80147f0 <uxr_seq_num_cmp>
 8014726:	2800      	cmp	r0, #0
 8014728:	dd06      	ble.n	8014738 <uxr_next_reliable_nack_buffer_to_send+0x38>
 801472a:	f04f 0900 	mov.w	r9, #0
 801472e:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8014732:	4648      	mov	r0, r9
 8014734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014738:	892a      	ldrh	r2, [r5, #8]
 801473a:	8830      	ldrh	r0, [r6, #0]
 801473c:	fbb0 f4f2 	udiv	r4, r0, r2
 8014740:	fb02 0414 	mls	r4, r2, r4, r0
 8014744:	b2a4      	uxth	r4, r4
 8014746:	686b      	ldr	r3, [r5, #4]
 8014748:	fbb3 f2f2 	udiv	r2, r3, r2
 801474c:	682b      	ldr	r3, [r5, #0]
 801474e:	fb04 f402 	mul.w	r4, r4, r2
 8014752:	3404      	adds	r4, #4
 8014754:	4423      	add	r3, r4
 8014756:	603b      	str	r3, [r7, #0]
 8014758:	682b      	ldr	r3, [r5, #0]
 801475a:	441c      	add	r4, r3
 801475c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014760:	f8c8 3000 	str.w	r3, [r8]
 8014764:	7b2a      	ldrb	r2, [r5, #12]
 8014766:	429a      	cmp	r2, r3
 8014768:	d0d6      	beq.n	8014718 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801476a:	4648      	mov	r0, r9
 801476c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014770 <uxr_process_acknack>:
 8014770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014772:	4604      	mov	r4, r0
 8014774:	460e      	mov	r6, r1
 8014776:	4610      	mov	r0, r2
 8014778:	2101      	movs	r1, #1
 801477a:	f000 f835 	bl	80147e8 <uxr_seq_num_sub>
 801477e:	8a61      	ldrh	r1, [r4, #18]
 8014780:	f000 f832 	bl	80147e8 <uxr_seq_num_sub>
 8014784:	b1c0      	cbz	r0, 80147b8 <uxr_process_acknack+0x48>
 8014786:	4605      	mov	r5, r0
 8014788:	2700      	movs	r7, #0
 801478a:	2101      	movs	r1, #1
 801478c:	8a60      	ldrh	r0, [r4, #18]
 801478e:	f000 f827 	bl	80147e0 <uxr_seq_num_add>
 8014792:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014796:	fbb0 f3fc 	udiv	r3, r0, ip
 801479a:	e9d4 2100 	ldrd	r2, r1, [r4]
 801479e:	fb0c 0313 	mls	r3, ip, r3, r0
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	fbb1 f1fc 	udiv	r1, r1, ip
 80147a8:	3701      	adds	r7, #1
 80147aa:	fb03 f301 	mul.w	r3, r3, r1
 80147ae:	42bd      	cmp	r5, r7
 80147b0:	7b21      	ldrb	r1, [r4, #12]
 80147b2:	8260      	strh	r0, [r4, #18]
 80147b4:	50d1      	str	r1, [r2, r3]
 80147b6:	d1e8      	bne.n	801478a <uxr_process_acknack+0x1a>
 80147b8:	3e00      	subs	r6, #0
 80147ba:	f04f 0300 	mov.w	r3, #0
 80147be:	bf18      	it	ne
 80147c0:	2601      	movne	r6, #1
 80147c2:	f884 3020 	strb.w	r3, [r4, #32]
 80147c6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80147ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147cc <uxr_is_output_up_to_date>:
 80147cc:	8a01      	ldrh	r1, [r0, #16]
 80147ce:	8a40      	ldrh	r0, [r0, #18]
 80147d0:	b508      	push	{r3, lr}
 80147d2:	f000 f80d 	bl	80147f0 <uxr_seq_num_cmp>
 80147d6:	fab0 f080 	clz	r0, r0
 80147da:	0940      	lsrs	r0, r0, #5
 80147dc:	bd08      	pop	{r3, pc}
 80147de:	bf00      	nop

080147e0 <uxr_seq_num_add>:
 80147e0:	4408      	add	r0, r1
 80147e2:	b280      	uxth	r0, r0
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop

080147e8 <uxr_seq_num_sub>:
 80147e8:	1a40      	subs	r0, r0, r1
 80147ea:	b280      	uxth	r0, r0
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop

080147f0 <uxr_seq_num_cmp>:
 80147f0:	4288      	cmp	r0, r1
 80147f2:	d011      	beq.n	8014818 <uxr_seq_num_cmp+0x28>
 80147f4:	d309      	bcc.n	801480a <uxr_seq_num_cmp+0x1a>
 80147f6:	4288      	cmp	r0, r1
 80147f8:	d910      	bls.n	801481c <uxr_seq_num_cmp+0x2c>
 80147fa:	1a40      	subs	r0, r0, r1
 80147fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014800:	bfd4      	ite	le
 8014802:	2001      	movle	r0, #1
 8014804:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014808:	4770      	bx	lr
 801480a:	1a0b      	subs	r3, r1, r0
 801480c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014810:	daf1      	bge.n	80147f6 <uxr_seq_num_cmp+0x6>
 8014812:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014816:	4770      	bx	lr
 8014818:	2000      	movs	r0, #0
 801481a:	4770      	bx	lr
 801481c:	2001      	movs	r0, #1
 801481e:	4770      	bx	lr

08014820 <calloc>:
 8014820:	4b02      	ldr	r3, [pc, #8]	@ (801482c <calloc+0xc>)
 8014822:	460a      	mov	r2, r1
 8014824:	4601      	mov	r1, r0
 8014826:	6818      	ldr	r0, [r3, #0]
 8014828:	f000 b802 	b.w	8014830 <_calloc_r>
 801482c:	200000c4 	.word	0x200000c4

08014830 <_calloc_r>:
 8014830:	b570      	push	{r4, r5, r6, lr}
 8014832:	fba1 5402 	umull	r5, r4, r1, r2
 8014836:	b93c      	cbnz	r4, 8014848 <_calloc_r+0x18>
 8014838:	4629      	mov	r1, r5
 801483a:	f000 f887 	bl	801494c <_malloc_r>
 801483e:	4606      	mov	r6, r0
 8014840:	b928      	cbnz	r0, 801484e <_calloc_r+0x1e>
 8014842:	2600      	movs	r6, #0
 8014844:	4630      	mov	r0, r6
 8014846:	bd70      	pop	{r4, r5, r6, pc}
 8014848:	220c      	movs	r2, #12
 801484a:	6002      	str	r2, [r0, #0]
 801484c:	e7f9      	b.n	8014842 <_calloc_r+0x12>
 801484e:	462a      	mov	r2, r5
 8014850:	4621      	mov	r1, r4
 8014852:	f000 fbad 	bl	8014fb0 <memset>
 8014856:	e7f5      	b.n	8014844 <_calloc_r+0x14>

08014858 <getenv>:
 8014858:	b507      	push	{r0, r1, r2, lr}
 801485a:	4b04      	ldr	r3, [pc, #16]	@ (801486c <getenv+0x14>)
 801485c:	4601      	mov	r1, r0
 801485e:	aa01      	add	r2, sp, #4
 8014860:	6818      	ldr	r0, [r3, #0]
 8014862:	f000 f805 	bl	8014870 <_findenv_r>
 8014866:	b003      	add	sp, #12
 8014868:	f85d fb04 	ldr.w	pc, [sp], #4
 801486c:	200000c4 	.word	0x200000c4

08014870 <_findenv_r>:
 8014870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80148e4 <_findenv_r+0x74>
 8014878:	4606      	mov	r6, r0
 801487a:	4689      	mov	r9, r1
 801487c:	4617      	mov	r7, r2
 801487e:	f000 fc8d 	bl	801519c <__env_lock>
 8014882:	f8da 4000 	ldr.w	r4, [sl]
 8014886:	b134      	cbz	r4, 8014896 <_findenv_r+0x26>
 8014888:	464b      	mov	r3, r9
 801488a:	4698      	mov	r8, r3
 801488c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014890:	b13a      	cbz	r2, 80148a2 <_findenv_r+0x32>
 8014892:	2a3d      	cmp	r2, #61	@ 0x3d
 8014894:	d1f9      	bne.n	801488a <_findenv_r+0x1a>
 8014896:	4630      	mov	r0, r6
 8014898:	f000 fc86 	bl	80151a8 <__env_unlock>
 801489c:	2000      	movs	r0, #0
 801489e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a2:	eba8 0809 	sub.w	r8, r8, r9
 80148a6:	46a3      	mov	fp, r4
 80148a8:	f854 0b04 	ldr.w	r0, [r4], #4
 80148ac:	2800      	cmp	r0, #0
 80148ae:	d0f2      	beq.n	8014896 <_findenv_r+0x26>
 80148b0:	4642      	mov	r2, r8
 80148b2:	4649      	mov	r1, r9
 80148b4:	f000 fb91 	bl	8014fda <strncmp>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d1f4      	bne.n	80148a6 <_findenv_r+0x36>
 80148bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80148c0:	eb03 0508 	add.w	r5, r3, r8
 80148c4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80148c8:	2b3d      	cmp	r3, #61	@ 0x3d
 80148ca:	d1ec      	bne.n	80148a6 <_findenv_r+0x36>
 80148cc:	f8da 3000 	ldr.w	r3, [sl]
 80148d0:	ebab 0303 	sub.w	r3, fp, r3
 80148d4:	109b      	asrs	r3, r3, #2
 80148d6:	4630      	mov	r0, r6
 80148d8:	603b      	str	r3, [r7, #0]
 80148da:	f000 fc65 	bl	80151a8 <__env_unlock>
 80148de:	1c68      	adds	r0, r5, #1
 80148e0:	e7dd      	b.n	801489e <_findenv_r+0x2e>
 80148e2:	bf00      	nop
 80148e4:	20000000 	.word	0x20000000

080148e8 <malloc>:
 80148e8:	4b02      	ldr	r3, [pc, #8]	@ (80148f4 <malloc+0xc>)
 80148ea:	4601      	mov	r1, r0
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	f000 b82d 	b.w	801494c <_malloc_r>
 80148f2:	bf00      	nop
 80148f4:	200000c4 	.word	0x200000c4

080148f8 <free>:
 80148f8:	4b02      	ldr	r3, [pc, #8]	@ (8014904 <free+0xc>)
 80148fa:	4601      	mov	r1, r0
 80148fc:	6818      	ldr	r0, [r3, #0]
 80148fe:	f000 bc59 	b.w	80151b4 <_free_r>
 8014902:	bf00      	nop
 8014904:	200000c4 	.word	0x200000c4

08014908 <sbrk_aligned>:
 8014908:	b570      	push	{r4, r5, r6, lr}
 801490a:	4e0f      	ldr	r6, [pc, #60]	@ (8014948 <sbrk_aligned+0x40>)
 801490c:	460c      	mov	r4, r1
 801490e:	6831      	ldr	r1, [r6, #0]
 8014910:	4605      	mov	r5, r0
 8014912:	b911      	cbnz	r1, 801491a <sbrk_aligned+0x12>
 8014914:	f000 fbbe 	bl	8015094 <_sbrk_r>
 8014918:	6030      	str	r0, [r6, #0]
 801491a:	4621      	mov	r1, r4
 801491c:	4628      	mov	r0, r5
 801491e:	f000 fbb9 	bl	8015094 <_sbrk_r>
 8014922:	1c43      	adds	r3, r0, #1
 8014924:	d103      	bne.n	801492e <sbrk_aligned+0x26>
 8014926:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801492a:	4620      	mov	r0, r4
 801492c:	bd70      	pop	{r4, r5, r6, pc}
 801492e:	1cc4      	adds	r4, r0, #3
 8014930:	f024 0403 	bic.w	r4, r4, #3
 8014934:	42a0      	cmp	r0, r4
 8014936:	d0f8      	beq.n	801492a <sbrk_aligned+0x22>
 8014938:	1a21      	subs	r1, r4, r0
 801493a:	4628      	mov	r0, r5
 801493c:	f000 fbaa 	bl	8015094 <_sbrk_r>
 8014940:	3001      	adds	r0, #1
 8014942:	d1f2      	bne.n	801492a <sbrk_aligned+0x22>
 8014944:	e7ef      	b.n	8014926 <sbrk_aligned+0x1e>
 8014946:	bf00      	nop
 8014948:	20009278 	.word	0x20009278

0801494c <_malloc_r>:
 801494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014950:	1ccd      	adds	r5, r1, #3
 8014952:	f025 0503 	bic.w	r5, r5, #3
 8014956:	3508      	adds	r5, #8
 8014958:	2d0c      	cmp	r5, #12
 801495a:	bf38      	it	cc
 801495c:	250c      	movcc	r5, #12
 801495e:	2d00      	cmp	r5, #0
 8014960:	4606      	mov	r6, r0
 8014962:	db01      	blt.n	8014968 <_malloc_r+0x1c>
 8014964:	42a9      	cmp	r1, r5
 8014966:	d904      	bls.n	8014972 <_malloc_r+0x26>
 8014968:	230c      	movs	r3, #12
 801496a:	6033      	str	r3, [r6, #0]
 801496c:	2000      	movs	r0, #0
 801496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014a48 <_malloc_r+0xfc>
 8014976:	f000 f869 	bl	8014a4c <__malloc_lock>
 801497a:	f8d8 3000 	ldr.w	r3, [r8]
 801497e:	461c      	mov	r4, r3
 8014980:	bb44      	cbnz	r4, 80149d4 <_malloc_r+0x88>
 8014982:	4629      	mov	r1, r5
 8014984:	4630      	mov	r0, r6
 8014986:	f7ff ffbf 	bl	8014908 <sbrk_aligned>
 801498a:	1c43      	adds	r3, r0, #1
 801498c:	4604      	mov	r4, r0
 801498e:	d158      	bne.n	8014a42 <_malloc_r+0xf6>
 8014990:	f8d8 4000 	ldr.w	r4, [r8]
 8014994:	4627      	mov	r7, r4
 8014996:	2f00      	cmp	r7, #0
 8014998:	d143      	bne.n	8014a22 <_malloc_r+0xd6>
 801499a:	2c00      	cmp	r4, #0
 801499c:	d04b      	beq.n	8014a36 <_malloc_r+0xea>
 801499e:	6823      	ldr	r3, [r4, #0]
 80149a0:	4639      	mov	r1, r7
 80149a2:	4630      	mov	r0, r6
 80149a4:	eb04 0903 	add.w	r9, r4, r3
 80149a8:	f000 fb74 	bl	8015094 <_sbrk_r>
 80149ac:	4581      	cmp	r9, r0
 80149ae:	d142      	bne.n	8014a36 <_malloc_r+0xea>
 80149b0:	6821      	ldr	r1, [r4, #0]
 80149b2:	1a6d      	subs	r5, r5, r1
 80149b4:	4629      	mov	r1, r5
 80149b6:	4630      	mov	r0, r6
 80149b8:	f7ff ffa6 	bl	8014908 <sbrk_aligned>
 80149bc:	3001      	adds	r0, #1
 80149be:	d03a      	beq.n	8014a36 <_malloc_r+0xea>
 80149c0:	6823      	ldr	r3, [r4, #0]
 80149c2:	442b      	add	r3, r5
 80149c4:	6023      	str	r3, [r4, #0]
 80149c6:	f8d8 3000 	ldr.w	r3, [r8]
 80149ca:	685a      	ldr	r2, [r3, #4]
 80149cc:	bb62      	cbnz	r2, 8014a28 <_malloc_r+0xdc>
 80149ce:	f8c8 7000 	str.w	r7, [r8]
 80149d2:	e00f      	b.n	80149f4 <_malloc_r+0xa8>
 80149d4:	6822      	ldr	r2, [r4, #0]
 80149d6:	1b52      	subs	r2, r2, r5
 80149d8:	d420      	bmi.n	8014a1c <_malloc_r+0xd0>
 80149da:	2a0b      	cmp	r2, #11
 80149dc:	d917      	bls.n	8014a0e <_malloc_r+0xc2>
 80149de:	1961      	adds	r1, r4, r5
 80149e0:	42a3      	cmp	r3, r4
 80149e2:	6025      	str	r5, [r4, #0]
 80149e4:	bf18      	it	ne
 80149e6:	6059      	strne	r1, [r3, #4]
 80149e8:	6863      	ldr	r3, [r4, #4]
 80149ea:	bf08      	it	eq
 80149ec:	f8c8 1000 	streq.w	r1, [r8]
 80149f0:	5162      	str	r2, [r4, r5]
 80149f2:	604b      	str	r3, [r1, #4]
 80149f4:	4630      	mov	r0, r6
 80149f6:	f000 f82f 	bl	8014a58 <__malloc_unlock>
 80149fa:	f104 000b 	add.w	r0, r4, #11
 80149fe:	1d23      	adds	r3, r4, #4
 8014a00:	f020 0007 	bic.w	r0, r0, #7
 8014a04:	1ac2      	subs	r2, r0, r3
 8014a06:	bf1c      	itt	ne
 8014a08:	1a1b      	subne	r3, r3, r0
 8014a0a:	50a3      	strne	r3, [r4, r2]
 8014a0c:	e7af      	b.n	801496e <_malloc_r+0x22>
 8014a0e:	6862      	ldr	r2, [r4, #4]
 8014a10:	42a3      	cmp	r3, r4
 8014a12:	bf0c      	ite	eq
 8014a14:	f8c8 2000 	streq.w	r2, [r8]
 8014a18:	605a      	strne	r2, [r3, #4]
 8014a1a:	e7eb      	b.n	80149f4 <_malloc_r+0xa8>
 8014a1c:	4623      	mov	r3, r4
 8014a1e:	6864      	ldr	r4, [r4, #4]
 8014a20:	e7ae      	b.n	8014980 <_malloc_r+0x34>
 8014a22:	463c      	mov	r4, r7
 8014a24:	687f      	ldr	r7, [r7, #4]
 8014a26:	e7b6      	b.n	8014996 <_malloc_r+0x4a>
 8014a28:	461a      	mov	r2, r3
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	42a3      	cmp	r3, r4
 8014a2e:	d1fb      	bne.n	8014a28 <_malloc_r+0xdc>
 8014a30:	2300      	movs	r3, #0
 8014a32:	6053      	str	r3, [r2, #4]
 8014a34:	e7de      	b.n	80149f4 <_malloc_r+0xa8>
 8014a36:	230c      	movs	r3, #12
 8014a38:	6033      	str	r3, [r6, #0]
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f000 f80c 	bl	8014a58 <__malloc_unlock>
 8014a40:	e794      	b.n	801496c <_malloc_r+0x20>
 8014a42:	6005      	str	r5, [r0, #0]
 8014a44:	e7d6      	b.n	80149f4 <_malloc_r+0xa8>
 8014a46:	bf00      	nop
 8014a48:	2000927c 	.word	0x2000927c

08014a4c <__malloc_lock>:
 8014a4c:	4801      	ldr	r0, [pc, #4]	@ (8014a54 <__malloc_lock+0x8>)
 8014a4e:	f000 bb6e 	b.w	801512e <__retarget_lock_acquire_recursive>
 8014a52:	bf00      	nop
 8014a54:	200093c1 	.word	0x200093c1

08014a58 <__malloc_unlock>:
 8014a58:	4801      	ldr	r0, [pc, #4]	@ (8014a60 <__malloc_unlock+0x8>)
 8014a5a:	f000 bb69 	b.w	8015130 <__retarget_lock_release_recursive>
 8014a5e:	bf00      	nop
 8014a60:	200093c1 	.word	0x200093c1

08014a64 <srand>:
 8014a64:	b538      	push	{r3, r4, r5, lr}
 8014a66:	4b10      	ldr	r3, [pc, #64]	@ (8014aa8 <srand+0x44>)
 8014a68:	681d      	ldr	r5, [r3, #0]
 8014a6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	b9b3      	cbnz	r3, 8014a9e <srand+0x3a>
 8014a70:	2018      	movs	r0, #24
 8014a72:	f7ff ff39 	bl	80148e8 <malloc>
 8014a76:	4602      	mov	r2, r0
 8014a78:	6328      	str	r0, [r5, #48]	@ 0x30
 8014a7a:	b920      	cbnz	r0, 8014a86 <srand+0x22>
 8014a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8014aac <srand+0x48>)
 8014a7e:	480c      	ldr	r0, [pc, #48]	@ (8014ab0 <srand+0x4c>)
 8014a80:	2146      	movs	r1, #70	@ 0x46
 8014a82:	f000 fb6d 	bl	8015160 <__assert_func>
 8014a86:	490b      	ldr	r1, [pc, #44]	@ (8014ab4 <srand+0x50>)
 8014a88:	4b0b      	ldr	r3, [pc, #44]	@ (8014ab8 <srand+0x54>)
 8014a8a:	e9c0 1300 	strd	r1, r3, [r0]
 8014a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8014abc <srand+0x58>)
 8014a90:	6083      	str	r3, [r0, #8]
 8014a92:	230b      	movs	r3, #11
 8014a94:	8183      	strh	r3, [r0, #12]
 8014a96:	2100      	movs	r1, #0
 8014a98:	2001      	movs	r0, #1
 8014a9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014a9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	611c      	str	r4, [r3, #16]
 8014aa4:	615a      	str	r2, [r3, #20]
 8014aa6:	bd38      	pop	{r3, r4, r5, pc}
 8014aa8:	200000c4 	.word	0x200000c4
 8014aac:	08016d50 	.word	0x08016d50
 8014ab0:	08016d67 	.word	0x08016d67
 8014ab4:	abcd330e 	.word	0xabcd330e
 8014ab8:	e66d1234 	.word	0xe66d1234
 8014abc:	0005deec 	.word	0x0005deec

08014ac0 <rand>:
 8014ac0:	4b16      	ldr	r3, [pc, #88]	@ (8014b1c <rand+0x5c>)
 8014ac2:	b510      	push	{r4, lr}
 8014ac4:	681c      	ldr	r4, [r3, #0]
 8014ac6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ac8:	b9b3      	cbnz	r3, 8014af8 <rand+0x38>
 8014aca:	2018      	movs	r0, #24
 8014acc:	f7ff ff0c 	bl	80148e8 <malloc>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	6320      	str	r0, [r4, #48]	@ 0x30
 8014ad4:	b920      	cbnz	r0, 8014ae0 <rand+0x20>
 8014ad6:	4b12      	ldr	r3, [pc, #72]	@ (8014b20 <rand+0x60>)
 8014ad8:	4812      	ldr	r0, [pc, #72]	@ (8014b24 <rand+0x64>)
 8014ada:	2152      	movs	r1, #82	@ 0x52
 8014adc:	f000 fb40 	bl	8015160 <__assert_func>
 8014ae0:	4911      	ldr	r1, [pc, #68]	@ (8014b28 <rand+0x68>)
 8014ae2:	4b12      	ldr	r3, [pc, #72]	@ (8014b2c <rand+0x6c>)
 8014ae4:	e9c0 1300 	strd	r1, r3, [r0]
 8014ae8:	4b11      	ldr	r3, [pc, #68]	@ (8014b30 <rand+0x70>)
 8014aea:	6083      	str	r3, [r0, #8]
 8014aec:	230b      	movs	r3, #11
 8014aee:	8183      	strh	r3, [r0, #12]
 8014af0:	2100      	movs	r1, #0
 8014af2:	2001      	movs	r0, #1
 8014af4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014afa:	480e      	ldr	r0, [pc, #56]	@ (8014b34 <rand+0x74>)
 8014afc:	690b      	ldr	r3, [r1, #16]
 8014afe:	694c      	ldr	r4, [r1, #20]
 8014b00:	4a0d      	ldr	r2, [pc, #52]	@ (8014b38 <rand+0x78>)
 8014b02:	4358      	muls	r0, r3
 8014b04:	fb02 0004 	mla	r0, r2, r4, r0
 8014b08:	fba3 3202 	umull	r3, r2, r3, r2
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	eb40 0002 	adc.w	r0, r0, r2
 8014b12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014b16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014b1a:	bd10      	pop	{r4, pc}
 8014b1c:	200000c4 	.word	0x200000c4
 8014b20:	08016d50 	.word	0x08016d50
 8014b24:	08016d67 	.word	0x08016d67
 8014b28:	abcd330e 	.word	0xabcd330e
 8014b2c:	e66d1234 	.word	0xe66d1234
 8014b30:	0005deec 	.word	0x0005deec
 8014b34:	5851f42d 	.word	0x5851f42d
 8014b38:	4c957f2d 	.word	0x4c957f2d

08014b3c <realloc>:
 8014b3c:	4b02      	ldr	r3, [pc, #8]	@ (8014b48 <realloc+0xc>)
 8014b3e:	460a      	mov	r2, r1
 8014b40:	4601      	mov	r1, r0
 8014b42:	6818      	ldr	r0, [r3, #0]
 8014b44:	f000 b802 	b.w	8014b4c <_realloc_r>
 8014b48:	200000c4 	.word	0x200000c4

08014b4c <_realloc_r>:
 8014b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b50:	4680      	mov	r8, r0
 8014b52:	4615      	mov	r5, r2
 8014b54:	460c      	mov	r4, r1
 8014b56:	b921      	cbnz	r1, 8014b62 <_realloc_r+0x16>
 8014b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5c:	4611      	mov	r1, r2
 8014b5e:	f7ff bef5 	b.w	801494c <_malloc_r>
 8014b62:	b92a      	cbnz	r2, 8014b70 <_realloc_r+0x24>
 8014b64:	f000 fb26 	bl	80151b4 <_free_r>
 8014b68:	2400      	movs	r4, #0
 8014b6a:	4620      	mov	r0, r4
 8014b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b70:	f000 fb6a 	bl	8015248 <_malloc_usable_size_r>
 8014b74:	4285      	cmp	r5, r0
 8014b76:	4606      	mov	r6, r0
 8014b78:	d802      	bhi.n	8014b80 <_realloc_r+0x34>
 8014b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014b7e:	d8f4      	bhi.n	8014b6a <_realloc_r+0x1e>
 8014b80:	4629      	mov	r1, r5
 8014b82:	4640      	mov	r0, r8
 8014b84:	f7ff fee2 	bl	801494c <_malloc_r>
 8014b88:	4607      	mov	r7, r0
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d0ec      	beq.n	8014b68 <_realloc_r+0x1c>
 8014b8e:	42b5      	cmp	r5, r6
 8014b90:	462a      	mov	r2, r5
 8014b92:	4621      	mov	r1, r4
 8014b94:	bf28      	it	cs
 8014b96:	4632      	movcs	r2, r6
 8014b98:	f000 fad3 	bl	8015142 <memcpy>
 8014b9c:	4621      	mov	r1, r4
 8014b9e:	4640      	mov	r0, r8
 8014ba0:	f000 fb08 	bl	80151b4 <_free_r>
 8014ba4:	463c      	mov	r4, r7
 8014ba6:	e7e0      	b.n	8014b6a <_realloc_r+0x1e>

08014ba8 <_strtoul_l.constprop.0>:
 8014ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bac:	4e34      	ldr	r6, [pc, #208]	@ (8014c80 <_strtoul_l.constprop.0+0xd8>)
 8014bae:	4686      	mov	lr, r0
 8014bb0:	460d      	mov	r5, r1
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014bb8:	5d37      	ldrb	r7, [r6, r4]
 8014bba:	f017 0708 	ands.w	r7, r7, #8
 8014bbe:	d1f8      	bne.n	8014bb2 <_strtoul_l.constprop.0+0xa>
 8014bc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8014bc2:	d12f      	bne.n	8014c24 <_strtoul_l.constprop.0+0x7c>
 8014bc4:	782c      	ldrb	r4, [r5, #0]
 8014bc6:	2701      	movs	r7, #1
 8014bc8:	1c85      	adds	r5, r0, #2
 8014bca:	f033 0010 	bics.w	r0, r3, #16
 8014bce:	d109      	bne.n	8014be4 <_strtoul_l.constprop.0+0x3c>
 8014bd0:	2c30      	cmp	r4, #48	@ 0x30
 8014bd2:	d12c      	bne.n	8014c2e <_strtoul_l.constprop.0+0x86>
 8014bd4:	7828      	ldrb	r0, [r5, #0]
 8014bd6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014bda:	2858      	cmp	r0, #88	@ 0x58
 8014bdc:	d127      	bne.n	8014c2e <_strtoul_l.constprop.0+0x86>
 8014bde:	786c      	ldrb	r4, [r5, #1]
 8014be0:	2310      	movs	r3, #16
 8014be2:	3502      	adds	r5, #2
 8014be4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014be8:	2600      	movs	r6, #0
 8014bea:	fbb8 f8f3 	udiv	r8, r8, r3
 8014bee:	fb03 f908 	mul.w	r9, r3, r8
 8014bf2:	ea6f 0909 	mvn.w	r9, r9
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014bfc:	f1bc 0f09 	cmp.w	ip, #9
 8014c00:	d81c      	bhi.n	8014c3c <_strtoul_l.constprop.0+0x94>
 8014c02:	4664      	mov	r4, ip
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	dd2a      	ble.n	8014c5e <_strtoul_l.constprop.0+0xb6>
 8014c08:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8014c0c:	d007      	beq.n	8014c1e <_strtoul_l.constprop.0+0x76>
 8014c0e:	4580      	cmp	r8, r0
 8014c10:	d322      	bcc.n	8014c58 <_strtoul_l.constprop.0+0xb0>
 8014c12:	d101      	bne.n	8014c18 <_strtoul_l.constprop.0+0x70>
 8014c14:	45a1      	cmp	r9, r4
 8014c16:	db1f      	blt.n	8014c58 <_strtoul_l.constprop.0+0xb0>
 8014c18:	fb00 4003 	mla	r0, r0, r3, r4
 8014c1c:	2601      	movs	r6, #1
 8014c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c22:	e7e9      	b.n	8014bf8 <_strtoul_l.constprop.0+0x50>
 8014c24:	2c2b      	cmp	r4, #43	@ 0x2b
 8014c26:	bf04      	itt	eq
 8014c28:	782c      	ldrbeq	r4, [r5, #0]
 8014c2a:	1c85      	addeq	r5, r0, #2
 8014c2c:	e7cd      	b.n	8014bca <_strtoul_l.constprop.0+0x22>
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1d8      	bne.n	8014be4 <_strtoul_l.constprop.0+0x3c>
 8014c32:	2c30      	cmp	r4, #48	@ 0x30
 8014c34:	bf0c      	ite	eq
 8014c36:	2308      	moveq	r3, #8
 8014c38:	230a      	movne	r3, #10
 8014c3a:	e7d3      	b.n	8014be4 <_strtoul_l.constprop.0+0x3c>
 8014c3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014c40:	f1bc 0f19 	cmp.w	ip, #25
 8014c44:	d801      	bhi.n	8014c4a <_strtoul_l.constprop.0+0xa2>
 8014c46:	3c37      	subs	r4, #55	@ 0x37
 8014c48:	e7dc      	b.n	8014c04 <_strtoul_l.constprop.0+0x5c>
 8014c4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014c4e:	f1bc 0f19 	cmp.w	ip, #25
 8014c52:	d804      	bhi.n	8014c5e <_strtoul_l.constprop.0+0xb6>
 8014c54:	3c57      	subs	r4, #87	@ 0x57
 8014c56:	e7d5      	b.n	8014c04 <_strtoul_l.constprop.0+0x5c>
 8014c58:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8014c5c:	e7df      	b.n	8014c1e <_strtoul_l.constprop.0+0x76>
 8014c5e:	1c73      	adds	r3, r6, #1
 8014c60:	d106      	bne.n	8014c70 <_strtoul_l.constprop.0+0xc8>
 8014c62:	2322      	movs	r3, #34	@ 0x22
 8014c64:	f8ce 3000 	str.w	r3, [lr]
 8014c68:	4630      	mov	r0, r6
 8014c6a:	b932      	cbnz	r2, 8014c7a <_strtoul_l.constprop.0+0xd2>
 8014c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c70:	b107      	cbz	r7, 8014c74 <_strtoul_l.constprop.0+0xcc>
 8014c72:	4240      	negs	r0, r0
 8014c74:	2a00      	cmp	r2, #0
 8014c76:	d0f9      	beq.n	8014c6c <_strtoul_l.constprop.0+0xc4>
 8014c78:	b106      	cbz	r6, 8014c7c <_strtoul_l.constprop.0+0xd4>
 8014c7a:	1e69      	subs	r1, r5, #1
 8014c7c:	6011      	str	r1, [r2, #0]
 8014c7e:	e7f5      	b.n	8014c6c <_strtoul_l.constprop.0+0xc4>
 8014c80:	08016dc0 	.word	0x08016dc0

08014c84 <strtoul>:
 8014c84:	4613      	mov	r3, r2
 8014c86:	460a      	mov	r2, r1
 8014c88:	4601      	mov	r1, r0
 8014c8a:	4802      	ldr	r0, [pc, #8]	@ (8014c94 <strtoul+0x10>)
 8014c8c:	6800      	ldr	r0, [r0, #0]
 8014c8e:	f7ff bf8b 	b.w	8014ba8 <_strtoul_l.constprop.0>
 8014c92:	bf00      	nop
 8014c94:	200000c4 	.word	0x200000c4

08014c98 <std>:
 8014c98:	2300      	movs	r3, #0
 8014c9a:	b510      	push	{r4, lr}
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8014ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ca6:	6083      	str	r3, [r0, #8]
 8014ca8:	8181      	strh	r1, [r0, #12]
 8014caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8014cac:	81c2      	strh	r2, [r0, #14]
 8014cae:	6183      	str	r3, [r0, #24]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	2208      	movs	r2, #8
 8014cb4:	305c      	adds	r0, #92	@ 0x5c
 8014cb6:	f000 f97b 	bl	8014fb0 <memset>
 8014cba:	4b0d      	ldr	r3, [pc, #52]	@ (8014cf0 <std+0x58>)
 8014cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8014cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8014cf4 <std+0x5c>)
 8014cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8014cf8 <std+0x60>)
 8014cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8014cfc <std+0x64>)
 8014cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8014cca:	4b0d      	ldr	r3, [pc, #52]	@ (8014d00 <std+0x68>)
 8014ccc:	6224      	str	r4, [r4, #32]
 8014cce:	429c      	cmp	r4, r3
 8014cd0:	d006      	beq.n	8014ce0 <std+0x48>
 8014cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014cd6:	4294      	cmp	r4, r2
 8014cd8:	d002      	beq.n	8014ce0 <std+0x48>
 8014cda:	33d0      	adds	r3, #208	@ 0xd0
 8014cdc:	429c      	cmp	r4, r3
 8014cde:	d105      	bne.n	8014cec <std+0x54>
 8014ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ce8:	f000 ba20 	b.w	801512c <__retarget_lock_init_recursive>
 8014cec:	bd10      	pop	{r4, pc}
 8014cee:	bf00      	nop
 8014cf0:	08014e85 	.word	0x08014e85
 8014cf4:	08014ea7 	.word	0x08014ea7
 8014cf8:	08014edf 	.word	0x08014edf
 8014cfc:	08014f03 	.word	0x08014f03
 8014d00:	20009280 	.word	0x20009280

08014d04 <stdio_exit_handler>:
 8014d04:	4a02      	ldr	r2, [pc, #8]	@ (8014d10 <stdio_exit_handler+0xc>)
 8014d06:	4903      	ldr	r1, [pc, #12]	@ (8014d14 <stdio_exit_handler+0x10>)
 8014d08:	4803      	ldr	r0, [pc, #12]	@ (8014d18 <stdio_exit_handler+0x14>)
 8014d0a:	f000 b869 	b.w	8014de0 <_fwalk_sglue>
 8014d0e:	bf00      	nop
 8014d10:	200000b8 	.word	0x200000b8
 8014d14:	0801592d 	.word	0x0801592d
 8014d18:	200000c8 	.word	0x200000c8

08014d1c <cleanup_stdio>:
 8014d1c:	6841      	ldr	r1, [r0, #4]
 8014d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8014d50 <cleanup_stdio+0x34>)
 8014d20:	4299      	cmp	r1, r3
 8014d22:	b510      	push	{r4, lr}
 8014d24:	4604      	mov	r4, r0
 8014d26:	d001      	beq.n	8014d2c <cleanup_stdio+0x10>
 8014d28:	f000 fe00 	bl	801592c <_fflush_r>
 8014d2c:	68a1      	ldr	r1, [r4, #8]
 8014d2e:	4b09      	ldr	r3, [pc, #36]	@ (8014d54 <cleanup_stdio+0x38>)
 8014d30:	4299      	cmp	r1, r3
 8014d32:	d002      	beq.n	8014d3a <cleanup_stdio+0x1e>
 8014d34:	4620      	mov	r0, r4
 8014d36:	f000 fdf9 	bl	801592c <_fflush_r>
 8014d3a:	68e1      	ldr	r1, [r4, #12]
 8014d3c:	4b06      	ldr	r3, [pc, #24]	@ (8014d58 <cleanup_stdio+0x3c>)
 8014d3e:	4299      	cmp	r1, r3
 8014d40:	d004      	beq.n	8014d4c <cleanup_stdio+0x30>
 8014d42:	4620      	mov	r0, r4
 8014d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d48:	f000 bdf0 	b.w	801592c <_fflush_r>
 8014d4c:	bd10      	pop	{r4, pc}
 8014d4e:	bf00      	nop
 8014d50:	20009280 	.word	0x20009280
 8014d54:	200092e8 	.word	0x200092e8
 8014d58:	20009350 	.word	0x20009350

08014d5c <global_stdio_init.part.0>:
 8014d5c:	b510      	push	{r4, lr}
 8014d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8014d8c <global_stdio_init.part.0+0x30>)
 8014d60:	4c0b      	ldr	r4, [pc, #44]	@ (8014d90 <global_stdio_init.part.0+0x34>)
 8014d62:	4a0c      	ldr	r2, [pc, #48]	@ (8014d94 <global_stdio_init.part.0+0x38>)
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	4620      	mov	r0, r4
 8014d68:	2200      	movs	r2, #0
 8014d6a:	2104      	movs	r1, #4
 8014d6c:	f7ff ff94 	bl	8014c98 <std>
 8014d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014d74:	2201      	movs	r2, #1
 8014d76:	2109      	movs	r1, #9
 8014d78:	f7ff ff8e 	bl	8014c98 <std>
 8014d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014d80:	2202      	movs	r2, #2
 8014d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d86:	2112      	movs	r1, #18
 8014d88:	f7ff bf86 	b.w	8014c98 <std>
 8014d8c:	200093b8 	.word	0x200093b8
 8014d90:	20009280 	.word	0x20009280
 8014d94:	08014d05 	.word	0x08014d05

08014d98 <__sfp_lock_acquire>:
 8014d98:	4801      	ldr	r0, [pc, #4]	@ (8014da0 <__sfp_lock_acquire+0x8>)
 8014d9a:	f000 b9c8 	b.w	801512e <__retarget_lock_acquire_recursive>
 8014d9e:	bf00      	nop
 8014da0:	200093c2 	.word	0x200093c2

08014da4 <__sfp_lock_release>:
 8014da4:	4801      	ldr	r0, [pc, #4]	@ (8014dac <__sfp_lock_release+0x8>)
 8014da6:	f000 b9c3 	b.w	8015130 <__retarget_lock_release_recursive>
 8014daa:	bf00      	nop
 8014dac:	200093c2 	.word	0x200093c2

08014db0 <__sinit>:
 8014db0:	b510      	push	{r4, lr}
 8014db2:	4604      	mov	r4, r0
 8014db4:	f7ff fff0 	bl	8014d98 <__sfp_lock_acquire>
 8014db8:	6a23      	ldr	r3, [r4, #32]
 8014dba:	b11b      	cbz	r3, 8014dc4 <__sinit+0x14>
 8014dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dc0:	f7ff bff0 	b.w	8014da4 <__sfp_lock_release>
 8014dc4:	4b04      	ldr	r3, [pc, #16]	@ (8014dd8 <__sinit+0x28>)
 8014dc6:	6223      	str	r3, [r4, #32]
 8014dc8:	4b04      	ldr	r3, [pc, #16]	@ (8014ddc <__sinit+0x2c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d1f5      	bne.n	8014dbc <__sinit+0xc>
 8014dd0:	f7ff ffc4 	bl	8014d5c <global_stdio_init.part.0>
 8014dd4:	e7f2      	b.n	8014dbc <__sinit+0xc>
 8014dd6:	bf00      	nop
 8014dd8:	08014d1d 	.word	0x08014d1d
 8014ddc:	200093b8 	.word	0x200093b8

08014de0 <_fwalk_sglue>:
 8014de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014de4:	4607      	mov	r7, r0
 8014de6:	4688      	mov	r8, r1
 8014de8:	4614      	mov	r4, r2
 8014dea:	2600      	movs	r6, #0
 8014dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014df0:	f1b9 0901 	subs.w	r9, r9, #1
 8014df4:	d505      	bpl.n	8014e02 <_fwalk_sglue+0x22>
 8014df6:	6824      	ldr	r4, [r4, #0]
 8014df8:	2c00      	cmp	r4, #0
 8014dfa:	d1f7      	bne.n	8014dec <_fwalk_sglue+0xc>
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e02:	89ab      	ldrh	r3, [r5, #12]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d907      	bls.n	8014e18 <_fwalk_sglue+0x38>
 8014e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	d003      	beq.n	8014e18 <_fwalk_sglue+0x38>
 8014e10:	4629      	mov	r1, r5
 8014e12:	4638      	mov	r0, r7
 8014e14:	47c0      	blx	r8
 8014e16:	4306      	orrs	r6, r0
 8014e18:	3568      	adds	r5, #104	@ 0x68
 8014e1a:	e7e9      	b.n	8014df0 <_fwalk_sglue+0x10>

08014e1c <sniprintf>:
 8014e1c:	b40c      	push	{r2, r3}
 8014e1e:	b530      	push	{r4, r5, lr}
 8014e20:	4b17      	ldr	r3, [pc, #92]	@ (8014e80 <sniprintf+0x64>)
 8014e22:	1e0c      	subs	r4, r1, #0
 8014e24:	681d      	ldr	r5, [r3, #0]
 8014e26:	b09d      	sub	sp, #116	@ 0x74
 8014e28:	da08      	bge.n	8014e3c <sniprintf+0x20>
 8014e2a:	238b      	movs	r3, #139	@ 0x8b
 8014e2c:	602b      	str	r3, [r5, #0]
 8014e2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e32:	b01d      	add	sp, #116	@ 0x74
 8014e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e38:	b002      	add	sp, #8
 8014e3a:	4770      	bx	lr
 8014e3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014e40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e44:	bf14      	ite	ne
 8014e46:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014e4a:	4623      	moveq	r3, r4
 8014e4c:	9304      	str	r3, [sp, #16]
 8014e4e:	9307      	str	r3, [sp, #28]
 8014e50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e54:	9002      	str	r0, [sp, #8]
 8014e56:	9006      	str	r0, [sp, #24]
 8014e58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014e5e:	ab21      	add	r3, sp, #132	@ 0x84
 8014e60:	a902      	add	r1, sp, #8
 8014e62:	4628      	mov	r0, r5
 8014e64:	9301      	str	r3, [sp, #4]
 8014e66:	f000 fa53 	bl	8015310 <_svfiprintf_r>
 8014e6a:	1c43      	adds	r3, r0, #1
 8014e6c:	bfbc      	itt	lt
 8014e6e:	238b      	movlt	r3, #139	@ 0x8b
 8014e70:	602b      	strlt	r3, [r5, #0]
 8014e72:	2c00      	cmp	r4, #0
 8014e74:	d0dd      	beq.n	8014e32 <sniprintf+0x16>
 8014e76:	9b02      	ldr	r3, [sp, #8]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	701a      	strb	r2, [r3, #0]
 8014e7c:	e7d9      	b.n	8014e32 <sniprintf+0x16>
 8014e7e:	bf00      	nop
 8014e80:	200000c4 	.word	0x200000c4

08014e84 <__sread>:
 8014e84:	b510      	push	{r4, lr}
 8014e86:	460c      	mov	r4, r1
 8014e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e8c:	f000 f8f0 	bl	8015070 <_read_r>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	bfab      	itete	ge
 8014e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014e96:	89a3      	ldrhlt	r3, [r4, #12]
 8014e98:	181b      	addge	r3, r3, r0
 8014e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014e9e:	bfac      	ite	ge
 8014ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ea2:	81a3      	strhlt	r3, [r4, #12]
 8014ea4:	bd10      	pop	{r4, pc}

08014ea6 <__swrite>:
 8014ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eaa:	461f      	mov	r7, r3
 8014eac:	898b      	ldrh	r3, [r1, #12]
 8014eae:	05db      	lsls	r3, r3, #23
 8014eb0:	4605      	mov	r5, r0
 8014eb2:	460c      	mov	r4, r1
 8014eb4:	4616      	mov	r6, r2
 8014eb6:	d505      	bpl.n	8014ec4 <__swrite+0x1e>
 8014eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ebc:	2302      	movs	r3, #2
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f000 f8c4 	bl	801504c <_lseek_r>
 8014ec4:	89a3      	ldrh	r3, [r4, #12]
 8014ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014ece:	81a3      	strh	r3, [r4, #12]
 8014ed0:	4632      	mov	r2, r6
 8014ed2:	463b      	mov	r3, r7
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eda:	f000 b8eb 	b.w	80150b4 <_write_r>

08014ede <__sseek>:
 8014ede:	b510      	push	{r4, lr}
 8014ee0:	460c      	mov	r4, r1
 8014ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ee6:	f000 f8b1 	bl	801504c <_lseek_r>
 8014eea:	1c43      	adds	r3, r0, #1
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	bf15      	itete	ne
 8014ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014efa:	81a3      	strheq	r3, [r4, #12]
 8014efc:	bf18      	it	ne
 8014efe:	81a3      	strhne	r3, [r4, #12]
 8014f00:	bd10      	pop	{r4, pc}

08014f02 <__sclose>:
 8014f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f06:	f000 b891 	b.w	801502c <_close_r>

08014f0a <_vsniprintf_r>:
 8014f0a:	b530      	push	{r4, r5, lr}
 8014f0c:	4614      	mov	r4, r2
 8014f0e:	2c00      	cmp	r4, #0
 8014f10:	b09b      	sub	sp, #108	@ 0x6c
 8014f12:	4605      	mov	r5, r0
 8014f14:	461a      	mov	r2, r3
 8014f16:	da05      	bge.n	8014f24 <_vsniprintf_r+0x1a>
 8014f18:	238b      	movs	r3, #139	@ 0x8b
 8014f1a:	6003      	str	r3, [r0, #0]
 8014f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f20:	b01b      	add	sp, #108	@ 0x6c
 8014f22:	bd30      	pop	{r4, r5, pc}
 8014f24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014f28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f2c:	bf14      	ite	ne
 8014f2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014f32:	4623      	moveq	r3, r4
 8014f34:	9302      	str	r3, [sp, #8]
 8014f36:	9305      	str	r3, [sp, #20]
 8014f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f3c:	9100      	str	r1, [sp, #0]
 8014f3e:	9104      	str	r1, [sp, #16]
 8014f40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014f44:	4669      	mov	r1, sp
 8014f46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014f48:	f000 f9e2 	bl	8015310 <_svfiprintf_r>
 8014f4c:	1c43      	adds	r3, r0, #1
 8014f4e:	bfbc      	itt	lt
 8014f50:	238b      	movlt	r3, #139	@ 0x8b
 8014f52:	602b      	strlt	r3, [r5, #0]
 8014f54:	2c00      	cmp	r4, #0
 8014f56:	d0e3      	beq.n	8014f20 <_vsniprintf_r+0x16>
 8014f58:	9b00      	ldr	r3, [sp, #0]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	701a      	strb	r2, [r3, #0]
 8014f5e:	e7df      	b.n	8014f20 <_vsniprintf_r+0x16>

08014f60 <vsniprintf>:
 8014f60:	b507      	push	{r0, r1, r2, lr}
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	4613      	mov	r3, r2
 8014f66:	460a      	mov	r2, r1
 8014f68:	4601      	mov	r1, r0
 8014f6a:	4803      	ldr	r0, [pc, #12]	@ (8014f78 <vsniprintf+0x18>)
 8014f6c:	6800      	ldr	r0, [r0, #0]
 8014f6e:	f7ff ffcc 	bl	8014f0a <_vsniprintf_r>
 8014f72:	b003      	add	sp, #12
 8014f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f78:	200000c4 	.word	0x200000c4

08014f7c <memmove>:
 8014f7c:	4288      	cmp	r0, r1
 8014f7e:	b510      	push	{r4, lr}
 8014f80:	eb01 0402 	add.w	r4, r1, r2
 8014f84:	d902      	bls.n	8014f8c <memmove+0x10>
 8014f86:	4284      	cmp	r4, r0
 8014f88:	4623      	mov	r3, r4
 8014f8a:	d807      	bhi.n	8014f9c <memmove+0x20>
 8014f8c:	1e43      	subs	r3, r0, #1
 8014f8e:	42a1      	cmp	r1, r4
 8014f90:	d008      	beq.n	8014fa4 <memmove+0x28>
 8014f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f9a:	e7f8      	b.n	8014f8e <memmove+0x12>
 8014f9c:	4402      	add	r2, r0
 8014f9e:	4601      	mov	r1, r0
 8014fa0:	428a      	cmp	r2, r1
 8014fa2:	d100      	bne.n	8014fa6 <memmove+0x2a>
 8014fa4:	bd10      	pop	{r4, pc}
 8014fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014fae:	e7f7      	b.n	8014fa0 <memmove+0x24>

08014fb0 <memset>:
 8014fb0:	4402      	add	r2, r0
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d100      	bne.n	8014fba <memset+0xa>
 8014fb8:	4770      	bx	lr
 8014fba:	f803 1b01 	strb.w	r1, [r3], #1
 8014fbe:	e7f9      	b.n	8014fb4 <memset+0x4>

08014fc0 <strchr>:
 8014fc0:	b2c9      	uxtb	r1, r1
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fca:	b112      	cbz	r2, 8014fd2 <strchr+0x12>
 8014fcc:	428a      	cmp	r2, r1
 8014fce:	d1f9      	bne.n	8014fc4 <strchr+0x4>
 8014fd0:	4770      	bx	lr
 8014fd2:	2900      	cmp	r1, #0
 8014fd4:	bf18      	it	ne
 8014fd6:	2000      	movne	r0, #0
 8014fd8:	4770      	bx	lr

08014fda <strncmp>:
 8014fda:	b510      	push	{r4, lr}
 8014fdc:	b16a      	cbz	r2, 8014ffa <strncmp+0x20>
 8014fde:	3901      	subs	r1, #1
 8014fe0:	1884      	adds	r4, r0, r2
 8014fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fe6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d103      	bne.n	8014ff6 <strncmp+0x1c>
 8014fee:	42a0      	cmp	r0, r4
 8014ff0:	d001      	beq.n	8014ff6 <strncmp+0x1c>
 8014ff2:	2a00      	cmp	r2, #0
 8014ff4:	d1f5      	bne.n	8014fe2 <strncmp+0x8>
 8014ff6:	1ad0      	subs	r0, r2, r3
 8014ff8:	bd10      	pop	{r4, pc}
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	e7fc      	b.n	8014ff8 <strncmp+0x1e>

08014ffe <strstr>:
 8014ffe:	780a      	ldrb	r2, [r1, #0]
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	b96a      	cbnz	r2, 8015020 <strstr+0x22>
 8015004:	bd70      	pop	{r4, r5, r6, pc}
 8015006:	429a      	cmp	r2, r3
 8015008:	d109      	bne.n	801501e <strstr+0x20>
 801500a:	460c      	mov	r4, r1
 801500c:	4605      	mov	r5, r0
 801500e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015012:	2b00      	cmp	r3, #0
 8015014:	d0f6      	beq.n	8015004 <strstr+0x6>
 8015016:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801501a:	429e      	cmp	r6, r3
 801501c:	d0f7      	beq.n	801500e <strstr+0x10>
 801501e:	3001      	adds	r0, #1
 8015020:	7803      	ldrb	r3, [r0, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1ef      	bne.n	8015006 <strstr+0x8>
 8015026:	4618      	mov	r0, r3
 8015028:	e7ec      	b.n	8015004 <strstr+0x6>
	...

0801502c <_close_r>:
 801502c:	b538      	push	{r3, r4, r5, lr}
 801502e:	4d06      	ldr	r5, [pc, #24]	@ (8015048 <_close_r+0x1c>)
 8015030:	2300      	movs	r3, #0
 8015032:	4604      	mov	r4, r0
 8015034:	4608      	mov	r0, r1
 8015036:	602b      	str	r3, [r5, #0]
 8015038:	f7ed fad0 	bl	80025dc <_close>
 801503c:	1c43      	adds	r3, r0, #1
 801503e:	d102      	bne.n	8015046 <_close_r+0x1a>
 8015040:	682b      	ldr	r3, [r5, #0]
 8015042:	b103      	cbz	r3, 8015046 <_close_r+0x1a>
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	bd38      	pop	{r3, r4, r5, pc}
 8015048:	200093bc 	.word	0x200093bc

0801504c <_lseek_r>:
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4d07      	ldr	r5, [pc, #28]	@ (801506c <_lseek_r+0x20>)
 8015050:	4604      	mov	r4, r0
 8015052:	4608      	mov	r0, r1
 8015054:	4611      	mov	r1, r2
 8015056:	2200      	movs	r2, #0
 8015058:	602a      	str	r2, [r5, #0]
 801505a:	461a      	mov	r2, r3
 801505c:	f7ed fae5 	bl	800262a <_lseek>
 8015060:	1c43      	adds	r3, r0, #1
 8015062:	d102      	bne.n	801506a <_lseek_r+0x1e>
 8015064:	682b      	ldr	r3, [r5, #0]
 8015066:	b103      	cbz	r3, 801506a <_lseek_r+0x1e>
 8015068:	6023      	str	r3, [r4, #0]
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	200093bc 	.word	0x200093bc

08015070 <_read_r>:
 8015070:	b538      	push	{r3, r4, r5, lr}
 8015072:	4d07      	ldr	r5, [pc, #28]	@ (8015090 <_read_r+0x20>)
 8015074:	4604      	mov	r4, r0
 8015076:	4608      	mov	r0, r1
 8015078:	4611      	mov	r1, r2
 801507a:	2200      	movs	r2, #0
 801507c:	602a      	str	r2, [r5, #0]
 801507e:	461a      	mov	r2, r3
 8015080:	f7ed fa73 	bl	800256a <_read>
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	d102      	bne.n	801508e <_read_r+0x1e>
 8015088:	682b      	ldr	r3, [r5, #0]
 801508a:	b103      	cbz	r3, 801508e <_read_r+0x1e>
 801508c:	6023      	str	r3, [r4, #0]
 801508e:	bd38      	pop	{r3, r4, r5, pc}
 8015090:	200093bc 	.word	0x200093bc

08015094 <_sbrk_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4d06      	ldr	r5, [pc, #24]	@ (80150b0 <_sbrk_r+0x1c>)
 8015098:	2300      	movs	r3, #0
 801509a:	4604      	mov	r4, r0
 801509c:	4608      	mov	r0, r1
 801509e:	602b      	str	r3, [r5, #0]
 80150a0:	f7ed fad0 	bl	8002644 <_sbrk>
 80150a4:	1c43      	adds	r3, r0, #1
 80150a6:	d102      	bne.n	80150ae <_sbrk_r+0x1a>
 80150a8:	682b      	ldr	r3, [r5, #0]
 80150aa:	b103      	cbz	r3, 80150ae <_sbrk_r+0x1a>
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	200093bc 	.word	0x200093bc

080150b4 <_write_r>:
 80150b4:	b538      	push	{r3, r4, r5, lr}
 80150b6:	4d07      	ldr	r5, [pc, #28]	@ (80150d4 <_write_r+0x20>)
 80150b8:	4604      	mov	r4, r0
 80150ba:	4608      	mov	r0, r1
 80150bc:	4611      	mov	r1, r2
 80150be:	2200      	movs	r2, #0
 80150c0:	602a      	str	r2, [r5, #0]
 80150c2:	461a      	mov	r2, r3
 80150c4:	f7ed fa6e 	bl	80025a4 <_write>
 80150c8:	1c43      	adds	r3, r0, #1
 80150ca:	d102      	bne.n	80150d2 <_write_r+0x1e>
 80150cc:	682b      	ldr	r3, [r5, #0]
 80150ce:	b103      	cbz	r3, 80150d2 <_write_r+0x1e>
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	bd38      	pop	{r3, r4, r5, pc}
 80150d4:	200093bc 	.word	0x200093bc

080150d8 <__errno>:
 80150d8:	4b01      	ldr	r3, [pc, #4]	@ (80150e0 <__errno+0x8>)
 80150da:	6818      	ldr	r0, [r3, #0]
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	200000c4 	.word	0x200000c4

080150e4 <__libc_init_array>:
 80150e4:	b570      	push	{r4, r5, r6, lr}
 80150e6:	4d0d      	ldr	r5, [pc, #52]	@ (801511c <__libc_init_array+0x38>)
 80150e8:	4c0d      	ldr	r4, [pc, #52]	@ (8015120 <__libc_init_array+0x3c>)
 80150ea:	1b64      	subs	r4, r4, r5
 80150ec:	10a4      	asrs	r4, r4, #2
 80150ee:	2600      	movs	r6, #0
 80150f0:	42a6      	cmp	r6, r4
 80150f2:	d109      	bne.n	8015108 <__libc_init_array+0x24>
 80150f4:	4d0b      	ldr	r5, [pc, #44]	@ (8015124 <__libc_init_array+0x40>)
 80150f6:	4c0c      	ldr	r4, [pc, #48]	@ (8015128 <__libc_init_array+0x44>)
 80150f8:	f001 f962 	bl	80163c0 <_init>
 80150fc:	1b64      	subs	r4, r4, r5
 80150fe:	10a4      	asrs	r4, r4, #2
 8015100:	2600      	movs	r6, #0
 8015102:	42a6      	cmp	r6, r4
 8015104:	d105      	bne.n	8015112 <__libc_init_array+0x2e>
 8015106:	bd70      	pop	{r4, r5, r6, pc}
 8015108:	f855 3b04 	ldr.w	r3, [r5], #4
 801510c:	4798      	blx	r3
 801510e:	3601      	adds	r6, #1
 8015110:	e7ee      	b.n	80150f0 <__libc_init_array+0xc>
 8015112:	f855 3b04 	ldr.w	r3, [r5], #4
 8015116:	4798      	blx	r3
 8015118:	3601      	adds	r6, #1
 801511a:	e7f2      	b.n	8015102 <__libc_init_array+0x1e>
 801511c:	08016fa8 	.word	0x08016fa8
 8015120:	08016fa8 	.word	0x08016fa8
 8015124:	08016fa8 	.word	0x08016fa8
 8015128:	08016fac 	.word	0x08016fac

0801512c <__retarget_lock_init_recursive>:
 801512c:	4770      	bx	lr

0801512e <__retarget_lock_acquire_recursive>:
 801512e:	4770      	bx	lr

08015130 <__retarget_lock_release_recursive>:
 8015130:	4770      	bx	lr

08015132 <strcpy>:
 8015132:	4603      	mov	r3, r0
 8015134:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015138:	f803 2b01 	strb.w	r2, [r3], #1
 801513c:	2a00      	cmp	r2, #0
 801513e:	d1f9      	bne.n	8015134 <strcpy+0x2>
 8015140:	4770      	bx	lr

08015142 <memcpy>:
 8015142:	440a      	add	r2, r1
 8015144:	4291      	cmp	r1, r2
 8015146:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801514a:	d100      	bne.n	801514e <memcpy+0xc>
 801514c:	4770      	bx	lr
 801514e:	b510      	push	{r4, lr}
 8015150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015158:	4291      	cmp	r1, r2
 801515a:	d1f9      	bne.n	8015150 <memcpy+0xe>
 801515c:	bd10      	pop	{r4, pc}
	...

08015160 <__assert_func>:
 8015160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015162:	4614      	mov	r4, r2
 8015164:	461a      	mov	r2, r3
 8015166:	4b09      	ldr	r3, [pc, #36]	@ (801518c <__assert_func+0x2c>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	4605      	mov	r5, r0
 801516c:	68d8      	ldr	r0, [r3, #12]
 801516e:	b954      	cbnz	r4, 8015186 <__assert_func+0x26>
 8015170:	4b07      	ldr	r3, [pc, #28]	@ (8015190 <__assert_func+0x30>)
 8015172:	461c      	mov	r4, r3
 8015174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015178:	9100      	str	r1, [sp, #0]
 801517a:	462b      	mov	r3, r5
 801517c:	4905      	ldr	r1, [pc, #20]	@ (8015194 <__assert_func+0x34>)
 801517e:	f000 fbfd 	bl	801597c <fiprintf>
 8015182:	f000 fc0d 	bl	80159a0 <abort>
 8015186:	4b04      	ldr	r3, [pc, #16]	@ (8015198 <__assert_func+0x38>)
 8015188:	e7f4      	b.n	8015174 <__assert_func+0x14>
 801518a:	bf00      	nop
 801518c:	200000c4 	.word	0x200000c4
 8015190:	08016efb 	.word	0x08016efb
 8015194:	08016ecd 	.word	0x08016ecd
 8015198:	08016ec0 	.word	0x08016ec0

0801519c <__env_lock>:
 801519c:	4801      	ldr	r0, [pc, #4]	@ (80151a4 <__env_lock+0x8>)
 801519e:	f7ff bfc6 	b.w	801512e <__retarget_lock_acquire_recursive>
 80151a2:	bf00      	nop
 80151a4:	200093c0 	.word	0x200093c0

080151a8 <__env_unlock>:
 80151a8:	4801      	ldr	r0, [pc, #4]	@ (80151b0 <__env_unlock+0x8>)
 80151aa:	f7ff bfc1 	b.w	8015130 <__retarget_lock_release_recursive>
 80151ae:	bf00      	nop
 80151b0:	200093c0 	.word	0x200093c0

080151b4 <_free_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4605      	mov	r5, r0
 80151b8:	2900      	cmp	r1, #0
 80151ba:	d041      	beq.n	8015240 <_free_r+0x8c>
 80151bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151c0:	1f0c      	subs	r4, r1, #4
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	bfb8      	it	lt
 80151c6:	18e4      	addlt	r4, r4, r3
 80151c8:	f7ff fc40 	bl	8014a4c <__malloc_lock>
 80151cc:	4a1d      	ldr	r2, [pc, #116]	@ (8015244 <_free_r+0x90>)
 80151ce:	6813      	ldr	r3, [r2, #0]
 80151d0:	b933      	cbnz	r3, 80151e0 <_free_r+0x2c>
 80151d2:	6063      	str	r3, [r4, #4]
 80151d4:	6014      	str	r4, [r2, #0]
 80151d6:	4628      	mov	r0, r5
 80151d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151dc:	f7ff bc3c 	b.w	8014a58 <__malloc_unlock>
 80151e0:	42a3      	cmp	r3, r4
 80151e2:	d908      	bls.n	80151f6 <_free_r+0x42>
 80151e4:	6820      	ldr	r0, [r4, #0]
 80151e6:	1821      	adds	r1, r4, r0
 80151e8:	428b      	cmp	r3, r1
 80151ea:	bf01      	itttt	eq
 80151ec:	6819      	ldreq	r1, [r3, #0]
 80151ee:	685b      	ldreq	r3, [r3, #4]
 80151f0:	1809      	addeq	r1, r1, r0
 80151f2:	6021      	streq	r1, [r4, #0]
 80151f4:	e7ed      	b.n	80151d2 <_free_r+0x1e>
 80151f6:	461a      	mov	r2, r3
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	b10b      	cbz	r3, 8015200 <_free_r+0x4c>
 80151fc:	42a3      	cmp	r3, r4
 80151fe:	d9fa      	bls.n	80151f6 <_free_r+0x42>
 8015200:	6811      	ldr	r1, [r2, #0]
 8015202:	1850      	adds	r0, r2, r1
 8015204:	42a0      	cmp	r0, r4
 8015206:	d10b      	bne.n	8015220 <_free_r+0x6c>
 8015208:	6820      	ldr	r0, [r4, #0]
 801520a:	4401      	add	r1, r0
 801520c:	1850      	adds	r0, r2, r1
 801520e:	4283      	cmp	r3, r0
 8015210:	6011      	str	r1, [r2, #0]
 8015212:	d1e0      	bne.n	80151d6 <_free_r+0x22>
 8015214:	6818      	ldr	r0, [r3, #0]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	6053      	str	r3, [r2, #4]
 801521a:	4408      	add	r0, r1
 801521c:	6010      	str	r0, [r2, #0]
 801521e:	e7da      	b.n	80151d6 <_free_r+0x22>
 8015220:	d902      	bls.n	8015228 <_free_r+0x74>
 8015222:	230c      	movs	r3, #12
 8015224:	602b      	str	r3, [r5, #0]
 8015226:	e7d6      	b.n	80151d6 <_free_r+0x22>
 8015228:	6820      	ldr	r0, [r4, #0]
 801522a:	1821      	adds	r1, r4, r0
 801522c:	428b      	cmp	r3, r1
 801522e:	bf04      	itt	eq
 8015230:	6819      	ldreq	r1, [r3, #0]
 8015232:	685b      	ldreq	r3, [r3, #4]
 8015234:	6063      	str	r3, [r4, #4]
 8015236:	bf04      	itt	eq
 8015238:	1809      	addeq	r1, r1, r0
 801523a:	6021      	streq	r1, [r4, #0]
 801523c:	6054      	str	r4, [r2, #4]
 801523e:	e7ca      	b.n	80151d6 <_free_r+0x22>
 8015240:	bd38      	pop	{r3, r4, r5, pc}
 8015242:	bf00      	nop
 8015244:	2000927c 	.word	0x2000927c

08015248 <_malloc_usable_size_r>:
 8015248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801524c:	1f18      	subs	r0, r3, #4
 801524e:	2b00      	cmp	r3, #0
 8015250:	bfbc      	itt	lt
 8015252:	580b      	ldrlt	r3, [r1, r0]
 8015254:	18c0      	addlt	r0, r0, r3
 8015256:	4770      	bx	lr

08015258 <__ssputs_r>:
 8015258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801525c:	688e      	ldr	r6, [r1, #8]
 801525e:	461f      	mov	r7, r3
 8015260:	42be      	cmp	r6, r7
 8015262:	680b      	ldr	r3, [r1, #0]
 8015264:	4682      	mov	sl, r0
 8015266:	460c      	mov	r4, r1
 8015268:	4690      	mov	r8, r2
 801526a:	d82d      	bhi.n	80152c8 <__ssputs_r+0x70>
 801526c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015274:	d026      	beq.n	80152c4 <__ssputs_r+0x6c>
 8015276:	6965      	ldr	r5, [r4, #20]
 8015278:	6909      	ldr	r1, [r1, #16]
 801527a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801527e:	eba3 0901 	sub.w	r9, r3, r1
 8015282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015286:	1c7b      	adds	r3, r7, #1
 8015288:	444b      	add	r3, r9
 801528a:	106d      	asrs	r5, r5, #1
 801528c:	429d      	cmp	r5, r3
 801528e:	bf38      	it	cc
 8015290:	461d      	movcc	r5, r3
 8015292:	0553      	lsls	r3, r2, #21
 8015294:	d527      	bpl.n	80152e6 <__ssputs_r+0x8e>
 8015296:	4629      	mov	r1, r5
 8015298:	f7ff fb58 	bl	801494c <_malloc_r>
 801529c:	4606      	mov	r6, r0
 801529e:	b360      	cbz	r0, 80152fa <__ssputs_r+0xa2>
 80152a0:	6921      	ldr	r1, [r4, #16]
 80152a2:	464a      	mov	r2, r9
 80152a4:	f7ff ff4d 	bl	8015142 <memcpy>
 80152a8:	89a3      	ldrh	r3, [r4, #12]
 80152aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80152ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80152b2:	81a3      	strh	r3, [r4, #12]
 80152b4:	6126      	str	r6, [r4, #16]
 80152b6:	6165      	str	r5, [r4, #20]
 80152b8:	444e      	add	r6, r9
 80152ba:	eba5 0509 	sub.w	r5, r5, r9
 80152be:	6026      	str	r6, [r4, #0]
 80152c0:	60a5      	str	r5, [r4, #8]
 80152c2:	463e      	mov	r6, r7
 80152c4:	42be      	cmp	r6, r7
 80152c6:	d900      	bls.n	80152ca <__ssputs_r+0x72>
 80152c8:	463e      	mov	r6, r7
 80152ca:	6820      	ldr	r0, [r4, #0]
 80152cc:	4632      	mov	r2, r6
 80152ce:	4641      	mov	r1, r8
 80152d0:	f7ff fe54 	bl	8014f7c <memmove>
 80152d4:	68a3      	ldr	r3, [r4, #8]
 80152d6:	1b9b      	subs	r3, r3, r6
 80152d8:	60a3      	str	r3, [r4, #8]
 80152da:	6823      	ldr	r3, [r4, #0]
 80152dc:	4433      	add	r3, r6
 80152de:	6023      	str	r3, [r4, #0]
 80152e0:	2000      	movs	r0, #0
 80152e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e6:	462a      	mov	r2, r5
 80152e8:	f7ff fc30 	bl	8014b4c <_realloc_r>
 80152ec:	4606      	mov	r6, r0
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d1e0      	bne.n	80152b4 <__ssputs_r+0x5c>
 80152f2:	6921      	ldr	r1, [r4, #16]
 80152f4:	4650      	mov	r0, sl
 80152f6:	f7ff ff5d 	bl	80151b4 <_free_r>
 80152fa:	230c      	movs	r3, #12
 80152fc:	f8ca 3000 	str.w	r3, [sl]
 8015300:	89a3      	ldrh	r3, [r4, #12]
 8015302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015306:	81a3      	strh	r3, [r4, #12]
 8015308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801530c:	e7e9      	b.n	80152e2 <__ssputs_r+0x8a>
	...

08015310 <_svfiprintf_r>:
 8015310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015314:	4698      	mov	r8, r3
 8015316:	898b      	ldrh	r3, [r1, #12]
 8015318:	061b      	lsls	r3, r3, #24
 801531a:	b09d      	sub	sp, #116	@ 0x74
 801531c:	4607      	mov	r7, r0
 801531e:	460d      	mov	r5, r1
 8015320:	4614      	mov	r4, r2
 8015322:	d510      	bpl.n	8015346 <_svfiprintf_r+0x36>
 8015324:	690b      	ldr	r3, [r1, #16]
 8015326:	b973      	cbnz	r3, 8015346 <_svfiprintf_r+0x36>
 8015328:	2140      	movs	r1, #64	@ 0x40
 801532a:	f7ff fb0f 	bl	801494c <_malloc_r>
 801532e:	6028      	str	r0, [r5, #0]
 8015330:	6128      	str	r0, [r5, #16]
 8015332:	b930      	cbnz	r0, 8015342 <_svfiprintf_r+0x32>
 8015334:	230c      	movs	r3, #12
 8015336:	603b      	str	r3, [r7, #0]
 8015338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801533c:	b01d      	add	sp, #116	@ 0x74
 801533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015342:	2340      	movs	r3, #64	@ 0x40
 8015344:	616b      	str	r3, [r5, #20]
 8015346:	2300      	movs	r3, #0
 8015348:	9309      	str	r3, [sp, #36]	@ 0x24
 801534a:	2320      	movs	r3, #32
 801534c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015350:	f8cd 800c 	str.w	r8, [sp, #12]
 8015354:	2330      	movs	r3, #48	@ 0x30
 8015356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80154f4 <_svfiprintf_r+0x1e4>
 801535a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801535e:	f04f 0901 	mov.w	r9, #1
 8015362:	4623      	mov	r3, r4
 8015364:	469a      	mov	sl, r3
 8015366:	f813 2b01 	ldrb.w	r2, [r3], #1
 801536a:	b10a      	cbz	r2, 8015370 <_svfiprintf_r+0x60>
 801536c:	2a25      	cmp	r2, #37	@ 0x25
 801536e:	d1f9      	bne.n	8015364 <_svfiprintf_r+0x54>
 8015370:	ebba 0b04 	subs.w	fp, sl, r4
 8015374:	d00b      	beq.n	801538e <_svfiprintf_r+0x7e>
 8015376:	465b      	mov	r3, fp
 8015378:	4622      	mov	r2, r4
 801537a:	4629      	mov	r1, r5
 801537c:	4638      	mov	r0, r7
 801537e:	f7ff ff6b 	bl	8015258 <__ssputs_r>
 8015382:	3001      	adds	r0, #1
 8015384:	f000 80a7 	beq.w	80154d6 <_svfiprintf_r+0x1c6>
 8015388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801538a:	445a      	add	r2, fp
 801538c:	9209      	str	r2, [sp, #36]	@ 0x24
 801538e:	f89a 3000 	ldrb.w	r3, [sl]
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 809f 	beq.w	80154d6 <_svfiprintf_r+0x1c6>
 8015398:	2300      	movs	r3, #0
 801539a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801539e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153a2:	f10a 0a01 	add.w	sl, sl, #1
 80153a6:	9304      	str	r3, [sp, #16]
 80153a8:	9307      	str	r3, [sp, #28]
 80153aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80153ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80153b0:	4654      	mov	r4, sl
 80153b2:	2205      	movs	r2, #5
 80153b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153b8:	484e      	ldr	r0, [pc, #312]	@ (80154f4 <_svfiprintf_r+0x1e4>)
 80153ba:	f7ea ff29 	bl	8000210 <memchr>
 80153be:	9a04      	ldr	r2, [sp, #16]
 80153c0:	b9d8      	cbnz	r0, 80153fa <_svfiprintf_r+0xea>
 80153c2:	06d0      	lsls	r0, r2, #27
 80153c4:	bf44      	itt	mi
 80153c6:	2320      	movmi	r3, #32
 80153c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80153cc:	0711      	lsls	r1, r2, #28
 80153ce:	bf44      	itt	mi
 80153d0:	232b      	movmi	r3, #43	@ 0x2b
 80153d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80153d6:	f89a 3000 	ldrb.w	r3, [sl]
 80153da:	2b2a      	cmp	r3, #42	@ 0x2a
 80153dc:	d015      	beq.n	801540a <_svfiprintf_r+0xfa>
 80153de:	9a07      	ldr	r2, [sp, #28]
 80153e0:	4654      	mov	r4, sl
 80153e2:	2000      	movs	r0, #0
 80153e4:	f04f 0c0a 	mov.w	ip, #10
 80153e8:	4621      	mov	r1, r4
 80153ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153ee:	3b30      	subs	r3, #48	@ 0x30
 80153f0:	2b09      	cmp	r3, #9
 80153f2:	d94b      	bls.n	801548c <_svfiprintf_r+0x17c>
 80153f4:	b1b0      	cbz	r0, 8015424 <_svfiprintf_r+0x114>
 80153f6:	9207      	str	r2, [sp, #28]
 80153f8:	e014      	b.n	8015424 <_svfiprintf_r+0x114>
 80153fa:	eba0 0308 	sub.w	r3, r0, r8
 80153fe:	fa09 f303 	lsl.w	r3, r9, r3
 8015402:	4313      	orrs	r3, r2
 8015404:	9304      	str	r3, [sp, #16]
 8015406:	46a2      	mov	sl, r4
 8015408:	e7d2      	b.n	80153b0 <_svfiprintf_r+0xa0>
 801540a:	9b03      	ldr	r3, [sp, #12]
 801540c:	1d19      	adds	r1, r3, #4
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	9103      	str	r1, [sp, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	bfbb      	ittet	lt
 8015416:	425b      	neglt	r3, r3
 8015418:	f042 0202 	orrlt.w	r2, r2, #2
 801541c:	9307      	strge	r3, [sp, #28]
 801541e:	9307      	strlt	r3, [sp, #28]
 8015420:	bfb8      	it	lt
 8015422:	9204      	strlt	r2, [sp, #16]
 8015424:	7823      	ldrb	r3, [r4, #0]
 8015426:	2b2e      	cmp	r3, #46	@ 0x2e
 8015428:	d10a      	bne.n	8015440 <_svfiprintf_r+0x130>
 801542a:	7863      	ldrb	r3, [r4, #1]
 801542c:	2b2a      	cmp	r3, #42	@ 0x2a
 801542e:	d132      	bne.n	8015496 <_svfiprintf_r+0x186>
 8015430:	9b03      	ldr	r3, [sp, #12]
 8015432:	1d1a      	adds	r2, r3, #4
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	9203      	str	r2, [sp, #12]
 8015438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801543c:	3402      	adds	r4, #2
 801543e:	9305      	str	r3, [sp, #20]
 8015440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015504 <_svfiprintf_r+0x1f4>
 8015444:	7821      	ldrb	r1, [r4, #0]
 8015446:	2203      	movs	r2, #3
 8015448:	4650      	mov	r0, sl
 801544a:	f7ea fee1 	bl	8000210 <memchr>
 801544e:	b138      	cbz	r0, 8015460 <_svfiprintf_r+0x150>
 8015450:	9b04      	ldr	r3, [sp, #16]
 8015452:	eba0 000a 	sub.w	r0, r0, sl
 8015456:	2240      	movs	r2, #64	@ 0x40
 8015458:	4082      	lsls	r2, r0
 801545a:	4313      	orrs	r3, r2
 801545c:	3401      	adds	r4, #1
 801545e:	9304      	str	r3, [sp, #16]
 8015460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015464:	4824      	ldr	r0, [pc, #144]	@ (80154f8 <_svfiprintf_r+0x1e8>)
 8015466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801546a:	2206      	movs	r2, #6
 801546c:	f7ea fed0 	bl	8000210 <memchr>
 8015470:	2800      	cmp	r0, #0
 8015472:	d036      	beq.n	80154e2 <_svfiprintf_r+0x1d2>
 8015474:	4b21      	ldr	r3, [pc, #132]	@ (80154fc <_svfiprintf_r+0x1ec>)
 8015476:	bb1b      	cbnz	r3, 80154c0 <_svfiprintf_r+0x1b0>
 8015478:	9b03      	ldr	r3, [sp, #12]
 801547a:	3307      	adds	r3, #7
 801547c:	f023 0307 	bic.w	r3, r3, #7
 8015480:	3308      	adds	r3, #8
 8015482:	9303      	str	r3, [sp, #12]
 8015484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015486:	4433      	add	r3, r6
 8015488:	9309      	str	r3, [sp, #36]	@ 0x24
 801548a:	e76a      	b.n	8015362 <_svfiprintf_r+0x52>
 801548c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015490:	460c      	mov	r4, r1
 8015492:	2001      	movs	r0, #1
 8015494:	e7a8      	b.n	80153e8 <_svfiprintf_r+0xd8>
 8015496:	2300      	movs	r3, #0
 8015498:	3401      	adds	r4, #1
 801549a:	9305      	str	r3, [sp, #20]
 801549c:	4619      	mov	r1, r3
 801549e:	f04f 0c0a 	mov.w	ip, #10
 80154a2:	4620      	mov	r0, r4
 80154a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154a8:	3a30      	subs	r2, #48	@ 0x30
 80154aa:	2a09      	cmp	r2, #9
 80154ac:	d903      	bls.n	80154b6 <_svfiprintf_r+0x1a6>
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d0c6      	beq.n	8015440 <_svfiprintf_r+0x130>
 80154b2:	9105      	str	r1, [sp, #20]
 80154b4:	e7c4      	b.n	8015440 <_svfiprintf_r+0x130>
 80154b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80154ba:	4604      	mov	r4, r0
 80154bc:	2301      	movs	r3, #1
 80154be:	e7f0      	b.n	80154a2 <_svfiprintf_r+0x192>
 80154c0:	ab03      	add	r3, sp, #12
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	462a      	mov	r2, r5
 80154c6:	4b0e      	ldr	r3, [pc, #56]	@ (8015500 <_svfiprintf_r+0x1f0>)
 80154c8:	a904      	add	r1, sp, #16
 80154ca:	4638      	mov	r0, r7
 80154cc:	f3af 8000 	nop.w
 80154d0:	1c42      	adds	r2, r0, #1
 80154d2:	4606      	mov	r6, r0
 80154d4:	d1d6      	bne.n	8015484 <_svfiprintf_r+0x174>
 80154d6:	89ab      	ldrh	r3, [r5, #12]
 80154d8:	065b      	lsls	r3, r3, #25
 80154da:	f53f af2d 	bmi.w	8015338 <_svfiprintf_r+0x28>
 80154de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80154e0:	e72c      	b.n	801533c <_svfiprintf_r+0x2c>
 80154e2:	ab03      	add	r3, sp, #12
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	462a      	mov	r2, r5
 80154e8:	4b05      	ldr	r3, [pc, #20]	@ (8015500 <_svfiprintf_r+0x1f0>)
 80154ea:	a904      	add	r1, sp, #16
 80154ec:	4638      	mov	r0, r7
 80154ee:	f000 f879 	bl	80155e4 <_printf_i>
 80154f2:	e7ed      	b.n	80154d0 <_svfiprintf_r+0x1c0>
 80154f4:	08016efc 	.word	0x08016efc
 80154f8:	08016f06 	.word	0x08016f06
 80154fc:	00000000 	.word	0x00000000
 8015500:	08015259 	.word	0x08015259
 8015504:	08016f02 	.word	0x08016f02

08015508 <_printf_common>:
 8015508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801550c:	4616      	mov	r6, r2
 801550e:	4698      	mov	r8, r3
 8015510:	688a      	ldr	r2, [r1, #8]
 8015512:	690b      	ldr	r3, [r1, #16]
 8015514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015518:	4293      	cmp	r3, r2
 801551a:	bfb8      	it	lt
 801551c:	4613      	movlt	r3, r2
 801551e:	6033      	str	r3, [r6, #0]
 8015520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015524:	4607      	mov	r7, r0
 8015526:	460c      	mov	r4, r1
 8015528:	b10a      	cbz	r2, 801552e <_printf_common+0x26>
 801552a:	3301      	adds	r3, #1
 801552c:	6033      	str	r3, [r6, #0]
 801552e:	6823      	ldr	r3, [r4, #0]
 8015530:	0699      	lsls	r1, r3, #26
 8015532:	bf42      	ittt	mi
 8015534:	6833      	ldrmi	r3, [r6, #0]
 8015536:	3302      	addmi	r3, #2
 8015538:	6033      	strmi	r3, [r6, #0]
 801553a:	6825      	ldr	r5, [r4, #0]
 801553c:	f015 0506 	ands.w	r5, r5, #6
 8015540:	d106      	bne.n	8015550 <_printf_common+0x48>
 8015542:	f104 0a19 	add.w	sl, r4, #25
 8015546:	68e3      	ldr	r3, [r4, #12]
 8015548:	6832      	ldr	r2, [r6, #0]
 801554a:	1a9b      	subs	r3, r3, r2
 801554c:	42ab      	cmp	r3, r5
 801554e:	dc26      	bgt.n	801559e <_printf_common+0x96>
 8015550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015554:	6822      	ldr	r2, [r4, #0]
 8015556:	3b00      	subs	r3, #0
 8015558:	bf18      	it	ne
 801555a:	2301      	movne	r3, #1
 801555c:	0692      	lsls	r2, r2, #26
 801555e:	d42b      	bmi.n	80155b8 <_printf_common+0xb0>
 8015560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015564:	4641      	mov	r1, r8
 8015566:	4638      	mov	r0, r7
 8015568:	47c8      	blx	r9
 801556a:	3001      	adds	r0, #1
 801556c:	d01e      	beq.n	80155ac <_printf_common+0xa4>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	6922      	ldr	r2, [r4, #16]
 8015572:	f003 0306 	and.w	r3, r3, #6
 8015576:	2b04      	cmp	r3, #4
 8015578:	bf02      	ittt	eq
 801557a:	68e5      	ldreq	r5, [r4, #12]
 801557c:	6833      	ldreq	r3, [r6, #0]
 801557e:	1aed      	subeq	r5, r5, r3
 8015580:	68a3      	ldr	r3, [r4, #8]
 8015582:	bf0c      	ite	eq
 8015584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015588:	2500      	movne	r5, #0
 801558a:	4293      	cmp	r3, r2
 801558c:	bfc4      	itt	gt
 801558e:	1a9b      	subgt	r3, r3, r2
 8015590:	18ed      	addgt	r5, r5, r3
 8015592:	2600      	movs	r6, #0
 8015594:	341a      	adds	r4, #26
 8015596:	42b5      	cmp	r5, r6
 8015598:	d11a      	bne.n	80155d0 <_printf_common+0xc8>
 801559a:	2000      	movs	r0, #0
 801559c:	e008      	b.n	80155b0 <_printf_common+0xa8>
 801559e:	2301      	movs	r3, #1
 80155a0:	4652      	mov	r2, sl
 80155a2:	4641      	mov	r1, r8
 80155a4:	4638      	mov	r0, r7
 80155a6:	47c8      	blx	r9
 80155a8:	3001      	adds	r0, #1
 80155aa:	d103      	bne.n	80155b4 <_printf_common+0xac>
 80155ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155b4:	3501      	adds	r5, #1
 80155b6:	e7c6      	b.n	8015546 <_printf_common+0x3e>
 80155b8:	18e1      	adds	r1, r4, r3
 80155ba:	1c5a      	adds	r2, r3, #1
 80155bc:	2030      	movs	r0, #48	@ 0x30
 80155be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80155c2:	4422      	add	r2, r4
 80155c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80155c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80155cc:	3302      	adds	r3, #2
 80155ce:	e7c7      	b.n	8015560 <_printf_common+0x58>
 80155d0:	2301      	movs	r3, #1
 80155d2:	4622      	mov	r2, r4
 80155d4:	4641      	mov	r1, r8
 80155d6:	4638      	mov	r0, r7
 80155d8:	47c8      	blx	r9
 80155da:	3001      	adds	r0, #1
 80155dc:	d0e6      	beq.n	80155ac <_printf_common+0xa4>
 80155de:	3601      	adds	r6, #1
 80155e0:	e7d9      	b.n	8015596 <_printf_common+0x8e>
	...

080155e4 <_printf_i>:
 80155e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80155e8:	7e0f      	ldrb	r7, [r1, #24]
 80155ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80155ec:	2f78      	cmp	r7, #120	@ 0x78
 80155ee:	4691      	mov	r9, r2
 80155f0:	4680      	mov	r8, r0
 80155f2:	460c      	mov	r4, r1
 80155f4:	469a      	mov	sl, r3
 80155f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80155fa:	d807      	bhi.n	801560c <_printf_i+0x28>
 80155fc:	2f62      	cmp	r7, #98	@ 0x62
 80155fe:	d80a      	bhi.n	8015616 <_printf_i+0x32>
 8015600:	2f00      	cmp	r7, #0
 8015602:	f000 80d2 	beq.w	80157aa <_printf_i+0x1c6>
 8015606:	2f58      	cmp	r7, #88	@ 0x58
 8015608:	f000 80b9 	beq.w	801577e <_printf_i+0x19a>
 801560c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015614:	e03a      	b.n	801568c <_printf_i+0xa8>
 8015616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801561a:	2b15      	cmp	r3, #21
 801561c:	d8f6      	bhi.n	801560c <_printf_i+0x28>
 801561e:	a101      	add	r1, pc, #4	@ (adr r1, 8015624 <_printf_i+0x40>)
 8015620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015624:	0801567d 	.word	0x0801567d
 8015628:	08015691 	.word	0x08015691
 801562c:	0801560d 	.word	0x0801560d
 8015630:	0801560d 	.word	0x0801560d
 8015634:	0801560d 	.word	0x0801560d
 8015638:	0801560d 	.word	0x0801560d
 801563c:	08015691 	.word	0x08015691
 8015640:	0801560d 	.word	0x0801560d
 8015644:	0801560d 	.word	0x0801560d
 8015648:	0801560d 	.word	0x0801560d
 801564c:	0801560d 	.word	0x0801560d
 8015650:	08015791 	.word	0x08015791
 8015654:	080156bb 	.word	0x080156bb
 8015658:	0801574b 	.word	0x0801574b
 801565c:	0801560d 	.word	0x0801560d
 8015660:	0801560d 	.word	0x0801560d
 8015664:	080157b3 	.word	0x080157b3
 8015668:	0801560d 	.word	0x0801560d
 801566c:	080156bb 	.word	0x080156bb
 8015670:	0801560d 	.word	0x0801560d
 8015674:	0801560d 	.word	0x0801560d
 8015678:	08015753 	.word	0x08015753
 801567c:	6833      	ldr	r3, [r6, #0]
 801567e:	1d1a      	adds	r2, r3, #4
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	6032      	str	r2, [r6, #0]
 8015684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801568c:	2301      	movs	r3, #1
 801568e:	e09d      	b.n	80157cc <_printf_i+0x1e8>
 8015690:	6833      	ldr	r3, [r6, #0]
 8015692:	6820      	ldr	r0, [r4, #0]
 8015694:	1d19      	adds	r1, r3, #4
 8015696:	6031      	str	r1, [r6, #0]
 8015698:	0606      	lsls	r6, r0, #24
 801569a:	d501      	bpl.n	80156a0 <_printf_i+0xbc>
 801569c:	681d      	ldr	r5, [r3, #0]
 801569e:	e003      	b.n	80156a8 <_printf_i+0xc4>
 80156a0:	0645      	lsls	r5, r0, #25
 80156a2:	d5fb      	bpl.n	801569c <_printf_i+0xb8>
 80156a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80156a8:	2d00      	cmp	r5, #0
 80156aa:	da03      	bge.n	80156b4 <_printf_i+0xd0>
 80156ac:	232d      	movs	r3, #45	@ 0x2d
 80156ae:	426d      	negs	r5, r5
 80156b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80156b4:	4859      	ldr	r0, [pc, #356]	@ (801581c <_printf_i+0x238>)
 80156b6:	230a      	movs	r3, #10
 80156b8:	e011      	b.n	80156de <_printf_i+0xfa>
 80156ba:	6821      	ldr	r1, [r4, #0]
 80156bc:	6833      	ldr	r3, [r6, #0]
 80156be:	0608      	lsls	r0, r1, #24
 80156c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80156c4:	d402      	bmi.n	80156cc <_printf_i+0xe8>
 80156c6:	0649      	lsls	r1, r1, #25
 80156c8:	bf48      	it	mi
 80156ca:	b2ad      	uxthmi	r5, r5
 80156cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80156ce:	4853      	ldr	r0, [pc, #332]	@ (801581c <_printf_i+0x238>)
 80156d0:	6033      	str	r3, [r6, #0]
 80156d2:	bf14      	ite	ne
 80156d4:	230a      	movne	r3, #10
 80156d6:	2308      	moveq	r3, #8
 80156d8:	2100      	movs	r1, #0
 80156da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80156de:	6866      	ldr	r6, [r4, #4]
 80156e0:	60a6      	str	r6, [r4, #8]
 80156e2:	2e00      	cmp	r6, #0
 80156e4:	bfa2      	ittt	ge
 80156e6:	6821      	ldrge	r1, [r4, #0]
 80156e8:	f021 0104 	bicge.w	r1, r1, #4
 80156ec:	6021      	strge	r1, [r4, #0]
 80156ee:	b90d      	cbnz	r5, 80156f4 <_printf_i+0x110>
 80156f0:	2e00      	cmp	r6, #0
 80156f2:	d04b      	beq.n	801578c <_printf_i+0x1a8>
 80156f4:	4616      	mov	r6, r2
 80156f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80156fa:	fb03 5711 	mls	r7, r3, r1, r5
 80156fe:	5dc7      	ldrb	r7, [r0, r7]
 8015700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015704:	462f      	mov	r7, r5
 8015706:	42bb      	cmp	r3, r7
 8015708:	460d      	mov	r5, r1
 801570a:	d9f4      	bls.n	80156f6 <_printf_i+0x112>
 801570c:	2b08      	cmp	r3, #8
 801570e:	d10b      	bne.n	8015728 <_printf_i+0x144>
 8015710:	6823      	ldr	r3, [r4, #0]
 8015712:	07df      	lsls	r7, r3, #31
 8015714:	d508      	bpl.n	8015728 <_printf_i+0x144>
 8015716:	6923      	ldr	r3, [r4, #16]
 8015718:	6861      	ldr	r1, [r4, #4]
 801571a:	4299      	cmp	r1, r3
 801571c:	bfde      	ittt	le
 801571e:	2330      	movle	r3, #48	@ 0x30
 8015720:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015724:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015728:	1b92      	subs	r2, r2, r6
 801572a:	6122      	str	r2, [r4, #16]
 801572c:	f8cd a000 	str.w	sl, [sp]
 8015730:	464b      	mov	r3, r9
 8015732:	aa03      	add	r2, sp, #12
 8015734:	4621      	mov	r1, r4
 8015736:	4640      	mov	r0, r8
 8015738:	f7ff fee6 	bl	8015508 <_printf_common>
 801573c:	3001      	adds	r0, #1
 801573e:	d14a      	bne.n	80157d6 <_printf_i+0x1f2>
 8015740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015744:	b004      	add	sp, #16
 8015746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801574a:	6823      	ldr	r3, [r4, #0]
 801574c:	f043 0320 	orr.w	r3, r3, #32
 8015750:	6023      	str	r3, [r4, #0]
 8015752:	4833      	ldr	r0, [pc, #204]	@ (8015820 <_printf_i+0x23c>)
 8015754:	2778      	movs	r7, #120	@ 0x78
 8015756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801575a:	6823      	ldr	r3, [r4, #0]
 801575c:	6831      	ldr	r1, [r6, #0]
 801575e:	061f      	lsls	r7, r3, #24
 8015760:	f851 5b04 	ldr.w	r5, [r1], #4
 8015764:	d402      	bmi.n	801576c <_printf_i+0x188>
 8015766:	065f      	lsls	r7, r3, #25
 8015768:	bf48      	it	mi
 801576a:	b2ad      	uxthmi	r5, r5
 801576c:	6031      	str	r1, [r6, #0]
 801576e:	07d9      	lsls	r1, r3, #31
 8015770:	bf44      	itt	mi
 8015772:	f043 0320 	orrmi.w	r3, r3, #32
 8015776:	6023      	strmi	r3, [r4, #0]
 8015778:	b11d      	cbz	r5, 8015782 <_printf_i+0x19e>
 801577a:	2310      	movs	r3, #16
 801577c:	e7ac      	b.n	80156d8 <_printf_i+0xf4>
 801577e:	4827      	ldr	r0, [pc, #156]	@ (801581c <_printf_i+0x238>)
 8015780:	e7e9      	b.n	8015756 <_printf_i+0x172>
 8015782:	6823      	ldr	r3, [r4, #0]
 8015784:	f023 0320 	bic.w	r3, r3, #32
 8015788:	6023      	str	r3, [r4, #0]
 801578a:	e7f6      	b.n	801577a <_printf_i+0x196>
 801578c:	4616      	mov	r6, r2
 801578e:	e7bd      	b.n	801570c <_printf_i+0x128>
 8015790:	6833      	ldr	r3, [r6, #0]
 8015792:	6825      	ldr	r5, [r4, #0]
 8015794:	6961      	ldr	r1, [r4, #20]
 8015796:	1d18      	adds	r0, r3, #4
 8015798:	6030      	str	r0, [r6, #0]
 801579a:	062e      	lsls	r6, r5, #24
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	d501      	bpl.n	80157a4 <_printf_i+0x1c0>
 80157a0:	6019      	str	r1, [r3, #0]
 80157a2:	e002      	b.n	80157aa <_printf_i+0x1c6>
 80157a4:	0668      	lsls	r0, r5, #25
 80157a6:	d5fb      	bpl.n	80157a0 <_printf_i+0x1bc>
 80157a8:	8019      	strh	r1, [r3, #0]
 80157aa:	2300      	movs	r3, #0
 80157ac:	6123      	str	r3, [r4, #16]
 80157ae:	4616      	mov	r6, r2
 80157b0:	e7bc      	b.n	801572c <_printf_i+0x148>
 80157b2:	6833      	ldr	r3, [r6, #0]
 80157b4:	1d1a      	adds	r2, r3, #4
 80157b6:	6032      	str	r2, [r6, #0]
 80157b8:	681e      	ldr	r6, [r3, #0]
 80157ba:	6862      	ldr	r2, [r4, #4]
 80157bc:	2100      	movs	r1, #0
 80157be:	4630      	mov	r0, r6
 80157c0:	f7ea fd26 	bl	8000210 <memchr>
 80157c4:	b108      	cbz	r0, 80157ca <_printf_i+0x1e6>
 80157c6:	1b80      	subs	r0, r0, r6
 80157c8:	6060      	str	r0, [r4, #4]
 80157ca:	6863      	ldr	r3, [r4, #4]
 80157cc:	6123      	str	r3, [r4, #16]
 80157ce:	2300      	movs	r3, #0
 80157d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80157d4:	e7aa      	b.n	801572c <_printf_i+0x148>
 80157d6:	6923      	ldr	r3, [r4, #16]
 80157d8:	4632      	mov	r2, r6
 80157da:	4649      	mov	r1, r9
 80157dc:	4640      	mov	r0, r8
 80157de:	47d0      	blx	sl
 80157e0:	3001      	adds	r0, #1
 80157e2:	d0ad      	beq.n	8015740 <_printf_i+0x15c>
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	079b      	lsls	r3, r3, #30
 80157e8:	d413      	bmi.n	8015812 <_printf_i+0x22e>
 80157ea:	68e0      	ldr	r0, [r4, #12]
 80157ec:	9b03      	ldr	r3, [sp, #12]
 80157ee:	4298      	cmp	r0, r3
 80157f0:	bfb8      	it	lt
 80157f2:	4618      	movlt	r0, r3
 80157f4:	e7a6      	b.n	8015744 <_printf_i+0x160>
 80157f6:	2301      	movs	r3, #1
 80157f8:	4632      	mov	r2, r6
 80157fa:	4649      	mov	r1, r9
 80157fc:	4640      	mov	r0, r8
 80157fe:	47d0      	blx	sl
 8015800:	3001      	adds	r0, #1
 8015802:	d09d      	beq.n	8015740 <_printf_i+0x15c>
 8015804:	3501      	adds	r5, #1
 8015806:	68e3      	ldr	r3, [r4, #12]
 8015808:	9903      	ldr	r1, [sp, #12]
 801580a:	1a5b      	subs	r3, r3, r1
 801580c:	42ab      	cmp	r3, r5
 801580e:	dcf2      	bgt.n	80157f6 <_printf_i+0x212>
 8015810:	e7eb      	b.n	80157ea <_printf_i+0x206>
 8015812:	2500      	movs	r5, #0
 8015814:	f104 0619 	add.w	r6, r4, #25
 8015818:	e7f5      	b.n	8015806 <_printf_i+0x222>
 801581a:	bf00      	nop
 801581c:	08016f0d 	.word	0x08016f0d
 8015820:	08016f1e 	.word	0x08016f1e

08015824 <__sflush_r>:
 8015824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801582c:	0716      	lsls	r6, r2, #28
 801582e:	4605      	mov	r5, r0
 8015830:	460c      	mov	r4, r1
 8015832:	d454      	bmi.n	80158de <__sflush_r+0xba>
 8015834:	684b      	ldr	r3, [r1, #4]
 8015836:	2b00      	cmp	r3, #0
 8015838:	dc02      	bgt.n	8015840 <__sflush_r+0x1c>
 801583a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801583c:	2b00      	cmp	r3, #0
 801583e:	dd48      	ble.n	80158d2 <__sflush_r+0xae>
 8015840:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015842:	2e00      	cmp	r6, #0
 8015844:	d045      	beq.n	80158d2 <__sflush_r+0xae>
 8015846:	2300      	movs	r3, #0
 8015848:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801584c:	682f      	ldr	r7, [r5, #0]
 801584e:	6a21      	ldr	r1, [r4, #32]
 8015850:	602b      	str	r3, [r5, #0]
 8015852:	d030      	beq.n	80158b6 <__sflush_r+0x92>
 8015854:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015856:	89a3      	ldrh	r3, [r4, #12]
 8015858:	0759      	lsls	r1, r3, #29
 801585a:	d505      	bpl.n	8015868 <__sflush_r+0x44>
 801585c:	6863      	ldr	r3, [r4, #4]
 801585e:	1ad2      	subs	r2, r2, r3
 8015860:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015862:	b10b      	cbz	r3, 8015868 <__sflush_r+0x44>
 8015864:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015866:	1ad2      	subs	r2, r2, r3
 8015868:	2300      	movs	r3, #0
 801586a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801586c:	6a21      	ldr	r1, [r4, #32]
 801586e:	4628      	mov	r0, r5
 8015870:	47b0      	blx	r6
 8015872:	1c43      	adds	r3, r0, #1
 8015874:	89a3      	ldrh	r3, [r4, #12]
 8015876:	d106      	bne.n	8015886 <__sflush_r+0x62>
 8015878:	6829      	ldr	r1, [r5, #0]
 801587a:	291d      	cmp	r1, #29
 801587c:	d82b      	bhi.n	80158d6 <__sflush_r+0xb2>
 801587e:	4a2a      	ldr	r2, [pc, #168]	@ (8015928 <__sflush_r+0x104>)
 8015880:	410a      	asrs	r2, r1
 8015882:	07d6      	lsls	r6, r2, #31
 8015884:	d427      	bmi.n	80158d6 <__sflush_r+0xb2>
 8015886:	2200      	movs	r2, #0
 8015888:	6062      	str	r2, [r4, #4]
 801588a:	04d9      	lsls	r1, r3, #19
 801588c:	6922      	ldr	r2, [r4, #16]
 801588e:	6022      	str	r2, [r4, #0]
 8015890:	d504      	bpl.n	801589c <__sflush_r+0x78>
 8015892:	1c42      	adds	r2, r0, #1
 8015894:	d101      	bne.n	801589a <__sflush_r+0x76>
 8015896:	682b      	ldr	r3, [r5, #0]
 8015898:	b903      	cbnz	r3, 801589c <__sflush_r+0x78>
 801589a:	6560      	str	r0, [r4, #84]	@ 0x54
 801589c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801589e:	602f      	str	r7, [r5, #0]
 80158a0:	b1b9      	cbz	r1, 80158d2 <__sflush_r+0xae>
 80158a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80158a6:	4299      	cmp	r1, r3
 80158a8:	d002      	beq.n	80158b0 <__sflush_r+0x8c>
 80158aa:	4628      	mov	r0, r5
 80158ac:	f7ff fc82 	bl	80151b4 <_free_r>
 80158b0:	2300      	movs	r3, #0
 80158b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80158b4:	e00d      	b.n	80158d2 <__sflush_r+0xae>
 80158b6:	2301      	movs	r3, #1
 80158b8:	4628      	mov	r0, r5
 80158ba:	47b0      	blx	r6
 80158bc:	4602      	mov	r2, r0
 80158be:	1c50      	adds	r0, r2, #1
 80158c0:	d1c9      	bne.n	8015856 <__sflush_r+0x32>
 80158c2:	682b      	ldr	r3, [r5, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d0c6      	beq.n	8015856 <__sflush_r+0x32>
 80158c8:	2b1d      	cmp	r3, #29
 80158ca:	d001      	beq.n	80158d0 <__sflush_r+0xac>
 80158cc:	2b16      	cmp	r3, #22
 80158ce:	d11e      	bne.n	801590e <__sflush_r+0xea>
 80158d0:	602f      	str	r7, [r5, #0]
 80158d2:	2000      	movs	r0, #0
 80158d4:	e022      	b.n	801591c <__sflush_r+0xf8>
 80158d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158da:	b21b      	sxth	r3, r3
 80158dc:	e01b      	b.n	8015916 <__sflush_r+0xf2>
 80158de:	690f      	ldr	r7, [r1, #16]
 80158e0:	2f00      	cmp	r7, #0
 80158e2:	d0f6      	beq.n	80158d2 <__sflush_r+0xae>
 80158e4:	0793      	lsls	r3, r2, #30
 80158e6:	680e      	ldr	r6, [r1, #0]
 80158e8:	bf08      	it	eq
 80158ea:	694b      	ldreq	r3, [r1, #20]
 80158ec:	600f      	str	r7, [r1, #0]
 80158ee:	bf18      	it	ne
 80158f0:	2300      	movne	r3, #0
 80158f2:	eba6 0807 	sub.w	r8, r6, r7
 80158f6:	608b      	str	r3, [r1, #8]
 80158f8:	f1b8 0f00 	cmp.w	r8, #0
 80158fc:	dde9      	ble.n	80158d2 <__sflush_r+0xae>
 80158fe:	6a21      	ldr	r1, [r4, #32]
 8015900:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015902:	4643      	mov	r3, r8
 8015904:	463a      	mov	r2, r7
 8015906:	4628      	mov	r0, r5
 8015908:	47b0      	blx	r6
 801590a:	2800      	cmp	r0, #0
 801590c:	dc08      	bgt.n	8015920 <__sflush_r+0xfc>
 801590e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015916:	81a3      	strh	r3, [r4, #12]
 8015918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015920:	4407      	add	r7, r0
 8015922:	eba8 0800 	sub.w	r8, r8, r0
 8015926:	e7e7      	b.n	80158f8 <__sflush_r+0xd4>
 8015928:	dfbffffe 	.word	0xdfbffffe

0801592c <_fflush_r>:
 801592c:	b538      	push	{r3, r4, r5, lr}
 801592e:	690b      	ldr	r3, [r1, #16]
 8015930:	4605      	mov	r5, r0
 8015932:	460c      	mov	r4, r1
 8015934:	b913      	cbnz	r3, 801593c <_fflush_r+0x10>
 8015936:	2500      	movs	r5, #0
 8015938:	4628      	mov	r0, r5
 801593a:	bd38      	pop	{r3, r4, r5, pc}
 801593c:	b118      	cbz	r0, 8015946 <_fflush_r+0x1a>
 801593e:	6a03      	ldr	r3, [r0, #32]
 8015940:	b90b      	cbnz	r3, 8015946 <_fflush_r+0x1a>
 8015942:	f7ff fa35 	bl	8014db0 <__sinit>
 8015946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d0f3      	beq.n	8015936 <_fflush_r+0xa>
 801594e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015950:	07d0      	lsls	r0, r2, #31
 8015952:	d404      	bmi.n	801595e <_fflush_r+0x32>
 8015954:	0599      	lsls	r1, r3, #22
 8015956:	d402      	bmi.n	801595e <_fflush_r+0x32>
 8015958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801595a:	f7ff fbe8 	bl	801512e <__retarget_lock_acquire_recursive>
 801595e:	4628      	mov	r0, r5
 8015960:	4621      	mov	r1, r4
 8015962:	f7ff ff5f 	bl	8015824 <__sflush_r>
 8015966:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015968:	07da      	lsls	r2, r3, #31
 801596a:	4605      	mov	r5, r0
 801596c:	d4e4      	bmi.n	8015938 <_fflush_r+0xc>
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	059b      	lsls	r3, r3, #22
 8015972:	d4e1      	bmi.n	8015938 <_fflush_r+0xc>
 8015974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015976:	f7ff fbdb 	bl	8015130 <__retarget_lock_release_recursive>
 801597a:	e7dd      	b.n	8015938 <_fflush_r+0xc>

0801597c <fiprintf>:
 801597c:	b40e      	push	{r1, r2, r3}
 801597e:	b503      	push	{r0, r1, lr}
 8015980:	4601      	mov	r1, r0
 8015982:	ab03      	add	r3, sp, #12
 8015984:	4805      	ldr	r0, [pc, #20]	@ (801599c <fiprintf+0x20>)
 8015986:	f853 2b04 	ldr.w	r2, [r3], #4
 801598a:	6800      	ldr	r0, [r0, #0]
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	f000 f837 	bl	8015a00 <_vfiprintf_r>
 8015992:	b002      	add	sp, #8
 8015994:	f85d eb04 	ldr.w	lr, [sp], #4
 8015998:	b003      	add	sp, #12
 801599a:	4770      	bx	lr
 801599c:	200000c4 	.word	0x200000c4

080159a0 <abort>:
 80159a0:	b508      	push	{r3, lr}
 80159a2:	2006      	movs	r0, #6
 80159a4:	f000 fa00 	bl	8015da8 <raise>
 80159a8:	2001      	movs	r0, #1
 80159aa:	f7ec fdd3 	bl	8002554 <_exit>

080159ae <__sfputc_r>:
 80159ae:	6893      	ldr	r3, [r2, #8]
 80159b0:	3b01      	subs	r3, #1
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	b410      	push	{r4}
 80159b6:	6093      	str	r3, [r2, #8]
 80159b8:	da08      	bge.n	80159cc <__sfputc_r+0x1e>
 80159ba:	6994      	ldr	r4, [r2, #24]
 80159bc:	42a3      	cmp	r3, r4
 80159be:	db01      	blt.n	80159c4 <__sfputc_r+0x16>
 80159c0:	290a      	cmp	r1, #10
 80159c2:	d103      	bne.n	80159cc <__sfputc_r+0x1e>
 80159c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159c8:	f000 b932 	b.w	8015c30 <__swbuf_r>
 80159cc:	6813      	ldr	r3, [r2, #0]
 80159ce:	1c58      	adds	r0, r3, #1
 80159d0:	6010      	str	r0, [r2, #0]
 80159d2:	7019      	strb	r1, [r3, #0]
 80159d4:	4608      	mov	r0, r1
 80159d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159da:	4770      	bx	lr

080159dc <__sfputs_r>:
 80159dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159de:	4606      	mov	r6, r0
 80159e0:	460f      	mov	r7, r1
 80159e2:	4614      	mov	r4, r2
 80159e4:	18d5      	adds	r5, r2, r3
 80159e6:	42ac      	cmp	r4, r5
 80159e8:	d101      	bne.n	80159ee <__sfputs_r+0x12>
 80159ea:	2000      	movs	r0, #0
 80159ec:	e007      	b.n	80159fe <__sfputs_r+0x22>
 80159ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159f2:	463a      	mov	r2, r7
 80159f4:	4630      	mov	r0, r6
 80159f6:	f7ff ffda 	bl	80159ae <__sfputc_r>
 80159fa:	1c43      	adds	r3, r0, #1
 80159fc:	d1f3      	bne.n	80159e6 <__sfputs_r+0xa>
 80159fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015a00 <_vfiprintf_r>:
 8015a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a04:	460d      	mov	r5, r1
 8015a06:	b09d      	sub	sp, #116	@ 0x74
 8015a08:	4614      	mov	r4, r2
 8015a0a:	4698      	mov	r8, r3
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	b118      	cbz	r0, 8015a18 <_vfiprintf_r+0x18>
 8015a10:	6a03      	ldr	r3, [r0, #32]
 8015a12:	b90b      	cbnz	r3, 8015a18 <_vfiprintf_r+0x18>
 8015a14:	f7ff f9cc 	bl	8014db0 <__sinit>
 8015a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a1a:	07d9      	lsls	r1, r3, #31
 8015a1c:	d405      	bmi.n	8015a2a <_vfiprintf_r+0x2a>
 8015a1e:	89ab      	ldrh	r3, [r5, #12]
 8015a20:	059a      	lsls	r2, r3, #22
 8015a22:	d402      	bmi.n	8015a2a <_vfiprintf_r+0x2a>
 8015a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a26:	f7ff fb82 	bl	801512e <__retarget_lock_acquire_recursive>
 8015a2a:	89ab      	ldrh	r3, [r5, #12]
 8015a2c:	071b      	lsls	r3, r3, #28
 8015a2e:	d501      	bpl.n	8015a34 <_vfiprintf_r+0x34>
 8015a30:	692b      	ldr	r3, [r5, #16]
 8015a32:	b99b      	cbnz	r3, 8015a5c <_vfiprintf_r+0x5c>
 8015a34:	4629      	mov	r1, r5
 8015a36:	4630      	mov	r0, r6
 8015a38:	f000 f938 	bl	8015cac <__swsetup_r>
 8015a3c:	b170      	cbz	r0, 8015a5c <_vfiprintf_r+0x5c>
 8015a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a40:	07dc      	lsls	r4, r3, #31
 8015a42:	d504      	bpl.n	8015a4e <_vfiprintf_r+0x4e>
 8015a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a48:	b01d      	add	sp, #116	@ 0x74
 8015a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a4e:	89ab      	ldrh	r3, [r5, #12]
 8015a50:	0598      	lsls	r0, r3, #22
 8015a52:	d4f7      	bmi.n	8015a44 <_vfiprintf_r+0x44>
 8015a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a56:	f7ff fb6b 	bl	8015130 <__retarget_lock_release_recursive>
 8015a5a:	e7f3      	b.n	8015a44 <_vfiprintf_r+0x44>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a60:	2320      	movs	r3, #32
 8015a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a6a:	2330      	movs	r3, #48	@ 0x30
 8015a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015c1c <_vfiprintf_r+0x21c>
 8015a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015a74:	f04f 0901 	mov.w	r9, #1
 8015a78:	4623      	mov	r3, r4
 8015a7a:	469a      	mov	sl, r3
 8015a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a80:	b10a      	cbz	r2, 8015a86 <_vfiprintf_r+0x86>
 8015a82:	2a25      	cmp	r2, #37	@ 0x25
 8015a84:	d1f9      	bne.n	8015a7a <_vfiprintf_r+0x7a>
 8015a86:	ebba 0b04 	subs.w	fp, sl, r4
 8015a8a:	d00b      	beq.n	8015aa4 <_vfiprintf_r+0xa4>
 8015a8c:	465b      	mov	r3, fp
 8015a8e:	4622      	mov	r2, r4
 8015a90:	4629      	mov	r1, r5
 8015a92:	4630      	mov	r0, r6
 8015a94:	f7ff ffa2 	bl	80159dc <__sfputs_r>
 8015a98:	3001      	adds	r0, #1
 8015a9a:	f000 80a7 	beq.w	8015bec <_vfiprintf_r+0x1ec>
 8015a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015aa0:	445a      	add	r2, fp
 8015aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8015aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 809f 	beq.w	8015bec <_vfiprintf_r+0x1ec>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ab8:	f10a 0a01 	add.w	sl, sl, #1
 8015abc:	9304      	str	r3, [sp, #16]
 8015abe:	9307      	str	r3, [sp, #28]
 8015ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ac6:	4654      	mov	r4, sl
 8015ac8:	2205      	movs	r2, #5
 8015aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ace:	4853      	ldr	r0, [pc, #332]	@ (8015c1c <_vfiprintf_r+0x21c>)
 8015ad0:	f7ea fb9e 	bl	8000210 <memchr>
 8015ad4:	9a04      	ldr	r2, [sp, #16]
 8015ad6:	b9d8      	cbnz	r0, 8015b10 <_vfiprintf_r+0x110>
 8015ad8:	06d1      	lsls	r1, r2, #27
 8015ada:	bf44      	itt	mi
 8015adc:	2320      	movmi	r3, #32
 8015ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ae2:	0713      	lsls	r3, r2, #28
 8015ae4:	bf44      	itt	mi
 8015ae6:	232b      	movmi	r3, #43	@ 0x2b
 8015ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015aec:	f89a 3000 	ldrb.w	r3, [sl]
 8015af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8015af2:	d015      	beq.n	8015b20 <_vfiprintf_r+0x120>
 8015af4:	9a07      	ldr	r2, [sp, #28]
 8015af6:	4654      	mov	r4, sl
 8015af8:	2000      	movs	r0, #0
 8015afa:	f04f 0c0a 	mov.w	ip, #10
 8015afe:	4621      	mov	r1, r4
 8015b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b04:	3b30      	subs	r3, #48	@ 0x30
 8015b06:	2b09      	cmp	r3, #9
 8015b08:	d94b      	bls.n	8015ba2 <_vfiprintf_r+0x1a2>
 8015b0a:	b1b0      	cbz	r0, 8015b3a <_vfiprintf_r+0x13a>
 8015b0c:	9207      	str	r2, [sp, #28]
 8015b0e:	e014      	b.n	8015b3a <_vfiprintf_r+0x13a>
 8015b10:	eba0 0308 	sub.w	r3, r0, r8
 8015b14:	fa09 f303 	lsl.w	r3, r9, r3
 8015b18:	4313      	orrs	r3, r2
 8015b1a:	9304      	str	r3, [sp, #16]
 8015b1c:	46a2      	mov	sl, r4
 8015b1e:	e7d2      	b.n	8015ac6 <_vfiprintf_r+0xc6>
 8015b20:	9b03      	ldr	r3, [sp, #12]
 8015b22:	1d19      	adds	r1, r3, #4
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	9103      	str	r1, [sp, #12]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	bfbb      	ittet	lt
 8015b2c:	425b      	neglt	r3, r3
 8015b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8015b32:	9307      	strge	r3, [sp, #28]
 8015b34:	9307      	strlt	r3, [sp, #28]
 8015b36:	bfb8      	it	lt
 8015b38:	9204      	strlt	r2, [sp, #16]
 8015b3a:	7823      	ldrb	r3, [r4, #0]
 8015b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b3e:	d10a      	bne.n	8015b56 <_vfiprintf_r+0x156>
 8015b40:	7863      	ldrb	r3, [r4, #1]
 8015b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b44:	d132      	bne.n	8015bac <_vfiprintf_r+0x1ac>
 8015b46:	9b03      	ldr	r3, [sp, #12]
 8015b48:	1d1a      	adds	r2, r3, #4
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	9203      	str	r2, [sp, #12]
 8015b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b52:	3402      	adds	r4, #2
 8015b54:	9305      	str	r3, [sp, #20]
 8015b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015c2c <_vfiprintf_r+0x22c>
 8015b5a:	7821      	ldrb	r1, [r4, #0]
 8015b5c:	2203      	movs	r2, #3
 8015b5e:	4650      	mov	r0, sl
 8015b60:	f7ea fb56 	bl	8000210 <memchr>
 8015b64:	b138      	cbz	r0, 8015b76 <_vfiprintf_r+0x176>
 8015b66:	9b04      	ldr	r3, [sp, #16]
 8015b68:	eba0 000a 	sub.w	r0, r0, sl
 8015b6c:	2240      	movs	r2, #64	@ 0x40
 8015b6e:	4082      	lsls	r2, r0
 8015b70:	4313      	orrs	r3, r2
 8015b72:	3401      	adds	r4, #1
 8015b74:	9304      	str	r3, [sp, #16]
 8015b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b7a:	4829      	ldr	r0, [pc, #164]	@ (8015c20 <_vfiprintf_r+0x220>)
 8015b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015b80:	2206      	movs	r2, #6
 8015b82:	f7ea fb45 	bl	8000210 <memchr>
 8015b86:	2800      	cmp	r0, #0
 8015b88:	d03f      	beq.n	8015c0a <_vfiprintf_r+0x20a>
 8015b8a:	4b26      	ldr	r3, [pc, #152]	@ (8015c24 <_vfiprintf_r+0x224>)
 8015b8c:	bb1b      	cbnz	r3, 8015bd6 <_vfiprintf_r+0x1d6>
 8015b8e:	9b03      	ldr	r3, [sp, #12]
 8015b90:	3307      	adds	r3, #7
 8015b92:	f023 0307 	bic.w	r3, r3, #7
 8015b96:	3308      	adds	r3, #8
 8015b98:	9303      	str	r3, [sp, #12]
 8015b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b9c:	443b      	add	r3, r7
 8015b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ba0:	e76a      	b.n	8015a78 <_vfiprintf_r+0x78>
 8015ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ba6:	460c      	mov	r4, r1
 8015ba8:	2001      	movs	r0, #1
 8015baa:	e7a8      	b.n	8015afe <_vfiprintf_r+0xfe>
 8015bac:	2300      	movs	r3, #0
 8015bae:	3401      	adds	r4, #1
 8015bb0:	9305      	str	r3, [sp, #20]
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	f04f 0c0a 	mov.w	ip, #10
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bbe:	3a30      	subs	r2, #48	@ 0x30
 8015bc0:	2a09      	cmp	r2, #9
 8015bc2:	d903      	bls.n	8015bcc <_vfiprintf_r+0x1cc>
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d0c6      	beq.n	8015b56 <_vfiprintf_r+0x156>
 8015bc8:	9105      	str	r1, [sp, #20]
 8015bca:	e7c4      	b.n	8015b56 <_vfiprintf_r+0x156>
 8015bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e7f0      	b.n	8015bb8 <_vfiprintf_r+0x1b8>
 8015bd6:	ab03      	add	r3, sp, #12
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	462a      	mov	r2, r5
 8015bdc:	4b12      	ldr	r3, [pc, #72]	@ (8015c28 <_vfiprintf_r+0x228>)
 8015bde:	a904      	add	r1, sp, #16
 8015be0:	4630      	mov	r0, r6
 8015be2:	f3af 8000 	nop.w
 8015be6:	4607      	mov	r7, r0
 8015be8:	1c78      	adds	r0, r7, #1
 8015bea:	d1d6      	bne.n	8015b9a <_vfiprintf_r+0x19a>
 8015bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015bee:	07d9      	lsls	r1, r3, #31
 8015bf0:	d405      	bmi.n	8015bfe <_vfiprintf_r+0x1fe>
 8015bf2:	89ab      	ldrh	r3, [r5, #12]
 8015bf4:	059a      	lsls	r2, r3, #22
 8015bf6:	d402      	bmi.n	8015bfe <_vfiprintf_r+0x1fe>
 8015bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bfa:	f7ff fa99 	bl	8015130 <__retarget_lock_release_recursive>
 8015bfe:	89ab      	ldrh	r3, [r5, #12]
 8015c00:	065b      	lsls	r3, r3, #25
 8015c02:	f53f af1f 	bmi.w	8015a44 <_vfiprintf_r+0x44>
 8015c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c08:	e71e      	b.n	8015a48 <_vfiprintf_r+0x48>
 8015c0a:	ab03      	add	r3, sp, #12
 8015c0c:	9300      	str	r3, [sp, #0]
 8015c0e:	462a      	mov	r2, r5
 8015c10:	4b05      	ldr	r3, [pc, #20]	@ (8015c28 <_vfiprintf_r+0x228>)
 8015c12:	a904      	add	r1, sp, #16
 8015c14:	4630      	mov	r0, r6
 8015c16:	f7ff fce5 	bl	80155e4 <_printf_i>
 8015c1a:	e7e4      	b.n	8015be6 <_vfiprintf_r+0x1e6>
 8015c1c:	08016efc 	.word	0x08016efc
 8015c20:	08016f06 	.word	0x08016f06
 8015c24:	00000000 	.word	0x00000000
 8015c28:	080159dd 	.word	0x080159dd
 8015c2c:	08016f02 	.word	0x08016f02

08015c30 <__swbuf_r>:
 8015c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c32:	460e      	mov	r6, r1
 8015c34:	4614      	mov	r4, r2
 8015c36:	4605      	mov	r5, r0
 8015c38:	b118      	cbz	r0, 8015c42 <__swbuf_r+0x12>
 8015c3a:	6a03      	ldr	r3, [r0, #32]
 8015c3c:	b90b      	cbnz	r3, 8015c42 <__swbuf_r+0x12>
 8015c3e:	f7ff f8b7 	bl	8014db0 <__sinit>
 8015c42:	69a3      	ldr	r3, [r4, #24]
 8015c44:	60a3      	str	r3, [r4, #8]
 8015c46:	89a3      	ldrh	r3, [r4, #12]
 8015c48:	071a      	lsls	r2, r3, #28
 8015c4a:	d501      	bpl.n	8015c50 <__swbuf_r+0x20>
 8015c4c:	6923      	ldr	r3, [r4, #16]
 8015c4e:	b943      	cbnz	r3, 8015c62 <__swbuf_r+0x32>
 8015c50:	4621      	mov	r1, r4
 8015c52:	4628      	mov	r0, r5
 8015c54:	f000 f82a 	bl	8015cac <__swsetup_r>
 8015c58:	b118      	cbz	r0, 8015c62 <__swbuf_r+0x32>
 8015c5a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015c5e:	4638      	mov	r0, r7
 8015c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c62:	6823      	ldr	r3, [r4, #0]
 8015c64:	6922      	ldr	r2, [r4, #16]
 8015c66:	1a98      	subs	r0, r3, r2
 8015c68:	6963      	ldr	r3, [r4, #20]
 8015c6a:	b2f6      	uxtb	r6, r6
 8015c6c:	4283      	cmp	r3, r0
 8015c6e:	4637      	mov	r7, r6
 8015c70:	dc05      	bgt.n	8015c7e <__swbuf_r+0x4e>
 8015c72:	4621      	mov	r1, r4
 8015c74:	4628      	mov	r0, r5
 8015c76:	f7ff fe59 	bl	801592c <_fflush_r>
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d1ed      	bne.n	8015c5a <__swbuf_r+0x2a>
 8015c7e:	68a3      	ldr	r3, [r4, #8]
 8015c80:	3b01      	subs	r3, #1
 8015c82:	60a3      	str	r3, [r4, #8]
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	1c5a      	adds	r2, r3, #1
 8015c88:	6022      	str	r2, [r4, #0]
 8015c8a:	701e      	strb	r6, [r3, #0]
 8015c8c:	6962      	ldr	r2, [r4, #20]
 8015c8e:	1c43      	adds	r3, r0, #1
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d004      	beq.n	8015c9e <__swbuf_r+0x6e>
 8015c94:	89a3      	ldrh	r3, [r4, #12]
 8015c96:	07db      	lsls	r3, r3, #31
 8015c98:	d5e1      	bpl.n	8015c5e <__swbuf_r+0x2e>
 8015c9a:	2e0a      	cmp	r6, #10
 8015c9c:	d1df      	bne.n	8015c5e <__swbuf_r+0x2e>
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f7ff fe43 	bl	801592c <_fflush_r>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d0d9      	beq.n	8015c5e <__swbuf_r+0x2e>
 8015caa:	e7d6      	b.n	8015c5a <__swbuf_r+0x2a>

08015cac <__swsetup_r>:
 8015cac:	b538      	push	{r3, r4, r5, lr}
 8015cae:	4b29      	ldr	r3, [pc, #164]	@ (8015d54 <__swsetup_r+0xa8>)
 8015cb0:	4605      	mov	r5, r0
 8015cb2:	6818      	ldr	r0, [r3, #0]
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	b118      	cbz	r0, 8015cc0 <__swsetup_r+0x14>
 8015cb8:	6a03      	ldr	r3, [r0, #32]
 8015cba:	b90b      	cbnz	r3, 8015cc0 <__swsetup_r+0x14>
 8015cbc:	f7ff f878 	bl	8014db0 <__sinit>
 8015cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cc4:	0719      	lsls	r1, r3, #28
 8015cc6:	d422      	bmi.n	8015d0e <__swsetup_r+0x62>
 8015cc8:	06da      	lsls	r2, r3, #27
 8015cca:	d407      	bmi.n	8015cdc <__swsetup_r+0x30>
 8015ccc:	2209      	movs	r2, #9
 8015cce:	602a      	str	r2, [r5, #0]
 8015cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cd4:	81a3      	strh	r3, [r4, #12]
 8015cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015cda:	e033      	b.n	8015d44 <__swsetup_r+0x98>
 8015cdc:	0758      	lsls	r0, r3, #29
 8015cde:	d512      	bpl.n	8015d06 <__swsetup_r+0x5a>
 8015ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015ce2:	b141      	cbz	r1, 8015cf6 <__swsetup_r+0x4a>
 8015ce4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ce8:	4299      	cmp	r1, r3
 8015cea:	d002      	beq.n	8015cf2 <__swsetup_r+0x46>
 8015cec:	4628      	mov	r0, r5
 8015cee:	f7ff fa61 	bl	80151b4 <_free_r>
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015cfc:	81a3      	strh	r3, [r4, #12]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	6063      	str	r3, [r4, #4]
 8015d02:	6923      	ldr	r3, [r4, #16]
 8015d04:	6023      	str	r3, [r4, #0]
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f043 0308 	orr.w	r3, r3, #8
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	6923      	ldr	r3, [r4, #16]
 8015d10:	b94b      	cbnz	r3, 8015d26 <__swsetup_r+0x7a>
 8015d12:	89a3      	ldrh	r3, [r4, #12]
 8015d14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015d1c:	d003      	beq.n	8015d26 <__swsetup_r+0x7a>
 8015d1e:	4621      	mov	r1, r4
 8015d20:	4628      	mov	r0, r5
 8015d22:	f000 f883 	bl	8015e2c <__smakebuf_r>
 8015d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d2a:	f013 0201 	ands.w	r2, r3, #1
 8015d2e:	d00a      	beq.n	8015d46 <__swsetup_r+0x9a>
 8015d30:	2200      	movs	r2, #0
 8015d32:	60a2      	str	r2, [r4, #8]
 8015d34:	6962      	ldr	r2, [r4, #20]
 8015d36:	4252      	negs	r2, r2
 8015d38:	61a2      	str	r2, [r4, #24]
 8015d3a:	6922      	ldr	r2, [r4, #16]
 8015d3c:	b942      	cbnz	r2, 8015d50 <__swsetup_r+0xa4>
 8015d3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015d42:	d1c5      	bne.n	8015cd0 <__swsetup_r+0x24>
 8015d44:	bd38      	pop	{r3, r4, r5, pc}
 8015d46:	0799      	lsls	r1, r3, #30
 8015d48:	bf58      	it	pl
 8015d4a:	6962      	ldrpl	r2, [r4, #20]
 8015d4c:	60a2      	str	r2, [r4, #8]
 8015d4e:	e7f4      	b.n	8015d3a <__swsetup_r+0x8e>
 8015d50:	2000      	movs	r0, #0
 8015d52:	e7f7      	b.n	8015d44 <__swsetup_r+0x98>
 8015d54:	200000c4 	.word	0x200000c4

08015d58 <_raise_r>:
 8015d58:	291f      	cmp	r1, #31
 8015d5a:	b538      	push	{r3, r4, r5, lr}
 8015d5c:	4605      	mov	r5, r0
 8015d5e:	460c      	mov	r4, r1
 8015d60:	d904      	bls.n	8015d6c <_raise_r+0x14>
 8015d62:	2316      	movs	r3, #22
 8015d64:	6003      	str	r3, [r0, #0]
 8015d66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d6a:	bd38      	pop	{r3, r4, r5, pc}
 8015d6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015d6e:	b112      	cbz	r2, 8015d76 <_raise_r+0x1e>
 8015d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d74:	b94b      	cbnz	r3, 8015d8a <_raise_r+0x32>
 8015d76:	4628      	mov	r0, r5
 8015d78:	f000 f830 	bl	8015ddc <_getpid_r>
 8015d7c:	4622      	mov	r2, r4
 8015d7e:	4601      	mov	r1, r0
 8015d80:	4628      	mov	r0, r5
 8015d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d86:	f000 b817 	b.w	8015db8 <_kill_r>
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	d00a      	beq.n	8015da4 <_raise_r+0x4c>
 8015d8e:	1c59      	adds	r1, r3, #1
 8015d90:	d103      	bne.n	8015d9a <_raise_r+0x42>
 8015d92:	2316      	movs	r3, #22
 8015d94:	6003      	str	r3, [r0, #0]
 8015d96:	2001      	movs	r0, #1
 8015d98:	e7e7      	b.n	8015d6a <_raise_r+0x12>
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015da0:	4620      	mov	r0, r4
 8015da2:	4798      	blx	r3
 8015da4:	2000      	movs	r0, #0
 8015da6:	e7e0      	b.n	8015d6a <_raise_r+0x12>

08015da8 <raise>:
 8015da8:	4b02      	ldr	r3, [pc, #8]	@ (8015db4 <raise+0xc>)
 8015daa:	4601      	mov	r1, r0
 8015dac:	6818      	ldr	r0, [r3, #0]
 8015dae:	f7ff bfd3 	b.w	8015d58 <_raise_r>
 8015db2:	bf00      	nop
 8015db4:	200000c4 	.word	0x200000c4

08015db8 <_kill_r>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4d07      	ldr	r5, [pc, #28]	@ (8015dd8 <_kill_r+0x20>)
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	4608      	mov	r0, r1
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	602b      	str	r3, [r5, #0]
 8015dc6:	f7ec fbb5 	bl	8002534 <_kill>
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	d102      	bne.n	8015dd4 <_kill_r+0x1c>
 8015dce:	682b      	ldr	r3, [r5, #0]
 8015dd0:	b103      	cbz	r3, 8015dd4 <_kill_r+0x1c>
 8015dd2:	6023      	str	r3, [r4, #0]
 8015dd4:	bd38      	pop	{r3, r4, r5, pc}
 8015dd6:	bf00      	nop
 8015dd8:	200093bc 	.word	0x200093bc

08015ddc <_getpid_r>:
 8015ddc:	f7ec bba2 	b.w	8002524 <_getpid>

08015de0 <__swhatbuf_r>:
 8015de0:	b570      	push	{r4, r5, r6, lr}
 8015de2:	460c      	mov	r4, r1
 8015de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015de8:	2900      	cmp	r1, #0
 8015dea:	b096      	sub	sp, #88	@ 0x58
 8015dec:	4615      	mov	r5, r2
 8015dee:	461e      	mov	r6, r3
 8015df0:	da0d      	bge.n	8015e0e <__swhatbuf_r+0x2e>
 8015df2:	89a3      	ldrh	r3, [r4, #12]
 8015df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015df8:	f04f 0100 	mov.w	r1, #0
 8015dfc:	bf14      	ite	ne
 8015dfe:	2340      	movne	r3, #64	@ 0x40
 8015e00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015e04:	2000      	movs	r0, #0
 8015e06:	6031      	str	r1, [r6, #0]
 8015e08:	602b      	str	r3, [r5, #0]
 8015e0a:	b016      	add	sp, #88	@ 0x58
 8015e0c:	bd70      	pop	{r4, r5, r6, pc}
 8015e0e:	466a      	mov	r2, sp
 8015e10:	f000 f848 	bl	8015ea4 <_fstat_r>
 8015e14:	2800      	cmp	r0, #0
 8015e16:	dbec      	blt.n	8015df2 <__swhatbuf_r+0x12>
 8015e18:	9901      	ldr	r1, [sp, #4]
 8015e1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015e1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015e22:	4259      	negs	r1, r3
 8015e24:	4159      	adcs	r1, r3
 8015e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015e2a:	e7eb      	b.n	8015e04 <__swhatbuf_r+0x24>

08015e2c <__smakebuf_r>:
 8015e2c:	898b      	ldrh	r3, [r1, #12]
 8015e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e30:	079d      	lsls	r5, r3, #30
 8015e32:	4606      	mov	r6, r0
 8015e34:	460c      	mov	r4, r1
 8015e36:	d507      	bpl.n	8015e48 <__smakebuf_r+0x1c>
 8015e38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015e3c:	6023      	str	r3, [r4, #0]
 8015e3e:	6123      	str	r3, [r4, #16]
 8015e40:	2301      	movs	r3, #1
 8015e42:	6163      	str	r3, [r4, #20]
 8015e44:	b003      	add	sp, #12
 8015e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e48:	ab01      	add	r3, sp, #4
 8015e4a:	466a      	mov	r2, sp
 8015e4c:	f7ff ffc8 	bl	8015de0 <__swhatbuf_r>
 8015e50:	9f00      	ldr	r7, [sp, #0]
 8015e52:	4605      	mov	r5, r0
 8015e54:	4639      	mov	r1, r7
 8015e56:	4630      	mov	r0, r6
 8015e58:	f7fe fd78 	bl	801494c <_malloc_r>
 8015e5c:	b948      	cbnz	r0, 8015e72 <__smakebuf_r+0x46>
 8015e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e62:	059a      	lsls	r2, r3, #22
 8015e64:	d4ee      	bmi.n	8015e44 <__smakebuf_r+0x18>
 8015e66:	f023 0303 	bic.w	r3, r3, #3
 8015e6a:	f043 0302 	orr.w	r3, r3, #2
 8015e6e:	81a3      	strh	r3, [r4, #12]
 8015e70:	e7e2      	b.n	8015e38 <__smakebuf_r+0xc>
 8015e72:	89a3      	ldrh	r3, [r4, #12]
 8015e74:	6020      	str	r0, [r4, #0]
 8015e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e7a:	81a3      	strh	r3, [r4, #12]
 8015e7c:	9b01      	ldr	r3, [sp, #4]
 8015e7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015e82:	b15b      	cbz	r3, 8015e9c <__smakebuf_r+0x70>
 8015e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f000 f81d 	bl	8015ec8 <_isatty_r>
 8015e8e:	b128      	cbz	r0, 8015e9c <__smakebuf_r+0x70>
 8015e90:	89a3      	ldrh	r3, [r4, #12]
 8015e92:	f023 0303 	bic.w	r3, r3, #3
 8015e96:	f043 0301 	orr.w	r3, r3, #1
 8015e9a:	81a3      	strh	r3, [r4, #12]
 8015e9c:	89a3      	ldrh	r3, [r4, #12]
 8015e9e:	431d      	orrs	r5, r3
 8015ea0:	81a5      	strh	r5, [r4, #12]
 8015ea2:	e7cf      	b.n	8015e44 <__smakebuf_r+0x18>

08015ea4 <_fstat_r>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	4d07      	ldr	r5, [pc, #28]	@ (8015ec4 <_fstat_r+0x20>)
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	4604      	mov	r4, r0
 8015eac:	4608      	mov	r0, r1
 8015eae:	4611      	mov	r1, r2
 8015eb0:	602b      	str	r3, [r5, #0]
 8015eb2:	f7ec fb9f 	bl	80025f4 <_fstat>
 8015eb6:	1c43      	adds	r3, r0, #1
 8015eb8:	d102      	bne.n	8015ec0 <_fstat_r+0x1c>
 8015eba:	682b      	ldr	r3, [r5, #0]
 8015ebc:	b103      	cbz	r3, 8015ec0 <_fstat_r+0x1c>
 8015ebe:	6023      	str	r3, [r4, #0]
 8015ec0:	bd38      	pop	{r3, r4, r5, pc}
 8015ec2:	bf00      	nop
 8015ec4:	200093bc 	.word	0x200093bc

08015ec8 <_isatty_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	4d06      	ldr	r5, [pc, #24]	@ (8015ee4 <_isatty_r+0x1c>)
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4604      	mov	r4, r0
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	602b      	str	r3, [r5, #0]
 8015ed4:	f7ec fb9e 	bl	8002614 <_isatty>
 8015ed8:	1c43      	adds	r3, r0, #1
 8015eda:	d102      	bne.n	8015ee2 <_isatty_r+0x1a>
 8015edc:	682b      	ldr	r3, [r5, #0]
 8015ede:	b103      	cbz	r3, 8015ee2 <_isatty_r+0x1a>
 8015ee0:	6023      	str	r3, [r4, #0]
 8015ee2:	bd38      	pop	{r3, r4, r5, pc}
 8015ee4:	200093bc 	.word	0x200093bc

08015ee8 <atan2>:
 8015ee8:	f000 b802 	b.w	8015ef0 <__ieee754_atan2>
 8015eec:	0000      	movs	r0, r0
	...

08015ef0 <__ieee754_atan2>:
 8015ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef4:	ec57 6b11 	vmov	r6, r7, d1
 8015ef8:	4273      	negs	r3, r6
 8015efa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8016078 <__ieee754_atan2+0x188>
 8015efe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8015f02:	4333      	orrs	r3, r6
 8015f04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f08:	4543      	cmp	r3, r8
 8015f0a:	ec51 0b10 	vmov	r0, r1, d0
 8015f0e:	4635      	mov	r5, r6
 8015f10:	d809      	bhi.n	8015f26 <__ieee754_atan2+0x36>
 8015f12:	4244      	negs	r4, r0
 8015f14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015f18:	4304      	orrs	r4, r0
 8015f1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015f1e:	4544      	cmp	r4, r8
 8015f20:	468e      	mov	lr, r1
 8015f22:	4681      	mov	r9, r0
 8015f24:	d907      	bls.n	8015f36 <__ieee754_atan2+0x46>
 8015f26:	4632      	mov	r2, r6
 8015f28:	463b      	mov	r3, r7
 8015f2a:	f7ea f9c7 	bl	80002bc <__adddf3>
 8015f2e:	ec41 0b10 	vmov	d0, r0, r1
 8015f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8015f3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8015f3e:	4334      	orrs	r4, r6
 8015f40:	d103      	bne.n	8015f4a <__ieee754_atan2+0x5a>
 8015f42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f46:	f000 b89b 	b.w	8016080 <atan>
 8015f4a:	17bc      	asrs	r4, r7, #30
 8015f4c:	f004 0402 	and.w	r4, r4, #2
 8015f50:	ea53 0909 	orrs.w	r9, r3, r9
 8015f54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f58:	d107      	bne.n	8015f6a <__ieee754_atan2+0x7a>
 8015f5a:	2c02      	cmp	r4, #2
 8015f5c:	d05f      	beq.n	801601e <__ieee754_atan2+0x12e>
 8015f5e:	2c03      	cmp	r4, #3
 8015f60:	d1e5      	bne.n	8015f2e <__ieee754_atan2+0x3e>
 8015f62:	a141      	add	r1, pc, #260	@ (adr r1, 8016068 <__ieee754_atan2+0x178>)
 8015f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f68:	e7e1      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8015f6a:	4315      	orrs	r5, r2
 8015f6c:	d106      	bne.n	8015f7c <__ieee754_atan2+0x8c>
 8015f6e:	f1be 0f00 	cmp.w	lr, #0
 8015f72:	da5f      	bge.n	8016034 <__ieee754_atan2+0x144>
 8015f74:	a13e      	add	r1, pc, #248	@ (adr r1, 8016070 <__ieee754_atan2+0x180>)
 8015f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f7a:	e7d8      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8015f7c:	4542      	cmp	r2, r8
 8015f7e:	d10f      	bne.n	8015fa0 <__ieee754_atan2+0xb0>
 8015f80:	4293      	cmp	r3, r2
 8015f82:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8015f86:	d107      	bne.n	8015f98 <__ieee754_atan2+0xa8>
 8015f88:	2c02      	cmp	r4, #2
 8015f8a:	d84c      	bhi.n	8016026 <__ieee754_atan2+0x136>
 8015f8c:	4b34      	ldr	r3, [pc, #208]	@ (8016060 <__ieee754_atan2+0x170>)
 8015f8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f96:	e7ca      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8015f98:	2c02      	cmp	r4, #2
 8015f9a:	d848      	bhi.n	801602e <__ieee754_atan2+0x13e>
 8015f9c:	4b31      	ldr	r3, [pc, #196]	@ (8016064 <__ieee754_atan2+0x174>)
 8015f9e:	e7f6      	b.n	8015f8e <__ieee754_atan2+0x9e>
 8015fa0:	4543      	cmp	r3, r8
 8015fa2:	d0e4      	beq.n	8015f6e <__ieee754_atan2+0x7e>
 8015fa4:	1a9b      	subs	r3, r3, r2
 8015fa6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8015faa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015fae:	da1e      	bge.n	8015fee <__ieee754_atan2+0xfe>
 8015fb0:	2f00      	cmp	r7, #0
 8015fb2:	da01      	bge.n	8015fb8 <__ieee754_atan2+0xc8>
 8015fb4:	323c      	adds	r2, #60	@ 0x3c
 8015fb6:	db1e      	blt.n	8015ff6 <__ieee754_atan2+0x106>
 8015fb8:	4632      	mov	r2, r6
 8015fba:	463b      	mov	r3, r7
 8015fbc:	f7ea fc5e 	bl	800087c <__aeabi_ddiv>
 8015fc0:	ec41 0b10 	vmov	d0, r0, r1
 8015fc4:	f000 f9f4 	bl	80163b0 <fabs>
 8015fc8:	f000 f85a 	bl	8016080 <atan>
 8015fcc:	ec51 0b10 	vmov	r0, r1, d0
 8015fd0:	2c01      	cmp	r4, #1
 8015fd2:	d013      	beq.n	8015ffc <__ieee754_atan2+0x10c>
 8015fd4:	2c02      	cmp	r4, #2
 8015fd6:	d015      	beq.n	8016004 <__ieee754_atan2+0x114>
 8015fd8:	2c00      	cmp	r4, #0
 8015fda:	d0a8      	beq.n	8015f2e <__ieee754_atan2+0x3e>
 8015fdc:	a318      	add	r3, pc, #96	@ (adr r3, 8016040 <__ieee754_atan2+0x150>)
 8015fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe2:	f7ea f969 	bl	80002b8 <__aeabi_dsub>
 8015fe6:	a318      	add	r3, pc, #96	@ (adr r3, 8016048 <__ieee754_atan2+0x158>)
 8015fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fec:	e014      	b.n	8016018 <__ieee754_atan2+0x128>
 8015fee:	a118      	add	r1, pc, #96	@ (adr r1, 8016050 <__ieee754_atan2+0x160>)
 8015ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ff4:	e7ec      	b.n	8015fd0 <__ieee754_atan2+0xe0>
 8015ff6:	2000      	movs	r0, #0
 8015ff8:	2100      	movs	r1, #0
 8015ffa:	e7e9      	b.n	8015fd0 <__ieee754_atan2+0xe0>
 8015ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016000:	4619      	mov	r1, r3
 8016002:	e794      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8016004:	a30e      	add	r3, pc, #56	@ (adr r3, 8016040 <__ieee754_atan2+0x150>)
 8016006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600a:	f7ea f955 	bl	80002b8 <__aeabi_dsub>
 801600e:	4602      	mov	r2, r0
 8016010:	460b      	mov	r3, r1
 8016012:	a10d      	add	r1, pc, #52	@ (adr r1, 8016048 <__ieee754_atan2+0x158>)
 8016014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016018:	f7ea f94e 	bl	80002b8 <__aeabi_dsub>
 801601c:	e787      	b.n	8015f2e <__ieee754_atan2+0x3e>
 801601e:	a10a      	add	r1, pc, #40	@ (adr r1, 8016048 <__ieee754_atan2+0x158>)
 8016020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016024:	e783      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8016026:	a10c      	add	r1, pc, #48	@ (adr r1, 8016058 <__ieee754_atan2+0x168>)
 8016028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801602c:	e77f      	b.n	8015f2e <__ieee754_atan2+0x3e>
 801602e:	2000      	movs	r0, #0
 8016030:	2100      	movs	r1, #0
 8016032:	e77c      	b.n	8015f2e <__ieee754_atan2+0x3e>
 8016034:	a106      	add	r1, pc, #24	@ (adr r1, 8016050 <__ieee754_atan2+0x160>)
 8016036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801603a:	e778      	b.n	8015f2e <__ieee754_atan2+0x3e>
 801603c:	f3af 8000 	nop.w
 8016040:	33145c07 	.word	0x33145c07
 8016044:	3ca1a626 	.word	0x3ca1a626
 8016048:	54442d18 	.word	0x54442d18
 801604c:	400921fb 	.word	0x400921fb
 8016050:	54442d18 	.word	0x54442d18
 8016054:	3ff921fb 	.word	0x3ff921fb
 8016058:	54442d18 	.word	0x54442d18
 801605c:	3fe921fb 	.word	0x3fe921fb
 8016060:	08016f48 	.word	0x08016f48
 8016064:	08016f30 	.word	0x08016f30
 8016068:	54442d18 	.word	0x54442d18
 801606c:	c00921fb 	.word	0xc00921fb
 8016070:	54442d18 	.word	0x54442d18
 8016074:	bff921fb 	.word	0xbff921fb
 8016078:	7ff00000 	.word	0x7ff00000
 801607c:	00000000 	.word	0x00000000

08016080 <atan>:
 8016080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016084:	ec55 4b10 	vmov	r4, r5, d0
 8016088:	4bbf      	ldr	r3, [pc, #764]	@ (8016388 <atan+0x308>)
 801608a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801608e:	429e      	cmp	r6, r3
 8016090:	46ab      	mov	fp, r5
 8016092:	d918      	bls.n	80160c6 <atan+0x46>
 8016094:	4bbd      	ldr	r3, [pc, #756]	@ (801638c <atan+0x30c>)
 8016096:	429e      	cmp	r6, r3
 8016098:	d801      	bhi.n	801609e <atan+0x1e>
 801609a:	d109      	bne.n	80160b0 <atan+0x30>
 801609c:	b144      	cbz	r4, 80160b0 <atan+0x30>
 801609e:	4622      	mov	r2, r4
 80160a0:	462b      	mov	r3, r5
 80160a2:	4620      	mov	r0, r4
 80160a4:	4629      	mov	r1, r5
 80160a6:	f7ea f909 	bl	80002bc <__adddf3>
 80160aa:	4604      	mov	r4, r0
 80160ac:	460d      	mov	r5, r1
 80160ae:	e006      	b.n	80160be <atan+0x3e>
 80160b0:	f1bb 0f00 	cmp.w	fp, #0
 80160b4:	f340 812b 	ble.w	801630e <atan+0x28e>
 80160b8:	a597      	add	r5, pc, #604	@ (adr r5, 8016318 <atan+0x298>)
 80160ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80160be:	ec45 4b10 	vmov	d0, r4, r5
 80160c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c6:	4bb2      	ldr	r3, [pc, #712]	@ (8016390 <atan+0x310>)
 80160c8:	429e      	cmp	r6, r3
 80160ca:	d813      	bhi.n	80160f4 <atan+0x74>
 80160cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80160d0:	429e      	cmp	r6, r3
 80160d2:	d80c      	bhi.n	80160ee <atan+0x6e>
 80160d4:	a392      	add	r3, pc, #584	@ (adr r3, 8016320 <atan+0x2a0>)
 80160d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160da:	4620      	mov	r0, r4
 80160dc:	4629      	mov	r1, r5
 80160de:	f7ea f8ed 	bl	80002bc <__adddf3>
 80160e2:	4bac      	ldr	r3, [pc, #688]	@ (8016394 <atan+0x314>)
 80160e4:	2200      	movs	r2, #0
 80160e6:	f7ea fd2f 	bl	8000b48 <__aeabi_dcmpgt>
 80160ea:	2800      	cmp	r0, #0
 80160ec:	d1e7      	bne.n	80160be <atan+0x3e>
 80160ee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80160f2:	e029      	b.n	8016148 <atan+0xc8>
 80160f4:	f000 f95c 	bl	80163b0 <fabs>
 80160f8:	4ba7      	ldr	r3, [pc, #668]	@ (8016398 <atan+0x318>)
 80160fa:	429e      	cmp	r6, r3
 80160fc:	ec55 4b10 	vmov	r4, r5, d0
 8016100:	f200 80bc 	bhi.w	801627c <atan+0x1fc>
 8016104:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8016108:	429e      	cmp	r6, r3
 801610a:	f200 809e 	bhi.w	801624a <atan+0x1ca>
 801610e:	4622      	mov	r2, r4
 8016110:	462b      	mov	r3, r5
 8016112:	4620      	mov	r0, r4
 8016114:	4629      	mov	r1, r5
 8016116:	f7ea f8d1 	bl	80002bc <__adddf3>
 801611a:	4b9e      	ldr	r3, [pc, #632]	@ (8016394 <atan+0x314>)
 801611c:	2200      	movs	r2, #0
 801611e:	f7ea f8cb 	bl	80002b8 <__aeabi_dsub>
 8016122:	2200      	movs	r2, #0
 8016124:	4606      	mov	r6, r0
 8016126:	460f      	mov	r7, r1
 8016128:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801612c:	4620      	mov	r0, r4
 801612e:	4629      	mov	r1, r5
 8016130:	f7ea f8c4 	bl	80002bc <__adddf3>
 8016134:	4602      	mov	r2, r0
 8016136:	460b      	mov	r3, r1
 8016138:	4630      	mov	r0, r6
 801613a:	4639      	mov	r1, r7
 801613c:	f7ea fb9e 	bl	800087c <__aeabi_ddiv>
 8016140:	f04f 0a00 	mov.w	sl, #0
 8016144:	4604      	mov	r4, r0
 8016146:	460d      	mov	r5, r1
 8016148:	4622      	mov	r2, r4
 801614a:	462b      	mov	r3, r5
 801614c:	4620      	mov	r0, r4
 801614e:	4629      	mov	r1, r5
 8016150:	f7ea fa6a 	bl	8000628 <__aeabi_dmul>
 8016154:	4602      	mov	r2, r0
 8016156:	460b      	mov	r3, r1
 8016158:	4680      	mov	r8, r0
 801615a:	4689      	mov	r9, r1
 801615c:	f7ea fa64 	bl	8000628 <__aeabi_dmul>
 8016160:	a371      	add	r3, pc, #452	@ (adr r3, 8016328 <atan+0x2a8>)
 8016162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016166:	4606      	mov	r6, r0
 8016168:	460f      	mov	r7, r1
 801616a:	f7ea fa5d 	bl	8000628 <__aeabi_dmul>
 801616e:	a370      	add	r3, pc, #448	@ (adr r3, 8016330 <atan+0x2b0>)
 8016170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016174:	f7ea f8a2 	bl	80002bc <__adddf3>
 8016178:	4632      	mov	r2, r6
 801617a:	463b      	mov	r3, r7
 801617c:	f7ea fa54 	bl	8000628 <__aeabi_dmul>
 8016180:	a36d      	add	r3, pc, #436	@ (adr r3, 8016338 <atan+0x2b8>)
 8016182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016186:	f7ea f899 	bl	80002bc <__adddf3>
 801618a:	4632      	mov	r2, r6
 801618c:	463b      	mov	r3, r7
 801618e:	f7ea fa4b 	bl	8000628 <__aeabi_dmul>
 8016192:	a36b      	add	r3, pc, #428	@ (adr r3, 8016340 <atan+0x2c0>)
 8016194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016198:	f7ea f890 	bl	80002bc <__adddf3>
 801619c:	4632      	mov	r2, r6
 801619e:	463b      	mov	r3, r7
 80161a0:	f7ea fa42 	bl	8000628 <__aeabi_dmul>
 80161a4:	a368      	add	r3, pc, #416	@ (adr r3, 8016348 <atan+0x2c8>)
 80161a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161aa:	f7ea f887 	bl	80002bc <__adddf3>
 80161ae:	4632      	mov	r2, r6
 80161b0:	463b      	mov	r3, r7
 80161b2:	f7ea fa39 	bl	8000628 <__aeabi_dmul>
 80161b6:	a366      	add	r3, pc, #408	@ (adr r3, 8016350 <atan+0x2d0>)
 80161b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161bc:	f7ea f87e 	bl	80002bc <__adddf3>
 80161c0:	4642      	mov	r2, r8
 80161c2:	464b      	mov	r3, r9
 80161c4:	f7ea fa30 	bl	8000628 <__aeabi_dmul>
 80161c8:	a363      	add	r3, pc, #396	@ (adr r3, 8016358 <atan+0x2d8>)
 80161ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ce:	4680      	mov	r8, r0
 80161d0:	4689      	mov	r9, r1
 80161d2:	4630      	mov	r0, r6
 80161d4:	4639      	mov	r1, r7
 80161d6:	f7ea fa27 	bl	8000628 <__aeabi_dmul>
 80161da:	a361      	add	r3, pc, #388	@ (adr r3, 8016360 <atan+0x2e0>)
 80161dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e0:	f7ea f86a 	bl	80002b8 <__aeabi_dsub>
 80161e4:	4632      	mov	r2, r6
 80161e6:	463b      	mov	r3, r7
 80161e8:	f7ea fa1e 	bl	8000628 <__aeabi_dmul>
 80161ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8016368 <atan+0x2e8>)
 80161ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f2:	f7ea f861 	bl	80002b8 <__aeabi_dsub>
 80161f6:	4632      	mov	r2, r6
 80161f8:	463b      	mov	r3, r7
 80161fa:	f7ea fa15 	bl	8000628 <__aeabi_dmul>
 80161fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8016370 <atan+0x2f0>)
 8016200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016204:	f7ea f858 	bl	80002b8 <__aeabi_dsub>
 8016208:	4632      	mov	r2, r6
 801620a:	463b      	mov	r3, r7
 801620c:	f7ea fa0c 	bl	8000628 <__aeabi_dmul>
 8016210:	a359      	add	r3, pc, #356	@ (adr r3, 8016378 <atan+0x2f8>)
 8016212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016216:	f7ea f84f 	bl	80002b8 <__aeabi_dsub>
 801621a:	4632      	mov	r2, r6
 801621c:	463b      	mov	r3, r7
 801621e:	f7ea fa03 	bl	8000628 <__aeabi_dmul>
 8016222:	4602      	mov	r2, r0
 8016224:	460b      	mov	r3, r1
 8016226:	4640      	mov	r0, r8
 8016228:	4649      	mov	r1, r9
 801622a:	f7ea f847 	bl	80002bc <__adddf3>
 801622e:	4622      	mov	r2, r4
 8016230:	462b      	mov	r3, r5
 8016232:	f7ea f9f9 	bl	8000628 <__aeabi_dmul>
 8016236:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801623a:	4602      	mov	r2, r0
 801623c:	460b      	mov	r3, r1
 801623e:	d148      	bne.n	80162d2 <atan+0x252>
 8016240:	4620      	mov	r0, r4
 8016242:	4629      	mov	r1, r5
 8016244:	f7ea f838 	bl	80002b8 <__aeabi_dsub>
 8016248:	e72f      	b.n	80160aa <atan+0x2a>
 801624a:	4b52      	ldr	r3, [pc, #328]	@ (8016394 <atan+0x314>)
 801624c:	2200      	movs	r2, #0
 801624e:	4620      	mov	r0, r4
 8016250:	4629      	mov	r1, r5
 8016252:	f7ea f831 	bl	80002b8 <__aeabi_dsub>
 8016256:	4b4f      	ldr	r3, [pc, #316]	@ (8016394 <atan+0x314>)
 8016258:	4606      	mov	r6, r0
 801625a:	460f      	mov	r7, r1
 801625c:	2200      	movs	r2, #0
 801625e:	4620      	mov	r0, r4
 8016260:	4629      	mov	r1, r5
 8016262:	f7ea f82b 	bl	80002bc <__adddf3>
 8016266:	4602      	mov	r2, r0
 8016268:	460b      	mov	r3, r1
 801626a:	4630      	mov	r0, r6
 801626c:	4639      	mov	r1, r7
 801626e:	f7ea fb05 	bl	800087c <__aeabi_ddiv>
 8016272:	f04f 0a01 	mov.w	sl, #1
 8016276:	4604      	mov	r4, r0
 8016278:	460d      	mov	r5, r1
 801627a:	e765      	b.n	8016148 <atan+0xc8>
 801627c:	4b47      	ldr	r3, [pc, #284]	@ (801639c <atan+0x31c>)
 801627e:	429e      	cmp	r6, r3
 8016280:	d21c      	bcs.n	80162bc <atan+0x23c>
 8016282:	4b47      	ldr	r3, [pc, #284]	@ (80163a0 <atan+0x320>)
 8016284:	2200      	movs	r2, #0
 8016286:	4620      	mov	r0, r4
 8016288:	4629      	mov	r1, r5
 801628a:	f7ea f815 	bl	80002b8 <__aeabi_dsub>
 801628e:	4b44      	ldr	r3, [pc, #272]	@ (80163a0 <atan+0x320>)
 8016290:	4606      	mov	r6, r0
 8016292:	460f      	mov	r7, r1
 8016294:	2200      	movs	r2, #0
 8016296:	4620      	mov	r0, r4
 8016298:	4629      	mov	r1, r5
 801629a:	f7ea f9c5 	bl	8000628 <__aeabi_dmul>
 801629e:	4b3d      	ldr	r3, [pc, #244]	@ (8016394 <atan+0x314>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	f7ea f80b 	bl	80002bc <__adddf3>
 80162a6:	4602      	mov	r2, r0
 80162a8:	460b      	mov	r3, r1
 80162aa:	4630      	mov	r0, r6
 80162ac:	4639      	mov	r1, r7
 80162ae:	f7ea fae5 	bl	800087c <__aeabi_ddiv>
 80162b2:	f04f 0a02 	mov.w	sl, #2
 80162b6:	4604      	mov	r4, r0
 80162b8:	460d      	mov	r5, r1
 80162ba:	e745      	b.n	8016148 <atan+0xc8>
 80162bc:	4622      	mov	r2, r4
 80162be:	462b      	mov	r3, r5
 80162c0:	4938      	ldr	r1, [pc, #224]	@ (80163a4 <atan+0x324>)
 80162c2:	2000      	movs	r0, #0
 80162c4:	f7ea fada 	bl	800087c <__aeabi_ddiv>
 80162c8:	f04f 0a03 	mov.w	sl, #3
 80162cc:	4604      	mov	r4, r0
 80162ce:	460d      	mov	r5, r1
 80162d0:	e73a      	b.n	8016148 <atan+0xc8>
 80162d2:	4b35      	ldr	r3, [pc, #212]	@ (80163a8 <atan+0x328>)
 80162d4:	4e35      	ldr	r6, [pc, #212]	@ (80163ac <atan+0x32c>)
 80162d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80162da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162de:	f7e9 ffeb 	bl	80002b8 <__aeabi_dsub>
 80162e2:	4622      	mov	r2, r4
 80162e4:	462b      	mov	r3, r5
 80162e6:	f7e9 ffe7 	bl	80002b8 <__aeabi_dsub>
 80162ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80162f6:	f7e9 ffdf 	bl	80002b8 <__aeabi_dsub>
 80162fa:	f1bb 0f00 	cmp.w	fp, #0
 80162fe:	4604      	mov	r4, r0
 8016300:	460d      	mov	r5, r1
 8016302:	f6bf aedc 	bge.w	80160be <atan+0x3e>
 8016306:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801630a:	461d      	mov	r5, r3
 801630c:	e6d7      	b.n	80160be <atan+0x3e>
 801630e:	a51c      	add	r5, pc, #112	@ (adr r5, 8016380 <atan+0x300>)
 8016310:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016314:	e6d3      	b.n	80160be <atan+0x3e>
 8016316:	bf00      	nop
 8016318:	54442d18 	.word	0x54442d18
 801631c:	3ff921fb 	.word	0x3ff921fb
 8016320:	8800759c 	.word	0x8800759c
 8016324:	7e37e43c 	.word	0x7e37e43c
 8016328:	e322da11 	.word	0xe322da11
 801632c:	3f90ad3a 	.word	0x3f90ad3a
 8016330:	24760deb 	.word	0x24760deb
 8016334:	3fa97b4b 	.word	0x3fa97b4b
 8016338:	a0d03d51 	.word	0xa0d03d51
 801633c:	3fb10d66 	.word	0x3fb10d66
 8016340:	c54c206e 	.word	0xc54c206e
 8016344:	3fb745cd 	.word	0x3fb745cd
 8016348:	920083ff 	.word	0x920083ff
 801634c:	3fc24924 	.word	0x3fc24924
 8016350:	5555550d 	.word	0x5555550d
 8016354:	3fd55555 	.word	0x3fd55555
 8016358:	2c6a6c2f 	.word	0x2c6a6c2f
 801635c:	bfa2b444 	.word	0xbfa2b444
 8016360:	52defd9a 	.word	0x52defd9a
 8016364:	3fadde2d 	.word	0x3fadde2d
 8016368:	af749a6d 	.word	0xaf749a6d
 801636c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016370:	fe231671 	.word	0xfe231671
 8016374:	3fbc71c6 	.word	0x3fbc71c6
 8016378:	9998ebc4 	.word	0x9998ebc4
 801637c:	3fc99999 	.word	0x3fc99999
 8016380:	54442d18 	.word	0x54442d18
 8016384:	bff921fb 	.word	0xbff921fb
 8016388:	440fffff 	.word	0x440fffff
 801638c:	7ff00000 	.word	0x7ff00000
 8016390:	3fdbffff 	.word	0x3fdbffff
 8016394:	3ff00000 	.word	0x3ff00000
 8016398:	3ff2ffff 	.word	0x3ff2ffff
 801639c:	40038000 	.word	0x40038000
 80163a0:	3ff80000 	.word	0x3ff80000
 80163a4:	bff00000 	.word	0xbff00000
 80163a8:	08016f60 	.word	0x08016f60
 80163ac:	08016f80 	.word	0x08016f80

080163b0 <fabs>:
 80163b0:	ec51 0b10 	vmov	r0, r1, d0
 80163b4:	4602      	mov	r2, r0
 80163b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80163ba:	ec43 2b10 	vmov	d0, r2, r3
 80163be:	4770      	bx	lr

080163c0 <_init>:
 80163c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163c2:	bf00      	nop
 80163c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163c6:	bc08      	pop	{r3}
 80163c8:	469e      	mov	lr, r3
 80163ca:	4770      	bx	lr

080163cc <_fini>:
 80163cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ce:	bf00      	nop
 80163d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163d2:	bc08      	pop	{r3}
 80163d4:	469e      	mov	lr, r3
 80163d6:	4770      	bx	lr
